begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_comment
comment|/**  * Utilities for zipping directories and adding existing directories to zips.  */
end_comment

begin_class
DECL|class|ZipUtilities
specifier|public
specifier|final
class|class
name|ZipUtilities
block|{
DECL|method|ZipUtilities ()
specifier|private
name|ZipUtilities
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class should not be "
operator|+
literal|"instantiated!"
argument_list|)
throw|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZipUtilities
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|method|zipDir (String srcDir, String dstFile)
specifier|public
specifier|static
name|String
name|zipDir
parameter_list|(
name|String
name|srcDir
parameter_list|,
name|String
name|dstFile
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|dstFile
argument_list|)
decl_stmt|;
name|ZipOutputStream
name|zos
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|fos
argument_list|)
decl_stmt|;
name|File
name|srcFile
init|=
operator|new
name|File
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compressing directory {}"
argument_list|,
name|srcDir
argument_list|)
expr_stmt|;
name|addDirToZip
argument_list|(
name|zos
argument_list|,
name|srcFile
argument_list|,
name|srcFile
argument_list|)
expr_stmt|;
comment|// close the ZipOutputStream
name|zos
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Compressed directory {} to file: {}"
argument_list|,
name|srcDir
argument_list|,
name|dstFile
argument_list|)
expr_stmt|;
return|return
name|dstFile
return|;
block|}
DECL|method|addDirToZip (ZipOutputStream zos, File srcFile, File base)
specifier|private
specifier|static
name|void
name|addDirToZip
parameter_list|(
name|ZipOutputStream
name|zos
parameter_list|,
name|File
name|srcFile
parameter_list|,
name|File
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|File
index|[]
name|files
init|=
name|srcFile
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
comment|// if it's directory, add recursively
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|addDirToZip
argument_list|(
name|zos
argument_list|,
name|file
argument_list|,
name|base
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|String
name|name
init|=
name|base
operator|.
name|toURI
argument_list|()
operator|.
name|relativize
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding file {} to zip"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|zos
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|length
decl_stmt|;
while|while
condition|(
operator|(
name|length
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|zos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|zos
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|zos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

