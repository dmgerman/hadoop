begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|RemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|FileSystemOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|FileSystemOperations
operator|.
name|needHdfs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
operator|.
name|EnvironmentUtilities
operator|.
name|appendToEnv
import|;
end_import

begin_comment
comment|/**  * This class holds all dependencies in order to localize dependencies  * for containers.  */
end_comment

begin_class
DECL|class|Localizer
specifier|public
class|class
name|Localizer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Localizer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fsOperations
specifier|private
specifier|final
name|FileSystemOperations
name|fsOperations
decl_stmt|;
DECL|field|remoteDirectoryManager
specifier|private
specifier|final
name|RemoteDirectoryManager
name|remoteDirectoryManager
decl_stmt|;
DECL|field|parameters
specifier|private
specifier|final
name|RunJobParameters
name|parameters
decl_stmt|;
DECL|method|Localizer (FileSystemOperations fsOperations, RemoteDirectoryManager remoteDirectoryManager, RunJobParameters parameters)
specifier|public
name|Localizer
parameter_list|(
name|FileSystemOperations
name|fsOperations
parameter_list|,
name|RemoteDirectoryManager
name|remoteDirectoryManager
parameter_list|,
name|RunJobParameters
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|fsOperations
operator|=
name|fsOperations
expr_stmt|;
name|this
operator|.
name|remoteDirectoryManager
operator|=
name|remoteDirectoryManager
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
comment|/**    * Localize dependencies for all containers.    * If remoteUri is a local directory,    * we'll zip it, upload to HDFS staging dir HDFS.    * If remoteUri is directory, we'll download it, zip it and upload    * to HDFS.    * If localFilePath is ".", we'll use remoteUri's file/dir name    * */
DECL|method|handleLocalizations (Service service)
specifier|public
name|void
name|handleLocalizations
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Handle localizations
name|Path
name|stagingDir
init|=
name|remoteDirectoryManager
operator|.
name|getJobStagingArea
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Localization
argument_list|>
name|localizations
init|=
name|parameters
operator|.
name|getLocalizations
argument_list|()
decl_stmt|;
name|String
name|remoteUri
decl_stmt|;
name|String
name|containerLocalPath
decl_stmt|;
comment|// Check to fail fast
for|for
control|(
name|Localization
name|loc
range|:
name|localizations
control|)
block|{
name|remoteUri
operator|=
name|loc
operator|.
name|getRemoteUri
argument_list|()
expr_stmt|;
name|Path
name|resourceToLocalize
init|=
operator|new
name|Path
argument_list|(
name|remoteUri
argument_list|)
decl_stmt|;
comment|// Check if remoteUri exists
if|if
condition|(
name|remoteDirectoryManager
operator|.
name|isRemote
argument_list|(
name|remoteUri
argument_list|)
condition|)
block|{
comment|// check if exists
if|if
condition|(
operator|!
name|remoteDirectoryManager
operator|.
name|existsRemoteFile
argument_list|(
name|resourceToLocalize
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|remoteUri
operator|+
literal|" doesn't exists."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Check if exists
name|File
name|localFile
init|=
operator|new
name|File
argument_list|(
name|remoteUri
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|remoteUri
operator|+
literal|" doesn't exists."
argument_list|)
throw|;
block|}
block|}
comment|// check remote file size
name|fsOperations
operator|.
name|validFileSize
argument_list|(
name|remoteUri
argument_list|)
expr_stmt|;
block|}
comment|// Start download remote if needed and upload to HDFS
for|for
control|(
name|Localization
name|loc
range|:
name|localizations
control|)
block|{
name|remoteUri
operator|=
name|loc
operator|.
name|getRemoteUri
argument_list|()
expr_stmt|;
name|containerLocalPath
operator|=
name|loc
operator|.
name|getLocalPath
argument_list|()
expr_stmt|;
name|String
name|srcFileStr
init|=
name|remoteUri
decl_stmt|;
name|ConfigFile
operator|.
name|TypeEnum
name|destFileType
init|=
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|STATIC
decl_stmt|;
name|Path
name|resourceToLocalize
init|=
operator|new
name|Path
argument_list|(
name|remoteUri
argument_list|)
decl_stmt|;
name|boolean
name|needUploadToHDFS
init|=
literal|true
decl_stmt|;
comment|// Special handling of remoteUri directory
name|boolean
name|needDeleteTempFile
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|remoteDirectoryManager
operator|.
name|isDir
argument_list|(
name|remoteUri
argument_list|)
condition|)
block|{
name|destFileType
operator|=
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
expr_stmt|;
name|srcFileStr
operator|=
name|fsOperations
operator|.
name|downloadAndZip
argument_list|(
name|remoteUri
argument_list|,
name|getLastNameFromPath
argument_list|(
name|srcFileStr
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remoteDirectoryManager
operator|.
name|isRemote
argument_list|(
name|remoteUri
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|needHdfs
argument_list|(
name|remoteUri
argument_list|)
condition|)
block|{
comment|// Non HDFS remote uri. Non directory, no need to zip
name|srcFileStr
operator|=
name|fsOperations
operator|.
name|downloadAndZip
argument_list|(
name|remoteUri
argument_list|,
name|getLastNameFromPath
argument_list|(
name|srcFileStr
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|needDeleteTempFile
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// HDFS file, no need to upload
name|needUploadToHDFS
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// Upload file to HDFS
if|if
condition|(
name|needUploadToHDFS
condition|)
block|{
name|resourceToLocalize
operator|=
name|fsOperations
operator|.
name|uploadToRemoteFile
argument_list|(
name|stagingDir
argument_list|,
name|srcFileStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needDeleteTempFile
condition|)
block|{
name|fsOperations
operator|.
name|deleteFiles
argument_list|(
name|srcFileStr
argument_list|)
expr_stmt|;
block|}
comment|// Remove .zip from zipped dir name
if|if
condition|(
name|destFileType
operator|==
name|ConfigFile
operator|.
name|TypeEnum
operator|.
name|ARCHIVE
operator|&&
name|srcFileStr
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
comment|// Delete local zip file
name|fsOperations
operator|.
name|deleteFiles
argument_list|(
name|srcFileStr
argument_list|)
expr_stmt|;
name|int
name|suffixIndex
init|=
name|srcFileStr
operator|.
name|lastIndexOf
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
name|srcFileStr
operator|=
name|srcFileStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|suffixIndex
argument_list|)
expr_stmt|;
block|}
comment|// If provided, use the name of local uri
if|if
condition|(
operator|!
name|containerLocalPath
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|&&
operator|!
name|containerLocalPath
operator|.
name|equals
argument_list|(
literal|"./"
argument_list|)
condition|)
block|{
comment|// Change the YARN localized file name to what'll used in container
name|srcFileStr
operator|=
name|getLastNameFromPath
argument_list|(
name|containerLocalPath
argument_list|)
expr_stmt|;
block|}
name|String
name|localizedName
init|=
name|getLastNameFromPath
argument_list|(
name|srcFileStr
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The file/dir to be localized is {}"
argument_list|,
name|resourceToLocalize
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Its localized file name will be {}"
argument_list|,
name|localizedName
argument_list|)
expr_stmt|;
name|service
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ConfigFile
argument_list|()
operator|.
name|srcFile
argument_list|(
name|resourceToLocalize
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|destFile
argument_list|(
name|localizedName
argument_list|)
operator|.
name|type
argument_list|(
name|destFileType
argument_list|)
argument_list|)
expr_stmt|;
comment|// set mounts
comment|// if mount path is absolute, just use it.
comment|// if relative, no need to mount explicitly
if|if
condition|(
name|containerLocalPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|String
name|mountStr
init|=
name|getLastNameFromPath
argument_list|(
name|srcFileStr
argument_list|)
operator|+
literal|":"
operator|+
name|containerLocalPath
operator|+
literal|":"
operator|+
name|loc
operator|.
name|getMountPermission
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Add bind-mount string {}"
argument_list|,
name|mountStr
argument_list|)
expr_stmt|;
name|appendToEnv
argument_list|(
name|service
argument_list|,
name|EnvironmentUtilities
operator|.
name|ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME
argument_list|,
name|mountStr
argument_list|,
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getLastNameFromPath (String srcFileStr)
specifier|private
name|String
name|getLastNameFromPath
parameter_list|(
name|String
name|srcFileStr
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|srcFileStr
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

