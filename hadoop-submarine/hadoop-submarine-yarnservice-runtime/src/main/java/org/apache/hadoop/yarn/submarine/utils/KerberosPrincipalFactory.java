begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|RemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|FileSystemOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Simple factory that creates a {@link KerberosPrincipal}.  */
end_comment

begin_class
DECL|class|KerberosPrincipalFactory
specifier|public
specifier|final
class|class
name|KerberosPrincipalFactory
block|{
DECL|method|KerberosPrincipalFactory ()
specifier|private
name|KerberosPrincipalFactory
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class should not be "
operator|+
literal|"instantiated!"
argument_list|)
throw|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KerberosPrincipalFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|create (FileSystemOperations fsOperations, RemoteDirectoryManager remoteDirectoryManager, RunJobParameters parameters)
specifier|public
specifier|static
name|KerberosPrincipal
name|create
parameter_list|(
name|FileSystemOperations
name|fsOperations
parameter_list|,
name|RemoteDirectoryManager
name|remoteDirectoryManager
parameter_list|,
name|RunJobParameters
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|fsOperations
argument_list|,
literal|"FileSystemOperations must not be null!"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|remoteDirectoryManager
argument_list|,
literal|"RemoteDirectoryManager must not be null!"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|parameters
argument_list|,
literal|"Parameters must not be null!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|parameters
operator|.
name|getKeytab
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|parameters
operator|.
name|getPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|keytab
init|=
name|parameters
operator|.
name|getKeytab
argument_list|()
decl_stmt|;
name|String
name|principal
init|=
name|parameters
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|isDistributeKeytab
argument_list|()
condition|)
block|{
return|return
name|handleDistributedKeytab
argument_list|(
name|fsOperations
argument_list|,
name|remoteDirectoryManager
argument_list|,
name|parameters
argument_list|,
name|keytab
argument_list|,
name|principal
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|handleNormalKeytab
argument_list|(
name|keytab
argument_list|,
name|principal
argument_list|)
return|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Principal and keytab was null or empty, "
operator|+
literal|"returning null KerberosPrincipal!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|handleDistributedKeytab ( FileSystemOperations fsOperations, RemoteDirectoryManager remoteDirectoryManager, RunJobParameters parameters, String keytab, String principal)
specifier|private
specifier|static
name|KerberosPrincipal
name|handleDistributedKeytab
parameter_list|(
name|FileSystemOperations
name|fsOperations
parameter_list|,
name|RemoteDirectoryManager
name|remoteDirectoryManager
parameter_list|,
name|RunJobParameters
name|parameters
parameter_list|,
name|String
name|keytab
parameter_list|,
name|String
name|principal
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|stagingDir
init|=
name|remoteDirectoryManager
operator|.
name|getJobStagingArea
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Path
name|remoteKeytabPath
init|=
name|fsOperations
operator|.
name|uploadToRemoteFile
argument_list|(
name|stagingDir
argument_list|,
name|keytab
argument_list|)
decl_stmt|;
comment|// Only the owner has read access
name|fsOperations
operator|.
name|setPermission
argument_list|(
name|remoteKeytabPath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"400"
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|KerberosPrincipal
argument_list|()
operator|.
name|keytab
argument_list|(
name|remoteKeytabPath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|principalName
argument_list|(
name|principal
argument_list|)
return|;
block|}
DECL|method|handleNormalKeytab (String keytab, String principal)
specifier|private
specifier|static
name|KerberosPrincipal
name|handleNormalKeytab
parameter_list|(
name|String
name|keytab
parameter_list|,
name|String
name|principal
parameter_list|)
block|{
if|if
condition|(
operator|!
name|keytab
operator|.
name|startsWith
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|keytab
operator|=
literal|"file://"
operator|+
name|keytab
expr_stmt|;
block|}
return|return
operator|new
name|KerberosPrincipal
argument_list|()
operator|.
name|keytab
argument_list|(
name|keytab
argument_list|)
operator|.
name|principalName
argument_list|(
name|principal
argument_list|)
return|;
block|}
block|}
end_class

end_unit

