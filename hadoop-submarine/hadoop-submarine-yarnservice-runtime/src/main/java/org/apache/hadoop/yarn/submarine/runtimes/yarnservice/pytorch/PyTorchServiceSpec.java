begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice.pytorch
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|pytorch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|PyTorchRunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
operator|.
name|Framework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|AbstractServiceSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|FileSystemOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|ServiceWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|command
operator|.
name|PyTorchLaunchCommandFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
operator|.
name|Localizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class contains all the logic to create an instance  * of a {@link Service} object for PyTorch.  * Please note that currently, only single-node (non-distributed)  * support is implemented for PyTorch.  */
end_comment

begin_class
DECL|class|PyTorchServiceSpec
specifier|public
class|class
name|PyTorchServiceSpec
extends|extends
name|AbstractServiceSpec
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PyTorchServiceSpec
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//this field is needed in the future!
DECL|field|pyTorchParameters
specifier|private
specifier|final
name|PyTorchRunJobParameters
name|pyTorchParameters
decl_stmt|;
DECL|method|PyTorchServiceSpec (PyTorchRunJobParameters parameters, ClientContext clientContext, FileSystemOperations fsOperations, PyTorchLaunchCommandFactory launchCommandFactory, Localizer localizer)
specifier|public
name|PyTorchServiceSpec
parameter_list|(
name|PyTorchRunJobParameters
name|parameters
parameter_list|,
name|ClientContext
name|clientContext
parameter_list|,
name|FileSystemOperations
name|fsOperations
parameter_list|,
name|PyTorchLaunchCommandFactory
name|launchCommandFactory
parameter_list|,
name|Localizer
name|localizer
parameter_list|)
block|{
name|super
argument_list|(
name|parameters
argument_list|,
name|clientContext
argument_list|,
name|fsOperations
argument_list|,
name|launchCommandFactory
argument_list|,
name|localizer
argument_list|)
expr_stmt|;
name|this
operator|.
name|pyTorchParameters
operator|=
name|parameters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create ()
specifier|public
name|ServiceWrapper
name|create
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating PyTorch service spec"
argument_list|)
expr_stmt|;
name|ServiceWrapper
name|serviceWrapper
init|=
name|createServiceSpecWrapper
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|getNumWorkers
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addWorkerComponents
argument_list|(
name|serviceWrapper
argument_list|,
name|Framework
operator|.
name|PYTORCH
argument_list|)
expr_stmt|;
block|}
comment|// After all components added, handle quicklinks
name|handleQuicklinks
argument_list|(
name|serviceWrapper
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|serviceWrapper
return|;
block|}
block|}
end_class

end_unit

