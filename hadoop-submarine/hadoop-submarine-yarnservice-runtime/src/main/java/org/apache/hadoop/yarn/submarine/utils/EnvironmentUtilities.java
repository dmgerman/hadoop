begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
import|;
end_import

begin_comment
comment|/**  * Utilities for environment variable related operations  * for {@link Service} objects.  */
end_comment

begin_class
DECL|class|EnvironmentUtilities
specifier|public
specifier|final
class|class
name|EnvironmentUtilities
block|{
DECL|method|EnvironmentUtilities ()
specifier|private
name|EnvironmentUtilities
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class should not be "
operator|+
literal|"instantiated!"
argument_list|)
throw|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EnvironmentUtilities
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME
specifier|static
specifier|final
name|String
name|ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME
init|=
literal|"YARN_CONTAINER_RUNTIME_DOCKER_MOUNTS"
decl_stmt|;
DECL|field|MOUNTS_DELIM
specifier|private
specifier|static
specifier|final
name|String
name|MOUNTS_DELIM
init|=
literal|","
decl_stmt|;
DECL|field|ENV_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|ENV_SEPARATOR
init|=
literal|"="
decl_stmt|;
DECL|field|ETC_PASSWD_MOUNT_STRING
specifier|private
specifier|static
specifier|final
name|String
name|ETC_PASSWD_MOUNT_STRING
init|=
literal|"/etc/passwd:/etc/passwd:ro"
decl_stmt|;
DECL|field|KERBEROS_CONF_MOUNT_STRING
specifier|private
specifier|static
specifier|final
name|String
name|KERBEROS_CONF_MOUNT_STRING
init|=
literal|"/etc/krb5.conf:/etc/krb5.conf:ro"
decl_stmt|;
DECL|field|ENV_VAR_DELIM
specifier|private
specifier|static
specifier|final
name|String
name|ENV_VAR_DELIM
init|=
literal|":"
decl_stmt|;
comment|/**    * Extracts value from a string representation of an environment variable.    * @param envVar The environment variable in 'key=value' format.    * @return The value of the environment variable    */
DECL|method|getValueOfEnvironment (String envVar)
specifier|public
specifier|static
name|String
name|getValueOfEnvironment
parameter_list|(
name|String
name|envVar
parameter_list|)
block|{
if|if
condition|(
name|envVar
operator|==
literal|null
operator|||
operator|!
name|envVar
operator|.
name|contains
argument_list|(
name|ENV_SEPARATOR
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|envVar
operator|.
name|substring
argument_list|(
name|envVar
operator|.
name|indexOf
argument_list|(
name|ENV_SEPARATOR
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
DECL|method|handleServiceEnvs (Service service, Configuration yarnConfig, List<String> envVars)
specifier|public
specifier|static
name|void
name|handleServiceEnvs
parameter_list|(
name|Service
name|service
parameter_list|,
name|Configuration
name|yarnConfig
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|envVars
parameter_list|)
block|{
if|if
condition|(
name|envVars
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|envVarPair
range|:
name|envVars
control|)
block|{
name|String
name|key
decl_stmt|,
name|value
decl_stmt|;
if|if
condition|(
name|envVarPair
operator|.
name|contains
argument_list|(
name|ENV_SEPARATOR
argument_list|)
condition|)
block|{
name|int
name|idx
init|=
name|envVarPair
operator|.
name|indexOf
argument_list|(
name|ENV_SEPARATOR
argument_list|)
decl_stmt|;
name|key
operator|=
name|envVarPair
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|value
operator|=
name|envVarPair
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found environment variable with unusual format: '{}'"
argument_list|,
name|envVarPair
argument_list|)
expr_stmt|;
comment|// No "=" found so use the whole key
name|key
operator|=
name|envVarPair
expr_stmt|;
name|value
operator|=
literal|""
expr_stmt|;
block|}
name|appendToEnv
argument_list|(
name|service
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|ENV_VAR_DELIM
argument_list|)
expr_stmt|;
block|}
block|}
name|appendOtherConfigs
argument_list|(
name|service
argument_list|,
name|yarnConfig
argument_list|)
expr_stmt|;
block|}
comment|/**    * Appends other configs like /etc/passwd, /etc/krb5.conf.    * @param service    * @param yarnConfig    */
DECL|method|appendOtherConfigs (Service service, Configuration yarnConfig)
specifier|private
specifier|static
name|void
name|appendOtherConfigs
parameter_list|(
name|Service
name|service
parameter_list|,
name|Configuration
name|yarnConfig
parameter_list|)
block|{
name|appendToEnv
argument_list|(
name|service
argument_list|,
name|ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME
argument_list|,
name|ETC_PASSWD_MOUNT_STRING
argument_list|,
name|MOUNTS_DELIM
argument_list|)
expr_stmt|;
name|String
name|authentication
init|=
name|yarnConfig
operator|.
name|get
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|authentication
operator|!=
literal|null
operator|&&
name|authentication
operator|.
name|equals
argument_list|(
literal|"kerberos"
argument_list|)
condition|)
block|{
name|appendToEnv
argument_list|(
name|service
argument_list|,
name|ENV_DOCKER_MOUNTS_FOR_CONTAINER_RUNTIME
argument_list|,
name|KERBEROS_CONF_MOUNT_STRING
argument_list|,
name|MOUNTS_DELIM
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendToEnv (Service service, String key, String value, String delim)
specifier|static
name|void
name|appendToEnv
parameter_list|(
name|Service
name|service
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
name|service
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnv
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|env
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|existingValue
init|=
name|env
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|existingValue
operator|.
name|endsWith
argument_list|(
name|delim
argument_list|)
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|existingValue
operator|+
name|delim
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|env
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|existingValue
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

