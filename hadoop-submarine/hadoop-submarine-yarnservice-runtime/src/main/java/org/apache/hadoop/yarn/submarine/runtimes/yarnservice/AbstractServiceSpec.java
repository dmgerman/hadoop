begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|Quicklink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
operator|.
name|Framework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|PyTorchRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|TensorFlowRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|RemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|command
operator|.
name|LaunchCommandFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
operator|.
name|KerberosPrincipalFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
operator|.
name|Localizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|TensorFlowCommons
operator|.
name|getDNSDomain
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|tensorflow
operator|.
name|TensorFlowCommons
operator|.
name|getUserName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
operator|.
name|DockerUtilities
operator|.
name|getDockerArtifact
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
operator|.
name|EnvironmentUtilities
operator|.
name|handleServiceEnvs
import|;
end_import

begin_comment
comment|/**  * Abstract base class that supports creating service specs for Native Service.  */
end_comment

begin_class
DECL|class|AbstractServiceSpec
specifier|public
specifier|abstract
class|class
name|AbstractServiceSpec
implements|implements
name|ServiceSpec
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractServiceSpec
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|parameters
specifier|protected
specifier|final
name|RunJobParameters
name|parameters
decl_stmt|;
DECL|field|fsOperations
specifier|protected
specifier|final
name|FileSystemOperations
name|fsOperations
decl_stmt|;
DECL|field|localizer
specifier|private
specifier|final
name|Localizer
name|localizer
decl_stmt|;
DECL|field|remoteDirectoryManager
specifier|protected
specifier|final
name|RemoteDirectoryManager
name|remoteDirectoryManager
decl_stmt|;
DECL|field|yarnConfig
specifier|protected
specifier|final
name|Configuration
name|yarnConfig
decl_stmt|;
DECL|field|launchCommandFactory
specifier|protected
specifier|final
name|LaunchCommandFactory
name|launchCommandFactory
decl_stmt|;
DECL|field|workerFactory
specifier|private
specifier|final
name|WorkerComponentFactory
name|workerFactory
decl_stmt|;
DECL|method|AbstractServiceSpec (RunJobParameters parameters, ClientContext clientContext, FileSystemOperations fsOperations, LaunchCommandFactory launchCommandFactory, Localizer localizer)
specifier|public
name|AbstractServiceSpec
parameter_list|(
name|RunJobParameters
name|parameters
parameter_list|,
name|ClientContext
name|clientContext
parameter_list|,
name|FileSystemOperations
name|fsOperations
parameter_list|,
name|LaunchCommandFactory
name|launchCommandFactory
parameter_list|,
name|Localizer
name|localizer
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|this
operator|.
name|remoteDirectoryManager
operator|=
name|clientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|yarnConfig
operator|=
name|clientContext
operator|.
name|getYarnConfig
argument_list|()
expr_stmt|;
name|this
operator|.
name|fsOperations
operator|=
name|fsOperations
expr_stmt|;
name|this
operator|.
name|localizer
operator|=
name|localizer
expr_stmt|;
name|this
operator|.
name|launchCommandFactory
operator|=
name|launchCommandFactory
expr_stmt|;
name|this
operator|.
name|workerFactory
operator|=
operator|new
name|WorkerComponentFactory
argument_list|(
name|fsOperations
argument_list|,
name|remoteDirectoryManager
argument_list|,
name|parameters
argument_list|,
name|launchCommandFactory
argument_list|,
name|yarnConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|createServiceSpecWrapper ()
specifier|protected
name|ServiceWrapper
name|createServiceSpecWrapper
parameter_list|()
throws|throws
name|IOException
block|{
name|Service
name|serviceSpec
init|=
operator|new
name|Service
argument_list|()
decl_stmt|;
name|serviceSpec
operator|.
name|setName
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serviceSpec
operator|.
name|setVersion
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|serviceSpec
operator|.
name|setArtifact
argument_list|(
name|getDockerArtifact
argument_list|(
name|parameters
operator|.
name|getDockerImageName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|serviceSpec
operator|.
name|setQueue
argument_list|(
name|parameters
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|KerberosPrincipal
name|kerberosPrincipal
init|=
name|KerberosPrincipalFactory
operator|.
name|create
argument_list|(
name|fsOperations
argument_list|,
name|remoteDirectoryManager
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
if|if
condition|(
name|kerberosPrincipal
operator|!=
literal|null
condition|)
block|{
name|serviceSpec
operator|.
name|setKerberosPrincipal
argument_list|(
name|kerberosPrincipal
argument_list|)
expr_stmt|;
block|}
name|handleServiceEnvs
argument_list|(
name|serviceSpec
argument_list|,
name|yarnConfig
argument_list|,
name|parameters
operator|.
name|getEnvars
argument_list|()
argument_list|)
expr_stmt|;
name|localizer
operator|.
name|handleLocalizations
argument_list|(
name|serviceSpec
argument_list|)
expr_stmt|;
return|return
operator|new
name|ServiceWrapper
argument_list|(
name|serviceSpec
argument_list|)
return|;
block|}
comment|// Handle worker and primary_worker.
DECL|method|addWorkerComponents (ServiceWrapper serviceWrapper, Framework framework)
specifier|protected
name|void
name|addWorkerComponents
parameter_list|(
name|ServiceWrapper
name|serviceWrapper
parameter_list|,
name|Framework
name|framework
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Role
name|primaryWorkerRole
decl_stmt|;
specifier|final
name|Role
name|workerRole
decl_stmt|;
if|if
condition|(
name|framework
operator|==
name|Framework
operator|.
name|TENSORFLOW
condition|)
block|{
name|primaryWorkerRole
operator|=
name|TensorFlowRole
operator|.
name|PRIMARY_WORKER
expr_stmt|;
name|workerRole
operator|=
name|TensorFlowRole
operator|.
name|WORKER
expr_stmt|;
block|}
else|else
block|{
name|primaryWorkerRole
operator|=
name|PyTorchRole
operator|.
name|PRIMARY_WORKER
expr_stmt|;
name|workerRole
operator|=
name|PyTorchRole
operator|.
name|WORKER
expr_stmt|;
block|}
name|addWorkerComponent
argument_list|(
name|serviceWrapper
argument_list|,
name|primaryWorkerRole
argument_list|,
name|framework
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameters
operator|.
name|getNumWorkers
argument_list|()
operator|>
literal|1
condition|)
block|{
name|addWorkerComponent
argument_list|(
name|serviceWrapper
argument_list|,
name|workerRole
argument_list|,
name|framework
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addWorkerComponent (ServiceWrapper serviceWrapper, Role role, Framework framework)
specifier|private
name|void
name|addWorkerComponent
parameter_list|(
name|ServiceWrapper
name|serviceWrapper
parameter_list|,
name|Role
name|role
parameter_list|,
name|Framework
name|framework
parameter_list|)
throws|throws
name|IOException
block|{
name|AbstractComponent
name|component
init|=
name|workerFactory
operator|.
name|create
argument_list|(
name|framework
argument_list|,
name|role
argument_list|)
decl_stmt|;
name|serviceWrapper
operator|.
name|addComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|handleQuicklinks (Service serviceSpec)
specifier|protected
name|void
name|handleQuicklinks
parameter_list|(
name|Service
name|serviceSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Quicklink
argument_list|>
name|quicklinks
init|=
name|parameters
operator|.
name|getQuicklinks
argument_list|()
decl_stmt|;
if|if
condition|(
name|quicklinks
operator|!=
literal|null
operator|&&
operator|!
name|quicklinks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Quicklink
name|ql
range|:
name|quicklinks
control|)
block|{
comment|// Make sure it is a valid instance name
name|String
name|instanceName
init|=
name|ql
operator|.
name|getComponentInstanceName
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|serviceSpec
operator|.
name|getComponents
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comp
operator|.
name|getNumberOfContainers
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|possibleInstanceName
init|=
name|comp
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|possibleInstanceName
operator|.
name|equals
argument_list|(
name|instanceName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't find a component instance = "
operator|+
name|instanceName
operator|+
literal|" while adding quicklink"
argument_list|)
throw|;
block|}
name|String
name|link
init|=
name|ql
operator|.
name|getProtocol
argument_list|()
operator|+
name|YarnServiceUtils
operator|.
name|getDNSName
argument_list|(
name|serviceSpec
operator|.
name|getName
argument_list|()
argument_list|,
name|instanceName
argument_list|,
name|getUserName
argument_list|()
argument_list|,
name|getDNSDomain
argument_list|(
name|yarnConfig
argument_list|)
argument_list|,
name|ql
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|addQuicklink
argument_list|(
name|serviceSpec
argument_list|,
name|ql
operator|.
name|getLabel
argument_list|()
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addQuicklink (Service serviceSpec, String label, String link)
specifier|protected
specifier|static
name|void
name|addQuicklink
parameter_list|(
name|Service
name|serviceSpec
parameter_list|,
name|String
name|label
parameter_list|,
name|String
name|link
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|quicklinks
init|=
name|serviceSpec
operator|.
name|getQuicklinks
argument_list|()
decl_stmt|;
if|if
condition|(
name|quicklinks
operator|==
literal|null
condition|)
block|{
name|quicklinks
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|serviceSpec
operator|.
name|setQuicklinks
argument_list|(
name|quicklinks
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Added quicklink, "
operator|+
name|label
operator|+
literal|"="
operator|+
name|link
argument_list|)
expr_stmt|;
block|}
name|quicklinks
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

