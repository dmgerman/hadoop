begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * Utilities for classpath operations.  */
end_comment

begin_class
DECL|class|ClassPathUtilities
specifier|public
specifier|final
class|class
name|ClassPathUtilities
block|{
DECL|method|ClassPathUtilities ()
specifier|private
name|ClassPathUtilities
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This class should not be "
operator|+
literal|"instantiated!"
argument_list|)
throw|;
block|}
DECL|method|findFileOnClassPath (final String fileName)
specifier|public
specifier|static
name|File
name|findFileOnClassPath
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|)
block|{
specifier|final
name|String
name|classpath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|pathSeparator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
decl_stmt|;
specifier|final
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|classpath
argument_list|,
name|pathSeparator
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
specifier|final
name|String
name|pathElement
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
specifier|final
name|File
name|directoryOrJar
init|=
operator|new
name|File
argument_list|(
name|pathElement
argument_list|)
decl_stmt|;
specifier|final
name|File
name|absoluteDirectoryOrJar
init|=
name|directoryOrJar
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|absoluteDirectoryOrJar
operator|.
name|isFile
argument_list|()
condition|)
block|{
specifier|final
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|absoluteDirectoryOrJar
operator|.
name|getParent
argument_list|()
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|target
return|;
block|}
block|}
else|else
block|{
specifier|final
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|directoryOrJar
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|target
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

