begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class is only existing because we need a component name to  * local launch command mapping from the test code.  * Once this is solved in more clean or different way, we can delete this class.  */
end_comment

begin_class
DECL|class|ServiceWrapper
specifier|public
class|class
name|ServiceWrapper
block|{
DECL|field|service
specifier|private
specifier|final
name|Service
name|service
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|componentToLocalLaunchCommand
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|componentToLocalLaunchCommand
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|ServiceWrapper (Service service)
specifier|public
name|ServiceWrapper
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
DECL|method|addComponent (AbstractComponent abstractComponent)
specifier|public
name|void
name|addComponent
parameter_list|(
name|AbstractComponent
name|abstractComponent
parameter_list|)
throws|throws
name|IOException
block|{
name|Component
name|component
init|=
name|abstractComponent
operator|.
name|createComponent
argument_list|()
decl_stmt|;
name|service
operator|.
name|addComponent
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|storeComponentName
argument_list|(
name|abstractComponent
argument_list|,
name|component
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|storeComponentName ( AbstractComponent component, String name)
specifier|private
name|void
name|storeComponentName
parameter_list|(
name|AbstractComponent
name|component
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|componentToLocalLaunchCommand
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|component
operator|.
name|getLocalScriptFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getService ()
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
DECL|method|getLocalLaunchCommandPathForComponent (String componentName)
specifier|public
name|String
name|getLocalLaunchCommandPathForComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
block|{
return|return
name|componentToLocalLaunchCommand
operator|.
name|get
argument_list|(
name|componentName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

