begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|RemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
operator|.
name|FileSystemOperations
operator|.
name|needHdfs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
operator|.
name|ClassPathUtilities
operator|.
name|findFileOnClassPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|utils
operator|.
name|EnvironmentUtilities
operator|.
name|getValueOfEnvironment
import|;
end_import

begin_comment
comment|/**  * This class contains helper methods to fill HDFS and Java environment  * variables into scripts.  */
end_comment

begin_class
DECL|class|HadoopEnvironmentSetup
specifier|public
class|class
name|HadoopEnvironmentSetup
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HadoopEnvironmentSetup
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CORE_SITE_XML
specifier|private
specifier|static
specifier|final
name|String
name|CORE_SITE_XML
init|=
literal|"core-site.xml"
decl_stmt|;
DECL|field|HDFS_SITE_XML
specifier|private
specifier|static
specifier|final
name|String
name|HDFS_SITE_XML
init|=
literal|"hdfs-site.xml"
decl_stmt|;
DECL|field|DOCKER_HADOOP_HDFS_HOME
specifier|public
specifier|static
specifier|final
name|String
name|DOCKER_HADOOP_HDFS_HOME
init|=
literal|"DOCKER_HADOOP_HDFS_HOME"
decl_stmt|;
DECL|field|DOCKER_JAVA_HOME
specifier|public
specifier|static
specifier|final
name|String
name|DOCKER_JAVA_HOME
init|=
literal|"DOCKER_JAVA_HOME"
decl_stmt|;
DECL|field|remoteDirectoryManager
specifier|private
specifier|final
name|RemoteDirectoryManager
name|remoteDirectoryManager
decl_stmt|;
DECL|field|fsOperations
specifier|private
specifier|final
name|FileSystemOperations
name|fsOperations
decl_stmt|;
DECL|method|HadoopEnvironmentSetup (ClientContext clientContext, FileSystemOperations fsOperations)
specifier|public
name|HadoopEnvironmentSetup
parameter_list|(
name|ClientContext
name|clientContext
parameter_list|,
name|FileSystemOperations
name|fsOperations
parameter_list|)
block|{
name|this
operator|.
name|remoteDirectoryManager
operator|=
name|clientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|fsOperations
operator|=
name|fsOperations
expr_stmt|;
block|}
DECL|method|addHdfsClassPath (RunJobParameters parameters, PrintWriter fw, Component comp)
specifier|public
name|void
name|addHdfsClassPath
parameter_list|(
name|RunJobParameters
name|parameters
parameter_list|,
name|PrintWriter
name|fw
parameter_list|,
name|Component
name|comp
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Find envs to use HDFS
name|String
name|hdfsHome
init|=
literal|null
decl_stmt|;
name|String
name|javaHome
init|=
literal|null
decl_stmt|;
name|boolean
name|hadoopEnv
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|envVar
range|:
name|parameters
operator|.
name|getEnvars
argument_list|()
control|)
block|{
if|if
condition|(
name|envVar
operator|.
name|startsWith
argument_list|(
name|DOCKER_HADOOP_HDFS_HOME
operator|+
literal|"="
argument_list|)
condition|)
block|{
name|hdfsHome
operator|=
name|getValueOfEnvironment
argument_list|(
name|envVar
argument_list|)
expr_stmt|;
name|hadoopEnv
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|envVar
operator|.
name|startsWith
argument_list|(
name|DOCKER_JAVA_HOME
operator|+
literal|"="
argument_list|)
condition|)
block|{
name|javaHome
operator|=
name|getValueOfEnvironment
argument_list|(
name|envVar
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hasHdfsEnvs
init|=
name|hdfsHome
operator|!=
literal|null
operator|&&
name|javaHome
operator|!=
literal|null
decl_stmt|;
name|boolean
name|needHdfs
init|=
name|doesNeedHdfs
argument_list|(
name|parameters
argument_list|,
name|hadoopEnv
argument_list|)
decl_stmt|;
if|if
condition|(
name|needHdfs
condition|)
block|{
comment|// HDFS is asked either in input or output, set LD_LIBRARY_PATH
comment|// and classpath
if|if
condition|(
name|hdfsHome
operator|!=
literal|null
condition|)
block|{
name|appendHdfsHome
argument_list|(
name|fw
argument_list|,
name|hdfsHome
argument_list|)
expr_stmt|;
block|}
comment|// hadoop confs will be uploaded to HDFS and localized to container's
comment|// local folder, so here set $HADOOP_CONF_DIR to $WORK_DIR.
name|fw
operator|.
name|append
argument_list|(
literal|"export HADOOP_CONF_DIR=$WORK_DIR\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|javaHome
operator|!=
literal|null
condition|)
block|{
name|appendJavaHome
argument_list|(
name|fw
argument_list|,
name|javaHome
argument_list|)
expr_stmt|;
block|}
name|fw
operator|.
name|append
argument_list|(
literal|"export CLASSPATH=`$HADOOP_HDFS_HOME/bin/hadoop classpath --glob`\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needHdfs
operator|&&
operator|!
name|hasHdfsEnvs
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"When HDFS is being used to read/write models/data, "
operator|+
literal|"the following environment variables are required: "
operator|+
literal|"1) {}=<HDFS_HOME inside docker container> "
operator|+
literal|"2) {}=<JAVA_HOME inside docker container>. "
operator|+
literal|"You can use --env to pass these environment variables."
argument_list|,
name|DOCKER_HADOOP_HDFS_HOME
argument_list|,
name|DOCKER_JAVA_HOME
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to detect HDFS-related environments."
argument_list|)
throw|;
block|}
comment|// Trying to upload core-site.xml and hdfs-site.xml
name|Path
name|stagingDir
init|=
name|remoteDirectoryManager
operator|.
name|getJobStagingArea
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|coreSite
init|=
name|findFileOnClassPath
argument_list|(
name|CORE_SITE_XML
argument_list|)
decl_stmt|;
name|File
name|hdfsSite
init|=
name|findFileOnClassPath
argument_list|(
name|HDFS_SITE_XML
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreSite
operator|==
literal|null
operator|||
name|hdfsSite
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"HDFS is being used, however we could not locate "
operator|+
literal|"{} nor {} on classpath! "
operator|+
literal|"Please double check your classpath setting and make sure these "
operator|+
literal|"setting files are included!"
argument_list|,
name|CORE_SITE_XML
argument_list|,
name|HDFS_SITE_XML
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to locate core-site.xml / hdfs-site.xml on classpath!"
argument_list|)
throw|;
block|}
name|fsOperations
operator|.
name|uploadToRemoteFileAndLocalizeToContainerWorkDir
argument_list|(
name|stagingDir
argument_list|,
name|coreSite
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|CORE_SITE_XML
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|fsOperations
operator|.
name|uploadToRemoteFileAndLocalizeToContainerWorkDir
argument_list|(
name|stagingDir
argument_list|,
name|hdfsSite
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|HDFS_SITE_XML
argument_list|,
name|comp
argument_list|)
expr_stmt|;
comment|// DEBUG
if|if
condition|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|appendEchoOfEnvVars
argument_list|(
name|fw
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doesNeedHdfs (RunJobParameters parameters, boolean hadoopEnv)
specifier|private
name|boolean
name|doesNeedHdfs
parameter_list|(
name|RunJobParameters
name|parameters
parameter_list|,
name|boolean
name|hadoopEnv
parameter_list|)
block|{
return|return
name|needHdfs
argument_list|(
name|parameters
operator|.
name|getInputPath
argument_list|()
argument_list|)
operator|||
name|needHdfs
argument_list|(
name|parameters
operator|.
name|getPSLaunchCmd
argument_list|()
argument_list|)
operator|||
name|needHdfs
argument_list|(
name|parameters
operator|.
name|getWorkerLaunchCmd
argument_list|()
argument_list|)
operator|||
name|hadoopEnv
return|;
block|}
DECL|method|appendHdfsHome (PrintWriter fw, String hdfsHome)
specifier|private
name|void
name|appendHdfsHome
parameter_list|(
name|PrintWriter
name|fw
parameter_list|,
name|String
name|hdfsHome
parameter_list|)
block|{
comment|// Unset HADOOP_HOME/HADOOP_YARN_HOME to make sure host machine's envs
comment|// won't pollute docker's env.
name|fw
operator|.
name|append
argument_list|(
literal|"export HADOOP_HOME=\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"export HADOOP_YARN_HOME=\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"export HADOOP_HDFS_HOME="
operator|+
name|hdfsHome
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"export HADOOP_COMMON_HOME="
operator|+
name|hdfsHome
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendJavaHome (PrintWriter fw, String javaHome)
specifier|private
name|void
name|appendJavaHome
parameter_list|(
name|PrintWriter
name|fw
parameter_list|,
name|String
name|javaHome
parameter_list|)
block|{
name|fw
operator|.
name|append
argument_list|(
literal|"export JAVA_HOME="
operator|+
name|javaHome
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"
operator|+
literal|"$JAVA_HOME/lib/amd64/server\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendEchoOfEnvVars (PrintWriter fw)
specifier|private
name|void
name|appendEchoOfEnvVars
parameter_list|(
name|PrintWriter
name|fw
parameter_list|)
block|{
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"CLASSPATH:$CLASSPATH\"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"HADOOP_CONF_DIR:$HADOOP_CONF_DIR\"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"HADOOP_TOKEN_FILE_LOCATION:$HADOOP_TOKEN_FILE_LOCATION\"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"JAVA_HOME:$JAVA_HOME\"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"LD_LIBRARY_PATH:$LD_LIBRARY_PATH\"\n"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
literal|"echo \"HADOOP_HDFS_HOME:$HADOOP_HDFS_HOME\"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

