begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|api
operator|.
name|records
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|Envs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
operator|.
name|DEFAULT_TYPE
import|;
end_import

begin_class
DECL|class|YarnServiceUtils
specifier|public
class|class
name|YarnServiceUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YarnServiceUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// This will be true only in UT.
DECL|field|stubServiceClient
specifier|private
specifier|static
name|AppAdminClient
name|stubServiceClient
init|=
literal|null
decl_stmt|;
DECL|method|createServiceClient ( Configuration yarnConfiguration)
specifier|public
specifier|static
name|AppAdminClient
name|createServiceClient
parameter_list|(
name|Configuration
name|yarnConfiguration
parameter_list|)
block|{
if|if
condition|(
name|stubServiceClient
operator|!=
literal|null
condition|)
block|{
return|return
name|stubServiceClient
return|;
block|}
name|AppAdminClient
name|serviceClient
init|=
name|AppAdminClient
operator|.
name|createAppAdminClient
argument_list|(
name|DEFAULT_TYPE
argument_list|,
name|yarnConfiguration
argument_list|)
decl_stmt|;
return|return
name|serviceClient
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setStubServiceClient (AppAdminClient stubServiceClient)
specifier|public
specifier|static
name|void
name|setStubServiceClient
parameter_list|(
name|AppAdminClient
name|stubServiceClient
parameter_list|)
block|{
name|YarnServiceUtils
operator|.
name|stubServiceClient
operator|=
name|stubServiceClient
expr_stmt|;
block|}
DECL|method|getDNSName (String serviceName, String componentInstanceName, String userName, String domain, int port)
specifier|public
specifier|static
name|String
name|getDNSName
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|componentInstanceName
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|domain
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
name|componentInstanceName
operator|+
name|getDNSNameCommonSuffix
argument_list|(
name|serviceName
argument_list|,
name|userName
argument_list|,
name|domain
argument_list|,
name|port
argument_list|)
return|;
block|}
DECL|method|getDNSNameCommonSuffix (String serviceName, String userName, String domain, int port)
specifier|private
specifier|static
name|String
name|getDNSNameCommonSuffix
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|domain
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
literal|"."
operator|+
name|serviceName
operator|+
literal|"."
operator|+
name|userName
operator|+
literal|"."
operator|+
name|domain
operator|+
literal|":"
operator|+
name|port
return|;
block|}
DECL|method|getTFConfigEnv (String curCommponentName, int nWorkers, int nPs, String serviceName, String userName, String domain)
specifier|public
specifier|static
name|String
name|getTFConfigEnv
parameter_list|(
name|String
name|curCommponentName
parameter_list|,
name|int
name|nWorkers
parameter_list|,
name|int
name|nPs
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|domain
parameter_list|)
block|{
name|String
name|commonEndpointSuffix
init|=
name|getDNSNameCommonSuffix
argument_list|(
name|serviceName
argument_list|,
name|userName
argument_list|,
name|domain
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|String
name|json
init|=
literal|"{\\\"cluster\\\":{"
decl_stmt|;
name|String
name|master
init|=
name|getComponentArrayJson
argument_list|(
literal|"master"
argument_list|,
literal|1
argument_list|,
name|commonEndpointSuffix
argument_list|)
operator|+
literal|","
decl_stmt|;
name|String
name|worker
init|=
name|getComponentArrayJson
argument_list|(
literal|"worker"
argument_list|,
name|nWorkers
operator|-
literal|1
argument_list|,
name|commonEndpointSuffix
argument_list|)
operator|+
literal|","
decl_stmt|;
name|String
name|ps
init|=
name|getComponentArrayJson
argument_list|(
literal|"ps"
argument_list|,
name|nPs
argument_list|,
name|commonEndpointSuffix
argument_list|)
operator|+
literal|"},"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\\\"task\\\":{"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" \\\"type\\\":\\\""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|curCommponentName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\\\","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" \\\"index\\\":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'$'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Envs
operator|.
name|TASK_INDEX_ENV
operator|+
literal|"},"
argument_list|)
expr_stmt|;
name|String
name|task
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|environment
init|=
literal|"\\\"environment\\\":\\\"cloud\\\"}"
decl_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|worker
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|environment
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|addQuicklink (Service serviceSpec, String label, String link)
specifier|public
specifier|static
name|void
name|addQuicklink
parameter_list|(
name|Service
name|serviceSpec
parameter_list|,
name|String
name|label
parameter_list|,
name|String
name|link
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|quicklinks
init|=
name|serviceSpec
operator|.
name|getQuicklinks
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|quicklinks
condition|)
block|{
name|quicklinks
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|serviceSpec
operator|.
name|setQuicklinks
argument_list|(
name|quicklinks
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Added quicklink, "
operator|+
name|label
operator|+
literal|"="
operator|+
name|link
argument_list|)
expr_stmt|;
block|}
name|quicklinks
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
DECL|method|getComponentArrayJson (String componentName, int count, String endpointSuffix)
specifier|private
specifier|static
name|String
name|getComponentArrayJson
parameter_list|(
name|String
name|componentName
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|endpointSuffix
parameter_list|)
block|{
name|String
name|component
init|=
literal|"\\\""
operator|+
name|componentName
operator|+
literal|"\\\":"
decl_stmt|;
name|StringBuilder
name|array
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|array
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|array
operator|.
name|append
argument_list|(
literal|"\\\""
argument_list|)
expr_stmt|;
name|array
operator|.
name|append
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
name|array
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|array
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|array
operator|.
name|append
argument_list|(
name|endpointSuffix
argument_list|)
expr_stmt|;
name|array
operator|.
name|append
argument_list|(
literal|"\\\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|count
operator|-
literal|1
condition|)
block|{
name|array
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|array
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|component
operator|+
name|array
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

