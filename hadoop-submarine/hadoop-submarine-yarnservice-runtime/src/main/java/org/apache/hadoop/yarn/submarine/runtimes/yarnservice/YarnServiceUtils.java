begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.yarnservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|yarnservice
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
operator|.
name|DEFAULT_TYPE
import|;
end_import

begin_comment
comment|/**  * This class contains some static helper methods to query DNS data  * based on the provided parameters.  */
end_comment

begin_class
DECL|class|YarnServiceUtils
specifier|public
specifier|final
class|class
name|YarnServiceUtils
block|{
DECL|method|YarnServiceUtils ()
specifier|private
name|YarnServiceUtils
parameter_list|()
block|{   }
comment|// This will be true only in UT.
DECL|field|stubServiceClient
specifier|private
specifier|static
name|AppAdminClient
name|stubServiceClient
init|=
literal|null
decl_stmt|;
DECL|method|createServiceClient ( Configuration yarnConfiguration)
specifier|static
name|AppAdminClient
name|createServiceClient
parameter_list|(
name|Configuration
name|yarnConfiguration
parameter_list|)
block|{
if|if
condition|(
name|stubServiceClient
operator|!=
literal|null
condition|)
block|{
return|return
name|stubServiceClient
return|;
block|}
return|return
name|AppAdminClient
operator|.
name|createAppAdminClient
argument_list|(
name|DEFAULT_TYPE
argument_list|,
name|yarnConfiguration
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setStubServiceClient (AppAdminClient stubServiceClient)
specifier|public
specifier|static
name|void
name|setStubServiceClient
parameter_list|(
name|AppAdminClient
name|stubServiceClient
parameter_list|)
block|{
name|YarnServiceUtils
operator|.
name|stubServiceClient
operator|=
name|stubServiceClient
expr_stmt|;
block|}
DECL|method|getDNSName (String serviceName, String componentInstanceName, String userName, String domain, int port)
specifier|public
specifier|static
name|String
name|getDNSName
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|componentInstanceName
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|domain
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
name|componentInstanceName
operator|+
name|getDNSNameCommonSuffix
argument_list|(
name|serviceName
argument_list|,
name|userName
argument_list|,
name|domain
argument_list|,
name|port
argument_list|)
return|;
block|}
DECL|method|getDNSNameCommonSuffix (String serviceName, String userName, String domain, int port)
specifier|public
specifier|static
name|String
name|getDNSNameCommonSuffix
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|domain
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
literal|"."
operator|+
name|serviceName
operator|+
literal|"."
operator|+
name|userName
operator|+
literal|"."
operator|+
name|domain
operator|+
literal|":"
operator|+
name|port
return|;
block|}
block|}
end_class

end_unit

