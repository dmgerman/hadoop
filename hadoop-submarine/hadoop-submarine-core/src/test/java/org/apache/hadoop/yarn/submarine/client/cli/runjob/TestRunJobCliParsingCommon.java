begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.runjob
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|MissingArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|ParametersHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|TensorFlowRunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|MockClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|RuntimeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|JobMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|JobSubmitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|SubmarineStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * This class contains some test methods to test common functionality  * (including TF / PyTorch) of the run job Submarine command.  */
end_comment

begin_class
DECL|class|TestRunJobCliParsingCommon
specifier|public
class|class
name|TestRunJobCliParsingCommon
block|{
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|SubmarineLogs
operator|.
name|verboseOff
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|getMockClientContext ()
specifier|public
specifier|static
name|MockClientContext
name|getMockClientContext
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|MockClientContext
name|mockClientContext
init|=
operator|new
name|MockClientContext
argument_list|()
decl_stmt|;
name|JobSubmitter
name|mockJobSubmitter
init|=
name|mock
argument_list|(
name|JobSubmitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockJobSubmitter
operator|.
name|submitJob
argument_list|(
name|any
argument_list|(
name|ParametersHolder
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1235L
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|JobMonitor
name|mockJobMonitor
init|=
name|mock
argument_list|(
name|JobMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|SubmarineStorage
name|storage
init|=
name|mock
argument_list|(
name|SubmarineStorage
operator|.
name|class
argument_list|)
decl_stmt|;
name|RuntimeFactory
name|rtFactory
init|=
name|mock
argument_list|(
name|RuntimeFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rtFactory
operator|.
name|getJobSubmitterInstance
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockJobSubmitter
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rtFactory
operator|.
name|getJobMonitorInstance
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockJobMonitor
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rtFactory
operator|.
name|getSubmarineStorage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storage
argument_list|)
expr_stmt|;
name|mockClientContext
operator|.
name|setRuntimeFactory
argument_list|(
name|rtFactory
argument_list|)
expr_stmt|;
return|return
name|mockClientContext
return|;
block|}
annotation|@
name|Test
DECL|method|testAbsentFrameworkFallsBackToTensorFlow ()
specifier|public
name|void
name|testAbsentFrameworkFallsBackToTensorFlow
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"hdfs://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"hdfs://output"
block|,
literal|"--num_workers"
block|,
literal|"1"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=4g,vcores=2"
block|,
literal|"--tensorboard"
block|,
literal|"true"
block|,
literal|"--verbose"
block|,
literal|"--wait_job_finish"
block|}
argument_list|)
expr_stmt|;
name|RunJobParameters
name|runJobParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Default Framework should be TensorFlow!"
argument_list|,
name|runJobParameters
operator|instanceof
name|TensorFlowRunJobParameters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyFrameworkOption ()
specifier|public
name|void
name|testEmptyFrameworkOption
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|MissingArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Missing argument for option: framework"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--framework"
block|,
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"hdfs://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"hdfs://output"
block|,
literal|"--num_workers"
block|,
literal|"1"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=4g,vcores=2"
block|,
literal|"--tensorboard"
block|,
literal|"true"
block|,
literal|"--verbose"
block|,
literal|"--wait_job_finish"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidFrameworkOption ()
specifier|public
name|void
name|testInvalidFrameworkOption
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|ParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Failed to parse Framework type"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--framework"
block|,
literal|"bla"
block|,
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"hdfs://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"hdfs://output"
block|,
literal|"--num_workers"
block|,
literal|"1"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=4g,vcores=2"
block|,
literal|"--tensorboard"
block|,
literal|"true"
block|,
literal|"--verbose"
block|,
literal|"--wait_job_finish"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

