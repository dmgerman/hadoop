begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.runjob.tensorflow
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
operator|.
name|tensorflow
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|CliConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|TensorFlowRunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
operator|.
name|RunJobCli
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
operator|.
name|TestRunJobCliParsingCommon
operator|.
name|getMockClientContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test class that verifies the correctness of TensorFlow  * CLI configuration parsing.  */
end_comment

begin_class
DECL|class|TestRunJobCliParsingTensorFlow
specifier|public
class|class
name|TestRunJobCliParsingTensorFlow
block|{
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|SubmarineLogs
operator|.
name|verboseOff
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testNoInputPathOptionSpecified ()
specifier|public
name|void
name|testNoInputPathOptionSpecified
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expectedErrorMessage
init|=
literal|"\"--"
operator|+
name|CliConstants
operator|.
name|INPUT_PATH
operator|+
literal|"\" is absent"
decl_stmt|;
name|String
name|actualMessage
init|=
literal|""
decl_stmt|;
try|try
block|{
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--framework"
block|,
literal|"tensorflow"
block|,
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--checkpoint_path"
block|,
literal|"hdfs://output"
block|,
literal|"--num_workers"
block|,
literal|"1"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=4g,vcores=2"
block|,
literal|"--tensorboard"
block|,
literal|"true"
block|,
literal|"--verbose"
block|,
literal|"--wait_job_finish"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|actualMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedErrorMessage
argument_list|,
name|actualMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForDistributedTraining ()
specifier|public
name|void
name|testBasicRunJobForDistributedTraining
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--framework"
block|,
literal|"tensorflow"
block|,
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"hdfs://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"hdfs://output"
block|,
literal|"--num_workers"
block|,
literal|"3"
block|,
literal|"--num_ps"
block|,
literal|"2"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=2048M,vcores=2"
block|,
literal|"--ps_resources"
block|,
literal|"memory=4G,vcores=4"
block|,
literal|"--tensorboard"
block|,
literal|"true"
block|,
literal|"--ps_launch_cmd"
block|,
literal|"python run-ps.py"
block|,
literal|"--keytab"
block|,
literal|"/keytab/path"
block|,
literal|"--principal"
block|,
literal|"user/_HOST@domain.com"
block|,
literal|"--distribute_keytab"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|RunJobParameters
name|jobRunParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|RunJobParameters
operator|.
name|class
operator|+
literal|" must be an instance of "
operator|+
name|TensorFlowRunJobParameters
operator|.
name|class
argument_list|,
name|jobRunParameters
operator|instanceof
name|TensorFlowRunJobParameters
argument_list|)
expr_stmt|;
name|TensorFlowRunJobParameters
name|tensorFlowParams
init|=
operator|(
name|TensorFlowRunJobParameters
operator|)
name|jobRunParameters
decl_stmt|;
name|assertEquals
argument_list|(
name|jobRunParameters
operator|.
name|getInputPath
argument_list|()
argument_list|,
literal|"hdfs://input"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jobRunParameters
operator|.
name|getCheckpointPath
argument_list|()
argument_list|,
literal|"hdfs://output"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tensorFlowParams
operator|.
name|getNumPS
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tensorFlowParams
operator|.
name|getPSLaunchCmd
argument_list|()
argument_list|,
literal|"python run-ps.py"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|,
name|tensorFlowParams
operator|.
name|getPsResource
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tensorFlowParams
operator|.
name|getWorkerLaunchCmd
argument_list|()
argument_list|,
literal|"python run-job.py"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|,
name|tensorFlowParams
operator|.
name|getWorkerResource
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jobRunParameters
operator|.
name|getDockerImageName
argument_list|()
argument_list|,
literal|"tf-docker:1.1.0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jobRunParameters
operator|.
name|getKeytab
argument_list|()
argument_list|,
literal|"/keytab/path"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jobRunParameters
operator|.
name|getPrincipal
argument_list|()
argument_list|,
literal|"user/_HOST@domain.com"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunParameters
operator|.
name|isDistributeKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicRunJobForSingleNodeTraining ()
specifier|public
name|void
name|testBasicRunJobForSingleNodeTraining
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--framework"
block|,
literal|"tensorflow"
block|,
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--input_path"
block|,
literal|"hdfs://input"
block|,
literal|"--checkpoint_path"
block|,
literal|"hdfs://output"
block|,
literal|"--num_workers"
block|,
literal|"1"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=4g,vcores=2"
block|,
literal|"--tensorboard"
block|,
literal|"true"
block|,
literal|"--verbose"
block|,
literal|"--wait_job_finish"
block|}
argument_list|)
expr_stmt|;
name|RunJobParameters
name|jobRunParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|RunJobParameters
operator|.
name|class
operator|+
literal|" must be an instance of "
operator|+
name|TensorFlowRunJobParameters
operator|.
name|class
argument_list|,
name|jobRunParameters
operator|instanceof
name|TensorFlowRunJobParameters
argument_list|)
expr_stmt|;
name|TensorFlowRunJobParameters
name|tensorFlowParams
init|=
operator|(
name|TensorFlowRunJobParameters
operator|)
name|jobRunParameters
decl_stmt|;
name|assertEquals
argument_list|(
name|jobRunParameters
operator|.
name|getInputPath
argument_list|()
argument_list|,
literal|"hdfs://input"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jobRunParameters
operator|.
name|getCheckpointPath
argument_list|()
argument_list|,
literal|"hdfs://output"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tensorFlowParams
operator|.
name|getNumWorkers
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tensorFlowParams
operator|.
name|getWorkerLaunchCmd
argument_list|()
argument_list|,
literal|"python run-job.py"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|2
argument_list|)
argument_list|,
name|tensorFlowParams
operator|.
name|getWorkerResource
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunParameters
operator|.
name|isWaitJobFinish
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * when only run tensorboard, input_path is not needed    * */
annotation|@
name|Test
DECL|method|testNoInputPathOptionButOnlyRunTensorboard ()
specifier|public
name|void
name|testNoInputPathOptionButOnlyRunTensorboard
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
try|try
block|{
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--framework"
block|,
literal|"tensorflow"
block|,
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--num_workers"
block|,
literal|"0"
block|,
literal|"--tensorboard"
block|,
literal|"--verbose"
block|,
literal|"--tensorboard_resources"
block|,
literal|"memory=2G,vcores=2"
block|,
literal|"--tensorboard_docker_image"
block|,
literal|"tb_docker_image:001"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

