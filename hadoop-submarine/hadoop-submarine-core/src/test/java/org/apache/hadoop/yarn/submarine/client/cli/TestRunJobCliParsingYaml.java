begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|resourcetypes
operator|.
name|ResourceTypesTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|yaml
operator|.
name|YamlParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|TestRunJobCliParsing
operator|.
name|getMockClientContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test class that verifies the correctness of YAML configuration parsing.  */
end_comment

begin_class
DECL|class|TestRunJobCliParsingYaml
specifier|public
class|class
name|TestRunJobCliParsingYaml
block|{
DECL|field|OVERRIDDEN_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|OVERRIDDEN_PREFIX
init|=
literal|"overridden_"
decl_stmt|;
DECL|field|DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DIR_NAME
init|=
literal|"runjobcliparsing"
decl_stmt|;
DECL|field|yamlConfig
specifier|private
name|File
name|yamlConfig
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|SubmarineLogs
operator|.
name|verboseOff
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
block|{
name|YamlConfigTestUtils
operator|.
name|deleteFile
argument_list|(
name|yamlConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|configureResourceTypes ()
specifier|public
specifier|static
name|void
name|configureResourceTypes
parameter_list|()
block|{
name|List
argument_list|<
name|ResourceTypeInfo
argument_list|>
name|resTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ResourceUtils
operator|.
name|getResourcesTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|resTypes
operator|.
name|add
argument_list|(
name|ResourceTypeInfo
operator|.
name|newInstance
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|reinitializeResources
argument_list|(
name|resTypes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|verifyBasicConfigValues (RunJobParameters jobRunParameters)
specifier|private
name|void
name|verifyBasicConfigValues
parameter_list|(
name|RunJobParameters
name|jobRunParameters
parameter_list|)
block|{
name|verifyBasicConfigValues
argument_list|(
name|jobRunParameters
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"env1=env1Value"
argument_list|,
literal|"env2=env2Value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyBasicConfigValues (RunJobParameters jobRunParameters, List<String> expectedEnvs)
specifier|private
name|void
name|verifyBasicConfigValues
parameter_list|(
name|RunJobParameters
name|jobRunParameters
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expectedEnvs
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"testInputPath"
argument_list|,
name|jobRunParameters
operator|.
name|getInputPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testCheckpointPath"
argument_list|,
name|jobRunParameters
operator|.
name|getCheckpointPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDockerImage"
argument_list|,
name|jobRunParameters
operator|.
name|getDockerImageName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jobRunParameters
operator|.
name|getLocalizations
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|jobRunParameters
operator|.
name|getLocalizations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|jobRunParameters
operator|.
name|getQuicklinks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|jobRunParameters
operator|.
name|getQuicklinks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunParameters
operator|.
name|isWaitJobFinish
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|env
range|:
name|expectedEnvs
control|)
block|{
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s should be in env list of jobRunParameters!"
argument_list|,
name|env
argument_list|)
argument_list|,
name|jobRunParameters
operator|.
name|getEnvars
argument_list|()
operator|.
name|contains
argument_list|(
name|env
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyPsValues (RunJobParameters jobRunParameters, String prefix)
specifier|private
name|void
name|verifyPsValues
parameter_list|(
name|RunJobParameters
name|jobRunParameters
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|jobRunParameters
operator|.
name|getNumPS
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prefix
operator|+
literal|"testLaunchCmdPs"
argument_list|,
name|jobRunParameters
operator|.
name|getPSLaunchCmd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prefix
operator|+
literal|"testDockerImagePs"
argument_list|,
name|jobRunParameters
operator|.
name|getPsDockerImage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|20500L
argument_list|,
literal|34
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|,
literal|"4"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|jobRunParameters
operator|.
name|getPsResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyWorkerValues (RunJobParameters jobRunParameters, String prefix)
specifier|private
name|void
name|verifyWorkerValues
parameter_list|(
name|RunJobParameters
name|jobRunParameters
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|jobRunParameters
operator|.
name|getNumWorkers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prefix
operator|+
literal|"testLaunchCmdWorker"
argument_list|,
name|jobRunParameters
operator|.
name|getWorkerLaunchCmd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prefix
operator|+
literal|"testDockerImageWorker"
argument_list|,
name|jobRunParameters
operator|.
name|getWorkerDockerImage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|20480L
argument_list|,
literal|32
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|jobRunParameters
operator|.
name|getWorkerResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySecurityValues (RunJobParameters jobRunParameters)
specifier|private
name|void
name|verifySecurityValues
parameter_list|(
name|RunJobParameters
name|jobRunParameters
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"keytabPath"
argument_list|,
name|jobRunParameters
operator|.
name|getKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testPrincipal"
argument_list|,
name|jobRunParameters
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunParameters
operator|.
name|isDistributeKeytab
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTensorboardValues (RunJobParameters jobRunParameters)
specifier|private
name|void
name|verifyTensorboardValues
parameter_list|(
name|RunJobParameters
name|jobRunParameters
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|jobRunParameters
operator|.
name|isTensorboardEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tensorboardDockerImage"
argument_list|,
name|jobRunParameters
operator|.
name|getTensorboardDockerImage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|21000L
argument_list|,
literal|37
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|jobRunParameters
operator|.
name|getTensorboardResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidYamlParsing ()
specifier|public
name|void
name|testValidYamlParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/valid-config.yaml"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|RunJobParameters
name|jobRunParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
name|verifyBasicConfigValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
name|verifyPsValues
argument_list|(
name|jobRunParameters
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifyWorkerValues
argument_list|(
name|jobRunParameters
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifySecurityValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
name|verifyTensorboardValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testYamlAndCliOptionIsDefinedIsInvalid ()
specifier|public
name|void
name|testYamlAndCliOptionIsDefinedIsInvalid
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/valid-config.yaml"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|YarnException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"defined both with YAML config and with "
operator|+
literal|"CLI argument"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testYamlAndCliOptionIsDefinedIsInvalidWithListOption ()
specifier|public
name|void
name|testYamlAndCliOptionIsDefinedIsInvalidWithListOption
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/valid-config.yaml"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--quicklink"
block|,
literal|"AAA=http://master-0:8321"
block|,
literal|"--quicklink"
block|,
literal|"BBB=http://worker-0:1234"
block|,
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|YarnException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"defined both with YAML config and with "
operator|+
literal|"CLI argument"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRoleOverrides ()
specifier|public
name|void
name|testRoleOverrides
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/valid-config-with-overrides.yaml"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|RunJobParameters
name|jobRunParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
name|verifyBasicConfigValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
name|verifyPsValues
argument_list|(
name|jobRunParameters
argument_list|,
name|OVERRIDDEN_PREFIX
argument_list|)
expr_stmt|;
name|verifyWorkerValues
argument_list|(
name|jobRunParameters
argument_list|,
name|OVERRIDDEN_PREFIX
argument_list|)
expr_stmt|;
name|verifySecurityValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
name|verifyTensorboardValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFalseValuesForBooleanFields ()
specifier|public
name|void
name|testFalseValuesForBooleanFields
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/test-false-values.yaml"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|RunJobParameters
name|jobRunParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|jobRunParameters
operator|.
name|isDistributeKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jobRunParameters
operator|.
name|isWaitJobFinish
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|jobRunParameters
operator|.
name|isTensorboardEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWrongIndentation ()
specifier|public
name|void
name|testWrongIndentation
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/wrong-indentation.yaml"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|YamlParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Failed to parse YAML config, details:"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWrongFilename ()
specifier|public
name|void
name|testWrongFilename
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|YamlParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
literal|"not-existing"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyFile ()
specifier|public
name|void
name|testEmptyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createEmptyTempFile
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|YamlParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotExistingFile ()
specifier|public
name|void
name|testNotExistingFile
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|YamlParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"file does not exist"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
literal|"blabla"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWrongPropertyName ()
specifier|public
name|void
name|testWrongPropertyName
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/wrong-property-name.yaml"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|YamlParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Failed to parse YAML config, details:"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingConfigsSection ()
specifier|public
name|void
name|testMissingConfigsSection
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/missing-configs.yaml"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|YamlParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"config section should be defined, "
operator|+
literal|"but it cannot be found"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingSectionsShouldParsed ()
specifier|public
name|void
name|testMissingSectionsShouldParsed
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/some-sections-missing.yaml"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingPrincipalUnderSecuritySection ()
specifier|public
name|void
name|testMissingPrincipalUnderSecuritySection
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/security-principal-is-missing.yaml"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|RunJobParameters
name|jobRunParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
name|verifyBasicConfigValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
name|verifyPsValues
argument_list|(
name|jobRunParameters
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifyWorkerValues
argument_list|(
name|jobRunParameters
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifyTensorboardValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
comment|//Verify security values
name|assertEquals
argument_list|(
literal|"keytabPath"
argument_list|,
name|jobRunParameters
operator|.
name|getKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Principal should be null!"
argument_list|,
name|jobRunParameters
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunParameters
operator|.
name|isDistributeKeytab
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingTensorBoardDockerImage ()
specifier|public
name|void
name|testMissingTensorBoardDockerImage
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/tensorboard-dockerimage-is-missing.yaml"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|RunJobParameters
name|jobRunParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
name|verifyBasicConfigValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
name|verifyPsValues
argument_list|(
name|jobRunParameters
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifyWorkerValues
argument_list|(
name|jobRunParameters
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifySecurityValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobRunParameters
operator|.
name|isTensorboardEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"tensorboardDockerImage should be null!"
argument_list|,
name|jobRunParameters
operator|.
name|getTensorboardDockerImage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|21000L
argument_list|,
literal|37
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|GPU_URI
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|jobRunParameters
operator|.
name|getTensorboardResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingEnvs ()
specifier|public
name|void
name|testMissingEnvs
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|yamlConfig
operator|=
name|YamlConfigTestUtils
operator|.
name|createTempFileWithContents
argument_list|(
name|DIR_NAME
operator|+
literal|"/envs-are-missing.yaml"
argument_list|)
expr_stmt|;
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-f"
block|,
name|yamlConfig
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
name|RunJobParameters
name|jobRunParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
name|verifyBasicConfigValues
argument_list|(
name|jobRunParameters
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPsValues
argument_list|(
name|jobRunParameters
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifyWorkerValues
argument_list|(
name|jobRunParameters
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifySecurityValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
name|verifyTensorboardValues
argument_list|(
name|jobRunParameters
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

