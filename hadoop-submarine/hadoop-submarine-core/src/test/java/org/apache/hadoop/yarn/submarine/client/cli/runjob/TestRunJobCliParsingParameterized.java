begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.runjob
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|CliConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|PyTorchRunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|TensorFlowRunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|MockClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|JobMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|JobSubmitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
operator|.
name|TestRunJobCliParsingCommon
operator|.
name|getMockClientContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_comment
comment|/**  * This class contains some test methods to test common CLI parsing  * functionality (including TF / PyTorch) of the run job Submarine command.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestRunJobCliParsingParameterized
specifier|public
class|class
name|TestRunJobCliParsingParameterized
block|{
DECL|field|framework
specifier|private
specifier|final
name|Framework
name|framework
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|SubmarineLogs
operator|.
name|verboseOff
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|Framework
operator|.
name|TENSORFLOW
block|}
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|Framework
operator|.
name|PYTORCH
block|}
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
DECL|method|TestRunJobCliParsingParameterized (Framework framework)
specifier|public
name|TestRunJobCliParsingParameterized
parameter_list|(
name|Framework
name|framework
parameter_list|)
block|{
name|this
operator|.
name|framework
operator|=
name|framework
expr_stmt|;
block|}
DECL|method|getFrameworkName ()
specifier|private
name|String
name|getFrameworkName
parameter_list|()
block|{
return|return
name|framework
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testPrintHelp ()
specifier|public
name|void
name|testPrintHelp
parameter_list|()
block|{
name|MockClientContext
name|mockClientContext
init|=
operator|new
name|MockClientContext
argument_list|()
decl_stmt|;
name|JobSubmitter
name|mockJobSubmitter
init|=
name|mock
argument_list|(
name|JobSubmitter
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobMonitor
name|mockJobMonitor
init|=
name|mock
argument_list|(
name|JobMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|mockClientContext
argument_list|,
name|mockJobSubmitter
argument_list|,
name|mockJobMonitor
argument_list|)
decl_stmt|;
name|runJobCli
operator|.
name|printUsages
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoInputPathOptionSpecified ()
specifier|public
name|void
name|testNoInputPathOptionSpecified
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expectedErrorMessage
init|=
literal|"\"--"
operator|+
name|CliConstants
operator|.
name|INPUT_PATH
operator|+
literal|"\""
operator|+
literal|" is absent"
decl_stmt|;
name|String
name|actualMessage
init|=
literal|""
decl_stmt|;
try|try
block|{
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--framework"
block|,
name|getFrameworkName
argument_list|()
block|,
literal|"--name"
block|,
literal|"my-job"
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--checkpoint_path"
block|,
literal|"hdfs://output"
block|,
literal|"--num_workers"
block|,
literal|"1"
block|,
literal|"--worker_launch_cmd"
block|,
literal|"python run-job.py"
block|,
literal|"--worker_resources"
block|,
literal|"memory=4g,vcores=2"
block|,
literal|"--verbose"
block|,
literal|"--wait_job_finish"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|actualMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedErrorMessage
argument_list|,
name|actualMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobWithoutName ()
specifier|public
name|void
name|testJobWithoutName
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expectedErrorMessage
init|=
literal|"--"
operator|+
name|CliConstants
operator|.
name|NAME
operator|+
literal|" is absent"
decl_stmt|;
name|String
name|actualMessage
init|=
literal|""
decl_stmt|;
try|try
block|{
name|runJobCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--framework"
block|,
name|getFrameworkName
argument_list|()
block|,
literal|"--docker_image"
block|,
literal|"tf-docker:1.1.0"
block|,
literal|"--num_workers"
block|,
literal|"0"
block|,
literal|"--verbose"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|actualMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedErrorMessage
argument_list|,
name|actualMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLaunchCommandPatternReplace ()
specifier|public
name|void
name|testLaunchCommandPatternReplace
parameter_list|()
throws|throws
name|Exception
block|{
name|RunJobCli
name|runJobCli
init|=
operator|new
name|RunJobCli
argument_list|(
name|getMockClientContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|SubmarineLogs
operator|.
name|isVerbose
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"--framework"
argument_list|,
name|getFrameworkName
argument_list|()
argument_list|,
literal|"--name"
argument_list|,
literal|"my-job"
argument_list|,
literal|"--docker_image"
argument_list|,
literal|"tf-docker:1.1.0"
argument_list|,
literal|"--input_path"
argument_list|,
literal|"hdfs://input"
argument_list|,
literal|"--checkpoint_path"
argument_list|,
literal|"hdfs://output"
argument_list|,
literal|"--num_workers"
argument_list|,
literal|"3"
argument_list|,
literal|"--worker_launch_cmd"
argument_list|,
literal|"python run-job.py --input=%input_path% "
operator|+
literal|"--model_dir=%checkpoint_path% "
operator|+
literal|"--export_dir=%saved_model_path%/savedmodel"
argument_list|,
literal|"--worker_resources"
argument_list|,
literal|"memory=2048,vcores=2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|framework
operator|==
name|Framework
operator|.
name|TENSORFLOW
condition|)
block|{
name|parameters
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"--ps_resources"
argument_list|,
literal|"memory=4096,vcores=4"
argument_list|,
literal|"--ps_launch_cmd"
argument_list|,
literal|"python run-ps.py --input=%input_path% "
operator|+
literal|"--model_dir=%checkpoint_path%/model"
argument_list|,
literal|"--verbose"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|runJobCli
operator|.
name|run
argument_list|(
name|parameters
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|RunJobParameters
name|runJobParameters
init|=
name|checkExpectedFrameworkParams
argument_list|(
name|runJobCli
argument_list|)
decl_stmt|;
if|if
condition|(
name|framework
operator|==
name|Framework
operator|.
name|TENSORFLOW
condition|)
block|{
name|TensorFlowRunJobParameters
name|tensorFlowParams
init|=
operator|(
name|TensorFlowRunJobParameters
operator|)
name|runJobParameters
decl_stmt|;
name|assertEquals
argument_list|(
literal|"python run-job.py --input=hdfs://input --model_dir=hdfs://output "
operator|+
literal|"--export_dir=hdfs://output/savedmodel"
argument_list|,
name|tensorFlowParams
operator|.
name|getWorkerLaunchCmd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"python run-ps.py --input=hdfs://input "
operator|+
literal|"--model_dir=hdfs://output/model"
argument_list|,
name|tensorFlowParams
operator|.
name|getPSLaunchCmd
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|framework
operator|==
name|Framework
operator|.
name|PYTORCH
condition|)
block|{
name|PyTorchRunJobParameters
name|pyTorchParameters
init|=
operator|(
name|PyTorchRunJobParameters
operator|)
name|runJobParameters
decl_stmt|;
name|assertEquals
argument_list|(
literal|"python run-job.py --input=hdfs://input --model_dir=hdfs://output "
operator|+
literal|"--export_dir=hdfs://output/savedmodel"
argument_list|,
name|pyTorchParameters
operator|.
name|getWorkerLaunchCmd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkExpectedFrameworkParams (RunJobCli runJobCli)
specifier|private
name|RunJobParameters
name|checkExpectedFrameworkParams
parameter_list|(
name|RunJobCli
name|runJobCli
parameter_list|)
block|{
name|RunJobParameters
name|runJobParameters
init|=
name|runJobCli
operator|.
name|getRunJobParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|framework
operator|==
name|Framework
operator|.
name|TENSORFLOW
condition|)
block|{
name|assertTrue
argument_list|(
name|RunJobParameters
operator|.
name|class
operator|+
literal|" must be an instance of "
operator|+
name|TensorFlowRunJobParameters
operator|.
name|class
argument_list|,
name|runJobParameters
operator|instanceof
name|TensorFlowRunJobParameters
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|framework
operator|==
name|Framework
operator|.
name|PYTORCH
condition|)
block|{
name|assertTrue
argument_list|(
name|RunJobParameters
operator|.
name|class
operator|+
literal|" must be an instance of "
operator|+
name|PyTorchRunJobParameters
operator|.
name|class
argument_list|,
name|runJobParameters
operator|instanceof
name|PyTorchRunJobParameters
argument_list|)
expr_stmt|;
block|}
return|return
name|runJobParameters
return|;
block|}
block|}
end_class

end_unit

