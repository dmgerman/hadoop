begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|MockRemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestFSBasedSubmarineStorage
specifier|public
class|class
name|TestFSBasedSubmarineStorage
block|{
DECL|method|getMap (String prefix)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMap
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"2"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"3"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"4"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|compareMap (Map<String, String> map1, Map<String, String> map2)
specifier|private
name|void
name|compareMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map1
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map2
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|map1
operator|.
name|size
argument_list|()
argument_list|,
name|map2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|k
range|:
name|map1
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|map1
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|,
name|map2
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStorageOps ()
specifier|public
name|void
name|testStorageOps
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRemoteDirectoryManager
name|remoteDirectoryManager
init|=
operator|new
name|MockRemoteDirectoryManager
argument_list|()
decl_stmt|;
name|ClientContext
name|clientContext
init|=
name|mock
argument_list|(
name|ClientContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|clientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|remoteDirectoryManager
argument_list|)
expr_stmt|;
name|FSBasedSubmarineStorageImpl
name|storage
init|=
operator|new
name|FSBasedSubmarineStorageImpl
argument_list|(
name|clientContext
argument_list|)
decl_stmt|;
name|storage
operator|.
name|addNewJob
argument_list|(
literal|"job1"
argument_list|,
name|getMap
argument_list|(
literal|"job1"
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|addNewJob
argument_list|(
literal|"job2"
argument_list|,
name|getMap
argument_list|(
literal|"job2"
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|addNewJob
argument_list|(
literal|"job3"
argument_list|,
name|getMap
argument_list|(
literal|"job3"
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|addNewJob
argument_list|(
literal|"job4"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|addNewModel
argument_list|(
literal|"model1"
argument_list|,
literal|"1.0"
argument_list|,
name|getMap
argument_list|(
literal|"model1_1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|addNewModel
argument_list|(
literal|"model1"
argument_list|,
literal|"2.0.0"
argument_list|,
name|getMap
argument_list|(
literal|"model1_2.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|addNewModel
argument_list|(
literal|"model2"
argument_list|,
literal|null
argument_list|,
name|getMap
argument_list|(
literal|"model1_default"
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|addNewModel
argument_list|(
literal|"model2"
argument_list|,
literal|"1.0"
argument_list|,
name|getMap
argument_list|(
literal|"model2_1.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a new storage and read it back.
name|storage
operator|=
operator|new
name|FSBasedSubmarineStorageImpl
argument_list|(
name|clientContext
argument_list|)
expr_stmt|;
name|compareMap
argument_list|(
name|getMap
argument_list|(
literal|"job1"
argument_list|)
argument_list|,
name|storage
operator|.
name|getJobInfoByName
argument_list|(
literal|"job1"
argument_list|)
argument_list|)
expr_stmt|;
name|compareMap
argument_list|(
name|getMap
argument_list|(
literal|"job2"
argument_list|)
argument_list|,
name|storage
operator|.
name|getJobInfoByName
argument_list|(
literal|"job2"
argument_list|)
argument_list|)
expr_stmt|;
name|compareMap
argument_list|(
name|getMap
argument_list|(
literal|"job3"
argument_list|)
argument_list|,
name|storage
operator|.
name|getJobInfoByName
argument_list|(
literal|"job3"
argument_list|)
argument_list|)
expr_stmt|;
name|compareMap
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|storage
operator|.
name|getJobInfoByName
argument_list|(
literal|"job4"
argument_list|)
argument_list|)
expr_stmt|;
name|compareMap
argument_list|(
name|getMap
argument_list|(
literal|"model1_1.0"
argument_list|)
argument_list|,
name|storage
operator|.
name|getModelInfoByName
argument_list|(
literal|"model1"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|compareMap
argument_list|(
name|getMap
argument_list|(
literal|"model1_2.0.0"
argument_list|)
argument_list|,
name|storage
operator|.
name|getModelInfoByName
argument_list|(
literal|"model1"
argument_list|,
literal|"2.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|compareMap
argument_list|(
name|getMap
argument_list|(
literal|"model2_1.0"
argument_list|)
argument_list|,
name|storage
operator|.
name|getModelInfoByName
argument_list|(
literal|"model2"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

