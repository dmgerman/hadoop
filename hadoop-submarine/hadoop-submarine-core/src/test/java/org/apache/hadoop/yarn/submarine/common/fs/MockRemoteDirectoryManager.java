begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.common.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|MockRemoteDirectoryManager
specifier|public
class|class
name|MockRemoteDirectoryManager
implements|implements
name|RemoteDirectoryManager
block|{
DECL|field|jobsParentDir
specifier|private
name|File
name|jobsParentDir
init|=
literal|null
decl_stmt|;
DECL|field|modelParentDir
specifier|private
name|File
name|modelParentDir
init|=
literal|null
decl_stmt|;
DECL|field|jobDir
specifier|private
name|File
name|jobDir
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|getJobStagingArea (String jobName, boolean create)
specifier|public
name|Path
name|getJobStagingArea
parameter_list|(
name|String
name|jobName
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|jobsParentDir
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|jobsParentDir
operator|=
operator|new
name|File
argument_list|(
literal|"target/_staging_area_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|jobsParentDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to mkdirs for"
operator|+
name|jobsParentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|jobDir
operator|=
operator|new
name|File
argument_list|(
name|jobsParentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|jobName
argument_list|)
expr_stmt|;
if|if
condition|(
name|create
operator|&&
operator|!
name|jobDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|jobDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to mkdirs for "
operator|+
name|jobDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Path
argument_list|(
name|jobDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobCheckpointDir (String jobName, boolean create)
specifier|public
name|Path
name|getJobCheckpointDir
parameter_list|(
name|String
name|jobName
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"s3://generated_checkpoint_dir"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getModelDir (String modelName, boolean create)
specifier|public
name|Path
name|getModelDir
parameter_list|(
name|String
name|modelName
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|modelParentDir
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|modelParentDir
operator|=
operator|new
name|File
argument_list|(
literal|"target/_models_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|modelParentDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to mkdirs for "
operator|+
name|modelParentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|File
name|modelDir
init|=
operator|new
name|File
argument_list|(
name|modelParentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|modelName
argument_list|)
decl_stmt|;
if|if
condition|(
name|create
condition|)
block|{
if|if
condition|(
operator|!
name|modelDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|modelDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to mkdirs for "
operator|+
name|modelDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Path
argument_list|(
name|modelDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultFileSystem ()
specifier|public
name|FileSystem
name|getDefaultFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileSystemByUri (String uri)
specifier|public
name|FileSystem
name|getFileSystemByUri
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDefaultFileSystem
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getUserRootFolder ()
specifier|public
name|Path
name|getUserRootFolder
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"s3://generated_root_dir"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isDir (String uri)
specifier|public
name|boolean
name|isDir
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDefaultFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|convertToStagingPath
argument_list|(
name|uri
argument_list|)
argument_list|)
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isRemote (String uri)
specifier|public
name|boolean
name|isRemote
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|scheme
init|=
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|scheme
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|scheme
operator|.
name|startsWith
argument_list|(
literal|"file://"
argument_list|)
return|;
block|}
DECL|method|convertToStagingPath (String uri)
specifier|private
name|String
name|convertToStagingPath
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|ret
init|=
name|uri
decl_stmt|;
if|if
condition|(
name|isRemote
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|String
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|uri
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ret
operator|=
name|this
operator|.
name|jobDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|dirName
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * We use staging dir as mock HDFS dir.    * */
annotation|@
name|Override
DECL|method|copyRemoteToLocal (String remoteUri, String localUri)
specifier|public
name|boolean
name|copyRemoteToLocal
parameter_list|(
name|String
name|remoteUri
parameter_list|,
name|String
name|localUri
parameter_list|)
throws|throws
name|IOException
block|{
comment|// mock the copy from HDFS into a local copy
name|Path
name|remoteToLocalDir
init|=
operator|new
name|Path
argument_list|(
name|convertToStagingPath
argument_list|(
name|remoteUri
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|old
init|=
operator|new
name|File
argument_list|(
name|convertToStagingPath
argument_list|(
name|localUri
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|.
name|isDirectory
argument_list|()
operator|&&
name|old
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|old
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot delete temp dir:"
operator|+
name|old
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|FileUtil
operator|.
name|copy
argument_list|(
name|getDefaultFileSystem
argument_list|()
argument_list|,
name|remoteToLocalDir
argument_list|,
operator|new
name|File
argument_list|(
name|localUri
argument_list|)
argument_list|,
literal|false
argument_list|,
name|getDefaultFileSystem
argument_list|()
operator|.
name|getConf
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|existsRemoteFile (Path uri)
specifier|public
name|boolean
name|existsRemoteFile
parameter_list|(
name|Path
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fakeLocalFilePath
init|=
name|this
operator|.
name|jobDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|uri
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|fakeLocalFilePath
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRemoteFileStatus (Path p)
specifier|public
name|FileStatus
name|getRemoteFileStatus
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getDefaultFileSystem
argument_list|()
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|convertToStagingPath
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRemoteFileSize (String uri)
specifier|public
name|long
name|getRemoteFileSize
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
comment|// 5 byte for this file to test
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
literal|"https://a/b/1.patch"
argument_list|)
condition|)
block|{
return|return
literal|5
return|;
block|}
return|return
literal|100
operator|*
literal|1024
operator|*
literal|1024
return|;
block|}
block|}
end_class

end_unit

