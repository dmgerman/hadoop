begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.runjob.tensorflow
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
operator|.
name|tensorflow
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|yaml
operator|.
name|Configs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|yaml
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|yaml
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|yaml
operator|.
name|Scheduling
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|yaml
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|yaml
operator|.
name|Spec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|yaml
operator|.
name|TensorBoard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|yaml
operator|.
name|YamlConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineLogs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|YamlConfigTestUtils
operator|.
name|readYamlConfigFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test class that verifies the correctness of YAML configuration parsing.  * Please note that this class just tests YAML parsing,  * but only in an isolated fashion.  */
end_comment

begin_class
DECL|class|TestRunJobCliParsingTensorFlowYamlStandalone
specifier|public
class|class
name|TestRunJobCliParsingTensorFlowYamlStandalone
block|{
DECL|field|OVERRIDDEN_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|OVERRIDDEN_PREFIX
init|=
literal|"overridden_"
decl_stmt|;
DECL|field|DIR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DIR_NAME
init|=
literal|"runjob-tensorflow-yaml"
decl_stmt|;
DECL|method|verifyBasicConfigValues (YamlConfigFile yamlConfigFile)
specifier|private
name|void
name|verifyBasicConfigValues
parameter_list|(
name|YamlConfigFile
name|yamlConfigFile
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Spec file should not be null!"
argument_list|,
name|yamlConfigFile
argument_list|)
expr_stmt|;
name|Spec
name|spec
init|=
name|yamlConfigFile
operator|.
name|getSpec
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Spec should not be null!"
argument_list|,
name|spec
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testJobName"
argument_list|,
name|spec
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testJobType"
argument_list|,
name|spec
operator|.
name|getJobType
argument_list|()
argument_list|)
expr_stmt|;
name|Configs
name|configs
init|=
name|yamlConfigFile
operator|.
name|getConfigs
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Configs should not be null!"
argument_list|,
name|configs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testInputPath"
argument_list|,
name|configs
operator|.
name|getInputPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testCheckpointPath"
argument_list|,
name|configs
operator|.
name|getCheckpointPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSavedModelPath"
argument_list|,
name|configs
operator|.
name|getSavedModelPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDockerImage"
argument_list|,
name|configs
operator|.
name|getDockerImage
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
init|=
name|configs
operator|.
name|getEnvs
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Envs should not be null!"
argument_list|,
name|envs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|envs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"env1Value"
argument_list|,
name|envs
operator|.
name|get
argument_list|(
literal|"env1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"env2Value"
argument_list|,
name|envs
operator|.
name|get
argument_list|(
literal|"env2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localizations
init|=
name|configs
operator|.
name|getLocalizations
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Localizations should not be null!"
argument_list|,
name|localizations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of localizations must be 2!"
argument_list|,
literal|2
argument_list|,
name|localizations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hdfs://remote-file1:/local-filename1:rw"
argument_list|,
name|localizations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nfs://remote-file2:/local-filename2:rw"
argument_list|,
name|localizations
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mounts
init|=
name|configs
operator|.
name|getMounts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Mounts should not be null!"
argument_list|,
name|mounts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of mounts must be 2!"
argument_list|,
literal|2
argument_list|,
name|mounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/etc/passwd:/etc/passwd:rw"
argument_list|,
name|mounts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/etc/hosts:/etc/hosts:rw"
argument_list|,
name|mounts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|configs
operator|.
name|getQuicklinks
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Notebook_UI=https://master-0:7070"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|configs
operator|.
name|getQuicklinks
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Notebook_UI2=https://master-0:7071"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|configs
operator|.
name|getWaitJobFinish
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRoleConfigOverrides (Role role, String prefix, String roleType)
specifier|private
name|void
name|assertRoleConfigOverrides
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|roleType
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|roleType
operator|+
literal|" role should not be null!"
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%stestDockerImage%s"
argument_list|,
name|prefix
argument_list|,
name|roleType
argument_list|)
argument_list|,
name|role
operator|.
name|getDockerImage
argument_list|()
argument_list|)
expr_stmt|;
comment|//envs, localizations and mounts for Roles
comment|// are only present in valid-config-with-overrides.yaml
name|boolean
name|validateAll
init|=
operator|!
name|prefix
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|validateAll
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
init|=
name|role
operator|.
name|getEnvs
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Envs should not be null!"
argument_list|,
name|envs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%senv1%s"
argument_list|,
name|prefix
argument_list|,
name|roleType
argument_list|)
argument_list|,
name|envs
operator|.
name|get
argument_list|(
literal|"env1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%senv2%s"
argument_list|,
name|prefix
argument_list|,
name|roleType
argument_list|)
argument_list|,
name|envs
operator|.
name|get
argument_list|(
literal|"env2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validateAll
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|localizations
init|=
name|role
operator|.
name|getLocalizations
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Localizations should not be null!"
argument_list|,
name|localizations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of localizations must be 2!"
argument_list|,
literal|2
argument_list|,
name|localizations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"hdfs://remote-file1:/%slocal"
operator|+
literal|"-filename1%s:rw"
argument_list|,
name|prefix
argument_list|,
name|roleType
argument_list|)
argument_list|,
name|localizations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"nfs://remote-file2:/%slocal"
operator|+
literal|"-filename2%s:rw"
argument_list|,
name|prefix
argument_list|,
name|roleType
argument_list|)
argument_list|,
name|localizations
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validateAll
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|mounts
init|=
name|role
operator|.
name|getMounts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Mounts should not be null!"
argument_list|,
name|mounts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of mounts must be 2!"
argument_list|,
literal|2
argument_list|,
name|mounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"/etc/passwd:/%s%s"
argument_list|,
name|prefix
argument_list|,
name|roleType
argument_list|)
argument_list|,
name|mounts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"/etc/hosts:/%s%s"
argument_list|,
name|prefix
argument_list|,
name|roleType
argument_list|)
argument_list|,
name|mounts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertWorkerValues (Role worker)
specifier|private
name|void
name|assertWorkerValues
parameter_list|(
name|Role
name|worker
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"testLaunchCmdWorker"
argument_list|,
name|worker
operator|.
name|getLaunchCmd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDockerImageWorker"
argument_list|,
name|worker
operator|.
name|getDockerImage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"memory=20480M,vcores=32,gpu=2"
argument_list|,
name|worker
operator|.
name|getResources
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|worker
operator|.
name|getReplicas
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPsValues (Role ps)
specifier|private
name|void
name|assertPsValues
parameter_list|(
name|Role
name|ps
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"testLaunchCmdPs"
argument_list|,
name|ps
operator|.
name|getLaunchCmd
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testDockerImagePs"
argument_list|,
name|ps
operator|.
name|getDockerImage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"memory=20500M,vcores=34,gpu=4"
argument_list|,
name|ps
operator|.
name|getResources
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|ps
operator|.
name|getReplicas
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySchedulingValues (YamlConfigFile yamlConfigFile)
specifier|private
name|void
name|verifySchedulingValues
parameter_list|(
name|YamlConfigFile
name|yamlConfigFile
parameter_list|)
block|{
name|Scheduling
name|scheduling
init|=
name|yamlConfigFile
operator|.
name|getScheduling
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Scheduling should not be null!"
argument_list|,
name|scheduling
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue1"
argument_list|,
name|scheduling
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySecurityValues (YamlConfigFile yamlConfigFile)
specifier|private
name|void
name|verifySecurityValues
parameter_list|(
name|YamlConfigFile
name|yamlConfigFile
parameter_list|)
block|{
name|Security
name|security
init|=
name|yamlConfigFile
operator|.
name|getSecurity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Security should not be null!"
argument_list|,
name|security
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"keytabPath"
argument_list|,
name|security
operator|.
name|getKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testPrincipal"
argument_list|,
name|security
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|security
operator|.
name|isDistributeKeytab
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyTensorboardValues (YamlConfigFile yamlConfigFile)
specifier|private
name|void
name|verifyTensorboardValues
parameter_list|(
name|YamlConfigFile
name|yamlConfigFile
parameter_list|)
block|{
name|TensorBoard
name|tensorBoard
init|=
name|yamlConfigFile
operator|.
name|getTensorBoard
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Tensorboard should not be null!"
argument_list|,
name|tensorBoard
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tensorboardDockerImage"
argument_list|,
name|tensorBoard
operator|.
name|getDockerImage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"memory=21000M,vcores=37,gpu=3"
argument_list|,
name|tensorBoard
operator|.
name|getResources
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|SubmarineLogs
operator|.
name|verboseOff
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLaunchCommandYaml ()
specifier|public
name|void
name|testLaunchCommandYaml
parameter_list|()
block|{
name|YamlConfigFile
name|yamlConfigFile
init|=
name|readYamlConfigFile
argument_list|(
name|DIR_NAME
operator|+
literal|"/valid-config.yaml"
argument_list|)
decl_stmt|;
name|verifyBasicConfigValues
argument_list|(
name|yamlConfigFile
argument_list|)
expr_stmt|;
name|Roles
name|roles
init|=
name|yamlConfigFile
operator|.
name|getRoles
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Roles should not be null!"
argument_list|,
name|roles
argument_list|)
expr_stmt|;
name|assertRoleConfigOverrides
argument_list|(
name|roles
operator|.
name|getWorker
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|"Worker"
argument_list|)
expr_stmt|;
name|assertRoleConfigOverrides
argument_list|(
name|roles
operator|.
name|getPs
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|"Ps"
argument_list|)
expr_stmt|;
name|assertWorkerValues
argument_list|(
name|roles
operator|.
name|getWorker
argument_list|()
argument_list|)
expr_stmt|;
name|assertPsValues
argument_list|(
name|roles
operator|.
name|getPs
argument_list|()
argument_list|)
expr_stmt|;
name|verifySchedulingValues
argument_list|(
name|yamlConfigFile
argument_list|)
expr_stmt|;
name|verifySecurityValues
argument_list|(
name|yamlConfigFile
argument_list|)
expr_stmt|;
name|verifyTensorboardValues
argument_list|(
name|yamlConfigFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverrides ()
specifier|public
name|void
name|testOverrides
parameter_list|()
block|{
name|YamlConfigFile
name|yamlConfigFile
init|=
name|readYamlConfigFile
argument_list|(
name|DIR_NAME
operator|+
literal|"/valid-config-with-overrides.yaml"
argument_list|)
decl_stmt|;
name|verifyBasicConfigValues
argument_list|(
name|yamlConfigFile
argument_list|)
expr_stmt|;
name|Roles
name|roles
init|=
name|yamlConfigFile
operator|.
name|getRoles
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Roles should not be null!"
argument_list|,
name|roles
argument_list|)
expr_stmt|;
name|assertRoleConfigOverrides
argument_list|(
name|roles
operator|.
name|getWorker
argument_list|()
argument_list|,
name|OVERRIDDEN_PREFIX
argument_list|,
literal|"Worker"
argument_list|)
expr_stmt|;
name|assertRoleConfigOverrides
argument_list|(
name|roles
operator|.
name|getPs
argument_list|()
argument_list|,
name|OVERRIDDEN_PREFIX
argument_list|,
literal|"Ps"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

