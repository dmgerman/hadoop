begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.runtimes.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|MemorySubmarineStorage
specifier|public
class|class
name|MemorySubmarineStorage
extends|extends
name|SubmarineStorage
block|{
DECL|field|jobsInfo
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|jobsInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|modelsInfo
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|modelsInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|addNewJob (String jobName, Map<String, String> jobInfo)
specifier|public
specifier|synchronized
name|void
name|addNewJob
parameter_list|(
name|String
name|jobName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|jobsInfo
operator|.
name|put
argument_list|(
name|jobName
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getJobInfoByName (String jobName)
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getJobInfoByName
parameter_list|(
name|String
name|jobName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|jobsInfo
operator|.
name|get
argument_list|(
name|jobName
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to find job="
operator|+
name|jobName
argument_list|)
throw|;
block|}
return|return
name|info
return|;
block|}
annotation|@
name|Override
DECL|method|addNewModel (String modelName, String version, Map<String, String> modelInfo)
specifier|public
specifier|synchronized
name|void
name|addNewModel
parameter_list|(
name|String
name|modelName
parameter_list|,
name|String
name|version
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|modelInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|modelsInfo
operator|.
name|containsKey
argument_list|(
name|modelName
argument_list|)
condition|)
block|{
name|modelsInfo
operator|.
name|put
argument_list|(
name|modelName
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|modelsInfo
operator|.
name|get
argument_list|(
name|modelName
argument_list|)
operator|.
name|put
argument_list|(
name|version
argument_list|,
name|modelInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getModelInfoByName (String modelName, String version)
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getModelInfoByName
parameter_list|(
name|String
name|modelName
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|notFound
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|info
operator|=
name|modelsInfo
operator|.
name|get
argument_list|(
name|modelName
argument_list|)
operator|.
name|get
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|notFound
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|notFound
operator|||
name|info
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to find, model="
operator|+
name|modelName
operator|+
literal|" version="
operator|+
name|version
argument_list|)
throw|;
block|}
return|return
name|info
return|;
block|}
block|}
end_class

end_unit

