begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.common.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Represents the type of Runtime.  */
end_comment

begin_enum
DECL|enum|Runtime
specifier|public
enum|enum
name|Runtime
block|{
DECL|enumConstant|TONY
DECL|enumConstant|YARN_SERVICE
name|TONY
parameter_list|(
name|Constants
operator|.
name|TONY
parameter_list|)
operator|,
constructor|YARN_SERVICE(Constants.YARN_SERVICE
block|)
enum|;
end_enum

begin_decl_stmt
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|Runtime (String value)
name|Runtime
argument_list|(
name|String
name|value
argument_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
block|;   }
DECL|method|getValue ()
specifier|public
name|String
name|getValue
argument_list|()
block|{
return|return
name|value
return|;
block|}
end_expr_stmt

begin_function
DECL|method|parseByValue (String value)
specifier|public
specifier|static
name|Runtime
name|parseByValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|Runtime
name|rt
range|:
name|Runtime
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|rt
operator|.
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|rt
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
DECL|method|getValues ()
specifier|public
specifier|static
name|String
name|getValues
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Runtime
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|rt
lambda|->
name|rt
operator|.
name|value
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|values
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|Constants
specifier|public
specifier|static
class|class
name|Constants
block|{
DECL|field|TONY
specifier|public
specifier|static
specifier|final
name|String
name|TONY
init|=
literal|"tony"
decl_stmt|;
DECL|field|YARN_SERVICE
specifier|public
specifier|static
specifier|final
name|String
name|YARN_SERVICE
init|=
literal|"yarnservice"
decl_stmt|;
block|}
end_class

unit|}
end_unit

