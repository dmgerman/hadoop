begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.common.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|exception
operator|.
name|SubmarineRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This class implements some methods with the almost the same logic as  * org.apache.hadoop.yarn.util.resource.ResourceUtils of hadoop 3.3.  * If the hadoop dependencies are upgraded to 3.3, this class can be refactored  * with org.apache.hadoop.yarn.util.resource.ResourceUtils.  */
end_comment

begin_class
DECL|class|ResourceUtils
specifier|public
specifier|final
class|class
name|ResourceUtils
block|{
DECL|field|RES_PATTERN
specifier|private
specifier|final
specifier|static
name|String
name|RES_PATTERN
init|=
literal|"^[^=]+=\\d+\\s?\\w*$"
decl_stmt|;
DECL|field|SET_RESOURCE_VALUE_METHOD
specifier|private
specifier|final
specifier|static
name|String
name|SET_RESOURCE_VALUE_METHOD
init|=
literal|"setResourceValue"
decl_stmt|;
DECL|field|SET_MEMORY_SIZE_METHOD
specifier|private
specifier|final
specifier|static
name|String
name|SET_MEMORY_SIZE_METHOD
init|=
literal|"setMemorySize"
decl_stmt|;
DECL|field|DEPRECATED_SET_MEMORY_SIZE_METHOD
specifier|private
specifier|final
specifier|static
name|String
name|DEPRECATED_SET_MEMORY_SIZE_METHOD
init|=
literal|"setMemory"
decl_stmt|;
DECL|field|GET_MEMORY_SIZE_METHOD
specifier|private
specifier|final
specifier|static
name|String
name|GET_MEMORY_SIZE_METHOD
init|=
literal|"getMemorySize"
decl_stmt|;
DECL|field|DEPRECATED_GET_MEMORY_SIZE_METHOD
specifier|private
specifier|final
specifier|static
name|String
name|DEPRECATED_GET_MEMORY_SIZE_METHOD
init|=
literal|"getMemory"
decl_stmt|;
DECL|field|GET_RESOURCE_VALUE_METHOD
specifier|private
specifier|final
specifier|static
name|String
name|GET_RESOURCE_VALUE_METHOD
init|=
literal|"getResourceValue"
decl_stmt|;
DECL|field|GET_RESOURCE_TYPE_METHOD
specifier|private
specifier|final
specifier|static
name|String
name|GET_RESOURCE_TYPE_METHOD
init|=
literal|"getResourcesTypeInfo"
decl_stmt|;
DECL|field|REINITIALIZE_RESOURCES_METHOD
specifier|private
specifier|final
specifier|static
name|String
name|REINITIALIZE_RESOURCES_METHOD
init|=
literal|"reinitializeResources"
decl_stmt|;
DECL|field|MEMORY_URI
specifier|public
specifier|static
specifier|final
name|String
name|MEMORY_URI
init|=
literal|"memory-mb"
decl_stmt|;
DECL|field|VCORES_URI
specifier|public
specifier|static
specifier|final
name|String
name|VCORES_URI
init|=
literal|"vcores"
decl_stmt|;
DECL|field|GPU_URI
specifier|public
specifier|static
specifier|final
name|String
name|GPU_URI
init|=
literal|"yarn.io/gpu"
decl_stmt|;
DECL|field|FPGA_URI
specifier|public
specifier|static
specifier|final
name|String
name|FPGA_URI
init|=
literal|"yarn.io/fpga"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResourceUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ResourceUtils ()
specifier|private
name|ResourceUtils
parameter_list|()
block|{}
DECL|method|createResourceFromString (String resourceStr)
specifier|public
specifier|static
name|Resource
name|createResourceFromString
parameter_list|(
name|String
name|resourceStr
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|typeToValue
init|=
name|parseResourcesString
argument_list|(
name|resourceStr
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|typeToValue
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|VCORES_URI
argument_list|)
condition|)
block|{
name|resource
operator|.
name|setVirtualCores
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|MEMORY_URI
argument_list|)
condition|)
block|{
name|setMemorySize
argument_list|(
name|resource
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|setResource
argument_list|(
name|resource
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
DECL|method|parseResourcesString (String resourcesStr)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|parseResourcesString
parameter_list|(
name|String
name|resourcesStr
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|pairs
init|=
name|resourcesStr
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|resource
range|:
name|pairs
control|)
block|{
name|resource
operator|=
name|resource
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|resource
operator|.
name|matches
argument_list|(
name|RES_PATTERN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"\""
operator|+
name|resource
operator|+
literal|"\" is not a "
operator|+
literal|"valid resource type/amount pair. "
operator|+
literal|"Please provide key=amount pairs separated by commas."
argument_list|)
throw|;
block|}
name|String
index|[]
name|splits
init|=
name|resource
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|splits
index|[
literal|0
index|]
decl_stmt|,
name|value
init|=
name|splits
index|[
literal|1
index|]
decl_stmt|;
name|String
name|units
init|=
name|getUnits
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|String
name|valueWithoutUnit
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
name|units
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|long
name|resourceValue
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|valueWithoutUnit
argument_list|)
decl_stmt|;
comment|// Convert commandline unit to standard YARN unit.
if|if
condition|(
name|units
operator|.
name|equals
argument_list|(
literal|"M"
argument_list|)
operator|||
name|units
operator|.
name|equals
argument_list|(
literal|"m"
argument_list|)
condition|)
block|{
name|units
operator|=
literal|"Mi"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|units
operator|.
name|equals
argument_list|(
literal|"G"
argument_list|)
operator|||
name|units
operator|.
name|equals
argument_list|(
literal|"g"
argument_list|)
condition|)
block|{
name|units
operator|=
literal|"Gi"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|units
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Acceptable units are M/G or empty"
argument_list|)
throw|;
block|}
comment|// special handle memory-mb and memory
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|MEMORY_URI
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|units
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resourceValue
operator|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|units
argument_list|,
literal|"Mi"
argument_list|,
name|resourceValue
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"memory"
argument_list|)
condition|)
block|{
name|key
operator|=
name|MEMORY_URI
expr_stmt|;
name|resourceValue
operator|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|units
argument_list|,
literal|"Mi"
argument_list|,
name|resourceValue
argument_list|)
expr_stmt|;
block|}
comment|// special handle gpu
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"gpu"
argument_list|)
condition|)
block|{
name|key
operator|=
name|GPU_URI
expr_stmt|;
block|}
comment|// special handle fpga
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"fpga"
argument_list|)
condition|)
block|{
name|key
operator|=
name|FPGA_URI
expr_stmt|;
block|}
name|resources
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|resourceValue
argument_list|)
expr_stmt|;
block|}
return|return
name|resources
return|;
block|}
comment|/**    * As hadoop 2.9.2 and lower don't support resources except cpu and memory.    * Use reflection to set GPU or other resources for compatibility with    * hadoop 2.9.2    */
DECL|method|setResource (Resource resource, String resourceName, int resourceValue)
specifier|public
specifier|static
name|void
name|setResource
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|int
name|resourceValue
parameter_list|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|resource
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|SET_RESOURCE_VALUE_METHOD
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|,
name|resourceValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"There is no '"
operator|+
name|SET_RESOURCE_VALUE_METHOD
operator|+
literal|"' API in this"
operator|+
literal|"version of YARN"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to invoke '"
operator|+
name|SET_RESOURCE_VALUE_METHOD
operator|+
literal|"' method to set GPU resources"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
return|return;
block|}
DECL|method|setMemorySize (Resource resource, Long memorySize)
specifier|public
specifier|static
name|void
name|setMemorySize
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Long
name|memorySize
parameter_list|)
block|{
name|boolean
name|useWithIntParameter
init|=
literal|false
decl_stmt|;
comment|// For hadoop 2.9.2 and above
try|try
block|{
name|Method
name|method
init|=
name|resource
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|SET_MEMORY_SIZE_METHOD
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|resource
argument_list|,
name|memorySize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"There is no '"
operator|+
name|SET_MEMORY_SIZE_METHOD
operator|+
literal|"(long)' API in"
operator|+
literal|" this version of YARN"
argument_list|)
expr_stmt|;
name|useWithIntParameter
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to invoke '"
operator|+
name|SET_MEMORY_SIZE_METHOD
operator|+
literal|"' method"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
comment|// For hadoop 2.7.3
if|if
condition|(
name|useWithIntParameter
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to use '"
operator|+
name|DEPRECATED_SET_MEMORY_SIZE_METHOD
operator|+
literal|"(int)' API for this version of YARN"
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
name|resource
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|DEPRECATED_SET_MEMORY_SIZE_METHOD
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|resource
argument_list|,
name|memorySize
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"There is no '"
operator|+
name|DEPRECATED_SET_MEMORY_SIZE_METHOD
operator|+
literal|"(int)' API in this version of YARN"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to invoke '"
operator|+
name|DEPRECATED_SET_MEMORY_SIZE_METHOD
operator|+
literal|"' method"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getMemorySize (Resource resource)
specifier|public
specifier|static
name|long
name|getMemorySize
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|boolean
name|useWithIntParameter
init|=
literal|false
decl_stmt|;
name|long
name|memory
init|=
literal|0
decl_stmt|;
comment|// For hadoop 2.9.2 and above
try|try
block|{
name|Method
name|method
init|=
name|resource
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|GET_MEMORY_SIZE_METHOD
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|memory
operator|=
operator|(
name|long
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"There is no '"
operator|+
name|GET_MEMORY_SIZE_METHOD
operator|+
literal|"' API in"
operator|+
literal|" this version of YARN"
argument_list|)
expr_stmt|;
name|useWithIntParameter
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to invoke '"
operator|+
name|GET_MEMORY_SIZE_METHOD
operator|+
literal|"' method"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
comment|// For hadoop 2.7.3
if|if
condition|(
name|useWithIntParameter
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to use '"
operator|+
name|DEPRECATED_GET_MEMORY_SIZE_METHOD
operator|+
literal|"' API for this version of YARN"
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
name|resource
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|DEPRECATED_GET_MEMORY_SIZE_METHOD
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|memory
operator|=
operator|(
operator|(
name|Integer
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|resource
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"There is no '"
operator|+
name|DEPRECATED_GET_MEMORY_SIZE_METHOD
operator|+
literal|"' API in this version of YARN"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to invoke '"
operator|+
name|DEPRECATED_GET_MEMORY_SIZE_METHOD
operator|+
literal|"' method"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|memory
return|;
block|}
comment|/**    * As hadoop 2.9.2 and lower don't support resources except cpu and memory.    * Use reflection to set GPU or other resources for compatibility with    * hadoop 2.9.2    */
DECL|method|getResourceValue (Resource resource, String resourceName)
specifier|public
specifier|static
name|long
name|getResourceValue
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|String
name|resourceName
parameter_list|)
block|{
name|long
name|resourceValue
init|=
literal|0
decl_stmt|;
try|try
block|{
name|Method
name|method
init|=
name|resource
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|GET_RESOURCE_VALUE_METHOD
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|method
operator|.
name|invoke
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
decl_stmt|;
name|resourceValue
operator|=
operator|(
name|long
operator|)
name|value
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"There is no '"
operator|+
name|GET_RESOURCE_VALUE_METHOD
operator|+
literal|"' API in this"
operator|+
literal|" version of YARN"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getTargetException
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.yarn.exceptions.ResourceNotFoundException"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not found resource "
operator|+
name|resourceName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to invoke '"
operator|+
name|GET_RESOURCE_VALUE_METHOD
operator|+
literal|"'"
operator|+
literal|" method to get resource "
operator|+
name|resourceName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|ClassCastException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to invoke '"
operator|+
name|GET_RESOURCE_VALUE_METHOD
operator|+
literal|"' method to get resource "
operator|+
name|resourceName
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|resourceValue
return|;
block|}
comment|/**    * As hadoop 2.9.2 and lower don't support resources except cpu and memory.    * Use reflection to add GPU or other resources for compatibility with    * hadoop 2.9.2    */
DECL|method|configureResourceType (String resrouceName)
specifier|public
specifier|static
name|void
name|configureResourceType
parameter_list|(
name|String
name|resrouceName
parameter_list|)
block|{
name|Class
name|resourceTypeInfo
decl_stmt|;
try|try
block|{
name|resourceTypeInfo
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.yarn.api.records.ResourceTypeInfo"
argument_list|)
expr_stmt|;
name|Class
name|resourceUtils
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.yarn.util.resource.ResourceUtils"
argument_list|)
decl_stmt|;
name|Method
name|method
init|=
name|resourceUtils
operator|.
name|getMethod
argument_list|(
name|GET_RESOURCE_TYPE_METHOD
argument_list|)
decl_stmt|;
name|Object
name|resTypes
init|=
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Method
name|resourceTypeInstance
init|=
name|resourceTypeInfo
operator|.
name|getMethod
argument_list|(
literal|"newInstance"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|resourceType
init|=
name|resourceTypeInstance
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|resrouceName
argument_list|,
literal|""
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ArrayList
operator|)
name|resTypes
operator|)
operator|.
name|add
argument_list|(
name|resourceType
argument_list|)
expr_stmt|;
name|Method
name|reInitialMethod
init|=
name|resourceUtils
operator|.
name|getMethod
argument_list|(
name|REINITIALIZE_RESOURCES_METHOD
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|reInitialMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|resTypes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"There is no specified class API in this"
operator|+
literal|" version of YARN"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"There is no '"
operator|+
name|GET_RESOURCE_VALUE_METHOD
operator|+
literal|"' API in this"
operator|+
literal|" version of YARN"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to invoke 'configureResourceType' method "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SubmarineRuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getUnits (String resourceValue)
specifier|private
specifier|static
name|String
name|getUnits
parameter_list|(
name|String
name|resourceValue
parameter_list|)
block|{
return|return
name|parseResourceValue
argument_list|(
name|resourceValue
argument_list|)
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Extract unit and actual value from resource value.    * @param resourceValue Value of the resource    * @return Array containing unit and value. [0]=unit, [1]=value    * @throws IllegalArgumentException if units contain non alpha characters    */
DECL|method|parseResourceValue (String resourceValue)
specifier|private
specifier|static
name|String
index|[]
name|parseResourceValue
parameter_list|(
name|String
name|resourceValue
parameter_list|)
block|{
name|String
index|[]
name|resource
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|resourceValue
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isAlphabetic
argument_list|(
name|resourceValue
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|String
name|units
init|=
name|resourceValue
operator|.
name|substring
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isAlpha
argument_list|(
name|units
argument_list|)
operator|||
name|units
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|resource
index|[
literal|0
index|]
operator|=
name|units
expr_stmt|;
name|resource
index|[
literal|1
index|]
operator|=
name|resourceValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Units '"
operator|+
name|units
operator|+
literal|"'"
operator|+
literal|" contains non alphabet characters, which is not allowed."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

