begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.param
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|CliConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Parameters required to run anything on cluster. Such as run job / serve model  */
end_comment

begin_class
DECL|class|RunParameters
specifier|public
specifier|abstract
class|class
name|RunParameters
extends|extends
name|BaseParameters
block|{
DECL|field|savedModelPath
specifier|private
name|String
name|savedModelPath
decl_stmt|;
DECL|field|dockerImageName
specifier|private
name|String
name|dockerImageName
decl_stmt|;
DECL|field|envars
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|envars
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|queue
specifier|private
name|String
name|queue
decl_stmt|;
annotation|@
name|Override
DECL|method|updateParameters (ParametersHolder parametersHolder, ClientContext clientContext)
specifier|public
name|void
name|updateParameters
parameter_list|(
name|ParametersHolder
name|parametersHolder
parameter_list|,
name|ClientContext
name|clientContext
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|YarnException
block|{
name|String
name|savedModelPath
init|=
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|SAVED_MODEL_PATH
argument_list|)
decl_stmt|;
name|this
operator|.
name|setSavedModelPath
argument_list|(
name|savedModelPath
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|envVars
init|=
name|getEnvVars
argument_list|(
name|parametersHolder
argument_list|)
decl_stmt|;
name|this
operator|.
name|setEnvars
argument_list|(
name|envVars
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|QUEUE
argument_list|)
decl_stmt|;
name|this
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|String
name|dockerImage
init|=
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|DOCKER_IMAGE
argument_list|)
decl_stmt|;
name|this
operator|.
name|setDockerImageName
argument_list|(
name|dockerImage
argument_list|)
expr_stmt|;
name|super
operator|.
name|updateParameters
argument_list|(
name|parametersHolder
argument_list|,
name|clientContext
argument_list|)
expr_stmt|;
block|}
DECL|method|getEnvVars (ParametersHolder parametersHolder)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getEnvVars
parameter_list|(
name|ParametersHolder
name|parametersHolder
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|envVarsArray
init|=
name|parametersHolder
operator|.
name|getOptionValues
argument_list|(
name|CliConstants
operator|.
name|ENV
argument_list|)
decl_stmt|;
if|if
condition|(
name|envVarsArray
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|envVarsArray
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getQueue ()
specifier|public
name|String
name|getQueue
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
DECL|method|setQueue (String queue)
specifier|public
name|RunParameters
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getDockerImageName ()
specifier|public
name|String
name|getDockerImageName
parameter_list|()
block|{
return|return
name|dockerImageName
return|;
block|}
DECL|method|setDockerImageName (String dockerImageName)
specifier|public
name|RunParameters
name|setDockerImageName
parameter_list|(
name|String
name|dockerImageName
parameter_list|)
block|{
name|this
operator|.
name|dockerImageName
operator|=
name|dockerImageName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getEnvars ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getEnvars
parameter_list|()
block|{
return|return
name|envars
return|;
block|}
DECL|method|setEnvars (List<String> envars)
specifier|public
name|RunParameters
name|setEnvars
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|envars
parameter_list|)
block|{
name|this
operator|.
name|envars
operator|=
name|envars
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSavedModelPath ()
specifier|public
name|String
name|getSavedModelPath
parameter_list|()
block|{
return|return
name|savedModelPath
return|;
block|}
DECL|method|setSavedModelPath (String savedModelPath)
specifier|public
name|RunParameters
name|setSavedModelPath
parameter_list|(
name|String
name|savedModelPath
parameter_list|)
block|{
name|this
operator|.
name|savedModelPath
operator|=
name|savedModelPath
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

