begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.param.yaml
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|yaml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Base class for Roles. 'roles' is a section of the YAML configuration file.  */
end_comment

begin_class
DECL|class|Role
specifier|public
class|class
name|Role
block|{
DECL|field|resources
specifier|private
name|String
name|resources
decl_stmt|;
DECL|field|replicas
specifier|private
name|int
name|replicas
decl_stmt|;
DECL|field|launchCmd
specifier|private
name|String
name|launchCmd
decl_stmt|;
comment|//Optional parameters (Can override global config)
DECL|field|dockerImage
specifier|private
name|String
name|dockerImage
decl_stmt|;
DECL|field|envs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
decl_stmt|;
DECL|field|localizations
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|localizations
decl_stmt|;
DECL|field|mounts
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|mounts
decl_stmt|;
DECL|method|getResources ()
specifier|public
name|String
name|getResources
parameter_list|()
block|{
return|return
name|resources
return|;
block|}
DECL|method|setResources (String resources)
specifier|public
name|void
name|setResources
parameter_list|(
name|String
name|resources
parameter_list|)
block|{
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
block|}
DECL|method|getReplicas ()
specifier|public
name|int
name|getReplicas
parameter_list|()
block|{
return|return
name|replicas
return|;
block|}
DECL|method|setReplicas (int replicas)
specifier|public
name|void
name|setReplicas
parameter_list|(
name|int
name|replicas
parameter_list|)
block|{
name|this
operator|.
name|replicas
operator|=
name|replicas
expr_stmt|;
block|}
DECL|method|getLaunchCmd ()
specifier|public
name|String
name|getLaunchCmd
parameter_list|()
block|{
return|return
name|launchCmd
return|;
block|}
DECL|method|setLaunchCmd (String launchCmd)
specifier|public
name|void
name|setLaunchCmd
parameter_list|(
name|String
name|launchCmd
parameter_list|)
block|{
name|this
operator|.
name|launchCmd
operator|=
name|launchCmd
expr_stmt|;
block|}
DECL|method|getDockerImage ()
specifier|public
name|String
name|getDockerImage
parameter_list|()
block|{
return|return
name|dockerImage
return|;
block|}
DECL|method|setDockerImage (String dockerImage)
specifier|public
name|void
name|setDockerImage
parameter_list|(
name|String
name|dockerImage
parameter_list|)
block|{
name|this
operator|.
name|dockerImage
operator|=
name|dockerImage
expr_stmt|;
block|}
DECL|method|getEnvs ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getEnvs
parameter_list|()
block|{
return|return
name|envs
return|;
block|}
DECL|method|setEnvs (Map<String, String> envs)
specifier|public
name|void
name|setEnvs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
parameter_list|)
block|{
name|this
operator|.
name|envs
operator|=
name|envs
expr_stmt|;
block|}
DECL|method|getLocalizations ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLocalizations
parameter_list|()
block|{
return|return
name|localizations
return|;
block|}
DECL|method|setLocalizations (List<String> localizations)
specifier|public
name|void
name|setLocalizations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|localizations
parameter_list|)
block|{
name|this
operator|.
name|localizations
operator|=
name|localizations
expr_stmt|;
block|}
DECL|method|getMounts ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMounts
parameter_list|()
block|{
return|return
name|mounts
return|;
block|}
DECL|method|setMounts (List<String> mounts)
specifier|public
name|void
name|setMounts
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mounts
parameter_list|)
block|{
name|this
operator|.
name|mounts
operator|=
name|mounts
expr_stmt|;
block|}
block|}
end_class

end_unit

