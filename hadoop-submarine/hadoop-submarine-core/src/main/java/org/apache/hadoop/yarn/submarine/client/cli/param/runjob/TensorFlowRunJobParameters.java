begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.param.runjob
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|CliConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|CliUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|ParametersHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|runjob
operator|.
name|RoleParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|api
operator|.
name|TensorFlowRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Parameters for TensorFlow job.  */
end_comment

begin_class
DECL|class|TensorFlowRunJobParameters
specifier|public
class|class
name|TensorFlowRunJobParameters
extends|extends
name|RunJobParameters
block|{
DECL|field|tensorboardEnabled
specifier|private
name|boolean
name|tensorboardEnabled
decl_stmt|;
DECL|field|psParameters
specifier|private
name|RoleParameters
name|psParameters
init|=
name|RoleParameters
operator|.
name|createEmpty
argument_list|(
name|TensorFlowRole
operator|.
name|PS
argument_list|)
decl_stmt|;
DECL|field|tensorBoardParameters
specifier|private
name|RoleParameters
name|tensorBoardParameters
init|=
name|RoleParameters
operator|.
name|createEmpty
argument_list|(
name|TensorFlowRole
operator|.
name|TENSORBOARD
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|updateParameters (ParametersHolder parametersHolder, ClientContext clientContext)
specifier|public
name|void
name|updateParameters
parameter_list|(
name|ParametersHolder
name|parametersHolder
parameter_list|,
name|ClientContext
name|clientContext
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|YarnException
block|{
name|super
operator|.
name|updateParameters
argument_list|(
name|parametersHolder
argument_list|,
name|clientContext
argument_list|)
expr_stmt|;
name|String
name|input
init|=
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|INPUT_PATH
argument_list|)
decl_stmt|;
name|this
operator|.
name|workerParameters
operator|=
name|getWorkerParameters
argument_list|(
name|clientContext
argument_list|,
name|parametersHolder
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|psParameters
operator|=
name|getPSParameters
argument_list|(
name|clientContext
argument_list|,
name|parametersHolder
argument_list|)
expr_stmt|;
name|this
operator|.
name|distributed
operator|=
name|determineIfDistributed
argument_list|(
name|workerParameters
operator|.
name|getReplicas
argument_list|()
argument_list|,
name|psParameters
operator|.
name|getReplicas
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parametersHolder
operator|.
name|hasOption
argument_list|(
name|CliConstants
operator|.
name|TENSORBOARD
argument_list|)
condition|)
block|{
name|this
operator|.
name|tensorboardEnabled
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|tensorBoardParameters
operator|=
name|getTensorBoardParameters
argument_list|(
name|parametersHolder
argument_list|,
name|clientContext
argument_list|)
expr_stmt|;
block|}
name|executePostOperations
argument_list|(
name|clientContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executePostOperations (ClientContext clientContext)
name|void
name|executePostOperations
parameter_list|(
name|ClientContext
name|clientContext
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Set default job dir / saved model dir, etc.
name|setDefaultDirs
argument_list|(
name|clientContext
argument_list|)
expr_stmt|;
name|replacePatternsInParameters
argument_list|(
name|clientContext
argument_list|)
expr_stmt|;
block|}
DECL|method|replacePatternsInParameters (ClientContext clientContext)
specifier|private
name|void
name|replacePatternsInParameters
parameter_list|(
name|ClientContext
name|clientContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|getPSLaunchCmd
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|afterReplace
init|=
name|CliUtils
operator|.
name|replacePatternsInLaunchCommand
argument_list|(
name|getPSLaunchCmd
argument_list|()
argument_list|,
name|this
argument_list|,
name|clientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|)
decl_stmt|;
name|setPSLaunchCmd
argument_list|(
name|afterReplace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|getWorkerLaunchCmd
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|afterReplace
init|=
name|CliUtils
operator|.
name|replacePatternsInLaunchCommand
argument_list|(
name|getWorkerLaunchCmd
argument_list|()
argument_list|,
name|this
argument_list|,
name|clientContext
operator|.
name|getRemoteDirectoryManager
argument_list|()
argument_list|)
decl_stmt|;
name|setWorkerLaunchCmd
argument_list|(
name|afterReplace
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLaunchCommands ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLaunchCommands
parameter_list|()
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|getWorkerLaunchCmd
argument_list|()
argument_list|,
name|getPSLaunchCmd
argument_list|()
argument_list|)
return|;
block|}
DECL|method|determineIfDistributed (int nWorkers, int nPS)
specifier|private
name|boolean
name|determineIfDistributed
parameter_list|(
name|int
name|nWorkers
parameter_list|,
name|int
name|nPS
parameter_list|)
throws|throws
name|ParseException
block|{
comment|// Check #workers and #ps.
comment|// When distributed training is required
if|if
condition|(
name|nWorkers
operator|>=
literal|2
operator|&&
name|nPS
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|nWorkers
operator|<=
literal|1
operator|&&
name|nPS
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Only specified one worker but non-zero PS, "
operator|+
literal|"please double check."
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getPSParameters (ClientContext clientContext, ParametersHolder parametersHolder)
specifier|private
name|RoleParameters
name|getPSParameters
parameter_list|(
name|ClientContext
name|clientContext
parameter_list|,
name|ParametersHolder
name|parametersHolder
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|int
name|nPS
init|=
name|getNumberOfPS
argument_list|(
name|parametersHolder
argument_list|)
decl_stmt|;
name|Resource
name|psResource
init|=
name|determinePSResource
argument_list|(
name|parametersHolder
argument_list|,
name|nPS
argument_list|,
name|clientContext
argument_list|)
decl_stmt|;
name|String
name|psDockerImage
init|=
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|PS_DOCKER_IMAGE
argument_list|)
decl_stmt|;
name|String
name|psLaunchCommand
init|=
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|PS_LAUNCH_CMD
argument_list|)
decl_stmt|;
return|return
operator|new
name|RoleParameters
argument_list|(
name|TensorFlowRole
operator|.
name|PS
argument_list|,
name|nPS
argument_list|,
name|psLaunchCommand
argument_list|,
name|psDockerImage
argument_list|,
name|psResource
argument_list|)
return|;
block|}
DECL|method|determinePSResource (ParametersHolder parametersHolder, int nPS, ClientContext clientContext)
specifier|private
name|Resource
name|determinePSResource
parameter_list|(
name|ParametersHolder
name|parametersHolder
parameter_list|,
name|int
name|nPS
parameter_list|,
name|ClientContext
name|clientContext
parameter_list|)
throws|throws
name|ParseException
throws|,
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|nPS
operator|>
literal|0
condition|)
block|{
name|String
name|psResourceStr
init|=
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|PS_RES
argument_list|)
decl_stmt|;
if|if
condition|(
name|psResourceStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"--"
operator|+
name|CliConstants
operator|.
name|PS_RES
operator|+
literal|" is absent."
argument_list|)
throw|;
block|}
return|return
name|ResourceUtils
operator|.
name|createResourceFromString
argument_list|(
name|psResourceStr
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getNumberOfPS (ParametersHolder parametersHolder)
specifier|private
name|int
name|getNumberOfPS
parameter_list|(
name|ParametersHolder
name|parametersHolder
parameter_list|)
throws|throws
name|YarnException
block|{
name|int
name|nPS
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|N_PS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|nPS
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|N_PS
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nPS
return|;
block|}
DECL|method|getTensorBoardParameters ( ParametersHolder parametersHolder, ClientContext clientContext)
specifier|private
name|RoleParameters
name|getTensorBoardParameters
parameter_list|(
name|ParametersHolder
name|parametersHolder
parameter_list|,
name|ClientContext
name|clientContext
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|String
name|tensorboardResourceStr
init|=
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|TENSORBOARD_RESOURCES
argument_list|)
decl_stmt|;
if|if
condition|(
name|tensorboardResourceStr
operator|==
literal|null
operator|||
name|tensorboardResourceStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tensorboardResourceStr
operator|=
name|CliConstants
operator|.
name|TENSORBOARD_DEFAULT_RESOURCES
expr_stmt|;
block|}
name|Resource
name|tensorboardResource
init|=
name|ResourceUtils
operator|.
name|createResourceFromString
argument_list|(
name|tensorboardResourceStr
argument_list|)
decl_stmt|;
name|String
name|tensorboardDockerImage
init|=
name|parametersHolder
operator|.
name|getOptionValue
argument_list|(
name|CliConstants
operator|.
name|TENSORBOARD_DOCKER_IMAGE
argument_list|)
decl_stmt|;
return|return
operator|new
name|RoleParameters
argument_list|(
name|TensorFlowRole
operator|.
name|TENSORBOARD
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|tensorboardDockerImage
argument_list|,
name|tensorboardResource
argument_list|)
return|;
block|}
DECL|method|getNumPS ()
specifier|public
name|int
name|getNumPS
parameter_list|()
block|{
return|return
name|psParameters
operator|.
name|getReplicas
argument_list|()
return|;
block|}
DECL|method|setNumPS (int numPS)
specifier|public
name|void
name|setNumPS
parameter_list|(
name|int
name|numPS
parameter_list|)
block|{
name|psParameters
operator|.
name|setReplicas
argument_list|(
name|numPS
argument_list|)
expr_stmt|;
block|}
DECL|method|getPsResource ()
specifier|public
name|Resource
name|getPsResource
parameter_list|()
block|{
return|return
name|psParameters
operator|.
name|getResource
argument_list|()
return|;
block|}
DECL|method|setPsResource (Resource resource)
specifier|public
name|void
name|setPsResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|psParameters
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
DECL|method|getPsDockerImage ()
specifier|public
name|String
name|getPsDockerImage
parameter_list|()
block|{
return|return
name|psParameters
operator|.
name|getDockerImage
argument_list|()
return|;
block|}
DECL|method|setPsDockerImage (String image)
specifier|public
name|void
name|setPsDockerImage
parameter_list|(
name|String
name|image
parameter_list|)
block|{
name|psParameters
operator|.
name|setDockerImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
DECL|method|getPSLaunchCmd ()
specifier|public
name|String
name|getPSLaunchCmd
parameter_list|()
block|{
return|return
name|psParameters
operator|.
name|getLaunchCommand
argument_list|()
return|;
block|}
DECL|method|setPSLaunchCmd (String launchCmd)
specifier|public
name|void
name|setPSLaunchCmd
parameter_list|(
name|String
name|launchCmd
parameter_list|)
block|{
name|psParameters
operator|.
name|setLaunchCommand
argument_list|(
name|launchCmd
argument_list|)
expr_stmt|;
block|}
DECL|method|isTensorboardEnabled ()
specifier|public
name|boolean
name|isTensorboardEnabled
parameter_list|()
block|{
return|return
name|tensorboardEnabled
return|;
block|}
DECL|method|getTensorboardResource ()
specifier|public
name|Resource
name|getTensorboardResource
parameter_list|()
block|{
return|return
name|tensorBoardParameters
operator|.
name|getResource
argument_list|()
return|;
block|}
DECL|method|setTensorboardResource (Resource resource)
specifier|public
name|void
name|setTensorboardResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|tensorBoardParameters
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
DECL|method|getTensorboardDockerImage ()
specifier|public
name|String
name|getTensorboardDockerImage
parameter_list|()
block|{
return|return
name|tensorBoardParameters
operator|.
name|getDockerImage
argument_list|()
return|;
block|}
DECL|method|setTensorboardDockerImage (String image)
specifier|public
name|void
name|setTensorboardDockerImage
parameter_list|(
name|String
name|image
parameter_list|)
block|{
name|tensorBoardParameters
operator|.
name|setDockerImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

