begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|conf
operator|.
name|SubmarineConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|DefaultRemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|RemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|RuntimeFactory
import|;
end_import

begin_class
DECL|class|ClientContext
specifier|public
class|class
name|ClientContext
block|{
DECL|field|yarnConf
specifier|private
name|Configuration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|remoteDirectoryManager
specifier|private
specifier|volatile
name|RemoteDirectoryManager
name|remoteDirectoryManager
decl_stmt|;
DECL|field|yarnClient
specifier|private
name|YarnClient
name|yarnClient
decl_stmt|;
DECL|field|submarineConfig
specifier|private
name|Configuration
name|submarineConfig
decl_stmt|;
DECL|field|runtimeFactory
specifier|private
name|RuntimeFactory
name|runtimeFactory
decl_stmt|;
DECL|method|ClientContext ()
specifier|public
name|ClientContext
parameter_list|()
block|{
name|submarineConfig
operator|=
operator|new
name|SubmarineConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|getOrCreateYarnClient ()
specifier|public
specifier|synchronized
name|YarnClient
name|getOrCreateYarnClient
parameter_list|()
block|{
if|if
condition|(
name|yarnClient
operator|==
literal|null
condition|)
block|{
name|yarnClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|yarnClient
return|;
block|}
DECL|method|getYarnConfig ()
specifier|public
name|Configuration
name|getYarnConfig
parameter_list|()
block|{
return|return
name|yarnConf
return|;
block|}
DECL|method|setConfiguration (Configuration conf)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|yarnConf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getRemoteDirectoryManager ()
specifier|public
name|RemoteDirectoryManager
name|getRemoteDirectoryManager
parameter_list|()
block|{
if|if
condition|(
name|remoteDirectoryManager
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|remoteDirectoryManager
operator|==
literal|null
condition|)
block|{
name|remoteDirectoryManager
operator|=
operator|new
name|DefaultRemoteDirectoryManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|remoteDirectoryManager
return|;
block|}
DECL|method|getSubmarineConfig ()
specifier|public
name|Configuration
name|getSubmarineConfig
parameter_list|()
block|{
return|return
name|submarineConfig
return|;
block|}
DECL|method|setSubmarineConfig (Configuration submarineConfig)
specifier|public
name|void
name|setSubmarineConfig
parameter_list|(
name|Configuration
name|submarineConfig
parameter_list|)
block|{
name|this
operator|.
name|submarineConfig
operator|=
name|submarineConfig
expr_stmt|;
block|}
DECL|method|getRuntimeFactory ()
specifier|public
name|RuntimeFactory
name|getRuntimeFactory
parameter_list|()
block|{
return|return
name|runtimeFactory
return|;
block|}
DECL|method|setRuntimeFactory (RuntimeFactory runtimeFactory)
specifier|public
name|void
name|setRuntimeFactory
parameter_list|(
name|RuntimeFactory
name|runtimeFactory
parameter_list|)
block|{
name|this
operator|.
name|runtimeFactory
operator|=
name|runtimeFactory
expr_stmt|;
block|}
block|}
end_class

end_unit

