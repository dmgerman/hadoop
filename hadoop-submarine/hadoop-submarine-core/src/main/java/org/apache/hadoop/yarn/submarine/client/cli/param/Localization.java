begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli.param
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Localization parameter.  * */
end_comment

begin_class
DECL|class|Localization
specifier|public
class|class
name|Localization
block|{
DECL|field|mountPermissionPattern
specifier|private
name|String
name|mountPermissionPattern
init|=
literal|"(wr|rw)$"
decl_stmt|;
comment|/**    * Regex for directory/file path in container.    * YARN only support absolute path for mount, but we can    * support some relative path.    * For relative path, we only allow ".", "./","./name".    * relative path like "./a/b" is not allowed.    * "." and "./" means original dir/file name in container working directory    * "./name" means use same or new "name" in container working directory    * A absolute path means same path in container filesystem    */
DECL|field|localPathPattern
specifier|private
name|String
name|localPathPattern
init|=
literal|"((^\\.$)|(^\\./$)|(^\\./[^/]+)|(^/.*))"
decl_stmt|;
DECL|field|remoteUri
specifier|private
name|String
name|remoteUri
decl_stmt|;
DECL|field|localPath
specifier|private
name|String
name|localPath
decl_stmt|;
comment|// Read write by default
DECL|field|mountPermission
specifier|private
name|String
name|mountPermission
init|=
literal|"rw"
decl_stmt|;
DECL|field|SUPPORTED_SCHEME
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|SUPPORTED_SCHEME
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hdfs"
argument_list|,
literal|"oss"
argument_list|,
literal|"s3a"
argument_list|,
literal|"s3n"
argument_list|,
literal|"wasb"
argument_list|,
literal|"wasbs"
argument_list|,
literal|"abfs"
argument_list|,
literal|"abfss"
argument_list|,
literal|"adl"
argument_list|,
literal|"har"
argument_list|,
literal|"ftp"
argument_list|,
literal|"http"
argument_list|,
literal|"https"
argument_list|,
literal|"viewfs"
argument_list|,
literal|"swebhdfs"
argument_list|,
literal|"webhdfs"
argument_list|,
literal|"swift"
argument_list|)
decl_stmt|;
DECL|method|parse (String arg)
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
index|[]
name|tokens
init|=
name|arg
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|int
name|minimum
init|=
literal|"a:b"
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|.
name|length
decl_stmt|;
name|int
name|minimumWithPermission
init|=
literal|"a:b:rw"
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|.
name|length
decl_stmt|;
name|int
name|minimumParts
init|=
name|minimum
decl_stmt|;
name|int
name|miniPartsWithRemoteScheme
init|=
literal|"scheme://a:b"
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|.
name|length
decl_stmt|;
name|int
name|maximumParts
init|=
literal|"scheme://a:b:rw"
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|.
name|length
decl_stmt|;
comment|// If remote uri starts with a remote scheme
if|if
condition|(
name|isSupportedScheme
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|minimumParts
operator|=
name|miniPartsWithRemoteScheme
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|.
name|length
argument_list|<
name|minimumParts
operator|||
name|tokens
operator|.
name|length
argument_list|>
name|maximumParts
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Invalid parameter,"
operator|+
literal|"should be \"remoteUri:localPath[:rw|:wr]\" "
operator|+
literal|"format for --localizations"
argument_list|)
throw|;
block|}
comment|/**      * RemoteUri starts with remote scheme.      * Merge part 0 and 1 to build a hdfs path in token[0].      * toke[1] will be localPath to ease following logic      * */
if|if
condition|(
name|minimumParts
operator|==
name|miniPartsWithRemoteScheme
condition|)
block|{
name|tokens
index|[
literal|0
index|]
operator|=
name|tokens
index|[
literal|0
index|]
operator|+
literal|":"
operator|+
name|tokens
index|[
literal|1
index|]
expr_stmt|;
name|tokens
index|[
literal|1
index|]
operator|=
name|tokens
index|[
literal|2
index|]
expr_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
name|maximumParts
condition|)
block|{
comment|// Has permission part
name|mountPermission
operator|=
name|tokens
index|[
name|maximumParts
operator|-
literal|1
index|]
expr_stmt|;
block|}
block|}
comment|// RemoteUri starts with linux file path
if|if
condition|(
name|minimumParts
operator|==
name|minimum
operator|&&
name|tokens
operator|.
name|length
operator|==
name|minimumWithPermission
condition|)
block|{
comment|// Has permission part
name|mountPermission
operator|=
name|tokens
index|[
name|minimumWithPermission
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|remoteUri
operator|=
name|tokens
index|[
literal|0
index|]
expr_stmt|;
name|localPath
operator|=
name|tokens
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|localPath
operator|.
name|matches
argument_list|(
name|localPathPattern
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Invalid local file path:"
operator|+
name|localPath
operator|+
literal|", it only support \".\", \"./\", \"./name\" and "
operator|+
literal|"absolute path."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|mountPermission
operator|.
name|matches
argument_list|(
name|mountPermissionPattern
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Invalid mount permission (ro is not "
operator|+
literal|"supported yet), "
operator|+
name|mountPermission
argument_list|)
throw|;
block|}
block|}
DECL|method|getRemoteUri ()
specifier|public
name|String
name|getRemoteUri
parameter_list|()
block|{
return|return
name|remoteUri
return|;
block|}
DECL|method|setRemoteUri (String rUti)
specifier|public
name|void
name|setRemoteUri
parameter_list|(
name|String
name|rUti
parameter_list|)
block|{
name|this
operator|.
name|remoteUri
operator|=
name|rUti
expr_stmt|;
block|}
DECL|method|getLocalPath ()
specifier|public
name|String
name|getLocalPath
parameter_list|()
block|{
return|return
name|localPath
return|;
block|}
DECL|method|setLocalPath (String lPath)
specifier|public
name|void
name|setLocalPath
parameter_list|(
name|String
name|lPath
parameter_list|)
block|{
name|this
operator|.
name|localPath
operator|=
name|lPath
expr_stmt|;
block|}
DECL|method|getMountPermission ()
specifier|public
name|String
name|getMountPermission
parameter_list|()
block|{
return|return
name|mountPermission
return|;
block|}
DECL|method|setMountPermission (String mPermission)
specifier|public
name|void
name|setMountPermission
parameter_list|(
name|String
name|mPermission
parameter_list|)
block|{
name|this
operator|.
name|mountPermission
operator|=
name|mPermission
expr_stmt|;
block|}
DECL|method|isSupportedScheme (String scheme)
specifier|private
name|boolean
name|isSupportedScheme
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
return|return
name|SUPPORTED_SCHEME
operator|.
name|contains
argument_list|(
name|scheme
argument_list|)
return|;
block|}
block|}
end_class

end_unit

