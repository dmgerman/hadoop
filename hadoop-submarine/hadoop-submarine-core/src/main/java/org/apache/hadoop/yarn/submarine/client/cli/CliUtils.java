begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|runjob
operator|.
name|RunJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|exception
operator|.
name|SubmarineRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|fs
operator|.
name|RemoteDirectoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|CliConstants
operator|.
name|KEYTAB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|CliConstants
operator|.
name|PRINCIPAL
import|;
end_import

begin_class
DECL|class|CliUtils
specifier|public
class|class
name|CliUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CliUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Replace patterns inside cli    *    * @return launch command after pattern replace    */
DECL|method|replacePatternsInLaunchCommand (String specifiedCli, RunJobParameters jobRunParameters, RemoteDirectoryManager directoryManager)
specifier|public
specifier|static
name|String
name|replacePatternsInLaunchCommand
parameter_list|(
name|String
name|specifiedCli
parameter_list|,
name|RunJobParameters
name|jobRunParameters
parameter_list|,
name|RemoteDirectoryManager
name|directoryManager
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|input
init|=
name|jobRunParameters
operator|.
name|getInputPath
argument_list|()
decl_stmt|;
name|String
name|jobDir
init|=
name|jobRunParameters
operator|.
name|getCheckpointPath
argument_list|()
decl_stmt|;
name|String
name|savedModelDir
init|=
name|jobRunParameters
operator|.
name|getSavedModelPath
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replacePattern
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|jobDir
operator|!=
literal|null
condition|)
block|{
name|replacePattern
operator|.
name|put
argument_list|(
literal|"%"
operator|+
name|CliConstants
operator|.
name|CHECKPOINT_PATH
operator|+
literal|"%"
argument_list|,
name|jobDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|replacePattern
operator|.
name|put
argument_list|(
literal|"%"
operator|+
name|CliConstants
operator|.
name|INPUT_PATH
operator|+
literal|"%"
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|savedModelDir
operator|!=
literal|null
condition|)
block|{
name|replacePattern
operator|.
name|put
argument_list|(
literal|"%"
operator|+
name|CliConstants
operator|.
name|SAVED_MODEL_PATH
operator|+
literal|"%"
argument_list|,
name|savedModelDir
argument_list|)
expr_stmt|;
block|}
name|String
name|newCli
init|=
name|specifiedCli
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replace
range|:
name|replacePattern
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|newCli
operator|=
name|newCli
operator|.
name|replace
argument_list|(
name|replace
operator|.
name|getKey
argument_list|()
argument_list|,
name|replace
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|newCli
return|;
block|}
comment|// Is it for help?
DECL|method|argsForHelp (String[] args)
specifier|public
specifier|static
name|boolean
name|argsForHelp
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|doLoginIfSecure (String keytab, String principal)
specifier|public
specifier|static
name|void
name|doLoginIfSecure
parameter_list|(
name|String
name|keytab
parameter_list|,
name|String
name|principal
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|keytab
argument_list|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|principal
argument_list|)
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|keytab
argument_list|)
condition|)
block|{
name|SubmarineRuntimeException
name|e
init|=
operator|new
name|SubmarineRuntimeException
argument_list|(
literal|"The "
operator|+
literal|"parameter of "
operator|+
name|PRINCIPAL
operator|+
literal|" is missing."
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|principal
argument_list|)
condition|)
block|{
name|SubmarineRuntimeException
name|e
init|=
operator|new
name|SubmarineRuntimeException
argument_list|(
literal|"The "
operator|+
literal|"parameter of "
operator|+
name|KEYTAB
operator|+
literal|" is missing."
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getAuthenticationMethod
argument_list|()
operator|==
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|SIMPLE
condition|)
block|{
name|SubmarineRuntimeException
name|e
init|=
operator|new
name|SubmarineRuntimeException
argument_list|(
literal|"Failed "
operator|+
literal|"to authenticate in secure environment. Please run kinit "
operator|+
literal|"command in advance or use "
operator|+
literal|"--"
operator|+
name|KEYTAB
operator|+
literal|"/--"
operator|+
name|PRINCIPAL
operator|+
literal|" parameters"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Submarine job is submitted by user: "
operator|+
name|user
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|File
name|keytabFile
init|=
operator|new
name|File
argument_list|(
name|keytab
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keytabFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SubmarineRuntimeException
name|e
init|=
operator|new
name|SubmarineRuntimeException
argument_list|(
literal|"No "
operator|+
literal|"keytab localized at  "
operator|+
name|keytab
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|UserGroupInformation
operator|.
name|loginUserFromKeytab
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

