begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
operator|.
name|DEFAULT_TYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AppAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|KillJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|ParametersHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|exception
operator|.
name|SubmarineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|KillJobCli
specifier|public
class|class
name|KillJobCli
extends|extends
name|AbstractCli
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ShowJobCli
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|options
specifier|private
name|Options
name|options
decl_stmt|;
DECL|field|parametersHolder
specifier|private
name|ParametersHolder
name|parametersHolder
decl_stmt|;
DECL|method|KillJobCli (ClientContext cliContext)
specifier|public
name|KillJobCli
parameter_list|(
name|ClientContext
name|cliContext
parameter_list|)
block|{
name|super
argument_list|(
name|cliContext
argument_list|)
expr_stmt|;
name|options
operator|=
name|generateOptions
argument_list|()
expr_stmt|;
block|}
DECL|method|printUsages ()
specifier|public
name|void
name|printUsages
parameter_list|()
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
literal|"job kill"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|generateOptions ()
specifier|private
name|Options
name|generateOptions
parameter_list|()
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|CliConstants
operator|.
name|NAME
argument_list|,
literal|true
argument_list|,
literal|"Name of the job"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print help"
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
DECL|method|parseCommandLineAndGetKillJobParameters (String[] args)
specifier|private
name|void
name|parseCommandLineAndGetKillJobParameters
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Do parsing
name|GnuParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cli
decl_stmt|;
try|try
block|{
name|cli
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|parametersHolder
operator|=
name|ParametersHolder
operator|.
name|createWithCmdLine
argument_list|(
name|cli
argument_list|,
name|Command
operator|.
name|KILL_JOB
argument_list|)
expr_stmt|;
name|parametersHolder
operator|.
name|updateParameters
argument_list|(
name|clientContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
operator|(
literal|"Error parsing command-line options: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|printUsages
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|killJob ()
specifier|protected
name|boolean
name|killJob
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|String
name|jobName
init|=
name|getParameters
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|AppAdminClient
name|appAdminClient
init|=
name|AppAdminClient
operator|.
name|createAppAdminClient
argument_list|(
name|DEFAULT_TYPE
argument_list|,
name|clientContext
operator|.
name|getYarnConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAdminClient
operator|.
name|actionStop
argument_list|(
name|jobName
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"appAdminClient fail to stop application"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|appAdminClient
operator|.
name|actionDestroy
argument_list|(
name|jobName
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"appAdminClient fail to destroy application"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|appAdminClient
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getParameters ()
specifier|public
name|KillJobParameters
name|getParameters
parameter_list|()
block|{
return|return
operator|(
name|KillJobParameters
operator|)
name|parametersHolder
operator|.
name|getParameters
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|SubmarineException
block|{
if|if
condition|(
name|CliUtils
operator|.
name|argsForHelp
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|printUsages
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|parseCommandLineAndGetKillJobParameters
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|killJob
argument_list|()
operator|==
literal|true
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Kill job successfully !"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

