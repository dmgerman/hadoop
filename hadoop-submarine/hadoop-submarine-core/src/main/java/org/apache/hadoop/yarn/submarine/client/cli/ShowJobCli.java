begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License. See accompanying LICENSE file.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.submarine.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|ParametersHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|client
operator|.
name|cli
operator|.
name|param
operator|.
name|ShowJobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|common
operator|.
name|exception
operator|.
name|SubmarineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|StorageKeyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|submarine
operator|.
name|runtimes
operator|.
name|common
operator|.
name|SubmarineStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ShowJobCli
specifier|public
class|class
name|ShowJobCli
extends|extends
name|AbstractCli
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ShowJobCli
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|options
specifier|private
name|Options
name|options
decl_stmt|;
DECL|field|parameters
specifier|private
name|ShowJobParameters
name|parameters
init|=
operator|new
name|ShowJobParameters
argument_list|()
decl_stmt|;
DECL|method|ShowJobCli (ClientContext cliContext)
specifier|public
name|ShowJobCli
parameter_list|(
name|ClientContext
name|cliContext
parameter_list|)
block|{
name|super
argument_list|(
name|cliContext
argument_list|)
expr_stmt|;
name|options
operator|=
name|generateOptions
argument_list|()
expr_stmt|;
block|}
DECL|method|printUsages ()
specifier|public
name|void
name|printUsages
parameter_list|()
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
literal|"job show"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|generateOptions ()
specifier|private
name|Options
name|generateOptions
parameter_list|()
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|CliConstants
operator|.
name|NAME
argument_list|,
literal|true
argument_list|,
literal|"Name of the job"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print help"
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
DECL|method|parseCommandLineAndGetShowJobParameters (String[] args)
specifier|private
name|void
name|parseCommandLineAndGetShowJobParameters
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Do parsing
name|GnuParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|cli
decl_stmt|;
try|try
block|{
name|cli
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|ParametersHolder
name|parametersHolder
init|=
name|ParametersHolder
operator|.
name|createWithCmdLine
argument_list|(
name|cli
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|updateParameters
argument_list|(
name|parametersHolder
argument_list|,
name|clientContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|printUsages
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|printIfNotNull (String keyForPrint, String keyInStorage, Map<String, String> jobInfo)
specifier|private
name|void
name|printIfNotNull
parameter_list|(
name|String
name|keyForPrint
parameter_list|,
name|String
name|keyInStorage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobInfo
parameter_list|)
block|{
if|if
condition|(
name|jobInfo
operator|.
name|containsKey
argument_list|(
name|keyInStorage
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t"
operator|+
name|keyForPrint
operator|+
literal|": "
operator|+
name|jobInfo
operator|.
name|get
argument_list|(
name|keyInStorage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printJobInfo (Map<String, String> jobInfo)
specifier|private
name|void
name|printJobInfo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobInfo
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Job Meta Info:"
argument_list|)
expr_stmt|;
name|printIfNotNull
argument_list|(
literal|"Application Id"
argument_list|,
name|StorageKeyConstants
operator|.
name|APPLICATION_ID
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
name|printIfNotNull
argument_list|(
literal|"Input Path"
argument_list|,
name|StorageKeyConstants
operator|.
name|INPUT_PATH
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
name|printIfNotNull
argument_list|(
literal|"Saved Model Path"
argument_list|,
name|StorageKeyConstants
operator|.
name|SAVED_MODEL_PATH
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
name|printIfNotNull
argument_list|(
literal|"Checkpoint Path"
argument_list|,
name|StorageKeyConstants
operator|.
name|CHECKPOINT_PATH
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
name|printIfNotNull
argument_list|(
literal|"Run Parameters"
argument_list|,
name|StorageKeyConstants
operator|.
name|JOB_RUN_ARGS
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getAndPrintJobInfo ()
specifier|protected
name|void
name|getAndPrintJobInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|SubmarineStorage
name|storage
init|=
name|clientContext
operator|.
name|getRuntimeFactory
argument_list|()
operator|.
name|getSubmarineStorage
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jobInfo
operator|=
name|storage
operator|.
name|getJobInfoByName
argument_list|(
name|parameters
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to retrieve job info"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|printJobInfo
argument_list|(
name|jobInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getParameters ()
specifier|public
name|ShowJobParameters
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|YarnException
throws|,
name|InterruptedException
throws|,
name|SubmarineException
block|{
if|if
condition|(
name|CliUtils
operator|.
name|argsForHelp
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|printUsages
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|parseCommandLineAndGetShowJobParameters
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|getAndPrintJobInfo
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

