begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.tools.offlineEditsViewer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|offlineEditsViewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * Tokenizer that reads tokens from XML file  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|XmlTokenizer
specifier|public
class|class
name|XmlTokenizer
implements|implements
name|Tokenizer
block|{
DECL|field|is
name|FileInputStream
name|is
init|=
literal|null
decl_stmt|;
DECL|field|in
name|XMLStreamReader
name|in
decl_stmt|;
comment|/**    * XmlTokenizer constructor    *    * @param filename input filename    */
DECL|method|XmlTokenizer (String filename)
specifier|public
name|XmlTokenizer
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|XMLInputFactory
name|f
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// FileInputStream is = null;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|in
operator|=
name|f
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
comment|// if(is != null) { is.close(); }
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create XML stream"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|//if(is != null) { is.close(); }
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot open input file "
operator|+
name|filename
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get next element's value, checks that the element's name    * is wantedName.    *    * @param wantedName a name of node that we are looking for    */
DECL|method|getNextElementsValue (String wantedName)
specifier|private
name|String
name|getNextElementsValue
parameter_list|(
name|String
name|wantedName
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|gotSTART_ELEMENT
init|=
literal|false
decl_stmt|;
try|try
block|{
name|int
name|eventType
init|=
name|in
operator|.
name|getEventType
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
name|eventType
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|CHARACTERS
case|:
comment|// 4
if|if
condition|(
name|gotSTART_ELEMENT
condition|)
block|{
comment|// XML returns "\n" instead of empty (zero-length) string
comment|// for elements like<x></x>
return|return
name|in
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
case|:
comment|// 8
throw|throw
operator|new
name|IOException
argument_list|(
literal|"End of XML while looking for element ["
operator|+
name|wantedName
operator|+
literal|"]"
argument_list|)
throw|;
comment|// break;
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
comment|// 1
if|if
condition|(
name|gotSTART_ELEMENT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"START_ELEMENT ["
operator|+
name|in
operator|.
name|getName
argument_list|()
operator|+
literal|" event when expecting CHARACTERS event for ["
operator|+
name|wantedName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|in
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|wantedName
argument_list|)
condition|)
block|{
name|gotSTART_ELEMENT
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unexpected element name ["
operator|+
name|in
operator|.
name|getName
argument_list|()
operator|+
literal|"], was expecting ["
operator|+
name|wantedName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|COMMENT
case|:
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
comment|// 2
case|case
name|XMLStreamConstants
operator|.
name|SPACE
case|:
case|case
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
case|:
comment|// 7
comment|// these are in XML but we don't need them
break|break;
comment|// these should never appear in edits XML
case|case
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
case|:
case|case
name|XMLStreamConstants
operator|.
name|CDATA
case|:
case|case
name|XMLStreamConstants
operator|.
name|DTD
case|:
case|case
name|XMLStreamConstants
operator|.
name|ENTITY_DECLARATION
case|:
case|case
name|XMLStreamConstants
operator|.
name|ENTITY_REFERENCE
case|:
case|case
name|XMLStreamConstants
operator|.
name|NAMESPACE
case|:
case|case
name|XMLStreamConstants
operator|.
name|NOTATION_DECLARATION
case|:
case|case
name|XMLStreamConstants
operator|.
name|PROCESSING_INSTRUCTION
case|:
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unsupported event type ["
operator|+
name|eventType
operator|+
literal|"] (see XMLStreamConstants)"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|in
operator|.
name|hasNext
argument_list|()
condition|)
block|{
break|break;
block|}
name|eventType
operator|=
name|in
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error reading XML stream"
argument_list|,
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error reading XML stream, should never reach this line, "
operator|+
literal|"most likely XML does not have elements we are loking for"
argument_list|)
throw|;
block|}
comment|/**    * @see org.apache.hadoop.hdfs.tools.offlineEditsViewer.Tokenizer#read    *    * @param t a token to read    * @return token that was just read    */
DECL|method|read (Token t)
specifier|public
name|Token
name|read
parameter_list|(
name|Token
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|t
operator|.
name|fromString
argument_list|(
name|getNextElementsValue
argument_list|(
name|t
operator|.
name|getEditsElement
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
end_class

end_unit

