begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.security.token.block
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|block
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_comment
comment|/**  * Object for passing block keys  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ExportedBlockKeys
specifier|public
class|class
name|ExportedBlockKeys
implements|implements
name|Writable
block|{
DECL|field|DUMMY_KEYS
specifier|public
specifier|static
specifier|final
name|ExportedBlockKeys
name|DUMMY_KEYS
init|=
operator|new
name|ExportedBlockKeys
argument_list|()
decl_stmt|;
DECL|field|isBlockTokenEnabled
specifier|private
name|boolean
name|isBlockTokenEnabled
decl_stmt|;
DECL|field|keyUpdateInterval
specifier|private
name|long
name|keyUpdateInterval
decl_stmt|;
DECL|field|tokenLifetime
specifier|private
name|long
name|tokenLifetime
decl_stmt|;
DECL|field|currentKey
specifier|private
name|BlockKey
name|currentKey
decl_stmt|;
DECL|field|allKeys
specifier|private
name|BlockKey
index|[]
name|allKeys
decl_stmt|;
DECL|method|ExportedBlockKeys ()
specifier|public
name|ExportedBlockKeys
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|BlockKey
argument_list|()
argument_list|,
operator|new
name|BlockKey
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|ExportedBlockKeys (boolean isBlockTokenEnabled, long keyUpdateInterval, long tokenLifetime, BlockKey currentKey, BlockKey[] allKeys)
name|ExportedBlockKeys
parameter_list|(
name|boolean
name|isBlockTokenEnabled
parameter_list|,
name|long
name|keyUpdateInterval
parameter_list|,
name|long
name|tokenLifetime
parameter_list|,
name|BlockKey
name|currentKey
parameter_list|,
name|BlockKey
index|[]
name|allKeys
parameter_list|)
block|{
name|this
operator|.
name|isBlockTokenEnabled
operator|=
name|isBlockTokenEnabled
expr_stmt|;
name|this
operator|.
name|keyUpdateInterval
operator|=
name|keyUpdateInterval
expr_stmt|;
name|this
operator|.
name|tokenLifetime
operator|=
name|tokenLifetime
expr_stmt|;
name|this
operator|.
name|currentKey
operator|=
name|currentKey
operator|==
literal|null
condition|?
operator|new
name|BlockKey
argument_list|()
else|:
name|currentKey
expr_stmt|;
name|this
operator|.
name|allKeys
operator|=
name|allKeys
operator|==
literal|null
condition|?
operator|new
name|BlockKey
index|[
literal|0
index|]
else|:
name|allKeys
expr_stmt|;
block|}
DECL|method|isBlockTokenEnabled ()
specifier|public
name|boolean
name|isBlockTokenEnabled
parameter_list|()
block|{
return|return
name|isBlockTokenEnabled
return|;
block|}
DECL|method|getKeyUpdateInterval ()
specifier|public
name|long
name|getKeyUpdateInterval
parameter_list|()
block|{
return|return
name|keyUpdateInterval
return|;
block|}
DECL|method|getTokenLifetime ()
specifier|public
name|long
name|getTokenLifetime
parameter_list|()
block|{
return|return
name|tokenLifetime
return|;
block|}
DECL|method|getCurrentKey ()
specifier|public
name|BlockKey
name|getCurrentKey
parameter_list|()
block|{
return|return
name|currentKey
return|;
block|}
DECL|method|getAllKeys ()
specifier|public
name|BlockKey
index|[]
name|getAllKeys
parameter_list|()
block|{
return|return
name|allKeys
return|;
block|}
comment|// ///////////////////////////////////////////////
comment|// Writable
comment|// ///////////////////////////////////////////////
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|ExportedBlockKeys
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ExportedBlockKeys
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|isBlockTokenEnabled
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|keyUpdateInterval
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|tokenLifetime
argument_list|)
expr_stmt|;
name|currentKey
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|allKeys
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allKeys
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    */
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|isBlockTokenEnabled
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|keyUpdateInterval
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|tokenLifetime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|currentKey
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|allKeys
operator|=
operator|new
name|BlockKey
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allKeys
index|[
name|i
index|]
operator|=
operator|new
name|BlockKey
argument_list|()
expr_stmt|;
name|allKeys
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

