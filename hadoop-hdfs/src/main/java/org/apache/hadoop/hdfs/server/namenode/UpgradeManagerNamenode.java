begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
operator|.
name|UpgradeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|IncorrectVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|UpgradeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|UpgradeStatusReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|UpgradeCommand
import|;
end_import

begin_comment
comment|/**  * Upgrade manager for name-nodes.  *  * Distributed upgrades for a name-node starts when the safe mode conditions   * are met and the name-node is about to exit it.  * At this point the name-node enters manual safe mode which will remain  * on until the upgrade is completed.  * After that the name-nodes processes upgrade commands from data-nodes  * and updates its status.  */
end_comment

begin_class
DECL|class|UpgradeManagerNamenode
class|class
name|UpgradeManagerNamenode
extends|extends
name|UpgradeManager
block|{
DECL|method|getType ()
specifier|public
name|HdfsConstants
operator|.
name|NodeType
name|getType
parameter_list|()
block|{
return|return
name|HdfsConstants
operator|.
name|NodeType
operator|.
name|NAME_NODE
return|;
block|}
DECL|field|namesystem
specifier|private
specifier|final
name|FSNamesystem
name|namesystem
decl_stmt|;
DECL|method|UpgradeManagerNamenode (FSNamesystem namesystem)
name|UpgradeManagerNamenode
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|)
block|{
name|this
operator|.
name|namesystem
operator|=
name|namesystem
expr_stmt|;
block|}
comment|/**    * Start distributed upgrade.    * Instantiates distributed upgrade objects.    *     * @return true if distributed upgrade is required or false otherwise    * @throws IOException    */
DECL|method|startUpgrade ()
specifier|public
specifier|synchronized
name|boolean
name|startUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|upgradeState
condition|)
block|{
name|initializeUpgrade
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|upgradeState
condition|)
return|return
literal|false
return|;
comment|// write new upgrade state into disk
name|namesystem
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|writeAll
argument_list|()
expr_stmt|;
block|}
assert|assert
name|currentUpgrades
operator|!=
literal|null
operator|:
literal|"currentUpgrades is null"
assert|;
name|this
operator|.
name|broadcastCommand
operator|=
name|currentUpgrades
operator|.
name|first
argument_list|()
operator|.
name|startUpgrade
argument_list|()
expr_stmt|;
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"\n   Distributed upgrade for NameNode version "
operator|+
name|getUpgradeVersion
argument_list|()
operator|+
literal|" to current LV "
operator|+
name|FSConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|" is started."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|processUpgradeCommand (UpgradeCommand command )
specifier|synchronized
name|UpgradeCommand
name|processUpgradeCommand
parameter_list|(
name|UpgradeCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|NameNode
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n   Distributed upgrade for NameNode version "
operator|+
name|getUpgradeVersion
argument_list|()
operator|+
literal|" to current LV "
operator|+
name|FSConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|" is processing upgrade command: "
operator|+
name|command
operator|.
name|getAction
argument_list|()
operator|+
literal|" status = "
operator|+
name|getUpgradeStatus
argument_list|()
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentUpgrades
operator|==
literal|null
condition|)
block|{
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring upgrade command: "
operator|+
name|command
operator|.
name|getAction
argument_list|()
operator|+
literal|" version "
operator|+
name|command
operator|.
name|getVersion
argument_list|()
operator|+
literal|". No distributed upgrades are currently running on the NameNode"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|UpgradeObjectNamenode
name|curUO
init|=
operator|(
name|UpgradeObjectNamenode
operator|)
name|currentUpgrades
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|getVersion
argument_list|()
operator|!=
name|curUO
operator|.
name|getVersion
argument_list|()
condition|)
throw|throw
operator|new
name|IncorrectVersionException
argument_list|(
name|command
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|"UpgradeCommand"
argument_list|,
name|curUO
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
name|UpgradeCommand
name|reply
init|=
name|curUO
operator|.
name|processUpgradeCommand
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|curUO
operator|.
name|getUpgradeStatus
argument_list|()
operator|<
literal|100
condition|)
block|{
return|return
name|reply
return|;
block|}
comment|// current upgrade is done
name|curUO
operator|.
name|completeUpgrade
argument_list|()
expr_stmt|;
name|NameNode
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"\n   Distributed upgrade for NameNode version "
operator|+
name|curUO
operator|.
name|getVersion
argument_list|()
operator|+
literal|" to current LV "
operator|+
name|FSConstants
operator|.
name|LAYOUT_VERSION
operator|+
literal|" is complete."
argument_list|)
expr_stmt|;
comment|// proceede with the next one
name|currentUpgrades
operator|.
name|remove
argument_list|(
name|curUO
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentUpgrades
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// all upgrades are done
name|completeUpgrade
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// start next upgrade
name|curUO
operator|=
operator|(
name|UpgradeObjectNamenode
operator|)
name|currentUpgrades
operator|.
name|first
argument_list|()
expr_stmt|;
name|this
operator|.
name|broadcastCommand
operator|=
name|curUO
operator|.
name|startUpgrade
argument_list|()
expr_stmt|;
block|}
return|return
name|reply
return|;
block|}
DECL|method|completeUpgrade ()
specifier|public
specifier|synchronized
name|void
name|completeUpgrade
parameter_list|()
throws|throws
name|IOException
block|{
comment|// set and write new upgrade state into disk
name|setUpgradeState
argument_list|(
literal|false
argument_list|,
name|FSConstants
operator|.
name|LAYOUT_VERSION
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|getFSImage
argument_list|()
operator|.
name|getStorage
argument_list|()
operator|.
name|writeAll
argument_list|()
expr_stmt|;
name|currentUpgrades
operator|=
literal|null
expr_stmt|;
name|broadcastCommand
operator|=
literal|null
expr_stmt|;
name|namesystem
operator|.
name|leaveSafeMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|distributedUpgradeProgress (UpgradeAction action)
specifier|synchronized
name|UpgradeStatusReport
name|distributedUpgradeProgress
parameter_list|(
name|UpgradeAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isFinalized
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|currentUpgrades
operator|==
literal|null
condition|)
block|{
comment|// no upgrades are in progress
name|FSImage
name|fsimage
init|=
name|namesystem
operator|.
name|getFSImage
argument_list|()
decl_stmt|;
name|isFinalized
operator|=
name|fsimage
operator|.
name|isUpgradeFinalized
argument_list|()
expr_stmt|;
if|if
condition|(
name|isFinalized
condition|)
comment|// upgrade is finalized
return|return
literal|null
return|;
comment|// nothing to report
return|return
operator|new
name|UpgradeStatusReport
argument_list|(
name|fsimage
operator|.
name|getStorage
argument_list|()
operator|.
name|getLayoutVersion
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|101
argument_list|,
name|isFinalized
argument_list|)
return|;
block|}
name|UpgradeObjectNamenode
name|curUO
init|=
operator|(
name|UpgradeObjectNamenode
operator|)
name|currentUpgrades
operator|.
name|first
argument_list|()
decl_stmt|;
name|boolean
name|details
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|GET_STATUS
case|:
break|break;
case|case
name|DETAILED_STATUS
case|:
name|details
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|FORCE_PROCEED
case|:
name|curUO
operator|.
name|forceProceed
argument_list|()
expr_stmt|;
block|}
return|return
name|curUO
operator|.
name|getUpgradeStatusReport
argument_list|(
name|details
argument_list|)
return|;
block|}
block|}
end_class

end_unit

