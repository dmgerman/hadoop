begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * This class is responsible for the decision of when a fault   * has to be triggered within a class of Hadoop  *   *  Default probability of injection is set to 0%. To change it  *  one can set the sys. prop. -Dfi.*=<new probability level>  *  Another way to do so is to set this level through FI config file,  *  located under src/test/fi-site.conf  *    *  To change the level one has to specify the following sys,prop.:  *  -Dfi.<name of fault location>=<probability level> in the runtime  *  Probability level is specified by a float between 0.0 and 1.0  *    *<name of fault location> might be represented by a short classname  *  or otherwise. This decision is left up to the discretion of aspects  *  developer, but has to be consistent through the code   */
end_comment

begin_class
DECL|class|ProbabilityModel
specifier|public
class|class
name|ProbabilityModel
block|{
DECL|field|generator
specifier|private
specifier|static
name|Random
name|generator
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProbabilityModel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FPROB_NAME
specifier|static
specifier|final
name|String
name|FPROB_NAME
init|=
literal|"fi."
decl_stmt|;
DECL|field|ALL_PROBABILITIES
specifier|private
specifier|static
specifier|final
name|String
name|ALL_PROBABILITIES
init|=
name|FPROB_NAME
operator|+
literal|"*"
decl_stmt|;
DECL|field|DEFAULT_PROB
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_PROB
init|=
literal|0.00f
decl_stmt|;
comment|//Default probability is 0%
DECL|field|MAX_PROB
specifier|private
specifier|static
specifier|final
name|float
name|MAX_PROB
init|=
literal|1.00f
decl_stmt|;
comment|// Max probability is 100%
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
name|FiConfig
operator|.
name|getConfig
argument_list|()
decl_stmt|;
static|static
block|{
comment|// Set new default probability if specified through a system.property
comment|// If neither is specified set default probability to DEFAULT_PROB
name|conf
operator|.
name|set
argument_list|(
name|ALL_PROBABILITIES
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|ALL_PROBABILITIES
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|ALL_PROBABILITIES
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|DEFAULT_PROB
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|ALL_PROBABILITIES
operator|+
literal|"="
operator|+
name|conf
operator|.
name|get
argument_list|(
name|ALL_PROBABILITIES
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simplistic method to check if we have reached the point of injection    * @param klassName is the name of the probability level to check.     *  If a configuration has been set for "fi.myClass" then you can check if the    *  inject criteria has been reached by calling this method with "myClass"    *  string as its parameter    * @return true if the probability threshold has been reached; false otherwise    */
DECL|method|injectCriteria (String klassName)
specifier|public
specifier|static
name|boolean
name|injectCriteria
parameter_list|(
name|String
name|klassName
parameter_list|)
block|{
name|boolean
name|trigger
init|=
literal|false
decl_stmt|;
comment|// TODO fix this: make it more sophisticated!!!
if|if
condition|(
name|generator
operator|.
name|nextFloat
argument_list|()
operator|<
name|getProbability
argument_list|(
name|klassName
argument_list|)
condition|)
block|{
name|trigger
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|trigger
return|;
block|}
comment|/**    * This primitive checks for arbitrary set of desired probability. If the     * level hasn't been set method will return default setting.    * The probability expected to be set as an float between 0.0 and 1.0    * @param klass is the name of the resource    * @return float representation of configured probability level of     *  the requested resource or default value if hasn't been set    */
DECL|method|getProbability (final String klass)
specifier|protected
specifier|static
name|float
name|getProbability
parameter_list|(
specifier|final
name|String
name|klass
parameter_list|)
block|{
name|String
name|newProbName
init|=
name|FPROB_NAME
operator|+
name|klass
decl_stmt|;
name|String
name|newValue
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|newProbName
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|ALL_PROBABILITIES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newValue
operator|!=
literal|null
operator|&&
operator|!
name|newValue
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|newProbName
argument_list|)
argument_list|)
condition|)
name|conf
operator|.
name|set
argument_list|(
name|newProbName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|float
name|ret
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|newProbName
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
name|ALL_PROBABILITIES
argument_list|,
name|DEFAULT_PROB
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request for "
operator|+
name|newProbName
operator|+
literal|" returns="
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that probability level is valid.
if|if
condition|(
name|ret
argument_list|<
name|DEFAULT_PROB
operator|||
name|ret
argument_list|>
name|MAX_PROB
condition|)
name|ret
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|ALL_PROBABILITIES
argument_list|,
name|DEFAULT_PROB
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

