begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/** Test Utilities */
end_comment

begin_class
DECL|class|FiTestUtil
specifier|public
class|class
name|FiTestUtil
block|{
comment|/** Logging */
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FiTestUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Random source */
DECL|field|RANDOM
specifier|public
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Random
argument_list|>
name|RANDOM
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Random
argument_list|>
argument_list|()
block|{
specifier|protected
name|Random
name|initialValue
parameter_list|()
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|+
literal|": seed="
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Return a random integer uniformly distributed over the interval [min,max).    */
DECL|method|nextRandomInt (final int min, final int max)
specifier|public
specifier|static
name|int
name|nextRandomInt
parameter_list|(
specifier|final
name|int
name|min
parameter_list|,
specifier|final
name|int
name|max
parameter_list|)
block|{
specifier|final
name|int
name|d
init|=
name|max
operator|-
name|min
decl_stmt|;
if|if
condition|(
name|d
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"d<= 0, min="
operator|+
name|min
operator|+
literal|", max="
operator|+
name|max
argument_list|)
throw|;
block|}
return|return
name|d
operator|==
literal|1
condition|?
name|min
else|:
name|min
operator|+
name|RANDOM
operator|.
name|get
argument_list|()
operator|.
name|nextInt
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/**    * Return a random integer, with type long,    * uniformly distributed over the interval [min,max).    * Assume max - min<= Integer.MAX_VALUE.    */
DECL|method|nextRandomLong (final long min, final long max)
specifier|public
specifier|static
name|long
name|nextRandomLong
parameter_list|(
specifier|final
name|long
name|min
parameter_list|,
specifier|final
name|long
name|max
parameter_list|)
block|{
specifier|final
name|long
name|d
init|=
name|max
operator|-
name|min
decl_stmt|;
if|if
condition|(
name|d
operator|<=
literal|0
operator|||
name|d
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"d<= 0 || d> Integer.MAX_VALUE, min="
operator|+
name|min
operator|+
literal|", max="
operator|+
name|max
argument_list|)
throw|;
block|}
return|return
name|d
operator|==
literal|1
condition|?
name|min
else|:
name|min
operator|+
name|RANDOM
operator|.
name|get
argument_list|()
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|d
argument_list|)
return|;
block|}
comment|/** Return the method name of the callee. */
DECL|method|getMethodName ()
specifier|public
specifier|static
name|String
name|getMethodName
parameter_list|()
block|{
specifier|final
name|StackTraceElement
index|[]
name|s
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
return|return
name|s
index|[
name|s
operator|.
name|length
operator|>
literal|2
condition|?
literal|2
else|:
name|s
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getMethodName
argument_list|()
return|;
block|}
comment|/**    * Sleep.    * @return true if sleep exits normally; false if InterruptedException.    */
DECL|method|sleep (long ms)
specifier|public
specifier|static
name|boolean
name|sleep
parameter_list|(
name|long
name|ms
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleep "
operator|+
name|ms
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleep is interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Sleep a random number of milliseconds over the interval [min, max).    * If there is an InterruptedException, re-throw it as a RuntimeException.    */
DECL|method|sleep (final long min, final long max)
specifier|public
specifier|static
name|void
name|sleep
parameter_list|(
specifier|final
name|long
name|min
parameter_list|,
specifier|final
name|long
name|max
parameter_list|)
block|{
specifier|final
name|long
name|n
init|=
name|nextRandomLong
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" sleeps for "
operator|+
name|n
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|sleep
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Action interface */
DECL|interface|Action
specifier|public
specifier|static
interface|interface
name|Action
parameter_list|<
name|T
parameter_list|,
name|E
extends|extends
name|Exception
parameter_list|>
block|{
comment|/** Run the action with the parameter. */
DECL|method|run (T parameter)
specifier|public
name|void
name|run
parameter_list|(
name|T
name|parameter
parameter_list|)
throws|throws
name|E
function_decl|;
block|}
comment|/** An ActionContainer contains at most one action. */
DECL|class|ActionContainer
specifier|public
specifier|static
class|class
name|ActionContainer
parameter_list|<
name|T
parameter_list|,
name|E
extends|extends
name|Exception
parameter_list|>
block|{
DECL|field|actionList
specifier|private
name|List
argument_list|<
name|Action
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|>
name|actionList
init|=
operator|new
name|ArrayList
argument_list|<
name|Action
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Create an empty container. */
DECL|method|ActionContainer ()
specifier|public
name|ActionContainer
parameter_list|()
block|{}
comment|/** Set action. */
DECL|method|set (Action<T, E> a)
specifier|public
name|void
name|set
parameter_list|(
name|Action
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|a
parameter_list|)
block|{
name|actionList
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
comment|/** Run the action if it exists. */
DECL|method|run (T obj)
specifier|public
name|void
name|run
parameter_list|(
name|T
name|obj
parameter_list|)
throws|throws
name|E
block|{
for|for
control|(
name|Action
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|action
range|:
name|actionList
control|)
block|{
name|action
operator|.
name|run
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Constraint interface */
DECL|interface|Constraint
specifier|public
specifier|static
interface|interface
name|Constraint
block|{
comment|/** Is this constraint satisfied? */
DECL|method|isSatisfied ()
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
function_decl|;
block|}
comment|/** Counting down, the constraint is satisfied if the count is one. */
DECL|class|CountdownConstraint
specifier|public
specifier|static
class|class
name|CountdownConstraint
implements|implements
name|Constraint
block|{
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
comment|/** Initialize the count. */
DECL|method|CountdownConstraint (int count)
specifier|public
name|CountdownConstraint
parameter_list|(
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|count
operator|+
literal|" = count< 1"
argument_list|)
throw|;
block|}
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
comment|/** Counting down, the constraint is satisfied if the count is zero. */
DECL|method|isSatisfied ()
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
if|if
condition|(
name|count
operator|>
literal|1
condition|)
block|{
name|count
operator|--
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/** An action is fired if all the constraints are satisfied. */
DECL|class|ConstraintSatisfactionAction
specifier|public
specifier|static
class|class
name|ConstraintSatisfactionAction
parameter_list|<
name|T
parameter_list|,
name|E
extends|extends
name|Exception
parameter_list|>
implements|implements
name|Action
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
block|{
DECL|field|action
specifier|private
specifier|final
name|Action
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|action
decl_stmt|;
DECL|field|constraints
specifier|private
specifier|final
name|Constraint
index|[]
name|constraints
decl_stmt|;
comment|/** Constructor */
DECL|method|ConstraintSatisfactionAction ( Action<T, E> action, Constraint... constraints)
specifier|public
name|ConstraintSatisfactionAction
parameter_list|(
name|Action
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|action
parameter_list|,
name|Constraint
modifier|...
name|constraints
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|constraints
operator|=
name|constraints
expr_stmt|;
block|}
comment|/**      * Fire the action if all the constraints are satisfied.      * Short-circuit-and is used.       */
annotation|@
name|Override
DECL|method|run (T parameter)
specifier|public
specifier|final
name|void
name|run
parameter_list|(
name|T
name|parameter
parameter_list|)
throws|throws
name|E
block|{
for|for
control|(
name|Constraint
name|c
range|:
name|constraints
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
comment|//all constraints are satisfied, fire the action
name|action
operator|.
name|run
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** A MarkerConstraint is satisfied if it is marked. */
DECL|class|MarkerConstraint
specifier|public
specifier|static
class|class
name|MarkerConstraint
implements|implements
name|Constraint
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|marked
specifier|private
name|boolean
name|marked
init|=
literal|false
decl_stmt|;
comment|/** Construct an object. */
DECL|method|MarkerConstraint (String name)
specifier|public
name|MarkerConstraint
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/** Set marker to be marked. */
DECL|method|mark ()
specifier|public
name|void
name|mark
parameter_list|()
block|{
name|marked
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Marking this "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
comment|/** Is the marker marked? */
annotation|@
name|Override
DECL|method|isSatisfied ()
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
return|return
name|marked
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"["
operator|+
name|name
operator|+
literal|": "
operator|+
name|marked
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class

end_unit

