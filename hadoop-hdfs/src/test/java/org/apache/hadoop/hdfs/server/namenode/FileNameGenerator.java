begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * File name generator.  *   * Each directory contains not more than a fixed number (filesPerDir)   * of files and directories.  * When the number of files in one directory reaches the maximum,  * the generator creates a new directory and proceeds generating files in it.  * The generated namespace tree is balanced that is any path to a leaf  * file is not less than the height of the tree minus one.  */
end_comment

begin_class
DECL|class|FileNameGenerator
specifier|public
class|class
name|FileNameGenerator
block|{
DECL|field|DEFAULT_FILES_PER_DIRECTORY
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FILES_PER_DIRECTORY
init|=
literal|32
decl_stmt|;
DECL|field|pathIndecies
specifier|private
name|int
index|[]
name|pathIndecies
init|=
operator|new
name|int
index|[
literal|20
index|]
decl_stmt|;
comment|// this will support up to 32**20 = 2**100 = 10**30 files
DECL|field|baseDir
specifier|private
name|String
name|baseDir
decl_stmt|;
DECL|field|currentDir
specifier|private
name|String
name|currentDir
decl_stmt|;
DECL|field|filesPerDirectory
specifier|private
name|int
name|filesPerDirectory
decl_stmt|;
DECL|field|fileCount
specifier|private
name|long
name|fileCount
decl_stmt|;
DECL|method|FileNameGenerator (String baseDir)
name|FileNameGenerator
parameter_list|(
name|String
name|baseDir
parameter_list|)
block|{
name|this
argument_list|(
name|baseDir
argument_list|,
name|DEFAULT_FILES_PER_DIRECTORY
argument_list|)
expr_stmt|;
block|}
DECL|method|FileNameGenerator (String baseDir, int filesPerDir)
name|FileNameGenerator
parameter_list|(
name|String
name|baseDir
parameter_list|,
name|int
name|filesPerDir
parameter_list|)
block|{
name|this
operator|.
name|baseDir
operator|=
name|baseDir
expr_stmt|;
name|this
operator|.
name|filesPerDirectory
operator|=
name|filesPerDir
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|getNextDirName (String prefix)
name|String
name|getNextDirName
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|int
name|depth
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pathIndecies
index|[
name|depth
index|]
operator|>=
literal|0
condition|)
name|depth
operator|++
expr_stmt|;
name|int
name|level
decl_stmt|;
for|for
control|(
name|level
operator|=
name|depth
operator|-
literal|1
init|;
name|level
operator|>=
literal|0
operator|&&
name|pathIndecies
index|[
name|level
index|]
operator|==
name|filesPerDirectory
operator|-
literal|1
condition|;
name|level
operator|--
control|)
name|pathIndecies
index|[
name|level
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|level
operator|<
literal|0
condition|)
name|pathIndecies
index|[
name|depth
index|]
operator|=
literal|0
expr_stmt|;
else|else
name|pathIndecies
index|[
name|level
index|]
operator|++
expr_stmt|;
name|level
operator|=
literal|0
expr_stmt|;
name|String
name|next
init|=
name|baseDir
decl_stmt|;
while|while
condition|(
name|pathIndecies
index|[
name|level
index|]
operator|>=
literal|0
condition|)
name|next
operator|=
name|next
operator|+
literal|"/"
operator|+
name|prefix
operator|+
name|pathIndecies
index|[
name|level
operator|++
index|]
expr_stmt|;
return|return
name|next
return|;
block|}
DECL|method|getNextFileName (String fileNamePrefix)
specifier|synchronized
name|String
name|getNextFileName
parameter_list|(
name|String
name|fileNamePrefix
parameter_list|)
block|{
name|long
name|fNum
init|=
name|fileCount
operator|%
name|filesPerDirectory
decl_stmt|;
if|if
condition|(
name|fNum
operator|==
literal|0
condition|)
block|{
name|currentDir
operator|=
name|getNextDirName
argument_list|(
name|fileNamePrefix
operator|+
literal|"Dir"
argument_list|)
expr_stmt|;
block|}
name|String
name|fn
init|=
name|currentDir
operator|+
literal|"/"
operator|+
name|fileNamePrefix
operator|+
name|fileCount
decl_stmt|;
name|fileCount
operator|++
expr_stmt|;
return|return
name|fn
return|;
block|}
DECL|method|reset ()
specifier|private
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|pathIndecies
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fileCount
operator|=
literal|0L
expr_stmt|;
name|currentDir
operator|=
literal|""
expr_stmt|;
block|}
DECL|method|getFilesPerDirectory ()
specifier|synchronized
name|int
name|getFilesPerDirectory
parameter_list|()
block|{
return|return
name|filesPerDirectory
return|;
block|}
DECL|method|getCurrentDir ()
specifier|synchronized
name|String
name|getCurrentDir
parameter_list|()
block|{
return|return
name|currentDir
return|;
block|}
block|}
end_class

end_unit

