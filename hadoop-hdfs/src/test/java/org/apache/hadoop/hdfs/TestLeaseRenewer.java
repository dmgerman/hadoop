begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestLeaseRenewer
specifier|public
class|class
name|TestLeaseRenewer
block|{
DECL|field|FAKE_AUTHORITY
specifier|private
name|String
name|FAKE_AUTHORITY
init|=
literal|"hdfs://nn1/"
decl_stmt|;
DECL|field|FAKE_UGI_A
specifier|private
name|UserGroupInformation
name|FAKE_UGI_A
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"myuser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"group1"
block|}
argument_list|)
decl_stmt|;
DECL|field|FAKE_UGI_B
specifier|private
name|UserGroupInformation
name|FAKE_UGI_B
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"myuser"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"group1"
block|}
argument_list|)
decl_stmt|;
DECL|field|MOCK_DFSCLIENT
specifier|private
name|DFSClient
name|MOCK_DFSCLIENT
decl_stmt|;
DECL|field|renewer
specifier|private
name|LeaseRenewer
name|renewer
decl_stmt|;
comment|/** Cause renewals often so test runs quickly. */
DECL|field|FAST_GRACE_PERIOD
specifier|private
specifier|static
specifier|final
name|long
name|FAST_GRACE_PERIOD
init|=
literal|100L
decl_stmt|;
annotation|@
name|Before
DECL|method|setupMocksAndRenewer ()
specifier|public
name|void
name|setupMocksAndRenewer
parameter_list|()
throws|throws
name|IOException
block|{
name|MOCK_DFSCLIENT
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DFSClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|MOCK_DFSCLIENT
argument_list|)
operator|.
name|isClientRunning
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|(
name|int
operator|)
name|FAST_GRACE_PERIOD
argument_list|)
operator|.
name|when
argument_list|(
name|MOCK_DFSCLIENT
argument_list|)
operator|.
name|getHdfsTimeout
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|"myclient"
argument_list|)
operator|.
name|when
argument_list|(
name|MOCK_DFSCLIENT
argument_list|)
operator|.
name|getClientName
argument_list|()
expr_stmt|;
name|renewer
operator|=
name|LeaseRenewer
operator|.
name|getInstance
argument_list|(
name|FAKE_AUTHORITY
argument_list|,
name|FAKE_UGI_A
argument_list|,
name|MOCK_DFSCLIENT
argument_list|)
expr_stmt|;
name|renewer
operator|.
name|setGraceSleepPeriod
argument_list|(
name|FAST_GRACE_PERIOD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstanceSharing ()
specifier|public
name|void
name|testInstanceSharing
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Two lease renewers with the same UGI should return
comment|// the same instance
name|LeaseRenewer
name|lr
init|=
name|LeaseRenewer
operator|.
name|getInstance
argument_list|(
name|FAKE_AUTHORITY
argument_list|,
name|FAKE_UGI_A
argument_list|,
name|MOCK_DFSCLIENT
argument_list|)
decl_stmt|;
name|LeaseRenewer
name|lr2
init|=
name|LeaseRenewer
operator|.
name|getInstance
argument_list|(
name|FAKE_AUTHORITY
argument_list|,
name|FAKE_UGI_A
argument_list|,
name|MOCK_DFSCLIENT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|lr
argument_list|,
name|lr2
argument_list|)
expr_stmt|;
comment|// But a different UGI should return a different instance
name|LeaseRenewer
name|lr3
init|=
name|LeaseRenewer
operator|.
name|getInstance
argument_list|(
name|FAKE_AUTHORITY
argument_list|,
name|FAKE_UGI_B
argument_list|,
name|MOCK_DFSCLIENT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|lr
argument_list|,
name|lr3
argument_list|)
expr_stmt|;
comment|// A different authority with same UGI should also be a different
comment|// instance.
name|LeaseRenewer
name|lr4
init|=
name|LeaseRenewer
operator|.
name|getInstance
argument_list|(
literal|"someOtherAuthority"
argument_list|,
name|FAKE_UGI_B
argument_list|,
name|MOCK_DFSCLIENT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|lr
argument_list|,
name|lr4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|lr3
argument_list|,
name|lr4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClientName ()
specifier|public
name|void
name|testClientName
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|clientName
init|=
name|renewer
operator|.
name|getClientName
argument_list|(
literal|"NONMAPREDUCE"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"bad client name: "
operator|+
name|clientName
argument_list|,
name|clientName
operator|.
name|startsWith
argument_list|(
literal|"DFSClient_NONMAPREDUCE_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenewal ()
specifier|public
name|void
name|testRenewal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Keep track of how many times the lease gets renewed
specifier|final
name|AtomicInteger
name|leaseRenewalCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|leaseRenewalCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|MOCK_DFSCLIENT
argument_list|)
operator|.
name|renewLease
argument_list|()
expr_stmt|;
comment|// Set up a file so that we start renewing our lease.
name|DFSOutputStream
name|mockStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DFSOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|filePath
init|=
literal|"/foo"
decl_stmt|;
name|renewer
operator|.
name|put
argument_list|(
name|filePath
argument_list|,
name|mockStream
argument_list|,
name|MOCK_DFSCLIENT
argument_list|)
expr_stmt|;
comment|// Wait for lease to get renewed
name|long
name|failTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|5000
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|failTime
operator|&&
name|leaseRenewalCount
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leaseRenewalCount
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Did not renew lease at all!"
argument_list|)
expr_stmt|;
block|}
name|renewer
operator|.
name|closeFile
argument_list|(
name|filePath
argument_list|,
name|MOCK_DFSCLIENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThreadName ()
specifier|public
name|void
name|testThreadName
parameter_list|()
throws|throws
name|Exception
block|{
name|DFSOutputStream
name|mockStream
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DFSOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|filePath
init|=
literal|"/foo"
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Renewer not initially running"
argument_list|,
name|renewer
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pretend to open a file
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|MOCK_DFSCLIENT
argument_list|)
operator|.
name|isFilesBeingWrittenEmpty
argument_list|()
expr_stmt|;
name|renewer
operator|.
name|put
argument_list|(
name|filePath
argument_list|,
name|mockStream
argument_list|,
name|MOCK_DFSCLIENT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Renewer should have started running"
argument_list|,
name|renewer
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the thread name is reasonable
name|String
name|threadName
init|=
name|renewer
operator|.
name|getDaemonName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"LeaseRenewer:myuser@hdfs://nn1/"
argument_list|,
name|threadName
argument_list|)
expr_stmt|;
comment|// Pretend to close the file
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|MOCK_DFSCLIENT
argument_list|)
operator|.
name|isFilesBeingWrittenEmpty
argument_list|()
expr_stmt|;
name|renewer
operator|.
name|closeFile
argument_list|(
name|filePath
argument_list|,
name|MOCK_DFSCLIENT
argument_list|)
expr_stmt|;
comment|// Should stop the renewer running within a few seconds
name|long
name|failTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|5000
decl_stmt|;
while|while
condition|(
name|renewer
operator|.
name|isRunning
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|failTime
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|renewer
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

