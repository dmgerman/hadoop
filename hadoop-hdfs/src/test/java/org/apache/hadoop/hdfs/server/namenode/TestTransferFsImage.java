begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_class
DECL|class|TestTransferFsImage
specifier|public
class|class
name|TestTransferFsImage
block|{
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Regression test for HDFS-1997. Test that, if an exception    * occurs on the client side, it is properly reported as such,    * and reported to the associated NNStorage object.    */
annotation|@
name|Test
DECL|method|testClientSideException ()
specifier|public
name|void
name|testClientSideException
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NNStorage
name|mockStorage
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NNStorage
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|localPath
init|=
name|Collections
operator|.
expr|<
name|File
operator|>
name|singletonList
argument_list|(
operator|new
name|File
argument_list|(
literal|"/xxxxx-does-not-exist/blah"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|fsName
init|=
name|NameNode
operator|.
name|getHostPortString
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|"getimage=1&txid=0"
decl_stmt|;
name|TransferFsImage
operator|.
name|getFileClient
argument_list|(
name|fsName
argument_list|,
name|id
argument_list|,
name|localPath
argument_list|,
name|mockStorage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't get an exception!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Mockito
operator|.
name|verify
argument_list|(
name|mockStorage
argument_list|)
operator|.
name|reportErrorOnFile
argument_list|(
name|localPath
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unable to download to any storage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Similar to the above test, except that there are multiple local files    * and one of them can be saved.    */
annotation|@
name|Test
DECL|method|testClientSideExceptionOnJustOneDir ()
specifier|public
name|void
name|testClientSideExceptionOnJustOneDir
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|NNStorage
name|mockStorage
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NNStorage
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|localPaths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
operator|new
name|File
argument_list|(
literal|"/xxxxx-does-not-exist/blah"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"testfile"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|fsName
init|=
name|NameNode
operator|.
name|getHostPortString
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|"getimage=1&txid=0"
decl_stmt|;
name|TransferFsImage
operator|.
name|getFileClient
argument_list|(
name|fsName
argument_list|,
name|id
argument_list|,
name|localPaths
argument_list|,
name|mockStorage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockStorage
argument_list|)
operator|.
name|reportErrorOnFile
argument_list|(
name|localPaths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The valid local file should get saved properly"
argument_list|,
name|localPaths
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

