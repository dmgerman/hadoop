begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|InterDatanodeProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * This class tests that a file need not be closed before its  * data can be read by another client.  */
end_comment

begin_class
DECL|class|TestFileCreationClient
specifier|public
class|class
name|TestFileCreationClient
extends|extends
name|junit
operator|.
name|framework
operator|.
name|TestCase
block|{
DECL|field|DIR
specifier|static
specifier|final
name|String
name|DIR
init|=
literal|"/"
operator|+
name|TestFileCreationClient
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"/"
decl_stmt|;
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LeaseManager
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSNamesystem
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|InterDatanodeProtocol
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
comment|/** Test lease recovery Triggered by DFSClient. */
DECL|method|testClientTriggeredLeaseRecovery ()
specifier|public
name|void
name|testClientTriggeredLeaseRecovery
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|REPLICATION
init|=
literal|3
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_HANDLER_COUNT_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|REPLICATION
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|REPLICATION
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/wrwelkj"
argument_list|)
decl_stmt|;
name|SlowWriter
index|[]
name|slowwriters
init|=
operator|new
name|SlowWriter
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slowwriters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|slowwriters
index|[
name|i
index|]
operator|=
operator|new
name|SlowWriter
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slowwriters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|slowwriters
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// let writers get started
comment|//stop a datanode, it should have least recover.
name|cluster
operator|.
name|stopDataNode
argument_list|(
name|AppendTestUtil
operator|.
name|nextInt
argument_list|(
name|REPLICATION
argument_list|)
argument_list|)
expr_stmt|;
comment|//let the slow writer writes a few more seconds
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wait a few seconds"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slowwriters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|slowwriters
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|slowwriters
index|[
name|i
index|]
operator|.
name|running
operator|=
literal|false
expr_stmt|;
name|slowwriters
index|[
name|i
index|]
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slowwriters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|slowwriters
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|slowwriters
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//Verify the file
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Verify the file"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slowwriters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|slowwriters
index|[
name|i
index|]
operator|.
name|filepath
operator|+
literal|": length="
operator|+
name|fs
operator|.
name|getFileStatus
argument_list|(
name|slowwriters
index|[
name|i
index|]
operator|.
name|filepath
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|slowwriters
index|[
name|i
index|]
operator|.
name|filepath
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|x
init|;
operator|(
name|x
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|j
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|SlowWriter
specifier|static
class|class
name|SlowWriter
extends|extends
name|Thread
block|{
DECL|field|fs
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|filepath
specifier|final
name|Path
name|filepath
decl_stmt|;
DECL|field|running
name|boolean
name|running
init|=
literal|true
decl_stmt|;
DECL|method|SlowWriter (FileSystem fs, Path filepath)
name|SlowWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|filepath
parameter_list|)
block|{
name|super
argument_list|(
name|SlowWriter
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|":"
operator|+
name|filepath
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|filepath
operator|=
name|filepath
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|filepath
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|running
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|" writes "
operator|+
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|hflush
argument_list|()
expr_stmt|;
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|" dies: e="
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|": i="
operator|+
name|i
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

