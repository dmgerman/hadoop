begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NNStorage
operator|.
name|NameNodeDirType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_class
DECL|class|TestFileJournalManager
specifier|public
class|class
name|TestFileJournalManager
block|{
annotation|@
name|Test
DECL|method|testGetRemoteEditLog ()
specifier|public
name|void
name|testGetRemoteEditLog
parameter_list|()
throws|throws
name|IOException
block|{
name|StorageDirectory
name|sd
init|=
name|FSImageTestUtil
operator|.
name|mockStorageDirectory
argument_list|(
name|NameNodeDirType
operator|.
name|EDITS
argument_list|,
literal|false
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|101
argument_list|,
literal|200
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getInProgressEditsFileName
argument_list|(
literal|201
argument_list|)
argument_list|,
name|NNStorage
operator|.
name|getFinalizedEditsFileName
argument_list|(
literal|1001
argument_list|,
literal|1100
argument_list|)
argument_list|)
decl_stmt|;
name|FileJournalManager
name|fjm
init|=
operator|new
name|FileJournalManager
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[1,100],[101,200],[1001,1100]"
argument_list|,
name|getLogsAsString
argument_list|(
name|fjm
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[101,200],[1001,1100]"
argument_list|,
name|getLogsAsString
argument_list|(
name|fjm
argument_list|,
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1001,1100]"
argument_list|,
name|getLogsAsString
argument_list|(
name|fjm
argument_list|,
literal|201
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"[]"
argument_list|,
name|getLogsAsString
argument_list|(
name|fjm
argument_list|,
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Did not throw when asking for a txn in the middle of a log"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"150 which is in the middle"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Asking for a newer log than exists should return empty list"
argument_list|,
literal|""
argument_list|,
name|getLogsAsString
argument_list|(
name|fjm
argument_list|,
literal|9999
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogsAsString ( FileJournalManager fjm, long firstTxId)
specifier|private
specifier|static
name|String
name|getLogsAsString
parameter_list|(
name|FileJournalManager
name|fjm
parameter_list|,
name|long
name|firstTxId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|fjm
operator|.
name|getRemoteEditLogs
argument_list|(
name|firstTxId
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

