begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
operator|.
name|NameNodeResourceMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestNameNodeResourceChecker
specifier|public
class|class
name|TestNameNodeResourceChecker
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|baseDir
specifier|private
name|File
name|baseDir
decl_stmt|;
DECL|field|nameDir
specifier|private
name|File
name|nameDir
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|baseDir
operator|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|)
argument_list|)
expr_stmt|;
name|nameDir
operator|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"resource-check-name-dir"
argument_list|)
expr_stmt|;
name|nameDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that hasAvailableDiskSpace returns true if disk usage is below    * threshold.    *    * @throws IOException in case of errors    */
annotation|@
name|Test
DECL|method|testCheckAvailability ()
specifier|public
name|void
name|testCheckAvailability
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DU_RESERVED_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|NameNodeResourceChecker
name|nb
init|=
operator|new
name|NameNodeResourceChecker
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"isResourceAvailable must return true if "
operator|+
literal|"disk usage is lower than threshold"
argument_list|,
name|nb
operator|.
name|hasAvailableDiskSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that hasAvailableDiskSpace returns false if disk usage is above    * threshold.    *     * @throws IOException in case of errors    */
annotation|@
name|Test
DECL|method|testCheckAvailabilityNeg ()
specifier|public
name|void
name|testCheckAvailabilityNeg
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DU_RESERVED_KEY
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|NameNodeResourceChecker
name|nb
init|=
operator|new
name|NameNodeResourceChecker
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"isResourceAvailable must return false if "
operator|+
literal|"disk usage is higher than threshold"
argument_list|,
name|nb
operator|.
name|hasAvailableDiskSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that NameNode resource monitor causes the NN to enter safe mode when    * resources are low.    *     * @throws IOException in case of errors    * @throws InterruptedException     */
annotation|@
name|Test
DECL|method|testCheckThatNameNodeResourceMonitorIsRunning ()
specifier|public
name|void
name|testCheckThatNameNodeResourceMonitorIsRunning
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_RESOURCE_CHECK_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|NameNodeResourceChecker
name|mockResourceChecker
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NameNodeResourceChecker
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockResourceChecker
operator|.
name|hasAvailableDiskSpace
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
operator|.
name|nnResourceChecker
operator|=
name|mockResourceChecker
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|NameNodeResourceMonitor
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|isNameNodeMonitorRunning
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Thread
argument_list|>
name|runningThreads
init|=
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Thread
name|runningThread
range|:
name|runningThreads
control|)
block|{
if|if
condition|(
name|runningThread
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Thread["
operator|+
name|name
argument_list|)
condition|)
block|{
name|isNameNodeMonitorRunning
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"NN resource monitor should be running"
argument_list|,
name|isNameNodeMonitorRunning
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"NN should not presently be in safe mode"
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockResourceChecker
operator|.
name|hasAvailableDiskSpace
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure the NNRM thread has a chance to run.
name|long
name|startMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|startMillis
operator|+
operator|(
literal|60
operator|*
literal|1000
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"NN should be in safe mode after resources crossed threshold"
argument_list|,
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests that only a single space check is performed if two name dirs are    * supplied which are on the same volume.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testChecking2NameDirsOnOneVolume ()
specifier|public
name|void
name|testChecking2NameDirsOnOneVolume
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|nameDir1
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|,
literal|"name-dir1"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|nameDir2
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|,
literal|"name-dir2"
argument_list|)
argument_list|)
decl_stmt|;
name|nameDir1
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|nameDir2
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir1
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|","
operator|+
name|nameDir2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DU_RESERVED_KEY
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|NameNodeResourceChecker
name|nb
init|=
operator|new
name|NameNodeResourceChecker
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not check the same volume more than once."
argument_list|,
literal|1
argument_list|,
name|nb
operator|.
name|getVolumesLowOnSpace
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that only a single space check is performed if extra volumes are    * configured manually which also coincide with a volume the name dir is on.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testCheckingExtraVolumes ()
specifier|public
name|void
name|testCheckingExtraVolumes
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|,
literal|"name-dir"
argument_list|)
argument_list|)
decl_stmt|;
name|nameDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_CHECKED_VOLUMES_KEY
argument_list|,
name|nameDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DU_RESERVED_KEY
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|NameNodeResourceChecker
name|nb
init|=
operator|new
name|NameNodeResourceChecker
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not check the same volume more than once."
argument_list|,
literal|1
argument_list|,
name|nb
operator|.
name|getVolumesLowOnSpace
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

