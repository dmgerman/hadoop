begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.header
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|header
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This class tests Authorization header format v2.  */
end_comment

begin_class
DECL|class|TestAuthorizationHeaderV2
specifier|public
class|class
name|TestAuthorizationHeaderV2
block|{
annotation|@
name|Test
DECL|method|testAuthHeaderV2 ()
specifier|public
name|void
name|testAuthHeaderV2
parameter_list|()
throws|throws
name|OS3Exception
block|{
try|try
block|{
name|String
name|auth
init|=
literal|"AWS accessKey:signature"
decl_stmt|;
name|AuthorizationHeaderV2
name|v2
init|=
operator|new
name|AuthorizationHeaderV2
argument_list|(
name|auth
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|v2
operator|.
name|getAccessKeyID
argument_list|()
argument_list|,
literal|"accessKey"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v2
operator|.
name|getSignature
argument_list|()
argument_list|,
literal|"signature"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OS3Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testAuthHeaderV2 failed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIncorrectHeader1 ()
specifier|public
name|void
name|testIncorrectHeader1
parameter_list|()
throws|throws
name|OS3Exception
block|{
try|try
block|{
name|String
name|auth
init|=
literal|"AAA accessKey:signature"
decl_stmt|;
operator|new
name|AuthorizationHeaderV2
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testIncorrectHeader"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OS3Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"AuthorizationHeaderMalformed"
argument_list|,
name|ex
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIncorrectHeader2 ()
specifier|public
name|void
name|testIncorrectHeader2
parameter_list|()
throws|throws
name|OS3Exception
block|{
try|try
block|{
name|String
name|auth
init|=
literal|"AWS :accessKey"
decl_stmt|;
operator|new
name|AuthorizationHeaderV2
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testIncorrectHeader"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OS3Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"AuthorizationHeaderMalformed"
argument_list|,
name|ex
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIncorrectHeader3 ()
specifier|public
name|void
name|testIncorrectHeader3
parameter_list|()
throws|throws
name|OS3Exception
block|{
try|try
block|{
name|String
name|auth
init|=
literal|"AWS :signature"
decl_stmt|;
operator|new
name|AuthorizationHeaderV2
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testIncorrectHeader"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OS3Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"AuthorizationHeaderMalformed"
argument_list|,
name|ex
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIncorrectHeader4 ()
specifier|public
name|void
name|testIncorrectHeader4
parameter_list|()
throws|throws
name|OS3Exception
block|{
try|try
block|{
name|String
name|auth
init|=
literal|"AWS accessKey:"
decl_stmt|;
operator|new
name|AuthorizationHeaderV2
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testIncorrectHeader"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OS3Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"AuthorizationHeaderMalformed"
argument_list|,
name|ex
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

