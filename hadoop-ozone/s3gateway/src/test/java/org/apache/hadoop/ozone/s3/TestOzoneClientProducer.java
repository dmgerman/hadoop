begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|AWSAuthParser
operator|.
name|AUTHORIZATION_HEADER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|AWSAuthParser
operator|.
name|CONTENT_MD5
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|AWSAuthParser
operator|.
name|CONTENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|AWSAuthParser
operator|.
name|HOST_HEADER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|AWSAuthParser
operator|.
name|X_AMAZ_DATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|AWSAuthParser
operator|.
name|X_AMZ_CONTENT_SHA256
import|;
end_import

begin_comment
comment|/**  * Test class for @{@link OzoneClientProducer}.  * */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestOzoneClientProducer
specifier|public
class|class
name|TestOzoneClientProducer
block|{
DECL|field|producer
specifier|private
name|OzoneClientProducer
name|producer
decl_stmt|;
DECL|field|headerMap
specifier|private
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headerMap
decl_stmt|;
DECL|field|queryMap
specifier|private
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryMap
decl_stmt|;
DECL|field|authHeader
specifier|private
name|String
name|authHeader
decl_stmt|;
DECL|field|contentMd5
specifier|private
name|String
name|contentMd5
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|amzContentSha256
specifier|private
name|String
name|amzContentSha256
decl_stmt|;
DECL|field|date
specifier|private
name|String
name|date
decl_stmt|;
DECL|field|contentType
specifier|private
name|String
name|contentType
decl_stmt|;
DECL|field|context
specifier|private
name|ContainerRequestContext
name|context
decl_stmt|;
DECL|field|uriInfo
specifier|private
name|UriInfo
name|uriInfo
decl_stmt|;
DECL|method|TestOzoneClientProducer (String authHeader, String contentMd5, String host, String amzContentSha256, String date, String contentType)
specifier|public
name|TestOzoneClientProducer
parameter_list|(
name|String
name|authHeader
parameter_list|,
name|String
name|contentMd5
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|amzContentSha256
parameter_list|,
name|String
name|date
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|authHeader
operator|=
name|authHeader
expr_stmt|;
name|this
operator|.
name|contentMd5
operator|=
name|contentMd5
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|amzContentSha256
operator|=
name|amzContentSha256
expr_stmt|;
name|this
operator|.
name|date
operator|=
name|date
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
name|producer
operator|=
operator|new
name|OzoneClientProducer
argument_list|()
expr_stmt|;
name|headerMap
operator|=
operator|new
name|MultivaluedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|queryMap
operator|=
operator|new
name|MultivaluedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|uriInfo
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UriInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|context
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerRequestContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|OzoneConfiguration
name|config
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|setupContext
argument_list|()
expr_stmt|;
name|producer
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setOzoneConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClientFailure ()
specifier|public
name|void
name|testGetClientFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Couldn't create"
operator|+
literal|" protocol "
argument_list|,
parameter_list|()
lambda|->
name|producer
operator|.
name|createClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupContext ()
specifier|private
name|void
name|setupContext
parameter_list|()
throws|throws
name|Exception
block|{
name|headerMap
operator|.
name|putSingle
argument_list|(
name|AUTHORIZATION_HEADER
argument_list|,
name|authHeader
argument_list|)
expr_stmt|;
name|headerMap
operator|.
name|putSingle
argument_list|(
name|CONTENT_MD5
argument_list|,
name|contentMd5
argument_list|)
expr_stmt|;
name|headerMap
operator|.
name|putSingle
argument_list|(
name|HOST_HEADER
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|headerMap
operator|.
name|putSingle
argument_list|(
name|X_AMZ_CONTENT_SHA256
argument_list|,
name|amzContentSha256
argument_list|)
expr_stmt|;
name|headerMap
operator|.
name|putSingle
argument_list|(
name|X_AMAZ_DATE
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|headerMap
operator|.
name|putSingle
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|uriInfo
operator|.
name|getQueryParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queryMap
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|uriInfo
operator|.
name|getRequestUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|URI
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getUriInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|uriInfo
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|headerMap
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getHeaderString
argument_list|(
name|AUTHORIZATION_HEADER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|authHeader
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getQueryParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queryMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"AWS4-HMAC-SHA256 Credential=testuser1/20190221/us-west-1/s3"
operator|+
literal|"/aws4_request, SignedHeaders=content-md5;host;"
operator|+
literal|"x-amz-content-sha256;x-amz-date, "
operator|+
literal|"Signature"
operator|+
literal|"=56ec73ba1974f8feda8365c3caef89c5d4a688d5f9baccf47"
operator|+
literal|"65f46a14cd745ad"
block|,
literal|"Zi68x2nPDDXv5qfDC+ZWTg=="
block|,
literal|"s3g:9878"
block|,
literal|"e2bd43f11c97cde3465e0e8d1aad77af7ec7aa2ed8e213cd0e24"
operator|+
literal|"1e28375860c6"
block|,
literal|"20190221T002037Z"
block|,
literal|""
block|}
block|,
block|{
literal|"AWS4-HMAC-SHA256 "
operator|+
literal|"Credential=AKIDEXAMPLE/20150830/us-east-1/iam/aws4_request,"
operator|+
literal|" SignedHeaders=content-type;host;x-amz-date, "
operator|+
literal|"Signature="
operator|+
literal|"5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400"
operator|+
literal|"e06b5924a6f2b5d7"
block|,
literal|""
block|,
literal|"iam.amazonaws.com"
block|,
literal|"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
block|,
literal|"20150830T123600Z"
block|,
literal|"application/x-www-form-urlencoded; charset=utf-8"
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

