begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneMultipartUploadPartListParts
operator|.
name|PartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadCompleteInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * In-memory ozone bucket for testing.  */
end_comment

begin_class
DECL|class|OzoneBucketStub
specifier|public
class|class
name|OzoneBucketStub
extends|extends
name|OzoneBucket
block|{
DECL|field|keyDetails
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|OzoneKeyDetails
argument_list|>
name|keyDetails
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|keyContents
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|keyContents
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|multipartUploadIdMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|multipartUploadIdMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|partList
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Part
argument_list|>
argument_list|>
name|partList
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Constructs OzoneBucket instance.    *    * @param volumeName   Name of the volume the bucket belongs to.    * @param bucketName   Name of the bucket.    * @param acls         ACLs associated with the bucket.    * @param storageType  StorageType of the bucket.    * @param versioning   versioning status of the bucket.    * @param creationTime creation time of the bucket.    */
DECL|method|OzoneBucketStub ( String volumeName, String bucketName, List<OzoneAcl> acls, StorageType storageType, Boolean versioning, long creationTime)
specifier|public
name|OzoneBucketStub
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
parameter_list|,
name|StorageType
name|storageType
parameter_list|,
name|Boolean
name|versioning
parameter_list|,
name|long
name|creationTime
parameter_list|)
block|{
name|super
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|acls
argument_list|,
name|storageType
argument_list|,
name|versioning
argument_list|,
name|creationTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createKey (String key, long size)
specifier|public
name|OzoneOutputStream
name|createKey
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createKey
argument_list|(
name|key
argument_list|,
name|size
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createKey (String key, long size, ReplicationType type, ReplicationFactor factor, Map<String, String> metadata)
specifier|public
name|OzoneOutputStream
name|createKey
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|size
parameter_list|,
name|ReplicationType
name|type
parameter_list|,
name|ReplicationFactor
name|factor
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|byteArrayOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|keyContents
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|keyDetails
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|OzoneKeyDetails
argument_list|(
name|getVolumeName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|,
name|key
argument_list|,
name|size
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|type
argument_list|,
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|OzoneOutputStream
argument_list|(
name|byteArrayOutputStream
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readKey (String key)
specifier|public
name|OzoneInputStream
name|readKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|OzoneInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|keyContents
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getKey (String key)
specifier|public
name|OzoneKeyDetails
name|getKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|keyDetails
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|keyDetails
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Lookup key failed, error:KEY_NOT_FOUND"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|listKeys (String keyPrefix)
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneKey
argument_list|>
name|listKeys
parameter_list|(
name|String
name|keyPrefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|OzoneKey
argument_list|>
name|sortedKey
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|OzoneKey
argument_list|>
argument_list|(
name|keyDetails
argument_list|)
decl_stmt|;
return|return
name|sortedKey
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|key
lambda|->
name|key
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listKeys (String keyPrefix, String prevKey)
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneKey
argument_list|>
name|listKeys
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|prevKey
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|OzoneKey
argument_list|>
name|sortedKey
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|OzoneKey
argument_list|>
argument_list|(
name|keyDetails
argument_list|)
decl_stmt|;
return|return
name|sortedKey
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|key
lambda|->
name|key
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|prevKey
argument_list|)
operator|>
literal|0
argument_list|)
operator|.
name|filter
argument_list|(
name|key
lambda|->
name|key
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|deleteKey (String key)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|keyDetails
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|renameKey (String fromKeyName, String toKeyName)
specifier|public
name|void
name|renameKey
parameter_list|(
name|String
name|fromKeyName
parameter_list|,
name|String
name|toKeyName
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|initiateMultipartUpload (String keyName, ReplicationType type, ReplicationFactor factor)
specifier|public
name|OmMultipartInfo
name|initiateMultipartUpload
parameter_list|(
name|String
name|keyName
parameter_list|,
name|ReplicationType
name|type
parameter_list|,
name|ReplicationFactor
name|factor
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|uploadID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|multipartUploadIdMap
operator|.
name|put
argument_list|(
name|keyName
argument_list|,
name|uploadID
argument_list|)
expr_stmt|;
return|return
operator|new
name|OmMultipartInfo
argument_list|(
name|getVolumeName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|,
name|keyName
argument_list|,
name|uploadID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createMultipartKey (String key, long size, int partNumber, String uploadID)
specifier|public
name|OzoneOutputStream
name|createMultipartKey
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|size
parameter_list|,
name|int
name|partNumber
parameter_list|,
name|String
name|uploadID
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|multipartUploadID
init|=
name|multipartUploadIdMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|multipartUploadID
operator|==
literal|null
operator|||
operator|!
name|multipartUploadID
operator|.
name|equals
argument_list|(
name|uploadID
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NO_SUCH_MULTIPART_UPLOAD_ERROR"
argument_list|)
throw|;
block|}
else|else
block|{
name|ByteArrayOutputStream
name|byteArrayOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
operator|(
name|int
operator|)
name|size
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Part
name|part
init|=
operator|new
name|Part
argument_list|(
name|key
operator|+
name|size
argument_list|,
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|partList
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Part
argument_list|>
name|parts
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parts
operator|.
name|put
argument_list|(
name|partNumber
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|partList
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|parts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partList
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|put
argument_list|(
name|partNumber
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
return|return
operator|new
name|OzoneOutputStreamStub
argument_list|(
name|byteArrayOutputStream
argument_list|,
name|key
operator|+
name|size
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|completeMultipartUpload (String key, String uploadID, Map<Integer, String> partsMap)
specifier|public
name|OmMultipartUploadCompleteInfo
name|completeMultipartUpload
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|uploadID
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|partsMap
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|multipartUploadIdMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NO_SUCH_MULTIPART_UPLOAD_ERROR"
argument_list|)
throw|;
block|}
else|else
block|{
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Part
argument_list|>
name|partsList
init|=
name|partList
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|partsMap
operator|.
name|size
argument_list|()
operator|!=
name|partsList
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"MISMATCH_MULTIPART_LIST"
argument_list|)
throw|;
block|}
name|int
name|count
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|part
range|:
name|partsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getKey
argument_list|()
operator|!=
name|count
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"MISSING_UPLOAD_PARTS"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|part
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|partsList
operator|.
name|get
argument_list|(
name|part
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getPartName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"MISMATCH_MULTIPART_LIST"
argument_list|)
throw|;
block|}
else|else
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|OmMultipartUploadCompleteInfo
argument_list|(
name|getVolumeName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|,
name|key
argument_list|,
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|abortMultipartUpload (String keyName, String uploadID)
specifier|public
name|void
name|abortMultipartUpload
parameter_list|(
name|String
name|keyName
parameter_list|,
name|String
name|uploadID
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|multipartUploadIdMap
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NO_SUCH_MULTIPART_UPLOAD"
argument_list|)
throw|;
block|}
else|else
block|{
name|multipartUploadIdMap
operator|.
name|remove
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|listParts (String key, String uploadID, int partNumberMarker, int maxParts)
specifier|public
name|OzoneMultipartUploadPartListParts
name|listParts
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|uploadID
parameter_list|,
name|int
name|partNumberMarker
parameter_list|,
name|int
name|maxParts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|multipartUploadIdMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NO_SUCH_MULTIPART_UPLOAD"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|PartInfo
argument_list|>
name|partInfoList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|partList
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|OzoneMultipartUploadPartListParts
argument_list|(
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Part
argument_list|>
name|partMap
init|=
name|partList
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Part
argument_list|>
argument_list|>
name|partIterator
init|=
name|partMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|nextPartNumberMarker
init|=
literal|0
decl_stmt|;
name|boolean
name|truncated
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|maxParts
operator|&&
name|partIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Part
argument_list|>
name|partEntry
init|=
name|partIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|nextPartNumberMarker
operator|=
name|partEntry
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|partEntry
operator|.
name|getKey
argument_list|()
operator|>
name|partNumberMarker
condition|)
block|{
name|PartInfo
name|partInfo
init|=
operator|new
name|PartInfo
argument_list|(
name|partEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|partEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|,
name|partEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|length
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
name|partInfoList
operator|.
name|add
argument_list|(
name|partInfo
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|partIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|truncated
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|truncated
operator|=
literal|false
expr_stmt|;
name|nextPartNumberMarker
operator|=
literal|0
expr_stmt|;
block|}
name|OzoneMultipartUploadPartListParts
name|ozoneMultipartUploadPartListParts
init|=
operator|new
name|OzoneMultipartUploadPartListParts
argument_list|(
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|nextPartNumberMarker
argument_list|,
name|truncated
argument_list|)
decl_stmt|;
name|ozoneMultipartUploadPartListParts
operator|.
name|addAllParts
argument_list|(
name|partInfoList
argument_list|)
expr_stmt|;
return|return
name|ozoneMultipartUploadPartListParts
return|;
block|}
block|}
comment|/**    * Class used to hold part information in a upload part request.    */
DECL|class|Part
specifier|public
class|class
name|Part
block|{
DECL|field|partName
specifier|private
name|String
name|partName
decl_stmt|;
DECL|field|content
specifier|private
name|byte
index|[]
name|content
decl_stmt|;
DECL|method|Part (String name, byte[] data)
specifier|public
name|Part
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|partName
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|data
expr_stmt|;
block|}
DECL|method|getPartName ()
specifier|public
name|String
name|getPartName
parameter_list|()
block|{
return|return
name|partName
return|;
block|}
DECL|method|getContent ()
specifier|public
name|byte
index|[]
name|getContent
parameter_list|()
block|{
return|return
name|content
return|;
block|}
block|}
block|}
end_class

end_unit

