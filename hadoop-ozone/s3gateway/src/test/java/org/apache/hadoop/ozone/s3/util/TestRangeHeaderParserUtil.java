begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test class to test RangeHeaderParserUtil.  */
end_comment

begin_class
DECL|class|TestRangeHeaderParserUtil
specifier|public
class|class
name|TestRangeHeaderParserUtil
block|{
annotation|@
name|Test
DECL|method|testRangeHeaderParser ()
specifier|public
name|void
name|testRangeHeaderParser
parameter_list|()
block|{
name|RangeHeader
name|rangeHeader
decl_stmt|;
comment|//range is with in file length
name|rangeHeader
operator|=
name|RangeHeaderParserUtil
operator|.
name|parseRangeHeader
argument_list|(
literal|"bytes=0-8"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rangeHeader
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|rangeHeader
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rangeHeader
operator|.
name|isReadFull
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rangeHeader
operator|.
name|isInValidRange
argument_list|()
argument_list|)
expr_stmt|;
comment|//range is with in file length, both start and end offset are same
name|rangeHeader
operator|=
name|RangeHeaderParserUtil
operator|.
name|parseRangeHeader
argument_list|(
literal|"bytes=0-0"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rangeHeader
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rangeHeader
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rangeHeader
operator|.
name|isReadFull
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rangeHeader
operator|.
name|isInValidRange
argument_list|()
argument_list|)
expr_stmt|;
comment|//range is not with in file length, both start and end offset are greater
comment|// than length
name|rangeHeader
operator|=
name|RangeHeaderParserUtil
operator|.
name|parseRangeHeader
argument_list|(
literal|"bytes=11-10"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rangeHeader
operator|.
name|isInValidRange
argument_list|()
argument_list|)
expr_stmt|;
comment|// range is satisfying, one of the range is with in the length. So, read
comment|// full file
name|rangeHeader
operator|=
name|RangeHeaderParserUtil
operator|.
name|parseRangeHeader
argument_list|(
literal|"bytes=11-8"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rangeHeader
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|rangeHeader
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rangeHeader
operator|.
name|isReadFull
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rangeHeader
operator|.
name|isInValidRange
argument_list|()
argument_list|)
expr_stmt|;
comment|// bytes spec is wrong
name|rangeHeader
operator|=
name|RangeHeaderParserUtil
operator|.
name|parseRangeHeader
argument_list|(
literal|"mb=11-8"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rangeHeader
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|rangeHeader
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rangeHeader
operator|.
name|isReadFull
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rangeHeader
operator|.
name|isInValidRange
argument_list|()
argument_list|)
expr_stmt|;
comment|// range specified is invalid
name|rangeHeader
operator|=
name|RangeHeaderParserUtil
operator|.
name|parseRangeHeader
argument_list|(
literal|"bytes=-11-8"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rangeHeader
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|rangeHeader
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rangeHeader
operator|.
name|isReadFull
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rangeHeader
operator|.
name|isInValidRange
argument_list|()
argument_list|)
expr_stmt|;
comment|//Last n bytes
name|rangeHeader
operator|=
name|RangeHeaderParserUtil
operator|.
name|parseRangeHeader
argument_list|(
literal|"bytes=-6"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rangeHeader
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|rangeHeader
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rangeHeader
operator|.
name|isReadFull
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rangeHeader
operator|.
name|isInValidRange
argument_list|()
argument_list|)
expr_stmt|;
name|rangeHeader
operator|=
name|RangeHeaderParserUtil
operator|.
name|parseRangeHeader
argument_list|(
literal|"bytes=-106"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rangeHeader
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|rangeHeader
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rangeHeader
operator|.
name|isInValidRange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

