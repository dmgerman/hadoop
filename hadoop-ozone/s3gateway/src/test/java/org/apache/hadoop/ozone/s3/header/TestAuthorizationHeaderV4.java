begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.header
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|header
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoUnit
operator|.
name|DAYS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|AWSV4AuthParser
operator|.
name|DATE_FORMATTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This class tests Authorization header format v2.  */
end_comment

begin_class
DECL|class|TestAuthorizationHeaderV4
specifier|public
class|class
name|TestAuthorizationHeaderV4
block|{
DECL|field|curDate
specifier|private
name|String
name|curDate
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|LocalDate
name|now
init|=
name|LocalDate
operator|.
name|now
argument_list|()
decl_stmt|;
name|curDate
operator|=
name|DATE_FORMATTER
operator|.
name|format
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderWellFormed ()
specifier|public
name|void
name|testV4HeaderWellFormed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA256 "
operator|+
literal|"Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3/aws4_request, "
operator|+
literal|"SignedHeaders=host;range;x-amz-date, "
operator|+
literal|"Signature=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|AuthorizationHeaderV4
name|v4
init|=
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AWS4-HMAC-SHA256"
argument_list|,
name|v4
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ozone"
argument_list|,
name|v4
operator|.
name|getAccessKeyID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|curDate
argument_list|,
name|v4
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"us-east-1"
argument_list|,
name|v4
operator|.
name|getAwsRegion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aws4_request"
argument_list|,
name|v4
operator|.
name|getAwsRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host;range;x-amz-date"
argument_list|,
name|v4
operator|.
name|getSignedHeaderString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fe5f80f77d5fa3beca038a248ff027"
argument_list|,
name|v4
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderMissingParts ()
specifier|public
name|void
name|testV4HeaderMissingParts
parameter_list|()
block|{
try|try
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA256 "
operator|+
literal|"Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3/aws4_request, "
operator|+
literal|"SignedHeaders=host;range;x-amz-date,"
decl_stmt|;
name|AuthorizationHeaderV4
name|v4
init|=
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Exception is expected in case of malformed header"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OS3Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"AuthorizationHeaderMalformed"
argument_list|,
name|ex
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testV4HeaderInvalidCredential ()
specifier|public
name|void
name|testV4HeaderInvalidCredential
parameter_list|()
block|{
try|try
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA256 "
operator|+
literal|"Credential="
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3/aws4_request, "
operator|+
literal|"SignedHeaders=host;range;x-amz-date, "
operator|+
literal|"Signature=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|AuthorizationHeaderV4
name|v4
init|=
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Exception is expected in case of malformed header"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OS3Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"AuthorizationHeaderMalformed"
argument_list|,
name|ex
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testV4HeaderWithoutSpace ()
specifier|public
name|void
name|testV4HeaderWithoutSpace
parameter_list|()
throws|throws
name|OS3Exception
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|AuthorizationHeaderV4
name|v4
init|=
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AWS4-HMAC-SHA256"
argument_list|,
name|v4
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ozone"
argument_list|,
name|v4
operator|.
name|getAccessKeyID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|curDate
argument_list|,
name|v4
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"us-east-1"
argument_list|,
name|v4
operator|.
name|getAwsRegion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aws4_request"
argument_list|,
name|v4
operator|.
name|getAwsRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host;x-amz-content-sha256;x-amz-date"
argument_list|,
name|v4
operator|.
name|getSignedHeaderString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fe5f80f77d5fa3beca038a248ff027"
argument_list|,
name|v4
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderDateValidationSuccess ()
specifier|public
name|void
name|testV4HeaderDateValidationSuccess
parameter_list|()
throws|throws
name|OS3Exception
block|{
comment|// Case 1: valid date within range.
name|LocalDate
name|now
init|=
name|LocalDate
operator|.
name|now
argument_list|()
decl_stmt|;
name|String
name|dateStr
init|=
name|DATE_FORMATTER
operator|.
name|format
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|dateStr
argument_list|)
expr_stmt|;
comment|// Case 2: Valid date with in range.
name|dateStr
operator|=
name|DATE_FORMATTER
operator|.
name|format
argument_list|(
name|now
operator|.
name|plus
argument_list|(
literal|1
argument_list|,
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|validateResponse
argument_list|(
name|dateStr
argument_list|)
expr_stmt|;
comment|// Case 3: Valid date with in range.
name|dateStr
operator|=
name|DATE_FORMATTER
operator|.
name|format
argument_list|(
name|now
operator|.
name|minus
argument_list|(
literal|1
argument_list|,
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|validateResponse
argument_list|(
name|dateStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderDateValidationFailure ()
specifier|public
name|void
name|testV4HeaderDateValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Case 1: Empty date.
name|LocalDate
name|now
init|=
name|LocalDate
operator|.
name|now
argument_list|()
decl_stmt|;
name|String
name|dateStr
init|=
literal|""
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|validateResponse
argument_list|(
name|dateStr
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 2: Date after yesterday.
name|String
name|dateStr2
init|=
name|DATE_FORMATTER
operator|.
name|format
argument_list|(
name|now
operator|.
name|plus
argument_list|(
literal|2
argument_list|,
name|DAYS
argument_list|)
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|validateResponse
argument_list|(
name|dateStr2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 3: Date before yesterday.
name|String
name|dateStr3
init|=
name|DATE_FORMATTER
operator|.
name|format
argument_list|(
name|now
operator|.
name|minus
argument_list|(
literal|2
argument_list|,
name|DAYS
argument_list|)
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
name|validateResponse
argument_list|(
name|dateStr3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validateResponse (String dateStr)
specifier|private
name|void
name|validateResponse
parameter_list|(
name|String
name|dateStr
parameter_list|)
throws|throws
name|OS3Exception
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|dateStr
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|AuthorizationHeaderV4
name|v4
init|=
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AWS4-HMAC-SHA256"
argument_list|,
name|v4
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ozone"
argument_list|,
name|v4
operator|.
name|getAccessKeyID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateStr
argument_list|,
name|v4
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"us-east-1"
argument_list|,
name|v4
operator|.
name|getAwsRegion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aws4_request"
argument_list|,
name|v4
operator|.
name|getAwsRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"host;x-amz-content-sha256;x-amz-date"
argument_list|,
name|v4
operator|.
name|getSignedHeaderString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fe5f80f77d5fa3beca038a248ff027"
argument_list|,
name|v4
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderRegionValidationFailure ()
specifier|public
name|void
name|testV4HeaderRegionValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"//s3/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027%"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth2
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"s3/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027%"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderServiceValidationFailure ()
specifier|public
name|void
name|testV4HeaderServiceValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1"
operator|+
literal|"//aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth2
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderRequestValidationFailure ()
specifier|public
name|void
name|testV4HeaderRequestValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/   ,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth2
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth3
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|","
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderSignedHeaderValidationFailure ()
specifier|public
name|void
name|testV4HeaderSignedHeaderValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=;;,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth2
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth3
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"=x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth3
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth4
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"=,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderSignatureValidationFailure ()
specifier|public
name|void
name|testV4HeaderSignatureValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027%"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth2
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"="
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth3
init|=
literal|"AWS4-HMAC-SHA256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|""
operator|+
literal|"="
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderHashAlgoValidationFailure ()
specifier|public
name|void
name|testV4HeaderHashAlgoValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth2
init|=
literal|"SHA-256 Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth3
init|=
literal|" Credential=ozone/"
operator|+
name|curDate
operator|+
literal|"/us-east-1/s3"
operator|+
literal|"/aws4_request,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testV4HeaderCredentialValidationFailure ()
specifier|public
name|void
name|testV4HeaderCredentialValidationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|auth
init|=
literal|"AWS4-HMAC-SHA Credential=/"
operator|+
name|curDate
operator|+
literal|"//"
operator|+
literal|"/,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|auth2
init|=
literal|"AWS4-HMAC-SHA =/"
operator|+
name|curDate
operator|+
literal|"//"
operator|+
literal|"/,"
operator|+
literal|"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"
operator|+
literal|"Signature"
operator|+
literal|"=fe5f80f77d5fa3beca038a248ff027"
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OS3Exception
operator|.
name|class
argument_list|,
literal|""
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

