begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.endpoint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientStub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test head object.  */
end_comment

begin_class
DECL|class|TestObjectHead
specifier|public
class|class
name|TestObjectHead
block|{
DECL|field|bucketName
specifier|private
name|String
name|bucketName
init|=
literal|"b1"
decl_stmt|;
DECL|field|clientStub
specifier|private
name|OzoneClientStub
name|clientStub
decl_stmt|;
DECL|field|objectStoreStub
specifier|private
name|ObjectStore
name|objectStoreStub
decl_stmt|;
DECL|field|keyEndpoint
specifier|private
name|ObjectEndpoint
name|keyEndpoint
decl_stmt|;
DECL|field|bucket
specifier|private
name|OzoneBucket
name|bucket
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Create client stub and object store stub.
name|clientStub
operator|=
operator|new
name|OzoneClientStub
argument_list|()
expr_stmt|;
name|objectStoreStub
operator|=
name|clientStub
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
comment|// Create volume and bucket
name|objectStoreStub
operator|.
name|createS3Bucket
argument_list|(
literal|"bilbo"
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|String
name|volName
init|=
name|objectStoreStub
operator|.
name|getOzoneVolumeName
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|bucket
operator|=
name|objectStoreStub
operator|.
name|getVolume
argument_list|(
name|volName
argument_list|)
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
comment|// Create HeadBucket and setClient to OzoneClientStub
name|keyEndpoint
operator|=
operator|new
name|ObjectEndpoint
argument_list|()
expr_stmt|;
name|keyEndpoint
operator|.
name|setClient
argument_list|(
name|clientStub
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHeadObject ()
specifier|public
name|void
name|testHeadObject
parameter_list|()
throws|throws
name|Exception
block|{
comment|//GIVEN
name|String
name|value
init|=
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|OzoneOutputStream
name|out
init|=
name|bucket
operator|.
name|createKey
argument_list|(
literal|"key1"
argument_list|,
name|value
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//WHEN
name|Response
name|response
init|=
name|keyEndpoint
operator|.
name|head
argument_list|(
name|bucketName
argument_list|,
literal|"key1"
argument_list|)
decl_stmt|;
comment|//THEN
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
operator|.
name|length
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Content-Length"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DateTimeFormatter
operator|.
name|RFC_1123_DATE_TIME
operator|.
name|parse
argument_list|(
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"Last-Modified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHeadFailByBadName ()
specifier|public
name|void
name|testHeadFailByBadName
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Head an object that doesn't exist.
try|try
block|{
name|Response
name|response
init|=
name|keyEndpoint
operator|.
name|head
argument_list|(
name|bucketName
argument_list|,
literal|"badKeyName"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|404
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OS3Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCode
argument_list|()
operator|.
name|contains
argument_list|(
literal|"NoSuchObject"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"object does not exist"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HTTP_NOT_FOUND
argument_list|,
name|ex
operator|.
name|getHttpCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

