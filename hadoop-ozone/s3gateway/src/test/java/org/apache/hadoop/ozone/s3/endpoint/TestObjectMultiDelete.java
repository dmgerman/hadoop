begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.endpoint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientStub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|endpoint
operator|.
name|MultiDeleteRequest
operator|.
name|DeleteObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test object multi delete.  */
end_comment

begin_class
DECL|class|TestObjectMultiDelete
specifier|public
class|class
name|TestObjectMultiDelete
block|{
annotation|@
name|Test
DECL|method|delete ()
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|IOException
throws|,
name|OS3Exception
throws|,
name|JAXBException
block|{
comment|//GIVEN
name|OzoneClient
name|client
init|=
operator|new
name|OzoneClientStub
argument_list|()
decl_stmt|;
name|OzoneBucket
name|bucket
init|=
name|initTestData
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|BucketEndpoint
name|rest
init|=
operator|new
name|BucketEndpoint
argument_list|()
decl_stmt|;
name|rest
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|MultiDeleteRequest
name|mdr
init|=
operator|new
name|MultiDeleteRequest
argument_list|()
decl_stmt|;
name|mdr
operator|.
name|getObjects
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DeleteObject
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|mdr
operator|.
name|getObjects
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DeleteObject
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|mdr
operator|.
name|getObjects
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DeleteObject
argument_list|(
literal|"key4"
argument_list|)
argument_list|)
expr_stmt|;
comment|//WHEN
name|MultiDeleteResponse
name|response
init|=
name|rest
operator|.
name|multiDelete
argument_list|(
literal|"b1"
argument_list|,
literal|""
argument_list|,
name|mdr
argument_list|)
decl_stmt|;
comment|//THEN
name|Set
argument_list|<
name|String
argument_list|>
name|keysAtTheEnd
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|bucket
operator|.
name|listKeys
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OzoneKey
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedResult
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedResult
operator|.
name|add
argument_list|(
literal|"key3"
argument_list|)
expr_stmt|;
comment|//THEN
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|keysAtTheEnd
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|response
operator|.
name|getDeletedObjects
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteQuiet ()
specifier|public
name|void
name|deleteQuiet
parameter_list|()
throws|throws
name|IOException
throws|,
name|OS3Exception
throws|,
name|JAXBException
block|{
comment|//GIVEN
name|OzoneClient
name|client
init|=
operator|new
name|OzoneClientStub
argument_list|()
decl_stmt|;
name|OzoneBucket
name|bucket
init|=
name|initTestData
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|BucketEndpoint
name|rest
init|=
operator|new
name|BucketEndpoint
argument_list|()
decl_stmt|;
name|rest
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|MultiDeleteRequest
name|mdr
init|=
operator|new
name|MultiDeleteRequest
argument_list|()
decl_stmt|;
name|mdr
operator|.
name|setQuiet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mdr
operator|.
name|getObjects
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DeleteObject
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|mdr
operator|.
name|getObjects
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DeleteObject
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|mdr
operator|.
name|getObjects
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DeleteObject
argument_list|(
literal|"key4"
argument_list|)
argument_list|)
expr_stmt|;
comment|//WHEN
name|MultiDeleteResponse
name|response
init|=
name|rest
operator|.
name|multiDelete
argument_list|(
literal|"b1"
argument_list|,
literal|""
argument_list|,
name|mdr
argument_list|)
decl_stmt|;
comment|//THEN
name|Set
argument_list|<
name|String
argument_list|>
name|keysAtTheEnd
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|bucket
operator|.
name|listKeys
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OzoneKey
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|//THEN
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getDeletedObjects
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initTestData (OzoneClient client)
specifier|private
name|OzoneBucket
name|initTestData
parameter_list|(
name|OzoneClient
name|client
parameter_list|)
throws|throws
name|IOException
block|{
name|client
operator|.
name|getObjectStore
argument_list|()
operator|.
name|createS3Bucket
argument_list|(
literal|"bilbo"
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|client
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getOzoneVolumeName
argument_list|(
literal|"b1"
argument_list|)
decl_stmt|;
name|OzoneBucket
name|bucket
init|=
name|client
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|getBucket
argument_list|(
literal|"b1"
argument_list|)
decl_stmt|;
name|bucket
operator|.
name|createKey
argument_list|(
literal|"key1"
argument_list|,
literal|0
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bucket
operator|.
name|createKey
argument_list|(
literal|"key2"
argument_list|,
literal|0
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|bucket
operator|.
name|createKey
argument_list|(
literal|"key3"
argument_list|,
literal|0
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|bucket
return|;
block|}
block|}
end_class

end_unit

