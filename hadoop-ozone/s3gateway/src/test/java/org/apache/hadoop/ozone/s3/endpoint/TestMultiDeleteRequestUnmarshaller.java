begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.endpoint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test custom marshalling of MultiDeleteRequest.  */
end_comment

begin_class
DECL|class|TestMultiDeleteRequestUnmarshaller
specifier|public
class|class
name|TestMultiDeleteRequestUnmarshaller
block|{
annotation|@
name|Test
DECL|method|fromStreamWithNamespace ()
specifier|public
name|void
name|fromStreamWithNamespace
parameter_list|()
throws|throws
name|IOException
block|{
comment|//GIVEN
name|ByteArrayInputStream
name|inputBody
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
literal|"<Delete xmlns=\"http://s3.amazonaws"
operator|+
literal|".com/doc/2006-03-01/\"><Object>key1</Object><Object>key2"
operator|+
literal|"</Object><Object>key3"
operator|+
literal|"</Object></Delete>"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|//WHEN
name|MultiDeleteRequest
name|multiDeleteRequest
init|=
name|unmarshall
argument_list|(
name|inputBody
argument_list|)
decl_stmt|;
comment|//THEN
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|multiDeleteRequest
operator|.
name|getObjects
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fromStreamWithoutNamespace ()
specifier|public
name|void
name|fromStreamWithoutNamespace
parameter_list|()
throws|throws
name|IOException
block|{
comment|//GIVEN
name|ByteArrayInputStream
name|inputBody
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
literal|"<Delete><Object>key1</Object><Object>key2"
operator|+
literal|"</Object><Object>key3"
operator|+
literal|"</Object></Delete>"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|//WHEN
name|MultiDeleteRequest
name|multiDeleteRequest
init|=
name|unmarshall
argument_list|(
name|inputBody
argument_list|)
decl_stmt|;
comment|//THEN
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|multiDeleteRequest
operator|.
name|getObjects
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|unmarshall (ByteArrayInputStream inputBody)
specifier|private
name|MultiDeleteRequest
name|unmarshall
parameter_list|(
name|ByteArrayInputStream
name|inputBody
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MultiDeleteRequestUnmarshaller
argument_list|()
operator|.
name|readFrom
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|inputBody
argument_list|)
return|;
block|}
block|}
end_class

end_unit

