begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_TOKEN_SERVICE_USE_IP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Class used to test OzoneS3Util.  */
end_comment

begin_class
DECL|class|TestOzoneS3Util
specifier|public
class|class
name|TestOzoneS3Util
block|{
DECL|field|configuration
specifier|private
name|OzoneConfiguration
name|configuration
decl_stmt|;
DECL|field|serviceID
specifier|private
name|String
name|serviceID
init|=
literal|"omService"
decl_stmt|;
annotation|@
name|Before
DECL|method|setConf ()
specifier|public
name|void
name|setConf
parameter_list|()
block|{
name|configuration
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|String
name|nodeIDs
init|=
literal|"om1,om2,om3"
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_SERVICE_IDS_KEY
argument_list|,
name|serviceID
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_NODES_KEY
operator|+
literal|"."
operator|+
name|serviceID
argument_list|,
name|nodeIDs
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|HADOOP_SECURITY_TOKEN_SERVICE_USE_IP
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuildServiceNameForToken ()
specifier|public
name|void
name|testBuildServiceNameForToken
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|nodeIDList
init|=
name|OmUtils
operator|.
name|getOMNodeIds
argument_list|(
name|configuration
argument_list|,
name|serviceID
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|serviceID
argument_list|,
literal|"om1"
argument_list|)
argument_list|,
literal|"om1:9862"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|serviceID
argument_list|,
literal|"om2"
argument_list|)
argument_list|,
literal|"om2:9862"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|serviceID
argument_list|,
literal|"om3"
argument_list|)
argument_list|,
literal|"om3:9862"
argument_list|)
expr_stmt|;
name|String
name|expectedOmServiceAddress
init|=
name|buildServiceAddress
argument_list|(
name|nodeIDList
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|String
name|omserviceAddr
init|=
name|OzoneS3Util
operator|.
name|buildServiceNameForToken
argument_list|(
name|configuration
argument_list|,
name|serviceID
argument_list|,
name|nodeIDList
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedOmServiceAddress
argument_list|,
name|omserviceAddr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuildServiceNameForTokenIncorrectConfig ()
specifier|public
name|void
name|testBuildServiceNameForTokenIncorrectConfig
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|nodeIDList
init|=
name|OmUtils
operator|.
name|getOMNodeIds
argument_list|(
name|configuration
argument_list|,
name|serviceID
argument_list|)
decl_stmt|;
comment|// Don't set om3 node rpc address. Here we are skipping setting of one of
comment|// the OM address. So buildServiceNameForToken will fail.
name|configuration
operator|.
name|set
argument_list|(
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|serviceID
argument_list|,
literal|"om1"
argument_list|)
argument_list|,
literal|"om1:9862"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|serviceID
argument_list|,
literal|"om2"
argument_list|)
argument_list|,
literal|"om2:9862"
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
try|try
block|{
name|OzoneS3Util
operator|.
name|buildServiceNameForToken
argument_list|(
name|configuration
argument_list|,
name|serviceID
argument_list|,
name|nodeIDList
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testBuildServiceNameForTokenIncorrectConfig failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Could not find rpcAddress "
operator|+
literal|"for"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Build serviceName from list of node ids.    * @param nodeIDList    * @return service name for token.    */
DECL|method|buildServiceAddress (Collection<String> nodeIDList)
specifier|private
name|String
name|buildServiceAddress
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|nodeIDList
parameter_list|)
block|{
name|StringBuilder
name|omServiceAddrBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|nodesLength
init|=
name|nodeIDList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|nodeID
range|:
name|nodeIDList
control|)
block|{
name|counter
operator|++
expr_stmt|;
name|String
name|addr
init|=
name|configuration
operator|.
name|get
argument_list|(
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|serviceID
argument_list|,
name|nodeID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
name|nodesLength
condition|)
block|{
name|omServiceAddrBuilder
operator|.
name|append
argument_list|(
name|addr
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|omServiceAddrBuilder
operator|.
name|append
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|omServiceAddrBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

