begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.endpoint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientStub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|S3ErrorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|endpoint
operator|.
name|CompleteMultipartUploadRequest
operator|.
name|Part
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|util
operator|.
name|S3Consts
operator|.
name|STORAGE_CLASS_HEADER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Class to test Multipart upload end to end.  */
end_comment

begin_class
DECL|class|TestMultipartUploadComplete
specifier|public
class|class
name|TestMultipartUploadComplete
block|{
DECL|field|REST
specifier|private
specifier|final
specifier|static
name|ObjectEndpoint
name|REST
init|=
operator|new
name|ObjectEndpoint
argument_list|()
decl_stmt|;
empty_stmt|;
DECL|field|BUCKET
specifier|private
specifier|final
specifier|static
name|String
name|BUCKET
init|=
literal|"s3bucket"
decl_stmt|;
DECL|field|KEY
specifier|private
specifier|final
specifier|static
name|String
name|KEY
init|=
literal|"key1"
decl_stmt|;
DECL|field|CLIENT
specifier|private
specifier|final
specifier|static
name|OzoneClientStub
name|CLIENT
init|=
operator|new
name|OzoneClientStub
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|CLIENT
operator|.
name|getObjectStore
argument_list|()
operator|.
name|createS3Bucket
argument_list|(
literal|"ozone"
argument_list|,
name|BUCKET
argument_list|)
expr_stmt|;
name|HttpHeaders
name|headers
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HttpHeaders
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|headers
operator|.
name|getHeaderString
argument_list|(
name|STORAGE_CLASS_HEADER
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"STANDARD"
argument_list|)
expr_stmt|;
name|REST
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|REST
operator|.
name|setClient
argument_list|(
name|CLIENT
argument_list|)
expr_stmt|;
block|}
DECL|method|initiateMultipartUpload (String key)
specifier|private
name|String
name|initiateMultipartUpload
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
throws|,
name|OS3Exception
block|{
name|Response
name|response
init|=
name|REST
operator|.
name|initializeMultipartUpload
argument_list|(
name|BUCKET
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|MultipartUploadInitiateResponse
name|multipartUploadInitiateResponse
init|=
operator|(
name|MultipartUploadInitiateResponse
operator|)
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|multipartUploadInitiateResponse
operator|.
name|getUploadID
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|uploadID
init|=
name|multipartUploadInitiateResponse
operator|.
name|getUploadID
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
return|return
name|uploadID
return|;
block|}
DECL|method|uploadPart (String key, String uploadID, int partNumber, String content)
specifier|private
name|Part
name|uploadPart
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|uploadID
parameter_list|,
name|int
name|partNumber
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|IOException
throws|,
name|OS3Exception
block|{
name|ByteArrayInputStream
name|body
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|REST
operator|.
name|put
argument_list|(
name|BUCKET
argument_list|,
name|key
argument_list|,
name|content
operator|.
name|length
argument_list|()
argument_list|,
name|partNumber
argument_list|,
name|uploadID
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"ETag"
argument_list|)
argument_list|)
expr_stmt|;
name|Part
name|part
init|=
operator|new
name|Part
argument_list|()
decl_stmt|;
name|part
operator|.
name|seteTag
argument_list|(
name|response
operator|.
name|getHeaderString
argument_list|(
literal|"ETag"
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|setPartNumber
argument_list|(
name|partNumber
argument_list|)
expr_stmt|;
return|return
name|part
return|;
block|}
DECL|method|completeMultipartUpload (String key, CompleteMultipartUploadRequest completeMultipartUploadRequest, String uploadID)
specifier|private
name|void
name|completeMultipartUpload
parameter_list|(
name|String
name|key
parameter_list|,
name|CompleteMultipartUploadRequest
name|completeMultipartUploadRequest
parameter_list|,
name|String
name|uploadID
parameter_list|)
throws|throws
name|IOException
throws|,
name|OS3Exception
block|{
name|Response
name|response
init|=
name|REST
operator|.
name|completeMultipartUpload
argument_list|(
name|BUCKET
argument_list|,
name|key
argument_list|,
name|uploadID
argument_list|,
name|completeMultipartUploadRequest
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|CompleteMultipartUploadResponse
name|completeMultipartUploadResponse
init|=
operator|(
name|CompleteMultipartUploadResponse
operator|)
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|completeMultipartUploadResponse
operator|.
name|getBucket
argument_list|()
argument_list|,
name|BUCKET
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|completeMultipartUploadResponse
operator|.
name|getKey
argument_list|()
argument_list|,
name|KEY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|completeMultipartUploadResponse
operator|.
name|getLocation
argument_list|()
argument_list|,
name|BUCKET
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|completeMultipartUploadResponse
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipart ()
specifier|public
name|void
name|testMultipart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initiate multipart upload
name|String
name|uploadID
init|=
name|initiateMultipartUpload
argument_list|(
name|KEY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Part
argument_list|>
name|partsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Upload parts
name|String
name|content
init|=
literal|"Multipart Upload 1"
decl_stmt|;
name|int
name|partNumber
init|=
literal|1
decl_stmt|;
name|Part
name|part1
init|=
name|uploadPart
argument_list|(
name|KEY
argument_list|,
name|uploadID
argument_list|,
name|partNumber
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|partsList
operator|.
name|add
argument_list|(
name|part1
argument_list|)
expr_stmt|;
name|content
operator|=
literal|"Multipart Upload 2"
expr_stmt|;
name|partNumber
operator|=
literal|2
expr_stmt|;
name|Part
name|part2
init|=
name|uploadPart
argument_list|(
name|KEY
argument_list|,
name|uploadID
argument_list|,
name|partNumber
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|partsList
operator|.
name|add
argument_list|(
name|part2
argument_list|)
expr_stmt|;
comment|// complete multipart upload
name|CompleteMultipartUploadRequest
name|completeMultipartUploadRequest
init|=
operator|new
name|CompleteMultipartUploadRequest
argument_list|()
decl_stmt|;
name|completeMultipartUploadRequest
operator|.
name|setPartList
argument_list|(
name|partsList
argument_list|)
expr_stmt|;
name|completeMultipartUpload
argument_list|(
name|KEY
argument_list|,
name|completeMultipartUploadRequest
argument_list|,
name|uploadID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipartInvalidPartOrderError ()
specifier|public
name|void
name|testMultipartInvalidPartOrderError
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initiate multipart upload
name|String
name|key
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|uploadID
init|=
name|initiateMultipartUpload
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Part
argument_list|>
name|partsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Upload parts
name|String
name|content
init|=
literal|"Multipart Upload 1"
decl_stmt|;
name|int
name|partNumber
init|=
literal|1
decl_stmt|;
name|Part
name|part1
init|=
name|uploadPart
argument_list|(
name|key
argument_list|,
name|uploadID
argument_list|,
name|partNumber
argument_list|,
name|content
argument_list|)
decl_stmt|;
comment|// Change part number
name|part1
operator|.
name|setPartNumber
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|partsList
operator|.
name|add
argument_list|(
name|part1
argument_list|)
expr_stmt|;
name|content
operator|=
literal|"Multipart Upload 2"
expr_stmt|;
name|partNumber
operator|=
literal|2
expr_stmt|;
name|Part
name|part2
init|=
name|uploadPart
argument_list|(
name|key
argument_list|,
name|uploadID
argument_list|,
name|partNumber
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|partsList
operator|.
name|add
argument_list|(
name|part2
argument_list|)
expr_stmt|;
comment|// complete multipart upload
name|CompleteMultipartUploadRequest
name|completeMultipartUploadRequest
init|=
operator|new
name|CompleteMultipartUploadRequest
argument_list|()
decl_stmt|;
name|completeMultipartUploadRequest
operator|.
name|setPartList
argument_list|(
name|partsList
argument_list|)
expr_stmt|;
try|try
block|{
name|completeMultipartUpload
argument_list|(
name|key
argument_list|,
name|completeMultipartUploadRequest
argument_list|,
name|uploadID
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testMultipartInvalidPartOrderError"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OS3Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getCode
argument_list|()
argument_list|,
name|S3ErrorTable
operator|.
name|INVALID_PART_ORDER
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultipartInvalidPartError ()
specifier|public
name|void
name|testMultipartInvalidPartError
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initiate multipart upload
name|String
name|key
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|uploadID
init|=
name|initiateMultipartUpload
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Part
argument_list|>
name|partsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Upload parts
name|String
name|content
init|=
literal|"Multipart Upload 1"
decl_stmt|;
name|int
name|partNumber
init|=
literal|1
decl_stmt|;
name|Part
name|part1
init|=
name|uploadPart
argument_list|(
name|key
argument_list|,
name|uploadID
argument_list|,
name|partNumber
argument_list|,
name|content
argument_list|)
decl_stmt|;
comment|// Change part number
name|part1
operator|.
name|seteTag
argument_list|(
literal|"random"
argument_list|)
expr_stmt|;
name|partsList
operator|.
name|add
argument_list|(
name|part1
argument_list|)
expr_stmt|;
name|content
operator|=
literal|"Multipart Upload 2"
expr_stmt|;
name|partNumber
operator|=
literal|2
expr_stmt|;
name|Part
name|part2
init|=
name|uploadPart
argument_list|(
name|key
argument_list|,
name|uploadID
argument_list|,
name|partNumber
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|partsList
operator|.
name|add
argument_list|(
name|part2
argument_list|)
expr_stmt|;
comment|// complete multipart upload
name|CompleteMultipartUploadRequest
name|completeMultipartUploadRequest
init|=
operator|new
name|CompleteMultipartUploadRequest
argument_list|()
decl_stmt|;
name|completeMultipartUploadRequest
operator|.
name|setPartList
argument_list|(
name|partsList
argument_list|)
expr_stmt|;
try|try
block|{
name|completeMultipartUpload
argument_list|(
name|key
argument_list|,
name|completeMultipartUploadRequest
argument_list|,
name|uploadID
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testMultipartInvalidPartOrderError"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OS3Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ex
operator|.
name|getCode
argument_list|()
argument_list|,
name|S3ErrorTable
operator|.
name|INVALID_PART
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

