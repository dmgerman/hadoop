begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
import|;
end_import

begin_comment
comment|/**  * Ozone util for S3 related operations.  */
end_comment

begin_class
DECL|class|OzoneS3Util
specifier|public
specifier|final
class|class
name|OzoneS3Util
block|{
DECL|method|OzoneS3Util ()
specifier|private
name|OzoneS3Util
parameter_list|()
block|{   }
DECL|method|getVolumeName (String userName)
specifier|public
specifier|static
name|String
name|getVolumeName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|userName
argument_list|)
expr_stmt|;
return|return
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|userName
argument_list|)
return|;
block|}
comment|/**    * Generate service Name for token.    * @param configuration    * @param serviceId - ozone manager service ID    * @param omNodeIds - list of node ids for the given OM service.    * @return service Name.    */
DECL|method|buildServiceNameForToken ( @onnull OzoneConfiguration configuration, @Nonnull String serviceId, @Nonnull Collection<String> omNodeIds)
specifier|public
specifier|static
name|String
name|buildServiceNameForToken
parameter_list|(
annotation|@
name|Nonnull
name|OzoneConfiguration
name|configuration
parameter_list|,
annotation|@
name|Nonnull
name|String
name|serviceId
parameter_list|,
annotation|@
name|Nonnull
name|Collection
argument_list|<
name|String
argument_list|>
name|omNodeIds
parameter_list|)
block|{
name|StringBuilder
name|rpcAddress
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|nodesLength
init|=
name|omNodeIds
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|omNodeIds
control|)
block|{
name|counter
operator|++
expr_stmt|;
name|String
name|rpcAddrKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|String
name|rpcAddrStr
init|=
name|OmUtils
operator|.
name|getOmRpcAddress
argument_list|(
name|configuration
argument_list|,
name|rpcAddrKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpcAddrStr
operator|==
literal|null
operator|||
name|rpcAddrStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find rpcAddress for "
operator|+
name|OZONE_OM_ADDRESS_KEY
operator|+
literal|"."
operator|+
name|serviceId
operator|+
literal|"."
operator|+
name|nodeId
argument_list|)
throw|;
block|}
if|if
condition|(
name|counter
operator|!=
name|nodesLength
condition|)
block|{
name|rpcAddress
operator|.
name|append
argument_list|(
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|rpcAddrStr
argument_list|)
argument_list|)
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rpcAddress
operator|.
name|append
argument_list|(
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|rpcAddrStr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rpcAddress
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

