begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|util
operator|.
name|OzoneS3Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_NODES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_SERVICE_IDS_KEY
import|;
end_import

begin_comment
comment|/**  * This class creates the OM service .  */
end_comment

begin_class
annotation|@
name|ApplicationScoped
DECL|class|OzoneServiceProvider
specifier|public
class|class
name|OzoneServiceProvider
block|{
DECL|field|omServiceAddr
specifier|private
name|Text
name|omServiceAddr
decl_stmt|;
DECL|field|omserviceID
specifier|private
name|String
name|omserviceID
decl_stmt|;
annotation|@
name|Inject
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
annotation|@
name|PostConstruct
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|serviceIdList
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|OZONE_OM_SERVICE_IDS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceIdList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Non-HA cluster
name|omServiceAddr
operator|=
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|OmUtils
operator|.
name|getOmAddressForClients
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// HA cluster.
comment|//For now if multiple service id's are configured we throw exception.
comment|// As if multiple service id's are configured, S3Gateway will not be
comment|// knowing which one to talk to. In future, if OM federation is supported
comment|// we can resolve this by having another property like
comment|// ozone.om.internal.service.id.
comment|// TODO: Revisit this later.
if|if
condition|(
name|serviceIdList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple serviceIds are "
operator|+
literal|"configured. "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|serviceIdList
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|serviceId
init|=
name|serviceIdList
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|omNodeIds
init|=
name|OmUtils
operator|.
name|getOMNodeIds
argument_list|(
name|conf
argument_list|,
name|serviceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|omNodeIds
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|OZONE_OM_NODES_KEY
operator|+
literal|"."
operator|+
name|serviceId
operator|+
literal|" is not defined"
argument_list|)
throw|;
block|}
name|omServiceAddr
operator|=
operator|new
name|Text
argument_list|(
name|OzoneS3Util
operator|.
name|buildServiceNameForToken
argument_list|(
name|conf
argument_list|,
name|serviceId
argument_list|,
name|omNodeIds
argument_list|)
argument_list|)
expr_stmt|;
name|omserviceID
operator|=
name|serviceId
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Produces
DECL|method|getService ()
specifier|public
name|Text
name|getService
parameter_list|()
block|{
return|return
name|omServiceAddr
return|;
block|}
annotation|@
name|Produces
DECL|method|getOmServiceID ()
specifier|public
name|String
name|getOmServiceID
parameter_list|()
block|{
return|return
name|omserviceID
return|;
block|}
block|}
end_class

end_unit

