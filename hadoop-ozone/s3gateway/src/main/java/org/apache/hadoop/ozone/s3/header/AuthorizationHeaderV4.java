begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.header
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|header
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|DecoderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|S3ErrorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoUnit
operator|.
name|DAYS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|isAllEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|isNoneEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|S3ErrorTable
operator|.
name|MALFORMED_HEADER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|header
operator|.
name|AWSConstants
operator|.
name|AWS4_SIGNING_ALGORITHM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|header
operator|.
name|AWSConstants
operator|.
name|DATE_FORMATTER
import|;
end_import

begin_comment
comment|/**  * S3 Authorization header.  * Ref: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-auth-using  * -authorization-header.html  */
end_comment

begin_class
DECL|class|AuthorizationHeaderV4
specifier|public
class|class
name|AuthorizationHeaderV4
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuthorizationHeaderV4
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CREDENTIAL
specifier|private
specifier|final
specifier|static
name|String
name|CREDENTIAL
init|=
literal|"Credential="
decl_stmt|;
DECL|field|SIGNEDHEADERS
specifier|private
specifier|final
specifier|static
name|String
name|SIGNEDHEADERS
init|=
literal|"SignedHeaders="
decl_stmt|;
DECL|field|SIGNATURE
specifier|private
specifier|final
specifier|static
name|String
name|SIGNATURE
init|=
literal|"Signature="
decl_stmt|;
DECL|field|authHeader
specifier|private
name|String
name|authHeader
decl_stmt|;
DECL|field|algorithm
specifier|private
name|String
name|algorithm
decl_stmt|;
DECL|field|credential
specifier|private
name|String
name|credential
decl_stmt|;
DECL|field|signedHeadersStr
specifier|private
name|String
name|signedHeadersStr
decl_stmt|;
DECL|field|signature
specifier|private
name|String
name|signature
decl_stmt|;
DECL|field|credentialObj
specifier|private
name|Credential
name|credentialObj
decl_stmt|;
DECL|field|signedHeaders
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|signedHeaders
decl_stmt|;
comment|/**    * Construct AuthorizationHeader object.    * @param header    */
DECL|method|AuthorizationHeaderV4 (String header)
specifier|public
name|AuthorizationHeaderV4
parameter_list|(
name|String
name|header
parameter_list|)
throws|throws
name|OS3Exception
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|this
operator|.
name|authHeader
operator|=
name|header
expr_stmt|;
name|parseAuthHeader
argument_list|()
expr_stmt|;
block|}
comment|/**    * This method parses authorization header.    *    *  Authorization Header sample:    *  AWS4-HMAC-SHA256 Credential=AKIAJWFJK62WUTKNFJJA/20181009/us-east-1/s3    *  /aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date,    * Signature=db81b057718d7c1b3b8dffa29933099551c51d787b3b13b9e0f9ebed45982bf2    * @throws OS3Exception    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StringSplitter"
argument_list|)
DECL|method|parseAuthHeader ()
specifier|public
name|void
name|parseAuthHeader
parameter_list|()
throws|throws
name|OS3Exception
block|{
name|int
name|firstSep
init|=
name|authHeader
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstSep
operator|<
literal|0
condition|)
block|{
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
comment|//split the value parts of the authorization header
name|String
index|[]
name|split
init|=
name|authHeader
operator|.
name|substring
argument_list|(
name|firstSep
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|", *"
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
name|algorithm
operator|=
name|authHeader
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|firstSep
argument_list|)
expr_stmt|;
name|validateAlgorithm
argument_list|()
expr_stmt|;
name|credential
operator|=
name|split
index|[
literal|0
index|]
expr_stmt|;
name|signedHeadersStr
operator|=
name|split
index|[
literal|1
index|]
expr_stmt|;
name|signature
operator|=
name|split
index|[
literal|2
index|]
expr_stmt|;
name|validateCredentials
argument_list|()
expr_stmt|;
name|validateSignedHeaders
argument_list|()
expr_stmt|;
name|validateSignature
argument_list|()
expr_stmt|;
block|}
comment|/**    * Validate Signed headers.    * */
DECL|method|validateSignedHeaders ()
specifier|private
name|void
name|validateSignedHeaders
parameter_list|()
throws|throws
name|OS3Exception
block|{
if|if
condition|(
name|isNoneEmpty
argument_list|(
name|signedHeadersStr
argument_list|)
operator|&&
name|signedHeadersStr
operator|.
name|startsWith
argument_list|(
name|SIGNEDHEADERS
argument_list|)
condition|)
block|{
name|signedHeadersStr
operator|=
name|signedHeadersStr
operator|.
name|substring
argument_list|(
name|SIGNEDHEADERS
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|signedHeaders
operator|=
name|StringUtils
operator|.
name|getStringCollection
argument_list|(
name|signedHeadersStr
argument_list|,
literal|";"
argument_list|)
expr_stmt|;
if|if
condition|(
name|signedHeaders
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No signed headers found. Authheader:{}"
argument_list|,
name|authHeader
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No signed headers found. Authheader:{}"
argument_list|,
name|authHeader
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validate signature.    * */
DECL|method|validateSignature ()
specifier|private
name|void
name|validateSignature
parameter_list|()
throws|throws
name|OS3Exception
block|{
if|if
condition|(
name|signature
operator|.
name|startsWith
argument_list|(
name|SIGNATURE
argument_list|)
condition|)
block|{
name|signature
operator|=
name|signature
operator|.
name|substring
argument_list|(
name|SIGNATURE
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNoneEmpty
argument_list|(
name|signature
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Signature can't be empty."
argument_list|,
name|signature
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
try|try
block|{
name|Hex
operator|.
name|decodeHex
argument_list|(
name|signature
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DecoderException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Signature:{} should be in hexa-decimal encoding."
argument_list|,
name|signature
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Signature can't be empty."
argument_list|,
name|signature
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validate credentials.    * */
DECL|method|validateCredentials ()
specifier|private
name|void
name|validateCredentials
parameter_list|()
throws|throws
name|OS3Exception
block|{
if|if
condition|(
name|isNoneEmpty
argument_list|(
name|credential
argument_list|)
operator|&&
name|credential
operator|.
name|startsWith
argument_list|(
name|CREDENTIAL
argument_list|)
condition|)
block|{
name|credential
operator|=
name|credential
operator|.
name|substring
argument_list|(
name|CREDENTIAL
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Parse credential. Other parts of header are not validated yet. When
comment|// security comes, it needs to be completed.
name|credentialObj
operator|=
operator|new
name|Credential
argument_list|(
name|credential
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
if|if
condition|(
name|credentialObj
operator|.
name|getAccessKeyID
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"AWS access id shouldn't be empty. credential:{}"
argument_list|,
name|credential
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
if|if
condition|(
name|credentialObj
operator|.
name|getAwsRegion
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"AWS region shouldn't be empty. credential:{}"
argument_list|,
name|credential
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
if|if
condition|(
name|credentialObj
operator|.
name|getAwsRequest
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"AWS request shouldn't be empty. credential:{}"
argument_list|,
name|credential
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
if|if
condition|(
name|credentialObj
operator|.
name|getAwsService
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"AWS service:{} shouldn't be empty. credential:{}"
argument_list|,
name|credential
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
comment|// Date should not be empty and within valid range.
if|if
condition|(
operator|!
name|credentialObj
operator|.
name|getDate
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LocalDate
name|date
init|=
name|LocalDate
operator|.
name|parse
argument_list|(
name|credentialObj
operator|.
name|getDate
argument_list|()
argument_list|,
name|DATE_FORMATTER
argument_list|)
decl_stmt|;
name|LocalDate
name|now
init|=
name|LocalDate
operator|.
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|isBefore
argument_list|(
name|now
operator|.
name|minus
argument_list|(
literal|1
argument_list|,
name|DAYS
argument_list|)
argument_list|)
operator|||
name|date
operator|.
name|isAfter
argument_list|(
name|now
operator|.
name|plus
argument_list|(
literal|1
argument_list|,
name|DAYS
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"AWS date not in valid range. Date:{} should not be older "
operator|+
literal|"than 1 day(i.e yesterday) and greater than 1 day(i.e "
operator|+
literal|"tomorrow)."
argument_list|,
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"AWS date shouldn't be empty. credential:{}"
argument_list|,
name|credential
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validate if algorithm is in expected format.    * */
DECL|method|validateAlgorithm ()
specifier|private
name|void
name|validateAlgorithm
parameter_list|()
throws|throws
name|OS3Exception
block|{
if|if
condition|(
name|isAllEmpty
argument_list|(
name|algorithm
argument_list|)
operator|||
operator|!
name|algorithm
operator|.
name|equals
argument_list|(
name|AWS4_SIGNING_ALGORITHM
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected hash algorithm. Algo:{}"
argument_list|,
name|algorithm
argument_list|)
expr_stmt|;
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|MALFORMED_HEADER
argument_list|,
name|authHeader
argument_list|)
throw|;
block|}
block|}
DECL|method|getAuthHeader ()
specifier|public
name|String
name|getAuthHeader
parameter_list|()
block|{
return|return
name|authHeader
return|;
block|}
DECL|method|getAlgorithm ()
specifier|public
name|String
name|getAlgorithm
parameter_list|()
block|{
return|return
name|algorithm
return|;
block|}
DECL|method|getCredential ()
specifier|public
name|String
name|getCredential
parameter_list|()
block|{
return|return
name|credential
return|;
block|}
DECL|method|getSignedHeaderString ()
specifier|public
name|String
name|getSignedHeaderString
parameter_list|()
block|{
return|return
name|signedHeadersStr
return|;
block|}
DECL|method|getSignature ()
specifier|public
name|String
name|getSignature
parameter_list|()
block|{
return|return
name|signature
return|;
block|}
DECL|method|getAccessKeyID ()
specifier|public
name|String
name|getAccessKeyID
parameter_list|()
block|{
return|return
name|credentialObj
operator|.
name|getAccessKeyID
argument_list|()
return|;
block|}
DECL|method|getDate ()
specifier|public
name|String
name|getDate
parameter_list|()
block|{
return|return
name|credentialObj
operator|.
name|getDate
argument_list|()
return|;
block|}
DECL|method|getAwsRegion ()
specifier|public
name|String
name|getAwsRegion
parameter_list|()
block|{
return|return
name|credentialObj
operator|.
name|getAwsRegion
argument_list|()
return|;
block|}
DECL|method|getAwsService ()
specifier|public
name|String
name|getAwsService
parameter_list|()
block|{
return|return
name|credentialObj
operator|.
name|getAwsService
argument_list|()
return|;
block|}
DECL|method|getAwsRequest ()
specifier|public
name|String
name|getAwsRequest
parameter_list|()
block|{
return|return
name|credentialObj
operator|.
name|getAwsRequest
argument_list|()
return|;
block|}
block|}
end_class

end_unit

