begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.bucket
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|EndpointBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|S3ErrorTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|header
operator|.
name|AuthorizationHeaderV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|header
operator|.
name|AuthorizationHeaderV4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Create new bucket.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/{bucket}"
argument_list|)
DECL|class|PutBucket
specifier|public
class|class
name|PutBucket
extends|extends
name|EndpointBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PutBucket
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|PUT
DECL|method|put (@athParamR) String bucketName, @Context HttpHeaders httpHeaders)
specifier|public
name|Response
name|put
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"bucket"
argument_list|)
name|String
name|bucketName
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|httpHeaders
parameter_list|)
throws|throws
name|IOException
throws|,
name|OS3Exception
block|{
name|String
name|auth
init|=
name|httpHeaders
operator|.
name|getHeaderString
argument_list|(
literal|"Authorization"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Auth header string {}"
argument_list|,
name|auth
argument_list|)
expr_stmt|;
if|if
condition|(
name|auth
operator|==
literal|null
condition|)
block|{
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|MALFORMED_HEADER
argument_list|,
name|S3ErrorTable
operator|.
name|Resource
operator|.
name|HEADER
argument_list|)
throw|;
block|}
name|String
name|userName
decl_stmt|;
if|if
condition|(
name|auth
operator|.
name|startsWith
argument_list|(
literal|"AWS4"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"V4 Header {}"
argument_list|,
name|auth
argument_list|)
expr_stmt|;
name|AuthorizationHeaderV4
name|authorizationHeader
init|=
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|auth
argument_list|)
decl_stmt|;
name|userName
operator|=
name|authorizationHeader
operator|.
name|getAccessKeyID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"V2 Header {}"
argument_list|,
name|auth
argument_list|)
expr_stmt|;
name|AuthorizationHeaderV2
name|authorizationHeader
init|=
operator|new
name|AuthorizationHeaderV2
argument_list|(
name|auth
argument_list|)
decl_stmt|;
name|userName
operator|=
name|authorizationHeader
operator|.
name|getAccessKeyID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|String
name|location
init|=
name|createS3Bucket
argument_list|(
name|userName
argument_list|,
name|bucketName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Location is {}"
argument_list|,
name|location
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|)
operator|.
name|header
argument_list|(
literal|"Location"
argument_list|,
name|location
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

