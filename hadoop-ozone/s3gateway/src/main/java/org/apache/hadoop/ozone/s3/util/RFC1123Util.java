begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatterBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|SignStyle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|DAY_OF_MONTH
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|DAY_OF_WEEK
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|HOUR_OF_DAY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|MINUTE_OF_HOUR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|MONTH_OF_YEAR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|SECOND_OF_MINUTE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|YEAR
import|;
end_import

begin_comment
comment|/**  * Stricter RFC1123 data format.  *<p>  * This format always use two digits for the days to make it compatible with  * golang clients.  */
end_comment

begin_class
DECL|class|RFC1123Util
specifier|public
specifier|final
class|class
name|RFC1123Util
block|{
DECL|method|RFC1123Util ()
specifier|private
name|RFC1123Util
parameter_list|()
block|{   }
comment|/**    * An RFC-1123 compatible file format which always use two digits for the    * days.    */
DECL|field|FORMAT
specifier|public
specifier|static
specifier|final
name|DateTimeFormatter
name|FORMAT
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|dow
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|dow
operator|.
name|put
argument_list|(
literal|1L
argument_list|,
literal|"Mon"
argument_list|)
expr_stmt|;
name|dow
operator|.
name|put
argument_list|(
literal|2L
argument_list|,
literal|"Tue"
argument_list|)
expr_stmt|;
name|dow
operator|.
name|put
argument_list|(
literal|3L
argument_list|,
literal|"Wed"
argument_list|)
expr_stmt|;
name|dow
operator|.
name|put
argument_list|(
literal|4L
argument_list|,
literal|"Thu"
argument_list|)
expr_stmt|;
name|dow
operator|.
name|put
argument_list|(
literal|5L
argument_list|,
literal|"Fri"
argument_list|)
expr_stmt|;
name|dow
operator|.
name|put
argument_list|(
literal|6L
argument_list|,
literal|"Sat"
argument_list|)
expr_stmt|;
name|dow
operator|.
name|put
argument_list|(
literal|7L
argument_list|,
literal|"Sun"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|moy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|1L
argument_list|,
literal|"Jan"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|2L
argument_list|,
literal|"Feb"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|3L
argument_list|,
literal|"Mar"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|4L
argument_list|,
literal|"Apr"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|5L
argument_list|,
literal|"May"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|6L
argument_list|,
literal|"Jun"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|7L
argument_list|,
literal|"Jul"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|8L
argument_list|,
literal|"Aug"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|9L
argument_list|,
literal|"Sep"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|10L
argument_list|,
literal|"Oct"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|11L
argument_list|,
literal|"Nov"
argument_list|)
expr_stmt|;
name|moy
operator|.
name|put
argument_list|(
literal|12L
argument_list|,
literal|"Dec"
argument_list|)
expr_stmt|;
name|FORMAT
operator|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|parseCaseInsensitive
argument_list|()
operator|.
name|parseLenient
argument_list|()
operator|.
name|optionalStart
argument_list|()
operator|.
name|appendText
argument_list|(
name|DAY_OF_WEEK
argument_list|,
name|dow
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|", "
argument_list|)
operator|.
name|optionalEnd
argument_list|()
operator|.
name|appendValue
argument_list|(
name|DAY_OF_MONTH
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|SignStyle
operator|.
name|NOT_NEGATIVE
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|' '
argument_list|)
operator|.
name|appendText
argument_list|(
name|MONTH_OF_YEAR
argument_list|,
name|moy
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|' '
argument_list|)
operator|.
name|appendValue
argument_list|(
name|YEAR
argument_list|,
literal|4
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|' '
argument_list|)
operator|.
name|appendValue
argument_list|(
name|HOUR_OF_DAY
argument_list|,
literal|2
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|':'
argument_list|)
operator|.
name|appendValue
argument_list|(
name|MINUTE_OF_HOUR
argument_list|,
literal|2
argument_list|)
operator|.
name|optionalStart
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|':'
argument_list|)
operator|.
name|appendValue
argument_list|(
name|SECOND_OF_MINUTE
argument_list|,
literal|2
argument_list|)
operator|.
name|optionalEnd
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|' '
argument_list|)
operator|.
name|appendOffset
argument_list|(
literal|"+HHMM"
argument_list|,
literal|"GMT"
argument_list|)
operator|.
name|toFormatter
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

