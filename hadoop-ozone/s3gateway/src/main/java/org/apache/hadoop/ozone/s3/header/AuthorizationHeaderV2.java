begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.header
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|header
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|S3ErrorTable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|isBlank
import|;
end_import

begin_comment
comment|/**  * Authorization Header v2.  */
end_comment

begin_class
DECL|class|AuthorizationHeaderV2
specifier|public
class|class
name|AuthorizationHeaderV2
block|{
DECL|field|IDENTIFIER
specifier|private
specifier|final
specifier|static
name|String
name|IDENTIFIER
init|=
literal|"AWS"
decl_stmt|;
DECL|field|authHeader
specifier|private
name|String
name|authHeader
decl_stmt|;
DECL|field|identifier
specifier|private
name|String
name|identifier
decl_stmt|;
DECL|field|accessKeyID
specifier|private
name|String
name|accessKeyID
decl_stmt|;
DECL|field|signature
specifier|private
name|String
name|signature
decl_stmt|;
DECL|method|AuthorizationHeaderV2 (String auth)
specifier|public
name|AuthorizationHeaderV2
parameter_list|(
name|String
name|auth
parameter_list|)
throws|throws
name|OS3Exception
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|auth
argument_list|)
expr_stmt|;
name|this
operator|.
name|authHeader
operator|=
name|auth
expr_stmt|;
name|parseHeader
argument_list|()
expr_stmt|;
block|}
comment|/**    * This method parses the authorization header.    *    * Authorization header sample:    * AWS AKIAIOSFODNN7EXAMPLE:frJIUN8DYpKDtOLCwo//yllqDzg=    *    * @throws OS3Exception    */
DECL|method|parseHeader ()
specifier|public
name|void
name|parseHeader
parameter_list|()
throws|throws
name|OS3Exception
block|{
name|String
index|[]
name|split
init|=
name|authHeader
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|MALFORMED_HEADER
argument_list|,
name|S3ErrorTable
operator|.
name|Resource
operator|.
name|HEADER
argument_list|)
throw|;
block|}
name|identifier
operator|=
name|split
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|IDENTIFIER
operator|.
name|equals
argument_list|(
name|identifier
argument_list|)
condition|)
block|{
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|MALFORMED_HEADER
argument_list|,
name|S3ErrorTable
operator|.
name|Resource
operator|.
name|HEADER
argument_list|)
throw|;
block|}
name|String
index|[]
name|remainingSplit
init|=
name|split
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|remainingSplit
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|MALFORMED_HEADER
argument_list|,
name|S3ErrorTable
operator|.
name|Resource
operator|.
name|HEADER
argument_list|)
throw|;
block|}
name|accessKeyID
operator|=
name|remainingSplit
index|[
literal|0
index|]
expr_stmt|;
name|signature
operator|=
name|remainingSplit
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|isBlank
argument_list|(
name|accessKeyID
argument_list|)
operator|||
name|isBlank
argument_list|(
name|signature
argument_list|)
condition|)
block|{
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|MALFORMED_HEADER
argument_list|,
name|S3ErrorTable
operator|.
name|Resource
operator|.
name|HEADER
argument_list|)
throw|;
block|}
block|}
DECL|method|getAuthHeader ()
specifier|public
name|String
name|getAuthHeader
parameter_list|()
block|{
return|return
name|authHeader
return|;
block|}
DECL|method|setAuthHeader (String authHeader)
specifier|public
name|void
name|setAuthHeader
parameter_list|(
name|String
name|authHeader
parameter_list|)
block|{
name|this
operator|.
name|authHeader
operator|=
name|authHeader
expr_stmt|;
block|}
DECL|method|getIdentifier ()
specifier|public
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|identifier
return|;
block|}
DECL|method|getAccessKeyID ()
specifier|public
name|String
name|getAccessKeyID
parameter_list|()
block|{
return|return
name|accessKeyID
return|;
block|}
DECL|method|getSignature ()
specifier|public
name|String
name|getSignature
parameter_list|()
block|{
return|return
name|signature
return|;
block|}
block|}
end_class

end_unit

