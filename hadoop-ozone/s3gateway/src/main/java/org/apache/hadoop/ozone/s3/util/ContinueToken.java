begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|S3ErrorTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|DecoderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_comment
comment|/**  * Token which holds enough information to continue the key iteration.  */
end_comment

begin_class
DECL|class|ContinueToken
specifier|public
class|class
name|ContinueToken
block|{
DECL|field|lastKey
specifier|private
name|String
name|lastKey
decl_stmt|;
DECL|field|lastDir
specifier|private
name|String
name|lastDir
decl_stmt|;
DECL|field|CONTINUE_TOKEN_SEPERATOR
specifier|private
specifier|static
specifier|final
name|String
name|CONTINUE_TOKEN_SEPERATOR
init|=
literal|"-"
decl_stmt|;
DECL|method|ContinueToken (String lastKey, String lastDir)
specifier|public
name|ContinueToken
parameter_list|(
name|String
name|lastKey
parameter_list|,
name|String
name|lastDir
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|lastKey
argument_list|,
literal|"The last key can't be null in the continue token."
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastKey
operator|=
name|lastKey
expr_stmt|;
if|if
condition|(
name|lastDir
operator|!=
literal|null
operator|&&
name|lastDir
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|lastDir
operator|=
name|lastDir
expr_stmt|;
block|}
block|}
comment|/**    * Generate a continuation token which is used in get Bucket.    *    * @return if key is not null return continuation token, else returns null.    */
DECL|method|encodeToString ()
specifier|public
name|String
name|encodeToString
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|lastKey
operator|!=
literal|null
condition|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
operator|+
name|lastKey
operator|.
name|length
argument_list|()
operator|+
operator|(
name|lastDir
operator|==
literal|null
condition|?
literal|0
else|:
name|lastDir
operator|.
name|length
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|putInt
argument_list|(
name|lastKey
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|lastKey
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastDir
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|put
argument_list|(
name|lastDir
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|hex
init|=
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|digest
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|hex
argument_list|)
decl_stmt|;
return|return
name|hex
operator|+
name|CONTINUE_TOKEN_SEPERATOR
operator|+
name|digest
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Decode a continuation token which is used in get Bucket.    *    * @param key    * @return if key is not null return decoded token, otherwise returns null.    * @throws OS3Exception    */
DECL|method|decodeFromString (String key)
specifier|public
specifier|static
name|ContinueToken
name|decodeFromString
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|OS3Exception
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|int
name|indexSeparator
init|=
name|key
operator|.
name|indexOf
argument_list|(
name|CONTINUE_TOKEN_SEPERATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexSeparator
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|INVALID_ARGUMENT
argument_list|,
name|key
argument_list|)
throw|;
block|}
name|String
name|hex
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexSeparator
argument_list|)
decl_stmt|;
name|String
name|digest
init|=
name|key
operator|.
name|substring
argument_list|(
name|indexSeparator
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|checkHash
argument_list|(
name|key
argument_list|,
name|hex
argument_list|,
name|digest
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|Hex
operator|.
name|decodeHex
argument_list|(
name|hex
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|keySize
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|actualKeyBytes
init|=
operator|new
name|byte
index|[
name|keySize
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|actualKeyBytes
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actualDirBytes
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|actualDirBytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|ContinueToken
argument_list|(
operator|new
name|String
argument_list|(
name|actualKeyBytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|actualDirBytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DecoderException
name|ex
parameter_list|)
block|{
name|OS3Exception
name|os3Exception
init|=
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|INVALID_ARGUMENT
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|os3Exception
operator|.
name|setErrorMessage
argument_list|(
literal|"The continuation token provided is "
operator|+
literal|"incorrect"
argument_list|)
expr_stmt|;
throw|throw
name|os3Exception
throw|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|checkHash (String key, String hex, String digest)
specifier|private
specifier|static
name|void
name|checkHash
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|hex
parameter_list|,
name|String
name|digest
parameter_list|)
throws|throws
name|OS3Exception
block|{
name|String
name|digestActualKey
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|hex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|digest
operator|.
name|equals
argument_list|(
name|digestActualKey
argument_list|)
condition|)
block|{
name|OS3Exception
name|ex
init|=
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|INVALID_ARGUMENT
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setErrorMessage
argument_list|(
literal|"The continuation token provided is incorrect"
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|getLastKey ()
specifier|public
name|String
name|getLastKey
parameter_list|()
block|{
return|return
name|lastKey
return|;
block|}
DECL|method|setLastKey (String lastKey)
specifier|public
name|void
name|setLastKey
parameter_list|(
name|String
name|lastKey
parameter_list|)
block|{
name|this
operator|.
name|lastKey
operator|=
name|lastKey
expr_stmt|;
block|}
DECL|method|getLastDir ()
specifier|public
name|String
name|getLastDir
parameter_list|()
block|{
return|return
name|lastDir
return|;
block|}
DECL|method|setLastDir (String lastDir)
specifier|public
name|void
name|setLastDir
parameter_list|(
name|String
name|lastDir
parameter_list|)
block|{
name|this
operator|.
name|lastDir
operator|=
name|lastDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ContinueToken
name|that
init|=
operator|(
name|ContinueToken
operator|)
name|o
decl_stmt|;
return|return
name|lastKey
operator|.
name|equals
argument_list|(
name|that
operator|.
name|lastKey
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|lastDir
argument_list|,
name|that
operator|.
name|lastDir
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|lastKey
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ContinueToken{"
operator|+
literal|"lastKey='"
operator|+
name|lastKey
operator|+
literal|'\''
operator|+
literal|", lastDir='"
operator|+
name|lastDir
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

