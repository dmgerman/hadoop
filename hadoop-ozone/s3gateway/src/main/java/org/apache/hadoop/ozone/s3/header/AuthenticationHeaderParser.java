begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.header
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|header
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|RequestScoped
import|;
end_import

begin_comment
comment|/**  * Authentication Header parser to parse HttpHeader Authentication.  */
end_comment

begin_class
annotation|@
name|RequestScoped
DECL|class|AuthenticationHeaderParser
specifier|public
class|class
name|AuthenticationHeaderParser
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuthenticationHeaderParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|authHeader
specifier|private
name|String
name|authHeader
decl_stmt|;
DECL|field|accessKeyID
specifier|private
name|String
name|accessKeyID
decl_stmt|;
DECL|method|parse ()
specifier|public
name|void
name|parse
parameter_list|()
throws|throws
name|OS3Exception
block|{
if|if
condition|(
name|authHeader
operator|.
name|startsWith
argument_list|(
literal|"AWS4"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"V4 Header {}"
argument_list|,
name|authHeader
argument_list|)
expr_stmt|;
name|AuthorizationHeaderV4
name|authorizationHeader
init|=
operator|new
name|AuthorizationHeaderV4
argument_list|(
name|authHeader
argument_list|)
decl_stmt|;
name|accessKeyID
operator|=
name|authorizationHeader
operator|.
name|getAccessKeyID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"V2 Header {}"
argument_list|,
name|authHeader
argument_list|)
expr_stmt|;
name|AuthorizationHeaderV2
name|authorizationHeader
init|=
operator|new
name|AuthorizationHeaderV2
argument_list|(
name|authHeader
argument_list|)
decl_stmt|;
name|accessKeyID
operator|=
name|authorizationHeader
operator|.
name|getAccessKeyID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doesAuthenticationInfoExists ()
specifier|public
name|boolean
name|doesAuthenticationInfoExists
parameter_list|()
block|{
return|return
name|authHeader
operator|!=
literal|null
return|;
block|}
DECL|method|getAccessKeyID ()
specifier|public
name|String
name|getAccessKeyID
parameter_list|()
throws|throws
name|OS3Exception
block|{
name|parse
argument_list|()
expr_stmt|;
return|return
name|accessKeyID
return|;
block|}
DECL|method|setAuthHeader (String header)
specifier|public
name|void
name|setAuthHeader
parameter_list|(
name|String
name|header
parameter_list|)
block|{
name|this
operator|.
name|authHeader
operator|=
name|header
expr_stmt|;
block|}
block|}
end_class

end_unit

