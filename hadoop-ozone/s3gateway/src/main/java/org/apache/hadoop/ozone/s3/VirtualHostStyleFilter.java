begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|PreMatching
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|InvalidRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|header
operator|.
name|AuthenticationHeaderParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|S3GatewayConfigKeys
operator|.
name|OZONE_S3G_DOMAIN_NAME
import|;
end_import

begin_comment
comment|/**  * Filter used to convert virtual host style pattern to path style pattern.  */
end_comment

begin_class
annotation|@
name|Provider
annotation|@
name|PreMatching
DECL|class|VirtualHostStyleFilter
specifier|public
class|class
name|VirtualHostStyleFilter
implements|implements
name|ContainerRequestFilter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VirtualHostStyleFilter
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
annotation|@
name|Inject
DECL|field|authenticationHeaderParser
specifier|private
name|AuthenticationHeaderParser
name|authenticationHeaderParser
decl_stmt|;
DECL|field|domains
specifier|private
name|String
index|[]
name|domains
decl_stmt|;
annotation|@
name|Override
DECL|method|filter (ContainerRequestContext requestContext)
specifier|public
name|void
name|filter
parameter_list|(
name|ContainerRequestContext
name|requestContext
parameter_list|)
throws|throws
name|IOException
block|{
name|authenticationHeaderParser
operator|.
name|setAuthHeader
argument_list|(
name|requestContext
operator|.
name|getHeaderString
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|)
argument_list|)
expr_stmt|;
name|domains
operator|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|OZONE_S3G_DOMAIN_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|domains
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// domains is not configured, might be it is path style.
comment|// So, do not continue further, just return.
return|return;
block|}
comment|//Get the value of the host
name|String
name|host
init|=
name|requestContext
operator|.
name|getHeaderString
argument_list|(
name|HttpHeaders
operator|.
name|HOST
argument_list|)
decl_stmt|;
name|String
name|domain
init|=
name|getDomainName
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
throw|throw
name|getException
argument_list|(
literal|"Invalid S3 Gateway request {"
operator|+
name|requestContext
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getRequestUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" }: No matching domain "
operator|+
literal|"{"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|domains
argument_list|)
operator|+
literal|"} for the host {"
operator|+
name|host
operator|+
literal|"}"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Http header host name is {}"
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Domain name matched is {}"
argument_list|,
name|domain
argument_list|)
expr_stmt|;
comment|//Check if we have a Virtual Host style request, host length greater than
comment|// address length means it is virtual host style, we need to convert to
comment|// path style.
if|if
condition|(
name|host
operator|.
name|length
argument_list|()
operator|>
name|domain
operator|.
name|length
argument_list|()
condition|)
block|{
name|String
name|bucketName
init|=
name|host
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|host
operator|.
name|length
argument_list|()
operator|-
name|domain
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bucketName
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|//Checking this as the virtual host style pattern is http://bucket.host/
throw|throw
name|getException
argument_list|(
literal|"Invalid S3 Gateway request {"
operator|+
name|requestContext
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getRequestUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"}:"
operator|+
literal|" Host: {"
operator|+
name|host
operator|+
literal|" is in invalid format"
argument_list|)
throw|;
block|}
else|else
block|{
name|bucketName
operator|=
name|bucketName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|bucketName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bucket name is {}"
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|URI
name|baseURI
init|=
name|requestContext
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getBaseUri
argument_list|()
decl_stmt|;
name|String
name|currentPath
init|=
name|requestContext
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|newPath
init|=
name|bucketName
decl_stmt|;
if|if
condition|(
name|currentPath
operator|!=
literal|null
condition|)
block|{
name|newPath
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|"%s"
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
init|=
name|requestContext
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getQueryParameters
argument_list|()
decl_stmt|;
name|UriBuilder
name|requestAddrBuilder
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|baseURI
argument_list|)
operator|.
name|path
argument_list|(
name|newPath
argument_list|)
decl_stmt|;
name|queryParams
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|requestAddrBuilder
operator|.
name|queryParam
argument_list|(
name|k
argument_list|,
name|v
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|URI
name|requestAddr
init|=
name|requestAddrBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|setRequestUri
argument_list|(
name|baseURI
argument_list|,
name|requestAddr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getException (String message)
specifier|private
name|InvalidRequestException
name|getException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|InvalidRequestException
argument_list|(
name|message
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setConfiguration (OzoneConfiguration config)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|OzoneConfiguration
name|config
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
block|}
comment|/**    * This method finds the longest match with the domain name.    * @param host    * @return domain name matched with the host. if none of them are matching,    * return null.    */
DECL|method|getDomainName (String host)
specifier|private
name|String
name|getDomainName
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|String
name|match
init|=
literal|null
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|domainVal
range|:
name|domains
control|)
block|{
if|if
condition|(
name|host
operator|.
name|endsWith
argument_list|(
name|domainVal
argument_list|)
condition|)
block|{
name|int
name|len
init|=
name|domainVal
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|length
condition|)
block|{
name|length
operator|=
name|len
expr_stmt|;
name|match
operator|=
name|domainVal
expr_stmt|;
block|}
block|}
block|}
return|return
name|match
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setAuthenticationHeaderParser (AuthenticationHeaderParser parser)
specifier|public
name|void
name|setAuthenticationHeaderParser
parameter_list|(
name|AuthenticationHeaderParser
name|parser
parameter_list|)
block|{
name|this
operator|.
name|authenticationHeaderParser
operator|=
name|parser
expr_stmt|;
block|}
block|}
end_class

end_unit

