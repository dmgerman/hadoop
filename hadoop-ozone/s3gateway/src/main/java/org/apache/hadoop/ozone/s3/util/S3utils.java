begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.ozone.s3.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|DecoderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|OS3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|exception
operator|.
name|S3ErrorTable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_comment
comment|/**  * Utility class for S3.  */
end_comment

begin_class
DECL|class|S3utils
specifier|public
specifier|final
class|class
name|S3utils
block|{
DECL|method|S3utils ()
specifier|private
name|S3utils
parameter_list|()
block|{    }
DECL|field|CONTINUE_TOKEN_SEPERATOR
specifier|private
specifier|static
specifier|final
name|String
name|CONTINUE_TOKEN_SEPERATOR
init|=
literal|"-"
decl_stmt|;
comment|/**    * Generate a continuation token which is used in get Bucket.    * @param key    * @return if key is not null return continuation token, else returns null.    */
DECL|method|generateContinueToken (String key)
specifier|public
specifier|static
name|String
name|generateContinueToken
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|byteData
init|=
name|key
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|String
name|hex
init|=
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|byteData
argument_list|)
decl_stmt|;
name|String
name|digest
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|hex
operator|+
name|CONTINUE_TOKEN_SEPERATOR
operator|+
name|digest
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Decode a continuation token which is used in get Bucket.    * @param key    * @return if key is not null return decoded token, otherwise returns null.    * @throws OS3Exception    */
DECL|method|decodeContinueToken (String key)
specifier|public
specifier|static
name|String
name|decodeContinueToken
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|OS3Exception
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|int
name|indexSeparator
init|=
name|key
operator|.
name|indexOf
argument_list|(
name|CONTINUE_TOKEN_SEPERATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexSeparator
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|INVALID_ARGUMENT
argument_list|,
name|key
argument_list|)
throw|;
block|}
name|String
name|hex
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexSeparator
argument_list|)
decl_stmt|;
name|String
name|digest
init|=
name|key
operator|.
name|substring
argument_list|(
name|indexSeparator
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|actualKeyBytes
init|=
name|Hex
operator|.
name|decodeHex
argument_list|(
name|hex
argument_list|)
decl_stmt|;
name|String
name|digestActualKey
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|actualKeyBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|digest
operator|.
name|equals
argument_list|(
name|digestActualKey
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|actualKeyBytes
argument_list|)
return|;
block|}
else|else
block|{
name|OS3Exception
name|ex
init|=
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|INVALID_ARGUMENT
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setErrorMessage
argument_list|(
literal|"The continuation token provided is incorrect"
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|DecoderException
name|ex
parameter_list|)
block|{
name|OS3Exception
name|os3Exception
init|=
name|S3ErrorTable
operator|.
name|newError
argument_list|(
name|S3ErrorTable
operator|.
name|INVALID_ARGUMENT
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|os3Exception
operator|.
name|setErrorMessage
argument_list|(
literal|"The continuation token provided is "
operator|+
literal|"incorrect"
argument_list|)
expr_stmt|;
throw|throw
name|os3Exception
throw|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

