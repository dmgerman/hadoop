begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.s3.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|s3
operator|.
name|util
operator|.
name|S3Consts
operator|.
name|RANGE_HEADER_MATCH_PATTERN
import|;
end_import

begin_comment
comment|/**  * Utility class for S3.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|S3utils
specifier|public
specifier|final
class|class
name|S3utils
block|{
DECL|method|S3utils ()
specifier|private
name|S3utils
parameter_list|()
block|{    }
comment|/**    * Parse the rangeHeader and set the start and end offset.    * @param rangeHeaderVal    * @param length    *    * @return RangeHeader    */
DECL|method|parseRangeHeader (String rangeHeaderVal, long length)
specifier|public
specifier|static
name|RangeHeader
name|parseRangeHeader
parameter_list|(
name|String
name|rangeHeaderVal
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|long
name|start
init|=
literal|0
decl_stmt|;
name|long
name|end
init|=
literal|0
decl_stmt|;
name|boolean
name|noStart
init|=
literal|false
decl_stmt|;
name|boolean
name|readFull
init|=
literal|false
decl_stmt|;
name|boolean
name|inValidRange
init|=
literal|false
decl_stmt|;
name|RangeHeader
name|rangeHeader
decl_stmt|;
name|Matcher
name|matcher
init|=
name|RANGE_HEADER_MATCH_PATTERN
operator|.
name|matcher
argument_list|(
name|rangeHeaderVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|matcher
operator|.
name|group
argument_list|(
literal|"start"
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|noStart
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|matcher
operator|.
name|group
argument_list|(
literal|"end"
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|end
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
name|length
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|noStart
condition|)
block|{
if|if
condition|(
name|end
operator|<
name|length
condition|)
block|{
name|start
operator|=
name|length
operator|-
name|end
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
literal|0
expr_stmt|;
block|}
name|end
operator|=
name|length
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|start
operator|>=
name|length
condition|)
block|{
name|readFull
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|end
operator|>=
name|length
condition|)
block|{
name|inValidRange
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
literal|0
expr_stmt|;
name|end
operator|=
name|length
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|end
operator|>=
name|length
condition|)
block|{
name|end
operator|=
name|length
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// Byte specification is not matching or start and endoffset provided
comment|// are not matching with regex.
name|start
operator|=
literal|0
expr_stmt|;
name|end
operator|=
name|length
operator|-
literal|1
expr_stmt|;
name|readFull
operator|=
literal|true
expr_stmt|;
block|}
name|rangeHeader
operator|=
operator|new
name|RangeHeader
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|readFull
argument_list|,
name|inValidRange
argument_list|)
expr_stmt|;
return|return
name|rangeHeader
return|;
block|}
block|}
end_class

end_unit

