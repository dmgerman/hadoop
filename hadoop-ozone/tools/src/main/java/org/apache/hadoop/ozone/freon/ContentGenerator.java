begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.freon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|freon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_comment
comment|/**  * Utility class to write random keys from a limited buffer.  */
end_comment

begin_class
DECL|class|ContentGenerator
specifier|public
class|class
name|ContentGenerator
block|{
comment|/**    * Size of the destination object (key or file).    */
DECL|field|keySize
specifier|private
name|int
name|keySize
decl_stmt|;
comment|/**    * Buffer for the pre-allocated content (will be reused if less than the    * keySize).    */
DECL|field|bufferSize
specifier|private
name|int
name|bufferSize
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|method|ContentGenerator (int keySize, int bufferSize)
name|ContentGenerator
parameter_list|(
name|int
name|keySize
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|keySize
operator|=
name|keySize
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|buffer
operator|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
name|bufferSize
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write the required bytes to the output stream.    */
DECL|method|write (OutputStream outputStream)
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|nrRemaining
init|=
name|keySize
init|;
name|nrRemaining
operator|>
literal|0
condition|;
name|nrRemaining
operator|-=
name|bufferSize
control|)
block|{
name|int
name|curSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|bufferSize
argument_list|,
name|nrRemaining
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|curSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

