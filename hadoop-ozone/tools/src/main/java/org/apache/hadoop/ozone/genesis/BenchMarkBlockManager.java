begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.genesis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|genesis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|block
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMStorageConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|infra
operator|.
name|Blackhole
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DB_CACHE_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DB_CACHE_SIZE_MB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|SCM_PIPELINE_DB
import|;
end_import

begin_comment
comment|/**  * Benchmarks BlockManager class.  */
end_comment

begin_class
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
DECL|class|BenchMarkBlockManager
specifier|public
class|class
name|BenchMarkBlockManager
block|{
DECL|field|testDir
specifier|private
specifier|static
name|String
name|testDir
decl_stmt|;
DECL|field|scm
specifier|private
specifier|static
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|pipelineManager
specifier|private
specifier|static
name|PipelineManager
name|pipelineManager
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|static
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|lock
specifier|private
specifier|static
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"1"
block|,
literal|"10"
block|,
literal|"100"
block|,
literal|"1000"
block|,
literal|"10000"
block|,
literal|"100000"
block|}
argument_list|)
DECL|field|numPipelines
specifier|private
specifier|static
name|int
name|numPipelines
decl_stmt|;
annotation|@
name|Param
argument_list|(
block|{
literal|"3"
block|,
literal|"10"
block|,
literal|"100"
block|}
argument_list|)
DECL|field|numContainersPerPipeline
specifier|private
specifier|static
name|int
name|numContainersPerPipeline
decl_stmt|;
DECL|method|getScm (OzoneConfiguration conf, SCMConfigurator configurator)
specifier|private
specifier|static
name|StorageContainerManager
name|getScm
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|SCMConfigurator
name|configurator
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SCMStorageConfig
name|scmStore
init|=
operator|new
name|SCMStorageConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|scmStore
operator|.
name|getState
argument_list|()
operator|!=
name|Storage
operator|.
name|StorageState
operator|.
name|INITIALIZED
condition|)
block|{
name|String
name|clusterId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|scmId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|scmStore
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|scmStore
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
expr_stmt|;
comment|// writes the version file properties
name|scmStore
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|StorageContainerManager
argument_list|(
name|conf
argument_list|,
name|configurator
argument_list|)
return|;
block|}
annotation|@
name|Setup
argument_list|(
name|Level
operator|.
name|Trial
argument_list|)
DECL|method|initialize ()
specifier|public
specifier|static
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
throws|,
name|AuthenticationException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|scm
operator|==
literal|null
condition|)
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|testDir
operator|=
name|GenesisUtil
operator|.
name|getTempPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|testDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT
argument_list|,
name|numContainersPerPipeline
argument_list|)
expr_stmt|;
specifier|final
name|File
name|metaDir
init|=
name|ServerUtils
operator|.
name|getScmDbDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|File
name|pipelineDBPath
init|=
operator|new
name|File
argument_list|(
name|metaDir
argument_list|,
name|SCM_PIPELINE_DB
argument_list|)
decl_stmt|;
name|int
name|cacheSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_SCM_DB_CACHE_SIZE_MB
argument_list|,
name|OZONE_SCM_DB_CACHE_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|MetadataStore
name|pipelineStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|pipelineDBPath
argument_list|)
operator|.
name|setCacheSize
argument_list|(
name|cacheSize
operator|*
name|OzoneConsts
operator|.
name|MB
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addPipelines
argument_list|(
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|pipelineStore
argument_list|)
expr_stmt|;
name|pipelineStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|scm
operator|=
name|getScm
argument_list|(
name|conf
argument_list|,
operator|new
name|SCMConfigurator
argument_list|()
argument_list|)
expr_stmt|;
name|pipelineManager
operator|=
name|scm
operator|.
name|getPipelineManager
argument_list|()
expr_stmt|;
for|for
control|(
name|Pipeline
name|pipeline
range|:
name|pipelineManager
operator|.
name|getPipelines
argument_list|(
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
control|)
block|{
name|pipelineManager
operator|.
name|openPipeline
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|blockManager
operator|=
name|scm
operator|.
name|getScmBlockManager
argument_list|()
expr_stmt|;
name|scm
operator|.
name|getEventQueue
argument_list|()
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CHILL_MODE_STATUS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Setup
argument_list|(
name|Level
operator|.
name|Trial
argument_list|)
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|scm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|scm
operator|.
name|join
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|testDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addPipelines (ReplicationFactor factor, MetadataStore pipelineStore)
specifier|private
specifier|static
name|void
name|addPipelines
parameter_list|(
name|ReplicationFactor
name|factor
parameter_list|,
name|MetadataStore
name|pipelineStore
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|factor
operator|.
name|getNumber
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|GenesisUtil
operator|.
name|createDatanodeDetails
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPipelines
condition|;
name|i
operator|++
control|)
block|{
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
argument_list|)
operator|.
name|setId
argument_list|(
name|PipelineID
operator|.
name|randomId
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|factor
argument_list|)
operator|.
name|setNodes
argument_list|(
name|nodes
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|pipelineStore
operator|.
name|put
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|pipeline
operator|.
name|getProtobufMessage
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Threads
argument_list|(
literal|4
argument_list|)
annotation|@
name|Benchmark
DECL|method|allocateBlockBenchMark (BenchMarkBlockManager state, Blackhole bh)
specifier|public
name|void
name|allocateBlockBenchMark
parameter_list|(
name|BenchMarkBlockManager
name|state
parameter_list|,
name|Blackhole
name|bh
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|.
name|blockManager
operator|.
name|allocateBlock
argument_list|(
literal|50
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
literal|"Genesis"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

