begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.genconf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|genconf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|GenericCli
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|PicocliException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * GenerateOzoneRequiredConfigurations - A tool to generate ozone-site.xml<br>  * This tool generates an ozone-site.xml with minimally required configs.  * This tool can be invoked as follows:<br>  *<ul>  *<li>ozone genconf {@literal<Path to output file>}</li>  *<li>ozone genconf --help</li>  *<li>ozone genconf -h</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|name
operator|=
literal|"ozone genconf"
argument_list|,
name|description
operator|=
literal|"Tool to generate template ozone-site.xml"
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|)
DECL|class|GenerateOzoneRequiredConfigurations
specifier|public
specifier|final
class|class
name|GenerateOzoneRequiredConfigurations
extends|extends
name|GenericCli
block|{
annotation|@
name|Parameters
argument_list|(
name|arity
operator|=
literal|"1..1"
argument_list|,
name|description
operator|=
literal|"Directory path where ozone-site file should be generated."
argument_list|)
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
comment|/**    * Entry point for using genconf tool.    *    * @param args    *    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|GenerateOzoneRequiredConfigurations
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|generateConfigurations
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Generate ozone-site.xml at specified path.    * @param path    * @throws PicocliException    * @throws JAXBException    */
DECL|method|generateConfigurations (String path)
specifier|public
specifier|static
name|void
name|generateConfigurations
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|PicocliException
throws|,
name|JAXBException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|isValidPath
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PicocliException
argument_list|(
literal|"Invalid directory path."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|canWrite
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PicocliException
argument_list|(
literal|"Insufficient permission."
argument_list|)
throw|;
block|}
name|OzoneConfiguration
name|oc
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|ClassLoader
name|cL
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|cL
operator|==
literal|null
condition|)
block|{
name|cL
operator|=
name|OzoneConfiguration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
name|URL
name|url
init|=
name|cL
operator|.
name|getResource
argument_list|(
literal|"ozone-default.xml"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OzoneConfiguration
operator|.
name|Property
argument_list|>
name|allProperties
init|=
name|oc
operator|.
name|readPropertyFromXml
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OzoneConfiguration
operator|.
name|Property
argument_list|>
name|requiredProperties
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OzoneConfiguration
operator|.
name|Property
name|p
range|:
name|allProperties
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getTag
argument_list|()
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getTag
argument_list|()
operator|.
name|contains
argument_list|(
literal|"REQUIRED"
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
argument_list|)
condition|)
block|{
name|p
operator|.
name|setValue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|)
condition|)
block|{
name|p
operator|.
name|setValue
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|OzoneConsts
operator|.
name|JAVA_TMP_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|)
operator|||
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NAMES
argument_list|)
operator|||
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
condition|)
block|{
name|p
operator|.
name|setValue
argument_list|(
name|OzoneConsts
operator|.
name|LOCALHOST
argument_list|)
expr_stmt|;
block|}
name|requiredProperties
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|OzoneConfiguration
operator|.
name|XMLConfiguration
name|requiredConfig
init|=
operator|new
name|OzoneConfiguration
operator|.
name|XMLConfiguration
argument_list|()
decl_stmt|;
name|requiredConfig
operator|.
name|setProperties
argument_list|(
name|requiredProperties
argument_list|)
expr_stmt|;
name|File
name|output
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
literal|"ozone-site.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|output
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|OzoneConfiguration
operator|.
name|XMLConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|Marshaller
name|m
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|m
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FORMATTED_OUTPUT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|m
operator|.
name|marshal
argument_list|(
name|requiredConfig
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ozone-site.xml has been generated at "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"ozone-site.xml already exists at %s and "
operator|+
literal|"will not be overwritten%n"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check if the path is valid directory.    *    * @param path    * @return true, if path is valid directory, else return false    */
DECL|method|isValidPath (String path)
specifier|public
specifier|static
name|boolean
name|isValidPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
block|{
return|return
name|Files
operator|.
name|isDirectory
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPathException
decl||
name|NullPointerException
name|ex
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
comment|/**    * Check if user has permission to write in the specified path.    *    * @param path    * @return true, if the user has permission to write, else returns false    */
DECL|method|canWrite (String path)
specifier|public
specifier|static
name|boolean
name|canWrite
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|canWrite
argument_list|()
return|;
block|}
block|}
end_class

end_unit

