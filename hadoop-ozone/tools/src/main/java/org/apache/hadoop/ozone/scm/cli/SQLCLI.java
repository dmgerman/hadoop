begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|BasicParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtilClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|OzoneAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|BucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|VolumeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|BLOCK_DB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|CONTAINER_DB_SUFFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|KSM_DB_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|KSM_USER_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|KSM_BUCKET_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|KSM_VOLUME_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|NODEPOOL_DB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OPEN_CONTAINERS_DB
import|;
end_import

begin_comment
comment|/**  * This is the CLI that can be use to convert an ozone metadata DB into  * a sqlite DB file.  *  * NOTE: user should use this CLI in an offline fashion. Namely, this should not  * be used to convert a DB that is currently being used by Ozone. Instead,  * this should be used to debug and diagnosis closed DB instances.  *  */
end_comment

begin_class
DECL|class|SQLCLI
specifier|public
class|class
name|SQLCLI
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|options
specifier|private
name|Options
name|options
decl_stmt|;
DECL|field|parser
specifier|private
name|BasicParser
name|parser
decl_stmt|;
DECL|field|encoding
specifier|private
specifier|final
name|Charset
name|encoding
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|OzoneConfiguration
name|conf
decl_stmt|;
comment|// for container.db
DECL|field|CREATE_CONTAINER_INFO
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_CONTAINER_INFO
init|=
literal|"CREATE TABLE containerInfo ("
operator|+
literal|"containerID LONG PRIMARY KEY NOT NULL, "
operator|+
literal|"leaderUUID TEXT NOT NULL)"
decl_stmt|;
DECL|field|CREATE_CONTAINER_MEMBERS
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_CONTAINER_MEMBERS
init|=
literal|"CREATE TABLE containerMembers ("
operator|+
literal|"containerName TEXT NOT NULL, "
operator|+
literal|"datanodeUUID TEXT NOT NULL,"
operator|+
literal|"PRIMARY KEY(containerName, datanodeUUID));"
decl_stmt|;
DECL|field|CREATE_DATANODE_INFO
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_DATANODE_INFO
init|=
literal|"CREATE TABLE datanodeInfo ("
operator|+
literal|"hostName TEXT NOT NULL, "
operator|+
literal|"datanodeUUId TEXT PRIMARY KEY NOT NULL,"
operator|+
literal|"ipAddress TEXT, "
operator|+
literal|"containerPort INTEGER NOT NULL);"
decl_stmt|;
DECL|field|INSERT_CONTAINER_INFO
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_CONTAINER_INFO
init|=
literal|"INSERT INTO containerInfo (containerID, leaderUUID) "
operator|+
literal|"VALUES (\"%d\", \"%s\")"
decl_stmt|;
DECL|field|INSERT_DATANODE_INFO
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_DATANODE_INFO
init|=
literal|"INSERT INTO datanodeInfo (hostname, datanodeUUid, ipAddress, "
operator|+
literal|"containerPort) "
operator|+
literal|"VALUES (\"%s\", \"%s\", \"%s\", \"%d\")"
decl_stmt|;
DECL|field|INSERT_CONTAINER_MEMBERS
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_CONTAINER_MEMBERS
init|=
literal|"INSERT INTO containerMembers (containerName, datanodeUUID) "
operator|+
literal|"VALUES (\"%s\", \"%s\")"
decl_stmt|;
comment|// for nodepool.db
DECL|field|CREATE_NODE_POOL
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_NODE_POOL
init|=
literal|"CREATE TABLE nodePool ("
operator|+
literal|"datanodeUUID TEXT NOT NULL,"
operator|+
literal|"poolName TEXT NOT NULL,"
operator|+
literal|"PRIMARY KEY(datanodeUUID, poolName))"
decl_stmt|;
DECL|field|INSERT_NODE_POOL
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_NODE_POOL
init|=
literal|"INSERT INTO nodePool (datanodeUUID, poolName) "
operator|+
literal|"VALUES (\"%s\", \"%s\")"
decl_stmt|;
comment|// and reuse CREATE_DATANODE_INFO and INSERT_DATANODE_INFO
comment|// for openContainer.db
DECL|field|CREATE_OPEN_CONTAINER
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_OPEN_CONTAINER
init|=
literal|"CREATE TABLE openContainer ("
operator|+
literal|"containerName TEXT PRIMARY KEY NOT NULL, "
operator|+
literal|"containerUsed INTEGER NOT NULL)"
decl_stmt|;
DECL|field|INSERT_OPEN_CONTAINER
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_OPEN_CONTAINER
init|=
literal|"INSERT INTO openContainer (containerName, containerUsed) "
operator|+
literal|"VALUES (\"%s\", \"%s\")"
decl_stmt|;
comment|// for ksm.db
DECL|field|CREATE_VOLUME_LIST
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_VOLUME_LIST
init|=
literal|"CREATE TABLE volumeList ("
operator|+
literal|"userName TEXT NOT NULL,"
operator|+
literal|"volumeName TEXT NOT NULL,"
operator|+
literal|"PRIMARY KEY (userName, volumeName))"
decl_stmt|;
DECL|field|INSERT_VOLUME_LIST
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_VOLUME_LIST
init|=
literal|"INSERT INTO volumeList (userName, volumeName) "
operator|+
literal|"VALUES (\"%s\", \"%s\")"
decl_stmt|;
DECL|field|CREATE_VOLUME_INFO
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_VOLUME_INFO
init|=
literal|"CREATE TABLE volumeInfo ("
operator|+
literal|"adminName TEXT NOT NULL,"
operator|+
literal|"ownerName TEXT NOT NULL,"
operator|+
literal|"volumeName TEXT NOT NULL,"
operator|+
literal|"PRIMARY KEY (adminName, ownerName, volumeName))"
decl_stmt|;
DECL|field|INSERT_VOLUME_INFO
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_VOLUME_INFO
init|=
literal|"INSERT INTO volumeInfo (adminName, ownerName, volumeName) "
operator|+
literal|"VALUES (\"%s\", \"%s\", \"%s\")"
decl_stmt|;
DECL|field|CREATE_ACL_INFO
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_ACL_INFO
init|=
literal|"CREATE TABLE aclInfo ("
operator|+
literal|"adminName TEXT NOT NULL,"
operator|+
literal|"ownerName TEXT NOT NULL,"
operator|+
literal|"volumeName TEXT NOT NULL,"
operator|+
literal|"type TEXT NOT NULL,"
operator|+
literal|"userName TEXT NOT NULL,"
operator|+
literal|"rights TEXT NOT NULL,"
operator|+
literal|"FOREIGN KEY (adminName, ownerName, volumeName, userName, type)"
operator|+
literal|"REFERENCES "
operator|+
literal|"volumeInfo(adminName, ownerName, volumeName, userName, type)"
operator|+
literal|"PRIMARY KEY (adminName, ownerName, volumeName, userName, type))"
decl_stmt|;
DECL|field|INSERT_ACL_INFO
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_ACL_INFO
init|=
literal|"INSERT INTO aclInfo (adminName, ownerName, volumeName, type, "
operator|+
literal|"userName, rights) "
operator|+
literal|"VALUES (\"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\")"
decl_stmt|;
DECL|field|CREATE_BUCKET_INFO
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_BUCKET_INFO
init|=
literal|"CREATE TABLE bucketInfo ("
operator|+
literal|"volumeName TEXT NOT NULL,"
operator|+
literal|"bucketName TEXT NOT NULL,"
operator|+
literal|"versionEnabled BOOLEAN NOT NULL,"
operator|+
literal|"storageType TEXT,"
operator|+
literal|"PRIMARY KEY (volumeName, bucketName))"
decl_stmt|;
DECL|field|INSERT_BUCKET_INFO
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_BUCKET_INFO
init|=
literal|"INSERT INTO bucketInfo(volumeName, bucketName, "
operator|+
literal|"versionEnabled, storageType)"
operator|+
literal|"VALUES (\"%s\", \"%s\", \"%s\", \"%s\")"
decl_stmt|;
DECL|field|CREATE_KEY_INFO
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_KEY_INFO
init|=
literal|"CREATE TABLE keyInfo ("
operator|+
literal|"volumeName TEXT NOT NULL,"
operator|+
literal|"bucketName TEXT NOT NULL,"
operator|+
literal|"keyName TEXT NOT NULL,"
operator|+
literal|"dataSize INTEGER,"
operator|+
literal|"blockKey TEXT NOT NULL,"
operator|+
literal|"containerName TEXT NOT NULL,"
operator|+
literal|"PRIMARY KEY (volumeName, bucketName, keyName))"
decl_stmt|;
DECL|field|INSERT_KEY_INFO
specifier|private
specifier|static
specifier|final
name|String
name|INSERT_KEY_INFO
init|=
literal|"INSERT INTO keyInfo (volumeName, bucketName, keyName, dataSize, "
operator|+
literal|"blockKey, containerName)"
operator|+
literal|"VALUES (\"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\")"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SQLCLI
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SQLCLI (OzoneConfiguration conf)
specifier|public
name|SQLCLI
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|getOptions
argument_list|()
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|new
name|BasicParser
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
DECL|method|getOptions ()
specifier|private
name|Options
name|getOptions
parameter_list|()
block|{
name|Options
name|allOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|Option
name|helpOpt
init|=
name|OptionBuilder
operator|.
name|hasArg
argument_list|(
literal|false
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"display help message"
argument_list|)
operator|.
name|create
argument_list|(
literal|"h"
argument_list|)
decl_stmt|;
name|allOptions
operator|.
name|addOption
argument_list|(
name|helpOpt
argument_list|)
expr_stmt|;
name|Option
name|dbPathOption
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"DB path"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"dbPath"
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|1
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"specify DB path"
argument_list|)
operator|.
name|create
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|allOptions
operator|.
name|addOption
argument_list|(
name|dbPathOption
argument_list|)
expr_stmt|;
name|Option
name|outPathOption
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"output path"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"outPath"
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|1
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"specify output DB file path"
argument_list|)
operator|.
name|create
argument_list|(
literal|"o"
argument_list|)
decl_stmt|;
name|allOptions
operator|.
name|addOption
argument_list|(
name|outPathOption
argument_list|)
expr_stmt|;
return|return
name|allOptions
return|;
block|}
DECL|method|displayHelp ()
specifier|public
name|void
name|displayHelp
parameter_list|()
block|{
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|Options
name|allOpts
init|=
name|getOptions
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
literal|"hdfs oz_debug -p<DB path>"
operator|+
literal|" -o<Output DB file path>"
argument_list|,
name|allOpts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|CommandLine
name|commandLine
init|=
name|parseArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|displayHelp
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"p"
argument_list|)
operator|||
operator|!
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"o"
argument_list|)
condition|)
block|{
name|displayHelp
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|String
name|value
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DB path {}"
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// the value is supposed to be an absolute path to a container file
name|Path
name|dbPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|dbPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"DB path not exist:{}"
argument_list|,
name|dbPath
argument_list|)
expr_stmt|;
block|}
name|Path
name|parentPath
init|=
name|dbPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|dbName
init|=
name|dbPath
operator|.
name|getFileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentPath
operator|==
literal|null
operator|||
name|dbName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error processing db path {}"
argument_list|,
name|dbPath
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|value
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"o"
argument_list|)
expr_stmt|;
name|Path
name|outPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|outPath
operator|==
literal|null
operator|||
name|outPath
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error processing output path {}"
argument_list|,
name|outPath
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|outPath
operator|.
name|toFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The db output path should be a file instead of a directory"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|Path
name|outParentPath
init|=
name|outPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|outParentPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|outParentPath
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|outParentPath
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Parent path [{}] db name [{}]"
argument_list|,
name|parentPath
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbName
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|CONTAINER_DB_SUFFIX
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting container DB"
argument_list|)
expr_stmt|;
name|convertContainerDB
argument_list|(
name|dbPath
argument_list|,
name|outPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dbName
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|NODEPOOL_DB
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting node pool DB"
argument_list|)
expr_stmt|;
name|convertNodePoolDB
argument_list|(
name|dbPath
argument_list|,
name|outPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dbName
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|OPEN_CONTAINERS_DB
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting open container DB"
argument_list|)
expr_stmt|;
name|convertOpenContainerDB
argument_list|(
name|dbPath
argument_list|,
name|outPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dbName
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|KSM_DB_NAME
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Converting ksm DB"
argument_list|)
expr_stmt|;
name|convertKSMDB
argument_list|(
name|dbPath
argument_list|,
name|outPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unrecognized db name {}"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|connectDB (String dbPath)
specifier|private
name|Connection
name|connectDB
parameter_list|(
name|String
name|dbPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.sqlite.JDBC"
argument_list|)
expr_stmt|;
name|String
name|connectPath
init|=
name|String
operator|.
name|format
argument_list|(
literal|"jdbc:sqlite:%s"
argument_list|,
name|dbPath
argument_list|)
decl_stmt|;
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectPath
argument_list|)
return|;
block|}
DECL|method|executeSQL (Connection conn, String sql)
specifier|private
name|void
name|executeSQL
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
init|(
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Convert ksm.db to sqlite db file. With following schema.    * (* for primary key)    *    * 1. for key type USER, it contains a username and a list volumes    * volumeList    * --------------------------------    *   userName*     |  volumeName*    * --------------------------------    *    * 2. for key type VOLUME:    *    * volumeInfo    * ----------------------------------------------    * adminName | ownerName* | volumeName* | aclID    * ----------------------------------------------    *    * aclInfo    * ----------------------------------------------    * aclEntryID* | type* | userName* | rights    * ----------------------------------------------    *    * 3. for key type BUCKET    * bucketInfo    * --------------------------------------------------------    * volumeName* | bucketName* | versionEnabled | storageType    * --------------------------------------------------------    *    * TODO : the following table will be changed when key partition is added.    * Only has the minimum entries for test purpose now.    * 4. for key type KEY    * -----------------------------------------------    * volumeName* | bucketName* | keyName* | dataSize    * -----------------------------------------------    *    *    *    * @param dbPath    * @param outPath    * @throws Exception    */
DECL|method|convertKSMDB (Path dbPath, Path outPath)
specifier|private
name|void
name|convertKSMDB
parameter_list|(
name|Path
name|dbPath
parameter_list|,
name|Path
name|outPath
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create tables for sql ksm db."
argument_list|)
expr_stmt|;
name|File
name|dbFile
init|=
name|dbPath
operator|.
name|toFile
argument_list|()
decl_stmt|;
try|try
init|(
name|MetadataStore
name|dbStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbFile
argument_list|)
operator|.
name|build
argument_list|()
init|;
name|Connection
name|conn
operator|=
name|connectDB
argument_list|(
name|outPath
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_VOLUME_LIST
argument_list|)
expr_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_VOLUME_INFO
argument_list|)
expr_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_ACL_INFO
argument_list|)
expr_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_BUCKET_INFO
argument_list|)
expr_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_KEY_INFO
argument_list|)
expr_stmt|;
name|dbStore
operator|.
name|iterate
argument_list|(
literal|null
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|String
name|keyString
init|=
name|DFSUtilClient
operator|.
name|bytes2String
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|KeyType
name|type
init|=
name|getKeyType
argument_list|(
name|keyString
argument_list|)
decl_stmt|;
try|try
block|{
name|insertKSMDB
argument_list|(
name|conn
argument_list|,
name|type
argument_list|,
name|keyString
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception inserting key {} type {}"
argument_list|,
name|keyString
argument_list|,
name|type
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|insertKSMDB (Connection conn, KeyType type, String keyName, byte[] value)
specifier|private
name|void
name|insertKSMDB
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|KeyType
name|type
parameter_list|,
name|String
name|keyName
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|USER
case|:
name|VolumeList
name|volumeList
init|=
name|VolumeList
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|volumeName
range|:
name|volumeList
operator|.
name|getVolumeNamesList
argument_list|()
control|)
block|{
name|String
name|insertVolumeList
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_VOLUME_LIST
argument_list|,
name|keyName
argument_list|,
name|volumeName
argument_list|)
decl_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertVolumeList
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VOLUME
case|:
name|VolumeInfo
name|volumeInfo
init|=
name|VolumeInfo
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
name|volumeInfo
operator|.
name|getAdminName
argument_list|()
decl_stmt|;
name|String
name|ownerName
init|=
name|volumeInfo
operator|.
name|getOwnerName
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|volumeInfo
operator|.
name|getVolume
argument_list|()
decl_stmt|;
name|String
name|insertVolumeInfo
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_VOLUME_INFO
argument_list|,
name|adminName
argument_list|,
name|ownerName
argument_list|,
name|volumeName
argument_list|)
decl_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertVolumeInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|OzoneAclInfo
name|aclInfo
range|:
name|volumeInfo
operator|.
name|getVolumeAclsList
argument_list|()
control|)
block|{
name|String
name|insertAclInfo
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_ACL_INFO
argument_list|,
name|adminName
argument_list|,
name|ownerName
argument_list|,
name|volumeName
argument_list|,
name|aclInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|aclInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|aclInfo
operator|.
name|getRights
argument_list|()
argument_list|)
decl_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertAclInfo
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BUCKET
case|:
name|BucketInfo
name|bucketInfo
init|=
name|BucketInfo
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|String
name|insertBucketInfo
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_BUCKET_INFO
argument_list|,
name|bucketInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|bucketInfo
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|bucketInfo
operator|.
name|getIsVersionEnabled
argument_list|()
argument_list|,
name|bucketInfo
operator|.
name|getStorageType
argument_list|()
argument_list|)
decl_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertBucketInfo
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEY
case|:
name|KeyInfo
name|keyInfo
init|=
name|KeyInfo
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
decl_stmt|;
comment|// TODO : the two fields container name and block id are no longer used,
comment|// need to revisit this later.
name|String
name|insertKeyInfo
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_KEY_INFO
argument_list|,
name|keyInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|keyInfo
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|keyInfo
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|keyInfo
operator|.
name|getDataSize
argument_list|()
argument_list|,
literal|"EMPTY"
argument_list|,
literal|"EMPTY"
argument_list|)
decl_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertKeyInfo
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown key from ksm.db"
argument_list|)
throw|;
block|}
block|}
DECL|method|getKeyType (String key)
specifier|private
name|KeyType
name|getKeyType
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|KSM_USER_PREFIX
argument_list|)
condition|)
block|{
return|return
name|KeyType
operator|.
name|USER
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|KSM_VOLUME_PREFIX
argument_list|)
condition|)
block|{
return|return
name|key
operator|.
name|replaceFirst
argument_list|(
name|KSM_VOLUME_PREFIX
argument_list|,
literal|""
argument_list|)
operator|.
name|contains
argument_list|(
name|KSM_BUCKET_PREFIX
argument_list|)
condition|?
name|KeyType
operator|.
name|BUCKET
else|:
name|KeyType
operator|.
name|VOLUME
return|;
block|}
else|else
block|{
return|return
name|KeyType
operator|.
name|KEY
return|;
block|}
block|}
DECL|enum|KeyType
specifier|private
enum|enum
name|KeyType
block|{
DECL|enumConstant|USER
name|USER
block|,
DECL|enumConstant|VOLUME
name|VOLUME
block|,
DECL|enumConstant|BUCKET
name|BUCKET
block|,
DECL|enumConstant|KEY
name|KEY
block|,
DECL|enumConstant|UNKNOWN
name|UNKNOWN
block|}
comment|/**    * Convert container.db to sqlite. The schema of sql db:    * three tables, containerId, containerMachines, datanodeInfo    * (* for primary key)    *    * containerInfo:    * ----------------------------------------------    * container name* | container lead datanode uuid    * ----------------------------------------------    *    * containerMembers:    * --------------------------------    * container name* |  datanodeUUid*    * --------------------------------    *    * datanodeInfo:    * ---------------------------------------------------------    * hostname | datanodeUUid* | xferPort | ipcPort    * ---------------------------------------------------------    *    * --------------------------------    * | containerPort    * --------------------------------    *    * @param dbPath path to container db.    * @param outPath path to output sqlite    * @throws IOException throws exception.    */
DECL|method|convertContainerDB (Path dbPath, Path outPath)
specifier|private
name|void
name|convertContainerDB
parameter_list|(
name|Path
name|dbPath
parameter_list|,
name|Path
name|outPath
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create tables for sql container db."
argument_list|)
expr_stmt|;
name|File
name|dbFile
init|=
name|dbPath
operator|.
name|toFile
argument_list|()
decl_stmt|;
try|try
init|(
name|MetadataStore
name|dbStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbFile
argument_list|)
operator|.
name|build
argument_list|()
init|;
name|Connection
name|conn
operator|=
name|connectDB
argument_list|(
name|outPath
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_CONTAINER_INFO
argument_list|)
expr_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_CONTAINER_MEMBERS
argument_list|)
expr_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_DATANODE_INFO
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|uuidChecked
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|dbStore
operator|.
name|iterate
argument_list|(
literal|null
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|long
name|containerID
init|=
name|Longs
operator|.
name|fromByteArray
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ContainerInfo
name|containerInfo
init|=
literal|null
decl_stmt|;
name|containerInfo
operator|=
name|ContainerInfo
operator|.
name|fromProtobuf
argument_list|(
name|HddsProtos
operator|.
name|SCMContainerInfo
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
try|try
block|{
comment|//TODO: include container state to sqllite schema
name|insertContainerDB
argument_list|(
name|conn
argument_list|,
name|containerID
argument_list|,
name|containerInfo
operator|.
name|getPipeline
argument_list|()
operator|.
name|getProtobufMessage
argument_list|()
argument_list|,
name|uuidChecked
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Insert into the sqlite DB of container.db.    * @param conn the connection to the sqlite DB.    * @param containerID the id of the container.    * @param pipeline the actual container pipeline object.    * @param uuidChecked the uuid that has been already inserted.    * @throws SQLException throws exception.    */
DECL|method|insertContainerDB (Connection conn, long containerID, Pipeline pipeline, Set<String> uuidChecked)
specifier|private
name|void
name|insertContainerDB
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|long
name|containerID
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|uuidChecked
parameter_list|)
throws|throws
name|SQLException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Insert to sql container db, for container {}"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|String
name|insertContainerInfo
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_CONTAINER_INFO
argument_list|,
name|containerID
argument_list|,
name|pipeline
operator|.
name|getLeaderID
argument_list|()
argument_list|)
decl_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertContainerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|HddsProtos
operator|.
name|DatanodeDetailsProto
name|dd
range|:
name|pipeline
operator|.
name|getMembersList
argument_list|()
control|)
block|{
name|String
name|uuid
init|=
name|dd
operator|.
name|getUuid
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|uuidChecked
operator|.
name|contains
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
comment|// we may also not use this checked set, but catch exception instead
comment|// but this seems a bit cleaner.
name|String
name|ipAddr
init|=
name|dd
operator|.
name|getIpAddress
argument_list|()
decl_stmt|;
name|String
name|hostName
init|=
name|dd
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|int
name|containerPort
init|=
name|DatanodeDetails
operator|.
name|getFromProtoBuf
argument_list|(
name|dd
argument_list|)
operator|.
name|getPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|STANDALONE
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|insertMachineInfo
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_DATANODE_INFO
argument_list|,
name|hostName
argument_list|,
name|uuid
argument_list|,
name|ipAddr
argument_list|,
name|containerPort
argument_list|)
decl_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertMachineInfo
argument_list|)
expr_stmt|;
name|uuidChecked
operator|.
name|add
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
name|String
name|insertContainerMembers
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_CONTAINER_MEMBERS
argument_list|,
name|containerID
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertContainerMembers
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Insertion completed."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts nodePool.db to sqlite. The schema of sql db:    * two tables, nodePool and datanodeInfo (the same datanode Info as for    * container.db).    *    * nodePool    * ---------------------------------------------------------    * datanodeUUID* | poolName*    * ---------------------------------------------------------    *    * datanodeInfo:    * ---------------------------------------------------------    * hostname | datanodeUUid* | xferPort | ipcPort    * ---------------------------------------------------------    *    * --------------------------------    * |containerPort    * --------------------------------    *    * @param dbPath path to container db.    * @param outPath path to output sqlite    * @throws IOException throws exception.    */
DECL|method|convertNodePoolDB (Path dbPath, Path outPath)
specifier|private
name|void
name|convertNodePoolDB
parameter_list|(
name|Path
name|dbPath
parameter_list|,
name|Path
name|outPath
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create table for sql node pool db."
argument_list|)
expr_stmt|;
name|File
name|dbFile
init|=
name|dbPath
operator|.
name|toFile
argument_list|()
decl_stmt|;
try|try
init|(
name|MetadataStore
name|dbStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbFile
argument_list|)
operator|.
name|build
argument_list|()
init|;
name|Connection
name|conn
operator|=
name|connectDB
argument_list|(
name|outPath
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_NODE_POOL
argument_list|)
expr_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_DATANODE_INFO
argument_list|)
expr_stmt|;
name|dbStore
operator|.
name|iterate
argument_list|(
literal|null
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|DatanodeDetails
name|nodeId
init|=
name|DatanodeDetails
operator|.
name|getFromProtoBuf
argument_list|(
name|HddsProtos
operator|.
name|DatanodeDetailsProto
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|blockPool
init|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
block|{
name|insertNodePoolDB
argument_list|(
name|conn
argument_list|,
name|blockPool
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|insertNodePoolDB (Connection conn, String blockPool, DatanodeDetails datanodeDetails)
specifier|private
name|void
name|insertNodePoolDB
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|blockPool
parameter_list|,
name|DatanodeDetails
name|datanodeDetails
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|insertNodePool
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_NODE_POOL
argument_list|,
name|datanodeDetails
operator|.
name|getUuidString
argument_list|()
argument_list|,
name|blockPool
argument_list|)
decl_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertNodePool
argument_list|)
expr_stmt|;
name|String
name|insertDatanodeDetails
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_DATANODE_INFO
argument_list|,
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getUuidString
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getIpAddress
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|STANDALONE
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertDatanodeDetails
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert openContainer.db to sqlite db file. This is rather simple db,    * the schema has only one table:    *    * openContainer    * -------------------------------    * containerName* | containerUsed    * -------------------------------    *    * @param dbPath path to container db.    * @param outPath path to output sqlite    * @throws IOException throws exception.    */
DECL|method|convertOpenContainerDB (Path dbPath, Path outPath)
specifier|private
name|void
name|convertOpenContainerDB
parameter_list|(
name|Path
name|dbPath
parameter_list|,
name|Path
name|outPath
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Create table for open container db."
argument_list|)
expr_stmt|;
name|File
name|dbFile
init|=
name|dbPath
operator|.
name|toFile
argument_list|()
decl_stmt|;
try|try
init|(
name|MetadataStore
name|dbStore
init|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|dbFile
argument_list|)
operator|.
name|build
argument_list|()
init|;
name|Connection
name|conn
operator|=
name|connectDB
argument_list|(
name|outPath
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|CREATE_OPEN_CONTAINER
argument_list|)
expr_stmt|;
name|dbStore
operator|.
name|iterate
argument_list|(
literal|null
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|String
name|containerName
init|=
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Long
name|containerUsed
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|insertOpenContainer
init|=
name|String
operator|.
name|format
argument_list|(
name|INSERT_OPEN_CONTAINER
argument_list|,
name|containerName
argument_list|,
name|containerUsed
argument_list|)
decl_stmt|;
try|try
block|{
name|executeSQL
argument_list|(
name|conn
argument_list|,
name|insertOpenContainer
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseArgs (String[] argv)
specifier|private
name|CommandLine
name|parseArgs
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|argv
argument_list|)
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Tool
name|shell
init|=
operator|new
name|SQLCLI
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|res
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Command execution failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|res
operator|=
literal|1
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

