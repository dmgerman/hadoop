begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.freon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|freon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Run an arbitrary code and print progress on the provided stream. The  * progressbar stops when: - the provided currentvalue is less the the maxvalue  * - exception thrown  */
end_comment

begin_class
DECL|class|ProgressBar
specifier|public
class|class
name|ProgressBar
block|{
DECL|field|REFRESH_INTERVAL
specifier|private
specifier|static
specifier|final
name|long
name|REFRESH_INTERVAL
init|=
literal|1000L
decl_stmt|;
DECL|field|stream
specifier|private
name|PrintStream
name|stream
decl_stmt|;
DECL|field|currentValue
specifier|private
name|AtomicLong
name|currentValue
decl_stmt|;
DECL|field|maxValue
specifier|private
name|long
name|maxValue
decl_stmt|;
DECL|field|progressBar
specifier|private
name|Thread
name|progressBar
decl_stmt|;
DECL|field|exception
specifier|private
specifier|volatile
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
comment|/**    * @param stream Used to display the progress    * @param maxValue Maximum value of the progress    */
DECL|method|ProgressBar (PrintStream stream, long maxValue)
name|ProgressBar
parameter_list|(
name|PrintStream
name|stream
parameter_list|,
name|long
name|maxValue
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|stream
expr_stmt|;
name|this
operator|.
name|maxValue
operator|=
name|maxValue
expr_stmt|;
name|this
operator|.
name|currentValue
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|progressBar
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|ProgressBarThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start a task with a progessbar without any in/out parameters Runnable used    * just a task wrapper.    *    * @param task Runnable    */
DECL|method|start (Runnable task)
specifier|public
name|void
name|start
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
name|startTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
try|try
block|{
name|progressBar
operator|.
name|start
argument_list|()
expr_stmt|;
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|progressBar
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Start a task with only out parameters.    *    * @param task Supplier that represents the task    * @param<T> Generic return type    * @return Whatever the supllier produces    */
DECL|method|start (Supplier<T> task)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|start
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
block|{
name|startTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|T
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|progressBar
operator|.
name|start
argument_list|()
expr_stmt|;
name|result
operator|=
name|task
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|progressBar
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * Start a task with in/out parameters.    *    * @param input Input of the function    * @param task A Function that does the task    * @param<T> type of the input    * @param<R> return type    * @return Whatever the Function returns    */
DECL|method|start (T input, Function<T, R> task)
specifier|public
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
name|R
name|start
parameter_list|(
name|T
name|input
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|task
parameter_list|)
block|{
name|startTime
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|R
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|progressBar
operator|.
name|start
argument_list|()
expr_stmt|;
name|result
operator|=
name|task
operator|.
name|apply
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|progressBar
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * Increment the progress with one step.    */
DECL|method|incrementProgress ()
specifier|public
name|void
name|incrementProgress
parameter_list|()
block|{
name|currentValue
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|class|ProgressBarThread
specifier|private
class|class
name|ProgressBarThread
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|stream
operator|.
name|println
argument_list|()
expr_stmt|;
name|long
name|value
decl_stmt|;
while|while
condition|(
operator|(
name|value
operator|=
name|currentValue
operator|.
name|get
argument_list|()
operator|)
operator|<
name|maxValue
condition|)
block|{
name|print
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|REFRESH_INTERVAL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exception
condition|)
block|{
name|stream
operator|.
name|println
argument_list|()
expr_stmt|;
name|stream
operator|.
name|println
argument_list|(
literal|"Incomplete termination, "
operator|+
literal|"check log for "
operator|+
literal|"exception."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|print
argument_list|(
name|maxValue
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|stream
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Given current value prints the progress bar.      *      * @param value current progress position      */
DECL|method|print (long value)
specifier|private
name|void
name|print
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|stream
operator|.
name|print
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
name|double
name|percent
init|=
literal|100.0
operator|*
name|value
operator|/
name|maxValue
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%.2f"
argument_list|,
name|percent
argument_list|)
operator|+
literal|"% |"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|percent
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'â'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
operator|-
name|percent
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"|  "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|value
operator|+
literal|"/"
operator|+
name|maxValue
argument_list|)
expr_stmt|;
name|long
name|timeInSec
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|String
name|timeToPrint
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d:%02d:%02d"
argument_list|,
name|timeInSec
operator|/
literal|3600
argument_list|,
operator|(
name|timeInSec
operator|%
literal|3600
operator|)
operator|/
literal|60
argument_list|,
name|timeInSec
operator|%
literal|60
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" Time: "
operator|+
name|timeToPrint
argument_list|)
expr_stmt|;
name|stream
operator|.
name|print
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

