begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.fsck
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|fsck
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfoGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|TableIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
import|;
end_import

begin_comment
comment|/**  * Generates Container Id to Blocks and BlockDetails mapping.  */
end_comment

begin_class
DECL|class|ContainerMapper
specifier|public
class|class
name|ContainerMapper
block|{
DECL|method|getMetaTable (OzoneConfiguration configuration)
specifier|private
specifier|static
name|Table
name|getMetaTable
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|OmMetadataManagerImpl
name|metadataManager
init|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
return|return
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Path cannot be null"
argument_list|)
throw|;
block|}
name|OzoneConfiguration
name|configuration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OZONE_OM_DB_DIRS
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|ContainerMapper
name|containerMapper
init|=
operator|new
name|ContainerMapper
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|Long
argument_list|,
name|BlockIdDetails
argument_list|>
argument_list|>
argument_list|>
name|dataMap
init|=
name|containerMapper
operator|.
name|parseOmDB
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|dataMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates Container Id to Blocks and BlockDetails mapping.    * @param configuration @{@link OzoneConfiguration}    * @return Map<Long, List<Map<Long, @BlockDetails>>>    *   Map of ContainerId -> (Block, Block info)    * @throws IOException    */
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|Long
argument_list|,
name|BlockIdDetails
argument_list|>
argument_list|>
argument_list|>
DECL|method|parseOmDB (OzoneConfiguration configuration)
name|parseOmDB
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|configuration
operator|.
name|get
argument_list|(
name|OZONE_OM_DB_DIRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|OZONE_OM_DB_DIRS
operator|+
literal|"should be set "
argument_list|)
throw|;
block|}
else|else
block|{
name|Table
name|keyTable
init|=
name|getMetaTable
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|Long
argument_list|,
name|BlockIdDetails
argument_list|>
argument_list|>
argument_list|>
name|dataMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyTable
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|TableIterator
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Table
operator|.
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
argument_list|>
name|keyValueTableIterator
init|=
name|keyTable
operator|.
name|iterator
argument_list|()
init|)
block|{
while|while
condition|(
name|keyValueTableIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Table
operator|.
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
name|keyValue
init|=
name|keyValueTableIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|OmKeyInfo
name|omKeyInfo
init|=
name|keyValue
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|omKeyInfo
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|OmKeyInfo
name|keyInfo
init|=
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|KeyInfo
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|OmKeyLocationInfoGroup
name|keyLocationInfoGroup
range|:
name|keyInfo
operator|.
name|getKeyLocationVersions
argument_list|()
control|)
block|{
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|keyLocationInfo
init|=
name|keyLocationInfoGroup
operator|.
name|getLocationList
argument_list|()
decl_stmt|;
for|for
control|(
name|OmKeyLocationInfo
name|keyLocation
range|:
name|keyLocationInfo
control|)
block|{
name|BlockIdDetails
name|blockIdDetails
init|=
operator|new
name|BlockIdDetails
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|BlockIdDetails
argument_list|>
name|innerMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|containerID
init|=
name|keyLocation
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|long
name|blockID
init|=
name|keyLocation
operator|.
name|getBlockID
argument_list|()
operator|.
name|getLocalID
argument_list|()
decl_stmt|;
name|blockIdDetails
operator|.
name|setBucketName
argument_list|(
name|keyInfo
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|blockIdDetails
operator|.
name|setBlockVol
argument_list|(
name|keyInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|blockIdDetails
operator|.
name|setKeyName
argument_list|(
name|keyInfo
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|Long
argument_list|,
name|BlockIdDetails
argument_list|>
argument_list|>
name|innerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|innerMap
operator|.
name|put
argument_list|(
name|blockID
argument_list|,
name|blockIdDetails
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataMap
operator|.
name|containsKey
argument_list|(
name|containerID
argument_list|)
condition|)
block|{
name|innerList
operator|=
name|dataMap
operator|.
name|get
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
block|}
name|innerList
operator|.
name|add
argument_list|(
name|innerMap
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|put
argument_list|(
name|containerID
argument_list|,
name|innerList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|dataMap
return|;
block|}
block|}
block|}
end_class

end_unit

