begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.freon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|freon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocolPB
operator|.
name|OzoneManagerProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocolPB
operator|.
name|OzoneManagerProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|ConsoleReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|ClientId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|ParentCommand
import|;
end_import

begin_comment
comment|/**  * Base class for simplified performance tests.  */
end_comment

begin_class
DECL|class|BaseFreonGenerator
specifier|public
class|class
name|BaseFreonGenerator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BaseFreonGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CHECK_INTERVAL_MILLIS
specifier|private
specifier|static
specifier|final
name|int
name|CHECK_INTERVAL_MILLIS
init|=
literal|1000
decl_stmt|;
DECL|field|DIGEST_ALGORITHM
specifier|private
specifier|static
specifier|final
name|String
name|DIGEST_ALGORITHM
init|=
literal|"MD5"
decl_stmt|;
DECL|field|ENV_VARIABLE_IN_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|ENV_VARIABLE_IN_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"__(.+?)__"
argument_list|)
decl_stmt|;
annotation|@
name|ParentCommand
DECL|field|freonCommand
specifier|private
name|Freon
name|freonCommand
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-n"
block|,
literal|"--number-of-tests"
block|}
argument_list|,
name|description
operator|=
literal|"Number of the generated objects."
argument_list|,
name|defaultValue
operator|=
literal|"1000"
argument_list|)
DECL|field|testNo
specifier|private
name|long
name|testNo
init|=
literal|1000
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-t"
block|,
literal|"--threads"
block|,
literal|"--thread"
block|}
argument_list|,
name|description
operator|=
literal|"Number of threads used to execute"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|threadNo
specifier|private
name|int
name|threadNo
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-f"
block|,
literal|"--fail-at-end"
block|}
argument_list|,
name|description
operator|=
literal|"If turned on, all the tasks will be executed even if "
operator|+
literal|"there are failures."
argument_list|)
DECL|field|failAtEnd
specifier|private
name|boolean
name|failAtEnd
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|names
operator|=
block|{
literal|"-p"
block|,
literal|"--prefix"
block|}
argument_list|,
name|description
operator|=
literal|"Unique identifier of the test execution. Usually used as"
operator|+
literal|" a prefix of the generated object names. If empty, a random name"
operator|+
literal|" will be generated"
argument_list|,
name|defaultValue
operator|=
literal|""
argument_list|)
DECL|field|prefix
specifier|private
name|String
name|prefix
init|=
literal|""
decl_stmt|;
DECL|field|metrics
specifier|private
name|MetricRegistry
name|metrics
init|=
operator|new
name|MetricRegistry
argument_list|()
decl_stmt|;
DECL|field|executor
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|successCounter
specifier|private
name|AtomicLong
name|successCounter
decl_stmt|;
DECL|field|failureCounter
specifier|private
name|AtomicLong
name|failureCounter
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|pathSchema
specifier|private
name|PathSchema
name|pathSchema
decl_stmt|;
comment|/**    * The main logic to execute a test generator.    *    * @param provider creates the new steps to execute.    */
DECL|method|runTests (TaskProvider provider)
specifier|public
name|void
name|runTests
parameter_list|(
name|TaskProvider
name|provider
parameter_list|)
block|{
name|executor
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadNo
argument_list|)
expr_stmt|;
name|ProgressBar
name|progressBar
init|=
operator|new
name|ProgressBar
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|testNo
argument_list|,
name|successCounter
operator|::
name|get
argument_list|)
decl_stmt|;
name|progressBar
operator|.
name|start
argument_list|()
expr_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|//schedule the execution of all the tasks.
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testNo
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|counter
init|=
name|i
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
comment|//in case of an other failed test, we shouldn't execute more tasks.
if|if
condition|(
operator|!
name|failAtEnd
operator|&&
name|failureCounter
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return;
block|}
name|provider
operator|.
name|executeNextTask
argument_list|(
name|counter
argument_list|)
expr_stmt|;
name|successCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failureCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error on executing task"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// wait until all tasks are executed
while|while
condition|(
name|successCounter
operator|.
name|get
argument_list|()
operator|+
name|failureCounter
operator|.
name|get
argument_list|()
operator|<
name|testNo
operator|&&
operator|(
name|failureCounter
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|||
name|failAtEnd
operator|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|CHECK_INTERVAL_MILLIS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//shutdown everything
if|if
condition|(
name|failureCounter
operator|.
name|get
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|failAtEnd
condition|)
block|{
name|progressBar
operator|.
name|terminate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|progressBar
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|awaitTermination
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|failureCounter
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"One ore more freon test is failed."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Initialize internal counters, and variables. Call it before runTests.    */
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|successCounter
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|failureCounter
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|prefix
operator|=
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//replace environment variables to support multi-node execution
name|prefix
operator|=
name|resolvePrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing test with prefix {}"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|pathSchema
operator|=
operator|new
name|PathSchema
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
name|this
operator|::
name|printReport
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Resolve environment variables in the prefixes.    */
DECL|method|resolvePrefix (String inputPrefix)
specifier|public
name|String
name|resolvePrefix
parameter_list|(
name|String
name|inputPrefix
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|ENV_VARIABLE_IN_PATTERN
operator|.
name|matcher
argument_list|(
name|inputPrefix
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|environment
init|=
name|System
operator|.
name|getenv
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|m
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
name|environment
operator|!=
literal|null
condition|?
name|environment
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|appendTail
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Print out reports from the executed tests.    */
DECL|method|printReport ()
specifier|public
name|void
name|printReport
parameter_list|()
block|{
name|ConsoleReporter
name|reporter
init|=
name|ConsoleReporter
operator|.
name|forRegistry
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|reporter
operator|.
name|report
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total execution time (sec): "
operator|+
name|Math
operator|.
name|round
argument_list|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failures: "
operator|+
name|failureCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successful executions: "
operator|+
name|successCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the OM RPC client to use it for testing.    */
DECL|method|createOmClient ( OzoneConfiguration conf)
specifier|public
name|OzoneManagerProtocolClientSideTranslatorPB
name|createOmClient
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|long
name|omVersion
init|=
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|omAddress
init|=
name|OmUtils
operator|.
name|getOmAddressForClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|clientId
init|=
name|ClientId
operator|.
name|randomId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|OzoneManagerProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|omVersion
argument_list|,
name|omAddress
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|Client
operator|.
name|getRpcTimeout
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|,
name|clientId
argument_list|)
return|;
block|}
comment|/**    * Generate a key/file name based on the prefix and counter.    */
DECL|method|generateObjectName (long counter)
specifier|public
name|String
name|generateObjectName
parameter_list|(
name|long
name|counter
parameter_list|)
block|{
return|return
name|pathSchema
operator|.
name|getPath
argument_list|(
name|counter
argument_list|)
return|;
block|}
comment|/**    * Create missing target volume/bucket.    */
DECL|method|ensureVolumeAndBucketExist (OzoneConfiguration ozoneConfiguration, String volumeName, String bucketName)
specifier|public
name|void
name|ensureVolumeAndBucketExist
parameter_list|(
name|OzoneConfiguration
name|ozoneConfiguration
parameter_list|,
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|OzoneClient
name|rpcClient
init|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|ozoneConfiguration
argument_list|)
init|)
block|{
name|OzoneVolume
name|volume
init|=
literal|null
decl_stmt|;
try|try
block|{
name|volume
operator|=
name|rpcClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|==
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
condition|)
block|{
name|rpcClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|volume
operator|=
name|rpcClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
try|try
block|{
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|==
name|ResultCodes
operator|.
name|BUCKET_NOT_FOUND
condition|)
block|{
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
block|}
block|}
comment|/**    * Create missing target volume.    */
DECL|method|ensureVolumeExists ( OzoneConfiguration ozoneConfiguration, String volumeName)
specifier|public
name|void
name|ensureVolumeExists
parameter_list|(
name|OzoneConfiguration
name|ozoneConfiguration
parameter_list|,
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|OzoneClient
name|rpcClient
init|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|ozoneConfiguration
argument_list|)
init|)
block|{
try|try
block|{
name|rpcClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|==
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
condition|)
block|{
name|rpcClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Calculate checksum of a byte array.    */
DECL|method|getDigest (byte[] content)
specifier|public
name|byte
index|[]
name|getDigest
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|DigestUtils
name|dig
init|=
operator|new
name|DigestUtils
argument_list|(
name|DIGEST_ALGORITHM
argument_list|)
decl_stmt|;
name|dig
operator|.
name|getMessageDigest
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|dig
operator|.
name|digest
argument_list|(
name|content
argument_list|)
return|;
block|}
comment|/**    * Calculate checksum of an Input stream.    */
DECL|method|getDigest (InputStream stream)
specifier|public
name|byte
index|[]
name|getDigest
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|DigestUtils
name|dig
init|=
operator|new
name|DigestUtils
argument_list|(
name|DIGEST_ALGORITHM
argument_list|)
decl_stmt|;
name|dig
operator|.
name|getMessageDigest
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|dig
operator|.
name|digest
argument_list|(
name|stream
argument_list|)
return|;
block|}
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
DECL|method|getMetrics ()
specifier|public
name|MetricRegistry
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
DECL|method|createOzoneConfiguration ()
specifier|public
name|OzoneConfiguration
name|createOzoneConfiguration
parameter_list|()
block|{
return|return
name|freonCommand
operator|.
name|createOzoneConfiguration
argument_list|()
return|;
block|}
comment|/**    * Simple contract to execute a new step during a freon test.    */
annotation|@
name|FunctionalInterface
DECL|interface|TaskProvider
specifier|public
interface|interface
name|TaskProvider
block|{
DECL|method|executeNextTask (long step)
name|void
name|executeNextTask
parameter_list|(
name|long
name|step
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

