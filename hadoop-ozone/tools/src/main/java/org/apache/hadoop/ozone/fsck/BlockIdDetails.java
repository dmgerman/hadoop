begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.fsck
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|fsck
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Getter and Setter for BlockDetails.  */
end_comment

begin_class
DECL|class|BlockIdDetails
specifier|public
class|class
name|BlockIdDetails
block|{
DECL|field|bucketName
specifier|private
name|String
name|bucketName
decl_stmt|;
DECL|field|blockVol
specifier|private
name|String
name|blockVol
decl_stmt|;
DECL|field|keyName
specifier|private
name|String
name|keyName
decl_stmt|;
DECL|method|getBucketName ()
specifier|public
name|String
name|getBucketName
parameter_list|()
block|{
return|return
name|bucketName
return|;
block|}
DECL|method|setBucketName (String bucketName)
specifier|public
name|void
name|setBucketName
parameter_list|(
name|String
name|bucketName
parameter_list|)
block|{
name|this
operator|.
name|bucketName
operator|=
name|bucketName
expr_stmt|;
block|}
DECL|method|getBlockVol ()
specifier|public
name|String
name|getBlockVol
parameter_list|()
block|{
return|return
name|blockVol
return|;
block|}
DECL|method|setBlockVol (String blockVol)
specifier|public
name|void
name|setBlockVol
parameter_list|(
name|String
name|blockVol
parameter_list|)
block|{
name|this
operator|.
name|blockVol
operator|=
name|blockVol
expr_stmt|;
block|}
DECL|method|getKeyName ()
specifier|public
name|String
name|getKeyName
parameter_list|()
block|{
return|return
name|keyName
return|;
block|}
DECL|method|setKeyName (String keyName)
specifier|public
name|void
name|setKeyName
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
name|this
operator|.
name|keyName
operator|=
name|keyName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BlockIdDetails{"
operator|+
literal|"bucketName='"
operator|+
name|bucketName
operator|+
literal|'\''
operator|+
literal|", blockVol='"
operator|+
name|blockVol
operator|+
literal|'\''
operator|+
literal|", keyName='"
operator|+
name|keyName
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BlockIdDetails
name|that
init|=
operator|(
name|BlockIdDetails
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|bucketName
argument_list|,
name|that
operator|.
name|bucketName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|blockVol
argument_list|,
name|that
operator|.
name|blockVol
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|keyName
argument_list|,
name|that
operator|.
name|keyName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|bucketName
argument_list|,
name|blockVol
argument_list|,
name|keyName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

