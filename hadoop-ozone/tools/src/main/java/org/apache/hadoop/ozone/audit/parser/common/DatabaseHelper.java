begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.audit.parser.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|parser
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|parser
operator|.
name|model
operator|.
name|AuditEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Database helper for ozone audit parser tool.  */
end_comment

begin_class
DECL|class|DatabaseHelper
specifier|public
specifier|final
class|class
name|DatabaseHelper
block|{
DECL|method|DatabaseHelper ()
specifier|private
name|DatabaseHelper
parameter_list|()
block|{
comment|//Never constructed
block|}
static|static
block|{
name|loadProperties
argument_list|()
expr_stmt|;
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DatabaseHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|properties
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
DECL|method|setup (String dbName, String logs)
specifier|public
specifier|static
name|boolean
name|setup
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|logs
parameter_list|)
block|{
comment|//loadProperties();
if|if
condition|(
name|createAuditTable
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
return|return
name|insertAudits
argument_list|(
name|dbName
argument_list|,
name|logs
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|getConnection (String dbName)
specifier|private
specifier|static
name|Connection
name|getConnection
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|ParserConsts
operator|.
name|DRIVER
argument_list|)
expr_stmt|;
name|connection
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|ParserConsts
operator|.
name|CONNECTION_PREFIX
operator|+
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|connection
return|;
block|}
DECL|method|loadProperties ()
specifier|private
specifier|static
name|void
name|loadProperties
parameter_list|()
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|InputStream
name|inputStream
init|=
name|DatabaseHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|ParserConsts
operator|.
name|PROPS_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|load
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
name|properties
operator|=
name|props
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"property file '"
operator|+
name|ParserConsts
operator|.
name|PROPS_FILE
operator|+
literal|"' not found in the classpath"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createAuditTable (String dbName)
specifier|private
specifier|static
name|boolean
name|createAuditTable
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|getConnection
argument_list|(
name|dbName
argument_list|)
init|;
name|Statement
name|st
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|st
operator|.
name|executeUpdate
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|ParserConsts
operator|.
name|CREATE_AUDIT_TABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|insertAudits (String dbName, String logs)
specifier|private
specifier|static
name|boolean
name|insertAudits
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|logs
parameter_list|)
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|getConnection
argument_list|(
name|dbName
argument_list|)
init|;
name|PreparedStatement
name|preparedStatement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|ParserConsts
operator|.
name|INSERT_AUDITS
argument_list|)
argument_list|)
init|)
block|{
name|ArrayList
argument_list|<
name|AuditEntry
argument_list|>
name|auditEntries
init|=
name|parseAuditLogs
argument_list|(
name|logs
argument_list|)
decl_stmt|;
comment|//Insert list to db
for|for
control|(
name|AuditEntry
name|audit
range|:
name|auditEntries
control|)
block|{
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|audit
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|audit
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|audit
operator|.
name|getLogger
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|audit
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
name|audit
operator|.
name|getIp
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|6
argument_list|,
name|audit
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|7
argument_list|,
name|audit
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|8
argument_list|,
name|audit
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|setString
argument_list|(
literal|9
argument_list|,
name|audit
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|preparedStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|parseAuditLogs (String filePath)
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|AuditEntry
argument_list|>
name|parseAuditLogs
parameter_list|(
name|String
name|filePath
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|AuditEntry
argument_list|>
name|listResult
init|=
operator|new
name|ArrayList
argument_list|<
name|AuditEntry
argument_list|>
argument_list|()
decl_stmt|;
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|filePath
argument_list|)
init|;
name|InputStreamReader
name|isr
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|fis
argument_list|)
init|;
name|BufferedReader
name|bReader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
init|)
block|{
name|String
name|currentLine
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|entry
init|=
literal|null
decl_stmt|;
name|AuditEntry
name|tempEntry
init|=
literal|null
decl_stmt|;
name|String
name|nextLine
init|=
literal|null
decl_stmt|;
name|currentLine
operator|=
name|bReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|nextLine
operator|=
name|bReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|tempEntry
operator|==
literal|null
condition|)
block|{
name|tempEntry
operator|=
operator|new
name|AuditEntry
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentLine
operator|==
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|currentLine
operator|.
name|matches
argument_list|(
name|ParserConsts
operator|.
name|DATE_REGEX
argument_list|)
condition|)
block|{
name|tempEntry
operator|.
name|appendException
argument_list|(
name|currentLine
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|=
name|StringUtils
operator|.
name|stripAll
argument_list|(
name|currentLine
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
argument_list|)
expr_stmt|;
name|tempEntry
operator|=
operator|new
name|AuditEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setTimestamp
argument_list|(
name|entry
index|[
literal|0
index|]
argument_list|)
operator|.
name|setLevel
argument_list|(
name|entry
index|[
literal|1
index|]
argument_list|)
operator|.
name|setLogger
argument_list|(
name|entry
index|[
literal|2
index|]
argument_list|)
operator|.
name|setUser
argument_list|(
name|entry
index|[
literal|3
index|]
operator|.
name|substring
argument_list|(
name|entry
index|[
literal|3
index|]
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|setIp
argument_list|(
name|entry
index|[
literal|4
index|]
operator|.
name|substring
argument_list|(
name|entry
index|[
literal|4
index|]
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|setOp
argument_list|(
name|entry
index|[
literal|5
index|]
operator|.
name|substring
argument_list|(
name|entry
index|[
literal|5
index|]
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|setParams
argument_list|(
name|entry
index|[
literal|6
index|]
argument_list|)
operator|.
name|setResult
argument_list|(
name|entry
index|[
literal|7
index|]
operator|.
name|substring
argument_list|(
name|entry
index|[
literal|7
index|]
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|length
operator|==
literal|9
condition|)
block|{
name|tempEntry
operator|.
name|setException
argument_list|(
name|entry
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nextLine
operator|==
literal|null
operator|||
name|nextLine
operator|.
name|matches
argument_list|(
name|ParserConsts
operator|.
name|DATE_REGEX
argument_list|)
condition|)
block|{
name|listResult
operator|.
name|add
argument_list|(
name|tempEntry
argument_list|)
expr_stmt|;
name|tempEntry
operator|=
literal|null
expr_stmt|;
block|}
name|currentLine
operator|=
name|nextLine
expr_stmt|;
name|nextLine
operator|=
name|bReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rx
parameter_list|)
block|{
throw|throw
name|rx
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
return|return
name|listResult
return|;
block|}
DECL|method|executeCustomQuery (String dbName, String query)
specifier|public
specifier|static
name|String
name|executeCustomQuery
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|executeStatement
argument_list|(
name|dbName
argument_list|,
name|query
argument_list|)
return|;
block|}
DECL|method|executeTemplate (String dbName, String template)
specifier|public
specifier|static
name|String
name|executeTemplate
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|template
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|executeStatement
argument_list|(
name|dbName
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|template
argument_list|)
argument_list|)
return|;
block|}
DECL|method|executeStatement (String dbName, String sql)
specifier|private
specifier|static
name|String
name|executeStatement
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|Statement
name|st
init|=
literal|null
decl_stmt|;
name|ResultSetMetaData
name|rsm
init|=
literal|null
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|getConnection
argument_list|(
name|dbName
argument_list|)
init|)
block|{
comment|//loadProperties();
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|st
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|rs
operator|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
name|rsm
operator|=
name|rs
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|int
name|cols
init|=
name|rsm
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<=
name|cols
condition|;
name|index
operator|++
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|rs
operator|.
name|getObject
argument_list|(
name|index
argument_list|)
operator|+
literal|"\t"
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|validateTemplate (String templateName)
specifier|public
specifier|static
name|boolean
name|validateTemplate
parameter_list|(
name|String
name|templateName
parameter_list|)
block|{
return|return
operator|(
name|properties
operator|.
name|get
argument_list|(
name|templateName
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

