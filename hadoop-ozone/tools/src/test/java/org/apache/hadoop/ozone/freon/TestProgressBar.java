begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.freon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|freon
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|LongStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Using Mockito runner.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
comment|/**  * Tests for the Progressbar class for Freon.  */
DECL|class|TestProgressBar
specifier|public
class|class
name|TestProgressBar
block|{
DECL|field|stream
specifier|private
name|PrintStream
name|stream
decl_stmt|;
DECL|field|numberOfKeysAdded
specifier|private
name|AtomicLong
name|numberOfKeysAdded
decl_stmt|;
DECL|field|currentValue
specifier|private
name|Supplier
argument_list|<
name|Long
argument_list|>
name|currentValue
decl_stmt|;
annotation|@
name|Before
DECL|method|setupMock ()
specifier|public
name|void
name|setupMock
parameter_list|()
block|{
name|numberOfKeysAdded
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|currentValue
operator|=
parameter_list|()
lambda|->
name|numberOfKeysAdded
operator|.
name|get
argument_list|()
expr_stmt|;
name|stream
operator|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithRunnable ()
specifier|public
name|void
name|testWithRunnable
parameter_list|()
block|{
name|Long
name|maxValue
init|=
literal|10L
decl_stmt|;
name|ProgressBar
name|progressbar
init|=
operator|new
name|ProgressBar
argument_list|(
name|stream
argument_list|,
name|maxValue
argument_list|,
name|currentValue
argument_list|)
decl_stmt|;
name|Runnable
name|task
init|=
parameter_list|()
lambda|->
block|{
name|LongStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|maxValue
argument_list|)
operator|.
name|forEach
argument_list|(
name|counter
lambda|->
block|{
name|numberOfKeysAdded
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|progressbar
operator|.
name|start
argument_list|()
expr_stmt|;
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
name|progressbar
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|stream
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|print
argument_list|(
name|anyChar
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|stream
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|print
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

