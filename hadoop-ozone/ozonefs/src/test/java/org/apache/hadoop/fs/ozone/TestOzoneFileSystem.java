begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ObjectStoreHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|BucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|KeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|UserArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|VolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|interfaces
operator|.
name|StorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Ozone file system tests that are not covered by contract tests.  */
end_comment

begin_class
DECL|class|TestOzoneFileSystem
specifier|public
class|class
name|TestOzoneFileSystem
block|{
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300_000
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|o3fs
specifier|private
specifier|static
name|OzoneFileSystem
name|o3fs
decl_stmt|;
DECL|field|storageHandler
specifier|private
specifier|static
name|StorageHandler
name|storageHandler
decl_stmt|;
DECL|field|userArgs
specifier|private
specifier|static
name|UserArgs
name|userArgs
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
DECL|field|bucketName
specifier|private
name|String
name|bucketName
decl_stmt|;
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|rootPath
specifier|private
name|String
name|rootPath
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|storageHandler
operator|=
operator|new
name|ObjectStoreHandler
argument_list|(
name|conf
argument_list|)
operator|.
name|getStorageHandler
argument_list|()
expr_stmt|;
comment|// create a volume and a bucket to be used by OzoneFileSystem
name|userName
operator|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|volumeName
operator|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|bucketName
operator|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|userArgs
operator|=
operator|new
name|UserArgs
argument_list|(
literal|null
argument_list|,
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|VolumeArgs
name|volumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|volumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|volumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|rootPath
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s://%s.%s/"
argument_list|,
name|OzoneConsts
operator|.
name|OZONE_URI_SCHEME
argument_list|,
name|bucketName
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
comment|// Set the fs.defaultFS and start the filesystem
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|rootPath
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|o3fs
operator|=
operator|(
name|OzoneFileSystem
operator|)
name|fs
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|storageHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOzoneFsServiceLoader ()
specifier|public
name|void
name|testOzoneFsServiceLoader
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|FileSystem
operator|.
name|getFileSystemClass
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_URI_SCHEME
argument_list|,
literal|null
argument_list|)
argument_list|,
name|OzoneFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDoesNotAddParentDirKeys ()
specifier|public
name|void
name|testCreateDoesNotAddParentDirKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|grandparent
init|=
operator|new
name|Path
argument_list|(
literal|"/testCreateDoesNotAddParentDirKeys"
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|grandparent
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|KeyInfo
name|key
init|=
name|getKey
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|key
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|o3fs
operator|.
name|pathToKey
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
comment|// Creating a child should not add parent keys to the bucket
try|try
block|{
name|getKey
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertKeyNotFoundException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// List status on the parent should show the child file
name|assertEquals
argument_list|(
literal|"List status of parent should include the 1 child file"
argument_list|,
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|fs
operator|.
name|listStatus
argument_list|(
name|parent
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Parent directory does not appear to be a directory"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|parent
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteCreatesFakeParentDir ()
specifier|public
name|void
name|testDeleteCreatesFakeParentDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|grandparent
init|=
operator|new
name|Path
argument_list|(
literal|"/testDeleteCreatesFakeParentDir"
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|grandparent
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|child
argument_list|)
expr_stmt|;
comment|// Verify that parent dir key does not exist
comment|// Creating a child should not add parent keys to the bucket
try|try
block|{
name|getKey
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertKeyNotFoundException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// Delete the child key
name|fs
operator|.
name|delete
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Deleting the only child should create the parent dir key if it does
comment|// not exist
name|String
name|parentKey
init|=
name|o3fs
operator|.
name|pathToKey
argument_list|(
name|parent
argument_list|)
operator|+
literal|"/"
decl_stmt|;
name|KeyInfo
name|parentKeyInfo
init|=
name|getKey
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parentKey
argument_list|,
name|parentKeyInfo
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStatus ()
specifier|public
name|void
name|testListStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/testListStatus"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"key1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"key1/key2"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|)
expr_stmt|;
comment|// ListStatus on a directory should return all subdirs along with
comment|// files, even if there exists a file and sub-dir with the same name.
name|FileStatus
index|[]
name|fileStatuses
init|=
name|o3fs
operator|.
name|listStatus
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FileStatus did not return all children of the directory"
argument_list|,
literal|2
argument_list|,
name|fileStatuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ListStatus should return only the immediate children of a directory.
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir1/key3"
argument_list|)
decl_stmt|;
name|Path
name|file4
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir1/key4"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file3
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file4
argument_list|)
expr_stmt|;
name|fileStatuses
operator|=
name|o3fs
operator|.
name|listStatus
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FileStatus did not return all children of the directory"
argument_list|,
literal|3
argument_list|,
name|fileStatuses
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|getKey (Path keyPath, boolean isDirectory)
specifier|private
name|KeyInfo
name|getKey
parameter_list|(
name|Path
name|keyPath
parameter_list|,
name|boolean
name|isDirectory
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|key
init|=
name|o3fs
operator|.
name|pathToKey
argument_list|(
name|keyPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDirectory
condition|)
block|{
name|key
operator|=
name|key
operator|+
literal|"/"
expr_stmt|;
block|}
name|KeyArgs
name|parentKeyArgs
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|key
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
return|return
name|storageHandler
operator|.
name|getKeyInfo
argument_list|(
name|parentKeyArgs
argument_list|)
return|;
block|}
DECL|method|assertKeyNotFoundException (IOException ex)
specifier|private
name|void
name|assertKeyNotFoundException
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"KEY_NOT_FOUND"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

