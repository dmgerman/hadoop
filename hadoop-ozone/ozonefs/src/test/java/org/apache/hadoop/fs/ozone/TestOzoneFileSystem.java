begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|TestDataUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneKeyDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_comment
comment|/**  * Ozone file system tests that are not covered by contract tests.  */
end_comment

begin_class
DECL|class|TestOzoneFileSystem
specifier|public
class|class
name|TestOzoneFileSystem
block|{
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300_000
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
DECL|field|o3fs
specifier|private
specifier|static
name|OzoneFileSystem
name|o3fs
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
DECL|field|bucketName
specifier|private
name|String
name|bucketName
decl_stmt|;
DECL|field|rootPath
specifier|private
name|String
name|rootPath
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
comment|// create a volume and a bucket to be used by OzoneFileSystem
name|OzoneBucket
name|bucket
init|=
name|TestDataUtil
operator|.
name|createVolumeAndBucket
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|volumeName
operator|=
name|bucket
operator|.
name|getVolumeName
argument_list|()
expr_stmt|;
name|bucketName
operator|=
name|bucket
operator|.
name|getName
argument_list|()
expr_stmt|;
name|rootPath
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s://%s.%s/"
argument_list|,
name|OzoneConsts
operator|.
name|OZONE_URI_SCHEME
argument_list|,
name|bucket
operator|.
name|getName
argument_list|()
argument_list|,
name|bucket
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the fs.defaultFS and start the filesystem
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|rootPath
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|o3fs
operator|=
operator|(
name|OzoneFileSystem
operator|)
name|fs
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOzoneFsServiceLoader ()
specifier|public
name|void
name|testOzoneFsServiceLoader
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|FileSystem
operator|.
name|getFileSystemClass
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_URI_SCHEME
argument_list|,
literal|null
argument_list|)
argument_list|,
name|OzoneFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDoesNotAddParentDirKeys ()
specifier|public
name|void
name|testCreateDoesNotAddParentDirKeys
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|grandparent
init|=
operator|new
name|Path
argument_list|(
literal|"/testCreateDoesNotAddParentDirKeys"
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|grandparent
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|OzoneKeyDetails
name|key
init|=
name|getKey
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|,
name|o3fs
operator|.
name|pathToKey
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
comment|// Creating a child should not add parent keys to the bucket
try|try
block|{
name|getKey
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertKeyNotFoundException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// List status on the parent should show the child file
name|assertEquals
argument_list|(
literal|"List status of parent should include the 1 child file"
argument_list|,
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|fs
operator|.
name|listStatus
argument_list|(
name|parent
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Parent directory does not appear to be a directory"
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|parent
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteCreatesFakeParentDir ()
specifier|public
name|void
name|testDeleteCreatesFakeParentDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|grandparent
init|=
operator|new
name|Path
argument_list|(
literal|"/testDeleteCreatesFakeParentDir"
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|grandparent
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|child
argument_list|)
expr_stmt|;
comment|// Verify that parent dir key does not exist
comment|// Creating a child should not add parent keys to the bucket
try|try
block|{
name|getKey
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertKeyNotFoundException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// Delete the child key
name|fs
operator|.
name|delete
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Deleting the only child should create the parent dir key if it does
comment|// not exist
name|String
name|parentKey
init|=
name|o3fs
operator|.
name|pathToKey
argument_list|(
name|parent
argument_list|)
operator|+
literal|"/"
decl_stmt|;
name|OzoneKeyDetails
name|parentKeyInfo
init|=
name|getKey
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parentKey
argument_list|,
name|parentKeyInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStatus ()
specifier|public
name|void
name|testListStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
literal|"/testListStatus"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"key1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"key2"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file2
argument_list|)
expr_stmt|;
comment|// ListStatus on a directory should return all subdirs along with
comment|// files, even if there exists a file and sub-dir with the same name.
name|FileStatus
index|[]
name|fileStatuses
init|=
name|o3fs
operator|.
name|listStatus
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FileStatus did not return all children of the directory"
argument_list|,
literal|2
argument_list|,
name|fileStatuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ListStatus should return only the immediate children of a directory.
name|Path
name|file3
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir1/key3"
argument_list|)
decl_stmt|;
name|Path
name|file4
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"dir1/key4"
argument_list|)
decl_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file3
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file4
argument_list|)
expr_stmt|;
name|fileStatuses
operator|=
name|o3fs
operator|.
name|listStatus
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FileStatus did not return all children of the directory"
argument_list|,
literal|3
argument_list|,
name|fileStatuses
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests listStatus operation on root directory.    */
annotation|@
name|Test
DECL|method|testListStatusOnRoot ()
specifier|public
name|void
name|testListStatusOnRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dir1"
argument_list|)
decl_stmt|;
name|Path
name|dir12
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"dir12"
argument_list|)
decl_stmt|;
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
literal|"dir2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir12
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
comment|// ListStatus on root should return dir1 (even though /dir1 key does not
comment|// exist) and dir2 only. dir12 is not an immediate child of root and
comment|// hence should not be listed.
name|FileStatus
index|[]
name|fileStatuses
init|=
name|o3fs
operator|.
name|listStatus
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FileStatus should return only the immediate children"
argument_list|,
literal|2
argument_list|,
name|fileStatuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Verify that dir12 is not included in the result of the listStatus on root
name|String
name|fileStatus1
init|=
name|fileStatuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|fileStatus2
init|=
name|fileStatuses
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|fileStatus1
operator|.
name|equals
argument_list|(
name|dir12
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fileStatus2
operator|.
name|equals
argument_list|(
name|dir12
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests listStatus operation on root directory.    */
annotation|@
name|Test
DECL|method|testListStatusOnLargeDirectory ()
specifier|public
name|void
name|testListStatusOnLargeDirectory
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numDirs
init|=
literal|5111
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirs
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FileStatus
index|[]
name|fileStatuses
init|=
name|o3fs
operator|.
name|listStatus
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Total directories listed do not match the existing directories"
argument_list|,
name|numDirs
argument_list|,
name|fileStatuses
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirs
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|paths
operator|.
name|contains
argument_list|(
name|fileStatuses
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests listStatus on a path with subdirs.    */
annotation|@
name|Test
DECL|method|testListStatusOnSubDirs ()
specifier|public
name|void
name|testListStatusOnSubDirs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the following key structure
comment|//      /dir1/dir11/dir111
comment|//      /dir1/dir12
comment|//      /dir1/dir12/file121
comment|//      /dir2
comment|// ListStatus on /dir1 should return all its immediated subdirs only
comment|// which are /dir1/dir11 and /dir1/dir12. Super child files/dirs
comment|// (/dir1/dir12/file121 and /dir1/dir11/dir111) should not be returned by
comment|// listStatus.
name|Path
name|dir1
init|=
operator|new
name|Path
argument_list|(
literal|"/dir1"
argument_list|)
decl_stmt|;
name|Path
name|dir11
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"dir11"
argument_list|)
decl_stmt|;
name|Path
name|dir111
init|=
operator|new
name|Path
argument_list|(
name|dir11
argument_list|,
literal|"dir111"
argument_list|)
decl_stmt|;
name|Path
name|dir12
init|=
operator|new
name|Path
argument_list|(
name|dir1
argument_list|,
literal|"dir12"
argument_list|)
decl_stmt|;
name|Path
name|file121
init|=
operator|new
name|Path
argument_list|(
name|dir12
argument_list|,
literal|"file121"
argument_list|)
decl_stmt|;
name|Path
name|dir2
init|=
operator|new
name|Path
argument_list|(
literal|"/dir2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir111
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir12
argument_list|)
expr_stmt|;
name|ContractTestUtils
operator|.
name|touch
argument_list|(
name|fs
argument_list|,
name|file121
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|fileStatuses
init|=
name|o3fs
operator|.
name|listStatus
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FileStatus should return only the immediate children"
argument_list|,
literal|2
argument_list|,
name|fileStatuses
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Verify that the two children of /dir1 returned by listStatus operation
comment|// are /dir1/dir11 and /dir1/dir12.
name|String
name|fileStatus1
init|=
name|fileStatuses
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|fileStatus2
init|=
name|fileStatuses
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fileStatus1
operator|.
name|equals
argument_list|(
name|dir11
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|fileStatus1
operator|.
name|equals
argument_list|(
name|dir12
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileStatus2
operator|.
name|equals
argument_list|(
name|dir11
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|fileStatus2
operator|.
name|equals
argument_list|(
name|dir12
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonExplicitlyCreatedPathExistsAfterItsLeafsWereRemoved ()
specifier|public
name|void
name|testNonExplicitlyCreatedPathExistsAfterItsLeafsWereRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|source
init|=
operator|new
name|Path
argument_list|(
literal|"/source"
argument_list|)
decl_stmt|;
name|Path
name|interimPath
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|,
literal|"interimPath"
argument_list|)
decl_stmt|;
name|Path
name|leafInsideInterimPath
init|=
operator|new
name|Path
argument_list|(
name|interimPath
argument_list|,
literal|"leaf"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
operator|new
name|Path
argument_list|(
literal|"/target"
argument_list|)
decl_stmt|;
name|Path
name|leafInTarget
init|=
operator|new
name|Path
argument_list|(
name|target
argument_list|,
literal|"leaf"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|leafInsideInterimPath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|rename
argument_list|(
name|leafInsideInterimPath
argument_list|,
name|leafInTarget
argument_list|)
argument_list|)
expr_stmt|;
comment|// after rename listStatus for interimPath should succeed and
comment|// interimPath should have no children
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|interimPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"liststatus returns a null array"
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Statuses array is not empty"
argument_list|,
literal|0
argument_list|,
name|statuses
operator|.
name|length
argument_list|)
expr_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|interimPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FileStatus does not point to interimPath"
argument_list|,
name|interimPath
operator|.
name|getName
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getKey (Path keyPath, boolean isDirectory)
specifier|private
name|OzoneKeyDetails
name|getKey
parameter_list|(
name|Path
name|keyPath
parameter_list|,
name|boolean
name|isDirectory
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneClientException
block|{
name|String
name|key
init|=
name|o3fs
operator|.
name|pathToKey
argument_list|(
name|keyPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDirectory
condition|)
block|{
name|key
operator|=
name|key
operator|+
literal|"/"
expr_stmt|;
block|}
return|return
name|cluster
operator|.
name|getClient
argument_list|()
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
operator|.
name|getKey
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|assertKeyNotFoundException (IOException ex)
specifier|private
name|void
name|assertKeyNotFoundException
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"KEY_NOT_FOUND"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

