begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OzoneFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Basic Implementation of the OzoneFileSystem calls.  *<p>  * This is the minimal version which doesn't include any statistics.  *<p>  * For full featured version use OzoneClientAdapterImpl.  */
end_comment

begin_class
DECL|class|BasicOzoneClientAdapterImpl
specifier|public
class|class
name|BasicOzoneClientAdapterImpl
implements|implements
name|OzoneClientAdapter
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BasicOzoneClientAdapterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ozoneClient
specifier|private
name|OzoneClient
name|ozoneClient
decl_stmt|;
DECL|field|objectStore
specifier|private
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|volume
specifier|private
name|OzoneVolume
name|volume
decl_stmt|;
DECL|field|bucket
specifier|private
name|OzoneBucket
name|bucket
decl_stmt|;
DECL|field|replicationType
specifier|private
name|ReplicationType
name|replicationType
decl_stmt|;
DECL|field|replicationFactor
specifier|private
name|ReplicationFactor
name|replicationFactor
decl_stmt|;
DECL|field|securityEnabled
specifier|private
name|boolean
name|securityEnabled
decl_stmt|;
comment|/**    * Create new OzoneClientAdapter implementation.    *    * @param volumeStr Name of the volume to use.    * @param bucketStr Name of the bucket to use    * @throws IOException In case of a problem.    */
DECL|method|BasicOzoneClientAdapterImpl (String volumeStr, String bucketStr)
specifier|public
name|BasicOzoneClientAdapterImpl
parameter_list|(
name|String
name|volumeStr
parameter_list|,
name|String
name|bucketStr
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|createConf
argument_list|()
argument_list|,
name|volumeStr
argument_list|,
name|bucketStr
argument_list|)
expr_stmt|;
block|}
DECL|method|createConf ()
specifier|private
specifier|static
name|OzoneConfiguration
name|createConf
parameter_list|()
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|BasicOzoneClientAdapterImpl (OzoneConfiguration conf, String volumeStr, String bucketStr)
specifier|public
name|BasicOzoneClientAdapterImpl
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|volumeStr
parameter_list|,
name|String
name|bucketStr
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|conf
argument_list|,
name|volumeStr
argument_list|,
name|bucketStr
argument_list|)
expr_stmt|;
block|}
DECL|method|BasicOzoneClientAdapterImpl (String omHost, int omPort, Configuration hadoopConf, String volumeStr, String bucketStr)
specifier|public
name|BasicOzoneClientAdapterImpl
parameter_list|(
name|String
name|omHost
parameter_list|,
name|int
name|omPort
parameter_list|,
name|Configuration
name|hadoopConf
parameter_list|,
name|String
name|volumeStr
parameter_list|,
name|String
name|bucketStr
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|OzoneConfiguration
name|conf
decl_stmt|;
if|if
condition|(
name|hadoopConf
operator|instanceof
name|OzoneConfiguration
condition|)
block|{
name|conf
operator|=
operator|(
name|OzoneConfiguration
operator|)
name|hadoopConf
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|(
name|hadoopConf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|omHost
operator|==
literal|null
operator|&&
name|OmUtils
operator|.
name|isServiceIdsDefined
argument_list|(
name|conf
argument_list|)
condition|)
block|{
comment|// When the host name or service id isn't given
comment|// but ozone.om.service.ids is defined, declare failure.
comment|// This is a safety precaution that prevents the client from
comment|// accidentally failing over to an unintended OM.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Service ID or host name must not"
operator|+
literal|" be omitted when ozone.om.service.ids is defined."
argument_list|)
throw|;
block|}
if|if
condition|(
name|omPort
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// When the port number is specified, perform the following check
if|if
condition|(
name|OmUtils
operator|.
name|isOmHAServiceId
argument_list|(
name|conf
argument_list|,
name|omHost
argument_list|)
condition|)
block|{
comment|// If omHost is a service id, it shouldn't use a port
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Port "
operator|+
name|omPort
operator|+
literal|" specified in URI but host '"
operator|+
name|omHost
operator|+
literal|"' is "
operator|+
literal|"a logical (HA) OzoneManager and does not use port information."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// When port number is not specified, read it from config
name|omPort
operator|=
name|OmUtils
operator|.
name|getOmRpcPort
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|SecurityConfig
name|secConfig
init|=
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|secConfig
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|securityEnabled
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|String
name|replicationTypeConf
init|=
name|conf
operator|.
name|get
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_REPLICATION_TYPE
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_REPLICATION_TYPE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|replicationCountConf
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_REPLICATION
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_REPLICATION_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|OmUtils
operator|.
name|isOmHAServiceId
argument_list|(
name|conf
argument_list|,
name|omHost
argument_list|)
condition|)
block|{
comment|// omHost is listed as one of the service ids in the config,
comment|// thus we should treat omHost as omServiceId
name|this
operator|.
name|ozoneClient
operator|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|omHost
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|omHost
argument_list|)
operator|&&
name|omPort
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|ozoneClient
operator|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|omHost
argument_list|,
name|omPort
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|ozoneClient
operator|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|objectStore
operator|=
name|ozoneClient
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|volume
operator|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucket
operator|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationType
operator|=
name|ReplicationType
operator|.
name|valueOf
argument_list|(
name|replicationTypeConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationFactor
operator|=
name|ReplicationFactor
operator|.
name|valueOf
argument_list|(
name|replicationCountConf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|ozoneClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFile (String key)
specifier|public
name|InputStream
name|readFile
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_READ
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|bucket
operator|.
name|readFile
argument_list|(
name|key
argument_list|)
operator|.
name|getInputStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|==
name|OMException
operator|.
name|ResultCodes
operator|.
name|FILE_NOT_FOUND
operator|||
name|ex
operator|.
name|getResult
argument_list|()
operator|==
name|OMException
operator|.
name|ResultCodes
operator|.
name|NOT_A_FILE
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|ex
operator|.
name|getResult
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
DECL|method|incrementCounter (Statistic objectsRead)
specifier|protected
name|void
name|incrementCounter
parameter_list|(
name|Statistic
name|objectsRead
parameter_list|)
block|{
comment|//noop: Use OzoneClientAdapterImpl which supports statistics.
block|}
annotation|@
name|Override
DECL|method|createFile (String key, boolean overWrite, boolean recursive)
specifier|public
name|OzoneFSOutputStream
name|createFile
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|overWrite
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_CREATED
argument_list|)
expr_stmt|;
try|try
block|{
name|OzoneOutputStream
name|ozoneOutputStream
init|=
name|bucket
operator|.
name|createFile
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|replicationType
argument_list|,
name|replicationFactor
argument_list|,
name|overWrite
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
return|return
operator|new
name|OzoneFSOutputStream
argument_list|(
name|ozoneOutputStream
operator|.
name|getOutputStream
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|==
name|OMException
operator|.
name|ResultCodes
operator|.
name|FILE_ALREADY_EXISTS
operator|||
name|ex
operator|.
name|getResult
argument_list|()
operator|==
name|OMException
operator|.
name|ResultCodes
operator|.
name|NOT_A_FILE
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|ex
operator|.
name|getResult
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|renameKey (String key, String newKeyName)
specifier|public
name|void
name|renameKey
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|newKeyName
parameter_list|)
throws|throws
name|IOException
block|{
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_RENAMED
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|renameKey
argument_list|(
name|key
argument_list|,
name|newKeyName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method to create an directory specified by key name in bucket.    *    * @param keyName key name to be created as directory    * @return true if the key is created, false otherwise    */
annotation|@
name|Override
DECL|method|createDirectory (String keyName)
specifier|public
name|boolean
name|createDirectory
parameter_list|(
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"creating dir for key:{}"
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_CREATED
argument_list|)
expr_stmt|;
try|try
block|{
name|bucket
operator|.
name|createDirectory
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getResult
argument_list|()
operator|==
name|OMException
operator|.
name|ResultCodes
operator|.
name|FILE_ALREADY_EXISTS
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Helper method to delete an object specified by key name in bucket.    *    * @param keyName key name to be deleted    * @return true if the key is deleted, false otherwise    */
annotation|@
name|Override
DECL|method|deleteObject (String keyName)
specifier|public
name|boolean
name|deleteObject
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"issuing delete for key"
operator|+
name|keyName
argument_list|)
expr_stmt|;
try|try
block|{
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_DELETED
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|deleteKey
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"delete key failed "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|getFileStatus (String key, URI uri, Path qualifiedPath, String userName)
specifier|public
name|FileStatusAdapter
name|getFileStatus
parameter_list|(
name|String
name|key
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Path
name|qualifiedPath
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_QUERY
argument_list|)
expr_stmt|;
name|OzoneFileStatus
name|status
init|=
name|bucket
operator|.
name|getFileStatus
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|makeQualified
argument_list|(
name|status
argument_list|,
name|uri
argument_list|,
name|qualifiedPath
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|toFileStatusAdapter
argument_list|(
name|status
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OMException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getResult
argument_list|()
operator|==
name|OMException
operator|.
name|ResultCodes
operator|.
name|FILE_NOT_FOUND
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|key
operator|+
literal|": No such file or directory!"
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|makeQualified (FileStatus status, URI uri, Path path, String username)
specifier|public
name|void
name|makeQualified
parameter_list|(
name|FileStatus
name|status
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
name|username
parameter_list|)
block|{
if|if
condition|(
name|status
operator|instanceof
name|OzoneFileStatus
condition|)
block|{
operator|(
operator|(
name|OzoneFileStatus
operator|)
name|status
operator|)
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|path
argument_list|,
name|username
argument_list|,
name|username
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|listKeys (String pathKey)
specifier|public
name|Iterator
argument_list|<
name|BasicKeyInfo
argument_list|>
name|listKeys
parameter_list|(
name|String
name|pathKey
parameter_list|)
block|{
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_LIST
argument_list|)
expr_stmt|;
return|return
operator|new
name|IteratorAdapter
argument_list|(
name|bucket
operator|.
name|listKeys
argument_list|(
name|pathKey
argument_list|)
argument_list|)
return|;
block|}
DECL|method|listStatus (String keyName, boolean recursive, String startKey, long numEntries, URI uri, Path workingDir, String username)
specifier|public
name|List
argument_list|<
name|FileStatusAdapter
argument_list|>
name|listStatus
parameter_list|(
name|String
name|keyName
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|String
name|startKey
parameter_list|,
name|long
name|numEntries
parameter_list|,
name|URI
name|uri
parameter_list|,
name|Path
name|workingDir
parameter_list|,
name|String
name|username
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_LIST
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OzoneFileStatus
argument_list|>
name|statuses
init|=
name|bucket
operator|.
name|listStatus
argument_list|(
name|keyName
argument_list|,
name|recursive
argument_list|,
name|startKey
argument_list|,
name|numEntries
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatusAdapter
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OzoneFileStatus
name|status
range|:
name|statuses
control|)
block|{
name|Path
name|qualifiedPath
init|=
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
name|makeQualified
argument_list|(
name|status
argument_list|,
name|uri
argument_list|,
name|qualifiedPath
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|toFileStatusAdapter
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|OMException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getResult
argument_list|()
operator|==
name|OMException
operator|.
name|ResultCodes
operator|.
name|FILE_NOT_FOUND
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDelegationToken (String renewer)
specifier|public
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|securityEnabled
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|ozoneClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|renewer
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Text
argument_list|(
name|renewer
argument_list|)
argument_list|)
decl_stmt|;
name|token
operator|.
name|setKind
argument_list|(
name|OzoneTokenIdentifier
operator|.
name|KIND_NAME
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyProvider ()
specifier|public
name|KeyProvider
name|getKeyProvider
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|objectStore
operator|.
name|getKeyProvider
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyProviderUri ()
specifier|public
name|URI
name|getKeyProviderUri
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|objectStore
operator|.
name|getKeyProviderUri
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
return|return
name|objectStore
operator|.
name|getCanonicalServiceName
argument_list|()
return|;
block|}
comment|/**    * Ozone Delegation Token Renewer.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Renewer
specifier|public
specifier|static
class|class
name|Renewer
extends|extends
name|TokenRenewer
block|{
comment|//Ensure that OzoneConfiguration files are loaded before trying to use
comment|// the renewer.
static|static
block|{
name|OzoneConfiguration
operator|.
name|activate
argument_list|()
expr_stmt|;
block|}
DECL|method|getKind ()
specifier|public
name|Text
name|getKind
parameter_list|()
block|{
return|return
name|OzoneTokenIdentifier
operator|.
name|KIND_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|handleKind (Text kind)
specifier|public
name|boolean
name|handleKind
parameter_list|(
name|Text
name|kind
parameter_list|)
block|{
return|return
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isManaged (Token<?> token)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|renew (Token<?> token, Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|ozoneDt
init|=
operator|(
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
operator|)
name|token
decl_stmt|;
name|OzoneClient
name|ozoneClient
init|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|ozoneClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|renewDelegationToken
argument_list|(
name|ozoneDt
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cancel (Token<?> token, Configuration conf)
specifier|public
name|void
name|cancel
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|ozoneDt
init|=
operator|(
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
operator|)
name|token
decl_stmt|;
name|OzoneClient
name|ozoneClient
init|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ozoneClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|cancelDelegationToken
argument_list|(
name|ozoneDt
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adapter to convert OzoneKey to a safe and simple Key implementation.    */
DECL|class|IteratorAdapter
specifier|public
specifier|static
class|class
name|IteratorAdapter
implements|implements
name|Iterator
argument_list|<
name|BasicKeyInfo
argument_list|>
block|{
DECL|field|original
specifier|private
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneKey
argument_list|>
name|original
decl_stmt|;
DECL|method|IteratorAdapter (Iterator<? extends OzoneKey> listKeys)
specifier|public
name|IteratorAdapter
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneKey
argument_list|>
name|listKeys
parameter_list|)
block|{
name|this
operator|.
name|original
operator|=
name|listKeys
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|original
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|BasicKeyInfo
name|next
parameter_list|()
block|{
name|OzoneKey
name|next
init|=
name|original
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|BasicKeyInfo
argument_list|(
name|next
operator|.
name|getName
argument_list|()
argument_list|,
name|next
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|next
operator|.
name|getDataSize
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|toFileStatusAdapter (OzoneFileStatus status)
specifier|private
name|FileStatusAdapter
name|toFileStatusAdapter
parameter_list|(
name|OzoneFileStatus
name|status
parameter_list|)
block|{
return|return
operator|new
name|FileStatusAdapter
argument_list|(
name|status
operator|.
name|getLen
argument_list|()
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
name|status
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|status
operator|.
name|getReplication
argument_list|()
argument_list|,
name|status
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|status
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|status
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|status
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
argument_list|,
name|status
operator|.
name|getOwner
argument_list|()
argument_list|,
name|status
operator|.
name|getGroup
argument_list|()
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

