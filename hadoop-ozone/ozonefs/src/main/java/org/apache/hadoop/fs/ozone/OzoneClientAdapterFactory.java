begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Creates OzoneClientAdapter with classloader separation.  */
end_comment

begin_class
DECL|class|OzoneClientAdapterFactory
specifier|public
specifier|final
class|class
name|OzoneClientAdapterFactory
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneClientAdapterFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|OzoneClientAdapterFactory ()
specifier|private
name|OzoneClientAdapterFactory
parameter_list|()
block|{   }
DECL|method|createAdapter ( String volumeStr, String bucketStr, OzoneFSStorageStatistics storageStatistics)
specifier|public
specifier|static
name|OzoneClientAdapter
name|createAdapter
parameter_list|(
name|String
name|volumeStr
parameter_list|,
name|String
name|bucketStr
parameter_list|,
name|OzoneFSStorageStatistics
name|storageStatistics
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassLoader
name|currentClassLoader
init|=
name|OzoneFileSystem
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|findEmbeddedLibsUrl
argument_list|(
name|urls
argument_list|,
name|currentClassLoader
argument_list|)
expr_stmt|;
name|findConfigDirUrl
argument_list|(
name|urls
argument_list|,
name|currentClassLoader
argument_list|)
expr_stmt|;
name|ClassLoader
name|classLoader
init|=
operator|new
name|FilteredClassLoader
argument_list|(
name|urls
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|currentClassLoader
argument_list|)
decl_stmt|;
try|try
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
comment|//this class caches the context classloader during the first load
comment|//call it here when the context class loader is set to the isoloated
comment|//loader to make sure the grpc class will be loaded by the right
comment|//loader
name|Class
argument_list|<
name|?
argument_list|>
name|reflectionUtils
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"org.apache.ratis.util.ReflectionUtils"
argument_list|)
decl_stmt|;
name|reflectionUtils
operator|.
name|getMethod
argument_list|(
literal|"getClassByName"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|"org.apache.ratis.grpc.GrpcFactory"
argument_list|)
expr_stmt|;
name|OzoneClientAdapter
name|ozoneClientAdapter
init|=
operator|(
name|OzoneClientAdapter
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
literal|"org.apache.hadoop.fs.ozone.OzoneClientAdapterImpl"
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|OzoneFSStorageStatistics
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|volumeStr
argument_list|,
name|bucketStr
argument_list|,
name|storageStatistics
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
return|return
name|ozoneClientAdapter
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't initialize the ozoneClientAdapter"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't initialize the OzoneClientAdapter implementation"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|findConfigDirUrl (List<URL> urls, ClassLoader currentClassLoader)
specifier|private
specifier|static
name|void
name|findConfigDirUrl
parameter_list|(
name|List
argument_list|<
name|URL
argument_list|>
name|urls
parameter_list|,
name|ClassLoader
name|currentClassLoader
parameter_list|)
throws|throws
name|IOException
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|conf
init|=
name|currentClassLoader
operator|.
name|getResources
argument_list|(
literal|"ozone-site.xml"
argument_list|)
decl_stmt|;
while|while
condition|(
name|conf
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
name|conf
operator|.
name|nextElement
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"ozone-site.xml"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findEmbeddedLibsUrl (List<URL> urls, ClassLoader currentClassloader)
specifier|private
specifier|static
name|void
name|findEmbeddedLibsUrl
parameter_list|(
name|List
argument_list|<
name|URL
argument_list|>
name|urls
parameter_list|,
name|ClassLoader
name|currentClassloader
parameter_list|)
throws|throws
name|MalformedURLException
block|{
comment|//marker file is added to the jar to make it easier to find the URL
comment|// for the current jar.
name|String
name|markerFile
init|=
literal|"ozonefs.txt"
decl_stmt|;
name|ClassLoader
name|currentClassLoader
init|=
name|OzoneFileSystem
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|URL
name|ozFs
init|=
name|currentClassLoader
operator|.
name|getResource
argument_list|(
name|markerFile
argument_list|)
decl_stmt|;
name|String
name|rootPath
init|=
name|ozFs
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
name|markerFile
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|urls
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
name|rootPath
argument_list|)
argument_list|)
expr_stmt|;
name|urls
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
name|rootPath
operator|+
literal|"libs/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

