begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_URI_DELIMITER
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the OzoneFileSystem calls.  */
end_comment

begin_class
DECL|class|OzoneClientAdapterImpl
specifier|public
class|class
name|OzoneClientAdapterImpl
implements|implements
name|OzoneClientAdapter
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneClientAdapterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ozoneClient
specifier|private
name|OzoneClient
name|ozoneClient
decl_stmt|;
DECL|field|objectStore
specifier|private
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|volume
specifier|private
name|OzoneVolume
name|volume
decl_stmt|;
DECL|field|bucket
specifier|private
name|OzoneBucket
name|bucket
decl_stmt|;
DECL|field|replicationType
specifier|private
name|ReplicationType
name|replicationType
decl_stmt|;
DECL|field|replicationFactor
specifier|private
name|ReplicationFactor
name|replicationFactor
decl_stmt|;
DECL|field|storageStatistics
specifier|private
name|OzoneFSStorageStatistics
name|storageStatistics
decl_stmt|;
comment|/**    * Create new OzoneClientAdapter implementation.    *    * @param volumeStr         Name of the volume to use.    * @param bucketStr         Name of the bucket to use    * @param storageStatistics Storage statistic (optional, can be null)    * @throws IOException In case of a problem.    */
DECL|method|OzoneClientAdapterImpl (String volumeStr, String bucketStr, OzoneFSStorageStatistics storageStatistics)
specifier|public
name|OzoneClientAdapterImpl
parameter_list|(
name|String
name|volumeStr
parameter_list|,
name|String
name|bucketStr
parameter_list|,
name|OzoneFSStorageStatistics
name|storageStatistics
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|createConf
argument_list|()
argument_list|,
name|volumeStr
argument_list|,
name|bucketStr
argument_list|,
name|storageStatistics
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create new OzoneClientAdapter implementation.    *    * @param volumeStr         Name of the volume to use.    * @param bucketStr         Name of the bucket to use    * @throws IOException In case of a problem.    */
DECL|method|OzoneClientAdapterImpl (String volumeStr, String bucketStr)
specifier|public
name|OzoneClientAdapterImpl
parameter_list|(
name|String
name|volumeStr
parameter_list|,
name|String
name|bucketStr
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|createConf
argument_list|()
argument_list|,
name|volumeStr
argument_list|,
name|bucketStr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|createConf ()
specifier|private
specifier|static
name|OzoneConfiguration
name|createConf
parameter_list|()
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|OzoneClientAdapterImpl (OzoneConfiguration conf, String volumeStr, String bucketStr, OzoneFSStorageStatistics storageStatistics)
specifier|public
name|OzoneClientAdapterImpl
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|volumeStr
parameter_list|,
name|String
name|bucketStr
parameter_list|,
name|OzoneFSStorageStatistics
name|storageStatistics
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|replicationTypeConf
init|=
name|conf
operator|.
name|get
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_REPLICATION_TYPE
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_REPLICATION_TYPE_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|replicationCountConf
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_REPLICATION
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_REPLICATION_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|ozoneClient
operator|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|objectStore
operator|=
name|ozoneClient
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|volume
operator|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucket
operator|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationType
operator|=
name|ReplicationType
operator|.
name|valueOf
argument_list|(
name|replicationTypeConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|replicationFactor
operator|=
name|ReplicationFactor
operator|.
name|valueOf
argument_list|(
name|replicationCountConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|storageStatistics
operator|=
name|storageStatistics
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|ozoneClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createInputStream (String key)
specifier|public
name|InputStream
name|createInputStream
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_READ
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|bucket
operator|.
name|readKey
argument_list|(
name|key
argument_list|)
operator|.
name|getInputStream
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createKey (String key)
specifier|public
name|OzoneFSOutputStream
name|createKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_CREATED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|OzoneOutputStream
name|ozoneOutputStream
init|=
name|bucket
operator|.
name|createKey
argument_list|(
name|key
argument_list|,
literal|0
argument_list|,
name|replicationType
argument_list|,
name|replicationFactor
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|OzoneFSOutputStream
argument_list|(
name|ozoneOutputStream
operator|.
name|getOutputStream
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renameKey (String key, String newKeyName)
specifier|public
name|void
name|renameKey
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|newKeyName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_RENAMED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|bucket
operator|.
name|renameKey
argument_list|(
name|key
argument_list|,
name|newKeyName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method to fetch the key metadata info.    *    * @param keyName key whose metadata information needs to be fetched    * @return metadata info of the key    */
annotation|@
name|Override
DECL|method|getKeyInfo (String keyName)
specifier|public
name|BasicKeyInfo
name|getKeyInfo
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_QUERY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|OzoneKey
name|key
init|=
name|bucket
operator|.
name|getKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
return|return
operator|new
name|BasicKeyInfo
argument_list|(
name|keyName
argument_list|,
name|key
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|key
operator|.
name|getDataSize
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Key:{} does not exist"
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Helper method to check if an Ozone key is representing a directory.    *    * @param key key to be checked as a directory    * @return true if key is a directory, false otherwise    */
annotation|@
name|Override
DECL|method|isDirectory (BasicKeyInfo key)
specifier|public
name|boolean
name|isDirectory
parameter_list|(
name|BasicKeyInfo
name|key
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"key name:{} size:{}"
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|,
name|key
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|key
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|OZONE_URI_DELIMITER
argument_list|)
operator|&&
operator|(
name|key
operator|.
name|getDataSize
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
comment|/**    * Helper method to create an directory specified by key name in bucket.    *    * @param keyName key name to be created as directory    * @return true if the key is created, false otherwise    */
annotation|@
name|Override
DECL|method|createDirectory (String keyName)
specifier|public
name|boolean
name|createDirectory
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"creating dir for key:{}"
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_CREATED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|bucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
literal|0
argument_list|,
name|replicationType
argument_list|,
name|replicationFactor
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"create key failed for key:{}"
argument_list|,
name|keyName
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Helper method to delete an object specified by key name in bucket.    *    * @param keyName key name to be deleted    * @return true if the key is deleted, false otherwise    */
annotation|@
name|Override
DECL|method|deleteObject (String keyName)
specifier|public
name|boolean
name|deleteObject
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"issuing delete for key"
operator|+
name|keyName
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_DELETED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|bucket
operator|.
name|deleteKey
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"delete key failed "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCreationTime ()
specifier|public
name|long
name|getCreationTime
parameter_list|()
block|{
return|return
name|bucket
operator|.
name|getCreationTime
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasNextKey (String key)
specifier|public
name|boolean
name|hasNextKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_LIST
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|bucket
operator|.
name|listKeys
argument_list|(
name|key
argument_list|)
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listKeys (String pathKey)
specifier|public
name|Iterator
argument_list|<
name|BasicKeyInfo
argument_list|>
name|listKeys
parameter_list|(
name|String
name|pathKey
parameter_list|)
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|OBJECTS_LIST
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|IteratorAdapter
argument_list|(
name|bucket
operator|.
name|listKeys
argument_list|(
name|pathKey
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken (String renewer)
specifier|public
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|ozoneClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
name|renewer
argument_list|)
argument_list|)
decl_stmt|;
name|token
operator|.
name|setKind
argument_list|(
name|OzoneTokenIdentifier
operator|.
name|KIND_NAME
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/**    * Ozone Delegation Token Renewer.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Renewer
specifier|public
specifier|static
class|class
name|Renewer
extends|extends
name|TokenRenewer
block|{
comment|//Ensure that OzoneConfiguration files are loaded before trying to use
comment|// the renewer.
static|static
block|{
name|OzoneConfiguration
operator|.
name|activate
argument_list|()
expr_stmt|;
block|}
DECL|method|getKind ()
specifier|public
name|Text
name|getKind
parameter_list|()
block|{
return|return
name|OzoneTokenIdentifier
operator|.
name|KIND_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|handleKind (Text kind)
specifier|public
name|boolean
name|handleKind
parameter_list|(
name|Text
name|kind
parameter_list|)
block|{
return|return
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isManaged (Token<?> token)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|renew (Token<?> token, Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|ozoneDt
init|=
operator|(
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
operator|)
name|token
decl_stmt|;
name|OzoneClient
name|ozoneClient
init|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|ozoneClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|renewDelegationToken
argument_list|(
name|ozoneDt
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cancel (Token<?> token, Configuration conf)
specifier|public
name|void
name|cancel
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|ozoneDt
init|=
operator|(
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
operator|)
name|token
decl_stmt|;
name|OzoneClient
name|ozoneClient
init|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ozoneClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|cancelDelegationToken
argument_list|(
name|ozoneDt
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adapter to convert OzoneKey to a safe and simple Key implementation.    */
DECL|class|IteratorAdapter
specifier|public
specifier|static
class|class
name|IteratorAdapter
implements|implements
name|Iterator
argument_list|<
name|BasicKeyInfo
argument_list|>
block|{
DECL|field|original
specifier|private
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneKey
argument_list|>
name|original
decl_stmt|;
DECL|method|IteratorAdapter (Iterator<? extends OzoneKey> listKeys)
specifier|public
name|IteratorAdapter
parameter_list|(
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneKey
argument_list|>
name|listKeys
parameter_list|)
block|{
name|this
operator|.
name|original
operator|=
name|listKeys
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|original
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|BasicKeyInfo
name|next
parameter_list|()
block|{
name|OzoneKey
name|next
init|=
name|original
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|BasicKeyInfo
argument_list|(
name|next
operator|.
name|getName
argument_list|()
argument_list|,
name|next
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|next
operator|.
name|getDataSize
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

