begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Class loader which delegates the loading only for the selected class.  *  *<p>  * By default java classloader delegates first all the class loading to the  * parent, and loads the class only if it's not found in the class.  *<p>  * This simple class loader do the opposit. Everything is loaded with this  * class loader without delegation _except_ the few classes which are defined  * in the constructor.  *<p>  * With this method we can use two separated class loader (the original main  * classloader and instance of this which loaded separated classes, but the  * few selected classes are shared between the two class loaders.  *<p>  * With this approach it's possible to use any older hadoop version  * (main classloader) together with ozonefs (instance of this classloader) as  * only the selected classes are selected between the class loaders.  */
end_comment

begin_class
DECL|class|FilteredClassLoader
specifier|public
class|class
name|FilteredClassLoader
extends|extends
name|URLClassLoader
block|{
DECL|field|systemClassLoader
specifier|private
specifier|final
name|ClassLoader
name|systemClassLoader
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|ClassLoader
name|delegate
decl_stmt|;
DECL|field|delegatedClasses
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|delegatedClasses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|FilteredClassLoader (URL[] urls, ClassLoader parent)
specifier|public
name|FilteredClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|,
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|urls
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|delegatedClasses
operator|.
name|add
argument_list|(
literal|"org.apache.hadoop.fs.ozone.OzoneClientAdapter"
argument_list|)
expr_stmt|;
name|delegatedClasses
operator|.
name|add
argument_list|(
literal|"org.apache.hadoop.fs.ozone.BasicKeyInfo"
argument_list|)
expr_stmt|;
name|delegatedClasses
operator|.
name|add
argument_list|(
literal|"org.apache.hadoop.fs.ozone.OzoneFSOutputStream"
argument_list|)
expr_stmt|;
name|delegatedClasses
operator|.
name|add
argument_list|(
literal|"org.apache.hadoop.fs.Seekable"
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|parent
expr_stmt|;
name|systemClassLoader
operator|=
name|getSystemClassLoader
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadClass (String name)
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|delegatedClasses
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"org.apache.log4j"
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"org.slf4j"
argument_list|)
condition|)
block|{
return|return
name|delegate
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|loadFromSystem (String name)
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|loadFromSystem
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|systemClassLoader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|systemClassLoader
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
comment|//no problem
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

