begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageStatistics
operator|.
name|CommonStatisticNames
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Statistic which are collected in OzoneFileSystem.  * These statistics are available at a low level in  * {@link OzoneFSStorageStatistics}  */
end_comment

begin_enum
DECL|enum|Statistic
specifier|public
enum|enum
name|Statistic
block|{
DECL|enumConstant|OBJECTS_RENAMED
name|OBJECTS_RENAMED
argument_list|(
literal|"objects_renamed"
argument_list|,
literal|"Total number of objects renamed within the object store."
argument_list|)
block|,
DECL|enumConstant|OBJECTS_CREATED
name|OBJECTS_CREATED
argument_list|(
literal|"objects_created"
argument_list|,
literal|"Total number of objects created through the object store."
argument_list|)
block|,
DECL|enumConstant|OBJECTS_DELETED
name|OBJECTS_DELETED
argument_list|(
literal|"objects_deleted"
argument_list|,
literal|"Total number of objects deleted from the object store."
argument_list|)
block|,
DECL|enumConstant|OBJECTS_READ
name|OBJECTS_READ
argument_list|(
literal|"objects_read"
argument_list|,
literal|"Total number of objects read from the object store."
argument_list|)
block|,
DECL|enumConstant|OBJECTS_QUERY
name|OBJECTS_QUERY
argument_list|(
literal|"objects_query"
argument_list|,
literal|"Total number of objects queried from the object store."
argument_list|)
block|,
DECL|enumConstant|OBJECTS_LIST
name|OBJECTS_LIST
argument_list|(
literal|"objects_list"
argument_list|,
literal|"Total number of object list query from the object store."
argument_list|)
block|,
DECL|enumConstant|INVOCATION_COPY_FROM_LOCAL_FILE
name|INVOCATION_COPY_FROM_LOCAL_FILE
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_COPY_FROM_LOCAL_FILE
argument_list|,
literal|"Calls of copyFromLocalFile()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_CREATE
name|INVOCATION_CREATE
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_CREATE
argument_list|,
literal|"Calls of create()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_CREATE_NON_RECURSIVE
name|INVOCATION_CREATE_NON_RECURSIVE
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_CREATE_NON_RECURSIVE
argument_list|,
literal|"Calls of createNonRecursive()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_DELETE
name|INVOCATION_DELETE
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_DELETE
argument_list|,
literal|"Calls of delete()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_EXISTS
name|INVOCATION_EXISTS
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_EXISTS
argument_list|,
literal|"Calls of exists()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_GET_FILE_CHECKSUM
name|INVOCATION_GET_FILE_CHECKSUM
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_GET_FILE_CHECKSUM
argument_list|,
literal|"Calls of getFileChecksum()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_GET_FILE_STATUS
name|INVOCATION_GET_FILE_STATUS
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_GET_FILE_STATUS
argument_list|,
literal|"Calls of getFileStatus()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_GLOB_STATUS
name|INVOCATION_GLOB_STATUS
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_GLOB_STATUS
argument_list|,
literal|"Calls of globStatus()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_IS_DIRECTORY
name|INVOCATION_IS_DIRECTORY
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_IS_DIRECTORY
argument_list|,
literal|"Calls of isDirectory()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_IS_FILE
name|INVOCATION_IS_FILE
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_IS_FILE
argument_list|,
literal|"Calls of isFile()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_LIST_FILES
name|INVOCATION_LIST_FILES
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_LIST_FILES
argument_list|,
literal|"Calls of listFiles()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_LIST_LOCATED_STATUS
name|INVOCATION_LIST_LOCATED_STATUS
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_LIST_LOCATED_STATUS
argument_list|,
literal|"Calls of listLocatedStatus()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_LIST_STATUS
name|INVOCATION_LIST_STATUS
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_LIST_STATUS
argument_list|,
literal|"Calls of listStatus()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_MKDIRS
name|INVOCATION_MKDIRS
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_MKDIRS
argument_list|,
literal|"Calls of mkdirs()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_OPEN
name|INVOCATION_OPEN
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_OPEN
argument_list|,
literal|"Calls of open()"
argument_list|)
block|,
DECL|enumConstant|INVOCATION_RENAME
name|INVOCATION_RENAME
argument_list|(
name|CommonStatisticNames
operator|.
name|OP_RENAME
argument_list|,
literal|"Calls of rename()"
argument_list|)
block|;
DECL|field|SYMBOL_MAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Statistic
argument_list|>
name|SYMBOL_MAP
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|Statistic
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
static|static
block|{
for|for
control|(
name|Statistic
name|stat
range|:
name|values
argument_list|()
control|)
block|{
name|SYMBOL_MAP
operator|.
name|put
argument_list|(
name|stat
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|Statistic (String symbol, String description)
name|Statistic
parameter_list|(
name|String
name|symbol
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|symbol
operator|=
name|symbol
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
DECL|field|symbol
specifier|private
specifier|final
name|String
name|symbol
decl_stmt|;
DECL|field|description
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
DECL|method|getSymbol ()
specifier|public
name|String
name|getSymbol
parameter_list|()
block|{
return|return
name|symbol
return|;
block|}
comment|/**    * Get a statistic from a symbol.    * @param symbol statistic to look up    * @return the value or null.    */
DECL|method|fromSymbol (String symbol)
specifier|public
specifier|static
name|Statistic
name|fromSymbol
parameter_list|(
name|String
name|symbol
parameter_list|)
block|{
return|return
name|SYMBOL_MAP
operator|.
name|get
argument_list|(
name|symbol
argument_list|)
return|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
comment|/**    * The string value is simply the symbol.    * This makes this operation very low cost.    * @return the symbol of this statistic.    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|symbol
return|;
block|}
block|}
end_enum

end_unit

