begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|math
operator|.
name|NumberUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderTokenIssuer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIsNotEmptyDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GlobalStorageStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|DelegationTokenIssuer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|LISTING_PAGE_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|OZONE_DEFAULT_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ozone
operator|.
name|Constants
operator|.
name|OZONE_USER_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_URI_DELIMITER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_URI_SCHEME
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Ozone Filesystem implementation.  *<p>  * This subclass is marked as private as code should not be creating it  * directly; use {@link FileSystem#get(Configuration)} and variants to create  * one. If cast to {@link OzoneFileSystem}, extra methods and features may be  * accessed. Consider those private and unstable.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|OzoneFileSystem
specifier|public
class|class
name|OzoneFileSystem
extends|extends
name|FileSystem
implements|implements
name|KeyProviderTokenIssuer
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * The Ozone client for connecting to Ozone server.    */
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|adapter
specifier|private
name|OzoneClientAdapter
name|adapter
decl_stmt|;
DECL|field|storageStatistics
specifier|private
name|OzoneFSStorageStatistics
name|storageStatistics
decl_stmt|;
DECL|field|URL_SCHEMA_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|URL_SCHEMA_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^\\.]+)\\.([^\\.]+)\\.{0,1}(.*)"
argument_list|)
decl_stmt|;
DECL|field|URI_EXCEPTION_TEXT
specifier|private
specifier|static
specifier|final
name|String
name|URI_EXCEPTION_TEXT
init|=
literal|"Ozone file system url "
operator|+
literal|"should be either one of the two forms: "
operator|+
literal|"o3fs://bucket.volume/key  OR "
operator|+
literal|"o3fs://bucket.volume.om-host.example.com:5678/key"
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
argument_list|,
literal|"No scheme provided in "
operator|+
name|name
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
argument_list|)
argument_list|,
literal|"Invalid scheme provided in "
operator|+
name|name
argument_list|)
expr_stmt|;
name|String
name|authority
init|=
name|name
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|Matcher
name|matcher
init|=
name|URL_SCHEMA_PATTERN
operator|.
name|matcher
argument_list|(
name|authority
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|URI_EXCEPTION_TEXT
argument_list|)
throw|;
block|}
name|String
name|bucketStr
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|volumeStr
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|remaining
init|=
name|matcher
operator|.
name|groupCount
argument_list|()
operator|==
literal|3
condition|?
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|omHost
init|=
literal|null
decl_stmt|;
name|String
name|omPort
init|=
name|String
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|remaining
argument_list|)
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|remaining
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|URI_EXCEPTION_TEXT
argument_list|)
throw|;
block|}
name|omHost
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|omPort
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|NumberUtils
operator|.
name|isParsable
argument_list|(
name|omPort
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|URI_EXCEPTION_TEXT
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|uri
operator|=
operator|new
name|URIBuilder
argument_list|()
operator|.
name|setScheme
argument_list|(
name|OZONE_URI_SCHEME
argument_list|)
operator|.
name|setHost
argument_list|(
name|authority
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ozone URI for ozfs initialization is "
operator|+
name|uri
argument_list|)
expr_stmt|;
comment|//isolated is the default for ozonefs-lib-legacy which includes the
comment|// /ozonefs.txt, otherwise the default is false. It could be overridden.
name|boolean
name|defaultValue
init|=
name|OzoneFileSystem
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"ozonefs.txt"
argument_list|)
operator|!=
literal|null
decl_stmt|;
comment|//Use string here instead of the constant as constant may not be available
comment|//on the classpath of a hadoop 2.7
name|boolean
name|isolatedClassloader
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"ozone.fs.isolated-classloader"
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
try|try
block|{
comment|//register only to the GlobalStorageStatistics if the class exists.
comment|//This is required to support hadoop versions<2.7
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.fs.GlobalStorageStatistics"
argument_list|)
expr_stmt|;
name|storageStatistics
operator|=
operator|(
name|OzoneFSStorageStatistics
operator|)
name|GlobalStorageStatistics
operator|.
name|INSTANCE
operator|.
name|put
argument_list|(
name|OzoneFSStorageStatistics
operator|.
name|NAME
argument_list|,
name|OzoneFSStorageStatistics
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|//we don't support storage statistics for hadoop2.7 and older
block|}
if|if
condition|(
name|isolatedClassloader
condition|)
block|{
try|try
block|{
comment|//register only to the GlobalStorageStatistics if the class exists.
comment|//This is required to support hadoop versions<2.7
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.fs.GlobalStorageStatistics"
argument_list|)
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
name|OzoneClientAdapterFactory
operator|.
name|createAdapter
argument_list|(
name|volumeStr
argument_list|,
name|bucketStr
argument_list|,
name|storageStatistics
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|this
operator|.
name|adapter
operator|=
name|OzoneClientAdapterFactory
operator|.
name|createAdapter
argument_list|(
name|volumeStr
argument_list|,
name|bucketStr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|adapter
operator|=
operator|new
name|OzoneClientAdapterImpl
argument_list|(
name|omHost
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|omPort
argument_list|)
argument_list|,
name|conf
argument_list|,
name|volumeStr
argument_list|,
name|bucketStr
argument_list|,
name|storageStatistics
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|userName
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|OZONE_DEFAULT_USER
expr_stmt|;
block|}
name|this
operator|.
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
name|OZONE_USER_DIR
argument_list|,
name|this
operator|.
name|userName
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|uri
argument_list|,
name|this
operator|.
name|workingDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ue
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Invalid Ozone endpoint "
operator|+
name|name
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|ue
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|ue
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|adapter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|OZONE_URI_SCHEME
return|;
block|}
DECL|method|getFsStatistics ()
name|Statistics
name|getFsStatistics
parameter_list|()
block|{
return|return
name|statistics
return|;
block|}
DECL|method|getOzoneFSOpsCountStatistics ()
name|OzoneFSStorageStatistics
name|getOzoneFSOpsCountStatistics
parameter_list|()
block|{
return|return
name|storageStatistics
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|INVOCATION_OPEN
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"open() path:{}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Can't open directory "
operator|+
name|f
operator|+
literal|" to read"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|OzoneFSInputStream
argument_list|(
name|adapter
operator|.
name|createInputStream
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"create() path:{}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|INVOCATION_CREATE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|f
operator|+
literal|" is a directory"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
comment|// path references a file and overwrite is disabled
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|f
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Overwriting file {}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|deleteObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignored
parameter_list|)
block|{
comment|// this means the file is not found
block|}
comment|// We pass null to FSDataOutputStream so it won't count writes that
comment|// are being buffered to a file
return|return
operator|new
name|FSDataOutputStream
argument_list|(
name|adapter
operator|.
name|createKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createNonRecursive (Path path, FsPermission permission, EnumSet<CreateFlag> flags, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flags
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|INVOCATION_CREATE_NON_RECURSIVE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
comment|// expect this to raise an exception if there is no parent
if|if
condition|(
operator|!
name|getFileStatus
argument_list|(
name|parent
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Not a directory: "
operator|+
name|parent
argument_list|)
throw|;
block|}
block|}
return|return
name|create
argument_list|(
name|path
argument_list|,
name|permission
argument_list|,
name|flags
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"append() Not implemented by the "
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" FileSystem implementation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getKeyProvider ()
specifier|public
name|KeyProvider
name|getKeyProvider
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|adapter
operator|.
name|getKeyProvider
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyProviderUri ()
specifier|public
name|URI
name|getKeyProviderUri
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|adapter
operator|.
name|getKeyProviderUri
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAdditionalTokenIssuers ()
specifier|public
name|DelegationTokenIssuer
index|[]
name|getAdditionalTokenIssuers
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyProvider
name|keyProvider
init|=
name|getKeyProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyProvider
operator|instanceof
name|DelegationTokenIssuer
condition|)
block|{
return|return
operator|new
name|DelegationTokenIssuer
index|[]
block|{
operator|(
name|DelegationTokenIssuer
operator|)
name|keyProvider
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|class|RenameIterator
specifier|private
class|class
name|RenameIterator
extends|extends
name|OzoneListingIterator
block|{
DECL|field|srcKey
specifier|private
specifier|final
name|String
name|srcKey
decl_stmt|;
DECL|field|dstKey
specifier|private
specifier|final
name|String
name|dstKey
decl_stmt|;
DECL|method|RenameIterator (Path srcPath, Path dstPath)
name|RenameIterator
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|srcKey
operator|=
name|pathToKey
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|dstKey
operator|=
name|pathToKey
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"rename from:{} to:{}"
argument_list|,
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processKey (String key)
name|boolean
name|processKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|newKeyName
init|=
name|dstKey
operator|.
name|concat
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|srcKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|adapter
operator|.
name|renameKey
argument_list|(
name|key
argument_list|,
name|newKeyName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Check whether the source and destination path are valid and then perform    * rename from source path to destination path.    *<p>    * The rename operation is performed by renaming the keys with src as prefix.    * For such keys the prefix is changed from src to dst.    *    * @param src source path for rename    * @param dst destination path for rename    * @return true if rename operation succeeded or    * if the src and dst have the same path and are of the same type    * @throws IOException on I/O errors or if the src/dst paths are invalid.    */
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|INVOCATION_RENAME
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|.
name|equals
argument_list|(
name|dst
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"rename() from:{} to:{}"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|.
name|isRoot
argument_list|()
condition|)
block|{
comment|// Cannot rename root of file system
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot rename the root of a filesystem"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Cannot rename a directory to its own subdirectory
name|Path
name|dstParent
init|=
name|dst
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|dstParent
operator|!=
literal|null
operator|&&
operator|!
name|src
operator|.
name|equals
argument_list|(
name|dstParent
argument_list|)
condition|)
block|{
name|dstParent
operator|=
name|dstParent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|dstParent
operator|==
literal|null
argument_list|,
literal|"Cannot rename a directory to its own subdirectory"
argument_list|)
expr_stmt|;
comment|// Check if the source exists
name|FileStatus
name|srcStatus
decl_stmt|;
try|try
block|{
name|srcStatus
operator|=
name|getFileStatus
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// source doesn't exist, return
return|return
literal|false
return|;
block|}
comment|// Check if the destination exists
name|FileStatus
name|dstStatus
decl_stmt|;
try|try
block|{
name|dstStatus
operator|=
name|getFileStatus
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnde
parameter_list|)
block|{
name|dstStatus
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dstStatus
operator|==
literal|null
condition|)
block|{
comment|// If dst doesn't exist, check whether dst parent dir exists or not
comment|// if the parent exists, the source can still be renamed to dst path
name|dstStatus
operator|=
name|getFileStatus
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dstStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, %s is a file"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|,
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// if dst exists and source and destination are same,
comment|// check both the src and dst are of same type
if|if
condition|(
name|srcStatus
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|dstStatus
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|!
name|srcStatus
operator|.
name|isDirectory
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dstStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// If dst is a directory, rename source as subpath of it.
comment|// for example rename /source to /dst will lead to /dst/source
name|dst
operator|=
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|src
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
decl_stmt|;
try|try
block|{
name|statuses
operator|=
name|listStatus
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnde
parameter_list|)
block|{
name|statuses
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|statuses
operator|!=
literal|null
operator|&&
name|statuses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// If dst exists and not a directory not empty
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, file already exists or not empty!"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// If dst is not a directory
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, file already exists!"
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|srcStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|dst
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|src
operator|.
name|toString
argument_list|()
operator|+
name|OZONE_URI_DELIMITER
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot rename a directory to a subdirectory of self"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|RenameIterator
name|iterator
init|=
operator|new
name|RenameIterator
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
decl_stmt|;
return|return
name|iterator
operator|.
name|iterate
argument_list|()
return|;
block|}
DECL|class|DeleteIterator
specifier|private
class|class
name|DeleteIterator
extends|extends
name|OzoneListingIterator
block|{
DECL|field|recursive
specifier|private
name|boolean
name|recursive
decl_stmt|;
DECL|method|DeleteIterator (Path f, boolean recursive)
name|DeleteIterator
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
if|if
condition|(
name|getStatus
argument_list|()
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|recursive
operator|&&
name|listStatus
argument_list|(
name|f
argument_list|)
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|PathIsNotEmptyDirectoryException
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|processKey (String key)
name|boolean
name|processKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Skipping deleting root directory"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"deleting key:"
operator|+
name|key
argument_list|)
expr_stmt|;
name|boolean
name|succeed
init|=
name|adapter
operator|.
name|deleteObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// if recursive delete is requested ignore the return value of
comment|// deleteObject and issue deletes for other keys.
return|return
name|recursive
operator|||
name|succeed
return|;
block|}
block|}
block|}
comment|/**    * Deletes the children of the input dir path by iterating though the    * DeleteIterator.    *    * @param f directory path to be deleted    * @return true if successfully deletes all required keys, false otherwise    * @throws IOException    */
DECL|method|innerDelete (Path f, boolean recursive)
specifier|private
name|boolean
name|innerDelete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"delete() path:{} recursive:{}"
argument_list|,
name|f
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
try|try
block|{
name|DeleteIterator
name|iterator
init|=
operator|new
name|DeleteIterator
argument_list|(
name|f
argument_list|,
name|recursive
argument_list|)
decl_stmt|;
return|return
name|iterator
operator|.
name|iterate
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Couldn't delete {} - does not exist"
argument_list|,
name|f
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|INVOCATION_DELETE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete path {} - recursive {}"
argument_list|,
name|f
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"delete: Path does not exist: {}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|boolean
name|result
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete: Path is a directory: {}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|key
operator|=
name|addTrailingSlashIfNeeded
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot delete root directory."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|result
operator|=
name|innerDelete
argument_list|(
name|f
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete: Path is a file: {}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|result
operator|=
name|adapter
operator|.
name|deleteObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
condition|)
block|{
comment|// If this delete operation removes all files/directories from the
comment|// parent direcotry, then an empty parent directory must be created.
name|Path
name|parent
init|=
name|f
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|createFakeDirectoryIfNecessary
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Create a fake parent directory key if it does not already exist and no    * other child of this parent directory exists.    *    * @param f path to the fake parent directory    * @throws IOException    */
DECL|method|createFakeDirectoryIfNecessary (Path f)
specifier|private
name|void
name|createFakeDirectoryIfNecessary
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|o3Exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating new fake directory at {}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|String
name|dirKey
init|=
name|addTrailingSlashIfNeeded
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|adapter
operator|.
name|createDirectory
argument_list|(
name|dirKey
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check if a file or directory exists corresponding to given path.    *    * @param f path to file/directory.    * @return true if it exists, false otherwise.    * @throws IOException    */
DECL|method|o3Exists (final Path f)
specifier|private
name|boolean
name|o3Exists
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|makeQualified
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|ListStatusIterator
specifier|private
class|class
name|ListStatusIterator
extends|extends
name|OzoneListingIterator
block|{
comment|// _fileStatuses_ maintains a list of file(s) which is either the input
comment|// path itself or a child of the input directory path.
DECL|field|fileStatuses
specifier|private
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileStatuses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|LISTING_PAGE_SIZE
argument_list|)
decl_stmt|;
comment|// _subDirStatuses_ maintains a list of sub-dirs of the input directory
comment|// path.
DECL|field|subDirStatuses
specifier|private
name|Map
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|subDirStatuses
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|LISTING_PAGE_SIZE
argument_list|)
decl_stmt|;
DECL|field|f
specifier|private
name|Path
name|f
decl_stmt|;
comment|// the input path
DECL|method|ListStatusIterator (Path f)
name|ListStatusIterator
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|this
operator|.
name|f
operator|=
name|f
expr_stmt|;
block|}
comment|/**      * Add the key to the listStatus result if the key corresponds to the      * input path or is an immediate child of the input path.      *      * @param key key to be processed      * @return always returns true      * @throws IOException      */
annotation|@
name|Override
DECL|method|processKey (String key)
name|boolean
name|processKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|keyPath
init|=
operator|new
name|Path
argument_list|(
name|OZONE_URI_DELIMITER
operator|+
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|getPathKey
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|pathIsDirectory
argument_list|()
condition|)
block|{
comment|// if input path is a directory, we add the sub-directories and
comment|// files under this directory.
return|return
literal|true
return|;
block|}
else|else
block|{
name|addFileStatus
argument_list|(
name|keyPath
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// Left with only subkeys now
comment|// We add only the immediate child files and sub-dirs i.e. we go only
comment|// upto one level down the directory tree structure.
if|if
condition|(
name|pathToKey
argument_list|(
name|keyPath
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|pathToKey
argument_list|(
name|f
argument_list|)
argument_list|)
condition|)
block|{
comment|// This key is an immediate child. Can be file or directory
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
name|OZONE_URI_DELIMITER
argument_list|)
condition|)
block|{
comment|// Key is a directory
name|addSubDirStatus
argument_list|(
name|keyPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFileStatus
argument_list|(
name|keyPath
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// This key is not the immediate child of the input directory. So we
comment|// traverse the parent tree structure of this key until we get the
comment|// immediate child of the input directory.
name|Path
name|immediateChildPath
init|=
name|getImmediateChildPath
argument_list|(
name|keyPath
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|immediateChildPath
operator|!=
literal|null
condition|)
block|{
name|addSubDirStatus
argument_list|(
name|immediateChildPath
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Adds the FileStatus of keyPath to final result of listStatus.      *      * @param filePath path to the file      * @throws FileNotFoundException      */
DECL|method|addFileStatus (Path filePath)
name|void
name|addFileStatus
parameter_list|(
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|fileStatuses
operator|.
name|add
argument_list|(
name|getFileStatus
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds the FileStatus of the subdir to final result of listStatus, if not      * already included.      *      * @param dirPath path to the dir      * @throws FileNotFoundException      */
DECL|method|addSubDirStatus (Path dirPath)
name|void
name|addSubDirStatus
parameter_list|(
name|Path
name|dirPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check if subdir path is already included in statuses.
if|if
condition|(
operator|!
name|subDirStatuses
operator|.
name|containsKey
argument_list|(
name|dirPath
argument_list|)
condition|)
block|{
name|subDirStatuses
operator|.
name|put
argument_list|(
name|dirPath
argument_list|,
name|getFileStatus
argument_list|(
name|dirPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Traverse the parent directory structure of keyPath to determine the      * which parent/ grand-parent/.. is the immediate child of the input path f.      *      * @param keyPath path whose parent directory structure should be traversed.      * @return immediate child path of the input path f.      */
DECL|method|getImmediateChildPath (Path keyPath)
name|Path
name|getImmediateChildPath
parameter_list|(
name|Path
name|keyPath
parameter_list|)
block|{
name|Path
name|path
init|=
name|keyPath
decl_stmt|;
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pathToKey
argument_list|(
name|parent
argument_list|)
operator|.
name|equals
argument_list|(
name|pathToKey
argument_list|(
name|f
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|path
return|;
block|}
name|path
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|path
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Return the result of listStatus operation. If the input path is a      * file, return the status for only that file. If the input path is a      * directory, return the statuses for all the child files and sub-dirs.      */
DECL|method|getStatuses ()
name|FileStatus
index|[]
name|getStatuses
parameter_list|()
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
init|=
name|Stream
operator|.
name|concat
argument_list|(
name|fileStatuses
operator|.
name|stream
argument_list|()
argument_list|,
name|subDirStatuses
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|INVOCATION_LIST_STATUS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"listStatus() path:{}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|ListStatusIterator
name|iterator
init|=
operator|new
name|ListStatusIterator
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|iterator
operator|.
name|iterate
argument_list|()
expr_stmt|;
return|return
name|iterator
operator|.
name|getStatuses
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
name|workingDir
operator|=
name|newDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken (String renewer)
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|getDelegationToken
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|adapter
operator|.
name|getDelegationToken
argument_list|(
name|renewer
argument_list|)
return|;
block|}
comment|/**    * Get a canonical service name for this file system. If the URI is logical,    * the hostname part of the URI will be returned.    * @return a service string that uniquely identifies this file system.    */
annotation|@
name|Override
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
return|return
name|adapter
operator|.
name|getCanonicalServiceName
argument_list|()
return|;
block|}
comment|/**    * Get the username of the FS.    *    * @return the short name of the user who instantiated the FS    */
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
comment|/**    * Check whether the path is valid and then create directories.    * Directory is represented using a key with no value.    * All the non-existent parent directories are also created.    *    * @param path directory path to be created    * @return true if directory exists or created successfully.    * @throws IOException    */
DECL|method|mkdir (Path path)
specifier|private
name|boolean
name|mkdir
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|fPart
init|=
name|path
decl_stmt|;
name|Path
name|prevfPart
init|=
literal|null
decl_stmt|;
do|do
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"validating path:{}"
argument_list|,
name|fPart
argument_list|)
expr_stmt|;
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|fPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// If path exists and a directory, exit
break|break;
block|}
else|else
block|{
comment|// Found a file here, rollback and delete newly created directories
name|LOG
operator|.
name|trace
argument_list|(
literal|"Found a file with same name as directory, path:{}"
argument_list|,
name|fPart
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevfPart
operator|!=
literal|null
condition|)
block|{
name|delete
argument_list|(
name|prevfPart
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Can't make directory for path '%s', it is a file."
argument_list|,
name|fPart
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"creating directory for fpart:{}"
argument_list|,
name|fPart
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|fPart
argument_list|)
decl_stmt|;
name|String
name|dirKey
init|=
name|addTrailingSlashIfNeeded
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|adapter
operator|.
name|createDirectory
argument_list|(
name|dirKey
argument_list|)
condition|)
block|{
comment|// Directory creation failed here,
comment|// rollback and delete newly created directories
name|LOG
operator|.
name|trace
argument_list|(
literal|"Directory creation failed, path:{}"
argument_list|,
name|fPart
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevfPart
operator|!=
literal|null
condition|)
block|{
name|delete
argument_list|(
name|prevfPart
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
name|prevfPart
operator|=
name|fPart
expr_stmt|;
name|fPart
operator|=
name|fPart
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|fPart
operator|!=
literal|null
condition|)
do|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"mkdir() path:{} "
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|mkdir
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|storageStatistics
operator|!=
literal|null
condition|)
block|{
name|storageStatistics
operator|.
name|incrementCounter
argument_list|(
name|Statistic
operator|.
name|INVOCATION_GET_FILE_STATUS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"getFileStatus() path:{}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|Path
name|qualifiedPath
init|=
name|f
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|qualifiedPath
argument_list|)
decl_stmt|;
return|return
name|adapter
operator|.
name|getFileStatus
argument_list|(
name|key
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|qualifiedPath
argument_list|,
name|getUsername
argument_list|()
argument_list|,
name|getUsername
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Turn a path (relative or otherwise) into an Ozone key.    *    * @param path the path of the file.    * @return the key of the object that represents the file.    */
DECL|method|pathToKey (Path path)
specifier|public
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|path
argument_list|,
literal|"Path canf not be null!"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|// removing leading '/' char
name|String
name|key
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"path for key:{} is:{}"
argument_list|,
name|key
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
comment|/**    * Add trailing delimiter to path if it is already not present.    *    * @param key the ozone Key which needs to be appended    * @return delimiter appended key    */
DECL|method|addTrailingSlashIfNeeded (String key)
specifier|private
name|String
name|addTrailingSlashIfNeeded
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|key
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|endsWith
argument_list|(
name|OZONE_URI_DELIMITER
argument_list|)
condition|)
block|{
return|return
name|key
operator|+
name|OZONE_URI_DELIMITER
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OzoneFileSystem{URI="
operator|+
name|uri
operator|+
literal|", "
operator|+
literal|"workingDir="
operator|+
name|workingDir
operator|+
literal|", "
operator|+
literal|"userName="
operator|+
name|userName
operator|+
literal|", "
operator|+
literal|"statistics="
operator|+
name|statistics
operator|+
literal|"}"
return|;
block|}
comment|/**    * This class provides an interface to iterate through all the keys in the    * bucket prefixed with the input path key and process them.    *<p>    * Each implementing class should define how the keys should be processed    * through the processKey() function.    */
DECL|class|OzoneListingIterator
specifier|private
specifier|abstract
class|class
name|OzoneListingIterator
block|{
DECL|field|path
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|status
specifier|private
specifier|final
name|FileStatus
name|status
decl_stmt|;
DECL|field|pathKey
specifier|private
name|String
name|pathKey
decl_stmt|;
DECL|field|keyIterator
specifier|private
name|Iterator
argument_list|<
name|BasicKeyInfo
argument_list|>
name|keyIterator
decl_stmt|;
DECL|method|OzoneListingIterator (Path path)
name|OzoneListingIterator
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|pathKey
operator|=
name|pathToKey
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|this
operator|.
name|pathKey
operator|=
name|addTrailingSlashIfNeeded
argument_list|(
name|pathKey
argument_list|)
expr_stmt|;
block|}
name|keyIterator
operator|=
name|adapter
operator|.
name|listKeys
argument_list|(
name|pathKey
argument_list|)
expr_stmt|;
block|}
comment|/**      * The output of processKey determines if further iteration through the      * keys should be done or not.      *      * @return true if we should continue iteration of keys, false otherwise.      * @throws IOException      */
DECL|method|processKey (String key)
specifier|abstract
name|boolean
name|processKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Iterates thorugh all the keys prefixed with the input path's key and      * processes the key though processKey().      * If for any key, the processKey() returns false, then the iteration is      * stopped and returned with false indicating that all the keys could not      * be processed successfully.      *      * @return true if all keys are processed successfully, false otherwise.      * @throws IOException      */
DECL|method|iterate ()
name|boolean
name|iterate
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Iterating path {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Iterating directory:{}"
argument_list|,
name|pathKey
argument_list|)
expr_stmt|;
while|while
condition|(
name|keyIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BasicKeyInfo
name|key
init|=
name|keyIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"iterating key:{}"
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|processKey
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"iterating file:{}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|processKey
argument_list|(
name|pathKey
argument_list|)
return|;
block|}
block|}
DECL|method|getPathKey ()
name|String
name|getPathKey
parameter_list|()
block|{
return|return
name|pathKey
return|;
block|}
DECL|method|pathIsDirectory ()
name|boolean
name|pathIsDirectory
parameter_list|()
block|{
return|return
name|status
operator|.
name|isDirectory
argument_list|()
return|;
block|}
DECL|method|getStatus ()
name|FileStatus
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
block|}
block|}
end_class

end_unit

