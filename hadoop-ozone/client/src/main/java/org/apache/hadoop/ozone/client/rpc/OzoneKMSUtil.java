begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CryptoProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
operator|.
name|EncryptedKeyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_comment
comment|/**  * KMS utility class for Ozone Data Encryption At-Rest.  */
end_comment

begin_class
DECL|class|OzoneKMSUtil
specifier|public
specifier|final
class|class
name|OzoneKMSUtil
block|{
DECL|field|UTF8_CSN
specifier|private
specifier|static
specifier|final
name|String
name|UTF8_CSN
init|=
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
decl_stmt|;
DECL|field|O3_KMS_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|O3_KMS_PREFIX
init|=
literal|"ozone-kms-"
decl_stmt|;
DECL|field|keyProviderUriKeyName
specifier|private
specifier|static
name|String
name|keyProviderUriKeyName
init|=
literal|"hadoop.security.key.provider.path"
decl_stmt|;
DECL|method|OzoneKMSUtil ()
specifier|private
name|OzoneKMSUtil
parameter_list|()
block|{   }
DECL|method|decryptEncryptedDataEncryptionKey ( FileEncryptionInfo feInfo, KeyProvider keyProvider)
specifier|public
specifier|static
name|KeyProvider
operator|.
name|KeyVersion
name|decryptEncryptedDataEncryptionKey
parameter_list|(
name|FileEncryptionInfo
name|feInfo
parameter_list|,
name|KeyProvider
name|keyProvider
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|keyProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No KeyProvider is configured, "
operator|+
literal|"cannot access an encrypted file"
argument_list|)
throw|;
block|}
else|else
block|{
name|EncryptedKeyVersion
name|ekv
init|=
name|EncryptedKeyVersion
operator|.
name|createForDecryption
argument_list|(
name|feInfo
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|feInfo
operator|.
name|getEzKeyVersionName
argument_list|()
argument_list|,
name|feInfo
operator|.
name|getIV
argument_list|()
argument_list|,
name|feInfo
operator|.
name|getEncryptedDataEncryptionKey
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|KeyProviderCryptoExtension
name|cryptoProvider
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|keyProvider
argument_list|)
decl_stmt|;
return|return
name|cryptoProvider
operator|.
name|decryptEncryptedKey
argument_list|(
name|ekv
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|gse
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|gse
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Returns a key to map ozone uri to key provider uri.    * Tasks will lookup this key to find key Provider.    */
DECL|method|getKeyProviderMapKey (URI namespaceUri)
specifier|public
specifier|static
name|Text
name|getKeyProviderMapKey
parameter_list|(
name|URI
name|namespaceUri
parameter_list|)
block|{
return|return
operator|new
name|Text
argument_list|(
name|O3_KMS_PREFIX
operator|+
name|namespaceUri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|namespaceUri
operator|.
name|getAuthority
argument_list|()
argument_list|)
return|;
block|}
DECL|method|bytes2String (byte[] bytes)
specifier|public
specifier|static
name|String
name|bytes2String
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|bytes2String
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|bytes2String (byte[] bytes, int offset, int length)
specifier|private
specifier|static
name|String
name|bytes2String
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|UTF8_CSN
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"UTF8 encoding is not supported"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getKeyProviderUri (UserGroupInformation ugi, URI namespaceUri, String kmsUriSrv, Configuration conf)
specifier|public
specifier|static
name|URI
name|getKeyProviderUri
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|URI
name|namespaceUri
parameter_list|,
name|String
name|kmsUriSrv
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|keyProviderUri
init|=
literal|null
decl_stmt|;
name|Credentials
name|credentials
init|=
name|ugi
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|Text
name|credsKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|namespaceUri
operator|!=
literal|null
condition|)
block|{
comment|// from ugi
name|credsKey
operator|=
name|getKeyProviderMapKey
argument_list|(
name|namespaceUri
argument_list|)
expr_stmt|;
name|byte
index|[]
name|keyProviderUriBytes
init|=
name|credentials
operator|.
name|getSecretKey
argument_list|(
name|credsKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyProviderUriBytes
operator|!=
literal|null
condition|)
block|{
name|keyProviderUri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|bytes2String
argument_list|(
name|keyProviderUriBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|keyProviderUri
operator|==
literal|null
condition|)
block|{
comment|// from client conf
if|if
condition|(
name|kmsUriSrv
operator|==
literal|null
condition|)
block|{
name|keyProviderUri
operator|=
name|KMSUtil
operator|.
name|getKeyProviderUri
argument_list|(
name|conf
argument_list|,
name|keyProviderUriKeyName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|kmsUriSrv
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// from om server
name|keyProviderUri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|kmsUriSrv
argument_list|)
expr_stmt|;
block|}
block|}
comment|// put back into UGI
if|if
condition|(
name|keyProviderUri
operator|!=
literal|null
operator|&&
name|credsKey
operator|!=
literal|null
condition|)
block|{
name|credentials
operator|.
name|addSecretKey
argument_list|(
name|credsKey
argument_list|,
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|keyProviderUri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|keyProviderUri
return|;
block|}
DECL|method|getKeyProvider (final Configuration conf, final URI serverProviderUri)
specifier|public
specifier|static
name|KeyProvider
name|getKeyProvider
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|URI
name|serverProviderUri
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|serverProviderUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"KMS serverProviderUri is not configured."
argument_list|)
throw|;
block|}
return|return
name|KMSUtil
operator|.
name|createKeyProviderFromUri
argument_list|(
name|conf
argument_list|,
name|serverProviderUri
argument_list|)
return|;
block|}
DECL|method|getCryptoProtocolVersion ( FileEncryptionInfo feInfo)
specifier|public
specifier|static
name|CryptoProtocolVersion
name|getCryptoProtocolVersion
parameter_list|(
name|FileEncryptionInfo
name|feInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|CryptoProtocolVersion
name|version
init|=
name|feInfo
operator|.
name|getCryptoProtocolVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|CryptoProtocolVersion
operator|.
name|supports
argument_list|(
name|version
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Client does not support specified "
operator|+
literal|"CryptoProtocolVersion "
operator|+
name|version
operator|.
name|getDescription
argument_list|()
operator|+
literal|" version number"
operator|+
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|version
return|;
block|}
block|}
DECL|method|checkCryptoProtocolVersion ( FileEncryptionInfo feInfo)
specifier|public
specifier|static
name|void
name|checkCryptoProtocolVersion
parameter_list|(
name|FileEncryptionInfo
name|feInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|CryptoProtocolVersion
name|version
init|=
name|feInfo
operator|.
name|getCryptoProtocolVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|CryptoProtocolVersion
operator|.
name|supports
argument_list|(
name|version
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Client does not support specified "
operator|+
literal|"CryptoProtocolVersion "
operator|+
name|version
operator|.
name|getDescription
argument_list|()
operator|+
literal|" version number"
operator|+
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getCryptoCodec (Configuration conf, FileEncryptionInfo feInfo)
specifier|public
specifier|static
name|CryptoCodec
name|getCryptoCodec
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileEncryptionInfo
name|feInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|CipherSuite
name|suite
init|=
name|feInfo
operator|.
name|getCipherSuite
argument_list|()
decl_stmt|;
if|if
condition|(
name|suite
operator|.
name|equals
argument_list|(
name|CipherSuite
operator|.
name|UNKNOWN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NameNode specified unknown CipherSuite with ID "
operator|+
name|suite
operator|.
name|getUnknownValue
argument_list|()
operator|+
literal|", cannot instantiate CryptoCodec."
argument_list|)
throw|;
block|}
else|else
block|{
name|CryptoCodec
name|codec
init|=
name|CryptoCodec
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
name|suite
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"No configuration found for the cipher suite "
operator|+
name|suite
operator|.
name|getConfigSuffix
argument_list|()
operator|+
literal|" prefixed with "
operator|+
literal|"hadoop.security.crypto.codec.classes. Please see the"
operator|+
literal|" example configuration hadoop.security.crypto.codec.classes."
operator|+
literal|"EXAMPLE CIPHER SUITE at core-default.xml for details."
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|UNKNOWN_CIPHER_SUITE
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|codec
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

