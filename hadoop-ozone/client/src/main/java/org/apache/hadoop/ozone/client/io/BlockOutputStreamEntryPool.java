begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ExcludeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|BufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocol
operator|.
name|OzoneManagerProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_comment
comment|/**  * This class manages the stream entries list and handles block allocation  * from OzoneManager.  */
end_comment

begin_class
DECL|class|BlockOutputStreamEntryPool
specifier|public
class|class
name|BlockOutputStreamEntryPool
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockOutputStreamEntryPool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|streamEntries
specifier|private
specifier|final
name|List
argument_list|<
name|BlockOutputStreamEntry
argument_list|>
name|streamEntries
decl_stmt|;
DECL|field|currentStreamIndex
specifier|private
name|int
name|currentStreamIndex
decl_stmt|;
DECL|field|omClient
specifier|private
specifier|final
name|OzoneManagerProtocol
name|omClient
decl_stmt|;
DECL|field|keyArgs
specifier|private
specifier|final
name|OmKeyArgs
name|keyArgs
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
specifier|final
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
DECL|field|requestID
specifier|private
specifier|final
name|String
name|requestID
decl_stmt|;
DECL|field|streamBufferFlushSize
specifier|private
specifier|final
name|long
name|streamBufferFlushSize
decl_stmt|;
DECL|field|streamBufferMaxSize
specifier|private
specifier|final
name|long
name|streamBufferMaxSize
decl_stmt|;
DECL|field|watchTimeout
specifier|private
specifier|final
name|long
name|watchTimeout
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|long
name|blockSize
decl_stmt|;
DECL|field|bytesPerChecksum
specifier|private
specifier|final
name|int
name|bytesPerChecksum
decl_stmt|;
DECL|field|checksumType
specifier|private
specifier|final
name|ContainerProtos
operator|.
name|ChecksumType
name|checksumType
decl_stmt|;
DECL|field|bufferPool
specifier|private
specifier|final
name|BufferPool
name|bufferPool
decl_stmt|;
DECL|field|commitUploadPartInfo
specifier|private
name|OmMultipartCommitUploadPartInfo
name|commitUploadPartInfo
decl_stmt|;
DECL|field|openID
specifier|private
specifier|final
name|long
name|openID
decl_stmt|;
DECL|field|excludeList
specifier|private
name|ExcludeList
name|excludeList
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"parameternumber"
argument_list|)
DECL|method|BlockOutputStreamEntryPool (OzoneManagerProtocol omClient, int chunkSize, String requestId, HddsProtos.ReplicationFactor factor, HddsProtos.ReplicationType type, long bufferFlushSize, long bufferMaxSize, long size, long watchTimeout, ContainerProtos.ChecksumType checksumType, int bytesPerChecksum, String uploadID, int partNumber, boolean isMultipart, OmKeyInfo info, XceiverClientManager xceiverClientManager, long openID)
specifier|public
name|BlockOutputStreamEntryPool
parameter_list|(
name|OzoneManagerProtocol
name|omClient
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|String
name|requestId
parameter_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
name|factor
parameter_list|,
name|HddsProtos
operator|.
name|ReplicationType
name|type
parameter_list|,
name|long
name|bufferFlushSize
parameter_list|,
name|long
name|bufferMaxSize
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|watchTimeout
parameter_list|,
name|ContainerProtos
operator|.
name|ChecksumType
name|checksumType
parameter_list|,
name|int
name|bytesPerChecksum
parameter_list|,
name|String
name|uploadID
parameter_list|,
name|int
name|partNumber
parameter_list|,
name|boolean
name|isMultipart
parameter_list|,
name|OmKeyInfo
name|info
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|long
name|openID
parameter_list|)
block|{
name|streamEntries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|currentStreamIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|omClient
operator|=
name|omClient
expr_stmt|;
name|this
operator|.
name|keyArgs
operator|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|info
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|info
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|info
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|setFactor
argument_list|(
name|factor
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|info
operator|.
name|getDataSize
argument_list|()
argument_list|)
operator|.
name|setIsMultipartKey
argument_list|(
name|isMultipart
argument_list|)
operator|.
name|setMultipartUploadID
argument_list|(
name|uploadID
argument_list|)
operator|.
name|setMultipartUploadPartNumber
argument_list|(
name|partNumber
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
name|xceiverClientManager
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|requestID
operator|=
name|requestId
expr_stmt|;
name|this
operator|.
name|streamBufferFlushSize
operator|=
name|bufferFlushSize
expr_stmt|;
name|this
operator|.
name|streamBufferMaxSize
operator|=
name|bufferMaxSize
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|watchTimeout
operator|=
name|watchTimeout
expr_stmt|;
name|this
operator|.
name|bytesPerChecksum
operator|=
name|bytesPerChecksum
expr_stmt|;
name|this
operator|.
name|checksumType
operator|=
name|checksumType
expr_stmt|;
name|this
operator|.
name|openID
operator|=
name|openID
expr_stmt|;
name|this
operator|.
name|excludeList
operator|=
operator|new
name|ExcludeList
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|chunkSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|streamBufferFlushSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|streamBufferMaxSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|blockSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|streamBufferFlushSize
operator|%
name|chunkSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|streamBufferMaxSize
operator|%
name|streamBufferFlushSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|blockSize
operator|%
name|streamBufferMaxSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferPool
operator|=
operator|new
name|BufferPool
argument_list|(
name|chunkSize
argument_list|,
operator|(
name|int
operator|)
name|streamBufferMaxSize
operator|/
name|chunkSize
argument_list|,
name|xceiverClientManager
operator|.
name|byteBufferToByteStringConversion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A constructor for testing purpose only.    *    * @see KeyOutputStream#KeyOutputStream()    */
annotation|@
name|VisibleForTesting
DECL|method|BlockOutputStreamEntryPool ()
name|BlockOutputStreamEntryPool
parameter_list|()
block|{
name|streamEntries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|omClient
operator|=
literal|null
expr_stmt|;
name|keyArgs
operator|=
literal|null
expr_stmt|;
name|xceiverClientManager
operator|=
literal|null
expr_stmt|;
name|chunkSize
operator|=
literal|0
expr_stmt|;
name|requestID
operator|=
literal|null
expr_stmt|;
name|streamBufferFlushSize
operator|=
literal|0
expr_stmt|;
name|streamBufferMaxSize
operator|=
literal|0
expr_stmt|;
name|bufferPool
operator|=
operator|new
name|BufferPool
argument_list|(
name|chunkSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|watchTimeout
operator|=
literal|0
expr_stmt|;
name|blockSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|checksumType
operator|=
name|ContainerProtos
operator|.
name|ChecksumType
operator|.
name|valueOf
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_CHECKSUM_TYPE_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytesPerChecksum
operator|=
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_BYTES_PER_CHECKSUM_DEFAULT_BYTES
expr_stmt|;
comment|// Default is 1MB
name|currentStreamIndex
operator|=
literal|0
expr_stmt|;
name|openID
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**    * When a key is opened, it is possible that there are some blocks already    * allocated to it for this open session. In this case, to make use of these    * blocks, we need to add these blocks to stream entries. But, a key's version    * also includes blocks from previous versions, we need to avoid adding these    * old blocks to stream entries, because these old blocks should not be picked    * for write. To do this, the following method checks that, only those    * blocks created in this particular open version are added to stream entries.    *    * @param version the set of blocks that are pre-allocated.    * @param openVersion the version corresponding to the pre-allocation.    * @throws IOException    */
DECL|method|addPreallocateBlocks (OmKeyLocationInfoGroup version, long openVersion)
specifier|public
name|void
name|addPreallocateBlocks
parameter_list|(
name|OmKeyLocationInfoGroup
name|version
parameter_list|,
name|long
name|openVersion
parameter_list|)
throws|throws
name|IOException
block|{
comment|// server may return any number of blocks, (0 to any)
comment|// only the blocks allocated in this open session (block createVersion
comment|// equals to open session version)
for|for
control|(
name|OmKeyLocationInfo
name|subKeyInfo
range|:
name|version
operator|.
name|getLocationList
argument_list|()
control|)
block|{
if|if
condition|(
name|subKeyInfo
operator|.
name|getCreateVersion
argument_list|()
operator|==
name|openVersion
condition|)
block|{
name|addKeyLocationInfo
argument_list|(
name|subKeyInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addKeyLocationInfo (OmKeyLocationInfo subKeyInfo)
specifier|private
name|void
name|addKeyLocationInfo
parameter_list|(
name|OmKeyLocationInfo
name|subKeyInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|subKeyInfo
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addToken
argument_list|(
name|subKeyInfo
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|BlockOutputStreamEntry
operator|.
name|Builder
name|builder
init|=
operator|new
name|BlockOutputStreamEntry
operator|.
name|Builder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|subKeyInfo
operator|.
name|getBlockID
argument_list|()
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyArgs
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setXceiverClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|subKeyInfo
operator|.
name|getPipeline
argument_list|()
argument_list|)
operator|.
name|setRequestId
argument_list|(
name|requestID
argument_list|)
operator|.
name|setChunkSize
argument_list|(
name|chunkSize
argument_list|)
operator|.
name|setLength
argument_list|(
name|subKeyInfo
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|setStreamBufferFlushSize
argument_list|(
name|streamBufferFlushSize
argument_list|)
operator|.
name|setStreamBufferMaxSize
argument_list|(
name|streamBufferMaxSize
argument_list|)
operator|.
name|setWatchTimeout
argument_list|(
name|watchTimeout
argument_list|)
operator|.
name|setbufferPool
argument_list|(
name|bufferPool
argument_list|)
operator|.
name|setChecksumType
argument_list|(
name|checksumType
argument_list|)
operator|.
name|setBytesPerChecksum
argument_list|(
name|bytesPerChecksum
argument_list|)
operator|.
name|setToken
argument_list|(
name|subKeyInfo
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|streamEntries
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocationInfoList ()
specifier|public
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|getLocationInfoList
parameter_list|()
block|{
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locationInfoList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockOutputStreamEntry
name|streamEntry
range|:
name|streamEntries
control|)
block|{
name|long
name|length
init|=
name|streamEntry
operator|.
name|getCurrentPosition
argument_list|()
decl_stmt|;
comment|// Commit only those blocks to OzoneManager which are not empty
if|if
condition|(
name|length
operator|!=
literal|0
condition|)
block|{
name|OmKeyLocationInfo
name|info
init|=
operator|new
name|OmKeyLocationInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|streamEntry
operator|.
name|getBlockID
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|streamEntry
operator|.
name|getCurrentPosition
argument_list|()
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|setToken
argument_list|(
name|streamEntry
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|streamEntry
operator|.
name|getPipeline
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|locationInfoList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"block written "
operator|+
name|streamEntry
operator|.
name|getBlockID
argument_list|()
operator|+
literal|", length "
operator|+
name|length
operator|+
literal|" bcsID "
operator|+
name|streamEntry
operator|.
name|getBlockID
argument_list|()
operator|.
name|getBlockCommitSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|locationInfoList
return|;
block|}
comment|/**    * Discards the subsequent pre allocated blocks and removes the streamEntries    * from the streamEntries list for the container which is closed.    * @param containerID id of the closed container    * @param pipelineId id of the associated pipeline    */
DECL|method|discardPreallocatedBlocks (long containerID, PipelineID pipelineId)
name|void
name|discardPreallocatedBlocks
parameter_list|(
name|long
name|containerID
parameter_list|,
name|PipelineID
name|pipelineId
parameter_list|)
block|{
comment|// currentStreamIndex< streamEntries.size() signifies that, there are still
comment|// pre allocated blocks available.
comment|// This will be called only to discard the next subsequent unused blocks
comment|// in the streamEntryList.
if|if
condition|(
name|currentStreamIndex
operator|+
literal|1
operator|<
name|streamEntries
operator|.
name|size
argument_list|()
condition|)
block|{
name|ListIterator
argument_list|<
name|BlockOutputStreamEntry
argument_list|>
name|streamEntryIterator
init|=
name|streamEntries
operator|.
name|listIterator
argument_list|(
name|currentStreamIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|streamEntryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BlockOutputStreamEntry
name|streamEntry
init|=
name|streamEntryIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|streamEntry
operator|.
name|getCurrentPosition
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|pipelineId
operator|!=
literal|null
operator|&&
name|streamEntry
operator|.
name|getPipeline
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|pipelineId
argument_list|)
operator|)
operator|||
operator|(
name|containerID
operator|!=
operator|-
literal|1
operator|&&
name|streamEntry
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
operator|==
name|containerID
operator|)
condition|)
block|{
name|streamEntryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getStreamEntries ()
name|List
argument_list|<
name|BlockOutputStreamEntry
argument_list|>
name|getStreamEntries
parameter_list|()
block|{
return|return
name|streamEntries
return|;
block|}
DECL|method|getXceiverClientManager ()
name|XceiverClientManager
name|getXceiverClientManager
parameter_list|()
block|{
return|return
name|xceiverClientManager
return|;
block|}
DECL|method|getKeyName ()
name|String
name|getKeyName
parameter_list|()
block|{
return|return
name|keyArgs
operator|.
name|getKeyName
argument_list|()
return|;
block|}
DECL|method|getKeyLength ()
name|long
name|getKeyLength
parameter_list|()
block|{
return|return
name|streamEntries
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getCurrentPosition
argument_list|()
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
comment|/**    * Contact OM to get a new block. Set the new block with the index (e.g.    * first block has index = 0, second has index = 1 etc.)    *    * The returned block is made to new BlockOutputStreamEntry to write.    *    * @throws IOException    */
DECL|method|allocateNewBlock ()
specifier|private
name|void
name|allocateNewBlock
parameter_list|()
throws|throws
name|IOException
block|{
name|OmKeyLocationInfo
name|subKeyInfo
init|=
name|omClient
operator|.
name|allocateBlock
argument_list|(
name|keyArgs
argument_list|,
name|openID
argument_list|,
name|excludeList
argument_list|)
decl_stmt|;
name|addKeyLocationInfo
argument_list|(
name|subKeyInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|commitKey (long offset)
name|void
name|commitKey
parameter_list|(
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|keyArgs
operator|!=
literal|null
condition|)
block|{
comment|// in test, this could be null
name|long
name|length
init|=
name|getKeyLength
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|offset
operator|==
name|length
argument_list|)
expr_stmt|;
name|keyArgs
operator|.
name|setDataSize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|keyArgs
operator|.
name|setLocationInfoList
argument_list|(
name|getLocationInfoList
argument_list|()
argument_list|)
expr_stmt|;
comment|// When the key is multipart upload part file upload, we should not
comment|// commit the key, as this is not an actual key, this is a just a
comment|// partial key of a large file.
if|if
condition|(
name|keyArgs
operator|.
name|getIsMultipartKey
argument_list|()
condition|)
block|{
name|commitUploadPartInfo
operator|=
name|omClient
operator|.
name|commitMultipartUploadPart
argument_list|(
name|keyArgs
argument_list|,
name|openID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|omClient
operator|.
name|commitKey
argument_list|(
name|keyArgs
argument_list|,
name|openID
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Closing KeyOutputStream, but key args is null"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCurrentStreamEntry ()
specifier|public
name|BlockOutputStreamEntry
name|getCurrentStreamEntry
parameter_list|()
block|{
if|if
condition|(
name|streamEntries
operator|.
name|isEmpty
argument_list|()
operator|||
name|streamEntries
operator|.
name|size
argument_list|()
operator|<=
name|currentStreamIndex
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|streamEntries
operator|.
name|get
argument_list|(
name|currentStreamIndex
argument_list|)
return|;
block|}
block|}
DECL|method|allocateBlockIfNeeded ()
name|BlockOutputStreamEntry
name|allocateBlockIfNeeded
parameter_list|()
throws|throws
name|IOException
block|{
name|BlockOutputStreamEntry
name|streamEntry
init|=
name|getCurrentStreamEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|streamEntry
operator|!=
literal|null
operator|&&
name|streamEntry
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// a stream entry gets closed either by :
comment|// a. If the stream gets full
comment|// b. it has encountered an exception
name|currentStreamIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|streamEntries
operator|.
name|size
argument_list|()
operator|<=
name|currentStreamIndex
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|omClient
argument_list|)
expr_stmt|;
comment|// allocate a new block, if a exception happens, log an error and
comment|// throw exception to the caller directly, and the write fails.
name|int
name|succeededAllocates
init|=
literal|0
decl_stmt|;
try|try
block|{
name|allocateNewBlock
argument_list|()
expr_stmt|;
name|succeededAllocates
operator|+=
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Try to allocate more blocks for write failed, already "
operator|+
literal|"allocated {} blocks for this write."
argument_list|,
name|succeededAllocates
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|// in theory, this condition should never violate due the check above
comment|// still do a sanity check.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|currentStreamIndex
operator|<
name|streamEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BlockOutputStreamEntry
name|current
init|=
name|streamEntries
operator|.
name|get
argument_list|(
name|currentStreamIndex
argument_list|)
decl_stmt|;
return|return
name|current
return|;
block|}
DECL|method|computeBufferData ()
name|long
name|computeBufferData
parameter_list|()
block|{
return|return
name|bufferPool
operator|.
name|computeBufferData
argument_list|()
return|;
block|}
DECL|method|cleanup ()
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|excludeList
operator|!=
literal|null
condition|)
block|{
name|excludeList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|excludeList
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|bufferPool
operator|!=
literal|null
condition|)
block|{
name|bufferPool
operator|.
name|clearBufferPool
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|streamEntries
operator|!=
literal|null
condition|)
block|{
name|streamEntries
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getCommitUploadPartInfo ()
specifier|public
name|OmMultipartCommitUploadPartInfo
name|getCommitUploadPartInfo
parameter_list|()
block|{
return|return
name|commitUploadPartInfo
return|;
block|}
DECL|method|getExcludeList ()
specifier|public
name|ExcludeList
name|getExcludeList
parameter_list|()
block|{
return|return
name|excludeList
return|;
block|}
DECL|method|getStreamBufferMaxSize ()
specifier|public
name|long
name|getStreamBufferMaxSize
parameter_list|()
block|{
return|return
name|streamBufferMaxSize
return|;
block|}
DECL|method|isEmpty ()
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|streamEntries
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

