begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSExceptionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|BlockInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Maintaining a list of BlockInputStream. Read based on offset.  */
end_comment

begin_class
DECL|class|KeyInputStream
specifier|public
class|class
name|KeyInputStream
extends|extends
name|InputStream
implements|implements
name|Seekable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeyInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EOF
specifier|private
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
DECL|field|length
specifier|private
name|long
name|length
init|=
literal|0
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|// List of BlockInputStreams, one for each block in the key
DECL|field|blockStreams
specifier|private
specifier|final
name|List
argument_list|<
name|BlockInputStream
argument_list|>
name|blockStreams
decl_stmt|;
comment|// blockOffsets[i] stores the index of the first data byte in
comment|// blockStream w.r.t the key data.
comment|// For example, letâs say the block size is 200 bytes and block[0] stores
comment|// data from indices 0 - 199, block[1] from indices 200 - 399 and so on.
comment|// Then, blockOffset[0] = 0 (the offset of the first byte of data in
comment|// block[0]), blockOffset[1] = 200 and so on.
DECL|field|blockOffsets
specifier|private
name|long
index|[]
name|blockOffsets
init|=
literal|null
decl_stmt|;
comment|// Index of the blockStream corresponding to the current position of the
comment|// KeyInputStream i.e. offset of the data to be read next
DECL|field|blockIndex
specifier|private
name|int
name|blockIndex
decl_stmt|;
comment|// Tracks the blockIndex corresponding to the last seeked position so that it
comment|// can be reset if a new position is seeked.
DECL|field|blockIndexOfPrevPosition
specifier|private
name|int
name|blockIndexOfPrevPosition
decl_stmt|;
DECL|method|KeyInputStream ()
specifier|public
name|KeyInputStream
parameter_list|()
block|{
name|blockStreams
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|blockIndex
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * For each block in keyInfo, add a BlockInputStream to blockStreams.    */
DECL|method|getFromOmKeyInfo (OmKeyInfo keyInfo, XceiverClientManager xceiverClientManager, boolean verifyChecksum)
specifier|public
specifier|static
name|LengthInputStream
name|getFromOmKeyInfo
parameter_list|(
name|OmKeyInfo
name|keyInfo
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|)
block|{
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|keyLocationInfos
init|=
name|keyInfo
operator|.
name|getLatestVersionLocations
argument_list|()
operator|.
name|getBlocksLatestVersionOnly
argument_list|()
decl_stmt|;
name|KeyInputStream
name|keyInputStream
init|=
operator|new
name|KeyInputStream
argument_list|()
decl_stmt|;
name|keyInputStream
operator|.
name|initialize
argument_list|(
name|keyInfo
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|keyLocationInfos
argument_list|,
name|xceiverClientManager
argument_list|,
name|verifyChecksum
argument_list|)
expr_stmt|;
return|return
operator|new
name|LengthInputStream
argument_list|(
name|keyInputStream
argument_list|,
name|keyInputStream
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|initialize (String keyName, List<OmKeyLocationInfo> blockInfos, XceiverClientManager xceiverClientManager, boolean verifyChecksum)
specifier|private
specifier|synchronized
name|void
name|initialize
parameter_list|(
name|String
name|keyName
parameter_list|,
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|blockInfos
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|keyName
expr_stmt|;
name|this
operator|.
name|blockOffsets
operator|=
operator|new
name|long
index|[
name|blockInfos
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|long
name|keyLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|OmKeyLocationInfo
name|omKeyLocationInfo
init|=
name|blockInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding stream for accessing {}. The stream will be "
operator|+
literal|"initialized later."
argument_list|,
name|omKeyLocationInfo
argument_list|)
expr_stmt|;
name|addStream
argument_list|(
name|omKeyLocationInfo
argument_list|,
name|xceiverClientManager
argument_list|,
name|verifyChecksum
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockOffsets
index|[
name|i
index|]
operator|=
name|keyLength
expr_stmt|;
name|keyLength
operator|+=
name|omKeyLocationInfo
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|length
operator|=
name|keyLength
expr_stmt|;
block|}
comment|/**    * Append another BlockInputStream to the end of the list. Note that the    * BlockInputStream is only created here and not initialized. The    * BlockInputStream is initialized when a read operation is performed on    * the block for the first time.    */
DECL|method|addStream (OmKeyLocationInfo blockInfo, XceiverClientManager xceiverClientMngr, boolean verifyChecksum)
specifier|private
specifier|synchronized
name|void
name|addStream
parameter_list|(
name|OmKeyLocationInfo
name|blockInfo
parameter_list|,
name|XceiverClientManager
name|xceiverClientMngr
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|)
block|{
name|blockStreams
operator|.
name|add
argument_list|(
operator|new
name|BlockInputStream
argument_list|(
name|blockInfo
operator|.
name|getBlockID
argument_list|()
argument_list|,
name|blockInfo
operator|.
name|getLength
argument_list|()
argument_list|,
name|blockInfo
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|blockInfo
operator|.
name|getToken
argument_list|()
argument_list|,
name|verifyChecksum
argument_list|,
name|xceiverClientMngr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|addStream (BlockInputStream blockInputStream)
specifier|public
name|void
name|addStream
parameter_list|(
name|BlockInputStream
name|blockInputStream
parameter_list|)
block|{
name|blockStreams
operator|.
name|add
argument_list|(
name|blockInputStream
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|==
name|EOF
condition|)
block|{
return|return
name|EOF
return|;
block|}
return|return
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|buf
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|len
argument_list|>
name|b
operator|.
name|length
operator|-
name|off
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|totalReadLen
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
comment|// if we are at the last block and have read the entire block, return
if|if
condition|(
name|blockStreams
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|(
name|blockStreams
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<=
name|blockIndex
operator|&&
name|blockStreams
operator|.
name|get
argument_list|(
name|blockIndex
argument_list|)
operator|.
name|getRemaining
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return
name|totalReadLen
operator|==
literal|0
condition|?
name|EOF
else|:
name|totalReadLen
return|;
block|}
comment|// Get the current blockStream and read data from it
name|BlockInputStream
name|current
init|=
name|blockStreams
operator|.
name|get
argument_list|(
name|blockIndex
argument_list|)
decl_stmt|;
name|int
name|numBytesToRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
operator|(
name|int
operator|)
name|current
operator|.
name|getRemaining
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numBytesRead
init|=
name|current
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|numBytesToRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|numBytesRead
operator|!=
name|numBytesToRead
condition|)
block|{
comment|// This implies that there is either data loss or corruption in the
comment|// chunk entries. Even EOF in the current stream would be covered in
comment|// this case.
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Inconsistent read for blockID=%s length=%d numBytesRead=%d"
argument_list|,
name|current
operator|.
name|getBlockID
argument_list|()
argument_list|,
name|current
operator|.
name|getLength
argument_list|()
argument_list|,
name|numBytesRead
argument_list|)
argument_list|)
throw|;
block|}
name|totalReadLen
operator|+=
name|numBytesRead
expr_stmt|;
name|off
operator|+=
name|numBytesRead
expr_stmt|;
name|len
operator|-=
name|numBytesRead
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|getRemaining
argument_list|()
operator|<=
literal|0
operator|&&
operator|(
operator|(
name|blockIndex
operator|+
literal|1
operator|)
operator|<
name|blockStreams
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|blockIndex
operator|+=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|totalReadLen
return|;
block|}
comment|/**    * Seeks the KeyInputStream to the specified position. This involves 2 steps:    *    1. Updating the blockIndex to the blockStream corresponding to the    *    seeked position.    *    2. Seeking the corresponding blockStream to the adjusted position.    *    * For example, letâs say the block size is 200 bytes and block[0] stores    * data from indices 0 - 199, block[1] from indices 200 - 399 and so on.    * Letâs say we seek to position 240. In the first step, the blockIndex    * would be updated to 1 as indices 200 - 399 reside in blockStream[1]. In    * the second step, the blockStream[1] would be seeked to position 40 (=    * 240 - blockOffset[1] (= 200)).    */
annotation|@
name|Override
DECL|method|seek (long pos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
operator|||
name|pos
operator|>=
name|length
condition|)
block|{
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
block|{
comment|// It is possible for length and pos to be zero in which case
comment|// seek should return instead of throwing exception
return|return;
block|}
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"EOF encountered at pos: "
operator|+
name|pos
operator|+
literal|" for key: "
operator|+
name|key
argument_list|)
throw|;
block|}
comment|// 1. Update the blockIndex
if|if
condition|(
name|blockIndex
operator|>=
name|blockStreams
operator|.
name|size
argument_list|()
condition|)
block|{
name|blockIndex
operator|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|blockOffsets
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pos
operator|<
name|blockOffsets
index|[
name|blockIndex
index|]
condition|)
block|{
name|blockIndex
operator|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|blockOffsets
argument_list|,
literal|0
argument_list|,
name|blockIndex
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pos
operator|>=
name|blockOffsets
index|[
name|blockIndex
index|]
operator|+
name|blockStreams
operator|.
name|get
argument_list|(
name|blockIndex
argument_list|)
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|blockIndex
operator|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|blockOffsets
argument_list|,
name|blockIndex
operator|+
literal|1
argument_list|,
name|blockStreams
operator|.
name|size
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blockIndex
operator|<
literal|0
condition|)
block|{
comment|// Binary search returns -insertionPoint - 1  if element is not present
comment|// in the array. insertionPoint is the point at which element would be
comment|// inserted in the sorted array. We need to adjust the blockIndex
comment|// accordingly so that blockIndex = insertionPoint - 1
name|blockIndex
operator|=
operator|-
name|blockIndex
operator|-
literal|2
expr_stmt|;
block|}
comment|// Reset the previous blockStream's position
name|blockStreams
operator|.
name|get
argument_list|(
name|blockIndexOfPrevPosition
argument_list|)
operator|.
name|resetPosition
argument_list|()
expr_stmt|;
comment|// 2. Seek the blockStream to the adjusted position
name|blockStreams
operator|.
name|get
argument_list|(
name|blockIndex
argument_list|)
operator|.
name|seek
argument_list|(
name|pos
operator|-
name|blockOffsets
index|[
name|blockIndex
index|]
argument_list|)
expr_stmt|;
name|blockIndexOfPrevPosition
operator|=
name|blockIndex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|length
operator|==
literal|0
condition|?
literal|0
else|:
name|blockOffsets
index|[
name|blockIndex
index|]
operator|+
name|blockStreams
operator|.
name|get
argument_list|(
name|blockIndex
argument_list|)
operator|.
name|getPos
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|checkOpen
argument_list|()
expr_stmt|;
name|long
name|remaining
init|=
name|length
operator|-
name|getPos
argument_list|()
decl_stmt|;
return|return
name|remaining
operator|<=
name|Integer
operator|.
name|MAX_VALUE
condition|?
operator|(
name|int
operator|)
name|remaining
else|:
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|BlockInputStream
name|blockStream
range|:
name|blockStreams
control|)
block|{
name|blockStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Verify that the input stream is open. Non blocking; this gives    * the last state of the volatile {@link #closed} field.    * @throws IOException if the connection is closed.    */
DECL|method|checkOpen ()
specifier|private
name|void
name|checkOpen
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|": "
operator|+
name|FSExceptionMessages
operator|.
name|STREAM_IS_CLOSED
operator|+
literal|" Key: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCurrentStreamIndex ()
specifier|public
specifier|synchronized
name|int
name|getCurrentStreamIndex
parameter_list|()
block|{
return|return
name|blockIndex
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRemainingOfIndex (int index)
specifier|public
name|long
name|getRemainingOfIndex
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|blockStreams
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getRemaining
argument_list|()
return|;
block|}
block|}
end_class

end_unit

