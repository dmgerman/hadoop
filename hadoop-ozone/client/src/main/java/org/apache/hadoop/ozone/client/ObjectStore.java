begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|HddsClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * ObjectStore class is responsible for the client operations that can be  * performed on Ozone Object Store.  */
end_comment

begin_class
DECL|class|ObjectStore
specifier|public
class|class
name|ObjectStore
block|{
comment|/**    * The proxy used for connecting to the cluster and perform    * client operations.    */
DECL|field|proxy
specifier|private
specifier|final
name|ClientProtocol
name|proxy
decl_stmt|;
comment|/**    * Cache size to be used for listVolume calls.    */
DECL|field|listCacheSize
specifier|private
name|int
name|listCacheSize
decl_stmt|;
comment|/**    * Creates an instance of ObjectStore.    * @param conf Configuration object.    * @param proxy ClientProtocol proxy.    */
DECL|method|ObjectStore (Configuration conf, ClientProtocol proxy)
specifier|public
name|ObjectStore
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ClientProtocol
name|proxy
parameter_list|)
block|{
name|this
operator|.
name|proxy
operator|=
name|proxy
expr_stmt|;
name|this
operator|.
name|listCacheSize
operator|=
name|HddsClientUtils
operator|.
name|getListCacheSize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|ObjectStore ()
specifier|protected
name|ObjectStore
parameter_list|()
block|{
name|proxy
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Creates the volume with default values.    * @param volumeName Name of the volume to be created.    * @throws IOException    */
DECL|method|createVolume (String volumeName)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|proxy
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the volume.    * @param volumeName Name of the volume to be created.    * @param volumeArgs Volume properties.    * @throws IOException    */
DECL|method|createVolume (String volumeName, VolumeArgs volumeArgs)
specifier|public
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|VolumeArgs
name|volumeArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|proxy
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|volumeArgs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an S3 bucket inside Ozone manager and creates the mapping needed    * to access via both S3 and Ozone.    * @param userName - S3 user name.    * @param s3BucketName - S3 bucket Name.    * @throws IOException - On failure, throws an exception like Bucket exists.    */
DECL|method|createS3Bucket (String userName, String s3BucketName)
specifier|public
name|void
name|createS3Bucket
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|proxy
operator|.
name|createS3Bucket
argument_list|(
name|userName
argument_list|,
name|s3BucketName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes an s3 bucket and removes mapping of Ozone volume/bucket.    * @param bucketName - S3 Bucket Name.    * @throws  IOException in case the bucket cannot be deleted.    */
DECL|method|deleteS3Bucket (String bucketName)
specifier|public
name|void
name|deleteS3Bucket
parameter_list|(
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|proxy
operator|.
name|deleteS3Bucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the Ozone Namespace for the S3Bucket. It will return the    * OzoneVolume/OzoneBucketName.    * @param s3BucketName  - S3 Bucket Name.    * @return String - The Ozone canonical name for this s3 bucket. This    * string is useful for mounting an OzoneFS.    * @throws IOException - Error is throw if the s3bucket does not exist.    */
DECL|method|getOzoneBucketMapping (String s3BucketName)
specifier|public
name|String
name|getOzoneBucketMapping
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|proxy
operator|.
name|getOzoneBucketMapping
argument_list|(
name|s3BucketName
argument_list|)
return|;
block|}
comment|/**    * Returns the corresponding Ozone volume given an S3 Bucket.    * @param s3BucketName - S3Bucket Name.    * @return String - Ozone Volume name.    * @throws IOException - Throws if the s3Bucket does not exist.    */
DECL|method|getOzoneVolumeName (String s3BucketName)
specifier|public
name|String
name|getOzoneVolumeName
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|getOzoneBucketMapping
argument_list|(
name|s3BucketName
argument_list|)
decl_stmt|;
return|return
name|mapping
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Returns the corresponding Ozone bucket name for the given S3 bucket.    * @param s3BucketName - S3Bucket Name.    * @return String - Ozone bucket Name.    * @throws IOException - Throws if the s3bucket does not exist.    */
DECL|method|getOzoneBucketName (String s3BucketName)
specifier|public
name|String
name|getOzoneBucketName
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|getOzoneBucketMapping
argument_list|(
name|s3BucketName
argument_list|)
decl_stmt|;
return|return
name|mapping
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
index|[
literal|1
index|]
return|;
block|}
comment|/**    * Returns the volume information.    * @param volumeName Name of the volume.    * @return OzoneVolume    * @throws IOException    */
DECL|method|getVolume (String volumeName)
specifier|public
name|OzoneVolume
name|getVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|OzoneVolume
name|volume
init|=
name|proxy
operator|.
name|getVolumeDetails
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
return|return
name|volume
return|;
block|}
comment|/**    * Returns Iterator to iterate over all buckets for a user.    * The result can be restricted using bucket prefix, will return all    * buckets if bucket prefix is null.    *    * @param userName user name    * @param bucketPrefix Bucket prefix to match    * @return {@code Iterator<OzoneBucket>}    */
DECL|method|listS3Buckets (String userName, String bucketPrefix)
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneBucket
argument_list|>
name|listS3Buckets
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|bucketPrefix
parameter_list|)
block|{
return|return
name|listS3Buckets
argument_list|(
name|userName
argument_list|,
name|bucketPrefix
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns Iterator to iterate over all buckets after prevBucket for a    * specific user. If prevBucket is null it returns an iterator to iterate over    * all the buckets of a user. The result can be restricted using bucket    * prefix, will return all buckets if bucket prefix is null.    *    * @param userName user name    * @param bucketPrefix Bucket prefix to match    * @param prevBucket Buckets are listed after this bucket    * @return {@code Iterator<OzoneBucket>}    */
DECL|method|listS3Buckets (String userName, String bucketPrefix, String prevBucket)
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneBucket
argument_list|>
name|listS3Buckets
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|bucketPrefix
parameter_list|,
name|String
name|prevBucket
parameter_list|)
block|{
return|return
operator|new
name|S3BucketIterator
argument_list|(
name|userName
argument_list|,
name|bucketPrefix
argument_list|,
name|prevBucket
argument_list|)
return|;
block|}
comment|/**    * Returns Iterator to iterate over all the volumes in object store.    * The result can be restricted using volume prefix, will return all    * volumes if volume prefix is null.    *    * @param volumePrefix Volume prefix to match    * @return {@code Iterator<OzoneVolume>}    */
DECL|method|listVolumes (String volumePrefix)
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneVolume
argument_list|>
name|listVolumes
parameter_list|(
name|String
name|volumePrefix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listVolumes
argument_list|(
name|volumePrefix
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns Iterator to iterate over all the volumes after prevVolume in object    * store. If prevVolume is null it iterates from the first volume.    * The result can be restricted using volume prefix, will return all    * volumes if volume prefix is null.    *    * @param volumePrefix Volume prefix to match    * @param prevVolume Volumes will be listed after this volume name    * @return {@code Iterator<OzoneVolume>}    */
DECL|method|listVolumes (String volumePrefix, String prevVolume)
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneVolume
argument_list|>
name|listVolumes
parameter_list|(
name|String
name|volumePrefix
parameter_list|,
name|String
name|prevVolume
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|VolumeIterator
argument_list|(
literal|null
argument_list|,
name|volumePrefix
argument_list|,
name|prevVolume
argument_list|)
return|;
block|}
comment|/**    * Returns Iterator to iterate over the list of volumes after prevVolume owned    * by a specific user. The result can be restricted using volume prefix, will    * return all volumes if volume prefix is null. If user is not null, returns    * the volume of current user.    *    * @param user User Name    * @param volumePrefix Volume prefix to match    * @param prevVolume Volumes will be listed after this volume name    * @return {@code Iterator<OzoneVolume>}    */
DECL|method|listVolumesByUser (String user, String volumePrefix, String prevVolume)
specifier|public
name|Iterator
argument_list|<
name|?
extends|extends
name|OzoneVolume
argument_list|>
name|listVolumesByUser
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|volumePrefix
parameter_list|,
name|String
name|prevVolume
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|VolumeIterator
argument_list|(
name|user
argument_list|,
name|volumePrefix
argument_list|,
name|prevVolume
argument_list|)
return|;
block|}
comment|/**    * Deletes the volume.    * @param volumeName Name of the volume.    * @throws IOException    */
DECL|method|deleteVolume (String volumeName)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|proxy
operator|.
name|deleteVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
block|}
comment|/**    * An Iterator to iterate over {@link OzoneVolume} list.    */
DECL|class|VolumeIterator
specifier|private
class|class
name|VolumeIterator
implements|implements
name|Iterator
argument_list|<
name|OzoneVolume
argument_list|>
block|{
DECL|field|user
specifier|private
name|String
name|user
init|=
literal|null
decl_stmt|;
DECL|field|volPrefix
specifier|private
name|String
name|volPrefix
init|=
literal|null
decl_stmt|;
DECL|field|currentIterator
specifier|private
name|Iterator
argument_list|<
name|OzoneVolume
argument_list|>
name|currentIterator
decl_stmt|;
DECL|field|currentValue
specifier|private
name|OzoneVolume
name|currentValue
decl_stmt|;
comment|/**      * Creates an Iterator to iterate over all volumes after      * prevVolume of the user. If prevVolume is null it iterates from the      * first volume. The returned volumes match volume prefix.      * @param user user name      * @param volPrefix volume prefix to match      */
DECL|method|VolumeIterator (String user, String volPrefix, String prevVolume)
name|VolumeIterator
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|volPrefix
parameter_list|,
name|String
name|prevVolume
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|volPrefix
operator|=
name|volPrefix
expr_stmt|;
name|this
operator|.
name|currentValue
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentIterator
operator|=
name|getNextListOfVolumes
argument_list|(
name|prevVolume
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|currentIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentIterator
operator|=
name|getNextListOfVolumes
argument_list|(
name|currentValue
operator|!=
literal|null
condition|?
name|currentValue
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
return|return
name|currentIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|OzoneVolume
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|currentValue
operator|=
name|currentIterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|currentValue
return|;
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
comment|/**      * Returns the next set of volume list using proxy.      * @param prevVolume previous volume, this will be excluded from the result      * @return {@code List<OzoneVolume>}      */
DECL|method|getNextListOfVolumes (String prevVolume)
specifier|private
name|List
argument_list|<
name|OzoneVolume
argument_list|>
name|getNextListOfVolumes
parameter_list|(
name|String
name|prevVolume
parameter_list|)
block|{
try|try
block|{
comment|//if user is null, we do list of all volumes.
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
return|return
name|proxy
operator|.
name|listVolumes
argument_list|(
name|user
argument_list|,
name|volPrefix
argument_list|,
name|prevVolume
argument_list|,
name|listCacheSize
argument_list|)
return|;
block|}
return|return
name|proxy
operator|.
name|listVolumes
argument_list|(
name|volPrefix
argument_list|,
name|prevVolume
argument_list|,
name|listCacheSize
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * An Iterator to iterate over {@link OzoneBucket} list.    */
DECL|class|S3BucketIterator
specifier|public
class|class
name|S3BucketIterator
implements|implements
name|Iterator
argument_list|<
name|OzoneBucket
argument_list|>
block|{
DECL|field|bucketPrefix
specifier|private
name|String
name|bucketPrefix
init|=
literal|null
decl_stmt|;
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|currentIterator
specifier|private
name|Iterator
argument_list|<
name|OzoneBucket
argument_list|>
name|currentIterator
decl_stmt|;
DECL|field|currentValue
specifier|private
name|OzoneBucket
name|currentValue
decl_stmt|;
comment|/**      * Creates an Iterator to iterate over all buckets after prevBucket for      * a user. If prevBucket is null it returns an iterator which list all      * the buckets of the user.      * The returned buckets match bucket prefix.      * @param user      * @param bucketPrefix      * @param prevBucket      */
DECL|method|S3BucketIterator (String user, String bucketPrefix, String prevBucket)
specifier|public
name|S3BucketIterator
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|bucketPrefix
parameter_list|,
name|String
name|prevBucket
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|bucketPrefix
operator|=
name|bucketPrefix
expr_stmt|;
name|this
operator|.
name|currentValue
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentIterator
operator|=
name|getNextListOfS3Buckets
argument_list|(
name|prevBucket
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|currentIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentIterator
operator|=
name|getNextListOfS3Buckets
argument_list|(
name|currentValue
operator|!=
literal|null
condition|?
name|currentValue
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
return|return
name|currentIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|OzoneBucket
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|currentValue
operator|=
name|currentIterator
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|currentValue
return|;
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
comment|/**      * Gets the next set of bucket list using proxy.      * @param prevBucket      * @return {@code List<OzoneVolume>}      */
DECL|method|getNextListOfS3Buckets (String prevBucket)
specifier|private
name|List
argument_list|<
name|OzoneBucket
argument_list|>
name|getNextListOfS3Buckets
parameter_list|(
name|String
name|prevBucket
parameter_list|)
block|{
try|try
block|{
return|return
name|proxy
operator|.
name|listS3Buckets
argument_list|(
name|userName
argument_list|,
name|bucketPrefix
argument_list|,
name|prevBucket
argument_list|,
name|listCacheSize
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"VOLUME_NOT_FOUND"
argument_list|)
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|OzoneBucket
argument_list|>
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

