begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSExceptionMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerNotOpenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerWithPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfoGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OpenKeySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocolPB
operator|.
name|OzoneManagerProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|ChunkOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftRetryFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_comment
comment|/**  * Maintaining a list of ChunkInputStream. Write based on offset.  *  * Note that this may write to multiple containers in one write call. In case  * that first container succeeded but later ones failed, the succeeded writes  * are not rolled back.  *  * TODO : currently not support multi-thread access.  */
end_comment

begin_class
DECL|class|ChunkGroupOutputStream
specifier|public
class|class
name|ChunkGroupOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkGroupOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// array list's get(index) is O(1)
DECL|field|streamEntries
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|ChunkOutputStreamEntry
argument_list|>
name|streamEntries
decl_stmt|;
DECL|field|currentStreamIndex
specifier|private
name|int
name|currentStreamIndex
decl_stmt|;
DECL|field|omClient
specifier|private
specifier|final
name|OzoneManagerProtocolClientSideTranslatorPB
name|omClient
decl_stmt|;
specifier|private
specifier|final
DECL|field|scmClient
name|StorageContainerLocationProtocolClientSideTranslatorPB
name|scmClient
decl_stmt|;
DECL|field|keyArgs
specifier|private
specifier|final
name|OmKeyArgs
name|keyArgs
decl_stmt|;
DECL|field|openID
specifier|private
specifier|final
name|long
name|openID
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
specifier|final
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
DECL|field|requestID
specifier|private
specifier|final
name|String
name|requestID
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|streamBufferFlushSize
specifier|private
specifier|final
name|long
name|streamBufferFlushSize
decl_stmt|;
DECL|field|streamBufferMaxSize
specifier|private
specifier|final
name|long
name|streamBufferMaxSize
decl_stmt|;
DECL|field|watchTimeout
specifier|private
specifier|final
name|long
name|watchTimeout
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|long
name|blockSize
decl_stmt|;
DECL|field|checksum
specifier|private
specifier|final
name|Checksum
name|checksum
decl_stmt|;
DECL|field|bufferList
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|bufferList
decl_stmt|;
comment|/**    * A constructor for testing purpose only.    */
annotation|@
name|VisibleForTesting
DECL|method|ChunkGroupOutputStream ()
specifier|public
name|ChunkGroupOutputStream
parameter_list|()
block|{
name|streamEntries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|omClient
operator|=
literal|null
expr_stmt|;
name|scmClient
operator|=
literal|null
expr_stmt|;
name|keyArgs
operator|=
literal|null
expr_stmt|;
name|openID
operator|=
operator|-
literal|1
expr_stmt|;
name|xceiverClientManager
operator|=
literal|null
expr_stmt|;
name|chunkSize
operator|=
literal|0
expr_stmt|;
name|requestID
operator|=
literal|null
expr_stmt|;
name|closed
operator|=
literal|false
expr_stmt|;
name|streamBufferFlushSize
operator|=
literal|0
expr_stmt|;
name|streamBufferMaxSize
operator|=
literal|0
expr_stmt|;
name|bufferList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|bufferList
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|watchTimeout
operator|=
literal|0
expr_stmt|;
name|blockSize
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|checksum
operator|=
operator|new
name|Checksum
argument_list|()
expr_stmt|;
block|}
comment|/**    * For testing purpose only. Not building output stream from blocks, but    * taking from externally.    *    * @param outputStream    * @param length    */
annotation|@
name|VisibleForTesting
DECL|method|addStream (OutputStream outputStream, long length)
specifier|public
name|void
name|addStream
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|streamEntries
operator|.
name|add
argument_list|(
operator|new
name|ChunkOutputStreamEntry
argument_list|(
name|outputStream
argument_list|,
name|length
argument_list|,
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getStreamEntries ()
specifier|public
name|List
argument_list|<
name|ChunkOutputStreamEntry
argument_list|>
name|getStreamEntries
parameter_list|()
block|{
return|return
name|streamEntries
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getXceiverClientManager ()
specifier|public
name|XceiverClientManager
name|getXceiverClientManager
parameter_list|()
block|{
return|return
name|xceiverClientManager
return|;
block|}
DECL|method|getLocationInfoList ()
specifier|public
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|getLocationInfoList
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locationInfoList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChunkOutputStreamEntry
name|streamEntry
range|:
name|streamEntries
control|)
block|{
name|OmKeyLocationInfo
name|info
init|=
operator|new
name|OmKeyLocationInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setBlockID
argument_list|(
name|streamEntry
operator|.
name|blockID
argument_list|)
operator|.
name|setLength
argument_list|(
name|streamEntry
operator|.
name|currentPosition
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"block written "
operator|+
name|streamEntry
operator|.
name|blockID
operator|+
literal|", length "
operator|+
name|streamEntry
operator|.
name|currentPosition
operator|+
literal|" bcsID "
operator|+
name|streamEntry
operator|.
name|blockID
operator|.
name|getBlockCommitSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|locationInfoList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|locationInfoList
return|;
block|}
DECL|method|ChunkGroupOutputStream (OpenKeySession handler, XceiverClientManager xceiverClientManager, StorageContainerLocationProtocolClientSideTranslatorPB scmClient, OzoneManagerProtocolClientSideTranslatorPB omClient, int chunkSize, String requestId, ReplicationFactor factor, ReplicationType type, long bufferFlushSize, long bufferMaxSize, long size, long watchTimeout, Checksum checksum)
specifier|public
name|ChunkGroupOutputStream
parameter_list|(
name|OpenKeySession
name|handler
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|StorageContainerLocationProtocolClientSideTranslatorPB
name|scmClient
parameter_list|,
name|OzoneManagerProtocolClientSideTranslatorPB
name|omClient
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|String
name|requestId
parameter_list|,
name|ReplicationFactor
name|factor
parameter_list|,
name|ReplicationType
name|type
parameter_list|,
name|long
name|bufferFlushSize
parameter_list|,
name|long
name|bufferMaxSize
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|watchTimeout
parameter_list|,
name|Checksum
name|checksum
parameter_list|)
block|{
name|this
operator|.
name|streamEntries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentStreamIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|omClient
operator|=
name|omClient
expr_stmt|;
name|this
operator|.
name|scmClient
operator|=
name|scmClient
expr_stmt|;
name|OmKeyInfo
name|info
init|=
name|handler
operator|.
name|getKeyInfo
argument_list|()
decl_stmt|;
name|this
operator|.
name|keyArgs
operator|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|info
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|info
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|info
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|setFactor
argument_list|(
name|factor
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|info
operator|.
name|getDataSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|openID
operator|=
name|handler
operator|.
name|getId
argument_list|()
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
name|xceiverClientManager
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|requestID
operator|=
name|requestId
expr_stmt|;
name|this
operator|.
name|streamBufferFlushSize
operator|=
name|bufferFlushSize
expr_stmt|;
name|this
operator|.
name|streamBufferMaxSize
operator|=
name|bufferMaxSize
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|watchTimeout
operator|=
name|watchTimeout
expr_stmt|;
name|this
operator|.
name|checksum
operator|=
name|checksum
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|chunkSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|streamBufferFlushSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|streamBufferMaxSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|blockSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|streamBufferFlushSize
operator|%
name|chunkSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|streamBufferMaxSize
operator|%
name|streamBufferFlushSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|blockSize
operator|%
name|streamBufferMaxSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * When a key is opened, it is possible that there are some blocks already    * allocated to it for this open session. In this case, to make use of these    * blocks, we need to add these blocks to stream entries. But, a key's version    * also includes blocks from previous versions, we need to avoid adding these    * old blocks to stream entries, because these old blocks should not be picked    * for write. To do this, the following method checks that, only those    * blocks created in this particular open version are added to stream entries.    *    * @param version the set of blocks that are pre-allocated.    * @param openVersion the version corresponding to the pre-allocation.    * @throws IOException    */
DECL|method|addPreallocateBlocks (OmKeyLocationInfoGroup version, long openVersion)
specifier|public
name|void
name|addPreallocateBlocks
parameter_list|(
name|OmKeyLocationInfoGroup
name|version
parameter_list|,
name|long
name|openVersion
parameter_list|)
throws|throws
name|IOException
block|{
comment|// server may return any number of blocks, (0 to any)
comment|// only the blocks allocated in this open session (block createVersion
comment|// equals to open session version)
for|for
control|(
name|OmKeyLocationInfo
name|subKeyInfo
range|:
name|version
operator|.
name|getLocationList
argument_list|()
control|)
block|{
if|if
condition|(
name|subKeyInfo
operator|.
name|getCreateVersion
argument_list|()
operator|==
name|openVersion
condition|)
block|{
name|addKeyLocationInfo
argument_list|(
name|subKeyInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addKeyLocationInfo (OmKeyLocationInfo subKeyInfo)
specifier|private
name|void
name|addKeyLocationInfo
parameter_list|(
name|OmKeyLocationInfo
name|subKeyInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerWithPipeline
name|containerWithPipeline
init|=
name|scmClient
operator|.
name|getContainerWithPipeline
argument_list|(
name|subKeyInfo
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|xceiverClient
init|=
name|xceiverClientManager
operator|.
name|acquireClient
argument_list|(
name|containerWithPipeline
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|streamEntries
operator|.
name|add
argument_list|(
operator|new
name|ChunkOutputStreamEntry
argument_list|(
name|subKeyInfo
operator|.
name|getBlockID
argument_list|()
argument_list|,
name|keyArgs
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|xceiverClientManager
argument_list|,
name|xceiverClient
argument_list|,
name|requestID
argument_list|,
name|chunkSize
argument_list|,
name|subKeyInfo
operator|.
name|getLength
argument_list|()
argument_list|,
name|streamBufferFlushSize
argument_list|,
name|streamBufferMaxSize
argument_list|,
name|watchTimeout
argument_list|,
name|bufferList
argument_list|,
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Try to write the bytes sequence b[off:off+len) to streams.    *    * NOTE: Throws exception if the data could not fit into the remaining space.    * In which case nothing will be written.    * TODO:May need to revisit this behaviour.    *    * @param b byte data    * @param off starting offset    * @param len length to write    * @throws IOException    */
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|(
name|off
operator|<
literal|0
operator|)
operator|||
operator|(
name|off
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|handleWrite
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|computeBufferData ()
specifier|private
name|long
name|computeBufferData
parameter_list|()
block|{
return|return
name|bufferList
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|value
lambda|->
name|value
operator|.
name|position
argument_list|()
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
DECL|method|handleWrite (byte[] b, int off, long len, boolean retry)
specifier|private
name|void
name|handleWrite
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|long
name|len
parameter_list|,
name|boolean
name|retry
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|succeededAllocates
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|streamEntries
operator|.
name|size
argument_list|()
operator|<=
name|currentStreamIndex
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|omClient
argument_list|)
expr_stmt|;
comment|// allocate a new block, if a exception happens, log an error and
comment|// throw exception to the caller directly, and the write fails.
try|try
block|{
name|allocateNewBlock
argument_list|(
name|currentStreamIndex
argument_list|)
expr_stmt|;
name|succeededAllocates
operator|+=
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Try to allocate more blocks for write failed, already "
operator|+
literal|"allocated "
operator|+
name|succeededAllocates
operator|+
literal|" blocks for this write."
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|// in theory, this condition should never violate due the check above
comment|// still do a sanity check.
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|currentStreamIndex
operator|<
name|streamEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ChunkOutputStreamEntry
name|current
init|=
name|streamEntries
operator|.
name|get
argument_list|(
name|currentStreamIndex
argument_list|)
decl_stmt|;
comment|// length(len) will be in int range if the call is happening through
comment|// write API of chunkOutputStream. Length can be in long range if it comes
comment|// via Exception path.
name|int
name|writeLen
init|=
name|Math
operator|.
name|min
argument_list|(
operator|(
name|int
operator|)
name|len
argument_list|,
operator|(
name|int
operator|)
name|current
operator|.
name|getRemaining
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|currentPos
init|=
name|current
operator|.
name|getWrittenDataLength
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|retry
condition|)
block|{
name|current
operator|.
name|writeOnRetry
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|current
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|writeLen
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|checkIfContainerIsClosed
argument_list|(
name|ioe
argument_list|)
operator|||
name|checkIfTimeoutException
argument_list|(
name|ioe
argument_list|)
condition|)
block|{
comment|// for the current iteration, totalDataWritten - currentPos gives the
comment|// amount of data already written to the buffer
name|writeLen
operator|=
call|(
name|int
call|)
argument_list|(
name|current
operator|.
name|getWrittenDataLength
argument_list|()
operator|-
name|currentPos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"writeLen {}, total len {}"
argument_list|,
name|writeLen
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
name|current
argument_list|,
name|currentStreamIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
if|if
condition|(
name|current
operator|.
name|getRemaining
argument_list|()
operator|<=
literal|0
condition|)
block|{
comment|// since the current block is already written close the stream.
name|handleFlushOrClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currentStreamIndex
operator|+=
literal|1
expr_stmt|;
block|}
name|len
operator|-=
name|writeLen
expr_stmt|;
name|off
operator|+=
name|writeLen
expr_stmt|;
block|}
block|}
comment|/**    * Discards the subsequent pre allocated blocks and removes the streamEntries    * from the streamEntries list for the container which is closed.    * @param containerID id of the closed container    */
DECL|method|discardPreallocatedBlocks (long containerID)
specifier|private
name|void
name|discardPreallocatedBlocks
parameter_list|(
name|long
name|containerID
parameter_list|)
block|{
comment|// currentStreamIndex< streamEntries.size() signifies that, there are still
comment|// pre allocated blocks available.
if|if
condition|(
name|currentStreamIndex
operator|<
name|streamEntries
operator|.
name|size
argument_list|()
condition|)
block|{
name|ListIterator
argument_list|<
name|ChunkOutputStreamEntry
argument_list|>
name|streamEntryIterator
init|=
name|streamEntries
operator|.
name|listIterator
argument_list|(
name|currentStreamIndex
argument_list|)
decl_stmt|;
while|while
condition|(
name|streamEntryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|streamEntryIterator
operator|.
name|next
argument_list|()
operator|.
name|blockID
operator|.
name|getContainerID
argument_list|()
operator|==
name|containerID
condition|)
block|{
name|streamEntryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * It might be possible that the blocks pre allocated might never get written    * while the stream gets closed normally. In such cases, it would be a good    * idea to trim down the locationInfoList by removing the unused blocks if any    * so as only the used block info gets updated on OzoneManager during close.    */
DECL|method|removeEmptyBlocks ()
specifier|private
name|void
name|removeEmptyBlocks
parameter_list|()
block|{
if|if
condition|(
name|currentStreamIndex
operator|<
name|streamEntries
operator|.
name|size
argument_list|()
condition|)
block|{
name|ListIterator
argument_list|<
name|ChunkOutputStreamEntry
argument_list|>
name|streamEntryIterator
init|=
name|streamEntries
operator|.
name|listIterator
argument_list|(
name|currentStreamIndex
argument_list|)
decl_stmt|;
while|while
condition|(
name|streamEntryIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|streamEntryIterator
operator|.
name|next
argument_list|()
operator|.
name|currentPosition
operator|==
literal|0
condition|)
block|{
name|streamEntryIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * It performs following actions :    * a. Updates the committed length at datanode for the current stream in    *    datanode.    * b. Reads the data from the underlying buffer and writes it the next stream.    *    * @param streamEntry StreamEntry    * @param streamIndex Index of the entry    * @throws IOException Throws IOException if Write fails    */
DECL|method|handleException (ChunkOutputStreamEntry streamEntry, int streamIndex)
specifier|private
name|void
name|handleException
parameter_list|(
name|ChunkOutputStreamEntry
name|streamEntry
parameter_list|,
name|int
name|streamIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|totalSuccessfulFlushedData
init|=
name|streamEntry
operator|.
name|getTotalSuccessfulFlushedData
argument_list|()
decl_stmt|;
comment|//set the correct length for the current stream
name|streamEntry
operator|.
name|currentPosition
operator|=
name|totalSuccessfulFlushedData
expr_stmt|;
name|long
name|bufferedDataLen
init|=
name|computeBufferData
argument_list|()
decl_stmt|;
comment|// just clean up the current stream.
name|streamEntry
operator|.
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferedDataLen
operator|>
literal|0
condition|)
block|{
comment|// If the data is still cached in the underlying stream, we need to
comment|// allocate new block and write this data in the datanode.
name|currentStreamIndex
operator|+=
literal|1
expr_stmt|;
name|handleWrite
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
name|bufferedDataLen
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|totalSuccessfulFlushedData
operator|==
literal|0
condition|)
block|{
name|streamEntries
operator|.
name|remove
argument_list|(
name|streamIndex
argument_list|)
expr_stmt|;
name|currentStreamIndex
operator|-=
literal|1
expr_stmt|;
block|}
comment|// discard subsequent pre allocated blocks from the streamEntries list
comment|// from the closed container
name|discardPreallocatedBlocks
argument_list|(
name|streamEntry
operator|.
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkIfContainerIsClosed (IOException ioe)
specifier|private
name|boolean
name|checkIfContainerIsClosed
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|checkIfContainerNotOpenOrRaftRetryFailureException
argument_list|(
name|ioe
argument_list|)
operator|||
name|Optional
operator|.
name|of
argument_list|(
name|ioe
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|instanceof
name|StorageContainerException
argument_list|)
operator|.
name|map
argument_list|(
name|e
lambda|->
operator|(
name|StorageContainerException
operator|)
name|e
argument_list|)
operator|.
name|filter
argument_list|(
name|sce
lambda|->
name|sce
operator|.
name|getResult
argument_list|()
operator|==
name|Result
operator|.
name|CLOSED_CONTAINER_IO
argument_list|)
operator|.
name|isPresent
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|checkIfContainerNotOpenOrRaftRetryFailureException ( IOException ioe)
specifier|private
name|boolean
name|checkIfContainerNotOpenOrRaftRetryFailureException
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|ioe
operator|.
name|getCause
argument_list|()
decl_stmt|;
while|while
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|ContainerNotOpenException
operator|||
name|t
operator|instanceof
name|RaftRetryFailureException
condition|)
block|{
return|return
literal|true
return|;
block|}
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|checkIfTimeoutException (IOException ioe)
specifier|private
name|boolean
name|checkIfTimeoutException
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|ioe
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|instanceof
name|TimeoutException
argument_list|)
operator|.
name|isPresent
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|getKeyLength ()
specifier|private
name|long
name|getKeyLength
parameter_list|()
block|{
return|return
name|streamEntries
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|e
lambda|->
name|e
operator|.
name|currentPosition
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
comment|/**    * Contact OM to get a new block. Set the new block with the index (e.g.    * first block has index = 0, second has index = 1 etc.)    *    * The returned block is made to new ChunkOutputStreamEntry to write.    *    * @param index the index of the block.    * @throws IOException    */
DECL|method|allocateNewBlock (int index)
specifier|private
name|void
name|allocateNewBlock
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|OmKeyLocationInfo
name|subKeyInfo
init|=
name|omClient
operator|.
name|allocateBlock
argument_list|(
name|keyArgs
argument_list|,
name|openID
argument_list|)
decl_stmt|;
name|addKeyLocationInfo
argument_list|(
name|subKeyInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|checkNotClosed
argument_list|()
expr_stmt|;
name|handleFlushOrClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close or Flush the latest outputStream.    * @param close Flag which decides whether to call close or flush on the    *              outputStream.    * @throws IOException In case, flush or close fails with exception.    */
DECL|method|handleFlushOrClose (boolean close)
specifier|private
name|void
name|handleFlushOrClose
parameter_list|(
name|boolean
name|close
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|streamEntries
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|size
init|=
name|streamEntries
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|streamIndex
init|=
name|currentStreamIndex
operator|>=
name|size
condition|?
name|size
operator|-
literal|1
else|:
name|currentStreamIndex
decl_stmt|;
name|ChunkOutputStreamEntry
name|entry
init|=
name|streamEntries
operator|.
name|get
argument_list|(
name|streamIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|close
condition|)
block|{
name|entry
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|checkIfContainerIsClosed
argument_list|(
name|ioe
argument_list|)
operator|||
name|checkIfTimeoutException
argument_list|(
name|ioe
argument_list|)
condition|)
block|{
comment|// This call will allocate a new streamEntry and write the Data.
comment|// Close needs to be retried on the newly allocated streamEntry as
comment|// as well.
name|handleException
argument_list|(
name|entry
argument_list|,
name|streamIndex
argument_list|)
expr_stmt|;
name|handleFlushOrClose
argument_list|(
name|close
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Commit the key to OM, this will add the blocks as the new key blocks.    *    * @throws IOException    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|handleFlushOrClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyArgs
operator|!=
literal|null
condition|)
block|{
comment|// in test, this could be null
name|removeEmptyBlocks
argument_list|()
expr_stmt|;
name|keyArgs
operator|.
name|setDataSize
argument_list|(
name|getKeyLength
argument_list|()
argument_list|)
expr_stmt|;
name|keyArgs
operator|.
name|setLocationInfoList
argument_list|(
name|getLocationInfoList
argument_list|()
argument_list|)
expr_stmt|;
name|omClient
operator|.
name|commitKey
argument_list|(
name|keyArgs
argument_list|,
name|openID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Closing ChunkGroupOutputStream, but key args is null"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|ioe
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|bufferList
operator|!=
literal|null
condition|)
block|{
name|bufferList
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|e
operator|.
name|clear
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bufferList
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Builder class of ChunkGroupOutputStream.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|openHandler
specifier|private
name|OpenKeySession
name|openHandler
decl_stmt|;
DECL|field|xceiverManager
specifier|private
name|XceiverClientManager
name|xceiverManager
decl_stmt|;
DECL|field|scmClient
specifier|private
name|StorageContainerLocationProtocolClientSideTranslatorPB
name|scmClient
decl_stmt|;
DECL|field|omClient
specifier|private
name|OzoneManagerProtocolClientSideTranslatorPB
name|omClient
decl_stmt|;
DECL|field|chunkSize
specifier|private
name|int
name|chunkSize
decl_stmt|;
DECL|field|requestID
specifier|private
name|String
name|requestID
decl_stmt|;
DECL|field|type
specifier|private
name|ReplicationType
name|type
decl_stmt|;
DECL|field|factor
specifier|private
name|ReplicationFactor
name|factor
decl_stmt|;
DECL|field|streamBufferFlushSize
specifier|private
name|long
name|streamBufferFlushSize
decl_stmt|;
DECL|field|streamBufferMaxSize
specifier|private
name|long
name|streamBufferMaxSize
decl_stmt|;
DECL|field|blockSize
specifier|private
name|long
name|blockSize
decl_stmt|;
DECL|field|watchTimeout
specifier|private
name|long
name|watchTimeout
decl_stmt|;
DECL|field|checksum
specifier|private
name|Checksum
name|checksum
decl_stmt|;
DECL|method|setHandler (OpenKeySession handler)
specifier|public
name|Builder
name|setHandler
parameter_list|(
name|OpenKeySession
name|handler
parameter_list|)
block|{
name|this
operator|.
name|openHandler
operator|=
name|handler
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setXceiverClientManager (XceiverClientManager manager)
specifier|public
name|Builder
name|setXceiverClientManager
parameter_list|(
name|XceiverClientManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|xceiverManager
operator|=
name|manager
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setScmClient ( StorageContainerLocationProtocolClientSideTranslatorPB client)
specifier|public
name|Builder
name|setScmClient
parameter_list|(
name|StorageContainerLocationProtocolClientSideTranslatorPB
name|client
parameter_list|)
block|{
name|this
operator|.
name|scmClient
operator|=
name|client
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOmClient ( OzoneManagerProtocolClientSideTranslatorPB client)
specifier|public
name|Builder
name|setOmClient
parameter_list|(
name|OzoneManagerProtocolClientSideTranslatorPB
name|client
parameter_list|)
block|{
name|this
operator|.
name|omClient
operator|=
name|client
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setChunkSize (int size)
specifier|public
name|Builder
name|setChunkSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|chunkSize
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRequestID (String id)
specifier|public
name|Builder
name|setRequestID
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|requestID
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setType (ReplicationType replicationType)
specifier|public
name|Builder
name|setType
parameter_list|(
name|ReplicationType
name|replicationType
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|replicationType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setFactor (ReplicationFactor replicationFactor)
specifier|public
name|Builder
name|setFactor
parameter_list|(
name|ReplicationFactor
name|replicationFactor
parameter_list|)
block|{
name|this
operator|.
name|factor
operator|=
name|replicationFactor
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setStreamBufferFlushSize (long size)
specifier|public
name|Builder
name|setStreamBufferFlushSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|streamBufferFlushSize
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setStreamBufferMaxSize (long size)
specifier|public
name|Builder
name|setStreamBufferMaxSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|streamBufferMaxSize
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setBlockSize (long size)
specifier|public
name|Builder
name|setBlockSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|blockSize
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setWatchTimeout (long timeout)
specifier|public
name|Builder
name|setWatchTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|watchTimeout
operator|=
name|timeout
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setChecksum (Checksum checksumObj)
specifier|public
name|Builder
name|setChecksum
parameter_list|(
name|Checksum
name|checksumObj
parameter_list|)
block|{
name|this
operator|.
name|checksum
operator|=
name|checksumObj
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|ChunkGroupOutputStream
name|build
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ChunkGroupOutputStream
argument_list|(
name|openHandler
argument_list|,
name|xceiverManager
argument_list|,
name|scmClient
argument_list|,
name|omClient
argument_list|,
name|chunkSize
argument_list|,
name|requestID
argument_list|,
name|factor
argument_list|,
name|type
argument_list|,
name|streamBufferFlushSize
argument_list|,
name|streamBufferMaxSize
argument_list|,
name|blockSize
argument_list|,
name|watchTimeout
argument_list|,
name|checksum
argument_list|)
return|;
block|}
block|}
DECL|class|ChunkOutputStreamEntry
specifier|private
specifier|static
class|class
name|ChunkOutputStreamEntry
extends|extends
name|OutputStream
block|{
DECL|field|outputStream
specifier|private
name|OutputStream
name|outputStream
decl_stmt|;
DECL|field|blockID
specifier|private
name|BlockID
name|blockID
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
specifier|final
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|xceiverClient
specifier|private
specifier|final
name|XceiverClientSpi
name|xceiverClient
decl_stmt|;
DECL|field|checksum
specifier|private
specifier|final
name|Checksum
name|checksum
decl_stmt|;
DECL|field|requestId
specifier|private
specifier|final
name|String
name|requestId
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
comment|// total number of bytes that should be written to this stream
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
comment|// the current position of this stream 0<= currentPosition< length
DECL|field|currentPosition
specifier|private
name|long
name|currentPosition
decl_stmt|;
DECL|field|streamBufferFlushSize
specifier|private
specifier|final
name|long
name|streamBufferFlushSize
decl_stmt|;
DECL|field|streamBufferMaxSize
specifier|private
specifier|final
name|long
name|streamBufferMaxSize
decl_stmt|;
DECL|field|watchTimeout
specifier|private
specifier|final
name|long
name|watchTimeout
decl_stmt|;
DECL|field|bufferList
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|bufferList
decl_stmt|;
DECL|method|ChunkOutputStreamEntry (BlockID blockID, String key, XceiverClientManager xceiverClientManager, XceiverClientSpi xceiverClient, String requestId, int chunkSize, long length, long streamBufferFlushSize, long streamBufferMaxSize, long watchTimeout, List<ByteBuffer> bufferList, Checksum checksum)
name|ChunkOutputStreamEntry
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|String
name|key
parameter_list|,
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|XceiverClientSpi
name|xceiverClient
parameter_list|,
name|String
name|requestId
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|long
name|length
parameter_list|,
name|long
name|streamBufferFlushSize
parameter_list|,
name|long
name|streamBufferMaxSize
parameter_list|,
name|long
name|watchTimeout
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|bufferList
parameter_list|,
name|Checksum
name|checksum
parameter_list|)
block|{
name|this
operator|.
name|outputStream
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|blockID
operator|=
name|blockID
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
name|xceiverClientManager
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
name|xceiverClient
expr_stmt|;
name|this
operator|.
name|requestId
operator|=
name|requestId
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|currentPosition
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|streamBufferFlushSize
operator|=
name|streamBufferFlushSize
expr_stmt|;
name|this
operator|.
name|streamBufferMaxSize
operator|=
name|streamBufferMaxSize
expr_stmt|;
name|this
operator|.
name|watchTimeout
operator|=
name|watchTimeout
expr_stmt|;
name|this
operator|.
name|checksum
operator|=
name|checksum
expr_stmt|;
name|this
operator|.
name|bufferList
operator|=
name|bufferList
expr_stmt|;
block|}
comment|/**      * For testing purpose, taking a some random created stream instance.      * @param  outputStream a existing writable output stream      * @param  length the length of data to write to the stream      */
DECL|method|ChunkOutputStreamEntry (OutputStream outputStream, long length, Checksum checksum)
name|ChunkOutputStreamEntry
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|,
name|long
name|length
parameter_list|,
name|Checksum
name|checksum
parameter_list|)
block|{
name|this
operator|.
name|outputStream
operator|=
name|outputStream
expr_stmt|;
name|this
operator|.
name|blockID
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|key
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|xceiverClient
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|requestId
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|currentPosition
operator|=
literal|0
expr_stmt|;
name|streamBufferFlushSize
operator|=
literal|0
expr_stmt|;
name|streamBufferMaxSize
operator|=
literal|0
expr_stmt|;
name|bufferList
operator|=
literal|null
expr_stmt|;
name|watchTimeout
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|checksum
operator|=
name|checksum
expr_stmt|;
block|}
DECL|method|getLength ()
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|getRemaining ()
name|long
name|getRemaining
parameter_list|()
block|{
return|return
name|length
operator|-
name|currentPosition
return|;
block|}
DECL|method|checkStream ()
specifier|private
name|void
name|checkStream
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|outputStream
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|outputStream
operator|=
operator|new
name|ChunkOutputStream
argument_list|(
name|blockID
argument_list|,
name|key
argument_list|,
name|xceiverClientManager
argument_list|,
name|xceiverClient
argument_list|,
name|requestId
argument_list|,
name|chunkSize
argument_list|,
name|streamBufferFlushSize
argument_list|,
name|streamBufferMaxSize
argument_list|,
name|watchTimeout
argument_list|,
name|bufferList
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentPosition
operator|+=
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentPosition
operator|+=
name|len
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|outputStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|outputStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// after closing the chunkOutPutStream, blockId would have been
comment|// reconstructed with updated bcsId
if|if
condition|(
name|this
operator|.
name|outputStream
operator|instanceof
name|ChunkOutputStream
condition|)
block|{
name|this
operator|.
name|blockID
operator|=
operator|(
operator|(
name|ChunkOutputStream
operator|)
name|outputStream
operator|)
operator|.
name|getBlockID
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getTotalSuccessfulFlushedData ()
name|long
name|getTotalSuccessfulFlushedData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|outputStream
operator|instanceof
name|ChunkOutputStream
condition|)
block|{
name|ChunkOutputStream
name|out
init|=
operator|(
name|ChunkOutputStream
operator|)
name|this
operator|.
name|outputStream
decl_stmt|;
name|blockID
operator|=
name|out
operator|.
name|getBlockID
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|getTotalSuccessfulFlushedData
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|outputStream
operator|==
literal|null
condition|)
block|{
comment|// For a pre allocated block for which no write has been initiated,
comment|// the OutputStream will be null here.
comment|// In such cases, the default blockCommitSequenceId will be 0
return|return
literal|0
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid Output Stream for Key: "
operator|+
name|key
argument_list|)
throw|;
block|}
DECL|method|getWrittenDataLength ()
name|long
name|getWrittenDataLength
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|outputStream
operator|instanceof
name|ChunkOutputStream
condition|)
block|{
name|ChunkOutputStream
name|out
init|=
operator|(
name|ChunkOutputStream
operator|)
name|this
operator|.
name|outputStream
decl_stmt|;
return|return
name|out
operator|.
name|getWrittenDataLength
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|outputStream
operator|==
literal|null
condition|)
block|{
comment|// For a pre allocated block for which no write has been initiated,
comment|// the OutputStream will be null here.
comment|// In such cases, the default blockCommitSequenceId will be 0
return|return
literal|0
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid Output Stream for Key: "
operator|+
name|key
argument_list|)
throw|;
block|}
DECL|method|cleanup ()
name|void
name|cleanup
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|outputStream
operator|instanceof
name|ChunkOutputStream
condition|)
block|{
name|ChunkOutputStream
name|out
init|=
operator|(
name|ChunkOutputStream
operator|)
name|this
operator|.
name|outputStream
decl_stmt|;
name|out
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeOnRetry (long len)
name|void
name|writeOnRetry
parameter_list|(
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|outputStream
operator|instanceof
name|ChunkOutputStream
condition|)
block|{
name|ChunkOutputStream
name|out
init|=
operator|(
name|ChunkOutputStream
operator|)
name|this
operator|.
name|outputStream
decl_stmt|;
name|out
operator|.
name|writeOnRetry
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentPosition
operator|+=
name|len
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid Output Stream for Key: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Verify that the output stream is open. Non blocking; this gives    * the last state of the volatile {@link #closed} field.    * @throws IOException if the connection is closed.    */
DECL|method|checkNotClosed ()
specifier|private
name|void
name|checkNotClosed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|": "
operator|+
name|FSExceptionMessages
operator|.
name|STREAM_IS_CLOSED
operator|+
literal|" Key: "
operator|+
name|keyArgs
operator|.
name|getKeyName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

