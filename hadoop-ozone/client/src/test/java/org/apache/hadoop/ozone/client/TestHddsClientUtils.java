begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * This test class verifies the parsing of SCM endpoint config settings. The  * parsing logic is in  * {@link org.apache.hadoop.hdds.scm.client.HddsClientUtils}.  */
end_comment

begin_class
DECL|class|TestHddsClientUtils
specifier|public
class|class
name|TestHddsClientUtils
block|{
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * Verify client endpoint lookup failure if it is not configured.    */
annotation|@
name|Test
DECL|method|testMissingScmClientAddress ()
specifier|public
name|void
name|testMissingScmClientAddress
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|HddsUtils
operator|.
name|getScmAddressForClients
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that the client endpoint can be correctly parsed from    * configuration.    */
annotation|@
name|Test
DECL|method|testGetScmClientAddress ()
specifier|public
name|void
name|testGetScmClientAddress
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
comment|// First try a client address with just a host name. Verify it falls
comment|// back to the default port.
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|HddsUtils
operator|.
name|getScmAddressForClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|is
argument_list|(
name|OZONE_SCM_CLIENT_PORT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next try a client address with a host name and port. Verify both
comment|// are used correctly.
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
literal|"1.2.3.4:100"
argument_list|)
expr_stmt|;
name|addr
operator|=
name|HddsUtils
operator|.
name|getScmAddressForClients
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testgetOmSocketAddress ()
specifier|public
name|void
name|testgetOmSocketAddress
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
comment|// First try a client address with just a host name. Verify it falls
comment|// back to the default port.
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|addr
init|=
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|is
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_PORT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next try a client address with just a host name and port. Verify the port
comment|// is ignored and the default OM port is used.
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
literal|"1.2.3.4:100"
argument_list|)
expr_stmt|;
name|addr
operator|=
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|is
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert the we are able to use default configs if no value is specified.
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|addr
operator|=
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|,
name|is
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_PORT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockClientFallbackToClientNoPort ()
specifier|public
name|void
name|testBlockClientFallbackToClientNoPort
parameter_list|()
block|{
comment|// When OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY is undefined it should
comment|// fallback to OZONE_SCM_CLIENT_ADDRESS_KEY.
specifier|final
name|String
name|scmHost
init|=
literal|"host123"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsUtils
operator|.
name|getScmAddressForBlockClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|scmHost
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StringSplitter"
argument_list|)
DECL|method|testBlockClientFallbackToClientWithPort ()
specifier|public
name|void
name|testBlockClientFallbackToClientWithPort
parameter_list|()
block|{
comment|// When OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY is undefined it should
comment|// fallback to OZONE_SCM_CLIENT_ADDRESS_KEY.
comment|//
comment|// Verify that the OZONE_SCM_CLIENT_ADDRESS_KEY port number is ignored,
comment|// if present. Instead we should use OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT.
specifier|final
name|String
name|scmHost
init|=
literal|"host123:100"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsUtils
operator|.
name|getScmAddressForBlockClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|scmHost
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockClientFallbackToScmNamesNoPort ()
specifier|public
name|void
name|testBlockClientFallbackToScmNamesNoPort
parameter_list|()
block|{
comment|// When OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY and OZONE_SCM_CLIENT_ADDRESS_KEY
comment|// are undefined it should fallback to OZONE_SCM_NAMES.
specifier|final
name|String
name|scmHost
init|=
literal|"host456"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsUtils
operator|.
name|getScmAddressForBlockClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|scmHost
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StringSplitter"
argument_list|)
DECL|method|testBlockClientFallbackToScmNamesWithPort ()
specifier|public
name|void
name|testBlockClientFallbackToScmNamesWithPort
parameter_list|()
block|{
comment|// When OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY and OZONE_SCM_CLIENT_ADDRESS_KEY
comment|// are undefined it should fallback to OZONE_SCM_NAMES.
comment|//
comment|// Verify that the OZONE_SCM_NAMES port number is ignored, if present.
comment|// Instead we should use OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT.
specifier|final
name|String
name|scmHost
init|=
literal|"host456:200"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsUtils
operator|.
name|getScmAddressForBlockClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|scmHost
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClientFallbackToScmNamesNoPort ()
specifier|public
name|void
name|testClientFallbackToScmNamesNoPort
parameter_list|()
block|{
comment|// When OZONE_SCM_CLIENT_ADDRESS_KEY is undefined, it should fallback
comment|// to OZONE_SCM_NAMES.
specifier|final
name|String
name|scmHost
init|=
literal|"host456"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsUtils
operator|.
name|getScmAddressForClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|scmHost
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OZONE_SCM_CLIENT_PORT_DEFAULT
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StringSplitter"
argument_list|)
DECL|method|testClientFallbackToScmNamesWithPort ()
specifier|public
name|void
name|testClientFallbackToScmNamesWithPort
parameter_list|()
block|{
comment|// When OZONE_SCM_CLIENT_ADDRESS_KEY is undefined, it should fallback
comment|// to OZONE_SCM_NAMES.
comment|//
comment|// Verify that the OZONE_SCM_NAMES port number is ignored, if present.
comment|// Instead we should use OZONE_SCM_BLOCK_CLIENT_PORT_DEFAULT.
specifier|final
name|String
name|scmHost
init|=
literal|"host456:300"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|HddsUtils
operator|.
name|getScmAddressForClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|scmHost
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OZONE_SCM_CLIENT_PORT_DEFAULT
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockClientFailsWithMultipleScmNames ()
specifier|public
name|void
name|testBlockClientFailsWithMultipleScmNames
parameter_list|()
block|{
comment|// When OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY and OZONE_SCM_CLIENT_ADDRESS_KEY
comment|// are undefined, fail if OZONE_SCM_NAMES has multiple SCMs.
specifier|final
name|String
name|scmHost
init|=
literal|"host123,host456"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|HddsUtils
operator|.
name|getScmAddressForBlockClients
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClientFailsWithMultipleScmNames ()
specifier|public
name|void
name|testClientFailsWithMultipleScmNames
parameter_list|()
block|{
comment|// When OZONE_SCM_CLIENT_ADDRESS_KEY is undefined, fail if OZONE_SCM_NAMES
comment|// has multiple SCMs.
specifier|final
name|String
name|scmHost
init|=
literal|"host123,host456"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
name|scmHost
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|HddsUtils
operator|.
name|getScmAddressForClients
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

