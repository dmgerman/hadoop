begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|BlockOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|KeyOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_SCM_WATCHER_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL
import|;
end_import

begin_comment
comment|/**  * Tests BlockOutputStream class.  */
end_comment

begin_class
DECL|class|TestBlockOutputStream
specifier|public
class|class
name|TestBlockOutputStream
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|OzoneClient
name|client
decl_stmt|;
DECL|field|objectStore
specifier|private
specifier|static
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|static
name|int
name|chunkSize
decl_stmt|;
DECL|field|flushSize
specifier|private
specifier|static
name|int
name|flushSize
decl_stmt|;
DECL|field|maxFlushSize
specifier|private
specifier|static
name|int
name|maxFlushSize
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|static
name|int
name|blockSize
decl_stmt|;
DECL|field|volumeName
specifier|private
specifier|static
name|String
name|volumeName
decl_stmt|;
DECL|field|bucketName
specifier|private
specifier|static
name|String
name|bucketName
decl_stmt|;
DECL|field|keyString
specifier|private
specifier|static
name|String
name|keyString
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|chunkSize
operator|=
literal|100
expr_stmt|;
name|flushSize
operator|=
literal|2
operator|*
name|chunkSize
expr_stmt|;
name|maxFlushSize
operator|=
literal|2
operator|*
name|flushSize
expr_stmt|;
name|blockSize
operator|=
literal|2
operator|*
name|maxFlushSize
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_WATCH_REQUEST_TIMEOUT
argument_list|,
literal|"5000ms"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|HDDS_SCM_WATCHER_TIMEOUT
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_CHECKSUM_TYPE
argument_list|,
literal|"NONE"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStorageSize
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_BLOCK_SIZE
argument_list|,
literal|4
argument_list|,
name|StorageUnit
operator|.
name|MB
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|7
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|setChunkSize
argument_list|(
name|chunkSize
argument_list|)
operator|.
name|setStreamBufferFlushSize
argument_list|(
name|flushSize
argument_list|)
operator|.
name|setStreamBufferMaxSize
argument_list|(
name|maxFlushSize
argument_list|)
operator|.
name|setStreamBufferSizeUnit
argument_list|(
name|StorageUnit
operator|.
name|BYTES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
comment|//the easiest way to create an open container is creating a key
name|client
operator|=
name|OzoneClientFactory
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|objectStore
operator|=
name|client
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
name|keyString
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|volumeName
operator|=
literal|"testblockoutputstream"
expr_stmt|;
name|bucketName
operator|=
name|volumeName
expr_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyName ()
specifier|private
name|String
name|getKeyName
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBufferCaching ()
specifier|public
name|void
name|testBufferCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|XceiverClientMetrics
name|metrics
init|=
name|XceiverClientManager
operator|.
name|getXceiverClientMetrics
argument_list|()
decl_stmt|;
name|long
name|writeChunkCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|putBlockCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|pendingWriteChunkCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|pendingPutBlockCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|totalOpCount
init|=
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|getKeyName
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|dataLength
init|=
literal|50
decl_stmt|;
name|byte
index|[]
name|data1
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|dataLength
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|KeyOutputStream
argument_list|)
expr_stmt|;
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|instanceof
name|BlockOutputStream
argument_list|)
expr_stmt|;
name|BlockOutputStream
name|blockOutputStream
init|=
operator|(
name|BlockOutputStream
operator|)
name|stream
decl_stmt|;
comment|// we have just written data less than a chunk size, the data will just sit
comment|// in the buffer, with only one buffer being allocated in the buffer pool
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//Just the writtenDataLength will be updated here
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// no data will be flushed till now
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|XceiverClientManager
operator|.
name|getXceiverClientMetrics
argument_list|()
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|XceiverClientManager
operator|.
name|getXceiverClientMetrics
argument_list|()
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
comment|// commitIndex2FlushedData Map will be empty here
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now do a flush. This will flush the data and update the flush length and
comment|// the map.
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// flush is a sync call, all pending operations will complete
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
comment|// we have just written data less than a chunk size, the data will just sit
comment|// in the buffer, with only one buffer being allocated in the buffer pool
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getBuffer
argument_list|(
literal|0
argument_list|)
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush ensures watchForCommit updates the total length acknowledged
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now close the stream, It will update the ack length after watchForCommit
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalOpCount
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the bufferPool is empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|computeBufferData
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFlushChunk ()
specifier|public
name|void
name|testFlushChunk
parameter_list|()
throws|throws
name|Exception
block|{
name|XceiverClientMetrics
name|metrics
init|=
name|XceiverClientManager
operator|.
name|getXceiverClientMetrics
argument_list|()
decl_stmt|;
name|long
name|writeChunkCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|putBlockCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|pendingWriteChunkCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|pendingPutBlockCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|totalOpCount
init|=
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|getKeyName
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|dataLength
init|=
name|flushSize
decl_stmt|;
comment|// write data equal to 2 chunks
name|byte
index|[]
name|data1
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|dataLength
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|KeyOutputStream
argument_list|)
expr_stmt|;
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|instanceof
name|BlockOutputStream
argument_list|)
expr_stmt|;
name|BlockOutputStream
name|blockOutputStream
init|=
operator|(
name|BlockOutputStream
operator|)
name|stream
decl_stmt|;
comment|// we have just written data equal flush Size = 2 chunks, at this time
comment|// buffer pool will have 2 buffers allocated worth of chunk size
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// writtenDataLength as well flushedDataLength will be updated here
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now do a flush. This will flush the data and update the flush length and
comment|// the map.
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush is a sync call, all pending operations will complete
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since the data in the buffer is already flushed, flush here will have
comment|// no impact on the counters and data structures
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|computeBufferData
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush ensures watchForCommit updates the total length acknowledged
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// now close the stream, It will update the ack length after watchForCommit
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the bufferPool is empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|computeBufferData
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalOpCount
operator|+
literal|3
argument_list|,
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiChunkWrite ()
specifier|public
name|void
name|testMultiChunkWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|XceiverClientMetrics
name|metrics
init|=
name|XceiverClientManager
operator|.
name|getXceiverClientMetrics
argument_list|()
decl_stmt|;
name|long
name|writeChunkCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|putBlockCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|pendingWriteChunkCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|pendingPutBlockCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|totalOpCount
init|=
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|getKeyName
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|dataLength
init|=
name|chunkSize
operator|+
literal|50
decl_stmt|;
comment|// write data more than 1 chunk
name|byte
index|[]
name|data1
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|dataLength
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|KeyOutputStream
argument_list|)
expr_stmt|;
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|instanceof
name|BlockOutputStream
argument_list|)
expr_stmt|;
name|BlockOutputStream
name|blockOutputStream
init|=
operator|(
name|BlockOutputStream
operator|)
name|stream
decl_stmt|;
comment|// we have just written data equal flush Size> 1 chunk, at this time
comment|// buffer pool will have 2 buffers allocated worth of chunk size
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// writtenDataLength as well flushedDataLength will be updated here
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// since data written is still less than flushLength, flushLength will
comment|// still be 0.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now do a flush. This will flush the data and update the flush length and
comment|// the map.
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush ensures watchForCommit updates the total length acknowledged
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// now close the stream, It will update the ack length after watchForCommit
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the bufferPool is empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|computeBufferData
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalOpCount
operator|+
literal|3
argument_list|,
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiChunkWrite2 ()
specifier|public
name|void
name|testMultiChunkWrite2
parameter_list|()
throws|throws
name|Exception
block|{
name|XceiverClientMetrics
name|metrics
init|=
name|XceiverClientManager
operator|.
name|getXceiverClientMetrics
argument_list|()
decl_stmt|;
name|long
name|writeChunkCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|putBlockCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|pendingWriteChunkCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|pendingPutBlockCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|totalOpCount
init|=
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|getKeyName
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|dataLength
init|=
name|flushSize
operator|+
literal|50
decl_stmt|;
comment|// write data more than 1 chunk
name|byte
index|[]
name|data1
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|dataLength
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
operator|+
literal|1
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|KeyOutputStream
argument_list|)
expr_stmt|;
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|instanceof
name|BlockOutputStream
argument_list|)
expr_stmt|;
name|BlockOutputStream
name|blockOutputStream
init|=
operator|(
name|BlockOutputStream
operator|)
name|stream
decl_stmt|;
comment|// we have just written data more than flush Size(2 chunks), at this time
comment|// buffer pool will have 3 buffers allocated worth of chunk size
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// writtenDataLength as well flushedDataLength will be updated here
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flushSize
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|flushSize
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|3
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalOpCount
operator|+
literal|5
argument_list|,
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the bufferPool is empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|computeBufferData
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFullBufferCondition ()
specifier|public
name|void
name|testFullBufferCondition
parameter_list|()
throws|throws
name|Exception
block|{
name|XceiverClientMetrics
name|metrics
init|=
name|XceiverClientManager
operator|.
name|getXceiverClientMetrics
argument_list|()
decl_stmt|;
name|long
name|writeChunkCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|putBlockCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|pendingWriteChunkCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|pendingPutBlockCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|totalOpCount
init|=
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|getKeyName
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|dataLength
init|=
name|maxFlushSize
decl_stmt|;
comment|// write data more than 1 chunk
name|byte
index|[]
name|data1
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|dataLength
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
comment|// since its hitting the full bufferCondition, it will call watchForCommit
comment|// and completes atleast putBlock for first flushSize worth of data
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
operator|<=
name|pendingWriteChunkCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
operator|<=
name|pendingPutBlockCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|KeyOutputStream
argument_list|)
expr_stmt|;
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|instanceof
name|BlockOutputStream
argument_list|)
expr_stmt|;
name|BlockOutputStream
name|blockOutputStream
init|=
operator|(
name|BlockOutputStream
operator|)
name|stream
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// writtenDataLength as well flushedDataLength will be updated here
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxFlushSize
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// since data equals to maxBufferSize is written, this will be a blocking
comment|// call and hence will wait for atleast flushSize worth of data to get
comment|// ack'd by all servers right here
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
operator|>=
name|flushSize
argument_list|)
expr_stmt|;
comment|// watchForCommit will clean up atleast one entry from the map where each
comment|// entry corresponds to flushSize worth of data
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
comment|// Now do a flush. This will flush the data and update the flush length and
comment|// the map.
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since the data in the buffer is already flushed, flush here will have
comment|// no impact on the counters and data structures
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
comment|// now close the stream, It will update the ack length after watchForCommit
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|4
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalOpCount
operator|+
literal|6
argument_list|,
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the bufferPool is empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|computeBufferData
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteWithExceedingMaxBufferLimit ()
specifier|public
name|void
name|testWriteWithExceedingMaxBufferLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|XceiverClientMetrics
name|metrics
init|=
name|XceiverClientManager
operator|.
name|getXceiverClientMetrics
argument_list|()
decl_stmt|;
name|long
name|writeChunkCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|putBlockCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|pendingWriteChunkCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|pendingPutBlockCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|totalOpCount
init|=
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|getKeyName
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|dataLength
init|=
name|maxFlushSize
operator|+
literal|50
decl_stmt|;
comment|// write data more than 1 chunk
name|byte
index|[]
name|data1
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|dataLength
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|KeyOutputStream
argument_list|)
expr_stmt|;
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
comment|// since its hitting the full bufferCondition, it will call watchForCommit
comment|// and completes atleast putBlock for first flushSize worth of data
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
operator|<=
name|pendingWriteChunkCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
operator|<=
name|pendingPutBlockCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|4
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalOpCount
operator|+
literal|6
argument_list|,
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|instanceof
name|BlockOutputStream
argument_list|)
expr_stmt|;
name|BlockOutputStream
name|blockOutputStream
init|=
operator|(
name|BlockOutputStream
operator|)
name|stream
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// writtenDataLength as well flushedDataLength will be updated here
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxFlushSize
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// since data equals to maxBufferSize is written, this will be a blocking
comment|// call and hence will wait for atleast flushSize worth of data to get
comment|// ack'd by all servers right here
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
operator|>=
name|flushSize
argument_list|)
expr_stmt|;
comment|// watchForCommit will clean up atleast one entry from the map where each
comment|// entry corresponds to flushSize worth of data
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
comment|// Now do a flush. This will flush the data and update the flush length and
comment|// the map.
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since the data in the buffer is already flushed, flush here will have
comment|// no impact on the counters and data structures
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush will make sure one more entry gets updated in the map
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|2
argument_list|)
expr_stmt|;
comment|// now close the stream, It will update the ack length after watchForCommit
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the bufferPool is empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|computeBufferData
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|5
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|3
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalOpCount
operator|+
literal|8
argument_list|,
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data1
argument_list|)
expr_stmt|;
block|}
DECL|method|createKey (String keyName, ReplicationType type, long size)
specifier|private
name|OzoneOutputStream
name|createKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|ReplicationType
name|type
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ContainerTestHelper
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|objectStore
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
return|;
block|}
DECL|method|validateData (String keyName, byte[] data)
specifier|private
name|void
name|validateData
parameter_list|(
name|String
name|keyName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerTestHelper
operator|.
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data
argument_list|,
name|objectStore
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

