begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfoGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|function
operator|.
name|CheckedConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Helper class for Tests.  */
end_comment

begin_class
DECL|class|OzoneTestUtils
specifier|public
specifier|final
class|class
name|OzoneTestUtils
block|{
comment|/**    * Never Constructed.    */
DECL|method|OzoneTestUtils ()
specifier|private
name|OzoneTestUtils
parameter_list|()
block|{   }
comment|/**    * Close containers which contain the blocks listed in    * omKeyLocationInfoGroups.    *    * @param omKeyLocationInfoGroups locationInfos for a key.    * @param scm StorageContainerManager instance.    * @return true if close containers is successful.    * @throws IOException    */
DECL|method|closeContainers ( List<OmKeyLocationInfoGroup> omKeyLocationInfoGroups, StorageContainerManager scm)
specifier|public
specifier|static
name|void
name|closeContainers
parameter_list|(
name|List
argument_list|<
name|OmKeyLocationInfoGroup
argument_list|>
name|omKeyLocationInfoGroups
parameter_list|,
name|StorageContainerManager
name|scm
parameter_list|)
throws|throws
name|Exception
block|{
name|performOperationOnKeyContainers
argument_list|(
parameter_list|(
name|blockID
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getState
argument_list|()
operator|==
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
condition|)
block|{
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|updateContainerState
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|FINALIZE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getState
argument_list|()
operator|==
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|CLOSING
condition|)
block|{
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|updateContainerState
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|scm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|omKeyLocationInfoGroups
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs the provided consumer on containers which contain the blocks    * listed in omKeyLocationInfoGroups.    *    * @param consumer Consumer which accepts BlockID as argument.    * @param omKeyLocationInfoGroups locationInfos for a key.    * @throws IOException    */
DECL|method|performOperationOnKeyContainers ( CheckedConsumer<BlockID, Exception> consumer, List<OmKeyLocationInfoGroup> omKeyLocationInfoGroups)
specifier|public
specifier|static
name|void
name|performOperationOnKeyContainers
parameter_list|(
name|CheckedConsumer
argument_list|<
name|BlockID
argument_list|,
name|Exception
argument_list|>
name|consumer
parameter_list|,
name|List
argument_list|<
name|OmKeyLocationInfoGroup
argument_list|>
name|omKeyLocationInfoGroups
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|OmKeyLocationInfoGroup
name|omKeyLocationInfoGroup
range|:
name|omKeyLocationInfoGroups
control|)
block|{
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|omKeyLocationInfos
init|=
name|omKeyLocationInfoGroup
operator|.
name|getLocationList
argument_list|()
decl_stmt|;
for|for
control|(
name|OmKeyLocationInfo
name|omKeyLocationInfo
range|:
name|omKeyLocationInfos
control|)
block|{
name|BlockID
name|blockID
init|=
name|omKeyLocationInfo
operator|.
name|getBlockID
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

