begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneHAClusterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|VolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|OzoneManagerRatisServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBCheckpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|TestOzoneManagerHA
operator|.
name|createKey
import|;
end_import

begin_comment
comment|/**  * Tests the Ratis snaphsots feature in OM.  */
end_comment

begin_class
DECL|class|TestOMRatisSnapshots
specifier|public
class|class
name|TestOMRatisSnapshots
block|{
DECL|field|cluster
specifier|private
name|MiniOzoneHAClusterImpl
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|objectStore
specifier|private
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
decl_stmt|;
DECL|field|scmId
specifier|private
name|String
name|scmId
decl_stmt|;
DECL|field|numOfOMs
specifier|private
name|int
name|numOfOMs
init|=
literal|3
decl_stmt|;
DECL|field|SNAPSHOT_THRESHOLD
specifier|private
specifier|static
specifier|final
name|long
name|SNAPSHOT_THRESHOLD
init|=
literal|50
decl_stmt|;
DECL|field|LOG_PURGE_GAP
specifier|private
specifier|static
specifier|final
name|int
name|LOG_PURGE_GAP
init|=
literal|50
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|500_000
argument_list|)
decl_stmt|;
comment|/**    * Create a MiniOzoneCluster for testing. The cluster initially has one    * inactive OM. So at the start of the cluster, there will be 2 active and 1    * inactive OM.    *    * @throws IOException    */
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|clusterId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scmId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY
argument_list|,
name|SNAPSHOT_THRESHOLD
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_LOG_PURGE_GAP
argument_list|,
name|LOG_PURGE_GAP
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|(
name|MiniOzoneHAClusterImpl
operator|)
name|MiniOzoneCluster
operator|.
name|newHABuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
operator|.
name|setOMServiceId
argument_list|(
literal|"om-service-test1"
argument_list|)
operator|.
name|setNumOfOzoneManagers
argument_list|(
name|numOfOMs
argument_list|)
operator|.
name|setNumOfActiveOMs
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|objectStore
operator|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInstallSnapshot ()
specifier|public
name|void
name|testInstallSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get the leader OM
name|String
name|leaderOMNodeId
init|=
name|objectStore
operator|.
name|getClientProxy
argument_list|()
operator|.
name|getOMProxyProvider
argument_list|()
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
decl_stmt|;
name|OzoneManager
name|leaderOM
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|(
name|leaderOMNodeId
argument_list|)
decl_stmt|;
name|OzoneManagerRatisServer
name|leaderRatisServer
init|=
name|leaderOM
operator|.
name|getOmRatisServer
argument_list|()
decl_stmt|;
comment|// Find the inactive OM
name|String
name|followerNodeId
init|=
name|leaderOM
operator|.
name|getPeerNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOMNodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|cluster
operator|.
name|isOMActive
argument_list|(
name|followerNodeId
argument_list|)
condition|)
block|{
name|followerNodeId
operator|=
name|leaderOM
operator|.
name|getPeerNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOMNodeId
argument_list|()
expr_stmt|;
block|}
name|OzoneManager
name|followerOM
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|(
name|followerNodeId
argument_list|)
decl_stmt|;
comment|// Do some transactions so that the log index increases
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
name|VolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOwner
argument_list|(
name|userName
argument_list|)
operator|.
name|setAdmin
argument_list|(
name|adminName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|OzoneVolume
name|retVolumeinfo
init|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|retVolumeinfo
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|ozoneBucket
init|=
name|retVolumeinfo
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|long
name|leaderOMappliedLogIndex
init|=
name|leaderRatisServer
operator|.
name|getStateMachineLastAppliedIndex
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|leaderOMappliedLogIndex
operator|<
literal|2000
condition|)
block|{
name|keys
operator|.
name|add
argument_list|(
name|createKey
argument_list|(
name|ozoneBucket
argument_list|)
argument_list|)
expr_stmt|;
name|leaderOMappliedLogIndex
operator|=
name|leaderRatisServer
operator|.
name|getStateMachineLastAppliedIndex
argument_list|()
expr_stmt|;
block|}
comment|// Get the latest db checkpoint from the leader OM.
name|long
name|leaderOMSnaphsotIndex
init|=
name|leaderOM
operator|.
name|saveRatisSnapshot
argument_list|()
decl_stmt|;
name|DBCheckpoint
name|leaderDbCheckpoint
init|=
name|leaderOM
operator|.
name|getMetadataManager
argument_list|()
operator|.
name|getStore
argument_list|()
operator|.
name|getCheckpoint
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Start the inactive OM
name|cluster
operator|.
name|startInactiveOM
argument_list|(
name|followerNodeId
argument_list|)
expr_stmt|;
comment|// The recently started OM should be lagging behind the leader OM.
name|long
name|followerOMLastAppliedIndex
init|=
name|followerOM
operator|.
name|getOmRatisServer
argument_list|()
operator|.
name|getStateMachineLastAppliedIndex
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|followerOMLastAppliedIndex
operator|<
name|leaderOMSnaphsotIndex
argument_list|)
expr_stmt|;
comment|// Install leader OM's db checkpoint on the lagging OM.
name|followerOM
operator|.
name|getOmRatisServer
argument_list|()
operator|.
name|getOmStateMachine
argument_list|()
operator|.
name|pause
argument_list|()
expr_stmt|;
name|followerOM
operator|.
name|getMetadataManager
argument_list|()
operator|.
name|getStore
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|followerOM
operator|.
name|replaceOMDBWithCheckpoint
argument_list|(
name|leaderOMSnaphsotIndex
argument_list|,
name|leaderDbCheckpoint
operator|.
name|getCheckpointLocation
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reload the follower OM with new DB checkpoint from the leader OM.
name|followerOM
operator|.
name|reloadOMState
argument_list|(
name|leaderOMSnaphsotIndex
argument_list|)
expr_stmt|;
name|followerOM
operator|.
name|getOmRatisServer
argument_list|()
operator|.
name|getOmStateMachine
argument_list|()
operator|.
name|unpause
argument_list|(
name|leaderOMSnaphsotIndex
argument_list|)
expr_stmt|;
comment|// After the new checkpoint is loaded and state machine is unpaused, the
comment|// follower OM lastAppliedIndex must match the snapshot index of the
comment|// checkpoint.
name|followerOMLastAppliedIndex
operator|=
name|followerOM
operator|.
name|getOmRatisServer
argument_list|()
operator|.
name|getStateMachineLastAppliedIndex
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|leaderOMSnaphsotIndex
argument_list|,
name|followerOMLastAppliedIndex
argument_list|)
expr_stmt|;
comment|// Verify that the follower OM's DB contains the transactions which were
comment|// made while it was inactive.
name|OMMetadataManager
name|followerOMMetaMngr
init|=
name|followerOM
operator|.
name|getMetadataManager
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|followerOMMetaMngr
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|followerOMMetaMngr
operator|.
name|getVolumeKey
argument_list|(
name|volumeName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|followerOMMetaMngr
operator|.
name|getBucketTable
argument_list|()
operator|.
name|get
argument_list|(
name|followerOMMetaMngr
operator|.
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|followerOMMetaMngr
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|followerOMMetaMngr
operator|.
name|getOzoneKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

