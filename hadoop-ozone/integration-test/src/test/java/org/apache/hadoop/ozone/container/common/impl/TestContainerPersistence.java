begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|StorageContainerDatanodeProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|StorageLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|VolumeChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|RoundRobinVolumeChoosingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|BlockUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|impl
operator|.
name|ChunkManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|impl
operator|.
name|BlockManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|interfaces
operator|.
name|ChunkManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|interfaces
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|BCSID_MISMATCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Result
operator|.
name|UNKNOWN_BCSID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|Stage
operator|.
name|COMBINED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|getChunk
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|getData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|setDataChecksum
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Simple tests to verify that container persistence works as expected. Some of  * these tests are specific to {@link KeyValueContainer}. If a new {@link  * ContainerProtos.ContainerType} is added, the tests need to be modified.  */
end_comment

begin_class
DECL|class|TestContainerPersistence
specifier|public
class|class
name|TestContainerPersistence
block|{
DECL|field|DATANODE_UUID
specifier|private
specifier|static
specifier|final
name|String
name|DATANODE_UUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|SCM_ID
specifier|private
specifier|static
specifier|final
name|String
name|SCM_ID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestContainerPersistence
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|hddsPath
specifier|private
specifier|static
name|String
name|hddsPath
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|containerSet
specifier|private
specifier|static
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|volumeSet
specifier|private
specifier|static
name|VolumeSet
name|volumeSet
decl_stmt|;
DECL|field|volumeChoosingPolicy
specifier|private
specifier|static
name|VolumeChoosingPolicy
name|volumeChoosingPolicy
decl_stmt|;
DECL|field|blockManager
specifier|private
specifier|static
name|BlockManager
name|blockManager
decl_stmt|;
DECL|field|chunkManager
specifier|private
specifier|static
name|ChunkManager
name|chunkManager
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * Set the timeout for every test.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
DECL|field|containerID
specifier|private
name|Long
name|containerID
init|=
literal|8888L
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Throwable
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|hddsPath
operator|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestContainerPersistence
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_DATANODE_DIR_KEY
argument_list|,
name|hddsPath
argument_list|)
expr_stmt|;
name|volumeChoosingPolicy
operator|=
operator|new
name|RoundRobinVolumeChoosingPolicy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|hddsPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupPaths ()
specifier|public
name|void
name|setupPaths
parameter_list|()
throws|throws
name|IOException
block|{
name|containerSet
operator|=
operator|new
name|ContainerSet
argument_list|()
expr_stmt|;
name|volumeSet
operator|=
operator|new
name|VolumeSet
argument_list|(
name|DATANODE_UUID
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|blockManager
operator|=
operator|new
name|BlockManagerImpl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|chunkManager
operator|=
operator|new
name|ChunkManagerImpl
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|conf
operator|.
name|getStrings
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_DATANODE_DIR_KEY
argument_list|)
control|)
block|{
name|StorageLocation
name|location
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
operator|new
name|File
argument_list|(
name|location
operator|.
name|getNormalizedUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|cleanupDir ()
specifier|public
name|void
name|cleanupDir
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Clean up SCM metadata
name|log
operator|.
name|info
argument_list|(
literal|"Deleting {}"
argument_list|,
name|hddsPath
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|hddsPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clean up SCM datanode container metadata/data
for|for
control|(
name|String
name|dir
range|:
name|conf
operator|.
name|getStrings
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_DATANODE_DIR_KEY
argument_list|)
control|)
block|{
name|StorageLocation
name|location
init|=
name|StorageLocation
operator|.
name|parse
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|location
operator|.
name|getNormalizedUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTestContainerID ()
specifier|private
name|long
name|getTestContainerID
parameter_list|()
block|{
return|return
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
return|;
block|}
DECL|method|addContainer (ContainerSet cSet, long cID)
specifier|private
name|Container
name|addContainer
parameter_list|(
name|ContainerSet
name|cSet
parameter_list|,
name|long
name|cID
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyValueContainerData
name|data
init|=
operator|new
name|KeyValueContainerData
argument_list|(
name|cID
argument_list|,
name|ContainerTestHelper
operator|.
name|CONTAINER_MAX_SIZE
argument_list|)
decl_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire"
argument_list|)
expr_stmt|;
name|data
operator|.
name|addMetadata
argument_list|(
literal|"owner)"
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|KeyValueContainer
name|container
init|=
operator|new
name|KeyValueContainer
argument_list|(
name|data
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|container
operator|.
name|create
argument_list|(
name|volumeSet
argument_list|,
name|volumeChoosingPolicy
argument_list|,
name|SCM_ID
argument_list|)
expr_stmt|;
name|cSet
operator|.
name|addContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateContainer ()
specifier|public
name|void
name|testCreateContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerSet
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testContainerID
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValueContainerData
name|kvData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|containerSet
operator|.
name|getContainer
argument_list|(
name|testContainerID
argument_list|)
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kvData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|kvData
operator|.
name|getMetadataPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|File
argument_list|(
name|kvData
operator|.
name|getChunksPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|kvData
operator|.
name|getDbFile
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|meta
init|=
name|kvData
operator|.
name|getDbFile
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|meta
operator|!=
literal|null
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
name|MetadataStore
name|store
init|=
literal|null
decl_stmt|;
try|try
block|{
name|store
operator|=
name|BlockUtils
operator|.
name|getDB
argument_list|(
name|kvData
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateDuplicateContainer ()
specifier|public
name|void
name|testCreateDuplicateContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
try|try
block|{
name|containerSet
operator|.
name|addContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected Exception not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteContainer ()
specifier|public
name|void
name|testDeleteContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|testContainerID1
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|long
name|testContainerID2
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container1
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID1
argument_list|)
decl_stmt|;
name|container1
operator|.
name|close
argument_list|()
expr_stmt|;
name|Container
name|container2
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerSet
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testContainerID1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerSet
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testContainerID2
argument_list|)
argument_list|)
expr_stmt|;
name|container1
operator|.
name|delete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|containerSet
operator|.
name|removeContainer
argument_list|(
name|testContainerID1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|containerSet
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testContainerID1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Adding block to a deleted container should fail.
name|exception
operator|.
name|expect
argument_list|(
name|StorageContainerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Error opening DB."
argument_list|)
expr_stmt|;
name|BlockID
name|blockID1
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID1
argument_list|)
decl_stmt|;
name|BlockData
name|someKey1
init|=
operator|new
name|BlockData
argument_list|(
name|blockID1
argument_list|)
decl_stmt|;
name|someKey1
operator|.
name|setChunks
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|putBlock
argument_list|(
name|container1
argument_list|,
name|someKey1
argument_list|)
expr_stmt|;
comment|// Deleting a non-empty container should fail.
name|BlockID
name|blockID2
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID2
argument_list|)
decl_stmt|;
name|BlockData
name|someKey2
init|=
operator|new
name|BlockData
argument_list|(
name|blockID2
argument_list|)
decl_stmt|;
name|someKey2
operator|.
name|setChunks
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|putBlock
argument_list|(
name|container2
argument_list|,
name|someKey2
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|StorageContainerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Container cannot be deleted because it is not empty."
argument_list|)
expr_stmt|;
name|container2
operator|.
name|delete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerSet
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testContainerID1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainerReports ()
specifier|public
name|void
name|testGetContainerReports
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|count
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|containerIDs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
comment|// Close a bunch of containers.
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|containerIDs
operator|.
name|add
argument_list|(
name|testContainerID
argument_list|)
expr_stmt|;
block|}
comment|// ContainerSet#getContainerReport currently returns all containers (open
comment|// and closed) reports.
name|List
argument_list|<
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
argument_list|>
name|reports
init|=
name|containerSet
operator|.
name|getContainerReport
argument_list|()
operator|.
name|getReportsList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|reports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StorageContainerDatanodeProtocolProtos
operator|.
name|ContainerInfo
name|report
range|:
name|reports
control|)
block|{
name|long
name|actualContainerID
init|=
name|report
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerIDs
operator|.
name|remove
argument_list|(
name|actualContainerID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerIDs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test creates 50 containers and reads them back 5 containers at a time    * and verifies that we did get back all containers.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testListContainer ()
specifier|public
name|void
name|testListContainer
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|step
init|=
literal|5
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|ContainerData
argument_list|>
name|testMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|count
condition|;
name|x
operator|++
control|)
block|{
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|testMap
operator|.
name|put
argument_list|(
name|testContainerID
argument_list|,
name|container
operator|.
name|getContainerData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|long
name|prevKey
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|ContainerData
argument_list|>
name|results
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|counter
operator|<
name|count
condition|)
block|{
name|containerSet
operator|.
name|listContainer
argument_list|(
name|prevKey
argument_list|,
name|step
argument_list|,
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
name|testMap
operator|.
name|remove
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|y
argument_list|)
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|counter
operator|+=
name|step
expr_stmt|;
name|long
name|nextKey
init|=
name|results
operator|.
name|get
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
comment|//Assert that container is returning results in a sorted fashion.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|prevKey
operator|<
name|nextKey
argument_list|)
expr_stmt|;
name|prevKey
operator|=
name|nextKey
operator|+
literal|1
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Assert that we listed all the keys that we had put into
comment|// container.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testMap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeChunkHelper (BlockID blockID)
specifier|private
name|ChunkInfo
name|writeChunkHelper
parameter_list|(
name|BlockID
name|blockID
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
name|long
name|testContainerID
init|=
name|blockID
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|containerSet
operator|.
name|getContainer
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|container
operator|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
expr_stmt|;
block|}
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
name|COMBINED
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Writes a single chunk.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testWriteChunk ()
specifier|public
name|void
name|testWriteChunk
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|getTestContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|writeChunkHelper
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes many chunks of the same block into different chunk files and    * verifies that we have that data in many files.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testWritReadManyChunks ()
specifier|public
name|void
name|testWritReadManyChunks
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|chunkCount
init|=
literal|1024
decl_stmt|;
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ChunkInfo
argument_list|>
name|fileHashMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|chunkCount
condition|;
name|x
operator|++
control|)
block|{
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|x
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
name|COMBINED
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s.data.%d"
argument_list|,
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|fileHashMap
operator|.
name|put
argument_list|(
name|fileName
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|KeyValueContainerData
name|cNewData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|container
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cNewData
argument_list|)
expr_stmt|;
name|Path
name|dataDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|cNewData
operator|.
name|getChunksPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|globFormat
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s.data.*"
argument_list|,
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
decl_stmt|;
name|MessageDigest
name|sha
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
comment|// Read chunk via file system and verify.
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|dataDir
argument_list|,
name|globFormat
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|fname
range|:
name|stream
control|)
block|{
name|sha
operator|.
name|update
argument_list|(
name|FileUtils
operator|.
name|readFileToByteArray
argument_list|(
name|fname
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|val
init|=
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha
operator|.
name|digest
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileHashMap
operator|.
name|get
argument_list|(
name|fname
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getChecksum
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|sha
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|chunkCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Read chunk via ReadChunk call.
name|sha
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|chunkCount
condition|;
name|x
operator|++
control|)
block|{
name|String
name|fileName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s.data.%d"
argument_list|,
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|fileHashMap
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|chunkManager
operator|.
name|readChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|sha
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|,
name|info
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
name|sha
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test partial within a single chunk.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testPartialRead ()
specifier|public
name|void
name|testPartialRead
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|datalen
operator|/
literal|4
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|datalen
operator|/
literal|2
decl_stmt|;
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
name|COMBINED
argument_list|)
expr_stmt|;
name|byte
index|[]
name|readData
init|=
name|chunkManager
operator|.
name|readChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|readData
argument_list|)
argument_list|)
expr_stmt|;
name|ChunkInfo
name|info2
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|readData2
init|=
name|chunkManager
operator|.
name|readChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|length
argument_list|,
name|readData2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|start
operator|+
name|length
argument_list|)
argument_list|,
name|readData2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes a single chunk and tries to overwrite that chunk without over write    * flag then re-tries with overwrite flag.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testOverWrite ()
specifier|public
name|void
name|testOverWrite
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
name|COMBINED
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
name|COMBINED
argument_list|)
expr_stmt|;
comment|// With the overwrite flag it should work now.
name|info
operator|.
name|addMetadata
argument_list|(
name|OzoneConsts
operator|.
name|CHUNK_OVERWRITE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
name|COMBINED
argument_list|)
expr_stmt|;
name|long
name|bytesUsed
init|=
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getBytesUsed
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|datalen
argument_list|,
name|bytesUsed
argument_list|)
expr_stmt|;
name|long
name|bytesWrite
init|=
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getWriteBytes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|datalen
operator|*
literal|3
argument_list|,
name|bytesWrite
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test writes data as many small writes and tries to read back the data    * in a single large read.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testMultipleWriteSingleRead ()
specifier|public
name|void
name|testMultipleWriteSingleRead
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|chunkCount
init|=
literal|1024
decl_stmt|;
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|MessageDigest
name|oldSha
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|chunkCount
condition|;
name|x
operator|++
control|)
block|{
comment|// we are writing to the same chunk file but at different offsets.
name|long
name|offset
init|=
name|x
operator|*
name|datalen
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|oldSha
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
name|COMBINED
argument_list|)
expr_stmt|;
block|}
comment|// Request to read the whole data in a single go.
name|ChunkInfo
name|largeChunk
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
operator|*
name|chunkCount
argument_list|)
decl_stmt|;
name|byte
index|[]
name|newdata
init|=
name|chunkManager
operator|.
name|readChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|largeChunk
argument_list|)
decl_stmt|;
name|MessageDigest
name|newSha
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
name|newSha
operator|.
name|update
argument_list|(
name|newdata
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|oldSha
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|,
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|newSha
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes a chunk and deletes it, re-reads to make sure it is gone.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testDeleteChunk ()
specifier|public
name|void
name|testDeleteChunk
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
name|COMBINED
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|deleteChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|StorageContainerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Unable to find the chunk file."
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|readChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a put block and read block.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testPutBlock ()
specifier|public
name|void
name|testPutBlock
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|BlockData
name|blockData
init|=
operator|new
name|BlockData
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|putBlock
argument_list|(
name|container
argument_list|,
name|blockData
argument_list|)
expr_stmt|;
name|BlockData
name|readBlockData
init|=
name|blockManager
operator|.
name|getBlock
argument_list|(
name|container
argument_list|,
name|blockData
operator|.
name|getBlockID
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ChunkInfo
name|readChunk
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|readBlockData
operator|.
name|getChunks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|info
operator|.
name|getChecksum
argument_list|()
argument_list|,
name|readChunk
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a put block and read block with invalid bcsId.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testPutBlockWithInvalidBCSId ()
specifier|public
name|void
name|testPutBlockWithInvalidBCSId
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockID
name|blockID1
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|blockID1
argument_list|)
decl_stmt|;
name|BlockData
name|blockData
init|=
operator|new
name|BlockData
argument_list|(
name|blockID1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setBlockCommitSequenceId
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|putBlock
argument_list|(
name|container
argument_list|,
name|blockData
argument_list|)
expr_stmt|;
name|chunkList
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// write a 2nd block
name|BlockID
name|blockID2
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|info
operator|=
name|writeChunkHelper
argument_list|(
name|blockID2
argument_list|)
expr_stmt|;
name|blockData
operator|=
operator|new
name|BlockData
argument_list|(
name|blockID2
argument_list|)
expr_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setBlockCommitSequenceId
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|putBlock
argument_list|(
name|container
argument_list|,
name|blockData
argument_list|)
expr_stmt|;
name|BlockData
name|readBlockData
decl_stmt|;
try|try
block|{
comment|// read with bcsId higher than container bcsId
name|blockManager
operator|.
name|getBlock
argument_list|(
name|container
argument_list|,
name|blockID1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|sce
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sce
operator|.
name|getResult
argument_list|()
operator|==
name|UNKNOWN_BCSID
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// read with bcsId lower than container bcsId but greater than committed
comment|// bcsId.
name|blockManager
operator|.
name|getBlock
argument_list|(
name|container
argument_list|,
name|blockID1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|sce
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sce
operator|.
name|getResult
argument_list|()
operator|==
name|BCSID_MISMATCH
argument_list|)
expr_stmt|;
block|}
name|readBlockData
operator|=
name|blockManager
operator|.
name|getBlock
argument_list|(
name|container
argument_list|,
name|blockData
operator|.
name|getBlockID
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ChunkInfo
name|readChunk
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|readBlockData
operator|.
name|getChunks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|info
operator|.
name|getChecksum
argument_list|()
argument_list|,
name|readChunk
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a put block and read block.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testPutBlockWithLotsOfChunks ()
specifier|public
name|void
name|testPutBlockWithLotsOfChunks
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|chunkCount
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
name|long
name|totalSize
init|=
literal|0L
decl_stmt|;
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|totalSize
operator|+=
name|datalen
expr_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|1
init|;
name|x
operator|<
name|chunkCount
condition|;
name|x
operator|++
control|)
block|{
comment|// with holes in the front (before x * datalen)
name|info
operator|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|x
argument_list|,
name|x
operator|*
name|datalen
argument_list|,
name|datalen
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|writeChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
name|COMBINED
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|datalen
expr_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|long
name|bytesUsed
init|=
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getBytesUsed
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalSize
argument_list|,
name|bytesUsed
argument_list|)
expr_stmt|;
name|long
name|writeBytes
init|=
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getWriteBytes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|chunkCount
operator|*
name|datalen
argument_list|,
name|writeBytes
argument_list|)
expr_stmt|;
name|long
name|readCount
init|=
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getReadCount
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
name|long
name|writeCount
init|=
name|container
operator|.
name|getContainerData
argument_list|()
operator|.
name|getWriteCount
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|chunkCount
argument_list|,
name|writeCount
argument_list|)
expr_stmt|;
name|BlockData
name|blockData
init|=
operator|new
name|BlockData
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkProtoList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChunkInfo
name|i
range|:
name|chunkList
control|)
block|{
name|chunkProtoList
operator|.
name|add
argument_list|(
name|i
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|blockData
operator|.
name|setChunks
argument_list|(
name|chunkProtoList
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|putBlock
argument_list|(
name|container
argument_list|,
name|blockData
argument_list|)
expr_stmt|;
name|BlockData
name|readBlockData
init|=
name|blockManager
operator|.
name|getBlock
argument_list|(
name|container
argument_list|,
name|blockData
operator|.
name|getBlockID
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ChunkInfo
name|lastChunk
init|=
name|chunkList
operator|.
name|get
argument_list|(
name|chunkList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ChunkInfo
name|readChunk
init|=
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|readBlockData
operator|.
name|getChunks
argument_list|()
operator|.
name|get
argument_list|(
name|readBlockData
operator|.
name|getChunks
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|lastChunk
operator|.
name|getChecksum
argument_list|()
argument_list|,
name|readChunk
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes a block and tries to read it back.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testDeleteBlock ()
specifier|public
name|void
name|testDeleteBlock
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|BlockData
name|blockData
init|=
operator|new
name|BlockData
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|putBlock
argument_list|(
name|container
argument_list|,
name|blockData
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|deleteBlock
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|StorageContainerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Unable to find the block."
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|getBlock
argument_list|(
name|container
argument_list|,
name|blockData
operator|.
name|getBlockID
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tries to Deletes a block twice.    *    * @throws IOException    * @throws NoSuchAlgorithmException    */
annotation|@
name|Test
DECL|method|testDeleteBlockTwice ()
specifier|public
name|void
name|testDeleteBlockTwice
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|BlockData
name|blockData
init|=
operator|new
name|BlockData
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|putBlock
argument_list|(
name|container
argument_list|,
name|blockData
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|deleteBlock
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|StorageContainerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Unable to find the block."
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|deleteBlock
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tries to update an existing and non-existing container. Verifies container    * map and persistent data both updated.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testUpdateContainer ()
specifier|public
name|void
name|testUpdateContainer
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|testContainerID
init|=
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
decl_stmt|;
name|KeyValueContainer
name|container
init|=
operator|(
name|KeyValueContainer
operator|)
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|File
name|orgContainerFile
init|=
name|container
operator|.
name|getContainerFile
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|orgContainerFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newMetadata
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|newMetadata
operator|.
name|put
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire_new"
argument_list|)
expr_stmt|;
name|newMetadata
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
literal|"bilbo_new"
argument_list|)
expr_stmt|;
name|container
operator|.
name|update
argument_list|(
name|newMetadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerSet
operator|.
name|getContainerMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerSet
operator|.
name|getContainerMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|testContainerID
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify in-memory map
name|KeyValueContainerData
name|actualNewData
init|=
operator|(
name|KeyValueContainerData
operator|)
name|containerSet
operator|.
name|getContainer
argument_list|(
name|testContainerID
argument_list|)
operator|.
name|getContainerData
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"shire_new"
argument_list|,
name|actualNewData
operator|.
name|getMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"VOLUME"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bilbo_new"
argument_list|,
name|actualNewData
operator|.
name|getMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify container data on disk
name|File
name|containerBaseDir
init|=
operator|new
name|File
argument_list|(
name|actualNewData
operator|.
name|getMetadataPath
argument_list|()
argument_list|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|File
name|newContainerFile
init|=
name|ContainerUtils
operator|.
name|getContainerFile
argument_list|(
name|containerBaseDir
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Container file should exist."
argument_list|,
name|newContainerFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Container file should be in same location."
argument_list|,
name|orgContainerFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|newContainerFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerData
name|actualContainerData
init|=
name|ContainerDataYaml
operator|.
name|readContainerFile
argument_list|(
name|newContainerFile
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"shire_new"
argument_list|,
name|actualContainerData
operator|.
name|getMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"VOLUME"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bilbo_new"
argument_list|,
name|actualContainerData
operator|.
name|getMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test force update flag.
comment|// Close the container and then try to update without force update flag.
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|container
operator|.
name|update
argument_list|(
name|newMetadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageContainerException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Updating a closed container without "
operator|+
literal|"force option is not allowed. ContainerID: "
operator|+
name|testContainerID
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Update with force flag, it should be success.
name|newMetadata
operator|.
name|put
argument_list|(
literal|"VOLUME"
argument_list|,
literal|"shire_new_1"
argument_list|)
expr_stmt|;
name|newMetadata
operator|.
name|put
argument_list|(
literal|"owner"
argument_list|,
literal|"bilbo_new_1"
argument_list|)
expr_stmt|;
name|container
operator|.
name|update
argument_list|(
name|newMetadata
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Verify in-memory map
name|actualNewData
operator|=
operator|(
name|KeyValueContainerData
operator|)
name|containerSet
operator|.
name|getContainer
argument_list|(
name|testContainerID
argument_list|)
operator|.
name|getContainerData
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"shire_new_1"
argument_list|,
name|actualNewData
operator|.
name|getMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"VOLUME"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bilbo_new_1"
argument_list|,
name|actualNewData
operator|.
name|getMetadata
argument_list|()
operator|.
name|get
argument_list|(
literal|"owner"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeBlockHelper (BlockID blockID, int i)
specifier|private
name|BlockData
name|writeBlockHelper
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|ChunkInfo
name|info
init|=
name|writeChunkHelper
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|BlockData
name|blockData
init|=
operator|new
name|BlockData
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|blockData
operator|.
name|setBlockCommitSequenceId
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setChunks
argument_list|(
name|chunkList
argument_list|)
expr_stmt|;
return|return
name|blockData
return|;
block|}
annotation|@
name|Test
DECL|method|testListBlock ()
specifier|public
name|void
name|testListBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|testContainerID
init|=
name|getTestContainerID
argument_list|()
decl_stmt|;
name|Container
name|container
init|=
name|addContainer
argument_list|(
name|containerSet
argument_list|,
name|testContainerID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlockID
argument_list|>
name|expectedBlocks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|BlockID
name|blockID
init|=
operator|new
name|BlockID
argument_list|(
name|testContainerID
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|expectedBlocks
operator|.
name|add
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
name|BlockData
name|kd
init|=
name|writeBlockHelper
argument_list|(
name|blockID
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|blockManager
operator|.
name|putBlock
argument_list|(
name|container
argument_list|,
name|kd
argument_list|)
expr_stmt|;
block|}
comment|// List all blocks
name|List
argument_list|<
name|BlockData
argument_list|>
name|result
init|=
name|blockManager
operator|.
name|listBlock
argument_list|(
name|container
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|index
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BlockData
name|data
init|=
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testContainerID
argument_list|,
name|data
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedBlocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|data
operator|.
name|getLocalID
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|// List block with startBlock filter
name|long
name|k6
init|=
name|expectedBlocks
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getLocalID
argument_list|()
decl_stmt|;
name|result
operator|=
name|blockManager
operator|.
name|listBlock
argument_list|(
name|container
argument_list|,
name|k6
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|6
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedBlocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
operator|-
literal|6
argument_list|)
operator|.
name|getLocalID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Count must be>0
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Count must be a positive number."
argument_list|)
expr_stmt|;
name|blockManager
operator|.
name|listBlock
argument_list|(
name|container
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

