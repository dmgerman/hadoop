begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientRatis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerWithPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|BufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|CommitWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_SCM_WATCHER_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL
import|;
end_import

begin_comment
comment|/**  * Class to test CommitWatcher functionality.  */
end_comment

begin_class
DECL|class|TestCommitWatcher
specifier|public
class|class
name|TestCommitWatcher
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|OzoneClient
name|client
decl_stmt|;
DECL|field|objectStore
specifier|private
specifier|static
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|static
name|int
name|chunkSize
decl_stmt|;
DECL|field|flushSize
specifier|private
specifier|static
name|long
name|flushSize
decl_stmt|;
DECL|field|maxFlushSize
specifier|private
specifier|static
name|long
name|maxFlushSize
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|static
name|long
name|blockSize
decl_stmt|;
DECL|field|volumeName
specifier|private
specifier|static
name|String
name|volumeName
decl_stmt|;
DECL|field|bucketName
specifier|private
specifier|static
name|String
name|bucketName
decl_stmt|;
DECL|field|keyString
specifier|private
specifier|static
name|String
name|keyString
decl_stmt|;
specifier|private
specifier|static
name|StorageContainerLocationProtocolClientSideTranslatorPB
DECL|field|storageContainerLocationClient
name|storageContainerLocationClient
decl_stmt|;
DECL|field|containerOwner
specifier|private
specifier|static
name|String
name|containerOwner
init|=
literal|"OZONE"
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|chunkSize
operator|=
call|(
name|int
call|)
argument_list|(
literal|1
operator|*
name|OzoneConsts
operator|.
name|MB
argument_list|)
expr_stmt|;
name|flushSize
operator|=
literal|2
operator|*
name|chunkSize
expr_stmt|;
name|maxFlushSize
operator|=
literal|2
operator|*
name|flushSize
expr_stmt|;
name|blockSize
operator|=
literal|2
operator|*
name|maxFlushSize
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_WATCH_REQUEST_TIMEOUT
argument_list|,
literal|"5000ms"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|HDDS_SCM_WATCHER_TIMEOUT
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_CHECKSUM_TYPE
argument_list|,
literal|"NONE"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStorageSize
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_BLOCK_SIZE
argument_list|,
literal|4
argument_list|,
name|StorageUnit
operator|.
name|MB
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|7
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|setChunkSize
argument_list|(
name|chunkSize
argument_list|)
operator|.
name|setStreamBufferFlushSize
argument_list|(
name|flushSize
argument_list|)
operator|.
name|setStreamBufferMaxSize
argument_list|(
name|maxFlushSize
argument_list|)
operator|.
name|setStreamBufferSizeUnit
argument_list|(
name|StorageUnit
operator|.
name|BYTES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
comment|//the easiest way to create an open container is creating a key
name|client
operator|=
name|OzoneClientFactory
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|objectStore
operator|=
name|client
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
name|keyString
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|volumeName
operator|=
literal|"testblockoutputstream"
expr_stmt|;
name|bucketName
operator|=
name|volumeName
expr_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|getStorageContainerLocationClient
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReleaseBuffers ()
specifier|public
name|void
name|testReleaseBuffers
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|capacity
init|=
literal|2
decl_stmt|;
name|BufferPool
name|bufferPool
init|=
operator|new
name|BufferPool
argument_list|(
name|chunkSize
argument_list|,
name|capacity
argument_list|)
decl_stmt|;
name|XceiverClientManager
name|clientManager
init|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContainerWithPipeline
name|container
init|=
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|container
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|long
name|containerId
init|=
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|XceiverClientSpi
name|xceiverClient
init|=
name|clientManager
operator|.
name|acquireClient
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|xceiverClient
operator|.
name|getRefcount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xceiverClient
operator|instanceof
name|XceiverClientRatis
argument_list|)
expr_stmt|;
name|XceiverClientRatis
name|ratisClient
init|=
operator|(
name|XceiverClientRatis
operator|)
name|xceiverClient
decl_stmt|;
name|CommitWatcher
name|watcher
init|=
operator|new
name|CommitWatcher
argument_list|(
name|bufferPool
argument_list|,
name|ratisClient
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|bufferList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XceiverClientReply
argument_list|>
name|replies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|length
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
name|i
operator|++
control|)
block|{
name|bufferList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|writeChunkRequest
init|=
name|ContainerTestHelper
operator|.
name|getWriteChunkRequest
argument_list|(
name|pipeline
argument_list|,
name|blockID
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
comment|// add the data to the buffer pool
name|ByteBuffer
name|byteBuffer
init|=
name|bufferPool
operator|.
name|allocateBufferIfNeeded
argument_list|()
operator|.
name|put
argument_list|(
name|writeChunkRequest
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|)
decl_stmt|;
name|ratisClient
operator|.
name|sendCommandAsync
argument_list|(
name|writeChunkRequest
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|putBlockRequest
init|=
name|ContainerTestHelper
operator|.
name|getPutBlockRequest
argument_list|(
name|pipeline
argument_list|,
name|writeChunkRequest
operator|.
name|getWriteChunk
argument_list|()
argument_list|)
decl_stmt|;
name|XceiverClientReply
name|reply
init|=
name|ratisClient
operator|.
name|sendCommandAsync
argument_list|(
name|putBlockRequest
argument_list|)
decl_stmt|;
name|bufferList
operator|.
name|add
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
name|length
operator|+=
name|byteBuffer
operator|.
name|position
argument_list|()
expr_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|future
init|=
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|thenApply
argument_list|(
name|v
lambda|->
block|{
name|watcher
operator|.
name|updateCommitInfoMap
argument_list|(
name|reply
operator|.
name|getLogIndex
argument_list|()
argument_list|,
name|bufferList
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|put
argument_list|(
name|length
argument_list|,
name|future
argument_list|)
expr_stmt|;
name|replies
operator|.
name|add
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|replies
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// wait on the 1st putBlock to complete
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|future1
init|=
name|futures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|future2
init|=
name|futures
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|future1
operator|.
name|get
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|chunkSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|chunkSize
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
name|future1
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait on 2nd putBlock to complete
name|future2
operator|.
name|get
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
literal|2
operator|*
name|chunkSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
literal|2
operator|*
name|chunkSize
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
name|future2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|watchOnFirstIndex
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|watcher
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|replies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLogIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|chunkSize
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getTotalAckDataLength
argument_list|()
operator|>=
name|chunkSize
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|watchOnLastIndex
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|watcher
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|replies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLogIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|2
operator|*
name|chunkSize
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getTotalAckDataLength
argument_list|()
operator|==
literal|2
operator|*
name|chunkSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReleaseBuffersOnException ()
specifier|public
name|void
name|testReleaseBuffersOnException
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|capacity
init|=
literal|2
decl_stmt|;
name|BufferPool
name|bufferPool
init|=
operator|new
name|BufferPool
argument_list|(
name|chunkSize
argument_list|,
name|capacity
argument_list|)
decl_stmt|;
name|XceiverClientManager
name|clientManager
init|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContainerWithPipeline
name|container
init|=
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|container
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|long
name|containerId
init|=
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|XceiverClientSpi
name|xceiverClient
init|=
name|clientManager
operator|.
name|acquireClient
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|xceiverClient
operator|.
name|getRefcount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|xceiverClient
operator|instanceof
name|XceiverClientRatis
argument_list|)
expr_stmt|;
name|XceiverClientRatis
name|ratisClient
init|=
operator|(
name|XceiverClientRatis
operator|)
name|xceiverClient
decl_stmt|;
name|CommitWatcher
name|watcher
init|=
operator|new
name|CommitWatcher
argument_list|(
name|bufferPool
argument_list|,
name|ratisClient
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|bufferList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XceiverClientReply
argument_list|>
name|replies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|length
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
name|i
operator|++
control|)
block|{
name|bufferList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|writeChunkRequest
init|=
name|ContainerTestHelper
operator|.
name|getWriteChunkRequest
argument_list|(
name|pipeline
argument_list|,
name|blockID
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
comment|// add the data to the buffer pool
name|ByteBuffer
name|byteBuffer
init|=
name|bufferPool
operator|.
name|allocateBufferIfNeeded
argument_list|()
operator|.
name|put
argument_list|(
name|writeChunkRequest
operator|.
name|getWriteChunk
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|asReadOnlyByteBuffer
argument_list|()
argument_list|)
decl_stmt|;
name|ratisClient
operator|.
name|sendCommandAsync
argument_list|(
name|writeChunkRequest
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|putBlockRequest
init|=
name|ContainerTestHelper
operator|.
name|getPutBlockRequest
argument_list|(
name|pipeline
argument_list|,
name|writeChunkRequest
operator|.
name|getWriteChunk
argument_list|()
argument_list|)
decl_stmt|;
name|XceiverClientReply
name|reply
init|=
name|ratisClient
operator|.
name|sendCommandAsync
argument_list|(
name|putBlockRequest
argument_list|)
decl_stmt|;
name|bufferList
operator|.
name|add
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
name|length
operator|+=
name|byteBuffer
operator|.
name|position
argument_list|()
expr_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|future
init|=
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|thenApply
argument_list|(
name|v
lambda|->
block|{
name|watcher
operator|.
name|updateCommitInfoMap
argument_list|(
name|reply
operator|.
name|getLogIndex
argument_list|()
argument_list|,
name|bufferList
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|put
argument_list|(
name|length
argument_list|,
name|future
argument_list|)
expr_stmt|;
name|replies
operator|.
name|add
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|replies
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// wait on the 1st putBlock to complete
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|future1
init|=
name|futures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|future2
init|=
name|futures
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|future1
operator|.
name|get
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|chunkSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
name|chunkSize
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
name|future1
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait on 2nd putBlock to complete
name|future2
operator|.
name|get
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
literal|2
operator|*
name|chunkSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|Long
argument_list|(
literal|2
operator|*
name|chunkSize
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
name|future2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|watchOnFirstIndex
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|watcher
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|replies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLogIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|chunkSize
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getTotalAckDataLength
argument_list|()
operator|>=
name|chunkSize
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// just watch for a higher index so as to ensure, it does an actual
comment|// call to Ratis. Otherwise, it may just return in case the commitInfoMap
comment|// is updated to the latest index in putBlock response.
name|watcher
operator|.
name|watchForCommit
argument_list|(
name|replies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLogIndex
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TimeoutException
argument_list|)
expr_stmt|;
block|}
name|long
name|lastIndex
init|=
name|replies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLogIndex
argument_list|()
decl_stmt|;
comment|// Depending on the last successfully replicated commitIndex, either we
comment|// discard only 1st buffer or both buffers
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ratisClient
operator|.
name|getReplicatedMinCommitIndex
argument_list|()
operator|<=
name|lastIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|ratisClient
operator|.
name|getReplicatedMinCommitIndex
argument_list|()
operator|<
name|replies
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLogIndex
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getTotalAckDataLength
argument_list|()
operator|==
name|chunkSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getTotalAckDataLength
argument_list|()
operator|==
literal|2
operator|*
name|chunkSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getFutureMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|watcher
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

