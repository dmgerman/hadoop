begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|math
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|KeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
operator|.
name|OzoneContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|KeySpaceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|KsmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test Ozone Key Lifecycle.  */
end_comment

begin_class
DECL|class|TestKeys
specifier|public
class|class
name|TestKeys
block|{
comment|/**    * Set the timeout for every test.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
DECL|field|ozoneCluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|ozoneCluster
init|=
literal|null
decl_stmt|;
DECL|field|path
specifier|private
specifier|static
name|String
name|path
decl_stmt|;
DECL|field|ozoneRestClient
specifier|private
specifier|static
name|OzoneRestClient
name|ozoneRestClient
init|=
literal|null
decl_stmt|;
DECL|field|currentTime
specifier|private
specifier|static
name|long
name|currentTime
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
comment|// Set short block deleting service interval to speed up deletions.
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|path
operator|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestKeys
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"log4j.logger.org.apache.http"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|ozoneCluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ozoneCluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
specifier|final
name|int
name|port
init|=
name|ozoneCluster
operator|.
name|getHddsDatanodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeDetails
argument_list|()
operator|.
name|getOzoneRestPort
argument_list|()
decl_stmt|;
name|ozoneRestClient
operator|=
operator|new
name|OzoneRestClient
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"http://localhost:%d"
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|currentTime
operator|=
name|Time
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
comment|/**    * shutdown MiniDFSCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|ozoneCluster
operator|!=
literal|null
condition|)
block|{
name|ozoneCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creates a file with Random Data.    *    * @return File.    */
DECL|method|createRandomDataFile (String dir, String fileName, long size)
specifier|static
name|File
name|createRandomDataFile
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
name|File
name|tmpFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
init|(
name|FileOutputStream
name|randFile
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
init|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|size
condition|;
name|x
operator|++
control|)
block|{
name|char
name|c
init|=
call|(
name|char
call|)
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
operator|+
literal|'a'
argument_list|)
decl_stmt|;
name|randFile
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tmpFile
return|;
block|}
comment|/**    * This function generates multi part key which are delimited by a certain    * delimiter. Different parts of key are random string of random length    * between 0 - 4. Number of parts of the keys are between 0 and 5.    *    * @param delimiter delimiter used to delimit parts of string    * @return Key composed of multiple parts delimited by "/"    */
DECL|method|getMultiPartKey (String delimiter)
specifier|static
name|String
name|getMultiPartKey
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|int
name|numParts
init|=
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
name|String
index|[]
name|nameParts
init|=
operator|new
name|String
index|[
name|numParts
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParts
condition|;
name|i
operator|++
control|)
block|{
name|int
name|stringLength
init|=
name|numParts
operator|==
literal|1
condition|?
literal|5
else|:
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|nameParts
index|[
name|i
index|]
operator|=
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
name|stringLength
argument_list|)
expr_stmt|;
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|delimiter
argument_list|,
name|nameParts
argument_list|)
return|;
block|}
DECL|class|PutHelper
specifier|static
class|class
name|PutHelper
block|{
DECL|field|client
specifier|private
specifier|final
name|OzoneRestClient
name|client
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|String
name|dir
decl_stmt|;
DECL|field|keyName
specifier|private
specifier|final
name|String
name|keyName
decl_stmt|;
DECL|field|vol
specifier|private
name|OzoneVolume
name|vol
decl_stmt|;
DECL|field|bucket
specifier|private
name|OzoneBucket
name|bucket
decl_stmt|;
DECL|field|file
specifier|private
name|File
name|file
decl_stmt|;
DECL|method|PutHelper (OzoneRestClient client, String dir)
name|PutHelper
parameter_list|(
name|OzoneRestClient
name|client
parameter_list|,
name|String
name|dir
parameter_list|)
block|{
name|this
argument_list|(
name|client
argument_list|,
name|dir
argument_list|,
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|PutHelper (OzoneRestClient client, String dir, String key)
name|PutHelper
parameter_list|(
name|OzoneRestClient
name|client
parameter_list|,
name|String
name|dir
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|keyName
operator|=
name|key
expr_stmt|;
block|}
DECL|method|getVol ()
specifier|public
name|OzoneVolume
name|getVol
parameter_list|()
block|{
return|return
name|vol
return|;
block|}
DECL|method|getBucket ()
specifier|public
name|OzoneBucket
name|getBucket
parameter_list|()
block|{
return|return
name|bucket
return|;
block|}
DECL|method|getFile ()
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
comment|/**      * This function is reused in all other tests.      *      * @return Returns the name of the new key that was created.      * @throws OzoneException      */
DECL|method|putKey ()
specifier|private
name|KsmKeyArgs
name|putKey
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|client
operator|.
name|setUserAuth
argument_list|(
literal|"hdfs"
argument_list|)
expr_stmt|;
name|vol
operator|=
name|client
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
literal|"bilbo"
argument_list|,
literal|"100TB"
argument_list|)
expr_stmt|;
name|String
index|[]
name|acls
init|=
block|{
literal|"user:frodo:rw"
block|,
literal|"user:samwise:rw"
block|}
decl_stmt|;
name|String
name|bucketName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|bucket
operator|=
name|vol
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|,
name|acls
argument_list|,
name|StorageType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|file
operator|=
name|createRandomDataFile
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|putKey
argument_list|(
name|keyName
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
operator|new
name|KsmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setDataSize
argument_list|(
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutKey ()
specifier|public
name|void
name|testPutKey
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test non-delimited keys
name|runTestPutKey
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test key delimited by a random delimiter
name|String
name|delimiter
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|runTestPutKey
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|,
name|getMultiPartKey
argument_list|(
name|delimiter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runTestPutKey (PutHelper helper)
specifier|static
name|void
name|runTestPutKey
parameter_list|(
name|PutHelper
name|helper
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|OzoneRestClient
name|client
init|=
name|helper
operator|.
name|client
decl_stmt|;
name|helper
operator|.
name|putKey
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OzoneKey
argument_list|>
name|keyList
init|=
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|listKeys
argument_list|(
literal|"100"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test list key using a more efficient call
name|String
name|newkeyName
init|=
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|client
operator|.
name|putKey
argument_list|(
name|helper
operator|.
name|getVol
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|newkeyName
argument_list|,
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|keyList
operator|=
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|listKeys
argument_list|(
literal|"100"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keyList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test new put key with invalid volume/bucket name
try|try
block|{
name|client
operator|.
name|putKey
argument_list|(
literal|"invalid-volume"
argument_list|,
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|newkeyName
argument_list|,
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Put key should have thrown"
operator|+
literal|" when using invalid volume name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|Status
operator|.
name|VOLUME_NOT_FOUND
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|client
operator|.
name|putKey
argument_list|(
name|helper
operator|.
name|getVol
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|,
literal|"invalid-bucket"
argument_list|,
name|newkeyName
argument_list|,
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Put key should have thrown "
operator|+
literal|"when using invalid bucket name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|Status
operator|.
name|BUCKET_NOT_FOUND
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|restartDatanode ( MiniOzoneCluster cluster, int datanodeIdx, OzoneRestClient client)
specifier|private
specifier|static
name|void
name|restartDatanode
parameter_list|(
name|MiniOzoneCluster
name|cluster
parameter_list|,
name|int
name|datanodeIdx
parameter_list|,
name|OzoneRestClient
name|client
parameter_list|)
throws|throws
name|OzoneException
throws|,
name|URISyntaxException
block|{
name|cluster
operator|.
name|restartHddsDatanode
argument_list|(
name|datanodeIdx
argument_list|)
expr_stmt|;
comment|// refresh the datanode endpoint uri after datanode restart
specifier|final
name|int
name|port
init|=
name|ozoneCluster
operator|.
name|getHddsDatanodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeDetails
argument_list|()
operator|.
name|getOzoneRestPort
argument_list|()
decl_stmt|;
name|client
operator|.
name|setEndPoint
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"http://localhost:%d"
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutAndGetKeyWithDnRestart ()
specifier|public
name|void
name|testPutAndGetKeyWithDnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|runTestPutAndGetKeyWithDnRestart
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|)
argument_list|,
name|ozoneCluster
argument_list|)
expr_stmt|;
name|String
name|delimiter
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|runTestPutAndGetKeyWithDnRestart
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|,
name|getMultiPartKey
argument_list|(
name|delimiter
argument_list|)
argument_list|)
argument_list|,
name|ozoneCluster
argument_list|)
expr_stmt|;
block|}
DECL|method|runTestPutAndGetKeyWithDnRestart ( PutHelper helper, MiniOzoneCluster cluster)
specifier|static
name|void
name|runTestPutAndGetKeyWithDnRestart
parameter_list|(
name|PutHelper
name|helper
parameter_list|,
name|MiniOzoneCluster
name|cluster
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
name|helper
operator|.
name|putKey
argument_list|()
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart the datanode
name|restartDatanode
argument_list|(
name|cluster
argument_list|,
literal|0
argument_list|,
name|helper
operator|.
name|client
argument_list|)
expr_stmt|;
comment|// verify getKey after the datanode restart
name|String
name|newFileName
init|=
name|helper
operator|.
name|dir
operator|+
literal|"/"
operator|+
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|Path
name|newPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|newFileName
argument_list|)
decl_stmt|;
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getKey
argument_list|(
name|keyName
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|original
init|=
operator|new
name|FileInputStream
argument_list|(
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
init|;
name|FileInputStream
name|downloaded
operator|=
operator|new
name|FileInputStream
argument_list|(
name|newPath
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|String
name|originalHash
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|String
name|downloadedHash
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|downloaded
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Sha256 does not match between original file and downloaded file."
argument_list|,
name|originalHash
argument_list|,
name|downloadedHash
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutAndGetKey ()
specifier|public
name|void
name|testPutAndGetKey
parameter_list|()
throws|throws
name|Exception
block|{
name|runTestPutAndGetKey
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|delimiter
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|runTestPutAndGetKey
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|,
name|getMultiPartKey
argument_list|(
name|delimiter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runTestPutAndGetKey (PutHelper helper)
specifier|static
name|void
name|runTestPutAndGetKey
parameter_list|(
name|PutHelper
name|helper
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|OzoneRestClient
name|client
init|=
name|helper
operator|.
name|client
decl_stmt|;
name|String
name|keyName
init|=
name|helper
operator|.
name|putKey
argument_list|()
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|newFileName1
init|=
name|helper
operator|.
name|dir
operator|+
literal|"/"
operator|+
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
specifier|final
name|String
name|newFileName2
init|=
name|helper
operator|.
name|dir
operator|+
literal|"/"
operator|+
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|Path
name|newPath1
init|=
name|Paths
operator|.
name|get
argument_list|(
name|newFileName1
argument_list|)
decl_stmt|;
name|Path
name|newPath2
init|=
name|Paths
operator|.
name|get
argument_list|(
name|newFileName2
argument_list|)
decl_stmt|;
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getKey
argument_list|(
name|keyName
argument_list|,
name|newPath1
argument_list|)
expr_stmt|;
comment|// test get key using a more efficient call
name|client
operator|.
name|getKey
argument_list|(
name|helper
operator|.
name|getVol
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|keyName
argument_list|,
name|newPath2
argument_list|)
expr_stmt|;
try|try
init|(
name|FileInputStream
name|original
init|=
operator|new
name|FileInputStream
argument_list|(
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
init|;
name|FileInputStream
name|downloaded1
operator|=
operator|new
name|FileInputStream
argument_list|(
name|newPath1
operator|.
name|toFile
argument_list|()
argument_list|)
init|;
name|FileInputStream
name|downloaded2
operator|=
operator|new
name|FileInputStream
argument_list|(
name|newPath1
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|String
name|originalHash
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|String
name|downloadedHash1
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|downloaded1
argument_list|)
decl_stmt|;
name|String
name|downloadedHash2
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|downloaded2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Sha256 does not match between original file and downloaded file."
argument_list|,
name|originalHash
argument_list|,
name|downloadedHash1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Sha256 does not match between original file and downloaded file."
argument_list|,
name|originalHash
argument_list|,
name|downloadedHash2
argument_list|)
expr_stmt|;
comment|// test new get key with invalid volume/bucket name
try|try
block|{
name|client
operator|.
name|getKey
argument_list|(
literal|"invalid-volume"
argument_list|,
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|keyName
argument_list|,
name|newPath1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get key should have thrown "
operator|+
literal|"when using invalid volume name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|Status
operator|.
name|KEY_NOT_FOUND
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|client
operator|.
name|getKey
argument_list|(
name|helper
operator|.
name|getVol
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|,
literal|"invalid-bucket"
argument_list|,
name|keyName
argument_list|,
name|newPath1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get key should have thrown "
operator|+
literal|"when using invalid bucket name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|Status
operator|.
name|KEY_NOT_FOUND
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPutAndDeleteKey ()
specifier|public
name|void
name|testPutAndDeleteKey
parameter_list|()
throws|throws
name|Exception
block|{
name|runTestPutAndDeleteKey
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|delimiter
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|runTestPutAndDeleteKey
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|,
name|getMultiPartKey
argument_list|(
name|delimiter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runTestPutAndDeleteKey (PutHelper helper)
specifier|static
name|void
name|runTestPutAndDeleteKey
parameter_list|(
name|PutHelper
name|helper
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
name|helper
operator|.
name|putKey
argument_list|()
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|deleteKey
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
try|try
block|{
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getKey
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get Key on a deleted key should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|Status
operator|.
name|KEY_NOT_FOUND
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutAndListKey ()
specifier|public
name|void
name|testPutAndListKey
parameter_list|()
throws|throws
name|Exception
block|{
name|runTestPutAndListKey
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|delimiter
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|runTestPutAndListKey
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|,
name|getMultiPartKey
argument_list|(
name|delimiter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runTestPutAndListKey (PutHelper helper)
specifier|static
name|void
name|runTestPutAndListKey
parameter_list|(
name|PutHelper
name|helper
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|OzoneRestClient
name|client
init|=
name|helper
operator|.
name|client
decl_stmt|;
name|helper
operator|.
name|putKey
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// add keys [list-key0, list-key1, ..., list-key9]
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|String
name|newkeyName
init|=
literal|"list-key"
operator|+
name|x
decl_stmt|;
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|putKey
argument_list|(
name|newkeyName
argument_list|,
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|OzoneKey
argument_list|>
name|keyList1
init|=
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|listKeys
argument_list|(
literal|"100"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// test list key using a more efficient call
name|List
argument_list|<
name|OzoneKey
argument_list|>
name|keyList2
init|=
name|client
operator|.
name|listKeys
argument_list|(
name|helper
operator|.
name|getVol
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"100"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|keyList1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|keyList2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify the key creation/modification time. Here we compare the time in
comment|// second unit since the date string reparsed to millisecond will
comment|// lose precision.
for|for
control|(
name|OzoneKey
name|key
range|:
name|keyList1
control|)
block|{
name|assertTrue
argument_list|(
operator|(
name|OzoneUtils
operator|.
name|formatDate
argument_list|(
name|key
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|/
literal|1000
operator|)
operator|>=
operator|(
name|currentTime
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|OzoneUtils
operator|.
name|formatDate
argument_list|(
name|key
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getModifiedOn
argument_list|()
argument_list|)
operator|/
literal|1000
operator|)
operator|>=
operator|(
name|currentTime
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OzoneKey
name|key
range|:
name|keyList2
control|)
block|{
name|assertTrue
argument_list|(
operator|(
name|OzoneUtils
operator|.
name|formatDate
argument_list|(
name|key
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|/
literal|1000
operator|)
operator|>=
operator|(
name|currentTime
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|OzoneUtils
operator|.
name|formatDate
argument_list|(
name|key
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getModifiedOn
argument_list|()
argument_list|)
operator|/
literal|1000
operator|)
operator|>=
operator|(
name|currentTime
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// test maxLength parameter of list keys
name|keyList1
operator|=
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|listKeys
argument_list|(
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|keyList2
operator|=
name|client
operator|.
name|listKeys
argument_list|(
name|helper
operator|.
name|getVol
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyList1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyList2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test startKey parameter of list keys
name|keyList1
operator|=
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|listKeys
argument_list|(
literal|"100"
argument_list|,
literal|"list-key4"
argument_list|,
literal|"list-key"
argument_list|)
expr_stmt|;
name|keyList2
operator|=
name|client
operator|.
name|listKeys
argument_list|(
name|helper
operator|.
name|getVol
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"100"
argument_list|,
literal|"list-key4"
argument_list|,
literal|"list-key"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|keyList1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|keyList2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test prefix parameter of list keys
name|keyList1
operator|=
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|listKeys
argument_list|(
literal|"100"
argument_list|,
literal|null
argument_list|,
literal|"list-key2"
argument_list|)
expr_stmt|;
name|keyList2
operator|=
name|client
operator|.
name|listKeys
argument_list|(
name|helper
operator|.
name|getVol
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"100"
argument_list|,
literal|null
argument_list|,
literal|"list-key2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyList1
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|keyList1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getKeyName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"list-key2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyList2
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|keyList2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getKeyName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"list-key2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test new list keys with invalid volume/bucket name
try|try
block|{
name|client
operator|.
name|listKeys
argument_list|(
literal|"invalid-volume"
argument_list|,
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|"100"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"List keys should have thrown when using invalid volume name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|Status
operator|.
name|BUCKET_NOT_FOUND
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|client
operator|.
name|listKeys
argument_list|(
name|helper
operator|.
name|getVol
argument_list|()
operator|.
name|getVolumeName
argument_list|()
argument_list|,
literal|"invalid-bucket"
argument_list|,
literal|"100"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"List keys should have thrown when using invalid bucket name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|Status
operator|.
name|BUCKET_NOT_FOUND
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetKeyInfo ()
specifier|public
name|void
name|testGetKeyInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|runTestGetKeyInfo
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|delimiter
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|runTestGetKeyInfo
argument_list|(
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|,
name|getMultiPartKey
argument_list|(
name|delimiter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runTestGetKeyInfo (PutHelper helper)
specifier|static
name|void
name|runTestGetKeyInfo
parameter_list|(
name|PutHelper
name|helper
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
name|helper
operator|.
name|putKey
argument_list|()
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getBucket
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|helper
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneKey
name|keyInfo
init|=
name|helper
operator|.
name|getBucket
argument_list|()
operator|.
name|getKeyInfo
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|keyInfo
operator|.
name|getObjectInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|keyName
argument_list|,
name|keyInfo
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare the time in second unit since the date string reparsed to
comment|// millisecond will lose precision.
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|OzoneUtils
operator|.
name|formatDate
argument_list|(
name|keyInfo
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|/
literal|1000
operator|)
operator|>=
operator|(
name|currentTime
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|OzoneUtils
operator|.
name|formatDate
argument_list|(
name|keyInfo
operator|.
name|getObjectInfo
argument_list|()
operator|.
name|getModifiedOn
argument_list|()
argument_list|)
operator|/
literal|1000
operator|)
operator|>=
operator|(
name|currentTime
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Volume, bucket, keys info that helps for test create/delete keys.
DECL|class|BucketKeys
specifier|private
specifier|static
class|class
name|BucketKeys
block|{
DECL|field|buckets
specifier|private
name|Map
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|buckets
decl_stmt|;
DECL|method|BucketKeys ()
name|BucketKeys
parameter_list|()
block|{
name|buckets
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
DECL|method|addKey (String volume, String bucket, String key)
name|void
name|addKey
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|,
name|String
name|key
parameter_list|)
block|{
comment|// check if this bucket exists
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|buckets
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|bucket
argument_list|)
condition|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// bucket not exist
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newBucket
init|=
operator|new
name|ImmutablePair
argument_list|(
name|volume
argument_list|,
name|bucket
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keyList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|keyList
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|buckets
operator|.
name|put
argument_list|(
name|newBucket
argument_list|,
name|keyList
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllBuckets ()
name|Set
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getAllBuckets
parameter_list|()
block|{
return|return
name|buckets
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|getBucketKeys (String bucketName)
name|List
argument_list|<
name|String
argument_list|>
name|getBucketKeys
parameter_list|(
name|String
name|bucketName
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|buckets
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|bucketName
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
name|Lists
operator|.
name|newArrayList
argument_list|()
return|;
block|}
DECL|method|totalNumOfKeys ()
name|int
name|totalNumOfKeys
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|buckets
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|count
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
block|}
DECL|method|countKsmKeys (KeySpaceManager ksm)
specifier|private
name|int
name|countKsmKeys
parameter_list|(
name|KeySpaceManager
name|ksm
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|KsmVolumeArgs
argument_list|>
name|volumes
init|=
name|ksm
operator|.
name|listAllVolumes
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|KsmVolumeArgs
name|volume
range|:
name|volumes
control|)
block|{
name|List
argument_list|<
name|KsmBucketInfo
argument_list|>
name|buckets
init|=
name|ksm
operator|.
name|listBuckets
argument_list|(
name|volume
operator|.
name|getVolume
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|KsmBucketInfo
name|bucket
range|:
name|buckets
control|)
block|{
name|List
argument_list|<
name|KsmKeyInfo
argument_list|>
name|keys
init|=
name|ksm
operator|.
name|listKeys
argument_list|(
name|bucket
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|bucket
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|totalCount
operator|+=
name|keys
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|totalCount
return|;
block|}
annotation|@
name|Test
DECL|method|testDeleteKey ()
specifier|public
name|void
name|testDeleteKey
parameter_list|()
throws|throws
name|Exception
block|{
name|KeySpaceManager
name|ksm
init|=
name|ozoneCluster
operator|.
name|getKeySpaceManager
argument_list|()
decl_stmt|;
comment|// To avoid interference from other test cases,
comment|// we collect number of existing keys at the beginning
name|int
name|numOfExistedKeys
init|=
name|countKsmKeys
argument_list|(
name|ksm
argument_list|)
decl_stmt|;
comment|// Keep tracking bucket keys info while creating them
name|PutHelper
name|helper
init|=
operator|new
name|PutHelper
argument_list|(
name|ozoneRestClient
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|BucketKeys
name|bucketKeys
init|=
operator|new
name|BucketKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|KsmKeyArgs
name|keyArgs
init|=
name|helper
operator|.
name|putKey
argument_list|()
decl_stmt|;
name|bucketKeys
operator|.
name|addKey
argument_list|(
name|keyArgs
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|keyArgs
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|keyArgs
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// There should be 20 keys in the buckets we just created.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|bucketKeys
operator|.
name|totalNumOfKeys
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numOfCreatedKeys
init|=
literal|0
decl_stmt|;
name|OzoneContainer
name|cm
init|=
name|ozoneCluster
operator|.
name|getHddsDatanodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeStateMachine
argument_list|()
operator|.
name|getContainer
argument_list|()
decl_stmt|;
comment|// Expected to delete chunk file list.
name|List
argument_list|<
name|File
argument_list|>
name|expectedChunkFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Iterate over all buckets, and list all keys in each bucket,
comment|// count the total number of created keys.
name|Set
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|buckets
init|=
name|bucketKeys
operator|.
name|getAllBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buk
range|:
name|buckets
control|)
block|{
name|List
argument_list|<
name|KsmKeyInfo
argument_list|>
name|createdKeys
init|=
name|ksm
operator|.
name|listKeys
argument_list|(
name|buk
operator|.
name|getKey
argument_list|()
argument_list|,
name|buk
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|20
argument_list|)
decl_stmt|;
comment|// Memorize chunks that has been created,
comment|// so we can verify actual deletions at DN side later.
for|for
control|(
name|KsmKeyInfo
name|keyInfo
range|:
name|createdKeys
control|)
block|{
name|List
argument_list|<
name|KsmKeyLocationInfo
argument_list|>
name|locations
init|=
name|keyInfo
operator|.
name|getLatestVersionLocations
argument_list|()
operator|.
name|getLocationList
argument_list|()
decl_stmt|;
for|for
control|(
name|KsmKeyLocationInfo
name|location
range|:
name|locations
control|)
block|{
name|String
name|containerName
init|=
name|location
operator|.
name|getContainerName
argument_list|()
decl_stmt|;
name|KeyData
name|keyData
init|=
operator|new
name|KeyData
argument_list|(
name|containerName
argument_list|,
name|location
operator|.
name|getBlockID
argument_list|()
argument_list|)
decl_stmt|;
name|KeyData
name|blockInfo
init|=
name|cm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getKeyManager
argument_list|()
operator|.
name|getKey
argument_list|(
name|keyData
argument_list|)
decl_stmt|;
name|ContainerData
name|containerData
init|=
name|cm
operator|.
name|getContainerManager
argument_list|()
operator|.
name|readContainer
argument_list|(
name|containerName
argument_list|)
decl_stmt|;
name|File
name|dataDir
init|=
name|ContainerUtils
operator|.
name|getDataDirectory
argument_list|(
name|containerData
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerProtos
operator|.
name|ChunkInfo
name|chunkInfo
range|:
name|blockInfo
operator|.
name|getChunks
argument_list|()
control|)
block|{
name|File
name|chunkFile
init|=
name|dataDir
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|chunkInfo
operator|.
name|getChunkName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Chunk File created: "
operator|+
name|chunkFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|chunkFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|expectedChunkFiles
operator|.
name|add
argument_list|(
name|chunkFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|numOfCreatedKeys
operator|+=
name|createdKeys
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// Ensure all keys are created.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|numOfCreatedKeys
argument_list|)
expr_stmt|;
comment|// Ensure all keys are visible from KSM.
comment|// Total number should be numOfCreated + numOfExisted
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
operator|+
name|numOfExistedKeys
argument_list|,
name|countKsmKeys
argument_list|(
name|ksm
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete 10 keys
name|int
name|delCount
init|=
literal|20
decl_stmt|;
name|Set
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|allBuckets
init|=
name|bucketKeys
operator|.
name|getAllBuckets
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bucketInfo
range|:
name|allBuckets
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bks
init|=
name|bucketKeys
operator|.
name|getBucketKeys
argument_list|(
name|bucketInfo
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|keyName
range|:
name|bks
control|)
block|{
if|if
condition|(
name|delCount
operator|>
literal|0
condition|)
block|{
name|KsmKeyArgs
name|arg
init|=
operator|new
name|KsmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|bucketInfo
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketInfo
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ksm
operator|.
name|deleteKey
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|delCount
operator|--
expr_stmt|;
block|}
block|}
block|}
comment|// It should be pretty quick that keys are removed from KSM namespace,
comment|// because actual deletion happens in async mode.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|int
name|num
init|=
name|countKsmKeys
argument_list|(
name|ksm
argument_list|)
decl_stmt|;
return|return
name|num
operator|==
operator|(
name|numOfExistedKeys
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// It might take a while until all blocks are actually deleted,
comment|// verify all chunk files created earlier are removed from disk.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|expectedChunkFiles
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|file
lambda|->
operator|!
name|file
operator|.
name|exists
argument_list|()
argument_list|)
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

