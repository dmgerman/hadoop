begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|HddsClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ObjectStoreHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|BlockGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|OzoneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ServicePort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|BucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|KeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|UserArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|VolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|interfaces
operator|.
name|StorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|request
operator|.
name|OzoneQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|BucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|handlers
operator|.
name|ListArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|ListBuckets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|ListKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|response
operator|.
name|ListVolumes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|TableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
import|;
end_import

begin_comment
comment|/**  * Test Ozone Manager operation in distributed handler scenario.  */
end_comment

begin_class
DECL|class|TestOzoneManager
specifier|public
class|class
name|TestOzoneManager
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|storageHandler
specifier|private
specifier|static
name|StorageHandler
name|storageHandler
decl_stmt|;
DECL|field|userArgs
specifier|private
specifier|static
name|UserArgs
name|userArgs
decl_stmt|;
DECL|field|omMetrics
specifier|private
specifier|static
name|OMMetrics
name|omMetrics
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|clusterId
specifier|private
specifier|static
name|String
name|clusterId
decl_stmt|;
DECL|field|scmId
specifier|private
specifier|static
name|String
name|scmId
decl_stmt|;
DECL|field|omId
specifier|private
specifier|static
name|String
name|omId
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|clusterId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scmId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|omId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
operator|.
name|setOmId
argument_list|(
name|omId
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|storageHandler
operator|=
operator|new
name|ObjectStoreHandler
argument_list|(
name|conf
argument_list|)
operator|.
name|getStorageHandler
argument_list|()
expr_stmt|;
name|userArgs
operator|=
operator|new
name|UserArgs
argument_list|(
literal|null
argument_list|,
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|omMetrics
operator|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|getMetrics
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Create a volume and test its attribute after creating them
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreateVolume ()
specifier|public
name|void
name|testCreateVolume
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|long
name|volumeCreateFailCount
init|=
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|VolumeArgs
name|getVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|VolumeInfo
name|retVolumeinfo
init|=
name|storageHandler
operator|.
name|getVolumeInfo
argument_list|(
name|getVolumeArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeCreateFailCount
argument_list|,
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create a volume and modify the volume owner and then test its attributes
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testChangeVolumeOwner ()
specifier|public
name|void
name|testChangeVolumeOwner
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|long
name|volumeCreateFailCount
init|=
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
decl_stmt|;
name|long
name|volumeInfoFailCount
init|=
name|omMetrics
operator|.
name|getNumVolumeInfoFails
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|String
name|newUserName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|newUserName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|setVolumeOwner
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|VolumeArgs
name|getVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|VolumeInfo
name|retVolumeInfo
init|=
name|storageHandler
operator|.
name|getVolumeInfo
argument_list|(
name|getVolumeArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeInfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|retVolumeInfo
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeInfo
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|newUserName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeCreateFailCount
argument_list|,
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeInfoFailCount
argument_list|,
name|omMetrics
operator|.
name|getNumVolumeInfoFails
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create a volume and modify the volume owner and then test its attributes
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testChangeVolumeQuota ()
specifier|public
name|void
name|testChangeVolumeQuota
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|long
name|numVolumeCreateFail
init|=
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
decl_stmt|;
name|long
name|numVolumeInfoFail
init|=
name|omMetrics
operator|.
name|getNumVolumeInfoFails
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|// Create a new volume with a quota
name|OzoneQuota
name|createQuota
init|=
operator|new
name|OzoneQuota
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|GB
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setQuota
argument_list|(
name|createQuota
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|VolumeArgs
name|getVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|VolumeInfo
name|retVolumeInfo
init|=
name|storageHandler
operator|.
name|getVolumeInfo
argument_list|(
name|getVolumeArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createQuota
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|retVolumeInfo
operator|.
name|getQuota
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set a new quota and test it
name|OzoneQuota
name|setQuota
init|=
operator|new
name|OzoneQuota
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|GB
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setQuota
argument_list|(
name|setQuota
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|setVolumeQuota
argument_list|(
name|createVolumeArgs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getVolumeArgs
operator|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
expr_stmt|;
name|retVolumeInfo
operator|=
name|storageHandler
operator|.
name|getVolumeInfo
argument_list|(
name|getVolumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|setQuota
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|retVolumeInfo
operator|.
name|getQuota
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the quota and test it again
name|storageHandler
operator|.
name|setVolumeQuota
argument_list|(
name|createVolumeArgs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getVolumeArgs
operator|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
expr_stmt|;
name|retVolumeInfo
operator|=
name|storageHandler
operator|.
name|getVolumeInfo
argument_list|(
name|getVolumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OzoneConsts
operator|.
name|MAX_QUOTA_IN_BYTES
argument_list|,
name|retVolumeInfo
operator|.
name|getQuota
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numVolumeCreateFail
argument_list|,
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numVolumeInfoFail
argument_list|,
name|omMetrics
operator|.
name|getNumVolumeInfoFails
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create a volume and then delete it and then check for deletion
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDeleteVolume ()
specifier|public
name|void
name|testDeleteVolume
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|long
name|volumeCreateFailCount
init|=
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName1
init|=
name|volumeName
operator|+
literal|"_A"
decl_stmt|;
name|String
name|volumeName2
init|=
name|volumeName
operator|+
literal|"_AA"
decl_stmt|;
name|VolumeArgs
name|volumeArgs
init|=
literal|null
decl_stmt|;
name|VolumeInfo
name|volumeInfo
init|=
literal|null
decl_stmt|;
comment|// Create 2 empty volumes with same prefix.
name|volumeArgs
operator|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName1
argument_list|,
name|userArgs
argument_list|)
expr_stmt|;
name|volumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|volumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|volumeArgs
operator|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName2
argument_list|,
name|userArgs
argument_list|)
expr_stmt|;
name|volumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|volumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|volumeArgs
operator|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName1
argument_list|,
name|userArgs
argument_list|)
expr_stmt|;
name|volumeInfo
operator|=
name|storageHandler
operator|.
name|getVolumeInfo
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|volumeInfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|volumeInfo
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeCreateFailCount
argument_list|,
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
argument_list|)
expr_stmt|;
comment|// Volume with _A should be able to delete as it is empty.
name|storageHandler
operator|.
name|deleteVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
comment|// Make sure volume with _AA suffix still exists.
name|volumeArgs
operator|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName2
argument_list|,
name|userArgs
argument_list|)
expr_stmt|;
name|volumeInfo
operator|=
name|storageHandler
operator|.
name|getVolumeInfo
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|volumeInfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure volume with _A suffix is successfully deleted.
try|try
block|{
name|volumeArgs
operator|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName1
argument_list|,
name|userArgs
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|getVolumeInfo
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Volume is not deleted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Info Volume failed, error:VOLUME_NOT_FOUND"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//delete the _AA volume, too
name|storageHandler
operator|.
name|deleteVolume
argument_list|(
operator|new
name|VolumeArgs
argument_list|(
name|volumeName2
argument_list|,
name|userArgs
argument_list|)
argument_list|)
expr_stmt|;
comment|//Make sure there is no volume information for the specific user
name|OMMetadataManager
name|metadataManager
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|getMetadataManager
argument_list|()
decl_stmt|;
name|byte
index|[]
name|userKey
init|=
name|metadataManager
operator|.
name|getUserKey
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|volumes
init|=
name|metadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|get
argument_list|(
name|userKey
argument_list|)
decl_stmt|;
comment|//that was the last volume of the user, shouldn't be any record here
name|Assert
operator|.
name|assertNull
argument_list|(
name|volumes
argument_list|)
expr_stmt|;
block|}
comment|// Create a volume and a bucket inside the volume,
comment|// then delete it and then check for deletion failure
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFailedDeleteVolume ()
specifier|public
name|void
name|testFailedDeleteVolume
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|long
name|numVolumeCreateFails
init|=
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|VolumeArgs
name|getVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|VolumeInfo
name|retVolumeInfo
init|=
name|storageHandler
operator|.
name|getVolumeInfo
argument_list|(
name|getVolumeArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeInfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeInfo
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numVolumeCreateFails
argument_list|,
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
try|try
block|{
name|storageHandler
operator|.
name|deleteVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting deletion should fail "
operator|+
literal|"because volume is not empty"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Delete Volume failed, error:VOLUME_NOT_EMPTY"
argument_list|)
expr_stmt|;
block|}
name|retVolumeInfo
operator|=
name|storageHandler
operator|.
name|getVolumeInfo
argument_list|(
name|getVolumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeInfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeInfo
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create a volume and test Volume access for a different user
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAccessVolume ()
specifier|public
name|void
name|testAccessVolume
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
index|[]
name|groupName
init|=
block|{
literal|"group"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
block|}
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setGroups
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|OzoneAcl
name|userAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|USER
argument_list|,
name|userName
argument_list|,
name|OzoneAcl
operator|.
name|OzoneACLRights
operator|.
name|READ_WRITE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|storageHandler
operator|.
name|checkVolumeAccess
argument_list|(
name|volumeName
argument_list|,
name|userAcl
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneAcl
name|group
init|=
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|GROUP
argument_list|,
name|groupName
index|[
literal|0
index|]
argument_list|,
name|OzoneAcl
operator|.
name|OzoneACLRights
operator|.
name|READ
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|storageHandler
operator|.
name|checkVolumeAccess
argument_list|(
name|volumeName
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a different user and access should fail
name|String
name|falseUserName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneAcl
name|falseUserAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|USER
argument_list|,
name|falseUserName
argument_list|,
name|OzoneAcl
operator|.
name|OzoneACLRights
operator|.
name|READ_WRITE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|storageHandler
operator|.
name|checkVolumeAccess
argument_list|(
name|volumeName
argument_list|,
name|falseUserAcl
argument_list|)
argument_list|)
expr_stmt|;
comment|// Checking access with user name and Group Type should fail
name|OzoneAcl
name|falseGroupAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|GROUP
argument_list|,
name|userName
argument_list|,
name|OzoneAcl
operator|.
name|OzoneACLRights
operator|.
name|READ_WRITE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|storageHandler
operator|.
name|checkVolumeAccess
argument_list|(
name|volumeName
argument_list|,
name|falseGroupAcl
argument_list|)
argument_list|)
expr_stmt|;
comment|// Access for acl type world should also fail
name|OzoneAcl
name|worldAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|OzoneAcl
operator|.
name|OzoneACLType
operator|.
name|WORLD
argument_list|,
literal|""
argument_list|,
name|OzoneAcl
operator|.
name|OzoneACLRights
operator|.
name|READ
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|storageHandler
operator|.
name|checkVolumeAccess
argument_list|(
name|volumeName
argument_list|,
name|worldAcl
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|omMetrics
operator|.
name|getNumVolumeCheckAccessFails
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCreateBucket ()
specifier|public
name|void
name|testCreateBucket
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|long
name|numVolumeCreateFail
init|=
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
decl_stmt|;
name|long
name|numBucketCreateFail
init|=
name|omMetrics
operator|.
name|getNumBucketCreateFails
argument_list|()
decl_stmt|;
name|long
name|numBucketInfoFail
init|=
name|omMetrics
operator|.
name|getNumBucketInfoFails
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|volumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|volumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|volumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|getBucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|BucketInfo
name|bucketInfo
init|=
name|storageHandler
operator|.
name|getBucketInfo
argument_list|(
name|getBucketArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucketInfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucketInfo
operator|.
name|getBucketName
argument_list|()
operator|.
name|equals
argument_list|(
name|bucketName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numVolumeCreateFail
argument_list|,
name|omMetrics
operator|.
name|getNumVolumeCreateFails
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numBucketCreateFail
argument_list|,
name|omMetrics
operator|.
name|getNumBucketCreateFails
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numBucketInfoFail
argument_list|,
name|omMetrics
operator|.
name|getNumBucketInfoFails
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDeleteBucket ()
specifier|public
name|void
name|testDeleteBucket
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|volumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|volumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|volumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|getBucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|BucketInfo
name|bucketInfo
init|=
name|storageHandler
operator|.
name|getBucketInfo
argument_list|(
name|getBucketArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucketInfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucketInfo
operator|.
name|getBucketName
argument_list|()
operator|.
name|equals
argument_list|(
name|bucketName
argument_list|)
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|deleteBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Info Bucket failed, error: BUCKET_NOT_FOUND"
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|getBucketInfo
argument_list|(
name|getBucketArgs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDeleteNonExistingBucket ()
specifier|public
name|void
name|testDeleteNonExistingBucket
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|volumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|volumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|volumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|getBucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|BucketInfo
name|bucketInfo
init|=
name|storageHandler
operator|.
name|getBucketInfo
argument_list|(
name|getBucketArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucketInfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucketInfo
operator|.
name|getBucketName
argument_list|()
operator|.
name|equals
argument_list|(
name|bucketName
argument_list|)
argument_list|)
expr_stmt|;
name|BucketArgs
name|newBucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
operator|+
literal|"_invalid"
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Delete Bucket failed, error:BUCKET_NOT_FOUND"
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|deleteBucket
argument_list|(
name|newBucketArgs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDeleteNonEmptyBucket ()
specifier|public
name|void
name|testDeleteNonEmptyBucket
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|volumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|volumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|volumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|getBucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|BucketInfo
name|bucketInfo
init|=
name|storageHandler
operator|.
name|getBucketInfo
argument_list|(
name|getBucketArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucketInfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bucketInfo
operator|.
name|getBucketName
argument_list|()
operator|.
name|equals
argument_list|(
name|bucketName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dataString
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|dataString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Delete Bucket failed, error:BUCKET_NOT_EMPTY"
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|deleteBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Basic test of both putKey and getKey from OM, as one can not be tested    * without the other.    *    * @throws IOException    * @throws OzoneException    */
annotation|@
name|Test
DECL|method|testGetKeyWriterReader ()
specifier|public
name|void
name|testGetKeyWriterReader
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|numKeyAllocates
init|=
name|omMetrics
operator|.
name|getNumKeyAllocates
argument_list|()
decl_stmt|;
name|long
name|numKeyLookups
init|=
name|omMetrics
operator|.
name|getNumKeyLookups
argument_list|()
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|bucketName
argument_list|,
name|createVolumeArgs
argument_list|)
decl_stmt|;
name|bucketArgs
operator|.
name|setAddAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setRemoveAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|String
name|dataString
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|dataString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|+
name|numKeyAllocates
argument_list|,
name|omMetrics
operator|.
name|getNumKeyAllocates
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataString
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|storageHandler
operator|.
name|newKeyReader
argument_list|(
name|keyArgs
argument_list|)
init|)
block|{
name|in
operator|.
name|read
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataString
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|+
name|numKeyLookups
argument_list|,
name|omMetrics
operator|.
name|getNumKeyLookups
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test write the same key twice, the second write should fail, as currently    * key overwrite is not supported.    *    * @throws IOException    * @throws OzoneException    */
annotation|@
name|Test
DECL|method|testKeyOverwrite ()
specifier|public
name|void
name|testKeyOverwrite
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|numKeyAllocateFails
init|=
name|omMetrics
operator|.
name|getNumKeyAllocateFails
argument_list|()
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|bucketName
argument_list|,
name|createVolumeArgs
argument_list|)
decl_stmt|;
name|bucketArgs
operator|.
name|setAddAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setRemoveAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|String
name|dataString
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|dataString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We allow the key overwrite to be successful. Please note : Till
comment|// HDFS-11922 is fixed this causes a data block leak on the data node side.
comment|// That is this overwrite only overwrites the keys on OM. We need to
comment|// garbage collect those blocks from datanode.
name|KeyArgs
name|keyArgs2
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numKeyAllocateFails
argument_list|,
name|omMetrics
operator|.
name|getNumKeyAllocateFails
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test get a non-exiting key.    *    * @throws IOException    * @throws OzoneException    */
annotation|@
name|Test
DECL|method|testGetNonExistKey ()
specifier|public
name|void
name|testGetNonExistKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|numKeyLookupFails
init|=
name|omMetrics
operator|.
name|getNumKeyLookupFails
argument_list|()
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|bucketName
argument_list|,
name|createVolumeArgs
argument_list|)
decl_stmt|;
name|bucketArgs
operator|.
name|setAddAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setRemoveAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs
init|=
operator|new
name|KeyArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
comment|// try to get the key, should fail as it hasn't been created
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"KEY_NOT_FOUND"
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|newKeyReader
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|+
name|numKeyLookupFails
argument_list|,
name|omMetrics
operator|.
name|getNumKeyLookupFails
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test delete keys for om.    *    * @throws IOException    * @throws OzoneException    */
annotation|@
name|Test
DECL|method|testDeleteKey ()
specifier|public
name|void
name|testDeleteKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|numKeyDeletes
init|=
name|omMetrics
operator|.
name|getNumKeyDeletes
argument_list|()
decl_stmt|;
name|long
name|numKeyDeleteFails
init|=
name|omMetrics
operator|.
name|getNumKeyDeletesFails
argument_list|()
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|bucketName
argument_list|,
name|createVolumeArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs
init|=
operator|new
name|KeyArgs
argument_list|(
name|keyName
argument_list|,
name|bucketArgs
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|String
name|dataString
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|dataString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|storageHandler
operator|.
name|deleteKey
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|+
name|numKeyDeletes
argument_list|,
name|omMetrics
operator|.
name|getNumKeyDeletes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the deleted key has been moved to the deleted table.
name|OMMetadataManager
name|manager
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|getMetadataManager
argument_list|()
decl_stmt|;
try|try
init|(
name|TableIterator
argument_list|<
name|byte
index|[]
argument_list|,
name|?
extends|extends
name|KeyValue
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|iter
init|=
name|manager
operator|.
name|getDeletedTable
argument_list|()
operator|.
name|iterator
argument_list|()
init|)
block|{
name|iter
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
name|Table
operator|.
name|KeyValue
name|kv
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
comment|// Delete the key again to test deleting non-existing key.
try|try
block|{
name|storageHandler
operator|.
name|deleteKey
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"KEY_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|+
name|numKeyDeleteFails
argument_list|,
name|omMetrics
operator|.
name|getNumKeyDeletesFails
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test rename key for om.    *    * @throws IOException    * @throws OzoneException    */
annotation|@
name|Test
DECL|method|testRenameKey ()
specifier|public
name|void
name|testRenameKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|numKeyRenames
init|=
name|omMetrics
operator|.
name|getNumKeyRenames
argument_list|()
decl_stmt|;
name|long
name|numKeyRenameFails
init|=
name|omMetrics
operator|.
name|getNumKeyRenameFails
argument_list|()
decl_stmt|;
name|int
name|testRenameFails
init|=
literal|0
decl_stmt|;
name|int
name|testRenames
init|=
literal|0
decl_stmt|;
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|bucketName
argument_list|,
name|createVolumeArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs
init|=
operator|new
name|KeyArgs
argument_list|(
name|keyName
argument_list|,
name|bucketArgs
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|String
name|toKeyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|// Rename from non-existent key should fail
try|try
block|{
name|testRenames
operator|++
expr_stmt|;
name|storageHandler
operator|.
name|renameKey
argument_list|(
name|keyArgs
argument_list|,
name|toKeyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|testRenameFails
operator|++
expr_stmt|;
name|ioe
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Rename key failed, error"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write the contents of the key to be renamed
name|String
name|dataString
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|dataString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Rename the key
name|toKeyName
operator|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|testRenames
operator|++
expr_stmt|;
name|storageHandler
operator|.
name|renameKey
argument_list|(
name|keyArgs
argument_list|,
name|toKeyName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numKeyRenames
operator|+
name|testRenames
argument_list|,
name|omMetrics
operator|.
name|getNumKeyRenames
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numKeyRenameFails
operator|+
name|testRenameFails
argument_list|,
name|omMetrics
operator|.
name|getNumKeyRenameFails
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to get the key, should fail as it has been renamed
try|try
block|{
name|storageHandler
operator|.
name|newKeyReader
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ioe
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"KEY_NOT_FOUND"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify the contents of the renamed key
name|keyArgs
operator|=
operator|new
name|KeyArgs
argument_list|(
name|toKeyName
argument_list|,
name|bucketArgs
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|storageHandler
operator|.
name|newKeyReader
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|dataString
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|b
argument_list|)
argument_list|,
name|dataString
argument_list|)
expr_stmt|;
comment|// Rewrite the renamed key. Rename to key which already exists should fail.
name|keyArgs
operator|=
operator|new
name|KeyArgs
argument_list|(
name|keyName
argument_list|,
name|bucketArgs
argument_list|)
expr_stmt|;
name|keyArgs
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|dataString
operator|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|100
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|dataString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|testRenames
operator|++
expr_stmt|;
name|storageHandler
operator|.
name|renameKey
argument_list|(
name|keyArgs
argument_list|,
name|toKeyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|testRenameFails
operator|++
expr_stmt|;
name|ioe
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Rename key failed, error"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Rename to empty string should fail
name|toKeyName
operator|=
literal|""
expr_stmt|;
try|try
block|{
name|testRenames
operator|++
expr_stmt|;
name|storageHandler
operator|.
name|renameKey
argument_list|(
name|keyArgs
argument_list|,
name|toKeyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|testRenameFails
operator|++
expr_stmt|;
name|ioe
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Rename key failed, error"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Rename from empty string should fail
name|keyArgs
operator|=
operator|new
name|KeyArgs
argument_list|(
literal|""
argument_list|,
name|bucketArgs
argument_list|)
expr_stmt|;
name|toKeyName
operator|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
expr_stmt|;
try|try
block|{
name|testRenames
operator|++
expr_stmt|;
name|storageHandler
operator|.
name|renameKey
argument_list|(
name|keyArgs
argument_list|,
name|toKeyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|testRenameFails
operator|++
expr_stmt|;
name|ioe
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Rename key failed, error"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numKeyRenames
operator|+
name|testRenames
argument_list|,
name|omMetrics
operator|.
name|getNumKeyRenames
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numKeyRenameFails
operator|+
name|testRenameFails
argument_list|,
name|omMetrics
operator|.
name|getNumKeyRenameFails
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testListBuckets ()
specifier|public
name|void
name|testListBuckets
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|ListBuckets
name|result
init|=
literal|null
decl_stmt|;
name|ListArgs
name|listBucketArgs
init|=
literal|null
decl_stmt|;
comment|// Create volume - volA.
specifier|final
name|String
name|volAname
init|=
literal|"volA"
decl_stmt|;
name|VolumeArgs
name|volAArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volAname
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|volAArgs
operator|.
name|setUserName
argument_list|(
literal|"userA"
argument_list|)
expr_stmt|;
name|volAArgs
operator|.
name|setAdminName
argument_list|(
literal|"adminA"
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|volAArgs
argument_list|)
expr_stmt|;
comment|// Create 20 buckets in volA for tests.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// Create "/volA/aBucket_0" to "/volA/aBucket_9" buckets in volA volume.
name|BucketArgs
name|aBuckets
init|=
operator|new
name|BucketArgs
argument_list|(
name|volAname
argument_list|,
literal|"aBucket_"
operator|+
name|i
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|aBuckets
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aBuckets
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
block|}
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|aBuckets
argument_list|)
expr_stmt|;
comment|// Create "/volA/bBucket_0" to "/volA/bBucket_9" buckets in volA volume.
name|BucketArgs
name|bBuckets
init|=
operator|new
name|BucketArgs
argument_list|(
name|volAname
argument_list|,
literal|"bBucket_"
operator|+
name|i
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|bBuckets
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|RAM_DISK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bBuckets
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|SSD
argument_list|)
expr_stmt|;
block|}
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bBuckets
argument_list|)
expr_stmt|;
block|}
name|VolumeArgs
name|volArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volAname
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
comment|// List all buckets in volA.
name|listBucketArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|volArgs
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|storageHandler
operator|.
name|listBuckets
argument_list|(
name|listBucketArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BucketInfo
argument_list|>
name|archiveBuckets
init|=
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|item
lambda|->
name|item
operator|.
name|getStorageType
argument_list|()
operator|==
name|StorageType
operator|.
name|ARCHIVE
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|archiveBuckets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// List buckets with prefix "aBucket".
name|listBucketArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|volArgs
argument_list|,
literal|"aBucket"
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|storageHandler
operator|.
name|listBuckets
argument_list|(
name|listBucketArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getBucketName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"aBucket"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// List a certain number of buckets.
name|listBucketArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|volArgs
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|storageHandler
operator|.
name|listBuckets
argument_list|(
name|listBucketArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aBucket_0"
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aBucket_1"
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aBucket_2"
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
comment|// List a certain number of buckets from the startKey.
name|listBucketArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|volArgs
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
literal|"bBucket_3"
argument_list|)
expr_stmt|;
name|result
operator|=
name|storageHandler
operator|.
name|listBuckets
argument_list|(
name|listBucketArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bBucket_4"
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bBucket_5"
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Provide an invalid bucket name as start key.
name|listBucketArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|volArgs
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
literal|"unknown_bucket_name"
argument_list|)
expr_stmt|;
name|ListBuckets
name|buckets
init|=
name|storageHandler
operator|.
name|listBuckets
argument_list|(
name|listBucketArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|buckets
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Use all arguments.
name|listBucketArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|volArgs
argument_list|,
literal|"b"
argument_list|,
literal|5
argument_list|,
literal|"bBucket_7"
argument_list|)
expr_stmt|;
name|result
operator|=
name|storageHandler
operator|.
name|listBuckets
argument_list|(
name|listBucketArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bBucket_8"
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bBucket_9"
argument_list|,
name|result
operator|.
name|getBuckets
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Provide an invalid maxKeys argument.
try|try
block|{
name|listBucketArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|volArgs
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|listBuckets
argument_list|(
name|listBucketArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting an error when the given"
operator|+
literal|" maxKeys argument is invalid."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"the value must be in range (0, %d]"
argument_list|,
name|OzoneConsts
operator|.
name|MAX_LISTBUCKETS_SIZE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Provide an invalid volume name.
name|VolumeArgs
name|invalidVolArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
literal|"invalid_name"
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
try|try
block|{
name|listBucketArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|invalidVolArgs
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|listBuckets
argument_list|(
name|listBucketArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting an error when the given volume name is invalid."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|Status
operator|.
name|VOLUME_NOT_FOUND
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test list keys.    * @throws IOException    * @throws OzoneException    */
annotation|@
name|Test
DECL|method|testListKeys ()
specifier|public
name|void
name|testListKeys
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|ListKeys
name|result
init|=
literal|null
decl_stmt|;
name|ListArgs
name|listKeyArgs
init|=
literal|null
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|bucketName
argument_list|,
name|createVolumeArgs
argument_list|)
decl_stmt|;
name|bucketArgs
operator|.
name|setAddAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setRemoveAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
comment|// Write 20 keys in bucket.
name|int
name|numKeys
init|=
literal|20
decl_stmt|;
name|String
name|keyName
init|=
literal|"Key"
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numKeys
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// Create /volume/bucket/aKey[0,2,4,...,18] in bucket.
name|keyArgs
operator|=
operator|new
name|KeyArgs
argument_list|(
literal|"a"
operator|+
name|keyName
operator|+
name|i
argument_list|,
name|bucketArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Create /volume/bucket/bKey[1,3,5,...,19] in bucket.
name|keyArgs
operator|=
operator|new
name|KeyArgs
argument_list|(
literal|"b"
operator|+
name|keyName
operator|+
name|i
argument_list|,
name|bucketArgs
argument_list|)
expr_stmt|;
block|}
name|keyArgs
operator|.
name|setSize
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
comment|// Just for testing list keys call, so no need to write real data.
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// List all keys in bucket.
name|bucketArgs
operator|=
operator|new
name|BucketArgs
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|userArgs
argument_list|)
expr_stmt|;
name|listKeyArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|bucketArgs
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|storageHandler
operator|.
name|listKeys
argument_list|(
name|listKeyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numKeys
argument_list|,
name|result
operator|.
name|getKeyList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// List keys with prefix "aKey".
name|listKeyArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|bucketArgs
argument_list|,
literal|"aKey"
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|storageHandler
operator|.
name|listKeys
argument_list|(
name|listKeyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numKeys
operator|/
literal|2
argument_list|,
name|result
operator|.
name|getKeyList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|getKeyList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getKeyName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"aKey"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// List a certain number of keys.
name|listKeyArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|bucketArgs
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|result
operator|=
name|storageHandler
operator|.
name|listKeys
argument_list|(
name|listKeyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getKeyList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aKey0"
argument_list|,
name|result
operator|.
name|getKeyList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aKey10"
argument_list|,
name|result
operator|.
name|getKeyList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aKey12"
argument_list|,
name|result
operator|.
name|getKeyList
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
comment|// List a certain number of keys from the startKey.
name|listKeyArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|bucketArgs
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
literal|"bKey1"
argument_list|)
expr_stmt|;
name|result
operator|=
name|storageHandler
operator|.
name|listKeys
argument_list|(
name|listKeyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getKeyList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bKey11"
argument_list|,
name|result
operator|.
name|getKeyList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bKey13"
argument_list|,
name|result
operator|.
name|getKeyList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Provide an invalid key name as start key.
name|listKeyArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|bucketArgs
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
literal|"invalid_start_key"
argument_list|)
expr_stmt|;
name|ListKeys
name|keys
init|=
name|storageHandler
operator|.
name|listKeys
argument_list|(
name|listKeyArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keys
operator|.
name|getKeyList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Provide an invalid maxKeys argument.
try|try
block|{
name|listKeyArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|bucketArgs
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|listBuckets
argument_list|(
name|listKeyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting an error when the given"
operator|+
literal|" maxKeys argument is invalid."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"the value must be in range (0, %d]"
argument_list|,
name|OzoneConsts
operator|.
name|MAX_LISTKEYS_SIZE
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Provide an invalid bucket name.
name|bucketArgs
operator|=
operator|new
name|BucketArgs
argument_list|(
literal|"invalid_bucket"
argument_list|,
name|createVolumeArgs
argument_list|)
expr_stmt|;
try|try
block|{
name|listKeyArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|bucketArgs
argument_list|,
literal|null
argument_list|,
name|numKeys
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|listKeys
argument_list|(
name|listKeyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting an error when the given bucket name is invalid."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
name|Status
operator|.
name|BUCKET_NOT_FOUND
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListVolumes ()
specifier|public
name|void
name|testListVolumes
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|user0
init|=
literal|"testListVolumes-user-0"
decl_stmt|;
name|String
name|user1
init|=
literal|"testListVolumes-user-1"
decl_stmt|;
name|String
name|adminUser
init|=
literal|"testListVolumes-admin"
decl_stmt|;
name|ListArgs
name|listVolumeArgs
decl_stmt|;
name|ListVolumes
name|volumes
decl_stmt|;
comment|// Create 10 volumes by user0 and user1
name|String
index|[]
name|user0vols
init|=
operator|new
name|String
index|[
literal|10
index|]
decl_stmt|;
name|String
index|[]
name|user1vols
init|=
operator|new
name|String
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|VolumeArgs
name|createVolumeArgs
decl_stmt|;
name|String
name|user0VolName
init|=
literal|"Vol-"
operator|+
name|user0
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|user0vols
index|[
name|i
index|]
operator|=
name|user0VolName
expr_stmt|;
name|createVolumeArgs
operator|=
operator|new
name|VolumeArgs
argument_list|(
name|user0VolName
argument_list|,
name|userArgs
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|user0
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminUser
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setQuota
argument_list|(
operator|new
name|OzoneQuota
argument_list|(
name|i
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|String
name|user1VolName
init|=
literal|"Vol-"
operator|+
name|user1
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|user1vols
index|[
name|i
index|]
operator|=
name|user1VolName
expr_stmt|;
name|createVolumeArgs
operator|=
operator|new
name|VolumeArgs
argument_list|(
name|user1VolName
argument_list|,
name|userArgs
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|user1
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminUser
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setQuota
argument_list|(
operator|new
name|OzoneQuota
argument_list|(
name|i
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
block|}
comment|// Test list all volumes - Removed Support for this operation for time
comment|// being. TODO: we will need to bring this back if needed.
name|UserArgs
name|userArgs0
init|=
operator|new
name|UserArgs
argument_list|(
name|user0
argument_list|,
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//listVolumeArgs = new ListArgs(userArgs0,"Vol-testListVolumes", 100, null);
comment|// listVolumeArgs.setRootScan(true);
comment|// volumes = storageHandler.listVolumes(listVolumeArgs);
comment|// Assert.assertEquals(20, volumes.getVolumes().size());
comment|// Test list all volumes belongs to an user
name|listVolumeArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|userArgs0
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|listVolumeArgs
operator|.
name|setRootScan
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|volumes
operator|=
name|storageHandler
operator|.
name|listVolumes
argument_list|(
name|listVolumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test prefix
name|listVolumeArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|userArgs0
argument_list|,
literal|"Vol-"
operator|+
name|user0
operator|+
literal|"-3"
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|volumes
operator|=
name|storageHandler
operator|.
name|listVolumes
argument_list|(
name|listVolumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user0vols
index|[
literal|3
index|]
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user0
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test list volumes by user
name|UserArgs
name|userArgs1
init|=
operator|new
name|UserArgs
argument_list|(
name|user1
argument_list|,
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|listVolumeArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|userArgs1
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|listVolumeArgs
operator|.
name|setRootScan
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|volumes
operator|=
name|storageHandler
operator|.
name|listVolumes
argument_list|(
name|listVolumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user1
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure all available fields are returned
specifier|final
name|String
name|user0vol4
init|=
literal|"Vol-"
operator|+
name|user0
operator|+
literal|"-4"
decl_stmt|;
specifier|final
name|String
name|user0vol5
init|=
literal|"Vol-"
operator|+
name|user0
operator|+
literal|"-5"
decl_stmt|;
name|listVolumeArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|userArgs0
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|user0vol4
argument_list|)
expr_stmt|;
name|listVolumeArgs
operator|.
name|setRootScan
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|volumes
operator|=
name|storageHandler
operator|.
name|listVolumes
argument_list|(
name|listVolumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user0
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|user0vol5
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuota
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OzoneQuota
operator|.
name|Units
operator|.
name|GB
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuota
argument_list|()
operator|.
name|getUnit
argument_list|()
argument_list|)
expr_stmt|;
comment|// User doesn't have volumes
name|UserArgs
name|userArgsX
init|=
operator|new
name|UserArgs
argument_list|(
literal|"unknwonUser"
argument_list|,
name|OzoneUtils
operator|.
name|getRequestID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|listVolumeArgs
operator|=
operator|new
name|ListArgs
argument_list|(
name|userArgsX
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|listVolumeArgs
operator|.
name|setRootScan
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|volumes
operator|=
name|storageHandler
operator|.
name|listVolumes
argument_list|(
name|listVolumeArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test get key information.    *    * @throws IOException    * @throws OzoneException    */
annotation|@
name|Test
DECL|method|testGetKeyInfo ()
specifier|public
name|void
name|testGetKeyInfo
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
throws|,
name|ParseException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|long
name|currentTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|bucketName
argument_list|,
name|createVolumeArgs
argument_list|)
decl_stmt|;
name|bucketArgs
operator|.
name|setAddAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setRemoveAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|String
name|keyName
init|=
literal|"testKey"
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
operator|new
name|KeyArgs
argument_list|(
name|keyName
argument_list|,
name|bucketArgs
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setSize
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|KeyInfo
name|keyInfo
init|=
name|storageHandler
operator|.
name|getKeyInfo
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
comment|// Compare the time in second unit since the date string reparsed to
comment|// millisecond will lose precision.
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|HddsClientUtils
operator|.
name|formatDateTime
argument_list|(
name|keyInfo
operator|.
name|getCreatedOn
argument_list|()
argument_list|)
operator|/
literal|1000
operator|)
operator|>=
operator|(
name|currentTime
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|HddsClientUtils
operator|.
name|formatDateTime
argument_list|(
name|keyInfo
operator|.
name|getModifiedOn
argument_list|()
argument_list|)
operator|/
literal|1000
operator|)
operator|>=
operator|(
name|currentTime
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyName
argument_list|,
name|keyInfo
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
comment|// with out data written, the size would be 0
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyInfo
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the write can proceed without having to set the right size.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testWriteSize ()
specifier|public
name|void
name|testWriteSize
parameter_list|()
throws|throws
name|IOException
throws|,
name|OzoneException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|bucketName
argument_list|,
name|createVolumeArgs
argument_list|)
decl_stmt|;
name|bucketArgs
operator|.
name|setAddAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setRemoveAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|String
name|dataString
init|=
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|100
argument_list|)
decl_stmt|;
comment|// write a key without specifying size at all
name|String
name|keyName
init|=
literal|"testKey"
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
operator|new
name|KeyArgs
argument_list|(
name|keyName
argument_list|,
name|bucketArgs
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|dataString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|dataString
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|storageHandler
operator|.
name|newKeyReader
argument_list|(
name|keyArgs
argument_list|)
init|)
block|{
name|in
operator|.
name|read
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataString
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// write a key with a size, but write above it.
name|String
name|keyName1
init|=
literal|"testKey1"
decl_stmt|;
name|KeyArgs
name|keyArgs1
init|=
operator|new
name|KeyArgs
argument_list|(
name|keyName1
argument_list|,
name|bucketArgs
argument_list|)
decl_stmt|;
name|keyArgs1
operator|.
name|setSize
argument_list|(
literal|30
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|stream
init|=
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs1
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|dataString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data1
init|=
operator|new
name|byte
index|[
name|dataString
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|storageHandler
operator|.
name|newKeyReader
argument_list|(
name|keyArgs1
argument_list|)
init|)
block|{
name|in
operator|.
name|read
argument_list|(
name|data1
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataString
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|data1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the RPC call for getting scmId and clusterId from SCM.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testGetScmInfo ()
specifier|public
name|void
name|testGetScmInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|ScmInfo
name|info
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|getScmInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterId
argument_list|,
name|info
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scmId
argument_list|,
name|info
operator|.
name|getScmId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Disabling this test
annotation|@
name|Ignore
argument_list|(
literal|"Disabling this test until Open Key is fixed."
argument_list|)
DECL|method|testExpiredOpenKey ()
specifier|public
name|void
name|testExpiredOpenKey
parameter_list|()
throws|throws
name|Exception
block|{
comment|//    BackgroundService openKeyCleanUpService = ((BlockManagerImpl)cluster
comment|//        .getOzoneManager().getBlockManager()).getOpenKeyCleanupService();
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
operator|new
name|VolumeArgs
argument_list|(
name|volumeName
argument_list|,
name|userArgs
argument_list|)
decl_stmt|;
name|createVolumeArgs
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|createVolumeArgs
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createVolume
argument_list|(
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|BucketArgs
name|bucketArgs
init|=
operator|new
name|BucketArgs
argument_list|(
name|bucketName
argument_list|,
name|createVolumeArgs
argument_list|)
decl_stmt|;
name|bucketArgs
operator|.
name|setAddAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setRemoveAcls
argument_list|(
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|bucketArgs
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|createBucket
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
comment|// open some keys.
name|KeyArgs
name|keyArgs1
init|=
operator|new
name|KeyArgs
argument_list|(
literal|"testKey1"
argument_list|,
name|bucketArgs
argument_list|)
decl_stmt|;
name|KeyArgs
name|keyArgs2
init|=
operator|new
name|KeyArgs
argument_list|(
literal|"testKey2"
argument_list|,
name|bucketArgs
argument_list|)
decl_stmt|;
name|KeyArgs
name|keyArgs3
init|=
operator|new
name|KeyArgs
argument_list|(
literal|"testKey3"
argument_list|,
name|bucketArgs
argument_list|)
decl_stmt|;
name|KeyArgs
name|keyArgs4
init|=
operator|new
name|KeyArgs
argument_list|(
literal|"testKey4"
argument_list|,
name|bucketArgs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BlockGroup
argument_list|>
name|openKeys
decl_stmt|;
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs1
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs2
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs3
argument_list|)
expr_stmt|;
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs4
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Stream
operator|.
name|of
argument_list|(
literal|"testKey1"
argument_list|,
literal|"testKey2"
argument_list|,
literal|"testKey3"
argument_list|,
literal|"testKey4"
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Now all k1-k4 should be in open state, so ExpiredOpenKeys should not
comment|// contain these values.
name|openKeys
operator|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|getMetadataManager
argument_list|()
operator|.
name|getExpiredOpenKeys
argument_list|()
expr_stmt|;
for|for
control|(
name|BlockGroup
name|bg
range|:
name|openKeys
control|)
block|{
name|String
index|[]
name|subs
init|=
name|bg
operator|.
name|getGroupID
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
name|subs
index|[
name|subs
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|expected
operator|.
name|contains
argument_list|(
name|keyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Now all k1-k4 should be in ExpiredOpenKeys
name|openKeys
operator|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|getMetadataManager
argument_list|()
operator|.
name|getExpiredOpenKeys
argument_list|()
expr_stmt|;
for|for
control|(
name|BlockGroup
name|bg
range|:
name|openKeys
control|)
block|{
name|String
index|[]
name|subs
init|=
name|bg
operator|.
name|getGroupID
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
name|subs
index|[
name|subs
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|contains
argument_list|(
name|keyName
argument_list|)
condition|)
block|{
name|expected
operator|.
name|remove
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs5
init|=
operator|new
name|KeyArgs
argument_list|(
literal|"testKey5"
argument_list|,
name|bucketArgs
argument_list|)
decl_stmt|;
name|storageHandler
operator|.
name|newKeyWriter
argument_list|(
name|keyArgs5
argument_list|)
expr_stmt|;
comment|//openKeyCleanUpService.triggerBackgroundTaskForTesting();
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// now all k1-k4 should have been removed by the clean-up task, only k5
comment|// should be present in ExpiredOpenKeys.
name|openKeys
operator|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|getMetadataManager
argument_list|()
operator|.
name|getExpiredOpenKeys
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|openKeys
argument_list|)
expr_stmt|;
name|boolean
name|key5found
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|removed
init|=
name|Stream
operator|.
name|of
argument_list|(
literal|"testKey1"
argument_list|,
literal|"testKey2"
argument_list|,
literal|"testKey3"
argument_list|,
literal|"testKey4"
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockGroup
name|bg
range|:
name|openKeys
control|)
block|{
name|String
index|[]
name|subs
init|=
name|bg
operator|.
name|getGroupID
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
name|subs
index|[
name|subs
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|removed
operator|.
name|contains
argument_list|(
name|keyName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyName
operator|.
name|equals
argument_list|(
literal|"testKey5"
argument_list|)
condition|)
block|{
name|key5found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key5found
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the OM Initialization.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testOmInitialization ()
specifier|public
name|void
name|testOmInitialization
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Read the version file info from OM version file
name|OMStorage
name|omStorage
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|getOmStorage
argument_list|()
decl_stmt|;
name|SCMStorage
name|scmStorage
init|=
operator|new
name|SCMStorage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// asserts whether cluster Id and SCM ID are properly set in SCM Version
comment|// file.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterId
argument_list|,
name|scmStorage
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scmId
argument_list|,
name|scmStorage
operator|.
name|getScmId
argument_list|()
argument_list|)
expr_stmt|;
comment|// asserts whether OM Id is properly set in OM Version file.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omId
argument_list|,
name|omStorage
operator|.
name|getOmId
argument_list|()
argument_list|)
expr_stmt|;
comment|// asserts whether the SCM info is correct in OM Version file.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterId
argument_list|,
name|omStorage
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scmId
argument_list|,
name|omStorage
operator|.
name|getScmId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the OM Initialization Failure.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testOmInitializationFailure ()
specifier|public
name|void
name|testOmInitializationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|config
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|metaDirPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|,
literal|"om-meta"
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|metaDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|OMException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"OM not initialized."
argument_list|)
expr_stmt|;
name|OzoneManager
operator|.
name|createOm
argument_list|(
literal|null
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|OMStorage
name|omStore
init|=
operator|new
name|OMStorage
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|omStore
operator|.
name|setClusterId
argument_list|(
literal|"testClusterId"
argument_list|)
expr_stmt|;
name|omStore
operator|.
name|setScmId
argument_list|(
literal|"testScmId"
argument_list|)
expr_stmt|;
comment|// writes the version file properties
name|omStore
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|OMException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"SCM version info mismatch."
argument_list|)
expr_stmt|;
name|OzoneManager
operator|.
name|createOm
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetServiceList ()
specifier|public
name|void
name|testGetServiceList
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|numGetServiceListCalls
init|=
name|omMetrics
operator|.
name|getNumGetServiceLists
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|services
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|getServiceList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numGetServiceListCalls
operator|+
literal|1
argument_list|,
name|omMetrics
operator|.
name|getNumGetServiceLists
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceInfo
name|omInfo
init|=
name|services
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getNodeType
argument_list|()
operator|.
name|equals
argument_list|(
name|HddsProtos
operator|.
name|NodeType
operator|.
name|OM
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|omAddress
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|omInfo
operator|.
name|getHostname
argument_list|()
argument_list|,
name|omInfo
operator|.
name|getPort
argument_list|(
name|ServicePort
operator|.
name|Type
operator|.
name|RPC
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|OZONE_OM_ADDRESS_KEY
argument_list|)
argument_list|)
argument_list|,
name|omAddress
argument_list|)
expr_stmt|;
name|ServiceInfo
name|scmInfo
init|=
name|services
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getNodeType
argument_list|()
operator|.
name|equals
argument_list|(
name|HddsProtos
operator|.
name|NodeType
operator|.
name|SCM
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|scmAddress
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|scmInfo
operator|.
name|getHostname
argument_list|()
argument_list|,
name|scmInfo
operator|.
name|getPort
argument_list|(
name|ServicePort
operator|.
name|Type
operator|.
name|RPC
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
argument_list|)
argument_list|,
name|scmAddress
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

