begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|OzoneChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
operator|.
name|THREE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This class is to test all the public facing APIs of Ozone Client with an  * active OM Ratis server.  */
end_comment

begin_class
DECL|class|TestOzoneRpcClientWithRatis
specifier|public
class|class
name|TestOzoneRpcClientWithRatis
extends|extends
name|TestOzoneRpcClientAbstract
block|{
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
comment|/**    * Create a MiniOzoneCluster for testing.    * Ozone is made active by setting OZONE_ENABLED = true.    * Ozone OM Ratis server is made active by setting    * OZONE_OM_RATIS_ENABLE = true;    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_PIPELINE_OWNER_CONTAINER_COUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_NETWORK_TOPOLOGY_AWARE_READ_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close OzoneClient and shutdown MiniOzoneCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests get the information of key with network topology awareness enabled.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testGetKeyAndFileWithNetworkTopology ()
specifier|public
name|void
name|testGetKeyAndFileWithNetworkTopology
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|"sample value"
decl_stmt|;
name|getStore
argument_list|()
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|getStore
argument_list|()
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Write data into a key
try|try
init|(
name|OzoneOutputStream
name|out
init|=
name|bucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|THREE
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Since the rpc client is outside of cluster, then getFirstNode should be
comment|// equal to getClosestNode.
name|OmKeyArgs
operator|.
name|Builder
name|builder
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|setRefreshPipeline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// read key with topology aware read enabled
try|try
init|(
name|OzoneInputStream
name|is
init|=
name|bucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
init|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneChecksumException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Read key should succeed"
argument_list|)
expr_stmt|;
block|}
comment|// read file with topology aware read enabled
try|try
init|(
name|OzoneInputStream
name|is
init|=
name|bucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
init|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneChecksumException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Read file should succeed"
argument_list|)
expr_stmt|;
block|}
comment|// read key with topology aware read disabled
name|conf
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_NETWORK_TOPOLOGY_AWARE_READ_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|OzoneClient
name|newClient
init|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|ObjectStore
name|newStore
init|=
name|newClient
operator|.
name|getObjectStore
argument_list|()
decl_stmt|;
name|OzoneBucket
name|newBucket
init|=
name|newStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
try|try
init|(
name|OzoneInputStream
name|is
init|=
name|newBucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
init|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneChecksumException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Read key should succeed"
argument_list|)
expr_stmt|;
block|}
comment|// read file with topology aware read disabled
try|try
init|(
name|OzoneInputStream
name|is
init|=
name|newBucket
operator|.
name|readFile
argument_list|(
name|keyName
argument_list|)
init|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneChecksumException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Read file should succeed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

