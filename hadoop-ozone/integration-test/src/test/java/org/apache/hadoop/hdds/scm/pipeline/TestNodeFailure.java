begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.pipeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
import|;
end_import

begin_comment
comment|/**  * Test Node failure detection and handling in Ratis.  */
end_comment

begin_class
DECL|class|TestNodeFailure
specifier|public
class|class
name|TestNodeFailure
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|ratisPipelineOne
specifier|private
specifier|static
name|Pipeline
name|ratisPipelineOne
decl_stmt|;
DECL|field|ratisPipelineTwo
specifier|private
specifier|static
name|Pipeline
name|ratisPipelineTwo
decl_stmt|;
DECL|field|containerManager
specifier|private
specifier|static
name|ContainerManager
name|containerManager
decl_stmt|;
DECL|field|pipelineManager
specifier|private
specifier|static
name|PipelineManager
name|pipelineManager
decl_stmt|;
DECL|field|timeForFailure
specifier|private
specifier|static
name|long
name|timeForFailure
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_SERVER_FAILURE_DURATION_KEY
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CONTAINER_CREATION_LEASE_TIMEOUT
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|6
argument_list|)
operator|.
name|setHbInterval
argument_list|(
literal|1000
argument_list|)
operator|.
name|setHbProcessorInterval
argument_list|(
literal|1000
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|StorageContainerManager
name|scm
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
decl_stmt|;
name|containerManager
operator|=
name|scm
operator|.
name|getContainerManager
argument_list|()
expr_stmt|;
name|pipelineManager
operator|=
name|scm
operator|.
name|getPipelineManager
argument_list|()
expr_stmt|;
name|ratisPipelineOne
operator|=
name|pipelineManager
operator|.
name|getPipeline
argument_list|(
name|containerManager
operator|.
name|allocateContainer
argument_list|(
name|RATIS
argument_list|,
name|THREE
argument_list|,
literal|"testOwner"
argument_list|)
operator|.
name|getPipelineID
argument_list|()
argument_list|)
expr_stmt|;
name|ratisPipelineTwo
operator|=
name|pipelineManager
operator|.
name|getPipeline
argument_list|(
name|containerManager
operator|.
name|allocateContainer
argument_list|(
name|RATIS
argument_list|,
name|THREE
argument_list|,
literal|"testOwner"
argument_list|)
operator|.
name|getPipelineID
argument_list|()
argument_list|)
expr_stmt|;
comment|// At this stage, there should be 2 pipeline one with 1 open container each.
comment|// Try closing the both the pipelines, one with a closed container and
comment|// the other with an open container.
name|timeForFailure
operator|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_SERVER_FAILURE_DURATION_KEY
argument_list|,
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_SERVER_FAILURE_DURATION_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
comment|// Enable this after we implement teardown pipeline logic once a datanode
comment|// dies.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300_000L
argument_list|)
DECL|method|testPipelineFail ()
specifier|public
name|void
name|testPipelineFail
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|TimeoutException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ratisPipelineOne
operator|.
name|getPipelineState
argument_list|()
argument_list|,
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|Pipeline
name|pipelineToFail
init|=
name|ratisPipelineOne
decl_stmt|;
name|DatanodeDetails
name|dnToFail
init|=
name|pipelineToFail
operator|.
name|getFirstNode
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|dnToFail
argument_list|)
expr_stmt|;
comment|// wait for sufficient time for the callback to be triggered
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
name|timeForFailure
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Pipeline
operator|.
name|PipelineState
operator|.
name|CLOSED
argument_list|,
name|pipelineManager
operator|.
name|getPipeline
argument_list|(
name|ratisPipelineOne
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getPipelineState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
argument_list|,
name|pipelineManager
operator|.
name|getPipeline
argument_list|(
name|ratisPipelineTwo
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getPipelineState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now restart the datanode and make sure that a new pipeline is created.
name|cluster
operator|.
name|setWaitForClusterToBeReadyTimeout
argument_list|(
literal|300000
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartHddsDatanode
argument_list|(
name|dnToFail
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Pipeline
name|ratisPipelineThree
init|=
name|pipelineManager
operator|.
name|getPipeline
argument_list|(
name|containerManager
operator|.
name|allocateContainer
argument_list|(
name|RATIS
argument_list|,
name|THREE
argument_list|,
literal|"testOwner"
argument_list|)
operator|.
name|getPipelineID
argument_list|()
argument_list|)
decl_stmt|;
comment|//Assert that new container is not created from the ratis 2 pipeline
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|ratisPipelineThree
operator|.
name|getId
argument_list|()
argument_list|,
name|ratisPipelineTwo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

