begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ozShell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ozShell
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneHAClusterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|ozShell
operator|.
name|OzoneShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|IExceptionHandler2
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|ParameterException
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|ParseResult
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|RunLast
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This class tests Ozone sh shell command.  * Inspired by TestS3Shell  */
end_comment

begin_class
DECL|class|TestOzoneShellHA
specifier|public
class|class
name|TestOzoneShellHA
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestOzoneShellHA
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Set the timeout for every test.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
DECL|field|baseDir
specifier|private
specifier|static
name|File
name|baseDir
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|ozoneShell
specifier|private
specifier|static
name|OzoneShell
name|ozoneShell
init|=
literal|null
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|err
specifier|private
specifier|final
name|ByteArrayOutputStream
name|err
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|OLD_OUT
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_OUT
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|field|OLD_ERR
specifier|private
specifier|static
specifier|final
name|PrintStream
name|OLD_ERR
init|=
name|System
operator|.
name|err
decl_stmt|;
DECL|field|omServiceId
specifier|private
specifier|static
name|String
name|omServiceId
decl_stmt|;
DECL|field|clusterId
specifier|private
specifier|static
name|String
name|clusterId
decl_stmt|;
DECL|field|scmId
specifier|private
specifier|static
name|String
name|scmId
decl_stmt|;
DECL|field|numOfOMs
specifier|private
specifier|static
name|int
name|numOfOMs
decl_stmt|;
comment|/**    * Create a MiniOzoneCluster for testing with using distributed Ozone    * handler type.    *    * @throws Exception    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestOzoneShellHA
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|baseDir
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|baseDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|ozoneShell
operator|=
operator|new
name|OzoneShell
argument_list|()
expr_stmt|;
comment|// Init HA cluster
name|omServiceId
operator|=
literal|"om-service-test1"
expr_stmt|;
name|numOfOMs
operator|=
literal|3
expr_stmt|;
name|clusterId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scmId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newHABuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
operator|.
name|setOMServiceId
argument_list|(
name|omServiceId
argument_list|)
operator|.
name|setNumOfOzoneManagers
argument_list|(
name|numOfOMs
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
block|}
comment|/**    * shutdown MiniOzoneCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|baseDir
operator|!=
literal|null
condition|)
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|baseDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|// reset stream after each unit test
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// restore system streams
name|System
operator|.
name|setOut
argument_list|(
name|OLD_OUT
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|OLD_ERR
argument_list|)
expr_stmt|;
block|}
DECL|method|execute (OzoneShell shell, String[] args)
specifier|private
name|void
name|execute
parameter_list|(
name|OzoneShell
name|shell
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing OzoneShell command with args {}"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|CommandLine
name|cmd
init|=
name|shell
operator|.
name|getCmd
argument_list|()
decl_stmt|;
name|IExceptionHandler2
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|exceptionHandler
init|=
operator|new
name|IExceptionHandler2
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|handleParseException
parameter_list|(
name|ParameterException
name|ex
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|handleExecutionException
parameter_list|(
name|ExecutionException
name|ex
parameter_list|,
name|ParseResult
name|parseRes
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
decl_stmt|;
comment|// Since there is no elegant way to pass Ozone config to the shell,
comment|// the idea is to use 'set' to place those OM HA configs.
name|String
index|[]
name|argsWithHAConf
init|=
name|getHASetConfStrings
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|parseWithHandlers
argument_list|(
operator|new
name|RunLast
argument_list|()
argument_list|,
name|exceptionHandler
argument_list|,
name|argsWithHAConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Execute command, assert exception message and returns true if error    * was thrown.    */
DECL|method|executeWithError (OzoneShell shell, String[] args, String expectedError)
specifier|private
name|void
name|executeWithError
parameter_list|(
name|OzoneShell
name|shell
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
name|String
name|expectedError
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|expectedError
argument_list|)
condition|)
block|{
name|execute
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|execute
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception is expected from command execution "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|expectedError
argument_list|)
condition|)
block|{
name|Throwable
name|exceptionToCheck
init|=
name|ex
decl_stmt|;
if|if
condition|(
name|exceptionToCheck
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exceptionToCheck
operator|=
name|exceptionToCheck
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error of OzoneShell code doesn't contain the "
operator|+
literal|"exception [%s] in [%s]"
argument_list|,
name|expectedError
argument_list|,
name|exceptionToCheck
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|exceptionToCheck
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedError
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * @return the leader OM's Node ID in the MiniOzoneHACluster.    *    * TODO: This should be put into MiniOzoneHAClusterImpl in the future.    * This helper function is similar to the one in TestOzoneFsHAURLs.    */
DECL|method|getLeaderOMNodeId ()
specifier|private
name|String
name|getLeaderOMNodeId
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|omNodeIds
init|=
name|OmUtils
operator|.
name|getOMNodeIds
argument_list|(
name|conf
argument_list|,
name|omServiceId
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|omNodeIds
operator|.
name|size
argument_list|()
operator|==
name|numOfOMs
operator|)
assert|;
name|MiniOzoneHAClusterImpl
name|haCluster
init|=
operator|(
name|MiniOzoneHAClusterImpl
operator|)
name|cluster
decl_stmt|;
comment|// Note: this loop may be implemented inside MiniOzoneHAClusterImpl
for|for
control|(
name|String
name|omNodeId
range|:
name|omNodeIds
control|)
block|{
comment|// Find the leader OM
if|if
condition|(
operator|!
name|haCluster
operator|.
name|getOzoneManager
argument_list|(
name|omNodeId
argument_list|)
operator|.
name|isLeader
argument_list|()
condition|)
block|{
continue|continue;
block|}
return|return
name|omNodeId
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getSetConfStringFromConf (String key)
specifier|private
name|String
name|getSetConfStringFromConf
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"--set=%s=%s"
argument_list|,
name|key
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
DECL|method|generateSetConfString (String key, String value)
specifier|private
name|String
name|generateSetConfString
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"--set=%s=%s"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Helper function to get a String array to be fed into OzoneShell.    * @param numOfArgs Additional number of arguments after the HA conf string,    *                  this translates into the number of empty array elements    *                  after the HA conf string.    * @return String array.    */
DECL|method|getHASetConfStrings (int numOfArgs)
specifier|private
name|String
index|[]
name|getHASetConfStrings
parameter_list|(
name|int
name|numOfArgs
parameter_list|)
block|{
assert|assert
operator|(
name|numOfArgs
operator|>=
literal|0
operator|)
assert|;
name|String
index|[]
name|res
init|=
operator|new
name|String
index|[
literal|1
operator|+
literal|1
operator|+
name|numOfOMs
operator|+
name|numOfArgs
index|]
decl_stmt|;
specifier|final
name|int
name|indexOmServiceIds
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|indexOmNodes
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|indexOmAddressStart
init|=
literal|2
decl_stmt|;
name|res
index|[
name|indexOmServiceIds
index|]
operator|=
name|getSetConfStringFromConf
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_SERVICE_IDS_KEY
argument_list|)
expr_stmt|;
name|String
name|omNodesKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_NODES_KEY
argument_list|,
name|omServiceId
argument_list|)
decl_stmt|;
name|String
name|omNodesVal
init|=
name|conf
operator|.
name|get
argument_list|(
name|omNodesKey
argument_list|)
decl_stmt|;
name|res
index|[
name|indexOmNodes
index|]
operator|=
name|generateSetConfString
argument_list|(
name|omNodesKey
argument_list|,
name|omNodesVal
argument_list|)
expr_stmt|;
name|String
index|[]
name|omNodesArr
init|=
name|omNodesVal
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
comment|// Sanity check
assert|assert
operator|(
name|omNodesArr
operator|.
name|length
operator|==
name|numOfOMs
operator|)
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfOMs
condition|;
name|i
operator|++
control|)
block|{
name|res
index|[
name|indexOmAddressStart
operator|+
name|i
index|]
operator|=
name|getSetConfStringFromConf
argument_list|(
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|omServiceId
argument_list|,
name|omNodesArr
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Helper function to create a new set of arguments that contains HA configs.    * @param existingArgs Existing arguments to be fed into OzoneShell command.    * @return String array.    */
DECL|method|getHASetConfStrings (String[] existingArgs)
specifier|private
name|String
index|[]
name|getHASetConfStrings
parameter_list|(
name|String
index|[]
name|existingArgs
parameter_list|)
block|{
comment|// Get a String array populated with HA configs first
name|String
index|[]
name|res
init|=
name|getHASetConfStrings
argument_list|(
name|existingArgs
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|indexCopyStart
init|=
name|res
operator|.
name|length
operator|-
name|existingArgs
operator|.
name|length
decl_stmt|;
comment|// Then copy the existing args to the returned String array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|existingArgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|res
index|[
name|indexCopyStart
operator|+
name|i
index|]
operator|=
name|existingArgs
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Tests ozone sh command URI parsing with volume and bucket create commands.    */
annotation|@
name|Test
DECL|method|testOzoneShCmdURIs ()
specifier|public
name|void
name|testOzoneShCmdURIs
parameter_list|()
block|{
comment|// Test case 1: ozone sh volume create /volume
comment|// Expectation: Failure.
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"volume"
block|,
literal|"create"
block|,
literal|"/volume"
block|}
decl_stmt|;
name|executeWithError
argument_list|(
name|ozoneShell
argument_list|,
name|args
argument_list|,
literal|"Service ID or host name must not be omitted"
argument_list|)
expr_stmt|;
comment|// Get leader OM node RPC address from ozone.om.address.omServiceId.omNode
name|String
name|omLeaderNodeId
init|=
name|getLeaderOMNodeId
argument_list|()
decl_stmt|;
name|String
name|omLeaderNodeAddrKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|omServiceId
argument_list|,
name|omLeaderNodeId
argument_list|)
decl_stmt|;
name|String
name|omLeaderNodeAddr
init|=
name|conf
operator|.
name|get
argument_list|(
name|omLeaderNodeAddrKey
argument_list|)
decl_stmt|;
name|String
name|omLeaderNodeAddrWithoutPort
init|=
name|omLeaderNodeAddr
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
comment|// Test case 2: ozone sh volume create o3://om1/volume2
comment|// Expectation: Success.
comment|// Note: For now it seems OzoneShell is only trying the default port 9862
comment|// instead of using the port defined in ozone.om.address (as ozone fs does).
comment|// So the test will fail before this behavior is fixed.
comment|// TODO: Fix this behavior, then uncomment the execute() below.
name|String
name|setOmAddress
init|=
literal|"--set="
operator|+
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
operator|+
literal|"="
operator|+
name|omLeaderNodeAddr
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
name|setOmAddress
block|,
literal|"volume"
block|,
literal|"create"
block|,
literal|"o3://"
operator|+
name|omLeaderNodeAddrWithoutPort
operator|+
literal|"/volume2"
block|}
expr_stmt|;
comment|//execute(ozoneShell, args);
comment|// Test case 3: ozone sh volume create o3://om1:port/volume3
comment|// Expectation: Success.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"volume"
block|,
literal|"create"
block|,
literal|"o3://"
operator|+
name|omLeaderNodeAddr
operator|+
literal|"/volume3"
block|}
expr_stmt|;
name|execute
argument_list|(
name|ozoneShell
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|// Test case 4: ozone sh volume create o3://id1/volume
comment|// Expectation: Success.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"volume"
block|,
literal|"create"
block|,
literal|"o3://"
operator|+
name|omServiceId
operator|+
literal|"/volume"
block|}
expr_stmt|;
name|execute
argument_list|(
name|ozoneShell
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|// Test case 5: ozone sh volume create o3://id1:port/volume
comment|// Expectation: Failure.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"volume"
block|,
literal|"create"
block|,
literal|"o3://"
operator|+
name|omServiceId
operator|+
literal|":9862"
operator|+
literal|"/volume"
block|}
expr_stmt|;
name|executeWithError
argument_list|(
name|ozoneShell
argument_list|,
name|args
argument_list|,
literal|"does not use port information"
argument_list|)
expr_stmt|;
comment|// Test case 6: ozone sh bucket create /volume/bucket
comment|// Expectation: Failure.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"bucket"
block|,
literal|"create"
block|,
literal|"/volume/bucket"
block|}
expr_stmt|;
name|executeWithError
argument_list|(
name|ozoneShell
argument_list|,
name|args
argument_list|,
literal|"Service ID or host name must not be omitted"
argument_list|)
expr_stmt|;
comment|// Test case 7: ozone sh bucket create o3://om1/volume/bucket
comment|// Expectation: Success.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"bucket"
block|,
literal|"create"
block|,
literal|"o3://"
operator|+
name|omServiceId
operator|+
literal|"/volume/bucket"
block|}
expr_stmt|;
name|execute
argument_list|(
name|ozoneShell
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

