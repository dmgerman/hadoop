begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Class which tests the SCMNodeManagerInfo Bean.  */
end_comment

begin_class
DECL|class|TestSCMNodeManagerMXBean
specifier|public
class|class
name|TestSCMNodeManagerMXBean
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSCMMXBean
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|numOfDatanodes
specifier|private
specifier|static
name|int
name|numOfDatanodes
init|=
literal|3
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|scm
specifier|private
specifier|static
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|mbs
specifier|private
specifier|static
name|MBeanServer
name|mbs
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
literal|"60000ms"
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
name|numOfDatanodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|scm
operator|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
expr_stmt|;
name|mbs
operator|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDiskUsage ()
specifier|public
name|void
name|testDiskUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|bean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=SCMNodeManager,"
operator|+
literal|"name=SCMNodeManagerInfo"
argument_list|)
decl_stmt|;
name|TabularData
name|data
init|=
operator|(
name|TabularData
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|bean
argument_list|,
literal|"NodeInfo"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|datanodeInfo
init|=
name|scm
operator|.
name|getScmNodeManager
argument_list|()
operator|.
name|getNodeInfo
argument_list|()
decl_stmt|;
name|verifyEquals
argument_list|(
name|data
argument_list|,
name|datanodeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeCount ()
specifier|public
name|void
name|testNodeCount
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|bean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop:service=SCMNodeManager,"
operator|+
literal|"name=SCMNodeManagerInfo"
argument_list|)
decl_stmt|;
name|TabularData
name|data
init|=
operator|(
name|TabularData
operator|)
name|mbs
operator|.
name|getAttribute
argument_list|(
name|bean
argument_list|,
literal|"NodeCount"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nodeCount
init|=
name|scm
operator|.
name|getScmNodeManager
argument_list|()
operator|.
name|getNodeCount
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nodeCountLong
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeCount
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|nodeCountLong
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|new
name|Long
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyEquals
argument_list|(
name|data
argument_list|,
name|nodeCountLong
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyEquals (TabularData actualData, Map<String, Long> expectedData)
specifier|private
name|void
name|verifyEquals
parameter_list|(
name|TabularData
name|actualData
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|expectedData
parameter_list|)
block|{
if|if
condition|(
name|actualData
operator|==
literal|null
operator|||
name|expectedData
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Data should not be null."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|obj
range|:
name|actualData
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|CompositeData
argument_list|)
expr_stmt|;
name|CompositeData
name|cds
init|=
operator|(
name|CompositeData
operator|)
name|obj
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cds
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|cds
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|num
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedData
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedData
operator|.
name|remove
argument_list|(
name|key
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expectedData
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

