begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|OzoneManagerRatisServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|LifeCycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Tests OM related configurations.  */
end_comment

begin_class
DECL|class|TestOzoneManagerConfiguration
specifier|public
class|class
name|TestOzoneManagerConfiguration
block|{
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|omId
specifier|private
name|String
name|omId
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
decl_stmt|;
DECL|field|scmId
specifier|private
name|String
name|scmId
decl_stmt|;
DECL|field|om
specifier|private
name|OzoneManager
name|om
decl_stmt|;
DECL|field|omRatisServer
specifier|private
name|OzoneManagerRatisServer
name|omRatisServer
decl_stmt|;
DECL|field|LEADER_ELECTION_TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|LEADER_ELECTION_TIMEOUT
init|=
literal|500L
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|omId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|clusterId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scmId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|omId
argument_list|)
decl_stmt|;
name|Path
name|metaDirPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|,
literal|"om-meta"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|metaDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_LEADER_ELECTION_MINIMUM_TIMEOUT_DURATION_KEY
argument_list|,
name|LEADER_ELECTION_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|OMStorage
name|omStore
init|=
operator|new
name|OMStorage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|omStore
operator|.
name|setClusterId
argument_list|(
literal|"testClusterId"
argument_list|)
expr_stmt|;
name|omStore
operator|.
name|setScmId
argument_list|(
literal|"testScmId"
argument_list|)
expr_stmt|;
comment|// writes the version file properties
name|omStore
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startCluster ()
specifier|private
name|void
name|startCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
operator|.
name|setOmId
argument_list|(
name|omId
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test a single node OM service (default setting for MiniOzoneCluster).    * @throws Exception    */
annotation|@
name|Test
DECL|method|testSingleNodeOMservice ()
specifier|public
name|void
name|testSingleNodeOMservice
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Default settings of MiniOzoneCluster start a sinle node OM service.
name|startCluster
argument_list|()
expr_stmt|;
name|om
operator|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
expr_stmt|;
name|omRatisServer
operator|=
name|om
operator|.
name|getOmRatisServer
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LifeCycle
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|om
operator|.
name|getOmRatisServerState
argument_list|()
argument_list|)
expr_stmt|;
comment|// OM's Ratis server should have only 1 peer (itself) in its RaftGroup
name|Collection
argument_list|<
name|RaftPeer
argument_list|>
name|peers
init|=
name|omRatisServer
operator|.
name|getRaftGroup
argument_list|()
operator|.
name|getPeers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|peers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The RaftPeer id should match the configured omId
name|RaftPeer
name|raftPeer
init|=
name|peers
operator|.
name|toArray
argument_list|(
operator|new
name|RaftPeer
index|[
literal|1
index|]
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omId
argument_list|,
name|raftPeer
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test configurating an OM service with three OM nodes.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testThreeNodeOMservice ()
specifier|public
name|void
name|testThreeNodeOMservice
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set the configuration for 3 node OM service. Set one node's rpc
comment|// address to localhost. OM will parse all configurations and find the
comment|// nodeId representing the localhost
specifier|final
name|String
name|omServiceId
init|=
literal|"om-service-test1"
decl_stmt|;
specifier|final
name|String
name|omNode1Id
init|=
literal|"omNode1"
decl_stmt|;
specifier|final
name|String
name|omNode2Id
init|=
literal|"omNode2"
decl_stmt|;
specifier|final
name|String
name|omNode3Id
init|=
literal|"omNode3"
decl_stmt|;
name|String
name|omNodesKeyValue
init|=
name|omNode1Id
operator|+
literal|","
operator|+
name|omNode2Id
operator|+
literal|","
operator|+
name|omNode3Id
decl_stmt|;
name|String
name|omNodesKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_NODES_KEY
argument_list|,
name|omServiceId
argument_list|)
decl_stmt|;
name|String
name|omNode1RpcAddrKey
init|=
name|getOMAddrKeyWithSuffix
argument_list|(
name|omServiceId
argument_list|,
name|omNode1Id
argument_list|)
decl_stmt|;
name|String
name|omNode2RpcAddrKey
init|=
name|getOMAddrKeyWithSuffix
argument_list|(
name|omServiceId
argument_list|,
name|omNode2Id
argument_list|)
decl_stmt|;
name|String
name|omNode3RpcAddrKey
init|=
name|getOMAddrKeyWithSuffix
argument_list|(
name|omServiceId
argument_list|,
name|omNode3Id
argument_list|)
decl_stmt|;
name|String
name|omNode3RatisPortKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_PORT_KEY
argument_list|,
name|omServiceId
argument_list|,
name|omNode3Id
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_SERVICE_IDS_KEY
argument_list|,
name|omServiceId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|omNodesKey
argument_list|,
name|omNodesKeyValue
argument_list|)
expr_stmt|;
comment|// Set node2 to localhost and the other two nodes to dummy addresses
name|conf
operator|.
name|set
argument_list|(
name|omNode1RpcAddrKey
argument_list|,
literal|"123.0.0.123:9862"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|omNode2RpcAddrKey
argument_list|,
literal|"0.0.0.0:9862"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|omNode3RpcAddrKey
argument_list|,
literal|"124.0.0.124:9862"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|omNode3RatisPortKey
argument_list|,
literal|9898
argument_list|)
expr_stmt|;
name|startCluster
argument_list|()
expr_stmt|;
name|om
operator|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
expr_stmt|;
name|omRatisServer
operator|=
name|om
operator|.
name|getOmRatisServer
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LifeCycle
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|om
operator|.
name|getOmRatisServerState
argument_list|()
argument_list|)
expr_stmt|;
comment|// OM's Ratis server should have 3 peers in its RaftGroup
name|Collection
argument_list|<
name|RaftPeer
argument_list|>
name|peers
init|=
name|omRatisServer
operator|.
name|getRaftGroup
argument_list|()
operator|.
name|getPeers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|peers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ratis server RaftPeerId should match with omNode2 ID as node2 is the
comment|// localhost
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omNode2Id
argument_list|,
name|omRatisServer
operator|.
name|getRaftPeerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify peer details
for|for
control|(
name|RaftPeer
name|peer
range|:
name|peers
control|)
block|{
name|String
name|expectedPeerAddress
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|peer
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
condition|)
block|{
case|case
name|omNode1Id
case|:
comment|// Ratis port is not set for node1. So it should take the default port
name|expectedPeerAddress
operator|=
literal|"123.0.0.123:"
operator|+
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_PORT_DEFAULT
expr_stmt|;
break|break;
case|case
name|omNode2Id
case|:
name|expectedPeerAddress
operator|=
literal|"0.0.0.0:"
operator|+
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_PORT_DEFAULT
expr_stmt|;
break|break;
case|case
name|omNode3Id
case|:
comment|// Ratis port is not set for node3. So it should take the default port
name|expectedPeerAddress
operator|=
literal|"124.0.0.124:9898"
expr_stmt|;
break|break;
default|default :
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unrecognized RaftPeerId"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPeerAddress
argument_list|,
name|peer
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test a wrong configuration for OM HA. A configuration with none of the    * OM addresses matching the local address should throw an error.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testWrongConfiguration ()
specifier|public
name|void
name|testWrongConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|omServiceId
init|=
literal|"om-service-test1"
decl_stmt|;
name|String
name|omNode1Id
init|=
literal|"omNode1"
decl_stmt|;
name|String
name|omNode2Id
init|=
literal|"omNode2"
decl_stmt|;
name|String
name|omNode3Id
init|=
literal|"omNode3"
decl_stmt|;
name|String
name|omNodesKeyValue
init|=
name|omNode1Id
operator|+
literal|","
operator|+
name|omNode2Id
operator|+
literal|","
operator|+
name|omNode3Id
decl_stmt|;
name|String
name|omNodesKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_NODES_KEY
argument_list|,
name|omServiceId
argument_list|)
decl_stmt|;
name|String
name|omNode1RpcAddrKey
init|=
name|getOMAddrKeyWithSuffix
argument_list|(
name|omServiceId
argument_list|,
name|omNode1Id
argument_list|)
decl_stmt|;
name|String
name|omNode2RpcAddrKey
init|=
name|getOMAddrKeyWithSuffix
argument_list|(
name|omServiceId
argument_list|,
name|omNode2Id
argument_list|)
decl_stmt|;
name|String
name|omNode3RpcAddrKey
init|=
name|getOMAddrKeyWithSuffix
argument_list|(
name|omServiceId
argument_list|,
name|omNode3Id
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_SERVICE_IDS_KEY
argument_list|,
name|omServiceId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|omNodesKey
argument_list|,
name|omNodesKeyValue
argument_list|)
expr_stmt|;
comment|// Set node2 to localhost and the other two nodes to dummy addresses
name|conf
operator|.
name|set
argument_list|(
name|omNode1RpcAddrKey
argument_list|,
literal|"123.0.0.123:9862"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|omNode2RpcAddrKey
argument_list|,
literal|"125.0.0.2:9862"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|omNode3RpcAddrKey
argument_list|,
literal|"124.0.0.124:9862"
argument_list|)
expr_stmt|;
try|try
block|{
name|startCluster
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Wrong Configuration. OM initialization should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneIllegalArgumentException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"Configuration has no "
operator|+
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
operator|+
literal|" address that matches local "
operator|+
literal|"node's address."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test multiple OM service configuration.    */
annotation|@
name|Test
DECL|method|testMultipleOMServiceIds ()
specifier|public
name|void
name|testMultipleOMServiceIds
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up OZONE_OM_SERVICES_KEY with 2 service Ids.
name|String
name|om1ServiceId
init|=
literal|"om-service-test1"
decl_stmt|;
name|String
name|om2ServiceId
init|=
literal|"om-service-test2"
decl_stmt|;
name|String
name|omServices
init|=
name|om1ServiceId
operator|+
literal|","
operator|+
name|om2ServiceId
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_SERVICE_IDS_KEY
argument_list|,
name|omServices
argument_list|)
expr_stmt|;
name|String
name|omNode1Id
init|=
literal|"omNode1"
decl_stmt|;
name|String
name|omNode2Id
init|=
literal|"omNode2"
decl_stmt|;
name|String
name|omNode3Id
init|=
literal|"omNode3"
decl_stmt|;
name|String
name|omNodesKeyValue
init|=
name|omNode1Id
operator|+
literal|","
operator|+
name|omNode2Id
operator|+
literal|","
operator|+
name|omNode3Id
decl_stmt|;
comment|// Set the node Ids for the 2 services. The nodeIds need to be
comment|// distinch within one service. The ids can overlap between
comment|// different services.
name|String
name|om1NodesKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_NODES_KEY
argument_list|,
name|om1ServiceId
argument_list|)
decl_stmt|;
name|String
name|om2NodesKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_NODES_KEY
argument_list|,
name|om2ServiceId
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|om1NodesKey
argument_list|,
name|omNodesKeyValue
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|om2NodesKey
argument_list|,
name|omNodesKeyValue
argument_list|)
expr_stmt|;
comment|// Set the RPC addresses for all 6 OMs (3 for each service). Only one
comment|// node out of these must have the localhost address.
name|conf
operator|.
name|set
argument_list|(
name|getOMAddrKeyWithSuffix
argument_list|(
name|om1ServiceId
argument_list|,
name|omNode1Id
argument_list|)
argument_list|,
literal|"122.0.0.123:9862"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|getOMAddrKeyWithSuffix
argument_list|(
name|om1ServiceId
argument_list|,
name|omNode2Id
argument_list|)
argument_list|,
literal|"123.0.0.124:9862"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|getOMAddrKeyWithSuffix
argument_list|(
name|om1ServiceId
argument_list|,
name|omNode3Id
argument_list|)
argument_list|,
literal|"124.0.0.125:9862"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|getOMAddrKeyWithSuffix
argument_list|(
name|om2ServiceId
argument_list|,
name|omNode1Id
argument_list|)
argument_list|,
literal|"125.0.0.126:9862"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|getOMAddrKeyWithSuffix
argument_list|(
name|om2ServiceId
argument_list|,
name|omNode2Id
argument_list|)
argument_list|,
literal|"0.0.0.0:9862"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|getOMAddrKeyWithSuffix
argument_list|(
name|om2ServiceId
argument_list|,
name|omNode3Id
argument_list|)
argument_list|,
literal|"126.0.0.127:9862"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|()
expr_stmt|;
name|om
operator|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
expr_stmt|;
name|omRatisServer
operator|=
name|om
operator|.
name|getOmRatisServer
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LifeCycle
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|om
operator|.
name|getOmRatisServerState
argument_list|()
argument_list|)
expr_stmt|;
comment|// OM's Ratis server should have 3 peers in its RaftGroup
name|Collection
argument_list|<
name|RaftPeer
argument_list|>
name|peers
init|=
name|omRatisServer
operator|.
name|getRaftGroup
argument_list|()
operator|.
name|getPeers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|peers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the serviceId and nodeId match the node with the localhost
comment|// address - om-service-test2 and omNode2
name|Assert
operator|.
name|assertEquals
argument_list|(
name|om2ServiceId
argument_list|,
name|om
operator|.
name|getOMServiceId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omNode2Id
argument_list|,
name|omRatisServer
operator|.
name|getRaftPeerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getOMAddrKeyWithSuffix (String serviceId, String nodeId)
specifier|private
name|String
name|getOMAddrKeyWithSuffix
parameter_list|(
name|String
name|serviceId
parameter_list|,
name|String
name|nodeId
parameter_list|)
block|{
return|return
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

