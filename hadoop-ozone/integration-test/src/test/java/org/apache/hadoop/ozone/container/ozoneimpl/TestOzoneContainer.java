begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.ozoneimpl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientGrpc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|DatanodeStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|StateContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_DATANODE_DIR_KEY
import|;
end_import

begin_comment
comment|/**  * Tests ozone containers.  */
end_comment

begin_class
DECL|class|TestOzoneContainer
specifier|public
class|class
name|TestOzoneContainer
block|{
comment|/**    * Set the timeout for every test.    */
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|tempFolder
specifier|public
name|TemporaryFolder
name|tempFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testCreateOzoneContainer ()
specifier|public
name|void
name|testCreateOzoneContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerID
init|=
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
decl_stmt|;
name|OzoneConfiguration
name|conf
init|=
name|newOzoneConfiguration
argument_list|()
decl_stmt|;
name|OzoneContainer
name|container
init|=
literal|null
decl_stmt|;
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
comment|// We don't start Ozone Container via data node, we will do it
comment|// independently in our test path.
name|Pipeline
name|pipeline
init|=
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HDDS_DATANODE_DIR_KEY
argument_list|,
name|tempFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_IPC_PORT
argument_list|,
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|STANDALONE
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_IPC_RANDOM_PORT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DatanodeDetails
name|datanodeDetails
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|StateContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StateContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|DatanodeStateMachine
name|dsm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|DatanodeStateMachine
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dsm
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|datanodeDetails
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|context
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dsm
argument_list|)
expr_stmt|;
name|container
operator|=
operator|new
name|OzoneContainer
argument_list|(
name|datanodeDetails
argument_list|,
name|conf
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|//Setting scmId, as we start manually ozone container.
name|container
operator|.
name|getDispatcher
argument_list|()
operator|.
name|setScmId
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
name|XceiverClientGrpc
name|client
init|=
operator|new
name|XceiverClientGrpc
argument_list|(
name|pipeline
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|createContainerForTesting
argument_list|(
name|client
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|newOzoneConfiguration ()
specifier|static
name|OzoneConfiguration
name|newOzoneConfiguration
parameter_list|()
block|{
specifier|final
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
DECL|method|testOzoneContainerViaDataNode ()
specifier|public
name|void
name|testOzoneContainerViaDataNode
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|containerID
init|=
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
decl_stmt|;
name|OzoneConfiguration
name|conf
init|=
name|newOzoneConfiguration
argument_list|()
decl_stmt|;
comment|// Start ozone container Via Datanode create.
name|Pipeline
name|pipeline
init|=
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_IPC_PORT
argument_list|,
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|STANDALONE
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setRandomContainerPort
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
comment|// This client talks to ozone container via datanode.
name|XceiverClientGrpc
name|client
init|=
operator|new
name|XceiverClientGrpc
argument_list|(
name|pipeline
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|runTestOzoneContainerViaDataNode
argument_list|(
name|containerID
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|runTestOzoneContainerViaDataNode ( long testContainerID, XceiverClientSpi client)
specifier|static
name|void
name|runTestOzoneContainerViaDataNode
parameter_list|(
name|long
name|testContainerID
parameter_list|,
name|XceiverClientSpi
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|request
decl_stmt|,
name|writeChunkRequest
decl_stmt|,
name|putBlockRequest
decl_stmt|,
name|updateRequest1
decl_stmt|,
name|updateRequest2
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
decl_stmt|,
name|updateResponse1
decl_stmt|,
name|updateResponse2
decl_stmt|;
try|try
block|{
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|client
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|createContainerForTesting
argument_list|(
name|client
argument_list|,
name|testContainerID
argument_list|)
expr_stmt|;
name|writeChunkRequest
operator|=
name|writeChunkForContainer
argument_list|(
name|client
argument_list|,
name|testContainerID
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// Read Chunk
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getReadChunkRequest
argument_list|(
name|pipeline
argument_list|,
name|writeChunkRequest
operator|.
name|getWriteChunk
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Put Block
name|putBlockRequest
operator|=
name|ContainerTestHelper
operator|.
name|getPutBlockRequest
argument_list|(
name|pipeline
argument_list|,
name|writeChunkRequest
operator|.
name|getWriteChunk
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|putBlockRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|putBlockRequest
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get Block
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getBlockRequest
argument_list|(
name|pipeline
argument_list|,
name|putBlockRequest
operator|.
name|getPutBlock
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|int
name|chunksCount
init|=
name|putBlockRequest
operator|.
name|getPutBlock
argument_list|()
operator|.
name|getBlockData
argument_list|()
operator|.
name|getChunksCount
argument_list|()
decl_stmt|;
name|ContainerTestHelper
operator|.
name|verifyGetBlock
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chunksCount
argument_list|)
expr_stmt|;
comment|// Delete Block
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getDeleteBlockRequest
argument_list|(
name|pipeline
argument_list|,
name|putBlockRequest
operator|.
name|getPutBlock
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Delete Chunk
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getDeleteChunkRequest
argument_list|(
name|pipeline
argument_list|,
name|writeChunkRequest
operator|.
name|getWriteChunk
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Update an existing container
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|containerUpdate
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|containerUpdate
operator|.
name|put
argument_list|(
literal|"container_updated_key"
argument_list|,
literal|"container_updated_value"
argument_list|)
expr_stmt|;
name|updateRequest1
operator|=
name|ContainerTestHelper
operator|.
name|getUpdateContainerRequest
argument_list|(
name|testContainerID
argument_list|,
name|containerUpdate
argument_list|)
expr_stmt|;
name|updateResponse1
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|updateRequest1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|updateResponse1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
comment|//Update an non-existing container
name|long
name|nonExistingContinerID
init|=
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
decl_stmt|;
name|updateRequest2
operator|=
name|ContainerTestHelper
operator|.
name|getUpdateContainerRequest
argument_list|(
name|nonExistingContinerID
argument_list|,
name|containerUpdate
argument_list|)
expr_stmt|;
name|updateResponse2
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|updateRequest2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|CONTAINER_NOT_FOUND
argument_list|,
name|updateResponse2
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testBothGetandPutSmallFile ()
specifier|public
name|void
name|testBothGetandPutSmallFile
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|XceiverClientGrpc
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OzoneConfiguration
name|conf
init|=
name|newOzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|tempFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
name|createClientForTesting
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setRandomContainerPort
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|long
name|containerID
init|=
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
decl_stmt|;
name|runTestBothGetandPutSmallFile
argument_list|(
name|containerID
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|runTestBothGetandPutSmallFile ( long containerID, XceiverClientSpi client)
specifier|static
name|void
name|runTestBothGetandPutSmallFile
parameter_list|(
name|long
name|containerID
parameter_list|,
name|XceiverClientSpi
name|client
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|createContainerForTesting
argument_list|(
name|client
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|BlockID
name|blockId
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
specifier|final
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|smallFileRequest
init|=
name|ContainerTestHelper
operator|.
name|getWriteSmallFileRequest
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|blockId
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|client
operator|.
name|sendCommand
argument_list|(
name|smallFileRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|smallFileRequest
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|getSmallFileRequest
init|=
name|ContainerTestHelper
operator|.
name|getReadSmallFileRequest
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|smallFileRequest
operator|.
name|getPutSmallFile
argument_list|()
operator|.
name|getBlock
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|getSmallFileRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|smallFileRequest
operator|.
name|getPutSmallFile
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|response
operator|.
name|getGetSmallFile
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCloseContainer ()
specifier|public
name|void
name|testCloseContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|XceiverClientGrpc
name|client
init|=
literal|null
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|writeChunkRequest
decl_stmt|,
name|putBlockRequest
decl_stmt|,
name|request
decl_stmt|;
try|try
block|{
name|OzoneConfiguration
name|conf
init|=
name|newOzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|tempFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
name|createClientForTesting
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setRandomContainerPort
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|long
name|containerID
init|=
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
decl_stmt|;
name|createContainerForTesting
argument_list|(
name|client
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|writeChunkRequest
operator|=
name|writeChunkForContainer
argument_list|(
name|client
argument_list|,
name|containerID
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|putBlockRequest
operator|=
name|ContainerTestHelper
operator|.
name|getPutBlockRequest
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|writeChunkRequest
operator|.
name|getWriteChunk
argument_list|()
argument_list|)
expr_stmt|;
comment|// Put block before closing.
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|putBlockRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|putBlockRequest
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close the contianer.
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getCloseContainer
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that none of the write  operations are working after close.
comment|// Write chunks should fail now.
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|writeChunkRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|CLOSED_CONTAINER_IO
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|writeChunkRequest
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read chunk must work on a closed container.
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getReadChunkRequest
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|writeChunkRequest
operator|.
name|getWriteChunk
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Put block will fail on a closed container.
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|putBlockRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|CLOSED_CONTAINER_IO
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|putBlockRequest
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get block must work on the closed container.
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getBlockRequest
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|putBlockRequest
operator|.
name|getPutBlock
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|int
name|chunksCount
init|=
name|putBlockRequest
operator|.
name|getPutBlock
argument_list|()
operator|.
name|getBlockData
argument_list|()
operator|.
name|getChunksCount
argument_list|()
decl_stmt|;
name|ContainerTestHelper
operator|.
name|verifyGetBlock
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|chunksCount
argument_list|)
expr_stmt|;
comment|// Delete block must fail on a closed container.
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getDeleteBlockRequest
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|putBlockRequest
operator|.
name|getPutBlock
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|CLOSED_CONTAINER_IO
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteContainer ()
specifier|public
name|void
name|testDeleteContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|XceiverClientGrpc
name|client
init|=
literal|null
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|request
decl_stmt|,
name|writeChunkRequest
decl_stmt|,
name|putBlockRequest
decl_stmt|;
try|try
block|{
name|OzoneConfiguration
name|conf
init|=
name|newOzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|tempFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
name|createClientForTesting
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setRandomContainerPort
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|long
name|containerID
init|=
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
decl_stmt|;
name|createContainerForTesting
argument_list|(
name|client
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|writeChunkRequest
operator|=
name|writeChunkForContainer
argument_list|(
name|client
argument_list|,
name|containerID
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|putBlockRequest
operator|=
name|ContainerTestHelper
operator|.
name|getPutBlockRequest
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|writeChunkRequest
operator|.
name|getWriteChunk
argument_list|()
argument_list|)
expr_stmt|;
comment|// Put key before deleting.
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|putBlockRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|putBlockRequest
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Container cannot be deleted forcibly because
comment|// the container is not closed.
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getDeleteContainer
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|containerID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|DELETE_ON_OPEN_CONTAINER
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close the container.
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getCloseContainer
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Container cannot be deleted because the container is not empty.
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getDeleteContainer
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|containerID
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|ERROR_CONTAINER_NOT_EMPTY
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Container can be deleted forcibly because
comment|// it is closed and non-empty.
name|request
operator|=
name|ContainerTestHelper
operator|.
name|getDeleteContainer
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|containerID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Runs a set of commands as Async calls and verifies that calls indeed worked
comment|// as expected.
DECL|method|runAsyncTests ( long containerID, XceiverClientSpi client)
specifier|static
name|void
name|runAsyncTests
parameter_list|(
name|long
name|containerID
parameter_list|,
name|XceiverClientSpi
name|client
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|createContainerForTesting
argument_list|(
name|client
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CompletableFuture
argument_list|>
name|computeResults
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|requestCount
init|=
literal|1000
decl_stmt|;
comment|// Create a bunch of Async calls from this test.
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|requestCount
condition|;
name|x
operator|++
control|)
block|{
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
specifier|final
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|smallFileRequest
init|=
name|ContainerTestHelper
operator|.
name|getWriteSmallFileRequest
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|blockID
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
argument_list|>
name|response
init|=
name|client
operator|.
name|sendCommandAsync
argument_list|(
name|smallFileRequest
argument_list|)
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|computeResults
operator|.
name|add
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|combinedFuture
init|=
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|computeResults
operator|.
name|toArray
argument_list|(
operator|new
name|CompletableFuture
index|[
name|computeResults
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wait for all futures to complete.
name|combinedFuture
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Assert that all futures are indeed done.
for|for
control|(
name|CompletableFuture
name|future
range|:
name|computeResults
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testXcieverClientAsync ()
specifier|public
name|void
name|testXcieverClientAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|XceiverClientGrpc
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OzoneConfiguration
name|conf
init|=
name|newOzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|tempFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
name|createClientForTesting
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setRandomContainerPort
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|long
name|containerID
init|=
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
decl_stmt|;
name|runAsyncTests
argument_list|(
name|containerID
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createClientForTesting ( OzoneConfiguration conf)
specifier|private
specifier|static
name|XceiverClientGrpc
name|createClientForTesting
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Start ozone container Via Datanode create.
name|Pipeline
name|pipeline
init|=
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_IPC_PORT
argument_list|,
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|STANDALONE
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// This client talks to ozone container via datanode.
return|return
operator|new
name|XceiverClientGrpc
argument_list|(
name|pipeline
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|createContainerForTesting (XceiverClientSpi client, long containerID)
specifier|public
specifier|static
name|void
name|createContainerForTesting
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|long
name|containerID
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create container
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|request
init|=
name|ContainerTestHelper
operator|.
name|getCreateContainerRequest
argument_list|(
name|containerID
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|client
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
DECL|method|writeChunkForContainer (XceiverClientSpi client, long containerID, int dataLen)
name|writeChunkForContainer
parameter_list|(
name|XceiverClientSpi
name|client
parameter_list|,
name|long
name|containerID
parameter_list|,
name|int
name|dataLen
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Write Chunk
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|writeChunkRequest
init|=
name|ContainerTestHelper
operator|.
name|getWriteChunkRequest
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|blockID
argument_list|,
name|dataLen
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|client
operator|.
name|sendCommand
argument_list|(
name|writeChunkRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|writeChunkRequest
return|;
block|}
DECL|method|runRequestWithoutTraceId ( long containerID, XceiverClientSpi client)
specifier|static
name|void
name|runRequestWithoutTraceId
parameter_list|(
name|long
name|containerID
parameter_list|,
name|XceiverClientSpi
name|client
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|createContainerForTesting
argument_list|(
name|client
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
specifier|final
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|smallFileRequest
init|=
name|ContainerTestHelper
operator|.
name|getWriteSmallFileRequest
argument_list|(
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|blockID
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
name|response
init|=
name|client
operator|.
name|sendCommand
argument_list|(
name|smallFileRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|smallFileRequest
operator|.
name|getTraceID
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

