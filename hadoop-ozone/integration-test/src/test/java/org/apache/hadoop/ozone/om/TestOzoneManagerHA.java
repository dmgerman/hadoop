begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|LogVerificationAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneHAClusterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|BucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ha
operator|.
name|OMFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadCompleteInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|VolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneHAClusterImpl
operator|.
name|NODE_FAILURE_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ACL_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_FAILOVER_MAX_ATTEMPTS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_FAILOVER_SLEEP_BASE_MILLIS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_RETRY_MAX_ATTEMPTS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS
import|;
end_import

begin_comment
comment|/**  * Test Ozone Manager operation in distributed handler scenario.  */
end_comment

begin_class
DECL|class|TestOzoneManagerHA
specifier|public
class|class
name|TestOzoneManagerHA
block|{
DECL|field|cluster
specifier|private
name|MiniOzoneHAClusterImpl
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|objectStore
specifier|private
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
decl_stmt|;
DECL|field|scmId
specifier|private
name|String
name|scmId
decl_stmt|;
DECL|field|numOfOMs
specifier|private
name|int
name|numOfOMs
init|=
literal|3
decl_stmt|;
DECL|field|SNAPSHOT_THRESHOLD
specifier|private
specifier|static
specifier|final
name|long
name|SNAPSHOT_THRESHOLD
init|=
literal|50
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300_000
argument_list|)
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true    *    * @throws IOException    */
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|clusterId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scmId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_ACL_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_CLIENT_RETRY_MAX_ATTEMPTS_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_CLIENT_FAILOVER_MAX_ATTEMPTS_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY
argument_list|,
name|SNAPSHOT_THRESHOLD
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|(
name|MiniOzoneHAClusterImpl
operator|)
name|MiniOzoneCluster
operator|.
name|newHABuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
operator|.
name|setOMServiceId
argument_list|(
literal|"om-service-test1"
argument_list|)
operator|.
name|setNumOfOzoneManagers
argument_list|(
name|numOfOMs
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|objectStore
operator|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createAndCheckVolume (String volumeName)
specifier|private
name|OzoneVolume
name|createAndCheckVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
name|VolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOwner
argument_list|(
name|userName
argument_list|)
operator|.
name|setAdmin
argument_list|(
name|adminName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|OzoneVolume
name|retVolume
init|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolume
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolume
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolume
operator|.
name|getAdmin
argument_list|()
operator|.
name|equals
argument_list|(
name|adminName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retVolume
return|;
block|}
annotation|@
name|Test
DECL|method|testAllVolumeOperations ()
specifier|public
name|void
name|testAllVolumeOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|createAndCheckVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|deleteVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneTestUtils
operator|.
name|expectOmException
argument_list|(
name|OMException
operator|.
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|,
parameter_list|()
lambda|->
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneTestUtils
operator|.
name|expectOmException
argument_list|(
name|OMException
operator|.
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|,
parameter_list|()
lambda|->
name|objectStore
operator|.
name|deleteVolume
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllBucketOperations ()
specifier|public
name|void
name|testAllBucketOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneVolume
name|retVolume
init|=
name|createAndCheckVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|BucketArgs
name|bucketArgs
init|=
name|BucketArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
operator|.
name|setVersioning
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|retVolume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|,
name|bucketArgs
argument_list|)
expr_stmt|;
name|OzoneBucket
name|ozoneBucket
init|=
name|retVolume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|ozoneBucket
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketName
argument_list|,
name|ozoneBucket
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ozoneBucket
operator|.
name|getVersioning
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|,
name|ozoneBucket
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ozoneBucket
operator|.
name|getCreationTime
argument_list|()
operator|<=
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change versioning to false
name|ozoneBucket
operator|.
name|setVersioning
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ozoneBucket
operator|=
name|retVolume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ozoneBucket
operator|.
name|getVersioning
argument_list|()
argument_list|)
expr_stmt|;
name|retVolume
operator|.
name|deleteBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneTestUtils
operator|.
name|expectOmException
argument_list|(
name|OMException
operator|.
name|ResultCodes
operator|.
name|BUCKET_NOT_FOUND
argument_list|,
parameter_list|()
lambda|->
name|retVolume
operator|.
name|deleteBucket
argument_list|(
name|bucketName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a client request when all OM nodes are running. The request should    * succeed.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testAllOMNodesRunning ()
specifier|public
name|void
name|testAllOMNodesRunning
parameter_list|()
throws|throws
name|Exception
block|{
name|createVolumeTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createKeyTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test client request succeeds even if one OM is down.    */
annotation|@
name|Test
DECL|method|testOneOMNodeDown ()
specifier|public
name|void
name|testOneOMNodeDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|stopOzoneManager
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|NODE_FAILURE_TIMEOUT
operator|*
literal|2
argument_list|)
expr_stmt|;
name|createVolumeTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createKeyTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test client request fails when 2 OMs are down.    */
annotation|@
name|Test
DECL|method|testTwoOMNodesDown ()
specifier|public
name|void
name|testTwoOMNodesDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|stopOzoneManager
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|stopOzoneManager
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|NODE_FAILURE_TIMEOUT
operator|*
literal|2
argument_list|)
expr_stmt|;
name|createVolumeTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createKeyTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|setupBucket ()
specifier|private
name|OzoneBucket
name|setupBucket
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
name|VolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOwner
argument_list|(
name|userName
argument_list|)
operator|.
name|setAdmin
argument_list|(
name|adminName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|OzoneVolume
name|retVolumeinfo
init|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getAdmin
argument_list|()
operator|.
name|equals
argument_list|(
name|adminName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|retVolumeinfo
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|ozoneBucket
init|=
name|retVolumeinfo
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ozoneBucket
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|bucketName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ozoneBucket
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ozoneBucket
return|;
block|}
annotation|@
name|Test
DECL|method|testMultipartUpload ()
specifier|public
name|void
name|testMultipartUpload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Happy scenario when all OM's are up.
name|OzoneBucket
name|ozoneBucket
init|=
name|setupBucket
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|uploadID
init|=
name|initiateMultipartUpload
argument_list|(
name|ozoneBucket
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|createMultipartKeyAndReadKey
argument_list|(
name|ozoneBucket
argument_list|,
name|keyName
argument_list|,
name|uploadID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipartUploadWithOneOmNodeDown ()
specifier|public
name|void
name|testMultipartUploadWithOneOmNodeDown
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneBucket
name|ozoneBucket
init|=
name|setupBucket
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|uploadID
init|=
name|initiateMultipartUpload
argument_list|(
name|ozoneBucket
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
comment|// After initiate multipartupload, shutdown leader OM.
comment|// Stop leader OM, to see when the OM leader changes
comment|// multipart upload is happening successfully or not.
name|OMFailoverProxyProvider
name|omFailoverProxyProvider
init|=
name|objectStore
operator|.
name|getClientProxy
argument_list|()
operator|.
name|getOMProxyProvider
argument_list|()
decl_stmt|;
comment|// The OMFailoverProxyProvider will point to the current leader OM node.
name|String
name|leaderOMNodeId
init|=
name|omFailoverProxyProvider
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
decl_stmt|;
comment|// Stop one of the ozone manager, to see when the OM leader changes
comment|// multipart upload is happening successfully or not.
name|cluster
operator|.
name|stopOzoneManager
argument_list|(
name|leaderOMNodeId
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|NODE_FAILURE_TIMEOUT
operator|*
literal|2
argument_list|)
expr_stmt|;
name|createMultipartKeyAndReadKey
argument_list|(
name|ozoneBucket
argument_list|,
name|keyName
argument_list|,
name|uploadID
argument_list|)
expr_stmt|;
name|String
name|newLeaderOMNodeId
init|=
name|omFailoverProxyProvider
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|leaderOMNodeId
operator|!=
name|newLeaderOMNodeId
argument_list|)
expr_stmt|;
block|}
DECL|method|initiateMultipartUpload (OzoneBucket ozoneBucket, String keyName)
specifier|private
name|String
name|initiateMultipartUpload
parameter_list|(
name|OzoneBucket
name|ozoneBucket
parameter_list|,
name|String
name|keyName
parameter_list|)
throws|throws
name|Exception
block|{
name|OmMultipartInfo
name|omMultipartInfo
init|=
name|ozoneBucket
operator|.
name|initiateMultipartUpload
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|String
name|uploadID
init|=
name|omMultipartInfo
operator|.
name|getUploadID
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|uploadID
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|uploadID
return|;
block|}
DECL|method|createMultipartKeyAndReadKey (OzoneBucket ozoneBucket, String keyName, String uploadID)
specifier|private
name|void
name|createMultipartKeyAndReadKey
parameter_list|(
name|OzoneBucket
name|ozoneBucket
parameter_list|,
name|String
name|keyName
parameter_list|,
name|String
name|uploadID
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|value
init|=
literal|"random data"
decl_stmt|;
name|OzoneOutputStream
name|ozoneOutputStream
init|=
name|ozoneBucket
operator|.
name|createMultipartKey
argument_list|(
name|keyName
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|,
name|uploadID
argument_list|)
decl_stmt|;
name|ozoneOutputStream
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ozoneOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|partsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|partsMap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
name|ozoneOutputStream
operator|.
name|getCommitUploadPartInfo
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
name|OmMultipartUploadCompleteInfo
name|omMultipartUploadCompleteInfo
init|=
name|ozoneBucket
operator|.
name|completeMultipartUpload
argument_list|(
name|keyName
argument_list|,
name|uploadID
argument_list|,
name|partsMap
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMultipartUploadCompleteInfo
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMultipartUploadCompleteInfo
operator|.
name|getHash
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|OzoneInputStream
name|ozoneInputStream
init|=
name|ozoneBucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileContent
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|ozoneInputStream
operator|.
name|read
argument_list|(
name|fileContent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|new
name|String
argument_list|(
name|fileContent
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createKeyTest (boolean checkSuccess)
specifier|private
name|void
name|createKeyTest
parameter_list|(
name|boolean
name|checkSuccess
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
name|VolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOwner
argument_list|(
name|userName
argument_list|)
operator|.
name|setAdmin
argument_list|(
name|adminName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|OzoneVolume
name|retVolumeinfo
init|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getAdmin
argument_list|()
operator|.
name|equals
argument_list|(
name|adminName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|retVolumeinfo
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|ozoneBucket
init|=
name|retVolumeinfo
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ozoneBucket
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|bucketName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ozoneBucket
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|value
init|=
literal|"random data"
decl_stmt|;
name|OzoneOutputStream
name|ozoneOutputStream
init|=
name|ozoneBucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ozoneOutputStream
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ozoneOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|OzoneInputStream
name|ozoneInputStream
init|=
name|ozoneBucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileContent
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|ozoneInputStream
operator|.
name|read
argument_list|(
name|fileContent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
operator|new
name|String
argument_list|(
name|fileContent
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectException
decl||
name|RemoteException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkSuccess
condition|)
block|{
comment|// If the last OM to be tried by the RetryProxy is down, we would get
comment|// ConnectException. Otherwise, we would get a RemoteException from the
comment|// last running OM as it would fail to get a quorum.
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"NotLeaderException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**    * Create a volume and test its attribute.    */
DECL|method|createVolumeTest (boolean checkSuccess)
specifier|private
name|void
name|createVolumeTest
parameter_list|(
name|boolean
name|checkSuccess
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
name|VolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOwner
argument_list|(
name|userName
argument_list|)
operator|.
name|setAdmin
argument_list|(
name|adminName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|OzoneVolume
name|retVolumeinfo
init|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkSuccess
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|volumeName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|retVolumeinfo
operator|.
name|getAdmin
argument_list|()
operator|.
name|equals
argument_list|(
name|adminName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Verify that the request failed
name|Assert
operator|.
name|fail
argument_list|(
literal|"There is no quorum. Request should have failed"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ConnectException
decl||
name|RemoteException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkSuccess
condition|)
block|{
comment|// If the last OM to be tried by the RetryProxy is down, we would get
comment|// ConnectException. Otherwise, we would get a RemoteException from the
comment|// last running OM as it would fail to get a quorum.
if|if
condition|(
name|e
operator|instanceof
name|RemoteException
condition|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"NotLeaderException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**    * Test that OMFailoverProxyProvider creates an OM proxy for each OM in the    * cluster.    */
annotation|@
name|Test
DECL|method|testOMProxyProviderInitialization ()
specifier|public
name|void
name|testOMProxyProviderInitialization
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneClient
name|rpcClient
init|=
name|cluster
operator|.
name|getRpcClient
argument_list|()
decl_stmt|;
name|OMFailoverProxyProvider
name|omFailoverProxyProvider
init|=
name|rpcClient
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getClientProxy
argument_list|()
operator|.
name|getOMProxyProvider
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OMFailoverProxyProvider
operator|.
name|OMProxyInfo
argument_list|>
name|omProxies
init|=
name|omFailoverProxyProvider
operator|.
name|getOMProxies
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numOfOMs
argument_list|,
name|omProxies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfOMs
condition|;
name|i
operator|++
control|)
block|{
name|InetSocketAddress
name|omRpcServerAddr
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|(
name|i
argument_list|)
operator|.
name|getOmRpcServerAddr
argument_list|()
decl_stmt|;
name|boolean
name|omClientProxyExists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|OMFailoverProxyProvider
operator|.
name|OMProxyInfo
name|omProxyInfo
range|:
name|omProxies
control|)
block|{
if|if
condition|(
name|omProxyInfo
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|omRpcServerAddr
argument_list|)
condition|)
block|{
name|omClientProxyExists
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"There is no OM Client Proxy corresponding to OM "
operator|+
literal|"node"
operator|+
name|cluster
operator|.
name|getOzoneManager
argument_list|(
name|i
argument_list|)
operator|.
name|getOMNodId
argument_list|()
argument_list|,
name|omClientProxyExists
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test OMFailoverProxyProvider failover on connection exception to OM client.    */
annotation|@
name|Test
DECL|method|testOMProxyProviderFailoverOnConnectionFailure ()
specifier|public
name|void
name|testOMProxyProviderFailoverOnConnectionFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|OMFailoverProxyProvider
name|omFailoverProxyProvider
init|=
name|objectStore
operator|.
name|getClientProxy
argument_list|()
operator|.
name|getOMProxyProvider
argument_list|()
decl_stmt|;
name|String
name|firstProxyNodeId
init|=
name|omFailoverProxyProvider
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
decl_stmt|;
name|createVolumeTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// On stopping the current OM Proxy, the next connection attempt should
comment|// failover to a another OM proxy.
name|cluster
operator|.
name|stopOzoneManager
argument_list|(
name|firstProxyNodeId
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|OZONE_CLIENT_FAILOVER_SLEEP_BASE_MILLIS_DEFAULT
operator|*
literal|4
argument_list|)
expr_stmt|;
comment|// Next request to the proxy provider should result in a failover
name|createVolumeTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|OZONE_CLIENT_FAILOVER_SLEEP_BASE_MILLIS_DEFAULT
argument_list|)
expr_stmt|;
comment|// Get the new OM Proxy NodeId
name|String
name|newProxyNodeId
init|=
name|omFailoverProxyProvider
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
decl_stmt|;
comment|// Verify that a failover occured. the new proxy nodeId should be
comment|// different from the old proxy nodeId.
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Failover did not occur as expected"
argument_list|,
name|firstProxyNodeId
argument_list|,
name|newProxyNodeId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test OMFailoverProxyProvider failover when current OM proxy is not    * the current OM Leader.    */
annotation|@
name|Test
DECL|method|testOMProxyProviderFailoverToCurrentLeader ()
specifier|public
name|void
name|testOMProxyProviderFailoverToCurrentLeader
parameter_list|()
throws|throws
name|Exception
block|{
name|OMFailoverProxyProvider
name|omFailoverProxyProvider
init|=
name|objectStore
operator|.
name|getClientProxy
argument_list|()
operator|.
name|getOMProxyProvider
argument_list|()
decl_stmt|;
comment|// Run couple of createVolume tests to discover the current Leader OM
name|createVolumeTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createVolumeTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// The OMFailoverProxyProvider will point to the current leader OM node.
name|String
name|leaderOMNodeId
init|=
name|omFailoverProxyProvider
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
decl_stmt|;
comment|// Perform a manual failover of the proxy provider to move the
comment|// currentProxyIndex to a node other than the leader OM.
name|omFailoverProxyProvider
operator|.
name|performFailover
argument_list|(
name|omFailoverProxyProvider
operator|.
name|getProxy
argument_list|()
operator|.
name|proxy
argument_list|)
expr_stmt|;
name|String
name|newProxyNodeId
init|=
name|omFailoverProxyProvider
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|leaderOMNodeId
argument_list|,
name|newProxyNodeId
argument_list|)
expr_stmt|;
comment|// Once another request is sent to this new proxy node, the leader
comment|// information must be returned via the response and a failover must
comment|// happen to the leader proxy node.
name|createVolumeTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|String
name|newLeaderOMNodeId
init|=
name|omFailoverProxyProvider
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
decl_stmt|;
comment|// The old and new Leader OM NodeId must match since there was no new
comment|// election in the Ratis ring.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|leaderOMNodeId
argument_list|,
name|newLeaderOMNodeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOMRetryProxy ()
specifier|public
name|void
name|testOMRetryProxy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Stop all the OMs. After making 5 (set maxRetries value) attempts at
comment|// connection, the RpcClient should give up.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfOMs
condition|;
name|i
operator|++
control|)
block|{
name|cluster
operator|.
name|stopOzoneManager
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|LogVerificationAppender
name|appender
init|=
operator|new
name|LogVerificationAppender
argument_list|()
decl_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|logger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
try|try
block|{
name|createVolumeTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestOMRetryProxy should fail when there are no OMs running"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectException
name|e
parameter_list|)
block|{
comment|// Each retry attempt tries upto 10 times to connect. So there should be
comment|// 10*10 "Retrying connect to server" messages
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|appender
operator|.
name|countLinesWithMessage
argument_list|(
literal|"Retrying connect to server:"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appender
operator|.
name|countLinesWithMessage
argument_list|(
literal|"Failed to connect to OM. Attempted "
operator|+
literal|"10 retries and 10 failovers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReadRequest ()
specifier|public
name|void
name|testReadRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OMFailoverProxyProvider
name|omFailoverProxyProvider
init|=
name|objectStore
operator|.
name|getClientProxy
argument_list|()
operator|.
name|getOMProxyProvider
argument_list|()
decl_stmt|;
name|String
name|currentLeaderNodeId
init|=
name|omFailoverProxyProvider
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
decl_stmt|;
comment|// A read request from any proxy should failover to the current leader OM
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfOMs
condition|;
name|i
operator|++
control|)
block|{
comment|// Failover OMFailoverProxyProvider to OM at index i
name|OzoneManager
name|ozoneManager
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|omHostName
init|=
name|ozoneManager
operator|.
name|getOmRpcServerAddr
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|int
name|rpcPort
init|=
name|ozoneManager
operator|.
name|getOmRpcServerAddr
argument_list|()
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// Get the ObjectStore and FailoverProxyProvider for OM at index i
specifier|final
name|ObjectStore
name|store
init|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|omHostName
argument_list|,
name|rpcPort
argument_list|,
name|conf
argument_list|)
operator|.
name|getObjectStore
argument_list|()
decl_stmt|;
specifier|final
name|OMFailoverProxyProvider
name|proxyProvider
init|=
name|store
operator|.
name|getClientProxy
argument_list|()
operator|.
name|getOMProxyProvider
argument_list|()
decl_stmt|;
comment|// Failover to the OM node that the objectStore points to
name|omFailoverProxyProvider
operator|.
name|performFailoverIfRequired
argument_list|(
name|ozoneManager
operator|.
name|getOMNodId
argument_list|()
argument_list|)
expr_stmt|;
comment|// A read request should result in the proxyProvider failing over to
comment|// leader node.
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|volume
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|currentLeaderNodeId
argument_list|,
name|proxyProvider
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOMRatisSnapshot ()
specifier|public
name|void
name|testOMRatisSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|VolumeArgs
name|createVolumeArgs
init|=
name|VolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOwner
argument_list|(
name|userName
argument_list|)
operator|.
name|setAdmin
argument_list|(
name|adminName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|createVolumeArgs
argument_list|)
expr_stmt|;
name|OzoneVolume
name|retVolumeinfo
init|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|retVolumeinfo
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|ozoneBucket
init|=
name|retVolumeinfo
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|String
name|leaderOMNodeId
init|=
name|objectStore
operator|.
name|getClientProxy
argument_list|()
operator|.
name|getOMProxyProvider
argument_list|()
operator|.
name|getCurrentProxyOMNodeId
argument_list|()
decl_stmt|;
name|OzoneManager
name|ozoneManager
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|(
name|leaderOMNodeId
argument_list|)
decl_stmt|;
comment|// Send commands to ratis to increase the log index so that ratis
comment|// triggers a snapshot on the state machine.
name|long
name|appliedLogIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|appliedLogIndex
operator|<=
name|SNAPSHOT_THRESHOLD
condition|)
block|{
name|createKey
argument_list|(
name|ozoneBucket
argument_list|)
expr_stmt|;
name|appliedLogIndex
operator|=
name|ozoneManager
operator|.
name|getOmRatisServer
argument_list|()
operator|.
name|getStateMachineLastAppliedIndex
argument_list|()
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|ozoneManager
operator|.
name|loadRatisSnapshotIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
argument_list|,
literal|1000
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
comment|// The current lastAppliedLogIndex on the state machine should be greater
comment|// than or equal to the saved snapshot index.
name|long
name|smLastAppliedIndex
init|=
name|ozoneManager
operator|.
name|getOmRatisServer
argument_list|()
operator|.
name|getStateMachineLastAppliedIndex
argument_list|()
decl_stmt|;
name|long
name|ratisSnapshotIndex
init|=
name|ozoneManager
operator|.
name|loadRatisSnapshotIndex
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"LastAppliedIndex on OM State Machine ("
operator|+
name|smLastAppliedIndex
operator|+
literal|") is less than the saved snapshot index("
operator|+
name|ratisSnapshotIndex
operator|+
literal|")."
argument_list|,
name|smLastAppliedIndex
operator|>=
name|ratisSnapshotIndex
argument_list|)
expr_stmt|;
comment|// Add more transactions to Ratis to trigger another snapshot
while|while
condition|(
name|appliedLogIndex
operator|<=
operator|(
name|smLastAppliedIndex
operator|+
name|SNAPSHOT_THRESHOLD
operator|)
condition|)
block|{
name|createKey
argument_list|(
name|ozoneBucket
argument_list|)
expr_stmt|;
name|appliedLogIndex
operator|=
name|ozoneManager
operator|.
name|getOmRatisServer
argument_list|()
operator|.
name|getStateMachineLastAppliedIndex
argument_list|()
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|ozoneManager
operator|.
name|loadRatisSnapshotIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
argument_list|,
literal|1000
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
comment|// The new snapshot index must be greater than the previous snapshot index
name|long
name|ratisSnapshotIndexNew
init|=
name|ozoneManager
operator|.
name|loadRatisSnapshotIndex
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Latest snapshot index must be greater than previous "
operator|+
literal|"snapshot indices"
argument_list|,
name|ratisSnapshotIndexNew
operator|>
name|ratisSnapshotIndex
argument_list|)
expr_stmt|;
block|}
DECL|method|createKey (OzoneBucket ozoneBucket)
specifier|private
name|void
name|createKey
parameter_list|(
name|OzoneBucket
name|ozoneBucket
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|keyName
init|=
literal|"key"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|data
init|=
literal|"data"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneOutputStream
name|ozoneOutputStream
init|=
name|ozoneBucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|ozoneOutputStream
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ozoneOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

