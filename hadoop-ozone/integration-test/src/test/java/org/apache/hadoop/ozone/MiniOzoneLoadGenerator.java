begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A Simple Load generator for testing.  */
end_comment

begin_class
DECL|class|MiniOzoneLoadGenerator
specifier|public
class|class
name|MiniOzoneLoadGenerator
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MiniOzoneLoadGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|writeExecutor
specifier|private
name|ThreadPoolExecutor
name|writeExecutor
decl_stmt|;
DECL|field|numWriteThreads
specifier|private
name|int
name|numWriteThreads
decl_stmt|;
comment|// number of buffer to be allocated, each is allocated with length which
comment|// is multiple of 2, each buffer is populated with random data.
DECL|field|numBuffers
specifier|private
name|int
name|numBuffers
decl_stmt|;
DECL|field|buffers
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|buffers
decl_stmt|;
DECL|field|isWriteThreadRunning
specifier|private
name|AtomicBoolean
name|isWriteThreadRunning
decl_stmt|;
DECL|field|ozoneBucket
specifier|private
specifier|final
name|OzoneBucket
name|ozoneBucket
decl_stmt|;
DECL|method|MiniOzoneLoadGenerator (OzoneBucket bucket, int numThreads, int numBuffers)
name|MiniOzoneLoadGenerator
parameter_list|(
name|OzoneBucket
name|bucket
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|numBuffers
parameter_list|)
block|{
name|this
operator|.
name|ozoneBucket
operator|=
name|bucket
expr_stmt|;
name|this
operator|.
name|numWriteThreads
operator|=
name|numThreads
expr_stmt|;
name|this
operator|.
name|numBuffers
operator|=
name|numBuffers
expr_stmt|;
name|this
operator|.
name|writeExecutor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|numThreads
argument_list|,
name|numThreads
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
literal|1024
argument_list|)
argument_list|,
operator|new
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeExecutor
operator|.
name|prestartAllCoreThreads
argument_list|()
expr_stmt|;
name|this
operator|.
name|isWriteThreadRunning
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// allocate buffers and populate random data.
name|buffers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBuffers
condition|;
name|i
operator|++
control|)
block|{
name|int
name|size
init|=
operator|(
name|int
operator|)
name|StorageUnit
operator|.
name|KB
operator|.
name|toBytes
argument_list|(
literal|1
operator|<<
name|i
argument_list|)
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|RandomUtils
operator|.
name|nextBytes
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|buffers
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Start IO load on an Ozone bucket.
DECL|method|load (long runTimeMillis)
specifier|private
name|void
name|load
parameter_list|(
name|long
name|runTimeMillis
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Started IO Thread"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|threadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
while|while
condition|(
name|isWriteThreadRunning
operator|.
name|get
argument_list|()
operator|&&
operator|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|<
name|startTime
operator|+
name|runTimeMillis
operator|)
condition|)
block|{
comment|// choose a random buffer.
name|int
name|index
init|=
name|RandomUtils
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|buffers
operator|.
name|get
argument_list|(
name|index
operator|%
name|numBuffers
argument_list|)
decl_stmt|;
name|int
name|bufferCapacity
init|=
name|buffer
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|threadName
operator|+
literal|"-"
operator|+
name|index
decl_stmt|;
try|try
init|(
name|OzoneOutputStream
name|stream
init|=
name|ozoneBucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|bufferCapacity
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"LOADGEN: Create key:{} failed with exception"
argument_list|,
name|keyName
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
try|try
init|(
name|OzoneInputStream
name|stream
init|=
name|ozoneBucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
init|)
block|{
name|byte
index|[]
name|readBuffer
init|=
operator|new
name|byte
index|[
name|bufferCapacity
index|]
decl_stmt|;
name|int
name|readLen
init|=
name|stream
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|readLen
operator|<
name|bufferCapacity
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"LOADGEN: Read mismatch, key:{} read data length:{} is "
operator|+
literal|"smaller than excepted:{}"
argument_list|,
name|keyName
argument_list|,
name|readLen
argument_list|,
name|bufferCapacity
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|readBuffer
argument_list|,
name|buffer
operator|.
name|array
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"LOADGEN: Read mismatch, key:{} Read data does not match "
operator|+
literal|"the written data"
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Read key:{} failed with exception"
argument_list|,
name|keyName
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// This will terminate other threads too.
name|isWriteThreadRunning
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|startIO (long time, TimeUnit timeUnit)
specifier|public
name|void
name|startIO
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|List
argument_list|<
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|writeFutures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isWriteThreadRunning
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// Start the IO thread
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numWriteThreads
condition|;
name|i
operator|++
control|)
block|{
name|writeFutures
operator|.
name|add
argument_list|(
name|CompletableFuture
operator|.
name|runAsync
argument_list|(
parameter_list|()
lambda|->
name|load
argument_list|(
name|timeUnit
operator|.
name|toMillis
argument_list|(
name|time
argument_list|)
argument_list|)
argument_list|,
name|writeExecutor
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Wait for IO to complete
for|for
control|(
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|f
range|:
name|writeFutures
control|)
block|{
try|try
block|{
name|f
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"startIO failed with exception"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|shutdownLoadGenerator ()
specifier|public
name|void
name|shutdownLoadGenerator
parameter_list|()
block|{
try|try
block|{
name|writeExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|writeExecutor
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error while closing "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

