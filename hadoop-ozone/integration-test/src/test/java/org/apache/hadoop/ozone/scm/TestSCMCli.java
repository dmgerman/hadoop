begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerWithPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|KeyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|cli
operator|.
name|ResultCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|cli
operator|.
name|SCMCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|ContainerOperationClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|CLOSED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|cli
operator|.
name|ResultCode
operator|.
name|EXECUTION_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * This class tests the CLI of SCM.  */
end_comment

begin_class
DECL|class|TestSCMCli
specifier|public
class|class
name|TestSCMCli
block|{
DECL|field|cli
specifier|private
specifier|static
name|SCMCLI
name|cli
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|StorageContainerLocationProtocolClientSideTranslatorPB
DECL|field|storageContainerLocationClient
name|storageContainerLocationClient
decl_stmt|;
DECL|field|scm
specifier|private
specifier|static
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|containerOperationClient
specifier|private
specifier|static
name|ScmClient
name|containerOperationClient
decl_stmt|;
DECL|field|outContent
specifier|private
specifier|static
name|ByteArrayOutputStream
name|outContent
decl_stmt|;
DECL|field|outStream
specifier|private
specifier|static
name|PrintStream
name|outStream
decl_stmt|;
DECL|field|errContent
specifier|private
specifier|static
name|ByteArrayOutputStream
name|errContent
decl_stmt|;
DECL|field|errStream
specifier|private
specifier|static
name|PrintStream
name|errStream
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
specifier|static
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|containerOwner
specifier|private
specifier|static
name|String
name|containerOwner
init|=
literal|"OZONE"
decl_stmt|;
annotation|@
name|Rule
DECL|field|globalTimeout
specifier|public
name|Timeout
name|globalTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|xceiverClientManager
operator|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|getStorageContainerLocationClient
argument_list|()
expr_stmt|;
name|containerOperationClient
operator|=
operator|new
name|ContainerOperationClient
argument_list|(
name|storageContainerLocationClient
argument_list|,
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|outContent
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|outStream
operator|=
operator|new
name|PrintStream
argument_list|(
name|outContent
argument_list|)
expr_stmt|;
name|errContent
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|errStream
operator|=
operator|new
name|PrintStream
argument_list|(
name|errContent
argument_list|)
expr_stmt|;
name|cli
operator|=
operator|new
name|SCMCLI
argument_list|(
name|containerOperationClient
argument_list|,
name|outStream
argument_list|,
name|errStream
argument_list|)
expr_stmt|;
name|scm
operator|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
expr_stmt|;
block|}
DECL|method|runCommandAndGetOutput (String[] cmd, ByteArrayOutputStream out, ByteArrayOutputStream err)
specifier|private
name|int
name|runCommandAndGetOutput
parameter_list|(
name|String
index|[]
name|cmd
parameter_list|,
name|ByteArrayOutputStream
name|out
parameter_list|,
name|ByteArrayOutputStream
name|err
parameter_list|)
throws|throws
name|Exception
block|{
name|PrintStream
name|cmdOutStream
init|=
name|System
operator|.
name|out
decl_stmt|;
name|PrintStream
name|cmdErrStream
init|=
name|System
operator|.
name|err
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|cmdOutStream
operator|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|cmdErrStream
operator|=
operator|new
name|PrintStream
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
name|ScmClient
name|client
init|=
operator|new
name|ContainerOperationClient
argument_list|(
name|storageContainerLocationClient
argument_list|,
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|SCMCLI
name|scmCLI
init|=
operator|new
name|SCMCLI
argument_list|(
name|client
argument_list|,
name|cmdOutStream
argument_list|,
name|cmdErrStream
argument_list|)
decl_stmt|;
return|return
name|scmCLI
operator|.
name|run
argument_list|(
name|cmd
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
literal|null
argument_list|,
name|storageContainerLocationClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateContainer ()
specifier|public
name|void
name|testCreateContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|testContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|testPrintOut
init|=
operator|new
name|PrintStream
argument_list|(
name|testContent
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|testPrintOut
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-container"
block|,
literal|"-create"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|cli
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|testContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|containerExist (long containerID)
specifier|private
name|boolean
name|containerExist
parameter_list|(
name|long
name|containerID
parameter_list|)
block|{
try|try
block|{
name|ContainerInfo
name|container
init|=
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|getContainerWithPipeline
argument_list|(
name|containerID
argument_list|)
operator|.
name|getContainerInfo
argument_list|()
decl_stmt|;
return|return
name|container
operator|!=
literal|null
operator|&&
name|containerID
operator|==
name|container
operator|.
name|getContainerID
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteContainer ()
specifier|public
name|void
name|testDeleteContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|containerName
decl_stmt|;
name|ContainerData
name|containerData
decl_stmt|;
name|Pipeline
name|pipeline
decl_stmt|;
name|String
index|[]
name|delCmd
decl_stmt|;
name|ByteArrayOutputStream
name|testErr
decl_stmt|;
name|int
name|exitCode
decl_stmt|;
comment|// ****************************************
comment|// 1. Test to delete a non-empty container.
comment|// ****************************************
comment|// Create an non-empty container
name|ContainerWithPipeline
name|container
init|=
name|containerOperationClient
operator|.
name|createContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|ContainerData
name|cdata
init|=
name|ContainerData
operator|.
name|getFromProtBuf
argument_list|(
name|containerOperationClient
operator|.
name|readContainer
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|KeyUtils
operator|.
name|getDB
argument_list|(
name|cdata
argument_list|,
name|conf
argument_list|)
operator|.
name|put
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|,
literal|"someKey"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerExist
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Gracefully delete a container should fail because it is open.
name|delCmd
operator|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-delete"
block|,
literal|"-c"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
block|}
expr_stmt|;
name|testErr
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|exitCode
operator|=
name|runCommandAndGetOutput
argument_list|(
name|delCmd
argument_list|,
name|out
argument_list|,
name|testErr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXECUTION_ERROR
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testErr
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Deleting an open container is not allowed."
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerExist
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close the container
name|containerOperationClient
operator|.
name|closeContainer
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Gracefully delete a container should fail because it is not empty.
name|testErr
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|int
name|exitCode2
init|=
name|runCommandAndGetOutput
argument_list|(
name|delCmd
argument_list|,
name|out
argument_list|,
name|testErr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|EXECUTION_ERROR
argument_list|,
name|exitCode2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testErr
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container cannot be deleted because it is not empty."
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerExist
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try force delete again.
name|delCmd
operator|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-delete"
block|,
literal|"-c"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
block|,
literal|"-f"
block|}
expr_stmt|;
name|exitCode
operator|=
name|runCommandAndGetOutput
argument_list|(
name|delCmd
argument_list|,
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected success, found:"
argument_list|,
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|containerExist
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ****************************************
comment|// 2. Test to delete an empty container.
comment|// ****************************************
comment|// Create an empty container
name|ContainerWithPipeline
name|emptyContainer
init|=
name|containerOperationClient
operator|.
name|createContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|containerOperationClient
operator|.
name|closeContainer
argument_list|(
name|emptyContainer
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerExist
argument_list|(
name|emptyContainer
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Successfully delete an empty container.
name|delCmd
operator|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-delete"
block|,
literal|"-c"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|emptyContainer
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
block|}
expr_stmt|;
name|exitCode
operator|=
name|runCommandAndGetOutput
argument_list|(
name|delCmd
argument_list|,
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|containerExist
argument_list|(
name|emptyContainer
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// After the container is deleted,
comment|// another container can now be recreated.
name|ContainerWithPipeline
name|newContainer
init|=
name|containerOperationClient
operator|.
name|createContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerExist
argument_list|(
name|newContainer
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ****************************************
comment|// 3. Test to delete a non-exist container.
comment|// ****************************************
name|long
name|nonExistContainerID
init|=
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
decl_stmt|;
name|delCmd
operator|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-delete"
block|,
literal|"-c"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|nonExistContainerID
argument_list|)
block|}
expr_stmt|;
name|testErr
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|runCommandAndGetOutput
argument_list|(
name|delCmd
argument_list|,
name|out
argument_list|,
name|testErr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXECUTION_ERROR
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testErr
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Specified key does not exist."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfoContainer ()
specifier|public
name|void
name|testInfoContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The cluster has one Datanode server.
name|DatanodeDetails
name|datanodeDetails
init|=
name|cluster
operator|.
name|getHddsDatanodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeDetails
argument_list|()
decl_stmt|;
name|String
name|formatStr
init|=
literal|"Container id: %s\n"
operator|+
literal|"Container State: %s\n"
operator|+
literal|"Container DB Path: %s\n"
operator|+
literal|"Container Path: %s\n"
operator|+
literal|"Container Metadata: {%s}\n"
operator|+
literal|"LeaderID: %s\n"
operator|+
literal|"Datanodes: [%s]\n"
decl_stmt|;
comment|// Test a non-exist container
name|String
name|containerID
init|=
name|Long
operator|.
name|toString
argument_list|(
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|info
init|=
block|{
literal|"-container"
block|,
literal|"-info"
block|,
name|containerID
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|runCommandAndGetOutput
argument_list|(
name|info
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected Execution Error, Did not find that."
argument_list|,
name|EXECUTION_ERROR
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
comment|// Create an empty container.
name|ContainerWithPipeline
name|container
init|=
name|containerOperationClient
operator|.
name|createContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|ContainerData
name|data
init|=
name|ContainerData
operator|.
name|getFromProtBuf
argument_list|(
name|containerOperationClient
operator|.
name|readContainer
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|info
operator|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-info"
block|,
literal|"-c"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
block|}
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|exitCode
operator|=
name|runCommandAndGetOutput
argument_list|(
name|info
argument_list|,
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected Success, did not find it."
argument_list|,
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|String
name|openStatus
init|=
name|data
operator|.
name|isOpen
argument_list|()
condition|?
literal|"OPEN"
else|:
literal|"CLOSED"
decl_stmt|;
name|String
name|expected
init|=
name|String
operator|.
name|format
argument_list|(
name|formatStr
argument_list|,
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|openStatus
argument_list|,
name|data
operator|.
name|getDBPath
argument_list|()
argument_list|,
name|data
operator|.
name|getContainerPath
argument_list|()
argument_list|,
literal|""
argument_list|,
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Create an non-empty container
name|container
operator|=
name|containerOperationClient
operator|.
name|createContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|containerOwner
argument_list|)
expr_stmt|;
name|data
operator|=
name|ContainerData
operator|.
name|getFromProtBuf
argument_list|(
name|containerOperationClient
operator|.
name|readContainer
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|KeyUtils
operator|.
name|getDB
argument_list|(
name|data
argument_list|,
name|conf
argument_list|)
operator|.
name|put
argument_list|(
name|containerID
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"someKey"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-info"
block|,
literal|"-c"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
block|}
expr_stmt|;
name|exitCode
operator|=
name|runCommandAndGetOutput
argument_list|(
name|info
argument_list|,
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|openStatus
operator|=
name|data
operator|.
name|isOpen
argument_list|()
condition|?
literal|"OPEN"
else|:
literal|"CLOSED"
expr_stmt|;
name|expected
operator|=
name|String
operator|.
name|format
argument_list|(
name|formatStr
argument_list|,
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|openStatus
argument_list|,
name|data
operator|.
name|getDBPath
argument_list|()
argument_list|,
name|data
operator|.
name|getContainerPath
argument_list|()
argument_list|,
literal|""
argument_list|,
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Close last container and test info again.
name|containerOperationClient
operator|.
name|closeContainer
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-info"
block|,
literal|"-c"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
block|}
expr_stmt|;
name|exitCode
operator|=
name|runCommandAndGetOutput
argument_list|(
name|info
argument_list|,
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|data
operator|=
name|ContainerData
operator|.
name|getFromProtBuf
argument_list|(
name|containerOperationClient
operator|.
name|readContainer
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|openStatus
operator|=
name|data
operator|.
name|isOpen
argument_list|()
condition|?
literal|"OPEN"
else|:
literal|"CLOSED"
expr_stmt|;
name|expected
operator|=
name|String
operator|.
name|format
argument_list|(
name|formatStr
argument_list|,
name|container
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|openStatus
argument_list|,
name|data
operator|.
name|getDBPath
argument_list|()
argument_list|,
name|data
operator|.
name|getContainerPath
argument_list|()
argument_list|,
literal|""
argument_list|,
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|,
name|datanodeDetails
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonExistCommand ()
specifier|public
name|void
name|testNonExistCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|init
init|=
name|System
operator|.
name|out
decl_stmt|;
name|ByteArrayOutputStream
name|testContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|testPrintOut
init|=
operator|new
name|PrintStream
argument_list|(
name|testContent
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|testPrintOut
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-nothingUseful"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|UNRECOGNIZED_CMD
argument_list|,
name|cli
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errContent
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unrecognized options:[-nothingUseful]"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expectedOut
init|=
literal|"usage: hdfs scmcli<commands> [<options>]\n"
operator|+
literal|"where<commands> can be one of the following\n"
operator|+
literal|" -container   Container related options\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOut
argument_list|,
name|testContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|init
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListContainerCommand ()
specifier|public
name|void
name|testListContainerCommand
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create 20 containers for testing.
name|List
argument_list|<
name|ContainerInfo
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
literal|20
condition|;
name|index
operator|++
control|)
block|{
name|ContainerWithPipeline
name|container
init|=
name|containerOperationClient
operator|.
name|createContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|container
operator|.
name|getContainerInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|err
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// Test without -start, -prefix and -count
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-list"
block|}
decl_stmt|;
name|int
name|exitCode
init|=
name|runCommandAndGetOutput
argument_list|(
name|args
argument_list|,
name|out
argument_list|,
name|err
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|EXECUTION_ERROR
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Expecting container count"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
name|long
name|startContainerID
init|=
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|String
name|startContainerIDStr
init|=
name|Long
operator|.
name|toString
argument_list|(
name|startContainerID
argument_list|)
decl_stmt|;
comment|// Test with -start and -count, the value of -count is negative.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-list"
block|,
literal|"-start"
block|,
name|startContainerIDStr
block|,
literal|"-count"
block|,
literal|"-1"
block|}
expr_stmt|;
name|exitCode
operator|=
name|runCommandAndGetOutput
argument_list|(
name|args
argument_list|,
name|out
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXECUTION_ERROR
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-count should not be negative"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Test with -start and -count.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-list"
block|,
literal|"-start"
block|,
name|startContainerIDStr
block|,
literal|"-count"
block|,
literal|"10"
block|}
expr_stmt|;
name|exitCode
operator|=
name|runCommandAndGetOutput
argument_list|(
name|args
argument_list|,
name|out
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
literal|10
condition|;
name|index
operator|++
control|)
block|{
name|String
name|containerID
init|=
name|Long
operator|.
name|toString
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|containerID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|err
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Test with -start, while -count doesn't exist.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-container"
block|,
literal|"-list"
block|,
literal|"-start"
block|,
name|startContainerIDStr
block|}
expr_stmt|;
name|exitCode
operator|=
name|runCommandAndGetOutput
argument_list|(
name|args
argument_list|,
name|out
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|EXECUTION_ERROR
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"java.io.IOException: Expecting container count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseContainer ()
specifier|public
name|void
name|testCloseContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerID
init|=
name|containerOperationClient
operator|.
name|createContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|containerOwner
argument_list|)
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|ContainerInfo
name|container
init|=
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|getContainerWithPipeline
argument_list|(
name|containerID
argument_list|)
operator|.
name|getContainerInfo
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerID
argument_list|,
name|container
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerInfo
name|containerInfo
init|=
name|scm
operator|.
name|getContainerInfo
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|OPEN
argument_list|,
name|containerInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|args1
init|=
block|{
literal|"-container"
block|,
literal|"-close"
block|,
literal|"-c"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|containerID
argument_list|)
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|cli
operator|.
name|run
argument_list|(
name|args1
argument_list|)
argument_list|)
expr_stmt|;
name|containerInfo
operator|=
name|scm
operator|.
name|getContainerInfo
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLOSED
argument_list|,
name|containerInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// closing this container again will trigger an error.
name|assertEquals
argument_list|(
name|EXECUTION_ERROR
argument_list|,
name|cli
operator|.
name|run
argument_list|(
name|args1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHelp ()
specifier|public
name|void
name|testHelp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO : this test assertion may break for every new help entry added
comment|// may want to disable this test some time later. For now, mainly to show
comment|// case the format of help output.
name|PrintStream
name|init
init|=
name|System
operator|.
name|out
decl_stmt|;
name|ByteArrayOutputStream
name|testContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|testPrintOut
init|=
operator|new
name|PrintStream
argument_list|(
name|testContent
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|testPrintOut
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-help"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|cli
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"usage: hdfs scmcli<commands> [<options>]\n"
operator|+
literal|"where<commands> can be one of the following\n"
operator|+
literal|" -container   Container related options\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|testContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
index|[]
name|args1
init|=
block|{
literal|"-container"
block|,
literal|"-help"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|cli
operator|.
name|run
argument_list|(
name|args1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expected1
init|=
literal|"usage: hdfs scm -container<commands><options>\n"
operator|+
literal|"where<commands> can be one of the following\n"
operator|+
literal|" -close    Close container\n"
operator|+
literal|" -create   Create container\n"
operator|+
literal|" -delete   Delete container\n"
operator|+
literal|" -info     Info container\n"
operator|+
literal|" -list     List container\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected1
argument_list|,
name|testContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
index|[]
name|args2
init|=
block|{
literal|"-container"
block|,
literal|"-create"
block|,
literal|"-help"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|cli
operator|.
name|run
argument_list|(
name|args2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expected2
init|=
literal|"usage: hdfs scm -container -create\n\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected2
argument_list|,
name|testContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
index|[]
name|args3
init|=
block|{
literal|"-container"
block|,
literal|"-delete"
block|,
literal|"-help"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|cli
operator|.
name|run
argument_list|(
name|args3
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expected3
init|=
literal|"usage: hdfs scm -container -delete<option>\n"
operator|+
literal|"where<option> is\n"
operator|+
literal|" -c<arg>   Specify container id\n"
operator|+
literal|" -f         forcibly delete a container\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected3
argument_list|,
name|testContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
index|[]
name|args4
init|=
block|{
literal|"-container"
block|,
literal|"-info"
block|,
literal|"-help"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|cli
operator|.
name|run
argument_list|(
name|args4
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expected4
init|=
literal|"usage: hdfs scm -container -info<option>\n"
operator|+
literal|"where<option> is\n"
operator|+
literal|" -c<arg>   Specify container id\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected4
argument_list|,
name|testContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
index|[]
name|args5
init|=
block|{
literal|"-container"
block|,
literal|"-list"
block|,
literal|"-help"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|ResultCode
operator|.
name|SUCCESS
argument_list|,
name|cli
operator|.
name|run
argument_list|(
name|args5
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expected5
init|=
literal|"usage: hdfs scm -container -list<option>\n"
operator|+
literal|"where<option> can be the following\n"
operator|+
literal|" -count<arg>   Specify count number, required\n"
operator|+
literal|" -start<arg>   Specify start container id\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected5
argument_list|,
name|testContent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|testContent
operator|.
name|reset
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|init
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

