begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|BucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|VolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_comment
comment|/**  * Utility to help to generate test data.  */
end_comment

begin_class
DECL|class|TestDataUtil
specifier|public
specifier|final
class|class
name|TestDataUtil
block|{
DECL|method|TestDataUtil ()
specifier|private
name|TestDataUtil
parameter_list|()
block|{   }
DECL|method|createVolumeAndBucket (MiniOzoneCluster cluster, String volumeName, String bucketName)
specifier|public
specifier|static
name|OzoneBucket
name|createVolumeAndBucket
parameter_list|(
name|MiniOzoneCluster
name|cluster
parameter_list|,
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|userName
init|=
literal|"user"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|adminName
init|=
literal|"admin"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OzoneClient
name|client
init|=
name|cluster
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|VolumeArgs
name|volumeArgs
init|=
name|VolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAdmin
argument_list|(
name|adminName
argument_list|)
operator|.
name|setOwner
argument_list|(
name|userName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ObjectStore
name|objectStore
init|=
name|client
operator|.
name|getObjectStore
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|volumeArgs
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|BucketArgs
name|omBucketArgs
init|=
name|BucketArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|,
name|omBucketArgs
argument_list|)
expr_stmt|;
return|return
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
return|;
block|}
DECL|method|createKey (OzoneBucket bucket, String keyName, String content)
specifier|public
specifier|static
name|void
name|createKey
parameter_list|(
name|OzoneBucket
name|bucket
parameter_list|,
name|String
name|keyName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|OutputStream
name|stream
init|=
name|bucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|content
operator|.
name|length
argument_list|()
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getKey (OzoneBucket bucket, String keyName)
specifier|public
specifier|static
name|String
name|getKey
parameter_list|(
name|OzoneBucket
name|bucket
parameter_list|,
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|bucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
init|)
block|{
return|return
operator|new
name|Scanner
argument_list|(
name|stream
argument_list|)
operator|.
name|useDelimiter
argument_list|(
literal|"\\A"
argument_list|)
operator|.
name|next
argument_list|()
return|;
block|}
block|}
DECL|method|createVolumeAndBucket (MiniOzoneCluster cluster)
specifier|public
specifier|static
name|OzoneBucket
name|createVolumeAndBucket
parameter_list|(
name|MiniOzoneCluster
name|cluster
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|volumeName
init|=
literal|"volume"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
return|return
name|createVolumeAndBucket
argument_list|(
name|cluster
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

