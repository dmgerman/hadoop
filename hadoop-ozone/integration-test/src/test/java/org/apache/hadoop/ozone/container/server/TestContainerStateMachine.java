begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|ContainerDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
operator|.
name|ContainerStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|RatisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|ClientId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|proto
operator|.
name|RaftProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|TransactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|ProtoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * This class tests ContainerStateMachine.  */
end_comment

begin_class
DECL|class|TestContainerStateMachine
specifier|public
class|class
name|TestContainerStateMachine
block|{
DECL|field|CALL_ID_COUNTER
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|CALL_ID_COUNTER
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|nextCallId ()
specifier|private
specifier|static
name|long
name|nextCallId
parameter_list|()
block|{
return|return
name|CALL_ID_COUNTER
operator|.
name|getAndIncrement
argument_list|()
operator|&
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
DECL|field|executor
specifier|private
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
literal|1024
argument_list|)
argument_list|,
operator|new
name|ThreadPoolExecutor
operator|.
name|CallerRunsPolicy
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|stateMachine
specifier|private
name|ContainerStateMachine
name|stateMachine
init|=
operator|new
name|ContainerStateMachine
argument_list|(
operator|new
name|TestContainerDispatcher
argument_list|()
argument_list|,
name|executor
argument_list|,
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testCloseContainerSynchronization ()
specifier|public
name|void
name|testCloseContainerSynchronization
parameter_list|()
throws|throws
name|Exception
block|{
name|Pipeline
name|pipeline
init|=
name|ContainerTestHelper
operator|.
name|createPipeline
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|containerId
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
comment|//create container request
name|RaftClientRequest
name|createContainer
init|=
name|getRaftClientRequest
argument_list|(
name|ContainerTestHelper
operator|.
name|getCreateContainerRequest
argument_list|(
name|containerId
argument_list|,
name|pipeline
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerCommandRequestProto
name|writeChunkProto
init|=
name|ContainerTestHelper
operator|.
name|getWriteChunkRequest
argument_list|(
name|pipeline
argument_list|,
operator|new
name|BlockID
argument_list|(
name|containerId
argument_list|,
name|nextCallId
argument_list|()
argument_list|)
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|RaftClientRequest
name|writeChunkRequest
init|=
name|getRaftClientRequest
argument_list|(
name|writeChunkProto
argument_list|)
decl_stmt|;
comment|// add putKey request
name|ContainerCommandRequestProto
name|putKeyProto
init|=
name|ContainerTestHelper
operator|.
name|getPutBlockRequest
argument_list|(
name|pipeline
argument_list|,
name|writeChunkProto
operator|.
name|getWriteChunk
argument_list|()
argument_list|)
decl_stmt|;
name|RaftClientRequest
name|putKeyRequest
init|=
name|getRaftClientRequest
argument_list|(
name|putKeyProto
argument_list|)
decl_stmt|;
name|TransactionContext
name|createContainerCtxt
init|=
name|startAndWriteStateMachineData
argument_list|(
name|createContainer
argument_list|)
decl_stmt|;
comment|// Start and Write into the StateMachine
name|TransactionContext
name|writeChunkcontext
init|=
name|startAndWriteStateMachineData
argument_list|(
name|writeChunkRequest
argument_list|)
decl_stmt|;
name|TransactionContext
name|putKeyContext
init|=
name|stateMachine
operator|.
name|startTransaction
argument_list|(
name|putKeyRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stateMachine
operator|.
name|getStateMachineMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|stateMachine
operator|.
name|getCreateContainerFuture
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stateMachine
operator|.
name|getWriteChunkFutureMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stateMachine
operator|.
name|getCommitChunkFutureMap
argument_list|(
name|containerId
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|//Add a closeContainerRequest
name|RaftClientRequest
name|closeRequest
init|=
name|getRaftClientRequest
argument_list|(
name|ContainerTestHelper
operator|.
name|getCloseContainer
argument_list|(
name|pipeline
argument_list|,
name|containerId
argument_list|)
argument_list|)
decl_stmt|;
name|TransactionContext
name|closeCtx
init|=
name|stateMachine
operator|.
name|startTransaction
argument_list|(
name|closeRequest
argument_list|)
decl_stmt|;
comment|// Now apply all the transaction for the CreateContainer Command.
comment|// This will unblock writeChunks as well
name|stateMachine
operator|.
name|applyTransaction
argument_list|(
name|createContainerCtxt
argument_list|)
expr_stmt|;
name|stateMachine
operator|.
name|applyTransaction
argument_list|(
name|writeChunkcontext
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|putKeyFuture
init|=
name|stateMachine
operator|.
name|applyTransaction
argument_list|(
name|putKeyContext
argument_list|)
decl_stmt|;
name|waitForTransactionCompletion
argument_list|(
name|putKeyFuture
argument_list|)
expr_stmt|;
comment|// Make sure the putKey transaction complete
name|Assert
operator|.
name|assertTrue
argument_list|(
name|putKeyFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
comment|// Execute the closeContainer. This should ensure all prior Write Type
comment|// container requests finish execution
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|closeFuture
init|=
name|stateMachine
operator|.
name|applyTransaction
argument_list|(
name|closeCtx
argument_list|)
decl_stmt|;
name|waitForTransactionCompletion
argument_list|(
name|closeFuture
argument_list|)
expr_stmt|;
comment|// Make sure the closeContainer transaction complete
name|Assert
operator|.
name|assertTrue
argument_list|(
name|closeFuture
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|stateMachine
operator|.
name|getCreateContainerFuture
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|stateMachine
operator|.
name|getCommitChunkFutureMap
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRaftClientRequest ( ContainerCommandRequestProto req)
specifier|private
name|RaftClientRequest
name|getRaftClientRequest
parameter_list|(
name|ContainerCommandRequestProto
name|req
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientId
name|clientId
init|=
name|ClientId
operator|.
name|randomId
argument_list|()
decl_stmt|;
return|return
operator|new
name|RaftClientRequest
argument_list|(
name|clientId
argument_list|,
name|RatisHelper
operator|.
name|toRaftPeerId
argument_list|(
name|ContainerTestHelper
operator|.
name|createDatanodeDetails
argument_list|()
argument_list|)
argument_list|,
name|RatisHelper
operator|.
name|emptyRaftGroup
argument_list|()
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|nextCallId
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Message
operator|.
name|valueOf
argument_list|(
name|req
operator|.
name|toByteString
argument_list|()
argument_list|)
argument_list|,
name|RaftClientRequest
operator|.
name|writeRequestType
argument_list|(
name|RaftProtos
operator|.
name|ReplicationLevel
operator|.
name|MAJORITY
argument_list|)
argument_list|)
return|;
block|}
DECL|method|waitForTransactionCompletion ( CompletableFuture<Message> future)
specifier|private
name|void
name|waitForTransactionCompletion
parameter_list|(
name|CompletableFuture
argument_list|<
name|Message
argument_list|>
name|future
parameter_list|)
throws|throws
name|Exception
block|{
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|executorService
operator|.
name|invokeAll
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|future
operator|::
name|get
argument_list|)
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// Timeout of 10 minutes.
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|startAndWriteStateMachineData ( RaftClientRequest request)
specifier|private
name|TransactionContext
name|startAndWriteStateMachineData
parameter_list|(
name|RaftClientRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|TransactionContext
name|ctx
init|=
name|stateMachine
operator|.
name|startTransaction
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|RaftProtos
operator|.
name|LogEntryProto
name|e
init|=
name|ProtoUtils
operator|.
name|toLogEntryProto
argument_list|(
name|ctx
operator|.
name|getSMLogEntry
argument_list|()
argument_list|,
name|request
operator|.
name|getSeqNum
argument_list|()
argument_list|,
name|request
operator|.
name|getCallId
argument_list|()
argument_list|,
name|ClientId
operator|.
name|randomId
argument_list|()
argument_list|,
name|request
operator|.
name|getCallId
argument_list|()
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setLogEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|stateMachine
operator|.
name|writeStateMachineData
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
comment|// ContainerDispatcher for test only purpose.
DECL|class|TestContainerDispatcher
specifier|private
specifier|static
class|class
name|TestContainerDispatcher
implements|implements
name|ContainerDispatcher
block|{
comment|/**      * Dispatches commands to container layer.      *      * @param msg - Command Request      * @return Command Response      */
annotation|@
name|Override
DECL|method|dispatch ( ContainerCommandRequestProto msg)
specifier|public
name|ContainerCommandResponseProto
name|dispatch
parameter_list|(
name|ContainerCommandRequestProto
name|msg
parameter_list|)
block|{
return|return
name|ContainerTestHelper
operator|.
name|getCreateContainerResponse
argument_list|(
name|msg
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|setScmId (String scmId)
specifier|public
name|void
name|setScmId
parameter_list|(
name|String
name|scmId
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|getHandler (ContainerType containerType)
specifier|public
name|Handler
name|getHandler
parameter_list|(
name|ContainerType
name|containerType
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

