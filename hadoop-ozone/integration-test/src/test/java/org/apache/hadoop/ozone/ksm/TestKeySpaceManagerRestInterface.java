begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ksm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneClassicCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|ServicePort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
operator|.
name|getScmAddressForClients
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|KsmUtils
operator|.
name|getKsmAddressForClients
import|;
end_import

begin_comment
comment|/**  * This class is to test the REST interface exposed by KeySpaceManager.  */
end_comment

begin_class
DECL|class|TestKeySpaceManagerRestInterface
specifier|public
class|class
name|TestKeySpaceManagerRestInterface
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniOzoneClassicCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setHandlerType
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_HANDLER_DISTRIBUTED
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setScmId
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetServiceList ()
specifier|public
name|void
name|testGetServiceList
parameter_list|()
throws|throws
name|Exception
block|{
name|KeySpaceManagerHttpServer
name|server
init|=
name|cluster
operator|.
name|getKeySpaceManager
argument_list|()
operator|.
name|getHttpServer
argument_list|()
decl_stmt|;
name|HttpClient
name|client
init|=
name|HttpClients
operator|.
name|createDefault
argument_list|()
decl_stmt|;
name|String
name|connectionUri
init|=
literal|"http://"
operator|+
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|server
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
decl_stmt|;
name|HttpGet
name|httpGet
init|=
operator|new
name|HttpGet
argument_list|(
name|connectionUri
operator|+
literal|"/serviceList"
argument_list|)
decl_stmt|;
name|HttpResponse
name|response
init|=
name|client
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|)
decl_stmt|;
name|String
name|serviceListJson
init|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|TypeReference
argument_list|<
name|List
argument_list|<
name|ServiceInfo
argument_list|>
argument_list|>
name|serviceInfoReference
init|=
operator|new
name|TypeReference
argument_list|<
name|List
argument_list|<
name|ServiceInfo
argument_list|>
argument_list|>
argument_list|()
block|{}
decl_stmt|;
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|serviceInfos
init|=
name|objectMapper
operator|.
name|readValue
argument_list|(
name|serviceListJson
argument_list|,
name|serviceInfoReference
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HddsProtos
operator|.
name|NodeType
argument_list|,
name|ServiceInfo
argument_list|>
name|serviceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|serviceInfo
range|:
name|serviceInfos
control|)
block|{
name|serviceMap
operator|.
name|put
argument_list|(
name|serviceInfo
operator|.
name|getNodeType
argument_list|()
argument_list|,
name|serviceInfo
argument_list|)
expr_stmt|;
block|}
name|InetSocketAddress
name|ksmAddress
init|=
name|getKsmAddressForClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ServiceInfo
name|ksmInfo
init|=
name|serviceMap
operator|.
name|get
argument_list|(
name|HddsProtos
operator|.
name|NodeType
operator|.
name|KSM
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ksmAddress
operator|.
name|getHostName
argument_list|()
argument_list|,
name|ksmInfo
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ksmAddress
operator|.
name|getPort
argument_list|()
argument_list|,
name|ksmInfo
operator|.
name|getPort
argument_list|(
name|ServicePort
operator|.
name|Type
operator|.
name|RPC
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|server
operator|.
name|getHttpAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|ksmInfo
operator|.
name|getPort
argument_list|(
name|ServicePort
operator|.
name|Type
operator|.
name|HTTP
argument_list|)
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|scmAddress
init|=
name|getScmAddressForClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ServiceInfo
name|scmInfo
init|=
name|serviceMap
operator|.
name|get
argument_list|(
name|HddsProtos
operator|.
name|NodeType
operator|.
name|SCM
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scmAddress
operator|.
name|getHostName
argument_list|()
argument_list|,
name|scmInfo
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scmAddress
operator|.
name|getPort
argument_list|()
argument_list|,
name|scmInfo
operator|.
name|getPort
argument_list|(
name|ServicePort
operator|.
name|Type
operator|.
name|RPC
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceInfo
name|datanodeInfo
init|=
name|serviceMap
operator|.
name|get
argument_list|(
name|HddsProtos
operator|.
name|NodeType
operator|.
name|DATANODE
argument_list|)
decl_stmt|;
name|DataNode
name|datanode
init|=
operator|(
operator|(
name|MiniOzoneClassicCluster
operator|)
name|cluster
operator|)
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|datanode
operator|.
name|getDatanodeHostname
argument_list|()
argument_list|,
name|datanodeInfo
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ServicePort
operator|.
name|Type
argument_list|,
name|Integer
argument_list|>
name|ports
init|=
name|datanodeInfo
operator|.
name|getPorts
argument_list|()
decl_stmt|;
for|for
control|(
name|ServicePort
operator|.
name|Type
name|type
range|:
name|ports
operator|.
name|keySet
argument_list|()
control|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HTTP
case|:
case|case
name|HTTPS
case|:
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MiniOzoneClassicCluster
operator|.
name|getOzoneRestPort
argument_list|(
name|datanode
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|ports
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// KSM only sends Datanode's info port details
comment|// i.e. HTTP or HTTPS
comment|// Other ports are not expected as of now.
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

