begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|LifeCycleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|KeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Helpers for container tests.  */
end_comment

begin_class
DECL|class|ContainerTestHelper
specifier|public
specifier|final
class|class
name|ContainerTestHelper
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerTestHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|r
specifier|private
specifier|static
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * Never constructed.    */
DECL|method|ContainerTestHelper ()
specifier|private
name|ContainerTestHelper
parameter_list|()
block|{   }
DECL|method|setOzoneLocalStorageRoot ( Class<?> clazz, OzoneConfiguration conf)
specifier|public
specifier|static
name|void
name|setOzoneLocalStorageRoot
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|+=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|// TODO: mock multi-node pipeline
comment|/**    * Create a pipeline with single node replica.    *    * @return Pipeline with single node in it.    * @throws IOException    */
DECL|method|createSingleNodePipeline ()
specifier|public
specifier|static
name|Pipeline
name|createSingleNodePipeline
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createPipeline
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|createLocalAddress ()
specifier|public
specifier|static
name|String
name|createLocalAddress
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ServerSocket
name|s
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
init|)
block|{
return|return
literal|"127.0.0.1:"
operator|+
name|s
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
block|}
DECL|method|createDatanodeDetails ()
specifier|public
specifier|static
name|DatanodeDetails
name|createDatanodeDetails
parameter_list|()
throws|throws
name|IOException
block|{
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|socket
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|containerPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|STANDALONE
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|ratisPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|RATIS
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|restPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|REST
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|DatanodeDetails
name|datanodeDetails
init|=
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUuid
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setIpAddress
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
operator|.
name|setHostName
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|addPort
argument_list|(
name|containerPort
argument_list|)
operator|.
name|addPort
argument_list|(
name|ratisPort
argument_list|)
operator|.
name|addPort
argument_list|(
name|restPort
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|datanodeDetails
return|;
block|}
comment|/**    * Create a pipeline with single node replica.    *    * @return Pipeline with single node in it.    * @throws IOException    */
DECL|method|createPipeline (int numNodes)
specifier|public
specifier|static
name|Pipeline
name|createPipeline
parameter_list|(
name|int
name|numNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|numNodes
operator|>=
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numNodes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|createDatanodeDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|createPipeline
argument_list|(
name|ids
argument_list|)
return|;
block|}
DECL|method|createPipeline ( Iterable<DatanodeDetails> ids)
specifier|public
specifier|static
name|Pipeline
name|createPipeline
parameter_list|(
name|Iterable
argument_list|<
name|DatanodeDetails
argument_list|>
name|ids
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ids
argument_list|,
literal|"ids == null"
argument_list|)
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|DatanodeDetails
argument_list|>
name|i
init|=
name|ids
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DatanodeDetails
name|leader
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pipelineName
init|=
literal|"TEST-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|Pipeline
name|pipeline
init|=
operator|new
name|Pipeline
argument_list|(
name|leader
operator|.
name|getUuidString
argument_list|()
argument_list|,
name|LifeCycleState
operator|.
name|OPEN
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|pipelineName
argument_list|)
decl_stmt|;
name|pipeline
operator|.
name|addMember
argument_list|(
name|leader
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|pipeline
operator|.
name|addMember
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pipeline
return|;
block|}
comment|/**    * Creates a ChunkInfo for testing.    *    * @param keyID - ID of the key    * @param seqNo - Chunk number.    * @return ChunkInfo    * @throws IOException    */
DECL|method|getChunk (long keyID, int seqNo, long offset, long len)
specifier|public
specifier|static
name|ChunkInfo
name|getChunk
parameter_list|(
name|long
name|keyID
parameter_list|,
name|int
name|seqNo
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|ChunkInfo
name|info
init|=
operator|new
name|ChunkInfo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d.data.%d"
argument_list|,
name|keyID
argument_list|,
name|seqNo
argument_list|)
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Generates some data of the requested len.    *    * @param len - Number of bytes.    * @return byte array with valid data.    */
DECL|method|getData (int len)
specifier|public
specifier|static
name|byte
index|[]
name|getData
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/**    * Computes the hash and sets the value correctly.    *    * @param info - chunk info.    * @param data - data array    * @throws NoSuchAlgorithmException    */
DECL|method|setDataChecksum (ChunkInfo info, byte[] data)
specifier|public
specifier|static
name|void
name|setDataChecksum
parameter_list|(
name|ChunkInfo
name|info
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
name|MessageDigest
name|sha
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
name|sha
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|info
operator|.
name|setChecksum
argument_list|(
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|sha
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a writeChunk Request.    *    * @param pipeline - A set of machines where this container lives.    * @param blockID - Block ID of the chunk.    * @param datalen - Length of data.    * @return ContainerCommandRequestProto    * @throws IOException    * @throws NoSuchAlgorithmException    */
DECL|method|getWriteChunkRequest ( Pipeline pipeline, BlockID blockID, int datalen)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getWriteChunkRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|int
name|datalen
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"writeChunk {} (blockID={}) to pipeline="
argument_list|,
name|datalen
argument_list|,
name|blockID
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
operator|.
name|Builder
name|writeRequest
init|=
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|writeRequest
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|writeRequest
operator|.
name|setChunkData
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|writeRequest
operator|.
name|setData
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
expr_stmt|;
name|request
operator|.
name|setWriteChunk
argument_list|(
name|writeRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns PutSmallFile Request that we can send to the container.    *    * @param pipeline - Pipeline    * @param blockID - Block ID of the small file.    * @param dataLen - Number of bytes in the data    * @return ContainerCommandRequestProto    */
DECL|method|getWriteSmallFileRequest ( Pipeline pipeline, BlockID blockID, int dataLen)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getWriteSmallFileRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|int
name|dataLen
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerProtos
operator|.
name|PutSmallFileRequestProto
operator|.
name|Builder
name|smallFileRequest
init|=
name|ContainerProtos
operator|.
name|PutSmallFileRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|dataLen
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|dataLen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|PutKeyRequestProto
operator|.
name|Builder
name|putRequest
init|=
name|ContainerProtos
operator|.
name|PutKeyRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyData
name|keyData
init|=
operator|new
name|KeyData
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|newList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|newList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|keyData
operator|.
name|setChunks
argument_list|(
name|newList
argument_list|)
expr_stmt|;
name|putRequest
operator|.
name|setKeyData
argument_list|(
name|keyData
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|smallFileRequest
operator|.
name|setChunkInfo
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|smallFileRequest
operator|.
name|setData
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|smallFileRequest
operator|.
name|setKey
argument_list|(
name|putRequest
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutSmallFile
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPutSmallFile
argument_list|(
name|smallFileRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getReadSmallFileRequest ( Pipeline pipeline, ContainerProtos.PutKeyRequestProto putKey)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getReadSmallFileRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|PutKeyRequestProto
name|putKey
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerProtos
operator|.
name|GetSmallFileRequestProto
operator|.
name|Builder
name|smallFileRequest
init|=
name|ContainerProtos
operator|.
name|GetSmallFileRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
name|getKey
init|=
name|getKeyRequest
argument_list|(
name|pipeline
argument_list|,
name|putKey
argument_list|)
decl_stmt|;
name|smallFileRequest
operator|.
name|setKey
argument_list|(
name|getKey
operator|.
name|getGetKey
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|GetSmallFile
argument_list|)
expr_stmt|;
name|request
operator|.
name|setGetSmallFile
argument_list|(
name|smallFileRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a read Request.    *    * @param pipeline pipeline.    * @param request writeChunkRequest.    * @return Request.    * @throws IOException    * @throws NoSuchAlgorithmException    */
DECL|method|getReadChunkRequest ( Pipeline pipeline, ContainerProtos.WriteChunkRequestProto request)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getReadChunkRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"readChunk blockID={} from pipeline={}"
argument_list|,
name|request
operator|.
name|getBlockID
argument_list|()
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ReadChunkRequestProto
operator|.
name|Builder
name|readRequest
init|=
name|ContainerProtos
operator|.
name|ReadChunkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|readRequest
operator|.
name|setBlockID
argument_list|(
name|request
operator|.
name|getBlockID
argument_list|()
argument_list|)
expr_stmt|;
name|readRequest
operator|.
name|setChunkData
argument_list|(
name|request
operator|.
name|getChunkData
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|newRequest
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|newRequest
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|ReadChunk
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|setReadChunk
argument_list|(
name|readRequest
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newRequest
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a delete Request.    *    * @param pipeline pipeline.    * @param writeRequest - write request    * @return request    * @throws IOException    * @throws NoSuchAlgorithmException    */
DECL|method|getDeleteChunkRequest ( Pipeline pipeline, ContainerProtos.WriteChunkRequestProto writeRequest)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getDeleteChunkRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
name|writeRequest
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"deleteChunk blockID={} from pipeline={}"
argument_list|,
name|writeRequest
operator|.
name|getBlockID
argument_list|()
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|DeleteChunkRequestProto
operator|.
name|Builder
name|deleteRequest
init|=
name|ContainerProtos
operator|.
name|DeleteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|deleteRequest
operator|.
name|setChunkData
argument_list|(
name|writeRequest
operator|.
name|getChunkData
argument_list|()
argument_list|)
expr_stmt|;
name|deleteRequest
operator|.
name|setBlockID
argument_list|(
name|writeRequest
operator|.
name|getBlockID
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|DeleteChunk
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDeleteChunk
argument_list|(
name|deleteRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a create container command for test purposes. There are a bunch of    * tests where we need to just send a request and get a reply.    *    * @return ContainerCommandRequestProto.    */
DECL|method|getCreateContainerRequest ( long containerID, Pipeline pipeline)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getCreateContainerRequest
parameter_list|(
name|long
name|containerID
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"addContainer: {}"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|CreateContainerRequestProto
operator|.
name|Builder
name|createRequest
init|=
name|ContainerProtos
operator|.
name|CreateContainerRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerData
operator|.
name|Builder
name|containerData
init|=
name|ContainerProtos
operator|.
name|ContainerData
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|containerData
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|createRequest
operator|.
name|setContainerData
argument_list|(
name|containerData
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CreateContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreateContainer
argument_list|(
name|createRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Return an update container command for test purposes.    * Creates a container data based on the given meta data,    * and request to update an existing container with it.    *    * @param containerID    * @param metaData    * @return    * @throws IOException    */
DECL|method|getUpdateContainerRequest ( long containerID, Map<String, String> metaData)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getUpdateContainerRequest
parameter_list|(
name|long
name|containerID
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerProtos
operator|.
name|UpdateContainerRequestProto
operator|.
name|Builder
name|updateRequestBuilder
init|=
name|ContainerProtos
operator|.
name|UpdateContainerRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerData
operator|.
name|Builder
name|containerData
init|=
name|ContainerProtos
operator|.
name|ContainerData
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|containerData
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|String
index|[]
name|keys
init|=
name|metaData
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
operator|.
name|Builder
name|kvBuilder
init|=
name|KeyValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|kvBuilder
operator|.
name|setKey
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|kvBuilder
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|get
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|containerData
operator|.
name|addMetadata
argument_list|(
name|i
argument_list|,
name|kvBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Pipeline
name|pipeline
init|=
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
argument_list|()
decl_stmt|;
name|updateRequestBuilder
operator|.
name|setContainerData
argument_list|(
name|containerData
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|UpdateContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUpdateContainer
argument_list|(
name|updateRequestBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a create container response for test purposes. There are a bunch of    * tests where we need to just send a request and get a reply.    *    * @return ContainerCommandRequestProto.    */
specifier|public
specifier|static
name|ContainerCommandResponseProto
DECL|method|getCreateContainerResponse (ContainerCommandRequestProto request)
name|getCreateContainerResponse
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|)
block|{
name|ContainerProtos
operator|.
name|CreateContainerResponseProto
operator|.
name|Builder
name|createResponse
init|=
name|ContainerProtos
operator|.
name|CreateContainerResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ContainerCommandResponseProto
operator|.
name|Builder
name|response
init|=
name|ContainerCommandResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CreateContainer
argument_list|)
expr_stmt|;
name|response
operator|.
name|setTraceID
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCreateContainer
argument_list|(
name|createResponse
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns the PutKeyRequest for test purpose.    * @param pipeline - pipeline.    * @param writeRequest - Write Chunk Request.    * @return - Request    */
DECL|method|getPutKeyRequest ( Pipeline pipeline, ContainerProtos.WriteChunkRequestProto writeRequest)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getPutKeyRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
name|writeRequest
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"putKey: {} to pipeline={}"
argument_list|,
name|writeRequest
operator|.
name|getBlockID
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|PutKeyRequestProto
operator|.
name|Builder
name|putRequest
init|=
name|ContainerProtos
operator|.
name|PutKeyRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyData
name|keyData
init|=
operator|new
name|KeyData
argument_list|(
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|writeRequest
operator|.
name|getBlockID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|newList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|newList
operator|.
name|add
argument_list|(
name|writeRequest
operator|.
name|getChunkData
argument_list|()
argument_list|)
expr_stmt|;
name|keyData
operator|.
name|setChunks
argument_list|(
name|newList
argument_list|)
expr_stmt|;
name|putRequest
operator|.
name|setKeyData
argument_list|(
name|keyData
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutKey
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPutKey
argument_list|(
name|putRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Gets a GetKeyRequest for test purpose.    * @param  pipeline - pipeline    * @param putKeyRequest - putKeyRequest.    * @return - Request    * immediately.    */
DECL|method|getKeyRequest ( Pipeline pipeline, ContainerProtos.PutKeyRequestProto putKeyRequest)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getKeyRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|PutKeyRequestProto
name|putKeyRequest
parameter_list|)
block|{
name|ContainerProtos
operator|.
name|DatanodeBlockID
name|blockID
init|=
name|putKeyRequest
operator|.
name|getKeyData
argument_list|()
operator|.
name|getBlockID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"getKey: blockID={}"
argument_list|,
name|blockID
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|GetKeyRequestProto
operator|.
name|Builder
name|getRequest
init|=
name|ContainerProtos
operator|.
name|GetKeyRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|KeyData
operator|.
name|Builder
name|keyData
init|=
name|ContainerProtos
operator|.
name|KeyData
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|keyData
operator|.
name|setBlockID
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
name|getRequest
operator|.
name|setKeyData
argument_list|(
name|keyData
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|GetKey
argument_list|)
expr_stmt|;
name|request
operator|.
name|setGetKey
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Verify the response against the request.    *    * @param request - Request    * @param response - Response    */
DECL|method|verifyGetKey (ContainerCommandRequestProto request, ContainerCommandResponseProto response)
specifier|public
specifier|static
name|void
name|verifyGetKey
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|ContainerCommandResponseProto
name|response
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|,
name|response
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|PutKeyRequestProto
name|putKey
init|=
name|request
operator|.
name|getPutKey
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|GetKeyRequestProto
name|getKey
init|=
name|request
operator|.
name|getGetKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putKey
operator|.
name|getKeyData
argument_list|()
operator|.
name|getChunksCount
argument_list|()
argument_list|,
name|getKey
operator|.
name|getKeyData
argument_list|()
operator|.
name|getChunksCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param pipeline - pipeline.    * @param putKeyRequest - putKeyRequest.    * @return - Request    */
DECL|method|getDeleteKeyRequest ( Pipeline pipeline, ContainerProtos.PutKeyRequestProto putKeyRequest)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getDeleteKeyRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|PutKeyRequestProto
name|putKeyRequest
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"deleteKey: name={}"
argument_list|,
name|putKeyRequest
operator|.
name|getKeyData
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|DeleteKeyRequestProto
operator|.
name|Builder
name|delRequest
init|=
name|ContainerProtos
operator|.
name|DeleteKeyRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|delRequest
operator|.
name|setBlockID
argument_list|(
name|putKeyRequest
operator|.
name|getKeyData
argument_list|()
operator|.
name|getBlockID
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|DeleteKey
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDeleteKey
argument_list|(
name|delRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a close container request.    * @param pipeline - pipeline    * @param containerID - ID of the container.    * @return ContainerCommandRequestProto.    */
DECL|method|getCloseContainer ( Pipeline pipeline, long containerID)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getCloseContainer
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|long
name|containerID
parameter_list|)
block|{
name|ContainerProtos
operator|.
name|CloseContainerRequestProto
name|closeRequest
init|=
name|ContainerProtos
operator|.
name|CloseContainerRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|cmd
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CloseContainer
argument_list|)
operator|.
name|setCloseContainer
argument_list|(
name|closeRequest
argument_list|)
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|cmd
return|;
block|}
comment|/**    * Returns a simple request without traceId.    * @param pipeline - pipeline    * @param containerID - ID of the container.    * @return ContainerCommandRequestProto without traceId.    */
DECL|method|getRequestWithoutTraceId ( Pipeline pipeline, long containerID)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getRequestWithoutTraceId
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|long
name|containerID
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|CloseContainerRequestProto
name|closeRequest
init|=
name|ContainerProtos
operator|.
name|CloseContainerRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|cmd
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CloseContainer
argument_list|)
operator|.
name|setCloseContainer
argument_list|(
name|closeRequest
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|cmd
return|;
block|}
comment|/**    * Returns a delete container request.    * @param pipeline - pipeline    * @return ContainerCommandRequestProto.    */
DECL|method|getDeleteContainer ( Pipeline pipeline, long containerID, boolean forceDelete)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getDeleteContainer
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|long
name|containerID
parameter_list|,
name|boolean
name|forceDelete
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|DeleteContainerRequestProto
name|deleteRequest
init|=
name|ContainerProtos
operator|.
name|DeleteContainerRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
operator|.
name|setForceDelete
argument_list|(
name|forceDelete
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|DeleteContainer
argument_list|)
operator|.
name|setDeleteContainer
argument_list|(
name|deleteRequest
argument_list|)
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|sleep (long milliseconds)
specifier|private
specifier|static
name|void
name|sleep
parameter_list|(
name|long
name|milliseconds
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|milliseconds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getTestBlockID (long containerID)
specifier|public
specifier|static
name|BlockID
name|getTestBlockID
parameter_list|(
name|long
name|containerID
parameter_list|)
block|{
comment|// Add 2ms delay so that localID based on UtcTime
comment|// won't collide.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
operator|new
name|BlockID
argument_list|(
name|containerID
argument_list|,
name|Time
operator|.
name|getUtcTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getTestContainerID ()
specifier|public
specifier|static
name|long
name|getTestContainerID
parameter_list|()
block|{
return|return
name|Time
operator|.
name|getUtcTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

