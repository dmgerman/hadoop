begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|ContainerCommandResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|ratis
operator|.
name|RatisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|token
operator|.
name|OzoneBlockTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|HddsDatanodeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|BlockOutputStreamEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|KeyOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|OzoneChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|XceiverServerSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
operator|.
name|XceiverServerRatis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|impl
operator|.
name|RaftServerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|impl
operator|.
name|RaftServerProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helpers for container tests.  */
end_comment

begin_class
DECL|class|ContainerTestHelper
specifier|public
specifier|final
class|class
name|ContainerTestHelper
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerTestHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|r
specifier|private
specifier|static
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|CONTAINER_MAX_SIZE
specifier|public
specifier|static
specifier|final
name|long
name|CONTAINER_MAX_SIZE
init|=
operator|(
name|long
operator|)
name|StorageUnit
operator|.
name|GB
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**    * Never constructed.    */
DECL|method|ContainerTestHelper ()
specifier|private
name|ContainerTestHelper
parameter_list|()
block|{   }
comment|// TODO: mock multi-node pipeline
comment|/**    * Create a pipeline with single node replica.    *    * @return Pipeline with single node in it.    * @throws IOException    */
DECL|method|createSingleNodePipeline ()
specifier|public
specifier|static
name|Pipeline
name|createSingleNodePipeline
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createPipeline
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|createLocalAddress ()
specifier|public
specifier|static
name|String
name|createLocalAddress
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ServerSocket
name|s
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
init|)
block|{
return|return
literal|"127.0.0.1:"
operator|+
name|s
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
block|}
DECL|method|createDatanodeDetails ()
specifier|public
specifier|static
name|DatanodeDetails
name|createDatanodeDetails
parameter_list|()
throws|throws
name|IOException
block|{
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|socket
operator|.
name|getLocalPort
argument_list|()
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|containerPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|STANDALONE
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|ratisPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|RATIS
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|DatanodeDetails
operator|.
name|Port
name|restPort
init|=
name|DatanodeDetails
operator|.
name|newPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|REST
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|DatanodeDetails
name|datanodeDetails
init|=
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUuid
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setIpAddress
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
operator|.
name|setHostName
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|addPort
argument_list|(
name|containerPort
argument_list|)
operator|.
name|addPort
argument_list|(
name|ratisPort
argument_list|)
operator|.
name|addPort
argument_list|(
name|restPort
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|datanodeDetails
return|;
block|}
comment|/**    * Create a pipeline with single node replica.    *    * @return Pipeline with single node in it.    * @throws IOException    */
DECL|method|createPipeline (int numNodes)
specifier|public
specifier|static
name|Pipeline
name|createPipeline
parameter_list|(
name|int
name|numNodes
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|numNodes
operator|>=
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numNodes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|createDatanodeDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|createPipeline
argument_list|(
name|ids
argument_list|)
return|;
block|}
DECL|method|createPipeline ( Iterable<DatanodeDetails> ids)
specifier|public
specifier|static
name|Pipeline
name|createPipeline
parameter_list|(
name|Iterable
argument_list|<
name|DatanodeDetails
argument_list|>
name|ids
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ids
argument_list|,
literal|"ids == null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|ids
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|dns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ids
operator|.
name|forEach
argument_list|(
name|dns
operator|::
name|add
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
argument_list|)
operator|.
name|setId
argument_list|(
name|PipelineID
operator|.
name|randomId
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|setFactor
argument_list|(
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setNodes
argument_list|(
name|dns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|pipeline
return|;
block|}
comment|/**    * Creates a ChunkInfo for testing.    *    * @param keyID - ID of the key    * @param seqNo - Chunk number.    * @return ChunkInfo    * @throws IOException    */
DECL|method|getChunk (long keyID, int seqNo, long offset, long len)
specifier|public
specifier|static
name|ChunkInfo
name|getChunk
parameter_list|(
name|long
name|keyID
parameter_list|,
name|int
name|seqNo
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|ChunkInfo
name|info
init|=
operator|new
name|ChunkInfo
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d.data.%d"
argument_list|,
name|keyID
argument_list|,
name|seqNo
argument_list|)
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Generates some data of the requested len.    *    * @param len - Number of bytes.    * @return byte array with valid data.    */
DECL|method|getData (int len)
specifier|public
specifier|static
name|ByteBuffer
name|getData
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**    * Computes the hash and sets the value correctly.    *    * @param info - chunk info.    * @param data - data array    * @throws NoSuchAlgorithmException    */
DECL|method|setDataChecksum (ChunkInfo info, ByteBuffer data)
specifier|public
specifier|static
name|void
name|setDataChecksum
parameter_list|(
name|ChunkInfo
name|info
parameter_list|,
name|ByteBuffer
name|data
parameter_list|)
throws|throws
name|OzoneChecksumException
block|{
name|Checksum
name|checksum
init|=
operator|new
name|Checksum
argument_list|()
decl_stmt|;
name|info
operator|.
name|setChecksumData
argument_list|(
name|checksum
operator|.
name|computeChecksum
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a writeChunk Request.    *    * @param pipeline - A set of machines where this container lives.    * @param blockID - Block ID of the chunk.    * @param datalen - Length of data.    * @return ContainerCommandRequestProto    * @throws IOException    * @throws NoSuchAlgorithmException    */
DECL|method|getWriteChunkRequest ( Pipeline pipeline, BlockID blockID, int datalen)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getWriteChunkRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|int
name|datalen
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"writeChunk {} (blockID={}) to pipeline="
argument_list|,
name|datalen
argument_list|,
name|blockID
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
operator|.
name|Builder
name|writeRequest
init|=
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|writeRequest
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|writeRequest
operator|.
name|setChunkData
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|writeRequest
operator|.
name|setData
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setWriteChunk
argument_list|(
name|writeRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns PutSmallFile Request that we can send to the container.    *    * @param pipeline - Pipeline    * @param blockID - Block ID of the small file.    * @param dataLen - Number of bytes in the data    * @return ContainerCommandRequestProto    */
DECL|method|getWriteSmallFileRequest ( Pipeline pipeline, BlockID blockID, int dataLen)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getWriteSmallFileRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|BlockID
name|blockID
parameter_list|,
name|int
name|dataLen
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerProtos
operator|.
name|PutSmallFileRequestProto
operator|.
name|Builder
name|smallFileRequest
init|=
name|ContainerProtos
operator|.
name|PutSmallFileRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ByteBuffer
name|data
init|=
name|getData
argument_list|(
name|dataLen
argument_list|)
decl_stmt|;
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|dataLen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|PutBlockRequestProto
operator|.
name|Builder
name|putRequest
init|=
name|ContainerProtos
operator|.
name|PutBlockRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|BlockData
name|blockData
init|=
operator|new
name|BlockData
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|newList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|newList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setChunks
argument_list|(
name|newList
argument_list|)
expr_stmt|;
name|putRequest
operator|.
name|setBlockData
argument_list|(
name|blockData
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|smallFileRequest
operator|.
name|setChunkInfo
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|smallFileRequest
operator|.
name|setData
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|smallFileRequest
operator|.
name|setBlock
argument_list|(
name|putRequest
argument_list|)
expr_stmt|;
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutSmallFile
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPutSmallFile
argument_list|(
name|smallFileRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getReadSmallFileRequest ( Pipeline pipeline, ContainerProtos.PutBlockRequestProto putKey)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getReadSmallFileRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|PutBlockRequestProto
name|putKey
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerProtos
operator|.
name|GetSmallFileRequestProto
operator|.
name|Builder
name|smallFileRequest
init|=
name|ContainerProtos
operator|.
name|GetSmallFileRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|ContainerCommandRequestProto
name|getKey
init|=
name|getBlockRequest
argument_list|(
name|pipeline
argument_list|,
name|putKey
argument_list|)
decl_stmt|;
name|smallFileRequest
operator|.
name|setBlock
argument_list|(
name|getKey
operator|.
name|getGetBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|GetSmallFile
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|getKey
operator|.
name|getGetBlock
argument_list|()
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setGetSmallFile
argument_list|(
name|smallFileRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a read Request.    *    * @param pipeline pipeline.    * @param request writeChunkRequest.    * @return Request.    * @throws IOException    * @throws NoSuchAlgorithmException    */
DECL|method|getReadChunkRequest ( Pipeline pipeline, ContainerProtos.WriteChunkRequestProto request)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getReadChunkRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"readChunk blockID={} from pipeline={}"
argument_list|,
name|request
operator|.
name|getBlockID
argument_list|()
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ReadChunkRequestProto
operator|.
name|Builder
name|readRequest
init|=
name|ContainerProtos
operator|.
name|ReadChunkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|readRequest
operator|.
name|setBlockID
argument_list|(
name|request
operator|.
name|getBlockID
argument_list|()
argument_list|)
expr_stmt|;
name|readRequest
operator|.
name|setChunkData
argument_list|(
name|request
operator|.
name|getChunkData
argument_list|()
argument_list|)
expr_stmt|;
name|Builder
name|newRequest
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|newRequest
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|ReadChunk
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|setContainerID
argument_list|(
name|readRequest
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|setReadChunk
argument_list|(
name|readRequest
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newRequest
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a delete Request.    *    * @param pipeline pipeline.    * @param writeRequest - write request    * @return request    * @throws IOException    * @throws NoSuchAlgorithmException    */
DECL|method|getDeleteChunkRequest ( Pipeline pipeline, ContainerProtos.WriteChunkRequestProto writeRequest)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getDeleteChunkRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
name|writeRequest
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"deleteChunk blockID={} from pipeline={}"
argument_list|,
name|writeRequest
operator|.
name|getBlockID
argument_list|()
argument_list|,
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|DeleteChunkRequestProto
operator|.
name|Builder
name|deleteRequest
init|=
name|ContainerProtos
operator|.
name|DeleteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|deleteRequest
operator|.
name|setChunkData
argument_list|(
name|writeRequest
operator|.
name|getChunkData
argument_list|()
argument_list|)
expr_stmt|;
name|deleteRequest
operator|.
name|setBlockID
argument_list|(
name|writeRequest
operator|.
name|getBlockID
argument_list|()
argument_list|)
expr_stmt|;
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|DeleteChunk
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|writeRequest
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDeleteChunk
argument_list|(
name|deleteRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a create container command for test purposes. There are a bunch of    * tests where we need to just send a request and get a reply.    *    * @return ContainerCommandRequestProto.    */
DECL|method|getCreateContainerRequest ( long containerID, Pipeline pipeline)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getCreateContainerRequest
parameter_list|(
name|long
name|containerID
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"addContainer: {}"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
return|return
name|getContainerCommandRequestBuilder
argument_list|(
name|containerID
argument_list|,
name|pipeline
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a create container command with token. There are a bunch of    * tests where we need to just send a request and get a reply.    *    * @return ContainerCommandRequestProto.    */
DECL|method|getCreateContainerRequest ( long containerID, Pipeline pipeline, Token token)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getCreateContainerRequest
parameter_list|(
name|long
name|containerID
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|,
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"addContainer: {}"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
return|return
name|getContainerCommandRequestBuilder
argument_list|(
name|containerID
argument_list|,
name|pipeline
argument_list|)
operator|.
name|setEncodedToken
argument_list|(
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getContainerCommandRequestBuilder (long containerID, Pipeline pipeline)
specifier|private
specifier|static
name|Builder
name|getContainerCommandRequestBuilder
parameter_list|(
name|long
name|containerID
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CreateContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreateContainer
argument_list|(
name|ContainerProtos
operator|.
name|CreateContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
comment|/**    * Returns a create container command for test purposes. There are a bunch of    * tests where we need to just send a request and get a reply.    *    * @return ContainerCommandRequestProto.    */
DECL|method|getCreateContainerSecureRequest ( long containerID, Pipeline pipeline, Token<OzoneBlockTokenIdentifier> token)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getCreateContainerSecureRequest
parameter_list|(
name|long
name|containerID
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|,
name|Token
argument_list|<
name|OzoneBlockTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"addContainer: {}"
argument_list|,
name|containerID
argument_list|)
expr_stmt|;
name|Builder
name|request
init|=
name|getContainerCommandRequestBuilder
argument_list|(
name|containerID
argument_list|,
name|pipeline
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setEncodedToken
argument_list|(
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Return an update container command for test purposes.    * Creates a container data based on the given meta data,    * and request to update an existing container with it.    *    * @param containerID    * @param metaData    * @return    * @throws IOException    */
DECL|method|getUpdateContainerRequest ( long containerID, Map<String, String> metaData)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getUpdateContainerRequest
parameter_list|(
name|long
name|containerID
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerProtos
operator|.
name|UpdateContainerRequestProto
operator|.
name|Builder
name|updateRequestBuilder
init|=
name|ContainerProtos
operator|.
name|UpdateContainerRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|String
index|[]
name|keys
init|=
name|metaData
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|KeyValue
operator|.
name|Builder
name|kvBuilder
init|=
name|KeyValue
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|kvBuilder
operator|.
name|setKey
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|kvBuilder
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|get
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|updateRequestBuilder
operator|.
name|addMetadata
argument_list|(
name|kvBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Pipeline
name|pipeline
init|=
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
argument_list|()
decl_stmt|;
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|UpdateContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUpdateContainer
argument_list|(
name|updateRequestBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a create container response for test purposes. There are a bunch of    * tests where we need to just send a request and get a reply.    *    * @return ContainerCommandRequestProto.    */
specifier|public
specifier|static
name|ContainerCommandResponseProto
DECL|method|getCreateContainerResponse (ContainerCommandRequestProto request)
name|getCreateContainerResponse
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|)
block|{
name|ContainerCommandResponseProto
operator|.
name|Builder
name|response
init|=
name|ContainerCommandResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|response
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CreateContainer
argument_list|)
expr_stmt|;
name|response
operator|.
name|setTraceID
argument_list|(
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCreateContainer
argument_list|(
name|ContainerProtos
operator|.
name|CreateContainerResponseProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns the PutBlockRequest for test purpose.    * @param pipeline - pipeline.    * @param writeRequest - Write Chunk Request.    * @return - Request    */
DECL|method|getPutBlockRequest ( Pipeline pipeline, ContainerProtos.WriteChunkRequestProto writeRequest)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getPutBlockRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
name|writeRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"putBlock: {} to pipeline={}"
argument_list|,
name|writeRequest
operator|.
name|getBlockID
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|PutBlockRequestProto
operator|.
name|Builder
name|putRequest
init|=
name|ContainerProtos
operator|.
name|PutBlockRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|BlockData
name|blockData
init|=
operator|new
name|BlockData
argument_list|(
name|BlockID
operator|.
name|getFromProtobuf
argument_list|(
name|writeRequest
operator|.
name|getBlockID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|newList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|newList
operator|.
name|add
argument_list|(
name|writeRequest
operator|.
name|getChunkData
argument_list|()
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setChunks
argument_list|(
name|newList
argument_list|)
expr_stmt|;
name|blockData
operator|.
name|setBlockCommitSequenceId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|putRequest
operator|.
name|setBlockData
argument_list|(
name|blockData
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|blockData
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPutBlock
argument_list|(
name|putRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Gets a GetBlockRequest for test purpose.    * @param  pipeline - pipeline    * @param putBlockRequest - putBlockRequest.    * @return - Request    * immediately.    */
DECL|method|getBlockRequest ( Pipeline pipeline, ContainerProtos.PutBlockRequestProto putBlockRequest)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getBlockRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|PutBlockRequestProto
name|putBlockRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerProtos
operator|.
name|DatanodeBlockID
name|blockID
init|=
name|putBlockRequest
operator|.
name|getBlockData
argument_list|()
operator|.
name|getBlockID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"getKey: blockID={}"
argument_list|,
name|blockID
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|GetBlockRequestProto
operator|.
name|Builder
name|getRequest
init|=
name|ContainerProtos
operator|.
name|GetBlockRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|getRequest
operator|.
name|setBlockID
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|GetBlock
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setGetBlock
argument_list|(
name|getRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Verify the response against the request.    *    * @param request - Request    * @param response - Response    */
DECL|method|verifyGetBlock (ContainerCommandRequestProto request, ContainerCommandResponseProto response, int expectedChunksCount)
specifier|public
specifier|static
name|void
name|verifyGetBlock
parameter_list|(
name|ContainerCommandRequestProto
name|request
parameter_list|,
name|ContainerCommandResponseProto
name|response
parameter_list|,
name|int
name|expectedChunksCount
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerProtos
operator|.
name|Result
operator|.
name|SUCCESS
argument_list|,
name|response
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedChunksCount
argument_list|,
name|response
operator|.
name|getGetBlock
argument_list|()
operator|.
name|getBlockData
argument_list|()
operator|.
name|getChunksCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param pipeline - pipeline.    * @param putBlockRequest - putBlockRequest.    * @return - Request    */
DECL|method|getDeleteBlockRequest ( Pipeline pipeline, ContainerProtos.PutBlockRequestProto putBlockRequest)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getDeleteBlockRequest
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|ContainerProtos
operator|.
name|PutBlockRequestProto
name|putBlockRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerProtos
operator|.
name|DatanodeBlockID
name|blockID
init|=
name|putBlockRequest
operator|.
name|getBlockData
argument_list|()
operator|.
name|getBlockID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"deleteBlock: name={}"
argument_list|,
name|blockID
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|DeleteBlockRequestProto
operator|.
name|Builder
name|delRequest
init|=
name|ContainerProtos
operator|.
name|DeleteBlockRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|delRequest
operator|.
name|setBlockID
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
name|Builder
name|request
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|DeleteBlock
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDeleteBlock
argument_list|(
name|delRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Returns a close container request.    * @param pipeline - pipeline    * @param containerID - ID of the container.    * @return ContainerCommandRequestProto.    */
DECL|method|getCloseContainer ( Pipeline pipeline, long containerID)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getCloseContainer
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|cmd
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CloseContainer
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
operator|.
name|setCloseContainer
argument_list|(
name|ContainerProtos
operator|.
name|CloseContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|cmd
return|;
block|}
comment|/**    * Returns a simple request without traceId.    * @param pipeline - pipeline    * @param containerID - ID of the container.    * @return ContainerCommandRequestProto without traceId.    */
DECL|method|getRequestWithoutTraceId ( Pipeline pipeline, long containerID)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getRequestWithoutTraceId
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|cmd
init|=
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CloseContainer
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
operator|.
name|setCloseContainer
argument_list|(
name|ContainerProtos
operator|.
name|CloseContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|cmd
return|;
block|}
comment|/**    * Returns a delete container request.    * @param pipeline - pipeline    * @return ContainerCommandRequestProto.    */
DECL|method|getDeleteContainer ( Pipeline pipeline, long containerID, boolean forceDelete)
specifier|public
specifier|static
name|ContainerCommandRequestProto
name|getDeleteContainer
parameter_list|(
name|Pipeline
name|pipeline
parameter_list|,
name|long
name|containerID
parameter_list|,
name|boolean
name|forceDelete
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|DeleteContainerRequestProto
name|deleteRequest
init|=
name|ContainerProtos
operator|.
name|DeleteContainerRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setForceDelete
argument_list|(
name|forceDelete
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|DeleteContainer
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
operator|.
name|setDeleteContainer
argument_list|(
name|ContainerProtos
operator|.
name|DeleteContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
operator|.
name|setDeleteContainer
argument_list|(
name|deleteRequest
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|sleep (long milliseconds)
specifier|private
specifier|static
name|void
name|sleep
parameter_list|(
name|long
name|milliseconds
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|milliseconds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getTestBlockID (long containerID)
specifier|public
specifier|static
name|BlockID
name|getTestBlockID
parameter_list|(
name|long
name|containerID
parameter_list|)
block|{
comment|// Add 2ms delay so that localID based on UtcTime
comment|// won't collide.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
operator|new
name|BlockID
argument_list|(
name|containerID
argument_list|,
name|HddsUtils
operator|.
name|getUtcTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getTestContainerID ()
specifier|public
specifier|static
name|long
name|getTestContainerID
parameter_list|()
block|{
return|return
name|HddsUtils
operator|.
name|getUtcTime
argument_list|()
return|;
block|}
DECL|method|isContainerClosed (MiniOzoneCluster cluster, long containerID, DatanodeDetails datanode)
specifier|public
specifier|static
name|boolean
name|isContainerClosed
parameter_list|(
name|MiniOzoneCluster
name|cluster
parameter_list|,
name|long
name|containerID
parameter_list|,
name|DatanodeDetails
name|datanode
parameter_list|)
block|{
name|ContainerData
name|containerData
decl_stmt|;
for|for
control|(
name|HddsDatanodeService
name|datanodeService
range|:
name|cluster
operator|.
name|getHddsDatanodes
argument_list|()
control|)
block|{
if|if
condition|(
name|datanode
operator|.
name|equals
argument_list|(
name|datanodeService
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
condition|)
block|{
name|Container
name|container
init|=
name|datanodeService
operator|.
name|getDatanodeStateMachine
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerSet
argument_list|()
operator|.
name|getContainer
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|containerData
operator|=
name|container
operator|.
name|getContainerData
argument_list|()
expr_stmt|;
return|return
name|containerData
operator|.
name|isClosed
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isContainerPresent (MiniOzoneCluster cluster, long containerID, DatanodeDetails datanode)
specifier|public
specifier|static
name|boolean
name|isContainerPresent
parameter_list|(
name|MiniOzoneCluster
name|cluster
parameter_list|,
name|long
name|containerID
parameter_list|,
name|DatanodeDetails
name|datanode
parameter_list|)
block|{
for|for
control|(
name|HddsDatanodeService
name|datanodeService
range|:
name|cluster
operator|.
name|getHddsDatanodes
argument_list|()
control|)
block|{
if|if
condition|(
name|datanode
operator|.
name|equals
argument_list|(
name|datanodeService
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
condition|)
block|{
name|Container
name|container
init|=
name|datanodeService
operator|.
name|getDatanodeStateMachine
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerSet
argument_list|()
operator|.
name|getContainer
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|createKey (String keyName, ReplicationType type, long size, ObjectStore objectStore, String volumeName, String bucketName)
specifier|public
specifier|static
name|OzoneOutputStream
name|createKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|ReplicationType
name|type
parameter_list|,
name|long
name|size
parameter_list|,
name|ObjectStore
name|objectStore
parameter_list|,
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
name|factor
init|=
name|type
operator|==
name|ReplicationType
operator|.
name|STAND_ALONE
condition|?
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
operator|.
name|ONE
else|:
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
operator|.
name|THREE
decl_stmt|;
return|return
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|factor
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createKey (String keyName, ReplicationType type, org.apache.hadoop.hdds.client.ReplicationFactor factor, long size, ObjectStore objectStore, String volumeName, String bucketName)
specifier|public
specifier|static
name|OzoneOutputStream
name|createKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|ReplicationType
name|type
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
name|factor
parameter_list|,
name|long
name|size
parameter_list|,
name|ObjectStore
name|objectStore
parameter_list|,
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|factor
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
DECL|method|validateData (String keyName, byte[] data, ObjectStore objectStore, String volumeName, String bucketName)
specifier|public
specifier|static
name|void
name|validateData
parameter_list|(
name|String
name|keyName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|ObjectStore
name|objectStore
parameter_list|,
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|data
operator|.
name|length
index|]
decl_stmt|;
name|OzoneInputStream
name|is
init|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|is
operator|.
name|read
argument_list|(
name|readData
argument_list|)
expr_stmt|;
name|MessageDigest
name|sha1
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
name|sha1
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|MessageDigest
name|sha2
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
name|sha2
operator|.
name|update
argument_list|(
name|readData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|sha1
operator|.
name|digest
argument_list|()
argument_list|,
name|sha2
operator|.
name|digest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getFixedLengthString (String string, int length)
specifier|public
specifier|static
name|String
name|getFixedLengthString
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%1$"
operator|+
name|length
operator|+
literal|"s"
argument_list|,
name|string
argument_list|)
return|;
block|}
DECL|method|waitForContainerClose (OzoneOutputStream outputStream, MiniOzoneCluster cluster)
specifier|public
specifier|static
name|void
name|waitForContainerClose
parameter_list|(
name|OzoneOutputStream
name|outputStream
parameter_list|,
name|MiniOzoneCluster
name|cluster
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|outputStream
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockOutputStreamEntry
argument_list|>
name|streamEntryList
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|containerIdList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockOutputStreamEntry
name|entry
range|:
name|streamEntryList
control|)
block|{
name|long
name|id
init|=
name|entry
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|containerIdList
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|containerIdList
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|containerIdList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|waitForContainerClose
argument_list|(
name|cluster
argument_list|,
name|containerIdList
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForPipelineClose (OzoneOutputStream outputStream, MiniOzoneCluster cluster, boolean waitForContainerCreation)
specifier|public
specifier|static
name|void
name|waitForPipelineClose
parameter_list|(
name|OzoneOutputStream
name|outputStream
parameter_list|,
name|MiniOzoneCluster
name|cluster
parameter_list|,
name|boolean
name|waitForContainerCreation
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|outputStream
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockOutputStreamEntry
argument_list|>
name|streamEntryList
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|containerIdList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockOutputStreamEntry
name|entry
range|:
name|streamEntryList
control|)
block|{
name|long
name|id
init|=
name|entry
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|containerIdList
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|containerIdList
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|containerIdList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|waitForPipelineClose
argument_list|(
name|cluster
argument_list|,
name|waitForContainerCreation
argument_list|,
name|containerIdList
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForPipelineClose (MiniOzoneCluster cluster, boolean waitForContainerCreation, Long... containerIdList)
specifier|public
specifier|static
name|void
name|waitForPipelineClose
parameter_list|(
name|MiniOzoneCluster
name|cluster
parameter_list|,
name|boolean
name|waitForContainerCreation
parameter_list|,
name|Long
modifier|...
name|containerIdList
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelineList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|containerID
range|:
name|containerIdList
control|)
block|{
name|ContainerInfo
name|container
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getPipelineManager
argument_list|()
operator|.
name|getPipeline
argument_list|(
name|container
operator|.
name|getPipelineID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pipelineList
operator|.
name|contains
argument_list|(
name|pipeline
argument_list|)
condition|)
block|{
name|pipelineList
operator|.
name|add
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
name|pipeline
operator|.
name|getNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|waitForContainerCreation
condition|)
block|{
for|for
control|(
name|DatanodeDetails
name|details
range|:
name|datanodes
control|)
block|{
comment|// Client will issue write chunk and it will create the container on
comment|// datanodes.
comment|// wait for the container to be created
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|isContainerPresent
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|details
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|100
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isContainerPresent
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|details
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the container gets created first
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ContainerTestHelper
operator|.
name|isContainerClosed
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|details
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|waitForPipelineClose
argument_list|(
name|pipelineList
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForPipelineClose (List<Pipeline> pipelineList, MiniOzoneCluster cluster)
specifier|public
specifier|static
name|void
name|waitForPipelineClose
parameter_list|(
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelineList
parameter_list|,
name|MiniOzoneCluster
name|cluster
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
for|for
control|(
name|Pipeline
name|pipeline1
range|:
name|pipelineList
control|)
block|{
comment|// issue pipeline destroy command
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getPipelineManager
argument_list|()
operator|.
name|finalizeAndDestroyPipeline
argument_list|(
name|pipeline1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// wait for the pipeline to get destroyed in the datanodes
for|for
control|(
name|Pipeline
name|pipeline
range|:
name|pipelineList
control|)
block|{
for|for
control|(
name|DatanodeDetails
name|dn
range|:
name|pipeline
operator|.
name|getNodes
argument_list|()
control|)
block|{
name|XceiverServerSpi
name|server
init|=
name|cluster
operator|.
name|getHddsDatanodes
argument_list|()
operator|.
name|get
argument_list|(
name|cluster
operator|.
name|getHddsDatanodeIndex
argument_list|(
name|dn
argument_list|)
argument_list|)
operator|.
name|getDatanodeStateMachine
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getWriteChannel
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|server
operator|instanceof
name|XceiverServerRatis
argument_list|)
expr_stmt|;
name|XceiverServerRatis
name|raftServer
init|=
operator|(
name|XceiverServerRatis
operator|)
name|server
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
operator|(
operator|!
name|raftServer
operator|.
name|getPipelineIds
argument_list|()
operator|.
name|contains
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
argument_list|,
literal|500
argument_list|,
literal|100
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForContainerClose (MiniOzoneCluster cluster, Long... containerIdList)
specifier|public
specifier|static
name|void
name|waitForContainerClose
parameter_list|(
name|MiniOzoneCluster
name|cluster
parameter_list|,
name|Long
modifier|...
name|containerIdList
parameter_list|)
throws|throws
name|ContainerNotFoundException
throws|,
name|PipelineNotFoundException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelineList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|containerID
range|:
name|containerIdList
control|)
block|{
name|ContainerInfo
name|container
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getPipelineManager
argument_list|()
operator|.
name|getPipeline
argument_list|(
name|container
operator|.
name|getPipelineID
argument_list|()
argument_list|)
decl_stmt|;
name|pipelineList
operator|.
name|add
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
name|pipeline
operator|.
name|getNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDetails
name|details
range|:
name|datanodes
control|)
block|{
comment|// Client will issue write chunk and it will create the container on
comment|// datanodes.
comment|// wait for the container to be created
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|isContainerPresent
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|details
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|100
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isContainerPresent
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|details
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the container gets created first
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ContainerTestHelper
operator|.
name|isContainerClosed
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|details
argument_list|)
argument_list|)
expr_stmt|;
comment|// send the order to close the container
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getEventQueue
argument_list|()
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
argument_list|,
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|containerID
range|:
name|containerIdList
control|)
block|{
name|Pipeline
name|pipeline
init|=
name|pipelineList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
name|pipeline
operator|.
name|getNodes
argument_list|()
decl_stmt|;
comment|// Below condition avoids the case where container has been allocated
comment|// but not yet been used by the client. In such a case container is never
comment|// created.
for|for
control|(
name|DatanodeDetails
name|datanodeDetails
range|:
name|datanodes
control|)
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|isContainerClosed
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|datanodeDetails
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|//double check if it's really closed
comment|// (waitFor also throws an exception)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isContainerClosed
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|datanodeDetails
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
block|}
DECL|method|getStateMachine (MiniOzoneCluster cluster)
specifier|public
specifier|static
name|StateMachine
name|getStateMachine
parameter_list|(
name|MiniOzoneCluster
name|cluster
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getStateMachine
argument_list|(
name|cluster
operator|.
name|getHddsDatanodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getRaftServerImpl (HddsDatanodeService dn, Pipeline pipeline)
specifier|private
specifier|static
name|RaftServerImpl
name|getRaftServerImpl
parameter_list|(
name|HddsDatanodeService
name|dn
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|Exception
block|{
name|XceiverServerSpi
name|server
init|=
name|dn
operator|.
name|getDatanodeStateMachine
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getWriteChannel
argument_list|()
decl_stmt|;
name|RaftServerProxy
name|proxy
init|=
call|(
name|RaftServerProxy
call|)
argument_list|(
operator|(
operator|(
name|XceiverServerRatis
operator|)
name|server
operator|)
operator|.
name|getServer
argument_list|()
argument_list|)
decl_stmt|;
name|RaftGroupId
name|groupId
init|=
name|pipeline
operator|==
literal|null
condition|?
name|proxy
operator|.
name|getGroupIds
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
else|:
name|RatisHelper
operator|.
name|newRaftGroup
argument_list|(
name|pipeline
argument_list|)
operator|.
name|getGroupId
argument_list|()
decl_stmt|;
return|return
name|proxy
operator|.
name|getImpl
argument_list|(
name|groupId
argument_list|)
return|;
block|}
DECL|method|getStateMachine (HddsDatanodeService dn, Pipeline pipeline)
specifier|public
specifier|static
name|StateMachine
name|getStateMachine
parameter_list|(
name|HddsDatanodeService
name|dn
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRaftServerImpl
argument_list|(
name|dn
argument_list|,
name|pipeline
argument_list|)
operator|.
name|getStateMachine
argument_list|()
return|;
block|}
DECL|method|isRatisLeader (HddsDatanodeService dn, Pipeline pipeline)
specifier|public
specifier|static
name|boolean
name|isRatisLeader
parameter_list|(
name|HddsDatanodeService
name|dn
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRaftServerImpl
argument_list|(
name|dn
argument_list|,
name|pipeline
argument_list|)
operator|.
name|isLeader
argument_list|()
return|;
block|}
DECL|method|isRatisFollower (HddsDatanodeService dn, Pipeline pipeline)
specifier|public
specifier|static
name|boolean
name|isRatisFollower
parameter_list|(
name|HddsDatanodeService
name|dn
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getRaftServerImpl
argument_list|(
name|dn
argument_list|,
name|pipeline
argument_list|)
operator|.
name|isFollower
argument_list|()
return|;
block|}
block|}
end_class

end_unit

