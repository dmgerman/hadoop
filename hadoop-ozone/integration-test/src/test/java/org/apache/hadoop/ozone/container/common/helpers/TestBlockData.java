begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_comment
comment|/**  * Tests to test block deleting service.  */
end_comment

begin_class
DECL|class|TestBlockData
specifier|public
class|class
name|TestBlockData
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBlockData
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|TestRule
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
DECL|method|buildChunkInfo (String name, long offset, long len)
specifier|static
name|ContainerProtos
operator|.
name|ChunkInfo
name|buildChunkInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|len
parameter_list|)
block|{
return|return
name|ContainerProtos
operator|.
name|ChunkInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setChunkName
argument_list|(
name|name
argument_list|)
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
operator|.
name|setLen
argument_list|(
name|len
argument_list|)
operator|.
name|setChecksumData
argument_list|(
name|Checksum
operator|.
name|getNoChecksumDataProto
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testAddAndRemove ()
specifier|public
name|void
name|testAddAndRemove
parameter_list|()
block|{
specifier|final
name|BlockData
name|computed
init|=
operator|new
name|BlockData
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertChunks
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|offset
operator|+=
name|assertAddChunk
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
operator|!
name|expected
operator|.
name|isEmpty
argument_list|()
condition|;
control|)
block|{
name|removeChunk
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|chunkCount
specifier|private
specifier|static
name|int
name|chunkCount
init|=
literal|0
decl_stmt|;
DECL|method|addChunk ( List<ContainerProtos.ChunkInfo> expected, long offset)
specifier|static
name|ContainerProtos
operator|.
name|ChunkInfo
name|addChunk
parameter_list|(
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|expected
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
specifier|final
name|long
name|length
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|ContainerProtos
operator|.
name|ChunkInfo
name|info
init|=
name|buildChunkInfo
argument_list|(
literal|"c"
operator|+
operator|++
name|chunkCount
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|method|assertAddChunk (List<ContainerProtos.ChunkInfo> expected, BlockData computed, long offset)
specifier|static
name|long
name|assertAddChunk
parameter_list|(
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|expected
parameter_list|,
name|BlockData
name|computed
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
specifier|final
name|ContainerProtos
operator|.
name|ChunkInfo
name|info
init|=
name|addChunk
argument_list|(
name|expected
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"addChunk: "
operator|+
name|toString
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|computed
operator|.
name|addChunk
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertChunks
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
return|return
name|info
operator|.
name|getLen
argument_list|()
return|;
block|}
DECL|method|removeChunk (List<ContainerProtos.ChunkInfo> expected, BlockData computed)
specifier|static
name|void
name|removeChunk
parameter_list|(
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|expected
parameter_list|,
name|BlockData
name|computed
parameter_list|)
block|{
specifier|final
name|int
name|i
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ContainerProtos
operator|.
name|ChunkInfo
name|info
init|=
name|expected
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"removeChunk: "
operator|+
name|toString
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|computed
operator|.
name|removeChunk
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertChunks
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
block|}
DECL|method|assertChunks (List<ContainerProtos.ChunkInfo> expected, BlockData computed)
specifier|static
name|void
name|assertChunks
parameter_list|(
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|expected
parameter_list|,
name|BlockData
name|computed
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|computedChunks
init|=
name|computed
operator|.
name|getChunks
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"expected="
operator|+
name|expected
operator|+
literal|"\ncomputed="
operator|+
name|computedChunks
argument_list|,
name|expected
argument_list|,
name|computedChunks
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|i
lambda|->
name|i
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|,
name|computed
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toString (ContainerProtos.ChunkInfo info)
specifier|static
name|String
name|toString
parameter_list|(
name|ContainerProtos
operator|.
name|ChunkInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|getChunkName
argument_list|()
operator|+
literal|":"
operator|+
name|info
operator|.
name|getOffset
argument_list|()
operator|+
literal|","
operator|+
name|info
operator|.
name|getLen
argument_list|()
return|;
block|}
DECL|method|toString (List<ContainerProtos.ChunkInfo> infos)
specifier|static
name|String
name|toString
parameter_list|(
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|infos
parameter_list|)
block|{
return|return
name|infos
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|TestBlockData
operator|::
name|toString
argument_list|)
operator|.
name|reduce
argument_list|(
parameter_list|(
name|left
parameter_list|,
name|right
parameter_list|)
lambda|->
name|left
operator|+
literal|", "
operator|+
name|right
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSetChunks ()
specifier|public
name|void
name|testSetChunks
parameter_list|()
block|{
specifier|final
name|BlockData
name|computed
init|=
operator|new
name|BlockData
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertChunks
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|offset
operator|+=
name|addChunk
argument_list|(
name|expected
argument_list|,
name|offset
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"setChunk: "
operator|+
name|toString
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|computed
operator|.
name|setChunks
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertChunks
argument_list|(
name|expected
argument_list|,
name|computed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

