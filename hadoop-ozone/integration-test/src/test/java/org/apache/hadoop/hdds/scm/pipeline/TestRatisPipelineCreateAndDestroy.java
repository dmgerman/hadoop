begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.pipeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|HddsDatanodeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL
import|;
end_import

begin_comment
comment|/**  * Tests for RatisPipelineUtils.  */
end_comment

begin_class
DECL|class|TestRatisPipelineCreateAndDestroy
specifier|public
class|class
name|TestRatisPipelineCreateAndDestroy
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
DECL|field|pipelineManager
specifier|private
specifier|static
name|PipelineManager
name|pipelineManager
decl_stmt|;
DECL|method|init (int numDatanodes)
specifier|public
name|void
name|init
parameter_list|(
name|int
name|numDatanodes
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|GenericTestUtils
operator|.
name|getRandomizedTempPath
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|setHbInterval
argument_list|(
literal|1000
argument_list|)
operator|.
name|setHbProcessorInterval
argument_list|(
literal|1000
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|StorageContainerManager
name|scm
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
decl_stmt|;
name|pipelineManager
operator|=
name|scm
operator|.
name|getPipelineManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testAutomaticPipelineCreationOnPipelineDestroy ()
specifier|public
name|void
name|testAutomaticPipelineCreationOnPipelineDestroy
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// make sure two pipelines are created
name|waitForPipelines
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelines
init|=
name|pipelineManager
operator|.
name|getPipelines
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
argument_list|)
decl_stmt|;
for|for
control|(
name|Pipeline
name|pipeline
range|:
name|pipelines
control|)
block|{
name|pipelineManager
operator|.
name|finalizeAndDestroyPipeline
argument_list|(
name|pipeline
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// make sure two pipelines are created
name|waitForPipelines
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testPipelineCreationOnNodeRestart ()
specifier|public
name|void
name|testPipelineCreationOnNodeRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|init
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// make sure a pipelines is created
name|waitForPipelines
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HddsDatanodeService
argument_list|>
name|dns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cluster
operator|.
name|getHddsDatanodes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelines
init|=
name|pipelineManager
operator|.
name|getPipelines
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
decl_stmt|;
for|for
control|(
name|HddsDatanodeService
name|dn
range|:
name|dns
control|)
block|{
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// try creating another pipeline now
try|try
block|{
name|pipelineManager
operator|.
name|createPipeline
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"pipeline creation should fail after shutting down pipeline"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// As now all datanodes are shutdown, they move to stale state, there
comment|// will be no sufficient datanodes to create the pipeline.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|InsufficientDatanodesException
argument_list|)
expr_stmt|;
block|}
comment|// make sure pipelines is destroyed
name|waitForPipelines
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|HddsDatanodeService
name|dn
range|:
name|dns
control|)
block|{
name|cluster
operator|.
name|restartHddsDatanode
argument_list|(
name|dn
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// destroy the existing pipelines
for|for
control|(
name|Pipeline
name|pipeline
range|:
name|pipelines
control|)
block|{
name|pipelineManager
operator|.
name|finalizeAndDestroyPipeline
argument_list|(
name|pipeline
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// make sure pipelines is created after node start
name|pipelineManager
operator|.
name|triggerPipelineCreation
argument_list|()
expr_stmt|;
name|waitForPipelines
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForPipelines (int numPipelines)
specifier|private
name|void
name|waitForPipelines
parameter_list|(
name|int
name|numPipelines
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|pipelineManager
operator|.
name|getPipelines
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|numPipelines
argument_list|,
literal|100
argument_list|,
literal|40000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

