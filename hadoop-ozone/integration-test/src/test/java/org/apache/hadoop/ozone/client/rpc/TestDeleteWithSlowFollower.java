begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|StorageContainerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|HddsDatanodeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|KeyOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|DatanodeStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|transport
operator|.
name|server
operator|.
name|ratis
operator|.
name|ContainerStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ozoneimpl
operator|.
name|OzoneContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_COMMAND_STATUS_REPORT_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_CONTAINER_REPORT_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_SCM_WATCHER_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_PIPELINE_DESTROY_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL
import|;
end_import

begin_comment
comment|/**  * Tests delete key operation with a slow follower in the datanode  * pipeline.  */
end_comment

begin_class
DECL|class|TestDeleteWithSlowFollower
specifier|public
class|class
name|TestDeleteWithSlowFollower
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|OzoneClient
name|client
decl_stmt|;
DECL|field|objectStore
specifier|private
specifier|static
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|volumeName
specifier|private
specifier|static
name|String
name|volumeName
decl_stmt|;
DECL|field|bucketName
specifier|private
specifier|static
name|String
name|bucketName
decl_stmt|;
DECL|field|path
specifier|private
specifier|static
name|String
name|path
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
specifier|static
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|path
operator|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestContainerStateMachineFailures
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|baseDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|HDDS_CONTAINER_REPORT_INTERVAL
argument_list|,
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// Make the stale, dead and server failure timeout higher so that a dead
comment|// node is not detecte at SCM as well as the pipeline close action
comment|// never gets initiated early at Datanode in the test.
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|HDDS_COMMAND_STATUS_REPORT_INTERVAL
argument_list|,
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|HDDS_SCM_WATCHER_TIMEOUT
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_DEADNODE_INTERVAL
argument_list|,
literal|2000
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_PIPELINE_DESTROY_TIMEOUT
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_SERVER_FAILURE_DURATION_KEY
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|3
argument_list|)
operator|.
name|setHbInterval
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
comment|//the easiest way to create an open container is creating a key
name|client
operator|=
name|OzoneClientFactory
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|objectStore
operator|=
name|client
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
name|xceiverClientManager
operator|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|volumeName
operator|=
literal|"testcontainerstatemachinefailures"
expr_stmt|;
name|bucketName
operator|=
name|volumeName
expr_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * The test simulates a slow follower by first writing key thereby creating a    * a container on 3 dns of the cluster. Then, a dn is shutdown and a close    * container cmd gets issued so that in the leader and the alive follower,    * container gets closed. And then, key is deleted and    * the node is started up again so that it    * rejoins the ring and starts applying the transaction from where it left    * by fetching the entries from the leader. Until and unless this follower    * catches up and its replica gets closed,    * the data is not deleted from any of the nodes which have the    * closed replica.    */
annotation|@
name|Test
DECL|method|testDeleteKeyWithSlowFollower ()
specifier|public
name|void
name|testDeleteKeyWithSlowFollower
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneOutputStream
name|key
init|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
operator|.
name|createKey
argument_list|(
literal|"ratis"
argument_list|,
literal|0
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|testData
init|=
literal|"ratis"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// First write and flush creates a container in the datanode
name|key
operator|.
name|write
argument_list|(
name|testData
argument_list|)
expr_stmt|;
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
name|KeyOutputStream
name|groupOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locationInfoList
init|=
name|groupOutputStream
operator|.
name|getLocationInfoList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locationInfoList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OmKeyLocationInfo
name|omKeyLocationInfo
init|=
name|locationInfoList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|containerID
init|=
name|omKeyLocationInfo
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
comment|// A container is created on the datanode. Now figure out a follower node to
comment|// kill/slow down.
name|HddsDatanodeService
name|follower
init|=
literal|null
decl_stmt|;
name|HddsDatanodeService
name|leader
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelineList
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getPipelineManager
argument_list|()
operator|.
name|getPipelines
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pipelineList
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|pipelineList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|HddsDatanodeService
name|dn
range|:
name|cluster
operator|.
name|getHddsDatanodes
argument_list|()
control|)
block|{
if|if
condition|(
name|ContainerTestHelper
operator|.
name|isRatisFollower
argument_list|(
name|dn
argument_list|,
name|pipeline
argument_list|)
condition|)
block|{
name|follower
operator|=
name|dn
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ContainerTestHelper
operator|.
name|isRatisLeader
argument_list|(
name|dn
argument_list|,
name|pipeline
argument_list|)
condition|)
block|{
name|leader
operator|=
name|dn
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|follower
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|leader
argument_list|)
expr_stmt|;
comment|// shutdown the slow follower
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|follower
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|testData
argument_list|)
expr_stmt|;
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now move the container to the closed on the datanode.
name|XceiverClientSpi
name|xceiverClient
init|=
name|xceiverClientManager
operator|.
name|acquireClient
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getFirstNode
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CloseContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCloseContainer
argument_list|(
name|ContainerProtos
operator|.
name|CloseContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|xceiverClient
operator|.
name|sendCommand
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerStateMachine
name|stateMachine
init|=
operator|(
name|ContainerStateMachine
operator|)
name|ContainerTestHelper
operator|.
name|getStateMachine
argument_list|(
name|leader
argument_list|,
name|pipeline
argument_list|)
decl_stmt|;
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
operator|.
name|setKeyName
argument_list|(
literal|"ratis"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OmKeyInfo
name|info
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|lookupKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|BlockID
name|blockID
init|=
name|info
operator|.
name|getKeyLocationVersions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocationList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockID
argument_list|()
decl_stmt|;
name|OzoneContainer
name|ozoneContainer
decl_stmt|;
specifier|final
name|DatanodeStateMachine
name|dnStateMachine
init|=
name|leader
operator|.
name|getDatanodeStateMachine
argument_list|()
decl_stmt|;
name|ozoneContainer
operator|=
name|dnStateMachine
operator|.
name|getContainer
argument_list|()
expr_stmt|;
name|KeyValueHandler
name|keyValueHandler
init|=
operator|(
name|KeyValueHandler
operator|)
name|ozoneContainer
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getHandler
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|ozoneContainer
operator|.
name|getContainerSet
argument_list|()
operator|.
name|getContainer
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
decl_stmt|;
name|KeyValueContainerData
name|containerData
init|=
operator|(
operator|(
name|KeyValueContainerData
operator|)
name|container
operator|.
name|getContainerData
argument_list|()
operator|)
decl_stmt|;
name|long
name|delTrxId
init|=
name|containerData
operator|.
name|getDeleteTransactionId
argument_list|()
decl_stmt|;
name|long
name|numPendingDeletionBlocks
init|=
name|containerData
operator|.
name|getNumPendingDeletionBlocks
argument_list|()
decl_stmt|;
name|BlockData
name|blockData
init|=
name|keyValueHandler
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlock
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|deleteKey
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
return|return
name|dnStateMachine
operator|.
name|getCommandDispatcher
argument_list|()
operator|.
name|getDeleteBlocksCommandHandler
argument_list|()
operator|.
name|getInvocationCount
argument_list|()
operator|>=
literal|1
return|;
block|}
argument_list|,
literal|500
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerData
operator|.
name|getDeleteTransactionId
argument_list|()
operator|>
name|delTrxId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerData
operator|.
name|getNumPendingDeletionBlocks
argument_list|()
operator|>
name|numPendingDeletionBlocks
argument_list|)
expr_stmt|;
comment|// make sure the chunk was never deleted on the leader even though
comment|// deleteBlock handler is invoked
try|try
block|{
for|for
control|(
name|ContainerProtos
operator|.
name|ChunkInfo
name|chunkInfo
range|:
name|blockData
operator|.
name|getChunks
argument_list|()
control|)
block|{
name|keyValueHandler
operator|.
name|getChunkManager
argument_list|()
operator|.
name|readChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|chunkInfo
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should not be thrown."
argument_list|)
expr_stmt|;
block|}
name|long
name|numReadStateMachineOps
init|=
name|stateMachine
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumReadStateMachineOps
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stateMachine
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumReadStateMachineFails
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|stateMachine
operator|.
name|evictStateMachineCache
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartHddsDatanode
argument_list|(
name|follower
operator|.
name|getDatanodeDetails
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// wait for the raft server to come up and join the ratis ring
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|// Make sure the readStateMachine call got triggered after the follower
comment|// caught up
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stateMachine
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumReadStateMachineOps
argument_list|()
operator|>
name|numReadStateMachineOps
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stateMachine
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumReadStateMachineFails
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// wait for the chunk to get deleted now
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
for|for
control|(
name|HddsDatanodeService
name|dn
range|:
name|cluster
operator|.
name|getHddsDatanodes
argument_list|()
control|)
block|{
name|keyValueHandler
operator|=
operator|(
name|KeyValueHandler
operator|)
name|dn
operator|.
name|getDatanodeStateMachine
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getHandler
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|)
expr_stmt|;
comment|// make sure the chunk is now deleted on the all dns
try|try
block|{
for|for
control|(
name|ContainerProtos
operator|.
name|ChunkInfo
name|chunkInfo
range|:
name|blockData
operator|.
name|getChunks
argument_list|()
control|)
block|{
name|keyValueHandler
operator|.
name|getChunkManager
argument_list|()
operator|.
name|readChunk
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|,
name|ChunkInfo
operator|.
name|getFromProtoBuf
argument_list|(
name|chunkInfo
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception is not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|StorageContainerException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|StorageContainerException
operator|)
name|ioe
operator|)
operator|.
name|getResult
argument_list|()
operator|==
name|ContainerProtos
operator|.
name|Result
operator|.
name|UNABLE_TO_FIND_CHUNK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

