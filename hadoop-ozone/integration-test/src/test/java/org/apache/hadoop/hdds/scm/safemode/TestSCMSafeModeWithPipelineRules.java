begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.safemode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|safemode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ReplicationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This class tests SCM Safe mode with pipeline rules.  */
end_comment

begin_class
DECL|class|TestSCMSafeModeWithPipelineRules
specifier|public
class|class
name|TestSCMSafeModeWithPipelineRules
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
DECL|field|pipelineManager
specifier|private
name|PipelineManager
name|pipelineManager
decl_stmt|;
DECL|field|clusterBuilder
specifier|private
name|MiniOzoneCluster
operator|.
name|Builder
name|clusterBuilder
decl_stmt|;
annotation|@
name|Rule
DECL|field|temporaryFolder
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|method|setup (int numDatanodes)
specifier|public
name|void
name|setup
parameter_list|(
name|int
name|numDatanodes
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_SAFEMODE_PIPELINE_AVAILABILITY_CHECK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_SCM_WAIT_TIME_AFTER_SAFE_MODE_EXIT
argument_list|,
literal|"10s"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_PIPELINE_CREATION_INTERVAL
argument_list|,
literal|"10s"
argument_list|)
expr_stmt|;
name|clusterBuilder
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|setHbInterval
argument_list|(
literal|1000
argument_list|)
operator|.
name|setHbProcessorInterval
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|clusterBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|StorageContainerManager
name|scm
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
decl_stmt|;
name|pipelineManager
operator|=
name|scm
operator|.
name|getPipelineManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScmSafeMode ()
specifier|public
name|void
name|testScmSafeMode
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|datanodeCount
init|=
literal|6
decl_stmt|;
name|setup
argument_list|(
name|datanodeCount
argument_list|)
expr_stmt|;
name|waitForRatis3NodePipelines
argument_list|(
name|datanodeCount
operator|/
literal|3
argument_list|)
expr_stmt|;
name|waitForRatis1NodePipelines
argument_list|(
name|datanodeCount
argument_list|)
expr_stmt|;
name|int
name|totalPipelineCount
init|=
name|datanodeCount
operator|+
operator|(
name|datanodeCount
operator|/
literal|3
operator|)
decl_stmt|;
comment|//Cluster is started successfully
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartOzoneManager
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|restartStorageContainerManager
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pipelineManager
operator|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getPipelineManager
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelineList
init|=
name|pipelineManager
operator|.
name|getPipelines
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
decl_stmt|;
name|pipelineList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodes
argument_list|()
operator|.
name|forEach
argument_list|(
name|datanodeDetails
lambda|->
block|{
try|try
block|{
name|cluster
operator|.
name|restartHddsDatanode
argument_list|(
name|datanodeDetails
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Datanode restart failed"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|SCMSafeModeManager
name|scmSafeModeManager
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getScmSafeModeManager
argument_list|()
decl_stmt|;
comment|// Ceil(0.1 * 2) is 1, as one pipeline is healthy healthy pipeline rule is
comment|// satisfied
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|scmSafeModeManager
operator|.
name|getHealthyPipelineSafeModeRule
argument_list|()
operator|.
name|validate
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// As Ceil(0.9 * 2) is 2, and from second pipeline no datanodes's are
comment|// reported this rule is not met yet.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
operator|!
name|scmSafeModeManager
operator|.
name|getOneReplicaPipelineSafeModeRule
argument_list|()
operator|.
name|validate
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|isInSafeMode
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeDetails
name|restartedDatanode
init|=
name|pipelineList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFirstNode
argument_list|()
decl_stmt|;
comment|// Now restart one datanode from the 2nd pipeline
try|try
block|{
name|cluster
operator|.
name|restartHddsDatanode
argument_list|(
name|restartedDatanode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Datanode restart failed"
argument_list|)
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|scmSafeModeManager
operator|.
name|getOneReplicaPipelineSafeModeRule
argument_list|()
operator|.
name|validate
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
operator|!
name|scmSafeModeManager
operator|.
name|getInSafeMode
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// As after safemode wait time is not completed, we should have total
comment|// pipeline's as original count 6(1 node pipelines) + 2 (3 node pipeline)
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalPipelineCount
argument_list|,
name|pipelineManager
operator|.
name|getPipelines
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationManager
name|replicationManager
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getReplicationManager
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|replicationManager
operator|.
name|isRunning
argument_list|()
argument_list|,
literal|1000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// As 4 datanodes are reported, 4 single node pipeline and 1 3 node
comment|// pipeline.
name|waitForRatis1NodePipelines
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|waitForRatis3NodePipelines
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Restart other datanodes in the pipeline, and after some time we should
comment|// have same count as original.
name|pipelineList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodes
argument_list|()
operator|.
name|forEach
argument_list|(
name|datanodeDetails
lambda|->
block|{
try|try
block|{
if|if
condition|(
operator|!
name|restartedDatanode
operator|.
name|equals
argument_list|(
name|datanodeDetails
argument_list|)
condition|)
block|{
name|cluster
operator|.
name|restartHddsDatanode
argument_list|(
name|datanodeDetails
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Datanode restart failed"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|waitForRatis1NodePipelines
argument_list|(
name|datanodeCount
argument_list|)
expr_stmt|;
name|waitForRatis3NodePipelines
argument_list|(
name|datanodeCount
operator|/
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForRatis3NodePipelines (int numPipelines)
specifier|private
name|void
name|waitForRatis3NodePipelines
parameter_list|(
name|int
name|numPipelines
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|pipelineManager
operator|.
name|getPipelines
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|numPipelines
argument_list|,
literal|100
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForRatis1NodePipelines (int numPipelines)
specifier|private
name|void
name|waitForRatis1NodePipelines
parameter_list|(
name|int
name|numPipelines
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|pipelineManager
operator|.
name|getPipelines
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|,
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|numPipelines
argument_list|,
literal|100
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

