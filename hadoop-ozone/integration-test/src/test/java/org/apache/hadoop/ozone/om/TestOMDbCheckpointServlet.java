begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ACL_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|WriteListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_DB_CHECKPOINT_REQUEST_FLUSH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doCallRealMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Class used for testing the OM DB Checkpoint provider servlet.  */
end_comment

begin_class
DECL|class|TestOMDbCheckpointServlet
specifier|public
class|class
name|TestOMDbCheckpointServlet
block|{
DECL|field|cluster
specifier|private
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|omMetrics
specifier|private
name|OMMetrics
name|omMetrics
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
decl_stmt|;
DECL|field|scmId
specifier|private
name|String
name|scmId
decl_stmt|;
DECL|field|omId
specifier|private
name|String
name|omId
decl_stmt|;
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|60000
argument_list|)
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true    *    * @throws IOException    */
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|clusterId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scmId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|omId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_ACL_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
operator|.
name|setOmId
argument_list|(
name|omId
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|omMetrics
operator|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|getMetrics
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDoGet ()
specifier|public
name|void
name|testDoGet
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OMDBCheckpointServlet
name|omDbCheckpointServletMock
init|=
name|mock
argument_list|(
name|OMDBCheckpointServlet
operator|.
name|class
argument_list|)
decl_stmt|;
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|omDbCheckpointServletMock
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|HttpServletRequest
name|requestMock
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|responseMock
init|=
name|mock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServletContext
name|servletContextMock
init|=
name|mock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|omDbCheckpointServletMock
operator|.
name|getServletContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|servletContextMock
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|servletContextMock
operator|.
name|getAttribute
argument_list|(
name|OzoneConsts
operator|.
name|OM_CONTEXT_ATTRIBUTE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cluster
operator|.
name|getOzoneManager
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|requestMock
operator|.
name|getParameter
argument_list|(
name|OZONE_DB_CHECKPOINT_REQUEST_FLUSH
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|responseMock
argument_list|)
operator|.
name|setContentType
argument_list|(
literal|"application/x-tgz"
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|responseMock
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Matchers
operator|.
name|anyString
argument_list|()
argument_list|,
name|Matchers
operator|.
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|tempFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"testDoGet_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|".tar.gz"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fileOutputStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|responseMock
operator|.
name|getOutputStream
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ServletOutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWriteListener
parameter_list|(
name|WriteListener
name|writeListener
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|fileOutputStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|omDbCheckpointServletMock
argument_list|)
operator|.
name|doGet
argument_list|(
name|requestMock
argument_list|,
name|responseMock
argument_list|)
expr_stmt|;
name|omDbCheckpointServletMock
operator|.
name|init
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetrics
operator|.
name|getLastCheckpointCreationTimeTaken
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetrics
operator|.
name|getLastCheckpointStreamingTimeTaken
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|omDbCheckpointServletMock
operator|.
name|doGet
argument_list|(
name|requestMock
argument_list|,
name|responseMock
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tempFile
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetrics
operator|.
name|getLastCheckpointCreationTimeTaken
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetrics
operator|.
name|getLastCheckpointStreamingTimeTaken
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

