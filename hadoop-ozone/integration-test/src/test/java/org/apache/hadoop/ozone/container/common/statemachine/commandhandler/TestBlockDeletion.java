begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.statemachine.commandhandler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|statemachine
operator|.
name|commandhandler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
operator|.
name|ContainerSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueContainerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|helpers
operator|.
name|KeyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfoGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ozShell
operator|.
name|TestOzoneShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL
import|;
end_import

begin_class
DECL|class|TestBlockDeletion
specifier|public
class|class
name|TestBlockDeletion
block|{
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|store
specifier|private
specifier|static
name|ObjectStore
name|store
decl_stmt|;
DECL|field|dnContainerSet
specifier|private
specifier|static
name|ContainerSet
name|dnContainerSet
init|=
literal|null
decl_stmt|;
DECL|field|scm
specifier|private
specifier|static
name|StorageContainerManager
name|scm
init|=
literal|null
decl_stmt|;
DECL|field|om
specifier|private
specifier|static
name|OzoneManager
name|om
init|=
literal|null
decl_stmt|;
DECL|field|containerIdsWithDeletedBlocks
specifier|private
specifier|static
name|Set
argument_list|<
name|Long
argument_list|>
name|containerIdsWithDeletedBlocks
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|TestOzoneShell
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|baseDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|path
operator|+=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_LOCALSTORAGE_ROOT
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|MiniOzoneCluster
name|cluster
init|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|store
operator|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
name|dnContainerSet
operator|=
name|cluster
operator|.
name|getHddsDatanodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatanodeStateMachine
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerSet
argument_list|()
expr_stmt|;
name|om
operator|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
expr_stmt|;
name|scm
operator|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
expr_stmt|;
name|containerIdsWithDeletedBlocks
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBlockDeletion ()
specifier|public
name|void
name|testBlockDeletion
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|1000000
argument_list|)
decl_stmt|;
name|store
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|OzoneVolume
name|volume
init|=
name|store
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|volume
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|out
init|=
name|bucket
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|,
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|setDataSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfoGroup
argument_list|>
name|omKeyLocationInfoGroupList
init|=
name|om
operator|.
name|lookupKey
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|getKeyLocationVersions
argument_list|()
decl_stmt|;
comment|// verify key blocks were created in DN.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyBlocksCreated
argument_list|(
name|omKeyLocationInfoGroupList
argument_list|)
argument_list|)
expr_stmt|;
comment|// No containers with deleted blocks
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerIdsWithDeletedBlocks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete transactionIds for the containers should be 0
name|matchContainerTransactionIds
argument_list|()
expr_stmt|;
name|om
operator|.
name|deleteKey
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// The blocks should be deleted in the DN.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyBlocksDeleted
argument_list|(
name|omKeyLocationInfoGroupList
argument_list|)
argument_list|)
expr_stmt|;
comment|// Few containers with deleted blocks
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|containerIdsWithDeletedBlocks
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Containers in the DN and SCM should have same delete transactionIds
name|matchContainerTransactionIds
argument_list|()
expr_stmt|;
block|}
DECL|method|matchContainerTransactionIds ()
specifier|private
name|void
name|matchContainerTransactionIds
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ContainerData
argument_list|>
name|containerDataList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|dnContainerSet
operator|.
name|listContainer
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|,
name|containerDataList
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerData
name|containerData
range|:
name|containerDataList
control|)
block|{
name|long
name|containerId
init|=
name|containerData
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerIdsWithDeletedBlocks
operator|.
name|contains
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|scm
operator|.
name|getContainerInfo
argument_list|(
name|containerId
argument_list|)
operator|.
name|getDeleteTransactionId
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scm
operator|.
name|getContainerInfo
argument_list|(
name|containerId
argument_list|)
operator|.
name|getDeleteTransactionId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dnContainerSet
operator|.
name|getContainer
argument_list|(
name|containerId
argument_list|)
operator|.
name|getContainerData
argument_list|()
operator|.
name|getDeleteTransactionId
argument_list|()
argument_list|,
name|scm
operator|.
name|getContainerInfo
argument_list|(
name|containerId
argument_list|)
operator|.
name|getDeleteTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyBlocksCreated ( List<OmKeyLocationInfoGroup> omKeyLocationInfoGroups)
specifier|private
name|boolean
name|verifyBlocksCreated
parameter_list|(
name|List
argument_list|<
name|OmKeyLocationInfoGroup
argument_list|>
name|omKeyLocationInfoGroups
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performOperationOnKeyContainers
argument_list|(
parameter_list|(
name|blockID
parameter_list|)
lambda|->
block|{
try|try
block|{
name|MetadataStore
name|db
init|=
name|KeyUtils
operator|.
name|getDB
argument_list|(
operator|(
name|KeyValueContainerData
operator|)
name|dnContainerSet
operator|.
name|getContainer
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|getContainerData
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|db
operator|.
name|get
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|omKeyLocationInfoGroups
argument_list|)
return|;
block|}
DECL|method|verifyBlocksDeleted ( List<OmKeyLocationInfoGroup> omKeyLocationInfoGroups)
specifier|private
name|boolean
name|verifyBlocksDeleted
parameter_list|(
name|List
argument_list|<
name|OmKeyLocationInfoGroup
argument_list|>
name|omKeyLocationInfoGroups
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performOperationOnKeyContainers
argument_list|(
parameter_list|(
name|blockID
parameter_list|)
lambda|->
block|{
try|try
block|{
name|MetadataStore
name|db
init|=
name|KeyUtils
operator|.
name|getDB
argument_list|(
operator|(
name|KeyValueContainerData
operator|)
name|dnContainerSet
operator|.
name|getContainer
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
operator|.
name|getContainerData
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|db
operator|.
name|get
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|db
operator|.
name|get
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|OzoneConsts
operator|.
name|DELETING_KEY_PREFIX
operator|+
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|OzoneConsts
operator|.
name|DELETED_KEY_PREFIX
operator|+
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|containerIdsWithDeletedBlocks
operator|.
name|add
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|omKeyLocationInfoGroups
argument_list|)
return|;
block|}
DECL|method|performOperationOnKeyContainers (Consumer<BlockID> consumer, List<OmKeyLocationInfoGroup> omKeyLocationInfoGroups)
specifier|private
name|boolean
name|performOperationOnKeyContainers
parameter_list|(
name|Consumer
argument_list|<
name|BlockID
argument_list|>
name|consumer
parameter_list|,
name|List
argument_list|<
name|OmKeyLocationInfoGroup
argument_list|>
name|omKeyLocationInfoGroups
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
for|for
control|(
name|OmKeyLocationInfoGroup
name|omKeyLocationInfoGroup
range|:
name|omKeyLocationInfoGroups
control|)
block|{
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|omKeyLocationInfos
init|=
name|omKeyLocationInfoGroup
operator|.
name|getLocationList
argument_list|()
decl_stmt|;
for|for
control|(
name|OmKeyLocationInfo
name|omKeyLocationInfo
range|:
name|omKeyLocationInfos
control|)
block|{
name|BlockID
name|blockID
init|=
name|omKeyLocationInfo
operator|.
name|getBlockID
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|blockID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

