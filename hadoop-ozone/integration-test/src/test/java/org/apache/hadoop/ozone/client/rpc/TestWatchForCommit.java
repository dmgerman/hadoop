begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|HddsClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerWithPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|BlockOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|KeyOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|GroupMismatchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftRetryFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_SCM_WATCHER_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL
import|;
end_import

begin_comment
comment|/**  * This class verifies the watchForCommit Handling by client.  */
end_comment

begin_class
DECL|class|TestWatchForCommit
specifier|public
class|class
name|TestWatchForCommit
block|{
DECL|field|cluster
specifier|private
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|client
specifier|private
name|OzoneClient
name|client
decl_stmt|;
DECL|field|objectStore
specifier|private
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
DECL|field|bucketName
specifier|private
name|String
name|bucketName
decl_stmt|;
DECL|field|keyString
specifier|private
name|String
name|keyString
decl_stmt|;
DECL|field|chunkSize
specifier|private
name|int
name|chunkSize
decl_stmt|;
DECL|field|flushSize
specifier|private
name|int
name|flushSize
decl_stmt|;
DECL|field|maxFlushSize
specifier|private
name|int
name|maxFlushSize
decl_stmt|;
DECL|field|blockSize
specifier|private
name|int
name|blockSize
decl_stmt|;
specifier|private
name|StorageContainerLocationProtocolClientSideTranslatorPB
DECL|field|storageContainerLocationClient
name|storageContainerLocationClient
decl_stmt|;
DECL|field|containerOwner
specifier|private
specifier|static
name|String
name|containerOwner
init|=
literal|"OZONE"
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true    *    * @throws IOException    */
DECL|method|startCluster (OzoneConfiguration conf)
specifier|private
name|void
name|startCluster
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|chunkSize
operator|=
literal|100
expr_stmt|;
name|flushSize
operator|=
literal|2
operator|*
name|chunkSize
expr_stmt|;
name|maxFlushSize
operator|=
literal|2
operator|*
name|flushSize
expr_stmt|;
name|blockSize
operator|=
literal|2
operator|*
name|maxFlushSize
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|HDDS_SCM_WATCHER_TIMEOUT
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|7
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|setChunkSize
argument_list|(
name|chunkSize
argument_list|)
operator|.
name|setStreamBufferFlushSize
argument_list|(
name|flushSize
argument_list|)
operator|.
name|setStreamBufferMaxSize
argument_list|(
name|maxFlushSize
argument_list|)
operator|.
name|setStreamBufferSizeUnit
argument_list|(
name|StorageUnit
operator|.
name|BYTES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
comment|//the easiest way to create an open container is creating a key
name|client
operator|=
name|OzoneClientFactory
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|objectStore
operator|=
name|client
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
name|keyString
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|volumeName
operator|=
literal|"watchforcommithandlingtest"
expr_stmt|;
name|bucketName
operator|=
name|volumeName
expr_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|storageContainerLocationClient
operator|=
name|cluster
operator|.
name|getStorageContainerLocationClient
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
DECL|method|shutdown ()
specifier|private
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getKeyName ()
specifier|private
name|String
name|getKeyName
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testWatchForCommitWithKeyWrite ()
specifier|public
name|void
name|testWatchForCommitWithKeyWrite
parameter_list|()
throws|throws
name|Exception
block|{
comment|// in this case, watch request should fail with RaftRetryFailureException
comment|// and will be captured in keyOutputStream and the failover will happen
comment|// to a different block
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_WATCH_REQUEST_TIMEOUT
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|XceiverClientMetrics
name|metrics
init|=
name|XceiverClientManager
operator|.
name|getXceiverClientMetrics
argument_list|()
decl_stmt|;
name|long
name|writeChunkCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|putBlockCount
init|=
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|pendingWriteChunkCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
decl_stmt|;
name|long
name|pendingPutBlockCount
init|=
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
decl_stmt|;
name|long
name|totalOpCount
init|=
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|getKeyName
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|dataLength
init|=
name|maxFlushSize
operator|+
literal|50
decl_stmt|;
comment|// write data more than 1 chunk
name|byte
index|[]
name|data1
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|dataLength
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
comment|// since its hitting the full bufferCondition, it will call watchForCommit
comment|// and completes atleast putBlock for first flushSize worth of data
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
operator|<=
name|pendingWriteChunkCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
operator|<=
name|pendingPutBlockCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|4
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|2
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalOpCount
operator|+
literal|6
argument_list|,
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|KeyOutputStream
argument_list|)
expr_stmt|;
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|instanceof
name|BlockOutputStream
argument_list|)
expr_stmt|;
name|BlockOutputStream
name|blockOutputStream
init|=
operator|(
name|BlockOutputStream
operator|)
name|stream
decl_stmt|;
comment|// we have just written data more than flush Size(2 chunks), at this time
comment|// buffer pool will have 3 buffers allocated worth of chunk size
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// writtenDataLength as well flushedDataLength will be updated here
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxFlushSize
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// since data equals to maxBufferSize is written, this will be a blocking
comment|// call and hence will wait for atleast flushSize worth of data to get
comment|// acked by all servers right here
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
operator|>=
name|flushSize
argument_list|)
expr_stmt|;
comment|// watchForCommit will clean up atleast one entry from the map where each
comment|// entry corresponds to flushSize worth of data
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
comment|// Now do a flush. This will flush the data and update the flush length and
comment|// the map.
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|5
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|3
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalOpCount
operator|+
literal|8
argument_list|,
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Since the data in the buffer is already flushed, flush here will have
comment|// no impact on the counters and data structures
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getWrittenDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalDataFlushedLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush will make sure one more entry gets updated in the map
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|XceiverClientRatis
name|raftClient
init|=
operator|(
name|XceiverClientRatis
operator|)
name|blockOutputStream
operator|.
name|getXceiverClient
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|raftClient
operator|.
name|getCommitInfoMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|raftClient
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// again write data with more than max buffer limit. This will call
comment|// watchForCommit again. Since the commit will happen 2 way, the
comment|// commitInfoMap will get updated for servers which are alive
comment|// 4 writeChunks = maxFlushSize + 2 putBlocks  will be discarded here
comment|// once exception is hit
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
comment|// As a part of handling the exception, 4 failed writeChunks  will be
comment|// rewritten plus one partial chunk plus two putBlocks for flushSize
comment|// and one flush for partial chunk
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|HddsClientUtils
operator|.
name|checkForException
argument_list|(
name|blockOutputStream
operator|.
name|getIoException
argument_list|()
argument_list|)
operator|instanceof
name|RaftRetryFailureException
argument_list|)
expr_stmt|;
comment|// Make sure the retryCount is reset after the exception is handled
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getRetryCount
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// now close the stream, It will update the ack length after watchForCommit
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|computeBufferData
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingWriteChunkCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pendingPutBlockCount
argument_list|,
name|metrics
operator|.
name|getContainerOpsMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writeChunkCount
operator|+
literal|14
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|putBlockCount
operator|+
literal|8
argument_list|,
name|metrics
operator|.
name|getContainerOpCountMetrics
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalOpCount
operator|+
literal|22
argument_list|,
name|metrics
operator|.
name|getTotalOpCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataLength
argument_list|,
name|blockOutputStream
operator|.
name|getTotalAckDataLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the bufferPool is empty
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockOutputStream
operator|.
name|getBufferPool
argument_list|()
operator|.
name|computeBufferData
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|blockOutputStream
operator|.
name|getCommitIndex2flushedDataMap
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data1
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWatchForCommitWithSmallerTimeoutValue ()
specifier|public
name|void
name|testWatchForCommitWithSmallerTimeoutValue
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_WATCH_REQUEST_TIMEOUT
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|XceiverClientManager
name|clientManager
init|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContainerWithPipeline
name|container1
init|=
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|client
init|=
name|clientManager
operator|.
name|acquireClient
argument_list|(
name|container1
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getRefcount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|client
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|XceiverClientReply
name|reply
init|=
name|client
operator|.
name|sendCommandAsync
argument_list|(
name|ContainerTestHelper
operator|.
name|getCreateContainerRequest
argument_list|(
name|container1
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|long
name|index
init|=
name|reply
operator|.
name|getLogIndex
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// just watch for a lo index which in not updated in the commitInfo Map
name|client
operator|.
name|watchForCommit
argument_list|(
name|index
operator|+
literal|1
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|HddsClientUtils
operator|.
name|checkForException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|TimeoutException
argument_list|)
expr_stmt|;
block|}
comment|// After releasing the client, this connection should be closed
comment|// and any container operations should fail
name|clientManager
operator|.
name|releaseClient
argument_list|(
name|client
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWatchForCommitForRetryfailure ()
specifier|public
name|void
name|testWatchForCommitForRetryfailure
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_WATCH_REQUEST_TIMEOUT
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|XceiverClientManager
name|clientManager
init|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContainerWithPipeline
name|container1
init|=
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|client
init|=
name|clientManager
operator|.
name|acquireClient
argument_list|(
name|container1
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getRefcount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|client
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|XceiverClientReply
name|reply
init|=
name|client
operator|.
name|sendCommandAsync
argument_list|(
name|ContainerTestHelper
operator|.
name|getCreateContainerRequest
argument_list|(
name|container1
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|long
name|index
init|=
name|reply
operator|.
name|getLogIndex
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// again write data with more than max buffer limit. This wi
try|try
block|{
comment|// just watch for a lo index which in not updated in the commitInfo Map
name|client
operator|.
name|watchForCommit
argument_list|(
name|index
operator|+
literal|1
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|HddsClientUtils
operator|.
name|checkForException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|RaftRetryFailureException
argument_list|)
expr_stmt|;
block|}
name|clientManager
operator|.
name|releaseClient
argument_list|(
name|client
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test2WayCommitForRetryfailure ()
specifier|public
name|void
name|test2WayCommitForRetryfailure
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_WATCH_REQUEST_TIMEOUT
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|XceiverClientRatis
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|XceiverClientManager
name|clientManager
init|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContainerWithPipeline
name|container1
init|=
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|client
init|=
name|clientManager
operator|.
name|acquireClient
argument_list|(
name|container1
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getRefcount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|client
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|XceiverClientRatis
name|ratisClient
init|=
operator|(
name|XceiverClientRatis
operator|)
name|client
decl_stmt|;
name|XceiverClientReply
name|reply
init|=
name|client
operator|.
name|sendCommandAsync
argument_list|(
name|ContainerTestHelper
operator|.
name|getCreateContainerRequest
argument_list|(
name|container1
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ratisClient
operator|.
name|getCommitInfoMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|reply
operator|=
name|client
operator|.
name|sendCommandAsync
argument_list|(
name|ContainerTestHelper
operator|.
name|getCloseContainer
argument_list|(
name|pipeline
argument_list|,
name|container1
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
operator|.
name|watchForCommit
argument_list|(
name|reply
operator|.
name|getLogIndex
argument_list|()
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
comment|// commitInfo Map will be reduced to 2 here
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ratisClient
operator|.
name|getCommitInfoMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clientManager
operator|.
name|releaseClient
argument_list|(
name|client
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"3 way commit failed"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"RaftRetryFailureException"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Committed by majority"
argument_list|)
argument_list|)
expr_stmt|;
name|logCapturer
operator|.
name|stopCapturing
argument_list|()
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test2WayCommitForTimeoutException ()
specifier|public
name|void
name|test2WayCommitForTimeoutException
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_WATCH_REQUEST_TIMEOUT
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|XceiverClientRatis
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|XceiverClientManager
name|clientManager
init|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContainerWithPipeline
name|container1
init|=
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|client
init|=
name|clientManager
operator|.
name|acquireClient
argument_list|(
name|container1
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getRefcount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|client
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|XceiverClientRatis
name|ratisClient
init|=
operator|(
name|XceiverClientRatis
operator|)
name|client
decl_stmt|;
name|XceiverClientReply
name|reply
init|=
name|client
operator|.
name|sendCommandAsync
argument_list|(
name|ContainerTestHelper
operator|.
name|getCreateContainerRequest
argument_list|(
name|container1
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ratisClient
operator|.
name|getCommitInfoMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownHddsDatanode
argument_list|(
name|pipeline
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|reply
operator|=
name|client
operator|.
name|sendCommandAsync
argument_list|(
name|ContainerTestHelper
operator|.
name|getCloseContainer
argument_list|(
name|pipeline
argument_list|,
name|container1
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
operator|.
name|watchForCommit
argument_list|(
name|reply
operator|.
name|getLogIndex
argument_list|()
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
comment|// commitInfo Map will be reduced to 2 here
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ratisClient
operator|.
name|getCommitInfoMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clientManager
operator|.
name|releaseClient
argument_list|(
name|client
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"3 way commit failed"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TimeoutException"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logCapturer
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Committed by majority"
argument_list|)
argument_list|)
expr_stmt|;
name|logCapturer
operator|.
name|stopCapturing
argument_list|()
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWatchForCommitForGroupMismatchException ()
specifier|public
name|void
name|testWatchForCommitForGroupMismatchException
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_WATCH_REQUEST_TIMEOUT
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|DFS_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// mark the node stale early so that pipeline gets destroyed quickly
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|LogCapturer
name|logCapturer
init|=
name|GenericTestUtils
operator|.
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|XceiverClientRatis
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|XceiverClientManager
name|clientManager
init|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ContainerWithPipeline
name|container1
init|=
name|storageContainerLocationClient
operator|.
name|allocateContainer
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|,
name|containerOwner
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|client
init|=
name|clientManager
operator|.
name|acquireClient
argument_list|(
name|container1
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|getRefcount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
operator|.
name|getPipeline
argument_list|()
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|client
operator|.
name|getPipeline
argument_list|()
decl_stmt|;
name|XceiverClientRatis
name|ratisClient
init|=
operator|(
name|XceiverClientRatis
operator|)
name|client
decl_stmt|;
name|long
name|containerId
init|=
name|container1
operator|.
name|getContainerInfo
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|XceiverClientReply
name|reply
init|=
name|client
operator|.
name|sendCommandAsync
argument_list|(
name|ContainerTestHelper
operator|.
name|getCreateContainerRequest
argument_list|(
name|containerId
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ratisClient
operator|.
name|getCommitInfoMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelineList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|pipelineList
operator|.
name|add
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|ContainerTestHelper
operator|.
name|waitForPipelineClose
argument_list|(
name|pipelineList
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
try|try
block|{
comment|// just watch for a lo index which in not updated in the commitInfo Map
comment|//client.watchForCommit(reply.getLogIndex() + 1, 20000);
name|reply
operator|=
name|client
operator|.
name|sendCommandAsync
argument_list|(
name|ContainerTestHelper
operator|.
name|getCreateContainerRequest
argument_list|(
name|containerId
argument_list|,
name|client
operator|.
name|getPipeline
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reply
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|HddsClientUtils
operator|.
name|checkForException
argument_list|(
name|e
argument_list|)
operator|instanceof
name|GroupMismatchException
argument_list|)
expr_stmt|;
block|}
name|clientManager
operator|.
name|releaseClient
argument_list|(
name|client
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|createKey (String keyName, ReplicationType type, long size)
specifier|private
name|OzoneOutputStream
name|createKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|ReplicationType
name|type
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ContainerTestHelper
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|objectStore
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
return|;
block|}
DECL|method|validateData (String keyName, byte[] data)
specifier|private
name|void
name|validateData
parameter_list|(
name|String
name|keyName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerTestHelper
operator|.
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data
argument_list|,
name|objectStore
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

