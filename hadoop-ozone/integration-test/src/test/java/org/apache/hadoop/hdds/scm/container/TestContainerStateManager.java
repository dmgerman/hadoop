begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.scm.container
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Tests for ContainerStateManager.  */
end_comment

begin_class
DECL|class|TestContainerStateManager
specifier|public
class|class
name|TestContainerStateManager
block|{
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|scm
specifier|private
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|scmContainerMapping
specifier|private
name|Mapping
name|scmContainerMapping
decl_stmt|;
DECL|field|containerStateManager
specifier|private
name|ContainerStateManager
name|containerStateManager
decl_stmt|;
DECL|field|containerOwner
specifier|private
name|String
name|containerOwner
init|=
literal|"OZONE"
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
name|xceiverClientManager
operator|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scm
operator|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
expr_stmt|;
name|scmContainerMapping
operator|=
name|scm
operator|.
name|getScmContainerManager
argument_list|()
expr_stmt|;
name|containerStateManager
operator|=
name|scmContainerMapping
operator|.
name|getStateManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAllocateContainer ()
specifier|public
name|void
name|testAllocateContainer
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Allocate a container and verify the container info
name|String
name|container1
init|=
literal|"container"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|container1
argument_list|,
name|containerOwner
argument_list|)
expr_stmt|;
name|ContainerInfo
name|info
init|=
name|containerStateManager
operator|.
name|getMatchingContainer
argument_list|(
name|OzoneConsts
operator|.
name|GB
operator|*
literal|3
argument_list|,
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|ALLOCATED
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
argument_list|,
name|info
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OzoneConsts
operator|.
name|GB
operator|*
literal|3
argument_list|,
name|info
operator|.
name|getAllocatedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerOwner
argument_list|,
name|info
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|info
operator|.
name|getPipeline
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|info
operator|.
name|getPipeline
argument_list|()
operator|.
name|getFactor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|ALLOCATED
argument_list|,
name|info
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check there are two containers in ALLOCATED state after allocation
name|String
name|container2
init|=
literal|"container"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|container2
argument_list|,
name|containerOwner
argument_list|)
expr_stmt|;
name|int
name|numContainers
init|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|ALLOCATED
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numContainers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerStateManagerRestart ()
specifier|public
name|void
name|testContainerStateManagerRestart
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Allocate 5 containers in ALLOCATED state and 5 in CREATING state
name|String
name|cname
init|=
literal|"container"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|cname
operator|+
name|i
argument_list|,
name|containerOwner
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
literal|5
condition|)
block|{
name|scm
operator|.
name|getScmContainerManager
argument_list|()
operator|.
name|updateContainerState
argument_list|(
name|cname
operator|+
name|i
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// New instance of ContainerStateManager should load all the containers in
comment|// container store.
name|ContainerStateManager
name|stateManager
init|=
operator|new
name|ContainerStateManager
argument_list|(
name|conf
argument_list|,
name|scmContainerMapping
argument_list|)
decl_stmt|;
name|int
name|containers
init|=
name|stateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|ALLOCATED
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|containers
operator|=
name|stateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|CREATING
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|containers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetMatchingContainer ()
specifier|public
name|void
name|testGetMatchingContainer
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|container1
init|=
literal|"container-01234"
decl_stmt|;
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|container1
argument_list|,
name|containerOwner
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container1
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container1
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATED
argument_list|)
expr_stmt|;
name|String
name|container2
init|=
literal|"container-56789"
decl_stmt|;
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|container2
argument_list|,
name|containerOwner
argument_list|)
expr_stmt|;
name|ContainerInfo
name|info
init|=
name|containerStateManager
operator|.
name|getMatchingContainer
argument_list|(
name|OzoneConsts
operator|.
name|GB
operator|*
literal|3
argument_list|,
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
argument_list|,
name|info
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|containerStateManager
operator|.
name|getMatchingContainer
argument_list|(
name|OzoneConsts
operator|.
name|GB
operator|*
literal|3
argument_list|,
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container2
argument_list|,
name|info
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container2
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container2
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATED
argument_list|)
expr_stmt|;
comment|// space has already been allocated in container1, now container 2 should
comment|// be chosen.
name|info
operator|=
name|containerStateManager
operator|.
name|getMatchingContainer
argument_list|(
name|OzoneConsts
operator|.
name|GB
operator|*
literal|3
argument_list|,
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container2
argument_list|,
name|info
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateContainerState ()
specifier|public
name|void
name|testUpdateContainerState
parameter_list|()
throws|throws
name|IOException
block|{
name|NavigableSet
argument_list|<
name|ContainerID
argument_list|>
name|containerList
init|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|ALLOCATED
argument_list|)
decl_stmt|;
name|int
name|containers
init|=
name|containerList
operator|==
literal|null
condition|?
literal|0
else|:
name|containerList
operator|.
name|size
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containers
argument_list|)
expr_stmt|;
comment|// Allocate container1 and update its state from ALLOCATED -> CREATING ->
comment|// OPEN -> CLOSING -> CLOSED -> DELETING -> DELETED
name|String
name|container1
init|=
literal|"container"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|container1
argument_list|,
name|containerOwner
argument_list|)
expr_stmt|;
name|containers
operator|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|ALLOCATED
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container1
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|containers
operator|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|CREATING
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container1
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATED
argument_list|)
expr_stmt|;
name|containers
operator|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container1
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|FINALIZE
argument_list|)
expr_stmt|;
name|containers
operator|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|CLOSING
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container1
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|containers
operator|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container1
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|containers
operator|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|DELETING
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container1
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CLEANUP
argument_list|)
expr_stmt|;
name|containers
operator|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|DELETED
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
argument_list|)
expr_stmt|;
comment|// Allocate container1 and update its state from ALLOCATED -> CREATING ->
comment|// DELETING
name|String
name|container2
init|=
literal|"container"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|container2
argument_list|,
name|containerOwner
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container2
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container2
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|TIMEOUT
argument_list|)
expr_stmt|;
name|containers
operator|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|DELETING
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
argument_list|)
expr_stmt|;
comment|// Allocate container1 and update its state from ALLOCATED -> CREATING ->
comment|// OPEN -> CLOSING -> CLOSED
name|String
name|container3
init|=
literal|"container"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|container3
argument_list|,
name|containerOwner
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container3
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container3
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATED
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container3
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|FINALIZE
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container3
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
name|containers
operator|=
name|containerStateManager
operator|.
name|getMatchingContainerIDs
argument_list|(
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|CLOSED
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdatingAllocatedBytes ()
specifier|public
name|void
name|testUpdatingAllocatedBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|container1
init|=
literal|"container"
operator|+
name|RandomStringUtils
operator|.
name|randomNumeric
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|container1
argument_list|,
name|containerOwner
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container1
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|scmContainerMapping
operator|.
name|updateContainerState
argument_list|(
name|container1
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleEvent
operator|.
name|CREATED
argument_list|)
expr_stmt|;
name|Random
name|ran
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|allocatedSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|long
name|size
init|=
name|Math
operator|.
name|abs
argument_list|(
name|ran
operator|.
name|nextLong
argument_list|()
operator|%
name|OzoneConsts
operator|.
name|GB
argument_list|)
decl_stmt|;
name|allocatedSize
operator|+=
name|size
expr_stmt|;
comment|// trigger allocating bytes by calling getMatchingContainer
name|ContainerInfo
name|info
init|=
name|containerStateManager
operator|.
name|getMatchingContainer
argument_list|(
name|size
argument_list|,
name|containerOwner
argument_list|,
name|xceiverClientManager
operator|.
name|getType
argument_list|()
argument_list|,
name|xceiverClientManager
operator|.
name|getFactor
argument_list|()
argument_list|,
name|HddsProtos
operator|.
name|LifeCycleState
operator|.
name|OPEN
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
argument_list|,
name|info
operator|.
name|getContainerName
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerMapping
name|containerMapping
init|=
operator|(
name|ContainerMapping
operator|)
name|scmContainerMapping
decl_stmt|;
comment|// manually trigger a flush, this will persist the allocated bytes value
comment|// to disk
name|containerMapping
operator|.
name|flushContainerInfo
argument_list|()
expr_stmt|;
name|Charset
name|utf8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
comment|// the persisted value should always be equal to allocated size.
name|byte
index|[]
name|containerBytes
init|=
name|containerMapping
operator|.
name|getContainerStore
argument_list|()
operator|.
name|get
argument_list|(
name|container1
operator|.
name|getBytes
argument_list|(
name|utf8
argument_list|)
argument_list|)
decl_stmt|;
name|HddsProtos
operator|.
name|SCMContainerInfo
name|infoProto
init|=
name|HddsProtos
operator|.
name|SCMContainerInfo
operator|.
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|containerBytes
argument_list|)
decl_stmt|;
name|ContainerInfo
name|currentInfo
init|=
name|ContainerInfo
operator|.
name|fromProtobuf
argument_list|(
name|infoProto
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocatedSize
argument_list|,
name|currentInfo
operator|.
name|getAllocatedBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

