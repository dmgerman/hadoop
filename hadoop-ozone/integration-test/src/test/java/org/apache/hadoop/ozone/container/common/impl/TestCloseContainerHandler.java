begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.container.common.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|datanode
operator|.
name|proto
operator|.
name|ContainerProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|BlockData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|interfaces
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|HddsVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|volume
operator|.
name|VolumeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|keyvalue
operator|.
name|KeyValueHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ChunkInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|createSingleNodePipeline
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|getChunk
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|getData
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
operator|.
name|setDataChecksum
import|;
end_import

begin_comment
comment|/**  * Simple tests to verify that closeContainer handler on Datanode.  */
end_comment

begin_class
DECL|class|TestCloseContainerHandler
specifier|public
class|class
name|TestCloseContainerHandler
block|{
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|TestRule
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|300000
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|static
name|HddsDispatcher
name|dispatcher
decl_stmt|;
DECL|field|containerSet
specifier|private
specifier|static
name|ContainerSet
name|containerSet
decl_stmt|;
DECL|field|volumeSet
specifier|private
specifier|static
name|VolumeSet
name|volumeSet
decl_stmt|;
DECL|field|handler
specifier|private
specifier|static
name|KeyValueHandler
name|handler
decl_stmt|;
DECL|field|openContainerBlockMap
specifier|private
specifier|static
name|OpenContainerBlockMap
name|openContainerBlockMap
decl_stmt|;
DECL|field|DATANODE_UUID
specifier|private
specifier|final
specifier|static
name|String
name|DATANODE_UUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|BASE_DIR
specifier|private
specifier|static
specifier|final
name|String
name|BASE_DIR
init|=
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
decl_stmt|;
DECL|field|VOLUME_1
specifier|private
specifier|static
specifier|final
name|String
name|VOLUME_1
init|=
name|BASE_DIR
operator|+
literal|"disk1"
decl_stmt|;
DECL|field|VOLUME_2
specifier|private
specifier|static
specifier|final
name|String
name|VOLUME_2
init|=
name|BASE_DIR
operator|+
literal|"disk2"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|String
name|dataDirKey
init|=
name|VOLUME_1
operator|+
literal|","
operator|+
name|VOLUME_2
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_DATANODE_DATA_DIR_KEY
argument_list|,
name|dataDirKey
argument_list|)
expr_stmt|;
name|containerSet
operator|=
operator|new
name|ContainerSet
argument_list|()
expr_stmt|;
name|DatanodeDetails
name|datanodeDetails
init|=
name|DatanodeDetails
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUuid
argument_list|(
name|DATANODE_UUID
argument_list|)
operator|.
name|setHostName
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|setIpAddress
argument_list|(
literal|"127.0.0.1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|volumeSet
operator|=
operator|new
name|VolumeSet
argument_list|(
name|datanodeDetails
operator|.
name|getUuidString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|HddsDispatcher
argument_list|(
name|conf
argument_list|,
name|containerSet
argument_list|,
name|volumeSet
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|handler
operator|=
operator|(
name|KeyValueHandler
operator|)
name|dispatcher
operator|.
name|getHandler
argument_list|(
name|ContainerProtos
operator|.
name|ContainerType
operator|.
name|KeyValueContainer
argument_list|)
expr_stmt|;
name|openContainerBlockMap
operator|=
name|handler
operator|.
name|getOpenContainerBlockMap
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|setScmId
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Delete the hdds volume root dir
name|List
argument_list|<
name|HddsVolume
argument_list|>
name|volumes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|volumes
operator|.
name|addAll
argument_list|(
name|volumeSet
operator|.
name|getVolumesList
argument_list|()
argument_list|)
expr_stmt|;
name|volumes
operator|.
name|addAll
argument_list|(
name|volumeSet
operator|.
name|getFailedVolumesList
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HddsVolume
name|volume
range|:
name|volumes
control|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|volume
operator|.
name|getHddsRootDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|volumeSet
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|createContainer ()
specifier|private
name|long
name|createContainer
parameter_list|()
block|{
name|long
name|testContainerId
init|=
name|ContainerTestHelper
operator|.
name|getTestContainerID
argument_list|()
decl_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
name|request
init|=
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CreateContainer
argument_list|)
operator|.
name|setContainerID
argument_list|(
name|testContainerId
argument_list|)
operator|.
name|setDatanodeUuid
argument_list|(
name|DATANODE_UUID
argument_list|)
operator|.
name|setCreateContainer
argument_list|(
name|ContainerProtos
operator|.
name|CreateContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|testContainerId
return|;
block|}
DECL|method|writeChunkBuilder (BlockID blockID, Pipeline pipeline, int chunkCount)
specifier|private
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|writeChunkBuilder
parameter_list|(
name|BlockID
name|blockID
parameter_list|,
name|Pipeline
name|pipeline
parameter_list|,
name|int
name|chunkCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
specifier|final
name|int
name|datalen
init|=
literal|1024
decl_stmt|;
name|long
name|testContainerID
init|=
name|blockID
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunkList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|chunkCount
condition|;
name|x
operator|++
control|)
block|{
name|ChunkInfo
name|info
init|=
name|getChunk
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|,
name|x
argument_list|,
name|datalen
operator|*
name|x
argument_list|,
name|datalen
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|getData
argument_list|(
name|datalen
argument_list|)
decl_stmt|;
name|setDataChecksum
argument_list|(
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
operator|.
name|Builder
name|writeRequest
init|=
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|writeRequest
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
expr_stmt|;
name|writeRequest
operator|.
name|setChunkData
argument_list|(
name|info
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|writeRequest
operator|.
name|setData
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|writeRequest
operator|.
name|setStage
argument_list|(
name|ContainerProtos
operator|.
name|Stage
operator|.
name|COMBINED
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|WriteChunk
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setWriteChunk
argument_list|(
name|writeRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|chunkList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|chunkList
return|;
block|}
annotation|@
name|Test
DECL|method|testPutKeyWithMultipleChunks ()
specifier|public
name|void
name|testPutKeyWithMultipleChunks
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
block|{
name|long
name|testContainerID
init|=
name|createContainer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containerSet
operator|.
name|getContainer
argument_list|(
name|testContainerID
argument_list|)
argument_list|)
expr_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunkList
init|=
name|writeChunkBuilder
argument_list|(
name|blockID
argument_list|,
name|pipeline
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// the block should exist in the map
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|openContainerBlockMap
operator|.
name|getBlockDataMap
argument_list|(
name|testContainerID
argument_list|)
operator|.
name|get
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|BlockData
name|blockData
init|=
operator|new
name|BlockData
argument_list|(
name|blockID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerProtos
operator|.
name|ChunkInfo
argument_list|>
name|chunkProtoList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChunkInfo
name|i
range|:
name|chunkList
control|)
block|{
name|chunkProtoList
operator|.
name|add
argument_list|(
name|i
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|blockData
operator|.
name|setChunks
argument_list|(
name|chunkProtoList
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|PutBlockRequestProto
operator|.
name|Builder
name|putBlockRequestProto
init|=
name|ContainerProtos
operator|.
name|PutBlockRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|putBlockRequestProto
operator|.
name|setBlockData
argument_list|(
name|blockData
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|PutBlock
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPutBlock
argument_list|(
name|putBlockRequestProto
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|//the open block should be removed from Map
name|Assert
operator|.
name|assertNull
argument_list|(
name|openContainerBlockMap
operator|.
name|getBlockDataMap
argument_list|(
name|testContainerID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteChunk ()
specifier|public
name|void
name|testDeleteChunk
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|testContainerID
init|=
name|createContainer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containerSet
operator|.
name|getContainer
argument_list|(
name|testContainerID
argument_list|)
argument_list|)
expr_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunkList
init|=
name|writeChunkBuilder
argument_list|(
name|blockID
argument_list|,
name|pipeline
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// the key should exist in the map
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|openContainerBlockMap
operator|.
name|getBlockDataMap
argument_list|(
name|testContainerID
argument_list|)
operator|.
name|get
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|openContainerBlockMap
operator|.
name|getBlockDataMap
argument_list|(
name|testContainerID
argument_list|)
operator|.
name|get
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
operator|.
name|getChunks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|DeleteChunkRequestProto
operator|.
name|Builder
name|deleteChunkProto
init|=
name|ContainerProtos
operator|.
name|DeleteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|deleteChunkProto
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
expr_stmt|;
name|deleteChunkProto
operator|.
name|setChunkData
argument_list|(
name|chunkList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
operator|.
name|Builder
name|writeRequest
init|=
name|ContainerProtos
operator|.
name|WriteChunkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|writeRequest
operator|.
name|setBlockID
argument_list|(
name|blockID
operator|.
name|getDatanodeBlockIDProtobuf
argument_list|()
argument_list|)
expr_stmt|;
name|writeRequest
operator|.
name|setChunkData
argument_list|(
name|chunkList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProtoBufMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|DeleteChunk
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDeleteChunk
argument_list|(
name|deleteChunkProto
argument_list|)
expr_stmt|;
name|request
operator|.
name|setWriteChunk
argument_list|(
name|writeRequest
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|openContainerBlockMap
operator|.
name|getBlockDataMap
argument_list|(
name|testContainerID
argument_list|)
operator|.
name|get
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
operator|.
name|getChunks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseContainer ()
specifier|public
name|void
name|testCloseContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|testContainerID
init|=
name|createContainer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containerSet
operator|.
name|getContainer
argument_list|(
name|testContainerID
argument_list|)
argument_list|)
expr_stmt|;
name|BlockID
name|blockID
init|=
name|ContainerTestHelper
operator|.
name|getTestBlockID
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createSingleNodePipeline
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ChunkInfo
argument_list|>
name|chunkList
init|=
name|writeChunkBuilder
argument_list|(
name|blockID
argument_list|,
name|pipeline
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|containerSet
operator|.
name|getContainer
argument_list|(
name|testContainerID
argument_list|)
decl_stmt|;
name|BlockData
name|blockData
init|=
name|openContainerBlockMap
operator|.
name|getBlockDataMap
argument_list|(
name|testContainerID
argument_list|)
operator|.
name|get
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
decl_stmt|;
comment|// the key should exist in the map
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|openContainerBlockMap
operator|.
name|getBlockDataMap
argument_list|(
name|testContainerID
argument_list|)
operator|.
name|get
argument_list|(
name|blockID
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockData
operator|.
name|getChunks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|chunkList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|Builder
name|request
init|=
name|ContainerProtos
operator|.
name|ContainerCommandRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCmdType
argument_list|(
name|ContainerProtos
operator|.
name|Type
operator|.
name|CloseContainer
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerID
argument_list|(
name|blockID
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCloseContainer
argument_list|(
name|ContainerProtos
operator|.
name|CloseContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTraceID
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDatanodeUuid
argument_list|(
name|pipeline
operator|.
name|getLeader
argument_list|()
operator|.
name|getUuidString
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|dispatch
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|openContainerBlockMap
operator|.
name|getBlockDataMap
argument_list|(
name|testContainerID
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the key got committed
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|handler
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getBlock
argument_list|(
name|container
argument_list|,
name|blockID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

