begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.scm.pipeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|scm
operator|.
name|pipeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|SCMPipelineMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getLongCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_comment
comment|/**  * Test cases to verify the metrics exposed by SCMPipelineManager.  */
end_comment

begin_class
DECL|class|TestSCMPipelineMetrics
specifier|public
class|class
name|TestSCMPipelineMetrics
block|{
DECL|field|cluster
specifier|private
name|MiniOzoneCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verifies pipeline creation metric.    */
annotation|@
name|Test
DECL|method|testPipelineCreation ()
specifier|public
name|void
name|testPipelineCreation
parameter_list|()
block|{
name|MetricsRecordBuilder
name|metrics
init|=
name|getMetrics
argument_list|(
name|SCMPipelineMetrics
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|numPipelineCreated
init|=
name|getLongCounter
argument_list|(
literal|"NumPipelineCreated"
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
comment|// Pipelines are created in background when the cluster starts.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|numPipelineCreated
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies pipeline destroy metric.    */
annotation|@
name|Test
DECL|method|testPipelineDestroy ()
specifier|public
name|void
name|testPipelineDestroy
parameter_list|()
block|{
name|PipelineManager
name|pipelineManager
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getPipelineManager
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Pipeline
argument_list|>
name|pipeline
init|=
name|pipelineManager
operator|.
name|getPipelines
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pipeline
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|ifPresent
argument_list|(
name|pipeline1
lambda|->
block|{
try|try
block|{
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|closePipeline
argument_list|(
name|pipeline
operator|.
name|get
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|getProtobuf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MetricsRecordBuilder
name|metrics
init|=
name|getMetrics
argument_list|(
name|SCMPipelineMetrics
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|assertCounter
argument_list|(
literal|"NumPipelineDestroyed"
argument_list|,
literal|1L
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

