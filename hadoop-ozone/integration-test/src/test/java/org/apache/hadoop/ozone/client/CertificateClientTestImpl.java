begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|CertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
operator|.
name|utils
operator|.
name|CertificateSignRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
operator|.
name|utils
operator|.
name|SelfSignedCertificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|exceptions
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|HDDSKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|jcajce
operator|.
name|JcaX509CertificateConverter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test implementation for CertificateClient. To be used only for test  * purposes.  */
end_comment

begin_class
DECL|class|CertificateClientTestImpl
specifier|public
class|class
name|CertificateClientTestImpl
implements|implements
name|CertificateClient
block|{
DECL|field|securityConfig
specifier|private
specifier|final
name|SecurityConfig
name|securityConfig
decl_stmt|;
DECL|field|keyPair
specifier|private
specifier|final
name|KeyPair
name|keyPair
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|Configuration
name|config
decl_stmt|;
DECL|field|x509Certificate
specifier|private
specifier|final
name|X509Certificate
name|x509Certificate
decl_stmt|;
DECL|method|CertificateClientTestImpl (OzoneConfiguration conf)
specifier|public
name|CertificateClientTestImpl
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|securityConfig
operator|=
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HDDSKeyGenerator
name|keyGen
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|securityConfig
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|keyPair
operator|=
name|keyGen
operator|.
name|generateKey
argument_list|()
expr_stmt|;
name|config
operator|=
name|conf
expr_stmt|;
name|SelfSignedCertificate
operator|.
name|Builder
name|builder
init|=
name|SelfSignedCertificate
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBeginDate
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|setEndDate
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
operator|.
name|plus
argument_list|(
literal|365
argument_list|,
name|ChronoUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
operator|.
name|setClusterID
argument_list|(
literal|"cluster1"
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|setSubject
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
operator|.
name|setScmID
argument_list|(
literal|"TestScmId1"
argument_list|)
operator|.
name|makeCA
argument_list|()
decl_stmt|;
name|X509CertificateHolder
name|certificateHolder
init|=
literal|null
decl_stmt|;
name|certificateHolder
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|x509Certificate
operator|=
operator|new
name|JcaX509CertificateConverter
argument_list|()
operator|.
name|getCertificate
argument_list|(
name|certificateHolder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPrivateKey ()
specifier|public
name|PrivateKey
name|getPrivateKey
parameter_list|()
block|{
return|return
name|keyPair
operator|.
name|getPrivate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPublicKey ()
specifier|public
name|PublicKey
name|getPublicKey
parameter_list|()
block|{
return|return
name|keyPair
operator|.
name|getPublic
argument_list|()
return|;
block|}
comment|/**    * Returns the certificate  of the specified component if it exists on the    * local system.    *    * @return certificate or Null if there is no data.    */
annotation|@
name|Override
DECL|method|getCertificate (String certSerialId)
specifier|public
name|X509Certificate
name|getCertificate
parameter_list|(
name|String
name|certSerialId
parameter_list|)
throws|throws
name|CertificateException
block|{
return|return
name|x509Certificate
return|;
block|}
annotation|@
name|Override
DECL|method|getCertificate ()
specifier|public
name|X509Certificate
name|getCertificate
parameter_list|()
block|{
return|return
name|x509Certificate
return|;
block|}
annotation|@
name|Override
DECL|method|getCACertificate ()
specifier|public
name|X509Certificate
name|getCACertificate
parameter_list|()
block|{
return|return
name|x509Certificate
return|;
block|}
annotation|@
name|Override
DECL|method|verifyCertificate (X509Certificate certificate)
specifier|public
name|boolean
name|verifyCertificate
parameter_list|(
name|X509Certificate
name|certificate
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|signDataStream (InputStream stream)
specifier|public
name|byte
index|[]
name|signDataStream
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|CertificateException
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|signData (byte[] data)
specifier|public
name|byte
index|[]
name|signData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|CertificateException
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|verifySignature (InputStream stream, byte[] signature, X509Certificate cert)
specifier|public
name|boolean
name|verifySignature
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|byte
index|[]
name|signature
parameter_list|,
name|X509Certificate
name|cert
parameter_list|)
throws|throws
name|CertificateException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|verifySignature (byte[] data, byte[] signature, X509Certificate cert)
specifier|public
name|boolean
name|verifySignature
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|byte
index|[]
name|signature
parameter_list|,
name|X509Certificate
name|cert
parameter_list|)
throws|throws
name|CertificateException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getCSRBuilder ()
specifier|public
name|CertificateSignRequest
operator|.
name|Builder
name|getCSRBuilder
parameter_list|()
block|{
return|return
operator|new
name|CertificateSignRequest
operator|.
name|Builder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|queryCertificate (String query)
specifier|public
name|X509Certificate
name|queryCertificate
parameter_list|(
name|String
name|query
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|storeCertificate (String cert, boolean force)
specifier|public
name|void
name|storeCertificate
parameter_list|(
name|String
name|cert
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|CertificateException
block|{   }
annotation|@
name|Override
DECL|method|storeCertificate (String cert, boolean force, boolean caCert)
specifier|public
name|void
name|storeCertificate
parameter_list|(
name|String
name|cert
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|caCert
parameter_list|)
throws|throws
name|CertificateException
block|{   }
comment|/**    * Stores the trusted chain of certificates for a specific component.    *    * @param keyStore - Cert Store.    * @throws CertificateException - on Error.    */
annotation|@
name|Override
DECL|method|storeTrustChain (CertStore keyStore)
specifier|public
name|void
name|storeTrustChain
parameter_list|(
name|CertStore
name|keyStore
parameter_list|)
throws|throws
name|CertificateException
block|{    }
annotation|@
name|Override
DECL|method|storeTrustChain (List<X509Certificate> certificates)
specifier|public
name|void
name|storeTrustChain
parameter_list|(
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certificates
parameter_list|)
throws|throws
name|CertificateException
block|{    }
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|InitResponse
name|init
parameter_list|()
throws|throws
name|CertificateException
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

