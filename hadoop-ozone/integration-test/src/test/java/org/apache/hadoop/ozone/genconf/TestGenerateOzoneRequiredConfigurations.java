begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.genconf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|genconf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_comment
comment|/**  * Tests GenerateOzoneRequiredConfigurations.  */
end_comment

begin_class
DECL|class|TestGenerateOzoneRequiredConfigurations
specifier|public
class|class
name|TestGenerateOzoneRequiredConfigurations
block|{
DECL|field|outputBaseDir
specifier|private
specifier|static
name|File
name|outputBaseDir
decl_stmt|;
comment|/**    * Creates output directory which will be used by the test-cases.    * If a test-case needs a separate directory, it has to create a random    * directory inside {@code outputBaseDir}.    *    * @throws Exception In case of exception while creating output directory.    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|outputBaseDir
operator|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|outputBaseDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Cleans up the output base directory.    */
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|outputBaseDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a valid path and generates ozone-site.xml by calling    * {@code GenerateOzoneRequiredConfigurations#generateConfigurations}.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testGenerateConfigurations ()
specifier|public
name|void
name|testGenerateConfigurations
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tempPath
init|=
name|getRandomTempDir
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-output"
block|,
name|tempPath
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Path is valid"
argument_list|,
literal|true
argument_list|,
name|GenerateOzoneRequiredConfigurations
operator|.
name|isValidPath
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Permission is valid"
argument_list|,
literal|true
argument_list|,
name|GenerateOzoneRequiredConfigurations
operator|.
name|canWrite
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Config file generated"
argument_list|,
literal|0
argument_list|,
name|GenerateOzoneRequiredConfigurations
operator|.
name|generateConfigurations
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests ozone-site.xml generation by calling    * {@code GenerateOzoneRequiredConfigurations#main}.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testGenerateConfigurationsThroughMainMethod ()
specifier|public
name|void
name|testGenerateConfigurationsThroughMainMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tempPath
init|=
name|getRandomTempDir
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-output"
block|,
name|tempPath
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|ByteArrayOutputStream
name|outContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|oldStream
init|=
name|System
operator|.
name|out
decl_stmt|;
try|try
init|(
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|outContent
argument_list|)
init|)
block|{
name|System
operator|.
name|setOut
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|GenerateOzoneRequiredConfigurations
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
name|outContent
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|containsString
argument_list|(
literal|"ozone-site.xml has been generated at"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|oldStream
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test to avoid generating ozone-site.xml when invalid permission.    * @throws Exception    */
annotation|@
name|Test
DECL|method|generateConfigurationsFailure ()
specifier|public
name|void
name|generateConfigurationsFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tempPath
init|=
name|getRandomTempDir
argument_list|()
decl_stmt|;
name|tempPath
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-output"
block|,
name|tempPath
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|GenerateOzoneRequiredConfigurations
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Path is valid"
argument_list|,
literal|true
argument_list|,
name|GenerateOzoneRequiredConfigurations
operator|.
name|isValidPath
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Invalid permission"
argument_list|,
literal|false
argument_list|,
name|GenerateOzoneRequiredConfigurations
operator|.
name|canWrite
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Config file not generated"
argument_list|,
literal|1
argument_list|,
name|GenerateOzoneRequiredConfigurations
operator|.
name|generateConfigurations
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|tempPath
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to avoid generating ozone-site.xml when invalid permission.    * @throws Exception    */
annotation|@
name|Test
DECL|method|generateConfigurationsFailureForInvalidPath ()
specifier|public
name|void
name|generateConfigurationsFailureForInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tempPath
init|=
name|getRandomTempDir
argument_list|()
decl_stmt|;
name|tempPath
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-output"
block|,
name|tempPath
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/ozone-site.xml"
block|}
decl_stmt|;
name|GenerateOzoneRequiredConfigurations
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Path is invalid"
argument_list|,
literal|false
argument_list|,
name|GenerateOzoneRequiredConfigurations
operator|.
name|isValidPath
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Config file not generated"
argument_list|,
literal|1
argument_list|,
name|GenerateOzoneRequiredConfigurations
operator|.
name|generateConfigurations
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|tempPath
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getRandomTempDir ()
specifier|private
name|File
name|getRandomTempDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|tempDir
init|=
operator|new
name|File
argument_list|(
name|outputBaseDir
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
return|return
name|tempDir
return|;
block|}
block|}
end_class

end_unit

