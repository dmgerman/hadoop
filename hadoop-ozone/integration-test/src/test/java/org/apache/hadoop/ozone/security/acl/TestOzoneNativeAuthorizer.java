begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.security.acl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|MockNodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|BucketManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|IOzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|KeyManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|PrefixManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|PrefixManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|VolumeManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OpenKeySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
operator|.
name|AclScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ACL_AUTHORIZER_CLASS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ACL_AUTHORIZER_CLASS_NATIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ADMINISTRATORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ADMINISTRATORS_WILDCARD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_URI_DELIMITER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
operator|.
name|ANONYMOUS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
operator|.
name|GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
operator|.
name|WORLD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|NONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|BUCKET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|VOLUME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
operator|.
name|StoreType
operator|.
name|OZONE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test class for {@link OzoneNativeAuthorizer}.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestOzoneNativeAuthorizer
specifier|public
class|class
name|TestOzoneNativeAuthorizer
block|{
DECL|field|ozConfig
specifier|private
specifier|static
name|OzoneConfiguration
name|ozConfig
decl_stmt|;
DECL|field|vol
specifier|private
name|String
name|vol
decl_stmt|;
DECL|field|buck
specifier|private
name|String
name|buck
decl_stmt|;
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
DECL|field|prefix
specifier|private
name|String
name|prefix
decl_stmt|;
DECL|field|parentDirUserAcl
specifier|private
name|ACLType
name|parentDirUserAcl
decl_stmt|;
DECL|field|parentDirGroupAcl
specifier|private
name|ACLType
name|parentDirGroupAcl
decl_stmt|;
DECL|field|expectedAclResult
specifier|private
name|boolean
name|expectedAclResult
decl_stmt|;
DECL|field|keyManager
specifier|private
specifier|static
name|KeyManagerImpl
name|keyManager
decl_stmt|;
DECL|field|volumeManager
specifier|private
specifier|static
name|VolumeManagerImpl
name|volumeManager
decl_stmt|;
DECL|field|bucketManager
specifier|private
specifier|static
name|BucketManagerImpl
name|bucketManager
decl_stmt|;
DECL|field|prefixManager
specifier|private
specifier|static
name|PrefixManager
name|prefixManager
decl_stmt|;
DECL|field|metadataManager
specifier|private
specifier|static
name|OMMetadataManager
name|metadataManager
decl_stmt|;
DECL|field|nativeAuthorizer
specifier|private
specifier|static
name|OzoneNativeAuthorizer
name|nativeAuthorizer
decl_stmt|;
DECL|field|scm
specifier|private
specifier|static
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|ugi
specifier|private
specifier|static
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|volObj
specifier|private
specifier|static
name|OzoneObj
name|volObj
decl_stmt|;
DECL|field|buckObj
specifier|private
specifier|static
name|OzoneObj
name|buckObj
decl_stmt|;
DECL|field|keyObj
specifier|private
specifier|static
name|OzoneObj
name|keyObj
decl_stmt|;
DECL|field|prefixObj
specifier|private
specifier|static
name|OzoneObj
name|prefixObj
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"key"
block|,
literal|"dir1/"
block|,
name|ALL
block|,
name|ALL
block|,
literal|true
block|}
block|,
block|{
literal|"file1"
block|,
literal|"2019/june/01/"
block|,
name|ALL
block|,
name|ALL
block|,
literal|true
block|}
block|,
block|{
literal|"file2"
block|,
literal|""
block|,
name|ALL
block|,
name|ALL
block|,
literal|true
block|}
block|,
block|{
literal|"dir1/dir2/dir4/"
block|,
literal|""
block|,
name|ALL
block|,
name|ALL
block|,
literal|true
block|}
block|,
block|{
literal|"key"
block|,
literal|"dir1/"
block|,
name|NONE
block|,
name|NONE
block|,
literal|false
block|}
block|,
block|{
literal|"file1"
block|,
literal|"2019/june/01/"
block|,
name|NONE
block|,
name|NONE
block|,
literal|false
block|}
block|,
block|{
literal|"file2"
block|,
literal|""
block|,
name|NONE
block|,
name|NONE
block|,
literal|false
block|}
block|,
block|{
literal|"dir1/dir2/dir4/"
block|,
literal|""
block|,
name|NONE
block|,
name|NONE
block|,
literal|false
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|TestOzoneNativeAuthorizer (String keyName, String prefixName, ACLType userRight, ACLType groupRight, boolean expectedResult)
specifier|public
name|TestOzoneNativeAuthorizer
parameter_list|(
name|String
name|keyName
parameter_list|,
name|String
name|prefixName
parameter_list|,
name|ACLType
name|userRight
parameter_list|,
name|ACLType
name|groupRight
parameter_list|,
name|boolean
name|expectedResult
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|randomInt
init|=
name|RandomUtils
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|vol
operator|=
literal|"vol"
operator|+
name|randomInt
expr_stmt|;
name|buck
operator|=
literal|"bucket"
operator|+
name|randomInt
expr_stmt|;
name|key
operator|=
name|keyName
operator|+
name|randomInt
expr_stmt|;
name|prefix
operator|=
name|prefixName
operator|+
name|randomInt
operator|+
name|OZONE_URI_DELIMITER
expr_stmt|;
name|parentDirUserAcl
operator|=
name|userRight
expr_stmt|;
name|parentDirGroupAcl
operator|=
name|groupRight
expr_stmt|;
name|expectedAclResult
operator|=
name|expectedResult
expr_stmt|;
name|createVolume
argument_list|(
name|vol
argument_list|)
expr_stmt|;
name|createBucket
argument_list|(
name|vol
argument_list|,
name|buck
argument_list|)
expr_stmt|;
name|createKey
argument_list|(
name|vol
argument_list|,
name|buck
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ozConfig
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|ozConfig
operator|.
name|set
argument_list|(
name|OZONE_ACL_AUTHORIZER_CLASS
argument_list|,
name|OZONE_ACL_AUTHORIZER_CLASS_NATIVE
argument_list|)
expr_stmt|;
name|File
name|dir
init|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
decl_stmt|;
name|ozConfig
operator|.
name|set
argument_list|(
name|OZONE_METADATA_DIRS
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ozConfig
operator|.
name|set
argument_list|(
name|OZONE_ADMINISTRATORS
argument_list|,
name|OZONE_ADMINISTRATORS_WILDCARD
argument_list|)
expr_stmt|;
name|metadataManager
operator|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|ozConfig
argument_list|)
expr_stmt|;
name|volumeManager
operator|=
operator|new
name|VolumeManagerImpl
argument_list|(
name|metadataManager
argument_list|,
name|ozConfig
argument_list|)
expr_stmt|;
name|bucketManager
operator|=
operator|new
name|BucketManagerImpl
argument_list|(
name|metadataManager
argument_list|)
expr_stmt|;
name|prefixManager
operator|=
operator|new
name|PrefixManagerImpl
argument_list|(
name|metadataManager
argument_list|)
expr_stmt|;
name|NodeManager
name|nodeManager
init|=
operator|new
name|MockNodeManager
argument_list|(
literal|true
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SCMConfigurator
name|configurator
init|=
operator|new
name|SCMConfigurator
argument_list|()
decl_stmt|;
name|configurator
operator|.
name|setScmNodeManager
argument_list|(
name|nodeManager
argument_list|)
expr_stmt|;
name|scm
operator|=
name|TestUtils
operator|.
name|getScm
argument_list|(
name|ozConfig
argument_list|,
name|configurator
argument_list|)
expr_stmt|;
name|scm
operator|.
name|start
argument_list|()
expr_stmt|;
name|scm
operator|.
name|exitSafeMode
argument_list|()
expr_stmt|;
name|keyManager
operator|=
operator|new
name|KeyManagerImpl
argument_list|(
name|scm
operator|.
name|getBlockProtocolServer
argument_list|()
argument_list|,
name|metadataManager
argument_list|,
name|ozConfig
argument_list|,
literal|"om1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nativeAuthorizer
operator|=
operator|new
name|OzoneNativeAuthorizer
argument_list|(
name|volumeManager
argument_list|,
name|bucketManager
argument_list|,
name|keyManager
argument_list|,
name|prefixManager
argument_list|)
expr_stmt|;
comment|//keySession.
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
DECL|method|createKey (String volume, String bucket, String keyName)
specifier|private
name|void
name|createKey
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|,
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
block|{
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setDataSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|setAcls
argument_list|(
name|OzoneUtils
operator|.
name|getAclList
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroups
argument_list|()
argument_list|,
name|ALL
argument_list|,
name|ALL
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyName
operator|.
name|split
argument_list|(
name|OZONE_URI_DELIMITER
argument_list|)
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|keyManager
operator|.
name|createDirectory
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|+
name|OZONE_URI_DELIMITER
expr_stmt|;
block|}
else|else
block|{
name|OpenKeySession
name|keySession
init|=
name|keyManager
operator|.
name|createFile
argument_list|(
name|keyArgs
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setLocationInfoList
argument_list|(
name|keySession
operator|.
name|getKeyInfo
argument_list|()
operator|.
name|getLatestVersionLocations
argument_list|()
operator|.
name|getLocationList
argument_list|()
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|commitKey
argument_list|(
name|keyArgs
argument_list|,
name|keySession
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keyObj
operator|=
operator|new
name|OzoneObjInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|vol
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|buck
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|key
argument_list|)
operator|.
name|setResType
argument_list|(
name|KEY
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|OZONE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|createBucket (String volumeName, String bucketName)
specifier|private
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|OmBucketInfo
name|bucketInfo
init|=
name|OmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
name|buckObj
operator|=
operator|new
name|OzoneObjInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|vol
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|buck
argument_list|)
operator|.
name|setResType
argument_list|(
name|BUCKET
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|OZONE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|createVolume (String volumeName)
specifier|private
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|OmVolumeArgs
name|volumeArgs
init|=
name|OmVolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setAdminName
argument_list|(
literal|"bilbo"
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"bilbo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|volumeManager
operator|.
name|createVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
name|volObj
operator|=
operator|new
name|OzoneObjInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|vol
argument_list|)
operator|.
name|setResType
argument_list|(
name|VOLUME
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|OZONE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckAccessForVolume ()
specifier|public
name|void
name|testCheckAccessForVolume
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedAclResult
operator|=
literal|true
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|volObj
argument_list|,
name|USER
argument_list|,
name|volumeManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|volObj
argument_list|,
name|GROUP
argument_list|,
name|volumeManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|volObj
argument_list|,
name|WORLD
argument_list|,
name|volumeManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|volObj
argument_list|,
name|ANONYMOUS
argument_list|,
name|volumeManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckAccessForBucket ()
specifier|public
name|void
name|testCheckAccessForBucket
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneAcl
name|userAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|USER
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|parentDirUserAcl
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
name|OzoneAcl
name|groupAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|GROUP
argument_list|,
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|""
argument_list|,
name|parentDirGroupAcl
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
comment|// Set access for volume.
name|volumeManager
operator|.
name|setAcl
argument_list|(
name|volObj
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|userAcl
argument_list|,
name|groupAcl
argument_list|)
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|buckObj
argument_list|,
name|USER
argument_list|,
name|bucketManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|buckObj
argument_list|,
name|GROUP
argument_list|,
name|bucketManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|buckObj
argument_list|,
name|WORLD
argument_list|,
name|bucketManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|buckObj
argument_list|,
name|ANONYMOUS
argument_list|,
name|bucketManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckAccessForKey ()
specifier|public
name|void
name|testCheckAccessForKey
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneAcl
name|userAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|USER
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|parentDirUserAcl
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
name|OzoneAcl
name|groupAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|GROUP
argument_list|,
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|""
argument_list|,
name|parentDirGroupAcl
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
comment|// Set access for volume, bucket& prefix.
name|volumeManager
operator|.
name|setAcl
argument_list|(
name|volObj
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|userAcl
argument_list|,
name|groupAcl
argument_list|)
argument_list|)
expr_stmt|;
name|bucketManager
operator|.
name|setAcl
argument_list|(
name|buckObj
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|userAcl
argument_list|,
name|groupAcl
argument_list|)
argument_list|)
expr_stmt|;
comment|//prefixManager.setAcl(prefixObj, Arrays.asList(userAcl, groupAcl));
name|resetAclsAndValidateAccess
argument_list|(
name|keyObj
argument_list|,
name|USER
argument_list|,
name|keyManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|keyObj
argument_list|,
name|GROUP
argument_list|,
name|keyManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|keyObj
argument_list|,
name|WORLD
argument_list|,
name|keyManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|keyObj
argument_list|,
name|ANONYMOUS
argument_list|,
name|keyManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckAccessForPrefix ()
specifier|public
name|void
name|testCheckAccessForPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|prefixObj
operator|=
operator|new
name|OzoneObjInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|vol
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|buck
argument_list|)
operator|.
name|setPrefixName
argument_list|(
name|prefix
argument_list|)
operator|.
name|setResType
argument_list|(
name|PREFIX
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|OZONE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|OzoneAcl
name|userAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|USER
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|parentDirUserAcl
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
name|OzoneAcl
name|groupAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|GROUP
argument_list|,
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|""
argument_list|,
name|parentDirGroupAcl
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
comment|// Set access for volume& bucket.
name|volumeManager
operator|.
name|setAcl
argument_list|(
name|volObj
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|userAcl
argument_list|,
name|groupAcl
argument_list|)
argument_list|)
expr_stmt|;
name|bucketManager
operator|.
name|setAcl
argument_list|(
name|buckObj
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|userAcl
argument_list|,
name|groupAcl
argument_list|)
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|prefixObj
argument_list|,
name|USER
argument_list|,
name|prefixManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|prefixObj
argument_list|,
name|GROUP
argument_list|,
name|prefixManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|prefixObj
argument_list|,
name|WORLD
argument_list|,
name|prefixManager
argument_list|)
expr_stmt|;
name|resetAclsAndValidateAccess
argument_list|(
name|prefixObj
argument_list|,
name|ANONYMOUS
argument_list|,
name|prefixManager
argument_list|)
expr_stmt|;
block|}
DECL|method|resetAclsAndValidateAccess (OzoneObj obj, ACLIdentityType accessType, IOzoneAcl aclImplementor)
specifier|private
name|void
name|resetAclsAndValidateAccess
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|ACLIdentityType
name|accessType
parameter_list|,
name|IOzoneAcl
name|aclImplementor
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
decl_stmt|;
name|String
name|user
init|=
literal|""
decl_stmt|;
name|String
name|group
init|=
literal|""
decl_stmt|;
name|user
operator|=
name|ugi
operator|.
name|getUserName
argument_list|()
expr_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|group
operator|=
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|RequestContext
operator|.
name|Builder
name|builder
init|=
operator|new
name|RequestContext
operator|.
name|Builder
argument_list|()
operator|.
name|setClientUgi
argument_list|(
name|ugi
argument_list|)
operator|.
name|setAclType
argument_list|(
name|accessType
argument_list|)
decl_stmt|;
comment|// Get all acls.
name|List
argument_list|<
name|ACLType
argument_list|>
name|allAcls
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|ACLType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * 1. Reset default acls to an acl.      * 2. Test if user/group has access only to it.      * 3. Add remaining acls one by one and then test      *    if user/group has access to them.      * */
for|for
control|(
name|ACLType
name|a1
range|:
name|allAcls
control|)
block|{
name|OzoneAcl
name|newAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|accessType
argument_list|,
name|getAclName
argument_list|(
name|accessType
argument_list|)
argument_list|,
name|a1
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
comment|// Reset acls to only one right.
name|aclImplementor
operator|.
name|setAcl
argument_list|(
name|obj
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|newAcl
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch current acls and validate.
name|acls
operator|=
name|aclImplementor
operator|.
name|getAcl
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|contains
argument_list|(
name|newAcl
argument_list|)
argument_list|)
expr_stmt|;
comment|// Special handling for ALL.
if|if
condition|(
name|a1
operator|.
name|equals
argument_list|(
name|ALL
argument_list|)
condition|)
block|{
name|validateAll
argument_list|(
name|obj
argument_list|,
name|builder
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Special handling for NONE.
if|if
condition|(
name|a1
operator|.
name|equals
argument_list|(
name|NONE
argument_list|)
condition|)
block|{
name|validateNone
argument_list|(
name|obj
argument_list|,
name|builder
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertEquals
argument_list|(
literal|"Acl to check:"
operator|+
name|a1
operator|+
literal|" accessType:"
operator|+
name|accessType
operator|+
literal|" path:"
operator|+
name|obj
operator|.
name|getPath
argument_list|()
argument_list|,
name|expectedAclResult
argument_list|,
name|nativeAuthorizer
operator|.
name|checkAccess
argument_list|(
name|obj
argument_list|,
name|builder
operator|.
name|setAclRights
argument_list|(
name|a1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ACLType
argument_list|>
name|aclsToBeValidated
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|ACLType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ACLType
argument_list|>
name|aclsToBeAdded
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|ACLType
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|aclsToBeValidated
operator|.
name|remove
argument_list|(
name|NONE
argument_list|)
expr_stmt|;
name|aclsToBeValidated
operator|.
name|remove
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|aclsToBeAdded
operator|.
name|remove
argument_list|(
name|NONE
argument_list|)
expr_stmt|;
name|aclsToBeAdded
operator|.
name|remove
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
comment|// Fetch acls again.
for|for
control|(
name|ACLType
name|a2
range|:
name|aclsToBeAdded
control|)
block|{
if|if
condition|(
operator|!
name|a2
operator|.
name|equals
argument_list|(
name|a1
argument_list|)
condition|)
block|{
name|acls
operator|=
name|aclImplementor
operator|.
name|getAcl
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|List
name|right
init|=
name|acls
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getAclList
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Do not expected client to have "
operator|+
name|a2
operator|+
literal|" acl. "
operator|+
literal|"Current acls found:"
operator|+
name|right
operator|+
literal|". Type:"
operator|+
name|accessType
operator|+
literal|","
operator|+
literal|" name:"
operator|+
operator|(
name|accessType
operator|==
name|USER
condition|?
name|user
else|:
name|group
operator|)
argument_list|,
name|nativeAuthorizer
operator|.
name|checkAccess
argument_list|(
name|obj
argument_list|,
name|builder
operator|.
name|setAclRights
argument_list|(
name|a2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Randomize next type.
name|int
name|type
init|=
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ACLIdentityType
name|identityType
init|=
name|ACLIdentityType
operator|.
name|values
argument_list|()
index|[
name|type
index|]
decl_stmt|;
comment|// Add remaining acls one by one and then check access.
name|OzoneAcl
name|addAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|identityType
argument_list|,
name|getAclName
argument_list|(
name|identityType
argument_list|)
argument_list|,
name|a2
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
name|aclImplementor
operator|.
name|addAcl
argument_list|(
name|obj
argument_list|,
name|addAcl
argument_list|)
expr_stmt|;
comment|// Fetch acls again.
name|acls
operator|=
name|aclImplementor
operator|.
name|getAcl
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|boolean
name|a2AclFound
init|=
literal|false
decl_stmt|;
name|boolean
name|a1AclFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|OzoneAcl
name|acl
range|:
name|acls
control|)
block|{
if|if
condition|(
name|acl
operator|.
name|getAclList
argument_list|()
operator|.
name|contains
argument_list|(
name|a2
argument_list|)
condition|)
block|{
name|a2AclFound
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|acl
operator|.
name|getAclList
argument_list|()
operator|.
name|contains
argument_list|(
name|a1
argument_list|)
condition|)
block|{
name|a1AclFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Current acls :"
operator|+
name|acls
operator|+
literal|". "
operator|+
literal|"Type:"
operator|+
name|accessType
operator|+
literal|", name:"
operator|+
operator|(
name|accessType
operator|==
name|USER
condition|?
name|user
else|:
name|group
operator|)
operator|+
literal|" acl:"
operator|+
name|a2
argument_list|,
name|a2AclFound
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected client to have "
operator|+
name|a1
operator|+
literal|" acl. Current acls "
operator|+
literal|"found:"
operator|+
name|acls
operator|+
literal|". Type:"
operator|+
name|accessType
operator|+
literal|", name:"
operator|+
operator|(
name|accessType
operator|==
name|USER
condition|?
name|user
else|:
name|group
operator|)
argument_list|,
name|a1AclFound
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Current acls "
operator|+
name|acls
operator|+
literal|". Expect acl:"
operator|+
name|a2
operator|+
literal|" to be set? "
operator|+
name|expectedAclResult
operator|+
literal|" accessType:"
operator|+
name|accessType
argument_list|,
name|expectedAclResult
argument_list|,
name|nativeAuthorizer
operator|.
name|checkAccess
argument_list|(
name|obj
argument_list|,
name|builder
operator|.
name|setAclRights
argument_list|(
name|a2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|aclsToBeValidated
operator|.
name|remove
argument_list|(
name|a2
argument_list|)
expr_stmt|;
for|for
control|(
name|ACLType
name|a3
range|:
name|aclsToBeValidated
control|)
block|{
if|if
condition|(
operator|!
name|a3
operator|.
name|equals
argument_list|(
name|a1
argument_list|)
operator|&&
operator|!
name|a3
operator|.
name|equals
argument_list|(
name|a2
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|"User shouldn't have right "
operator|+
name|a3
operator|+
literal|". "
operator|+
literal|"Current acl rights for user:"
operator|+
name|a1
operator|+
literal|","
operator|+
name|a2
argument_list|,
name|nativeAuthorizer
operator|.
name|checkAccess
argument_list|(
name|obj
argument_list|,
name|builder
operator|.
name|setAclRights
argument_list|(
name|a3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|getAclName (ACLIdentityType identityType)
specifier|private
name|String
name|getAclName
parameter_list|(
name|ACLIdentityType
name|identityType
parameter_list|)
block|{
switch|switch
condition|(
name|identityType
condition|)
block|{
case|case
name|USER
case|:
return|return
name|ugi
operator|.
name|getUserName
argument_list|()
return|;
case|case
name|GROUP
case|:
if|if
condition|(
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|ugi
operator|.
name|getGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
default|default:
return|return
literal|""
return|;
block|}
block|}
comment|/**    * Helper function to test acl rights with user/group had ALL acl bit set.    * @param obj    * @param builder    */
DECL|method|validateAll (OzoneObj obj, RequestContext.Builder builder)
specifier|private
name|void
name|validateAll
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|RequestContext
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|OMException
block|{
name|List
argument_list|<
name|ACLType
argument_list|>
name|allAcls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACLType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|allAcls
operator|.
name|remove
argument_list|(
name|ALL
argument_list|)
expr_stmt|;
name|allAcls
operator|.
name|remove
argument_list|(
name|NONE
argument_list|)
expr_stmt|;
for|for
control|(
name|ACLType
name|a
range|:
name|allAcls
control|)
block|{
name|assertEquals
argument_list|(
literal|"User should have right "
operator|+
name|a
operator|+
literal|"."
argument_list|,
name|nativeAuthorizer
operator|.
name|checkAccess
argument_list|(
name|obj
argument_list|,
name|builder
operator|.
name|setAclRights
argument_list|(
name|a
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|expectedAclResult
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper function to test acl rights with user/group had NONE acl bit set.    * @param obj    * @param builder    */
DECL|method|validateNone (OzoneObj obj, RequestContext.Builder builder)
specifier|private
name|void
name|validateNone
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|RequestContext
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|OMException
block|{
name|List
argument_list|<
name|ACLType
argument_list|>
name|allAcls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACLType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|allAcls
operator|.
name|remove
argument_list|(
name|NONE
argument_list|)
expr_stmt|;
for|for
control|(
name|ACLType
name|a
range|:
name|allAcls
control|)
block|{
name|assertFalse
argument_list|(
literal|"User shouldn't have right "
operator|+
name|a
operator|+
literal|"."
argument_list|,
name|nativeAuthorizer
operator|.
name|checkAccess
argument_list|(
name|obj
argument_list|,
name|builder
operator|.
name|setAclRights
argument_list|(
name|a
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

