begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|HddsClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ContainerNotOpenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|storage
operator|.
name|BlockOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|BlockOutputStreamEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|KeyOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|GroupMismatchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_SCM_WATCHER_TIMEOUT
import|;
end_import

begin_comment
comment|/**  * Tests failure detection and handling in BlockOutputStream Class.  */
end_comment

begin_class
DECL|class|TestOzoneClientRetriesOnException
specifier|public
class|class
name|TestOzoneClientRetriesOnException
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
DECL|field|client
specifier|private
name|OzoneClient
name|client
decl_stmt|;
DECL|field|objectStore
specifier|private
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|chunkSize
specifier|private
name|int
name|chunkSize
decl_stmt|;
DECL|field|flushSize
specifier|private
name|int
name|flushSize
decl_stmt|;
DECL|field|maxFlushSize
specifier|private
name|int
name|maxFlushSize
decl_stmt|;
DECL|field|blockSize
specifier|private
name|int
name|blockSize
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
DECL|field|bucketName
specifier|private
name|String
name|bucketName
decl_stmt|;
DECL|field|keyString
specifier|private
name|String
name|keyString
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true    *    * @throws IOException    */
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|chunkSize
operator|=
literal|100
expr_stmt|;
name|flushSize
operator|=
literal|2
operator|*
name|chunkSize
expr_stmt|;
name|maxFlushSize
operator|=
literal|2
operator|*
name|flushSize
expr_stmt|;
name|blockSize
operator|=
literal|2
operator|*
name|maxFlushSize
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_WATCH_REQUEST_TIMEOUT
argument_list|,
literal|"5000ms"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|HDDS_SCM_WATCHER_TIMEOUT
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// conf.setTimeDuration(OZONE_SCM_STALENODE_INTERVAL, 30, TimeUnit.SECONDS);
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_CHECKSUM_TYPE
argument_list|,
literal|"NONE"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_MAX_RETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|7
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|setChunkSize
argument_list|(
name|chunkSize
argument_list|)
operator|.
name|setStreamBufferFlushSize
argument_list|(
name|flushSize
argument_list|)
operator|.
name|setStreamBufferMaxSize
argument_list|(
name|maxFlushSize
argument_list|)
operator|.
name|setStreamBufferSizeUnit
argument_list|(
name|StorageUnit
operator|.
name|BYTES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
comment|//the easiest way to create an open container is creating a key
name|client
operator|=
name|OzoneClientFactory
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|objectStore
operator|=
name|client
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
name|xceiverClientManager
operator|=
operator|new
name|XceiverClientManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|keyString
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|volumeName
operator|=
literal|"testblockoutputstreamwithretries"
expr_stmt|;
name|bucketName
operator|=
name|volumeName
expr_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyName ()
specifier|private
name|String
name|getKeyName
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGroupMismatchExceptionHandling ()
specifier|public
name|void
name|testGroupMismatchExceptionHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
name|getKeyName
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|dataLength
init|=
name|maxFlushSize
operator|+
literal|50
decl_stmt|;
comment|// write data more than 1 chunk
name|byte
index|[]
name|data1
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|dataLength
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|KeyOutputStream
argument_list|)
expr_stmt|;
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|long
name|containerID
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|OutputStream
name|stream
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|instanceof
name|BlockOutputStream
argument_list|)
expr_stmt|;
name|BlockOutputStream
name|blockOutputStream
init|=
operator|(
name|BlockOutputStream
operator|)
name|stream
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ContainerInfo
name|container
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getPipelineManager
argument_list|()
operator|.
name|getPipeline
argument_list|(
name|container
operator|.
name|getPipelineID
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerTestHelper
operator|.
name|waitForPipelineClose
argument_list|(
name|key
argument_list|,
name|cluster
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|HddsClientUtils
operator|.
name|checkForException
argument_list|(
name|blockOutputStream
operator|.
name|getIoException
argument_list|()
argument_list|)
operator|instanceof
name|GroupMismatchException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getExcludeList
argument_list|()
operator|.
name|getPipelineIds
argument_list|()
operator|.
name|contains
argument_list|(
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxRetriesByOzoneClient ()
specifier|public
name|void
name|testMaxRetriesByOzoneClient
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
name|getKeyName
argument_list|()
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|4
operator|*
name|blockSize
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|KeyOutputStream
argument_list|)
expr_stmt|;
name|KeyOutputStream
name|keyOutputStream
init|=
operator|(
name|KeyOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockOutputStreamEntry
argument_list|>
name|entries
init|=
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|int
name|dataLength
init|=
name|maxFlushSize
operator|+
literal|50
decl_stmt|;
comment|// write data more than 1 chunk
name|byte
index|[]
name|data1
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|dataLength
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|long
name|containerID
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|containerList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockOutputStreamEntry
name|entry
range|:
name|entries
control|)
block|{
name|containerID
operator|=
name|entry
operator|.
name|getBlockID
argument_list|()
operator|.
name|getContainerID
argument_list|()
expr_stmt|;
name|ContainerInfo
name|container
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getPipelineManager
argument_list|()
operator|.
name|getPipeline
argument_list|(
name|container
operator|.
name|getPipelineID
argument_list|()
argument_list|)
decl_stmt|;
name|XceiverClientSpi
name|xceiverClient
init|=
name|xceiverClientManager
operator|.
name|acquireClient
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|containerList
operator|.
name|contains
argument_list|(
name|containerID
argument_list|)
condition|)
block|{
name|xceiverClient
operator|.
name|sendCommand
argument_list|(
name|ContainerTestHelper
operator|.
name|getCreateContainerRequest
argument_list|(
name|containerID
argument_list|,
name|pipeline
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xceiverClientManager
operator|.
name|releaseClient
argument_list|(
name|xceiverClient
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
name|OutputStream
name|stream
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stream
operator|instanceof
name|BlockOutputStream
argument_list|)
expr_stmt|;
name|BlockOutputStream
name|blockOutputStream
init|=
operator|(
name|BlockOutputStream
operator|)
name|stream
decl_stmt|;
name|ContainerTestHelper
operator|.
name|waitForContainerClose
argument_list|(
name|key
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
try|try
block|{
name|key
operator|.
name|write
argument_list|(
name|data1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|HddsClientUtils
operator|.
name|checkForException
argument_list|(
name|blockOutputStream
operator|.
name|getIoException
argument_list|()
argument_list|)
operator|instanceof
name|ContainerNotOpenException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Retry request failed. retries get failed due to exceeded maximum "
operator|+
literal|"allowed retries number: 3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Stream is closed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected should not be thrown"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createKey (String keyName, ReplicationType type, long size)
specifier|private
name|OzoneOutputStream
name|createKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|ReplicationType
name|type
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ContainerTestHelper
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|objectStore
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
return|;
block|}
DECL|method|validateData (String keyName, byte[] data)
specifier|private
name|void
name|validateData
parameter_list|(
name|String
name|keyName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerTestHelper
operator|.
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data
argument_list|,
name|objectStore
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

