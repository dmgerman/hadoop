begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rpc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|events
operator|.
name|SCMEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneBucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneVolume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|ChunkGroupOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|io
operator|.
name|OzoneOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|container
operator|.
name|ContainerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|commands
operator|.
name|CloseContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_SCM_WATCHER_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_STALENODE_INTERVAL
import|;
end_import

begin_comment
comment|/**  * Tests Close Container Exception handling by Ozone Client.  */
end_comment

begin_class
DECL|class|TestCloseContainerHandlingByClient
specifier|public
class|class
name|TestCloseContainerHandlingByClient
block|{
DECL|field|cluster
specifier|private
specifier|static
name|MiniOzoneCluster
name|cluster
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|OzoneClient
name|client
decl_stmt|;
DECL|field|objectStore
specifier|private
specifier|static
name|ObjectStore
name|objectStore
decl_stmt|;
DECL|field|chunkSize
specifier|private
specifier|static
name|int
name|chunkSize
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|static
name|int
name|blockSize
decl_stmt|;
DECL|field|volumeName
specifier|private
specifier|static
name|String
name|volumeName
decl_stmt|;
DECL|field|bucketName
specifier|private
specifier|static
name|String
name|bucketName
decl_stmt|;
DECL|field|keyString
specifier|private
specifier|static
name|String
name|keyString
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true    *    * @throws IOException    */
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|chunkSize
operator|=
operator|(
name|int
operator|)
name|OzoneConsts
operator|.
name|MB
expr_stmt|;
name|blockSize
operator|=
literal|4
operator|*
name|chunkSize
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_WATCH_REQUEST_TIMEOUT
argument_list|,
literal|"5000ms"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|HDDS_SCM_WATCHER_TIMEOUT
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_SCM_STALENODE_INTERVAL
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_BLOCK_SIZE_IN_MB
argument_list|,
operator|(
literal|4
operator|)
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|MiniOzoneCluster
operator|.
name|newBuilder
argument_list|(
name|conf
argument_list|)
operator|.
name|setNumDatanodes
argument_list|(
literal|7
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForClusterToBeReady
argument_list|()
expr_stmt|;
comment|//the easiest way to create an open container is creating a key
name|client
operator|=
name|OzoneClientFactory
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|objectStore
operator|=
name|client
operator|.
name|getObjectStore
argument_list|()
expr_stmt|;
name|keyString
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|volumeName
operator|=
literal|"closecontainerexceptionhandlingtest"
expr_stmt|;
name|bucketName
operator|=
name|volumeName
expr_stmt|;
name|objectStore
operator|.
name|createVolume
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|createBucket
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|AfterClass
DECL|method|shutdown ()
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBlockWritesWithFlushAndClose ()
specifier|public
name|void
name|testBlockWritesWithFlushAndClose
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
literal|"standalone"
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// write data more than 1 chunk
name|byte
index|[]
name|data
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|chunkSize
operator|+
name|chunkSize
operator|/
literal|2
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|ChunkGroupOutputStream
argument_list|)
expr_stmt|;
comment|//get the name of a valid container
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|waitForContainerClose
argument_list|(
name|keyName
argument_list|,
name|key
argument_list|,
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read the key from OM again and match the length.The length will still
comment|// be the equal to the original data size.
name|OmKeyInfo
name|keyInfo
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|lookupKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|data
operator|.
name|length
argument_list|,
name|keyInfo
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Written the same data twice
name|String
name|dataString
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|dataString
operator|.
name|concat
argument_list|(
name|dataString
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|dataString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockWritesCloseConsistency ()
specifier|public
name|void
name|testBlockWritesCloseConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
literal|"standalone2"
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// write data more than 1 chunk
name|byte
index|[]
name|data
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|chunkSize
operator|+
name|chunkSize
operator|/
literal|2
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|ChunkGroupOutputStream
argument_list|)
expr_stmt|;
comment|//get the name of a valid container
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|waitForContainerClose
argument_list|(
name|keyName
argument_list|,
name|key
argument_list|,
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
expr_stmt|;
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read the key from OM again and match the length.The length will still
comment|// be the equal to the original data size.
name|OmKeyInfo
name|keyInfo
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|lookupKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|keyInfo
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiBlockWrites ()
specifier|public
name|void
name|testMultiBlockWrites
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
literal|"standalone3"
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
operator|(
literal|4
operator|*
name|blockSize
operator|)
argument_list|)
decl_stmt|;
name|ChunkGroupOutputStream
name|groupOutputStream
init|=
operator|(
name|ChunkGroupOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
comment|// With the initial size provided, it should have preallocated 4 blocks
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|groupOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// write data more than 1 chunk
name|byte
index|[]
name|data
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
operator|(
literal|3
operator|*
name|blockSize
operator|)
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
literal|3
operator|*
name|blockSize
argument_list|)
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|ChunkGroupOutputStream
argument_list|)
expr_stmt|;
comment|//get the name of a valid container
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|waitForContainerClose
argument_list|(
name|keyName
argument_list|,
name|key
argument_list|,
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
expr_stmt|;
comment|// write 1 more block worth of data. It will fail and new block will be
comment|// allocated
name|key
operator|.
name|write
argument_list|(
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|blockSize
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read the key from OM again and match the length.The length will still
comment|// be the equal to the original data size.
name|OmKeyInfo
name|keyInfo
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|lookupKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|keyLocationInfos
init|=
name|keyInfo
operator|.
name|getKeyLocationVersions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlocksLatestVersionOnly
argument_list|()
decl_stmt|;
comment|// Though we have written only block initially, the close will hit
comment|// closeContainerException and remaining data in the chunkOutputStream
comment|// buffer will be copied into a different allocated block and will be
comment|// committed.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|keyLocationInfos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|blockSize
argument_list|,
name|keyInfo
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|OmKeyLocationInfo
name|locationInfo
range|:
name|keyLocationInfos
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|blockSize
argument_list|,
name|locationInfo
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiBlockWrites2 ()
specifier|public
name|void
name|testMultiBlockWrites2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
literal|"ratis2"
decl_stmt|;
name|long
name|dataLength
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|4
operator|*
name|blockSize
argument_list|)
decl_stmt|;
name|ChunkGroupOutputStream
name|groupOutputStream
init|=
operator|(
name|ChunkGroupOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|ChunkGroupOutputStream
argument_list|)
expr_stmt|;
comment|// With the initial size provided, it should have pre allocated 4 blocks
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|groupOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dataString
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
operator|(
literal|2
operator|*
name|blockSize
operator|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// 3 block are completely written to the DataNode in 3 blocks.
comment|// Data of length half of chunkSize resides in the chunkOutput stream buffer
name|String
name|dataString2
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|chunkSize
operator|*
literal|1
operator|/
literal|2
argument_list|)
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|dataString2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|//get the name of a valid container
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|waitForContainerClose
argument_list|(
name|keyName
argument_list|,
name|key
argument_list|,
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
expr_stmt|;
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read the key from OM again and match the length.The length will still
comment|// be the equal to the original data size.
name|OmKeyInfo
name|keyInfo
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|lookupKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|keyLocationInfos
init|=
name|keyInfo
operator|.
name|getKeyLocationVersions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlocksLatestVersionOnly
argument_list|()
decl_stmt|;
comment|// Though we have written only block initially, the close will hit
comment|// closeContainerException and remaining data in the chunkOutputStream
comment|// buffer will be copied into a different allocated block and will be
comment|// committed.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dataString
operator|.
name|concat
argument_list|(
name|dataString2
argument_list|)
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|keyInfo
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|dataString
operator|.
name|concat
argument_list|(
name|dataString2
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiBlockWrites3 ()
specifier|public
name|void
name|testMultiBlockWrites3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
literal|"standalone5"
decl_stmt|;
name|int
name|keyLen
init|=
literal|4
operator|*
name|blockSize
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
name|keyLen
argument_list|)
decl_stmt|;
name|ChunkGroupOutputStream
name|groupOutputStream
init|=
operator|(
name|ChunkGroupOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
comment|// With the initial size provided, it should have preallocated 4 blocks
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|groupOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// write data 3 blocks and one more chunk
name|byte
index|[]
name|writtenData
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|keyLen
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|writtenData
argument_list|,
literal|0
argument_list|,
literal|3
operator|*
name|blockSize
operator|+
name|chunkSize
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
literal|3
operator|*
name|blockSize
operator|+
name|chunkSize
argument_list|)
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|ChunkGroupOutputStream
argument_list|)
expr_stmt|;
comment|//get the name of a valid container
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|waitForContainerClose
argument_list|(
name|keyName
argument_list|,
name|key
argument_list|,
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
expr_stmt|;
comment|// write 3 more chunks worth of data. It will fail and new block will be
comment|// allocated. This write completes 4 blocks worth of data written to key
name|data
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|writtenData
argument_list|,
literal|3
operator|*
name|blockSize
operator|+
name|chunkSize
argument_list|,
name|keyLen
argument_list|)
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// read the key from OM again and match the length and data.
name|OmKeyInfo
name|keyInfo
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|lookupKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|keyLocationInfos
init|=
name|keyInfo
operator|.
name|getKeyLocationVersions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlocksLatestVersionOnly
argument_list|()
decl_stmt|;
name|OzoneVolume
name|volume
init|=
name|objectStore
operator|.
name|getVolume
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|OzoneBucket
name|bucket
init|=
name|volume
operator|.
name|getBucket
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|OzoneInputStream
name|inputStream
init|=
name|bucket
operator|.
name|readKey
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|readData
init|=
operator|new
name|byte
index|[
name|keyLen
index|]
decl_stmt|;
name|inputStream
operator|.
name|read
argument_list|(
name|readData
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|writtenData
argument_list|,
name|readData
argument_list|)
expr_stmt|;
comment|// Though we have written only block initially, the close will hit
comment|// closeContainerException and remaining data in the chunkOutputStream
comment|// buffer will be copied into a different allocated block and will be
comment|// committed.
name|long
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OmKeyLocationInfo
name|locationInfo
range|:
name|keyLocationInfos
control|)
block|{
name|length
operator|+=
name|locationInfo
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|blockSize
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForContainerClose (String keyName, OzoneOutputStream outputStream, HddsProtos.ReplicationType type)
specifier|private
name|void
name|waitForContainerClose
parameter_list|(
name|String
name|keyName
parameter_list|,
name|OzoneOutputStream
name|outputStream
parameter_list|,
name|HddsProtos
operator|.
name|ReplicationType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|ChunkGroupOutputStream
name|groupOutputStream
init|=
operator|(
name|ChunkGroupOutputStream
operator|)
name|outputStream
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locationInfoList
init|=
name|groupOutputStream
operator|.
name|getLocationInfoList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|containerIdList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OmKeyLocationInfo
name|info
range|:
name|locationInfoList
control|)
block|{
name|containerIdList
operator|.
name|add
argument_list|(
name|info
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|containerIdList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|waitForContainerClose
argument_list|(
name|type
argument_list|,
name|containerIdList
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForContainerClose (HddsProtos.ReplicationType type, Long... containerIdList)
specifier|private
name|void
name|waitForContainerClose
parameter_list|(
name|HddsProtos
operator|.
name|ReplicationType
name|type
parameter_list|,
name|Long
modifier|...
name|containerIdList
parameter_list|)
throws|throws
name|ContainerNotFoundException
throws|,
name|PipelineNotFoundException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|Pipeline
argument_list|>
name|pipelineList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|containerID
range|:
name|containerIdList
control|)
block|{
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getEventQueue
argument_list|()
operator|.
name|fireEvent
argument_list|(
name|SCMEvents
operator|.
name|CLOSE_CONTAINER
argument_list|,
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerInfo
name|container
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getPipelineManager
argument_list|()
operator|.
name|getPipeline
argument_list|(
name|container
operator|.
name|getPipelineID
argument_list|()
argument_list|)
decl_stmt|;
name|pipelineList
operator|.
name|add
argument_list|(
name|pipeline
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
name|pipeline
operator|.
name|getNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDetails
name|details
range|:
name|datanodes
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ContainerTestHelper
operator|.
name|isContainerClosed
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|details
argument_list|)
argument_list|)
expr_stmt|;
comment|// send the order to close the container
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getScmNodeManager
argument_list|()
operator|.
name|addDatanodeCommand
argument_list|(
name|details
operator|.
name|getUuid
argument_list|()
argument_list|,
operator|new
name|CloseContainerCommand
argument_list|(
name|containerID
argument_list|,
name|type
argument_list|,
name|pipeline
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|containerID
range|:
name|containerIdList
control|)
block|{
name|Pipeline
name|pipeline
init|=
name|pipelineList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
name|pipeline
operator|.
name|getNodes
argument_list|()
decl_stmt|;
comment|// Below condition avoids the case where container has been allocated
comment|// but not yet been used by the client. In such a case container is never
comment|// created.
if|if
condition|(
name|datanodes
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|dn
lambda|->
name|ContainerTestHelper
operator|.
name|isContainerPresent
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|dn
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|DatanodeDetails
name|datanodeDetails
range|:
name|datanodes
control|)
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|ContainerTestHelper
operator|.
name|isContainerClosed
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|datanodeDetails
argument_list|)
argument_list|,
literal|500
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|//double check if it's really closed
comment|// (waitFor also throws an exception)
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ContainerTestHelper
operator|.
name|isContainerClosed
argument_list|(
name|cluster
argument_list|,
name|containerID
argument_list|,
name|datanodeDetails
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|index
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
comment|// test needs to be fixed after close container is handled for
comment|// non-existent containers on datanode. Test closes pre allocated containers
comment|// on the datanode.
annotation|@
name|Test
DECL|method|testDiscardPreallocatedBlocks ()
specifier|public
name|void
name|testDiscardPreallocatedBlocks
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
literal|"discardpreallocatedblocks"
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|2
operator|*
name|blockSize
argument_list|)
decl_stmt|;
name|ChunkGroupOutputStream
name|groupOutputStream
init|=
operator|(
name|ChunkGroupOutputStream
operator|)
name|key
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|ChunkGroupOutputStream
argument_list|)
expr_stmt|;
comment|// With the initial size provided, it should have pre allocated 4 blocks
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|groupOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dataString
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
operator|(
literal|1
operator|*
name|blockSize
operator|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|dataString
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locationInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|groupOutputStream
operator|.
name|getLocationInfoList
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|containerID
init|=
name|locationInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|ContainerInfo
name|container
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getContainerManager
argument_list|()
operator|.
name|getContainer
argument_list|(
name|ContainerID
operator|.
name|valueof
argument_list|(
name|containerID
argument_list|)
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|cluster
operator|.
name|getStorageContainerManager
argument_list|()
operator|.
name|getPipelineManager
argument_list|()
operator|.
name|getPipeline
argument_list|(
name|container
operator|.
name|getPipelineID
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|datanodes
init|=
name|pipeline
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|datanodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|waitForContainerClose
argument_list|(
name|keyName
argument_list|,
name|key
argument_list|,
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
expr_stmt|;
name|dataString
operator|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
operator|(
literal|1
operator|*
name|blockSize
operator|)
argument_list|)
expr_stmt|;
name|data
operator|=
name|dataString
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|groupOutputStream
operator|.
name|getStreamEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// the 1st block got written. Now all the containers are closed, so the 2nd
comment|// pre allocated block will be removed from the list and new block should
comment|// have been allocated
name|Assert
operator|.
name|assertTrue
argument_list|(
name|groupOutputStream
operator|.
name|getLocationInfoList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockID
argument_list|()
operator|.
name|equals
argument_list|(
name|locationInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlockID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|groupOutputStream
operator|.
name|getLocationInfoList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockID
argument_list|()
operator|.
name|equals
argument_list|(
name|locationInfos
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlockID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createKey (String keyName, ReplicationType type, long size)
specifier|private
name|OzoneOutputStream
name|createKey
parameter_list|(
name|String
name|keyName
parameter_list|,
name|ReplicationType
name|type
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ContainerTestHelper
operator|.
name|createKey
argument_list|(
name|keyName
argument_list|,
name|type
argument_list|,
name|size
argument_list|,
name|objectStore
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
return|;
block|}
DECL|method|validateData (String keyName, byte[] data)
specifier|private
name|void
name|validateData
parameter_list|(
name|String
name|keyName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerTestHelper
operator|.
name|validateData
argument_list|(
name|keyName
argument_list|,
name|data
argument_list|,
name|objectStore
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockWriteViaRatis ()
specifier|public
name|void
name|testBlockWriteViaRatis
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keyName
init|=
literal|"ratis"
decl_stmt|;
name|OzoneOutputStream
name|key
init|=
name|createKey
argument_list|(
name|keyName
argument_list|,
name|ReplicationType
operator|.
name|RATIS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ContainerTestHelper
operator|.
name|getFixedLengthString
argument_list|(
name|keyString
argument_list|,
name|chunkSize
operator|+
name|chunkSize
operator|/
literal|2
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|//get the name of a valid container
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|key
operator|.
name|getOutputStream
argument_list|()
operator|instanceof
name|ChunkGroupOutputStream
argument_list|)
expr_stmt|;
name|waitForContainerClose
argument_list|(
name|keyName
argument_list|,
name|key
argument_list|,
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
argument_list|)
expr_stmt|;
comment|// Again Write the Data. This will throw an exception which will be handled
comment|// and new blocks will be allocated
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|key
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// The write will fail but exception will be handled and length will be
comment|// updated correctly in OzoneManager once the steam is closed
name|key
operator|.
name|close
argument_list|()
expr_stmt|;
name|OmKeyInfo
name|keyInfo
init|=
name|cluster
operator|.
name|getOzoneManager
argument_list|()
operator|.
name|lookupKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|String
name|dataString
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|dataString
operator|.
name|concat
argument_list|(
name|dataString
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|data
operator|.
name|length
argument_list|,
name|keyInfo
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|validateData
argument_list|(
name|keyName
argument_list|,
name|dataString
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

