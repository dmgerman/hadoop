begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|CertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|OMCertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|utils
operator|.
name|CertificateCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|KeyCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|MiniOzoneCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|X509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|OZONE_SCM_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ACL_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SECURITY_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test secure Ozone Manager operation in distributed handler scenario.  */
end_comment

begin_class
DECL|class|TestSecureOzoneManager
specifier|public
class|class
name|TestSecureOzoneManager
block|{
DECL|field|cluster
specifier|private
name|MiniOzoneCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|clusterId
specifier|private
name|String
name|clusterId
decl_stmt|;
DECL|field|scmId
specifier|private
name|String
name|scmId
decl_stmt|;
DECL|field|omId
specifier|private
name|String
name|omId
decl_stmt|;
DECL|field|metaDir
specifier|private
name|Path
name|metaDir
decl_stmt|;
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|1000
operator|*
literal|25
argument_list|)
decl_stmt|;
comment|/**    * Create a MiniDFSCluster for testing.    *<p>    * Ozone is made active by setting OZONE_ENABLED = true    */
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|clusterId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scmId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|omId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_ACL_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|KERBEROS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_SCM_NAMES
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|getTempPath
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|metaDir
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|,
literal|"om-meta"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|metaDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneManager
operator|.
name|setTestSecureOmFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Shutdown MiniDFSCluster.    */
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|metaDir
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test failure cases for secure OM initialization.    */
annotation|@
name|Test
DECL|method|testSecureOmInitFailures ()
specifier|public
name|void
name|testSecureOmInitFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivateKey
name|privateKey
decl_stmt|;
name|PublicKey
name|publicKey
decl_stmt|;
name|LogCapturer
name|omLogs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|OzoneManager
operator|.
name|getLogger
argument_list|()
argument_list|)
decl_stmt|;
name|OMStorage
name|omStorage
init|=
operator|new
name|OMStorage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|omStorage
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|omStorage
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
expr_stmt|;
name|omStorage
operator|.
name|setOmId
argument_list|(
name|omId
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 1: When keypair as well as certificate is missing. Initial keypair
comment|// boot-up. Get certificate will fail no SCM is not running.
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|ConnectException
operator|.
name|class
argument_list|,
literal|"Connection "
operator|+
literal|"refused; For more detail"
argument_list|,
parameter_list|()
lambda|->
name|OzoneManager
operator|.
name|initializeSecurity
argument_list|(
name|conf
argument_list|,
name|omStorage
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityConfig
name|securityConfig
init|=
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CertificateClient
name|client
init|=
operator|new
name|OMCertificateClient
argument_list|(
name|securityConfig
argument_list|)
decl_stmt|;
name|privateKey
operator|=
name|client
operator|.
name|getPrivateKey
argument_list|()
expr_stmt|;
name|publicKey
operator|=
name|client
operator|.
name|getPublicKey
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: GETCERT"
argument_list|)
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 2: If key pair already exist than response should be RECOVER.
name|client
operator|=
operator|new
name|OMCertificateClient
argument_list|(
name|securityConfig
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|" OM security"
operator|+
literal|" initialization failed"
argument_list|,
parameter_list|()
lambda|->
name|OzoneManager
operator|.
name|initializeSecurity
argument_list|(
name|conf
argument_list|,
name|omStorage
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: RECOVER"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|" OM certificate is "
operator|+
literal|"missing"
argument_list|)
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 3: When public key as well as certificate is missing.
name|client
operator|=
operator|new
name|OMCertificateClient
argument_list|(
name|securityConfig
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|securityConfig
operator|.
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|securityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|" OM security"
operator|+
literal|" initialization failed"
argument_list|,
parameter_list|()
lambda|->
name|OzoneManager
operator|.
name|initializeSecurity
argument_list|(
name|conf
argument_list|,
name|omStorage
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: FAILURE"
argument_list|)
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 4: When private key and certificate is missing.
name|client
operator|=
operator|new
name|OMCertificateClient
argument_list|(
name|securityConfig
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|securityConfig
operator|.
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|securityConfig
operator|.
name|getPrivateKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|KeyCodec
name|keyCodec
init|=
operator|new
name|KeyCodec
argument_list|(
name|securityConfig
argument_list|)
decl_stmt|;
name|keyCodec
operator|.
name|writePublicKey
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|" OM security"
operator|+
literal|" initialization failed"
argument_list|,
parameter_list|()
lambda|->
name|OzoneManager
operator|.
name|initializeSecurity
argument_list|(
name|conf
argument_list|,
name|omStorage
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: FAILURE"
argument_list|)
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 5: When only certificate is present.
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|securityConfig
operator|.
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|securityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|CertificateCodec
name|certCodec
init|=
operator|new
name|CertificateCodec
argument_list|(
name|securityConfig
argument_list|)
decl_stmt|;
name|X509Certificate
name|x509Certificate
init|=
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=Test"
argument_list|,
operator|new
name|KeyPair
argument_list|(
name|publicKey
argument_list|,
name|privateKey
argument_list|)
argument_list|,
literal|10
argument_list|,
name|securityConfig
operator|.
name|getSignatureAlgo
argument_list|()
argument_list|)
decl_stmt|;
name|certCodec
operator|.
name|writeCertificate
argument_list|(
operator|new
name|X509CertificateHolder
argument_list|(
name|x509Certificate
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|OMCertificateClient
argument_list|(
name|securityConfig
argument_list|,
name|x509Certificate
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|omStorage
operator|.
name|setOmCertSerialId
argument_list|(
name|x509Certificate
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|" OM security"
operator|+
literal|" initialization failed"
argument_list|,
parameter_list|()
lambda|->
name|OzoneManager
operator|.
name|initializeSecurity
argument_list|(
name|conf
argument_list|,
name|omStorage
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: FAILURE"
argument_list|)
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 6: When private key and certificate is present.
name|client
operator|=
operator|new
name|OMCertificateClient
argument_list|(
name|securityConfig
argument_list|,
name|x509Certificate
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|securityConfig
operator|.
name|getKeyLocation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|securityConfig
operator|.
name|getPublicKeyFileName
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|keyCodec
operator|.
name|writePrivateKey
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
name|OzoneManager
operator|.
name|initializeSecurity
argument_list|(
name|conf
argument_list|,
name|omStorage
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: SUCCESS"
argument_list|)
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Case 7 When keypair and certificate is present.
name|client
operator|=
operator|new
name|OMCertificateClient
argument_list|(
name|securityConfig
argument_list|,
name|x509Certificate
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneManager
operator|.
name|initializeSecurity
argument_list|(
name|conf
argument_list|,
name|omStorage
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|client
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: SUCCESS"
argument_list|)
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test om bind socket address.    */
annotation|@
name|Test
DECL|method|testSecureOmInitFailure ()
specifier|public
name|void
name|testSecureOmInitFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|config
init|=
operator|new
name|OzoneConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OMStorage
name|omStorage
init|=
operator|new
name|OMStorage
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|omStorage
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|omStorage
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
expr_stmt|;
name|omStorage
operator|.
name|setOmId
argument_list|(
name|omId
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|OZONE_OM_ADDRESS_KEY
argument_list|,
literal|"om-unknown"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
literal|"Can't get SCM signed"
operator|+
literal|" certificate"
argument_list|,
parameter_list|()
lambda|->
name|OzoneManager
operator|.
name|initializeSecurity
argument_list|(
name|config
argument_list|,
name|omStorage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

