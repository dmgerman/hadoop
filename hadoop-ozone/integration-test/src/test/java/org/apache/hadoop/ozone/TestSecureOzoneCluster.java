begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ADMINISTRATORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SECURITY_ENABLED_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|KerberosAuthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|LogCapturer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class to for security enabled Ozone cluster.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TestSecureOzoneCluster
specifier|public
specifier|final
class|class
name|TestSecureOzoneCluster
block|{
DECL|field|LOGGER
specifier|private
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSecureOzoneCluster
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|80000
argument_list|)
decl_stmt|;
DECL|field|miniKdc
specifier|private
name|MiniKdc
name|miniKdc
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|workDir
specifier|private
name|File
name|workDir
decl_stmt|;
DECL|field|securityProperties
specifier|private
specifier|static
name|Properties
name|securityProperties
decl_stmt|;
DECL|field|scmKeytab
specifier|private
name|File
name|scmKeytab
decl_stmt|;
DECL|field|spnegoKeytab
specifier|private
name|File
name|spnegoKeytab
decl_stmt|;
DECL|field|omKeyTab
specifier|private
name|File
name|omKeyTab
decl_stmt|;
DECL|field|curUser
specifier|private
name|String
name|curUser
decl_stmt|;
DECL|field|scm
specifier|private
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|om
specifier|private
name|OzoneManager
name|om
decl_stmt|;
DECL|field|clusterId
specifier|private
specifier|static
name|String
name|clusterId
decl_stmt|;
DECL|field|scmId
specifier|private
specifier|static
name|String
name|scmId
decl_stmt|;
DECL|field|omId
specifier|private
specifier|static
name|String
name|omId
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
try|try
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|startMiniKdc
argument_list|()
expr_stmt|;
name|setSecureConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|createCredentialsInKDC
argument_list|(
name|conf
argument_list|,
name|miniKdc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Failed to initialize TestSecureOzoneCluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Failed to initialize TestSecureOzoneCluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|stopMiniKdc
argument_list|()
expr_stmt|;
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|scm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|om
operator|!=
literal|null
condition|)
block|{
name|om
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Failed to stop TestSecureOzoneCluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createCredentialsInKDC (Configuration conf, MiniKdc miniKdc)
specifier|private
name|void
name|createCredentialsInKDC
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MiniKdc
name|miniKdc
parameter_list|)
throws|throws
name|Exception
block|{
name|createPrincipal
argument_list|(
name|scmKeytab
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_PRINCIPAL_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|createPrincipal
argument_list|(
name|spnegoKeytab
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_HTTP_KERBEROS_PRINCIPAL_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|get
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_KERBEROS_PRINCIPAL_KEY
argument_list|)
expr_stmt|;
name|createPrincipal
argument_list|(
name|omKeyTab
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_KERBEROS_PRINCIPAL_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createPrincipal (File keytab, String... principal)
specifier|private
name|void
name|createPrincipal
parameter_list|(
name|File
name|keytab
parameter_list|,
name|String
modifier|...
name|principal
parameter_list|)
throws|throws
name|Exception
block|{
name|miniKdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
argument_list|)
expr_stmt|;
block|}
DECL|method|startMiniKdc ()
specifier|private
name|void
name|startMiniKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|workDir
operator|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|TestSecureOzoneCluster
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|securityProperties
operator|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
expr_stmt|;
name|miniKdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|securityProperties
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|miniKdc
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stopMiniKdc ()
specifier|private
name|void
name|stopMiniKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|miniKdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|setSecureConfig (Configuration conf)
specifier|private
name|void
name|setSecureConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|host
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
decl_stmt|;
name|String
name|realm
init|=
name|miniKdc
operator|.
name|getRealm
argument_list|()
decl_stmt|;
name|curUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_ADMINISTRATORS
argument_list|,
name|curUser
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"scm/"
operator|+
name|host
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_HTTP_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"HTTP_SCM/"
operator|+
name|host
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"om/"
operator|+
name|host
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"HTTP_OM/"
operator|+
name|host
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
expr_stmt|;
name|scmKeytab
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"scm.keytab"
argument_list|)
expr_stmt|;
name|spnegoKeytab
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"http.keytab"
argument_list|)
expr_stmt|;
name|omKeyTab
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"om.keytab"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
name|scmKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_HTTP_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
name|spnegoKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
name|omKeyTab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureScmStartupSuccess ()
specifier|public
name|void
name|testSecureScmStartupSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|initSCM
argument_list|()
expr_stmt|;
name|scm
operator|=
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//Reads the SCM Info from SCM instance
name|ScmInfo
name|scmInfo
init|=
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|getScmInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterId
argument_list|,
name|scmInfo
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scmId
argument_list|,
name|scmInfo
operator|.
name|getScmId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initSCM ()
specifier|private
name|void
name|initSCM
parameter_list|()
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|clusterId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scmId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|omId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|scmPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|,
literal|"scm-meta"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|scmPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SCMStorage
name|scmStore
init|=
operator|new
name|SCMStorage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|scmStore
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|scmStore
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
expr_stmt|;
comment|// writes the version file properties
name|scmStore
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureScmStartupFailure ()
specifier|public
name|void
name|testSecureScmStartupFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|initSCM
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Running in secure mode, but config doesn't have a keytab"
argument_list|,
parameter_list|()
lambda|->
block|{
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"scm/_HOST@EXAMPLE.com"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
literal|"/etc/security/keytabs/scm.keytab"
argument_list|)
expr_stmt|;
name|testCommonKerberosFailures
argument_list|(
parameter_list|()
lambda|->
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommonKerberosFailures (Callable callable)
specifier|private
name|void
name|testCommonKerberosFailures
parameter_list|(
name|Callable
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|KerberosAuthException
operator|.
name|class
argument_list|,
literal|"failure "
operator|+
literal|"to login: for principal:"
argument_list|,
name|callable
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"OAuth2"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"Invalid"
operator|+
literal|" attribute value for hadoop.security.authentication of OAuth2"
argument_list|,
name|callable
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"KERBEROS_SSL"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|AuthenticationException
operator|.
name|class
argument_list|,
literal|"KERBEROS_SSL authentication method not"
argument_list|,
name|callable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the secure KSM Initialization Failure.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testSecureKsmInitializationFailure ()
specifier|public
name|void
name|testSecureKsmInitializationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|initSCM
argument_list|()
expr_stmt|;
comment|// Create a secure SCM instance as om client will connect to it
name|scm
operator|=
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|OMStorage
name|ksmStore
init|=
operator|new
name|OMStorage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ksmStore
operator|.
name|setClusterId
argument_list|(
literal|"testClusterId"
argument_list|)
expr_stmt|;
name|ksmStore
operator|.
name|setScmId
argument_list|(
literal|"testScmId"
argument_list|)
expr_stmt|;
comment|// writes the version file properties
name|ksmStore
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"non-existent-user@EXAMPLE.com"
argument_list|)
expr_stmt|;
name|testCommonKerberosFailures
argument_list|(
parameter_list|()
lambda|->
name|OzoneManager
operator|.
name|createOm
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the secure KSM Initialization success.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testSecureKsmInitializationSuccess ()
specifier|public
name|void
name|testSecureKsmInitializationSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|initSCM
argument_list|()
expr_stmt|;
comment|// Create a secure SCM instance as om client will connect to it
name|scm
operator|=
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LogCapturer
name|logs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|OzoneManager
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|GenericTestUtils
operator|.
name|getTempPath
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|metaDirPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|,
literal|"om-meta"
argument_list|)
decl_stmt|;
name|OMStorage
name|omStore
init|=
operator|new
name|OMStorage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|omStore
operator|.
name|setClusterId
argument_list|(
literal|"testClusterId"
argument_list|)
expr_stmt|;
name|omStore
operator|.
name|setScmId
argument_list|(
literal|"testScmId"
argument_list|)
expr_stmt|;
comment|// writes the version file properties
name|omStore
operator|.
name|initialize
argument_list|()
expr_stmt|;
try|try
block|{
name|om
operator|=
name|OzoneManager
operator|.
name|createOm
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Expects timeout failure from scmClient in KSM but KSM user login via
comment|// kerberos should succeed
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Ozone Manager login successful."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

