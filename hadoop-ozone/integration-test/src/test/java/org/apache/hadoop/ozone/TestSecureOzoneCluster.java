begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|SCMSecurityProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|HddsClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMStorageConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|HDDSKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|keys
operator|.
name|KeyCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|CertificateClientTestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|S3SecretValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocolPB
operator|.
name|OzoneManagerProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocolPB
operator|.
name|OzoneManagerProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|KerberosAuthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
operator|.
name|LogCapturer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|RDN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|X500Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|style
operator|.
name|BCStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|jcajce
operator|.
name|JcaX509CertificateHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ADMINISTRATORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SECURITY_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|INVALID_AUTH_METHOD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|TOKEN_ERROR_OTHER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|TOKEN_EXPIRED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|slf4j
operator|.
name|event
operator|.
name|Level
operator|.
name|INFO
import|;
end_import

begin_comment
comment|/**  * Test class to for security enabled Ozone cluster.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TestSecureOzoneCluster
specifier|public
specifier|final
class|class
name|TestSecureOzoneCluster
block|{
DECL|field|TEST_USER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_USER
init|=
literal|"testUgiUser@EXAMPLE.COM"
decl_stmt|;
DECL|field|CLIENT_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|CLIENT_TIMEOUT
init|=
literal|2
operator|*
literal|1000
decl_stmt|;
DECL|field|logger
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSecureOzoneCluster
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|timeout
specifier|public
name|Timeout
name|timeout
init|=
operator|new
name|Timeout
argument_list|(
literal|80000
argument_list|)
decl_stmt|;
DECL|field|miniKdc
specifier|private
name|MiniKdc
name|miniKdc
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|workDir
specifier|private
name|File
name|workDir
decl_stmt|;
DECL|field|securityProperties
specifier|private
specifier|static
name|Properties
name|securityProperties
decl_stmt|;
DECL|field|scmKeytab
specifier|private
name|File
name|scmKeytab
decl_stmt|;
DECL|field|spnegoKeytab
specifier|private
name|File
name|spnegoKeytab
decl_stmt|;
DECL|field|omKeyTab
specifier|private
name|File
name|omKeyTab
decl_stmt|;
DECL|field|testUserKeytab
specifier|private
name|File
name|testUserKeytab
decl_stmt|;
DECL|field|curUser
specifier|private
name|String
name|curUser
decl_stmt|;
DECL|field|testUserPrincipal
specifier|private
name|String
name|testUserPrincipal
decl_stmt|;
DECL|field|testKerberosUgi
specifier|private
name|UserGroupInformation
name|testKerberosUgi
decl_stmt|;
DECL|field|scm
specifier|private
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|om
specifier|private
name|OzoneManager
name|om
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|clusterId
specifier|private
specifier|static
name|String
name|clusterId
decl_stmt|;
DECL|field|scmId
specifier|private
specifier|static
name|String
name|scmId
decl_stmt|;
DECL|field|omId
specifier|private
specifier|static
name|String
name|omId
decl_stmt|;
DECL|field|omClient
specifier|private
name|OzoneManagerProtocolClientSideTranslatorPB
name|omClient
decl_stmt|;
DECL|field|keyPair
specifier|private
name|KeyPair
name|keyPair
decl_stmt|;
DECL|field|metaDirPath
specifier|private
name|Path
name|metaDirPath
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|omCertSerialId
specifier|private
name|String
name|omCertSerialId
init|=
literal|"9879877970576"
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
try|try
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|metaDirPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|,
literal|"om-meta"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OZONE_METADATA_DIRS
argument_list|,
name|metaDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
name|KERBEROS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|startMiniKdc
argument_list|()
expr_stmt|;
name|setSecureConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|createCredentialsInKDC
argument_list|(
name|conf
argument_list|,
name|miniKdc
argument_list|)
expr_stmt|;
name|generateKeyPair
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//      OzoneManager.setTestSecureOmFlag(true);
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to initialize TestSecureOzoneCluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to initialize TestSecureOzoneCluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|stopMiniKdc
argument_list|()
expr_stmt|;
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|scm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|om
operator|!=
literal|null
condition|)
block|{
name|om
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|omClient
operator|!=
literal|null
condition|)
block|{
name|omClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to stop TestSecureOzoneCluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createCredentialsInKDC (Configuration configuration, MiniKdc kdc)
specifier|private
name|void
name|createCredentialsInKDC
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|MiniKdc
name|kdc
parameter_list|)
throws|throws
name|Exception
block|{
name|createPrincipal
argument_list|(
name|scmKeytab
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_PRINCIPAL_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|createPrincipal
argument_list|(
name|spnegoKeytab
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_HTTP_KERBEROS_PRINCIPAL_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|createPrincipal
argument_list|(
name|testUserKeytab
argument_list|,
name|testUserPrincipal
argument_list|)
expr_stmt|;
name|createPrincipal
argument_list|(
name|omKeyTab
argument_list|,
name|configuration
operator|.
name|get
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_KERBEROS_PRINCIPAL_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createPrincipal (File keytab, String... principal)
specifier|private
name|void
name|createPrincipal
parameter_list|(
name|File
name|keytab
parameter_list|,
name|String
modifier|...
name|principal
parameter_list|)
throws|throws
name|Exception
block|{
name|miniKdc
operator|.
name|createPrincipal
argument_list|(
name|keytab
argument_list|,
name|principal
argument_list|)
expr_stmt|;
block|}
DECL|method|startMiniKdc ()
specifier|private
name|void
name|startMiniKdc
parameter_list|()
throws|throws
name|Exception
block|{
name|workDir
operator|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|TestSecureOzoneCluster
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|securityProperties
operator|=
name|MiniKdc
operator|.
name|createConf
argument_list|()
expr_stmt|;
name|miniKdc
operator|=
operator|new
name|MiniKdc
argument_list|(
name|securityProperties
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|miniKdc
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stopMiniKdc ()
specifier|private
name|void
name|stopMiniKdc
parameter_list|()
block|{
name|miniKdc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|setSecureConfig (Configuration configuration)
specifier|private
name|void
name|setSecureConfig
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|configuration
operator|.
name|setBoolean
argument_list|(
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|OZONE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|host
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|String
name|realm
init|=
name|miniKdc
operator|.
name|getRealm
argument_list|()
decl_stmt|;
name|curUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OZONE_ADMINISTRATORS
argument_list|,
name|curUser
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"scm/"
operator|+
name|host
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_HTTP_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"HTTP_SCM/"
operator|+
name|host
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"om/"
operator|+
name|host
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"HTTP_OM/"
operator|+
name|host
operator|+
literal|"@"
operator|+
name|realm
argument_list|)
expr_stmt|;
name|scmKeytab
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"scm.keytab"
argument_list|)
expr_stmt|;
name|spnegoKeytab
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"http.keytab"
argument_list|)
expr_stmt|;
name|omKeyTab
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"om.keytab"
argument_list|)
expr_stmt|;
name|testUserKeytab
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"testuser.keytab"
argument_list|)
expr_stmt|;
name|testUserPrincipal
operator|=
literal|"test@"
operator|+
name|realm
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
name|scmKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_HTTP_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
name|spnegoKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
name|omKeyTab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_KERBEROS_KEYTAB_FILE
argument_list|,
name|spnegoKeytab
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureScmStartupSuccess ()
specifier|public
name|void
name|testSecureScmStartupSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|initSCM
argument_list|()
expr_stmt|;
name|scm
operator|=
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//Reads the SCM Info from SCM instance
name|ScmInfo
name|scmInfo
init|=
name|scm
operator|.
name|getClientProtocolServer
argument_list|()
operator|.
name|getScmInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterId
argument_list|,
name|scmInfo
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scmId
argument_list|,
name|scmInfo
operator|.
name|getScmId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSCMSecurityProtocol ()
specifier|public
name|void
name|testSCMSecurityProtocol
parameter_list|()
throws|throws
name|Exception
block|{
name|initSCM
argument_list|()
expr_stmt|;
name|scm
operator|=
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//Reads the SCM Info from SCM instance
try|try
block|{
name|scm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Case 1: User with Kerberos credentials should succeed.
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|testUserPrincipal
argument_list|,
name|testUserKeytab
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|KERBEROS
argument_list|)
expr_stmt|;
name|SCMSecurityProtocol
name|scmSecurityProtocolClient
init|=
name|HddsClientUtils
operator|.
name|getScmSecurityClient
argument_list|(
name|conf
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|scmSecurityProtocolClient
argument_list|)
expr_stmt|;
name|String
name|caCert
init|=
name|scmSecurityProtocolClient
operator|.
name|getCACertificate
argument_list|()
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|,
literal|"Certificate not found"
argument_list|,
parameter_list|()
lambda|->
name|scmSecurityProtocolClient
operator|.
name|getCertificate
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|caCert
argument_list|)
expr_stmt|;
comment|// Case 2: User without Kerberos credentials should fail.
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ugi
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthMethod
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
name|SCMSecurityProtocol
name|finalScmSecurityProtocolClient
init|=
name|HddsClientUtils
operator|.
name|getScmSecurityClient
argument_list|(
name|conf
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Client cannot"
operator|+
literal|" authenticate via:[KERBEROS]"
argument_list|,
parameter_list|()
lambda|->
name|finalScmSecurityProtocolClient
operator|.
name|getCACertificate
argument_list|()
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Client cannot"
operator|+
literal|" authenticate via:[KERBEROS]"
argument_list|,
parameter_list|()
lambda|->
name|finalScmSecurityProtocolClient
operator|.
name|getCertificate
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|scm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|initSCM ()
specifier|private
name|void
name|initSCM
parameter_list|()
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|clusterId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|scmId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|omId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|scmPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|,
literal|"scm-meta"
argument_list|)
decl_stmt|;
name|File
name|temp
init|=
name|scmPath
operator|.
name|toFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|temp
operator|.
name|exists
argument_list|()
condition|)
block|{
name|temp
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|scmPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SCMStorageConfig
name|scmStore
init|=
operator|new
name|SCMStorageConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|scmStore
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|scmStore
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
expr_stmt|;
comment|// writes the version file properties
name|scmStore
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecureScmStartupFailure ()
specifier|public
name|void
name|testSecureScmStartupFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|initSCM
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"Running in secure mode, but config doesn't have a keytab"
argument_list|,
parameter_list|()
lambda|->
block|{
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"scm/_HOST@EXAMPLE.com"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_SCM_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
literal|"/etc/security/keytabs/scm.keytab"
argument_list|)
expr_stmt|;
name|testCommonKerberosFailures
argument_list|(
parameter_list|()
lambda|->
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommonKerberosFailures (Callable callable)
specifier|private
name|void
name|testCommonKerberosFailures
parameter_list|(
name|Callable
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|KerberosAuthException
operator|.
name|class
argument_list|,
literal|"failure "
operator|+
literal|"to login: for principal:"
argument_list|,
name|callable
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"OAuth2"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"Invalid"
operator|+
literal|" attribute value for hadoop.security.authentication of OAuth2"
argument_list|,
name|callable
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"KERBEROS_SSL"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|AuthenticationException
operator|.
name|class
argument_list|,
literal|"KERBEROS_SSL authentication method not"
argument_list|,
name|callable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the secure om Initialization Failure.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testSecureOMInitializationFailure ()
specifier|public
name|void
name|testSecureOMInitializationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|initSCM
argument_list|()
expr_stmt|;
comment|// Create a secure SCM instance as om client will connect to it
name|scm
operator|=
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setupOm
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_KERBEROS_PRINCIPAL_KEY
argument_list|,
literal|"non-existent-user@EXAMPLE.com"
argument_list|)
expr_stmt|;
name|testCommonKerberosFailures
argument_list|(
parameter_list|()
lambda|->
name|OzoneManager
operator|.
name|createOm
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the secure om Initialization success.    *    * @throws IOException    */
annotation|@
name|Test
DECL|method|testSecureOmInitializationSuccess ()
specifier|public
name|void
name|testSecureOmInitializationSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|initSCM
argument_list|()
expr_stmt|;
comment|// Create a secure SCM instance as om client will connect to it
name|scm
operator|=
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LogCapturer
name|logs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|OzoneManager
operator|.
name|LOG
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|OzoneManager
operator|.
name|LOG
argument_list|,
name|INFO
argument_list|)
expr_stmt|;
name|setupOm
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|om
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Expects timeout failure from scmClient in om but om user login via
comment|// kerberos should succeed.
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Ozone Manager login"
operator|+
literal|" successful"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Performs following tests for delegation token.    * 1. Get valid delegation token    * 2. Test successful token renewal.    * 3. Client can authenticate using token.    * 4. Delegation token renewal without Kerberos auth fails.    * 5. Test success of token cancellation.    * 5. Test failure of token cancellation.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDelegationToken ()
specifier|public
name|void
name|testDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Capture logs for assertions
name|LogCapturer
name|logs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|Server
operator|.
name|AUDITLOG
argument_list|)
decl_stmt|;
name|LogCapturer
name|omLogs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|OzoneManager
operator|.
name|getLogger
argument_list|()
argument_list|)
decl_stmt|;
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Server
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|INFO
argument_list|)
expr_stmt|;
comment|// Setup secure OM for start
name|setupOm
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|long
name|omVersion
init|=
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Start OM
name|om
operator|.
name|setCertClient
argument_list|(
operator|new
name|CertificateClientTestImpl
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|om
operator|.
name|start
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|String
name|username
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
comment|// Get first OM client which will authenticate via Kerberos
name|omClient
operator|=
operator|new
name|OzoneManagerProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|omVersion
argument_list|,
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|CLIENT_TIMEOUT
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert if auth was successful via Kerberos
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Auth successful for "
operator|+
name|username
operator|+
literal|" (auth:KERBEROS)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 1: Test successful delegation token.
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|omClient
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"om"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Case 2: Test successful token renewal.
name|long
name|renewalTime
init|=
name|omClient
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|renewalTime
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Check if token is of right kind and renewer is running om instance
name|Assert
operator|.
name|assertEquals
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"OzoneToken"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|OmUtils
operator|.
name|getOmRpcAddress
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|omClient
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Create a remote ugi and set its authentication method to Token
name|UserGroupInformation
name|testUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|TEST_USER
argument_list|)
decl_stmt|;
name|testUser
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|testUser
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthMethod
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
comment|// Get Om client, this time authentication should happen via Token
name|testUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|omClient
operator|=
operator|new
name|OzoneManagerProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|omVersion
argument_list|,
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|testUser
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|CLIENT_TIMEOUT
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Case 3: Test Client can authenticate using token.
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Auth successful for "
operator|+
name|username
operator|+
literal|" (auth:TOKEN)"
argument_list|)
argument_list|)
expr_stmt|;
name|OzoneTestUtils
operator|.
name|expectOmException
argument_list|(
name|VOLUME_NOT_FOUND
argument_list|,
parameter_list|()
lambda|->
name|omClient
operator|.
name|deleteVolume
argument_list|(
literal|"vol1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Auth successful for "
operator|+
name|username
operator|+
literal|" (auth:TOKEN)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 4: Test failure of token renewal.
comment|// Call to renewDelegationToken will fail but it will confirm that
comment|// initial connection via DT succeeded
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OMException
operator|.
name|class
argument_list|,
literal|"INVALID_AUTH_METHOD"
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|omClient
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getResult
argument_list|()
operator|.
name|equals
argument_list|(
name|INVALID_AUTH_METHOD
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Auth successful for "
operator|+
name|username
operator|+
literal|" (auth:TOKEN)"
argument_list|)
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|//testUser.setAuthenticationMethod(AuthMethod.KERBEROS);
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|omClient
operator|=
operator|new
name|OzoneManagerProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|omVersion
argument_list|,
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|Client
operator|.
name|getRpcTimeout
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 5: Test success of token cancellation.
name|omClient
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|omClient
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Wait for client to timeout
name|Thread
operator|.
name|sleep
argument_list|(
name|CLIENT_TIMEOUT
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Auth failed for"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 6: Test failure of token cancellation.
comment|// Get Om client, this time authentication using Token will fail as
comment|// token is not in cache anymore.
name|omClient
operator|=
operator|new
name|OzoneManagerProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|omVersion
argument_list|,
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|testUser
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|Client
operator|.
name|getRpcTimeout
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OMException
operator|.
name|class
argument_list|,
literal|"Cancel delegation "
operator|+
literal|"token failed"
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|omClient
operator|.
name|cancelDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getResult
argument_list|()
operator|.
name|equals
argument_list|(
name|TOKEN_ERROR_OTHER
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|logs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Auth failed for"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|om
operator|.
name|stop
argument_list|()
expr_stmt|;
name|om
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|generateKeyPair (OzoneConfiguration config)
specifier|private
name|void
name|generateKeyPair
parameter_list|(
name|OzoneConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|HDDSKeyGenerator
name|keyGenerator
init|=
operator|new
name|HDDSKeyGenerator
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|keyPair
operator|=
name|keyGenerator
operator|.
name|generateKey
argument_list|()
expr_stmt|;
name|KeyCodec
name|pemWriter
init|=
operator|new
name|KeyCodec
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|pemWriter
operator|.
name|writeKey
argument_list|(
name|keyPair
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests delegation token renewal.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDelegationTokenRenewal ()
specifier|public
name|void
name|testDelegationTokenRenewal
parameter_list|()
throws|throws
name|Exception
block|{
name|GenericTestUtils
operator|.
name|setLogLevel
argument_list|(
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Server
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|INFO
argument_list|)
expr_stmt|;
name|LogCapturer
name|omLogs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|OzoneManager
operator|.
name|getLogger
argument_list|()
argument_list|)
decl_stmt|;
comment|// Setup secure OM for start.
name|OzoneConfiguration
name|newConf
init|=
operator|new
name|OzoneConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|setLong
argument_list|(
name|OMConfigKeys
operator|.
name|DELEGATION_TOKEN_MAX_LIFETIME_KEY
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|setupOm
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|long
name|omVersion
init|=
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|OzoneManager
operator|.
name|setTestSecureOmFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Start OM
try|try
block|{
name|om
operator|.
name|setCertClient
argument_list|(
operator|new
name|CertificateClientTestImpl
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|om
operator|.
name|start
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
comment|// Get first OM client which will authenticate via Kerberos
name|omClient
operator|=
operator|new
name|OzoneManagerProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|omVersion
argument_list|,
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|CLIENT_TIMEOUT
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since client is already connected get a delegation token
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|omClient
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"om"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check if token is of right kind and renewer is running om instance
name|Assert
operator|.
name|assertEquals
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"OzoneToken"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|OmUtils
operator|.
name|getOmRpcAddress
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Renew delegation token
name|long
name|expiryTime
init|=
name|omClient
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expiryTime
operator|>
literal|0
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// Test failure of delegation renewal
comment|// 1. When token maxExpiryTime exceeds
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OMException
operator|.
name|class
argument_list|,
literal|"TOKEN_EXPIRED"
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|omClient
operator|.
name|renewDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getResult
argument_list|()
operator|.
name|equals
argument_list|(
name|TOKEN_EXPIRED
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// 2. When renewer doesn't match (implicitly covers when renewer is
comment|// null or empty )
name|Token
name|token2
init|=
name|omClient
operator|.
name|getDelegationToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"randomService"
argument_list|)
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OMException
operator|.
name|class
argument_list|,
literal|"Delegation token renewal failed"
argument_list|,
parameter_list|()
lambda|->
name|omClient
operator|.
name|renewDelegationToken
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|" with non-matching "
operator|+
literal|"renewer randomService"
argument_list|)
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
comment|// 3. Test tampered token
name|OzoneTokenIdentifier
name|tokenId
init|=
name|OzoneTokenIdentifier
operator|.
name|readProtoBuf
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|tokenId
operator|.
name|setRenewer
argument_list|(
operator|new
name|Text
argument_list|(
literal|"om"
argument_list|)
argument_list|)
expr_stmt|;
name|tokenId
operator|.
name|setMaxDate
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|tamperedToken
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|tokenId
operator|.
name|getBytes
argument_list|()
argument_list|,
name|token2
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token2
operator|.
name|getKind
argument_list|()
argument_list|,
name|token2
operator|.
name|getService
argument_list|()
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OMException
operator|.
name|class
argument_list|,
literal|"Delegation token renewal failed"
argument_list|,
parameter_list|()
lambda|->
name|omClient
operator|.
name|renewDelegationToken
argument_list|(
name|tamperedToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"can't be found in "
operator|+
literal|"cache"
argument_list|)
argument_list|)
expr_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|om
operator|.
name|stop
argument_list|()
expr_stmt|;
name|om
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setupOm (OzoneConfiguration config)
specifier|private
name|void
name|setupOm
parameter_list|(
name|OzoneConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|OMStorage
name|omStore
init|=
operator|new
name|OMStorage
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|omStore
operator|.
name|setClusterId
argument_list|(
literal|"testClusterId"
argument_list|)
expr_stmt|;
name|omStore
operator|.
name|setScmId
argument_list|(
literal|"testScmId"
argument_list|)
expr_stmt|;
name|omStore
operator|.
name|setOmCertSerialId
argument_list|(
name|omCertSerialId
argument_list|)
expr_stmt|;
comment|// writes the version file properties
name|omStore
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|OzoneManager
operator|.
name|setTestSecureOmFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|om
operator|=
name|OzoneManager
operator|.
name|createOm
argument_list|(
literal|null
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetS3Secret ()
specifier|public
name|void
name|testGetS3Secret
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup secure OM for start
name|setupOm
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|long
name|omVersion
init|=
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Start OM
name|om
operator|.
name|setCertClient
argument_list|(
operator|new
name|CertificateClientTestImpl
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|om
operator|.
name|start
argument_list|()
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|String
name|username
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
comment|// Get first OM client which will authenticate via Kerberos
name|omClient
operator|=
operator|new
name|OzoneManagerProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|omVersion
argument_list|,
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|ugi
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|CLIENT_TIMEOUT
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|randomAscii
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|//Creates a secret since it does not exist
name|S3SecretValue
name|firstAttempt
init|=
name|omClient
operator|.
name|getS3Secret
argument_list|(
literal|"HADOOP/JOHNDOE"
argument_list|)
decl_stmt|;
comment|//Fetches the secret from db since it was created in previous step
name|S3SecretValue
name|secondAttempt
init|=
name|omClient
operator|.
name|getS3Secret
argument_list|(
literal|"HADOOP/JOHNDOE"
argument_list|)
decl_stmt|;
comment|//secret fetched on both attempts must be same
name|assertTrue
argument_list|(
name|firstAttempt
operator|.
name|getAwsSecret
argument_list|()
operator|.
name|equals
argument_list|(
name|secondAttempt
operator|.
name|getAwsSecret
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//access key fetched on both attempts must be same
name|assertTrue
argument_list|(
name|firstAttempt
operator|.
name|getAwsAccessKey
argument_list|()
operator|.
name|equals
argument_list|(
name|secondAttempt
operator|.
name|getAwsAccessKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|om
operator|!=
literal|null
condition|)
block|{
name|om
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests functionality to init secure OM when it is already initialized.    */
annotation|@
name|Test
DECL|method|testSecureOmReInit ()
specifier|public
name|void
name|testSecureOmReInit
parameter_list|()
throws|throws
name|Exception
block|{
name|LogCapturer
name|omLogs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|OzoneManager
operator|.
name|getLogger
argument_list|()
argument_list|)
decl_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|initSCM
argument_list|()
expr_stmt|;
try|try
block|{
name|scm
operator|=
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|scm
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OMStorage
name|omStore
init|=
operator|new
name|OMStorage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|initializeOmStorage
argument_list|(
name|omStore
argument_list|)
expr_stmt|;
name|OzoneManager
operator|.
name|setTestSecureOmFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|om
operator|=
name|OzoneManager
operator|.
name|createOm
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|om
operator|.
name|getCertificateClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: GETCERT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Successfully stored "
operator|+
literal|"SCM signed certificate"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|OzoneManager
operator|.
name|omInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|om
operator|.
name|stop
argument_list|()
expr_stmt|;
name|om
operator|=
name|OzoneManager
operator|.
name|createOm
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|om
operator|.
name|getCertificateClient
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|om
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|om
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|om
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: GETCERT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Successfully stored "
operator|+
literal|"SCM signed certificate"
argument_list|)
argument_list|)
expr_stmt|;
name|X509Certificate
name|certificate
init|=
name|om
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getCertificate
argument_list|()
decl_stmt|;
name|validateCertificate
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|scm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test functionality to get SCM signed certificate for OM.    */
annotation|@
name|Test
DECL|method|testSecureOmInitSuccess ()
specifier|public
name|void
name|testSecureOmInitSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|LogCapturer
name|omLogs
init|=
name|LogCapturer
operator|.
name|captureLogs
argument_list|(
name|OzoneManager
operator|.
name|getLogger
argument_list|()
argument_list|)
decl_stmt|;
name|omLogs
operator|.
name|clearOutput
argument_list|()
expr_stmt|;
name|initSCM
argument_list|()
expr_stmt|;
try|try
block|{
name|scm
operator|=
name|StorageContainerManager
operator|.
name|createSCM
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|scm
operator|.
name|start
argument_list|()
expr_stmt|;
name|OMStorage
name|omStore
init|=
operator|new
name|OMStorage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|initializeOmStorage
argument_list|(
name|omStore
argument_list|)
expr_stmt|;
name|OzoneManager
operator|.
name|setTestSecureOmFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|om
operator|=
name|OzoneManager
operator|.
name|createOm
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|om
operator|.
name|getCertificateClient
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|om
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|om
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|om
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Init response: GETCERT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|omLogs
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Successfully stored "
operator|+
literal|"SCM signed certificate"
argument_list|)
argument_list|)
expr_stmt|;
name|X509Certificate
name|certificate
init|=
name|om
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getCertificate
argument_list|()
decl_stmt|;
name|validateCertificate
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scm
operator|!=
literal|null
condition|)
block|{
name|scm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|om
operator|!=
literal|null
condition|)
block|{
name|om
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|validateCertificate (X509Certificate cert)
specifier|public
name|void
name|validateCertificate
parameter_list|(
name|X509Certificate
name|cert
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Assert that we indeed have a self signed certificate.
name|X500Name
name|x500Issuer
init|=
operator|new
name|JcaX509CertificateHolder
argument_list|(
name|cert
argument_list|)
operator|.
name|getIssuer
argument_list|()
decl_stmt|;
name|RDN
name|cn
init|=
name|x500Issuer
operator|.
name|getRDNs
argument_list|(
name|BCStyle
operator|.
name|CN
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|hostName
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|String
name|scmUser
init|=
literal|"scm@"
operator|+
name|hostName
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scmUser
argument_list|,
name|cn
operator|.
name|getFirst
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Subject name should be om login user in real world but in this test
comment|// UGI has scm user context.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scmUser
argument_list|,
name|cn
operator|.
name|getFirst
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LocalDate
name|today
init|=
name|LocalDateTime
operator|.
name|now
argument_list|()
operator|.
name|toLocalDate
argument_list|()
decl_stmt|;
name|Date
name|invalidDate
decl_stmt|;
comment|// Make sure the end date is honored.
name|invalidDate
operator|=
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
name|today
operator|.
name|plus
argument_list|(
literal|1
argument_list|,
name|ChronoUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cert
operator|.
name|getNotAfter
argument_list|()
operator|.
name|after
argument_list|(
name|invalidDate
argument_list|)
argument_list|)
expr_stmt|;
name|invalidDate
operator|=
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|valueOf
argument_list|(
name|today
operator|.
name|plus
argument_list|(
literal|400
argument_list|,
name|ChronoUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cert
operator|.
name|getNotAfter
argument_list|()
operator|.
name|before
argument_list|(
name|invalidDate
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cert
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|scmId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cert
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|clusterId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cert
operator|.
name|getIssuerDN
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|scmUser
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cert
operator|.
name|getIssuerDN
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|scmId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cert
operator|.
name|getIssuerDN
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|clusterId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that certificate matches the public key.
name|String
name|encodedKey1
init|=
name|cert
operator|.
name|getPublicKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|encodedKey2
init|=
name|om
operator|.
name|getCertificateClient
argument_list|()
operator|.
name|getPublicKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|encodedKey1
argument_list|,
name|encodedKey2
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeOmStorage (OMStorage omStorage)
specifier|private
name|void
name|initializeOmStorage
parameter_list|(
name|OMStorage
name|omStorage
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|omStorage
operator|.
name|getState
argument_list|()
operator|==
name|Storage
operator|.
name|StorageState
operator|.
name|INITIALIZED
condition|)
block|{
return|return;
block|}
name|omStorage
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|omStorage
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
expr_stmt|;
name|omStorage
operator|.
name|setOmId
argument_list|(
name|omId
argument_list|)
expr_stmt|;
comment|// Initialize ozone certificate client if security is enabled.
if|if
condition|(
name|OzoneSecurityUtil
operator|.
name|isSecurityEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|OzoneManager
operator|.
name|initializeSecurity
argument_list|(
name|conf
argument_list|,
name|omStorage
argument_list|)
expr_stmt|;
block|}
name|omStorage
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

