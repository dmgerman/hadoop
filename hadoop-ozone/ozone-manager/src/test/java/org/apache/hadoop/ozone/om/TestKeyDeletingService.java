begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OpenKeySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBConfigFromFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_CONTAINER_REPORT_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_comment
comment|/**  * Test Key Deleting Service.  *<p>  * This test does the following things.  *<p>  * 1. Creates a bunch of keys. 2. Then executes delete key directly using  * Metadata Manager. 3. Waits for a while for the KeyDeleting Service to pick up  * and call into SCM. 4. Confirms that calls have been successful.  */
end_comment

begin_class
DECL|class|TestKeyDeletingService
specifier|public
class|class
name|TestKeyDeletingService
block|{
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|method|createConfAndInitValues ()
specifier|private
name|OzoneConfiguration
name|createConfAndInitValues
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|File
name|newFolder
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newFolder
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|DBConfigFromFile
operator|.
name|CONFIG_DIR
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|ServerUtils
operator|.
name|setOzoneMetaDirPath
argument_list|(
name|conf
argument_list|,
name|newFolder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setTimeDuration
argument_list|(
name|HDDS_CONTAINER_REPORT_INTERVAL
argument_list|,
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQuietMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * In this test, we create a bunch of keys and delete them. Then we start the    * KeyDeletingService and pass a SCMClient which does not fail. We make sure    * that all the keys that we deleted is picked up and deleted by    * OzoneManager.    *    * @throws IOException - on Failure.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|checkIfDeleteServiceisDeletingKeys ()
specifier|public
name|void
name|checkIfDeleteServiceisDeletingKeys
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|OzoneConfiguration
name|conf
init|=
name|createConfAndInitValues
argument_list|()
decl_stmt|;
name|OmMetadataManagerImpl
name|metaMgr
init|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|KeyManager
name|keyManager
init|=
operator|new
name|KeyManagerImpl
argument_list|(
operator|new
name|ScmBlockLocationTestIngClient
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|,
name|metaMgr
argument_list|,
name|conf
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|int
name|keyCount
init|=
literal|100
decl_stmt|;
name|createAndDeleteKeys
argument_list|(
name|keyManager
argument_list|,
name|keyCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|KeyDeletingService
name|keyDeletingService
init|=
operator|(
name|KeyDeletingService
operator|)
name|keyManager
operator|.
name|getDeletingService
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|keyDeletingService
operator|.
name|getDeletedKeyCount
argument_list|()
operator|.
name|get
argument_list|()
operator|>=
name|keyCount
argument_list|,
literal|1000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyDeletingService
operator|.
name|getRunCount
argument_list|()
operator|.
name|get
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyManager
operator|.
name|getPendingDeletionKeys
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|checkIfDeleteServiceWithFailingSCM ()
specifier|public
name|void
name|checkIfDeleteServiceWithFailingSCM
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|OzoneConfiguration
name|conf
init|=
name|createConfAndInitValues
argument_list|()
decl_stmt|;
name|OmMetadataManagerImpl
name|metaMgr
init|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//failCallsFrequency = 1 , means all calls fail.
name|KeyManager
name|keyManager
init|=
operator|new
name|KeyManagerImpl
argument_list|(
operator|new
name|ScmBlockLocationTestIngClient
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|,
name|metaMgr
argument_list|,
name|conf
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|int
name|keyCount
init|=
literal|100
decl_stmt|;
name|createAndDeleteKeys
argument_list|(
name|keyManager
argument_list|,
name|keyCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|KeyDeletingService
name|keyDeletingService
init|=
operator|(
name|KeyDeletingService
operator|)
name|keyManager
operator|.
name|getDeletingService
argument_list|()
decl_stmt|;
name|keyManager
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyManager
operator|.
name|getPendingDeletionKeys
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|keyCount
argument_list|)
expr_stmt|;
comment|// Make sure that we have run the background thread 5 times more
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|keyDeletingService
operator|.
name|getRunCount
argument_list|()
operator|.
name|get
argument_list|()
operator|>=
literal|5
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// Since SCM calls are failing, deletedKeyCount should be zero.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyDeletingService
operator|.
name|getDeletedKeyCount
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyManager
operator|.
name|getPendingDeletionKeys
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|keyCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|checkDeletionForEmptyKey ()
specifier|public
name|void
name|checkDeletionForEmptyKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|OzoneConfiguration
name|conf
init|=
name|createConfAndInitValues
argument_list|()
decl_stmt|;
name|OmMetadataManagerImpl
name|metaMgr
init|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//failCallsFrequency = 1 , means all calls fail.
name|KeyManager
name|keyManager
init|=
operator|new
name|KeyManagerImpl
argument_list|(
operator|new
name|ScmBlockLocationTestIngClient
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|,
name|metaMgr
argument_list|,
name|conf
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|int
name|keyCount
init|=
literal|100
decl_stmt|;
name|createAndDeleteKeys
argument_list|(
name|keyManager
argument_list|,
name|keyCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|KeyDeletingService
name|keyDeletingService
init|=
operator|(
name|KeyDeletingService
operator|)
name|keyManager
operator|.
name|getDeletingService
argument_list|()
decl_stmt|;
name|keyManager
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Since empty keys are directly deleted from db there should be no
comment|// pending deletion keys. Also deletedKeyCount should be zero.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyManager
operator|.
name|getPendingDeletionKeys
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Make sure that we have run the background thread 2 times or more
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|keyDeletingService
operator|.
name|getRunCount
argument_list|()
operator|.
name|get
argument_list|()
operator|>=
literal|2
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyDeletingService
operator|.
name|getDeletedKeyCount
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|createAndDeleteKeys (KeyManager keyManager, int keyCount, int numBlocks)
specifier|private
name|void
name|createAndDeleteKeys
parameter_list|(
name|KeyManager
name|keyManager
parameter_list|,
name|int
name|keyCount
parameter_list|,
name|int
name|numBlocks
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|keyCount
condition|;
name|x
operator|++
control|)
block|{
name|String
name|volumeName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"volume%s"
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|bucketName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"bucket%s"
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|keyName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"key%s"
argument_list|,
name|RandomStringUtils
operator|.
name|randomAlphanumeric
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|volumeBytes
init|=
name|keyManager
operator|.
name|getMetadataManager
argument_list|()
operator|.
name|getVolumeKey
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|String
name|bucketBytes
init|=
name|keyManager
operator|.
name|getMetadataManager
argument_list|()
operator|.
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
decl_stmt|;
comment|// cheat here, just create a volume and bucket entry so that we can
comment|// create the keys, we put the same data for key and value since the
comment|// system does not decode the object
name|keyManager
operator|.
name|getMetadataManager
argument_list|()
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|put
argument_list|(
name|volumeBytes
argument_list|,
name|OmVolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOwnerName
argument_list|(
literal|"o"
argument_list|)
operator|.
name|setAdminName
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|getMetadataManager
argument_list|()
operator|.
name|getBucketTable
argument_list|()
operator|.
name|put
argument_list|(
name|bucketBytes
argument_list|,
name|OmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OmKeyArgs
name|arg
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|setLocationInfoList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//Open, Commit and Delete the Keys in the Key Manager.
name|OpenKeySession
name|session
init|=
name|keyManager
operator|.
name|openKey
argument_list|(
name|arg
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|arg
operator|.
name|addLocationInfo
argument_list|(
name|keyManager
operator|.
name|allocateBlock
argument_list|(
name|arg
argument_list|,
name|session
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|keyManager
operator|.
name|commitKey
argument_list|(
name|arg
argument_list|,
name|session
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|deleteKey
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

