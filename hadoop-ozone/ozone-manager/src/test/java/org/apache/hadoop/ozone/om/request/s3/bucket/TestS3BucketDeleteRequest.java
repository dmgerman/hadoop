begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.s3.bucket
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|s3
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|TestOMRequestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests S3BucketDelete Request.  */
end_comment

begin_class
DECL|class|TestS3BucketDeleteRequest
specifier|public
class|class
name|TestS3BucketDeleteRequest
extends|extends
name|TestS3BucketRequest
block|{
annotation|@
name|Test
DECL|method|testPreExecute ()
specifier|public
name|void
name|testPreExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s3BucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|doPreExecute
argument_list|(
name|s3BucketName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateAndUpdateCache ()
specifier|public
name|void
name|testValidateAndUpdateCache
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s3BucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|doPreExecute
argument_list|(
name|s3BucketName
argument_list|)
decl_stmt|;
comment|// Add s3Bucket to s3Bucket table.
name|TestOMRequestUtils
operator|.
name|addS3BucketToDB
argument_list|(
literal|"ozone"
argument_list|,
name|s3BucketName
argument_list|,
name|omMetadataManager
argument_list|)
expr_stmt|;
name|S3BucketDeleteRequest
name|s3BucketDeleteRequest
init|=
operator|new
name|S3BucketDeleteRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
name|OMClientResponse
name|s3BucketDeleteResponse
init|=
name|s3BucketDeleteRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
literal|1L
argument_list|,
name|ozoneManagerDoubleBufferHelper
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|s3BucketDeleteResponse
operator|.
name|getOMResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateAndUpdateCacheWithS3BucketNotFound ()
specifier|public
name|void
name|testValidateAndUpdateCacheWithS3BucketNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s3BucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|doPreExecute
argument_list|(
name|s3BucketName
argument_list|)
decl_stmt|;
name|S3BucketDeleteRequest
name|s3BucketDeleteRequest
init|=
operator|new
name|S3BucketDeleteRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
name|OMClientResponse
name|s3BucketDeleteResponse
init|=
name|s3BucketDeleteRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
literal|1L
argument_list|,
name|ozoneManagerDoubleBufferHelper
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|S3_BUCKET_NOT_FOUND
argument_list|,
name|s3BucketDeleteResponse
operator|.
name|getOMResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreExecuteInvalidBucketLength ()
specifier|public
name|void
name|testPreExecuteInvalidBucketLength
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set bucket name which is less than 3 characters length
name|String
name|s3BucketName
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|doPreExecute
argument_list|(
name|s3BucketName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testPreExecuteInvalidBucketLength failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"S3_BUCKET_INVALID_LENGTH"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// set bucket name which is less than 3 characters length
name|s3BucketName
operator|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|65
argument_list|)
expr_stmt|;
try|try
block|{
name|doPreExecute
argument_list|(
name|s3BucketName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testPreExecuteInvalidBucketLength failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"S3_BUCKET_INVALID_LENGTH"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doPreExecute (String s3BucketName)
specifier|private
name|OMRequest
name|doPreExecute
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|Exception
block|{
name|OMRequest
name|omRequest
init|=
name|TestOMRequestUtils
operator|.
name|deleteS3BucketRequest
argument_list|(
name|s3BucketName
argument_list|)
decl_stmt|;
name|S3BucketDeleteRequest
name|s3BucketDeleteRequest
init|=
operator|new
name|S3BucketDeleteRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
name|OMRequest
name|modifiedOMRequest
init|=
name|s3BucketDeleteRequest
operator|.
name|preExecute
argument_list|(
name|ozoneManager
argument_list|)
decl_stmt|;
comment|// As user name will be set both should not be equal.
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|omRequest
argument_list|,
name|modifiedOMRequest
argument_list|)
expr_stmt|;
return|return
name|modifiedOMRequest
return|;
block|}
block|}
end_class

end_unit

