begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|CertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|OMCertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|S3SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|S3SecretManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|S3SecretValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Signature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMTokenProto
operator|.
name|Type
operator|.
name|S3TOKEN
import|;
end_import

begin_comment
comment|/**  * Test class for {@link OzoneDelegationTokenSecretManager}.  */
end_comment

begin_class
DECL|class|TestOzoneDelegationTokenSecretManager
specifier|public
class|class
name|TestOzoneDelegationTokenSecretManager
block|{
DECL|field|secretManager
specifier|private
name|OzoneDelegationTokenSecretManager
name|secretManager
decl_stmt|;
DECL|field|securityConfig
specifier|private
name|SecurityConfig
name|securityConfig
decl_stmt|;
DECL|field|certificateClient
specifier|private
name|CertificateClient
name|certificateClient
decl_stmt|;
DECL|field|expiryTime
specifier|private
name|long
name|expiryTime
decl_stmt|;
DECL|field|serviceRpcAdd
specifier|private
name|Text
name|serviceRpcAdd
decl_stmt|;
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|TEST_USER
specifier|private
specifier|final
specifier|static
name|Text
name|TEST_USER
init|=
operator|new
name|Text
argument_list|(
literal|"testUser"
argument_list|)
decl_stmt|;
DECL|field|tokenMaxLifetime
specifier|private
name|long
name|tokenMaxLifetime
init|=
literal|1000
operator|*
literal|20
decl_stmt|;
DECL|field|tokenRemoverScanInterval
specifier|private
name|long
name|tokenRemoverScanInterval
init|=
literal|1000
operator|*
literal|20
decl_stmt|;
DECL|field|s3SecretManager
specifier|private
name|S3SecretManager
name|s3SecretManager
decl_stmt|;
DECL|field|s3Secret
specifier|private
name|String
name|s3Secret
init|=
literal|"dbaksbzljandlkandlsd"
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|createNewTestPath
argument_list|()
expr_stmt|;
name|securityConfig
operator|=
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|certificateClient
operator|=
name|setupCertificateClient
argument_list|()
expr_stmt|;
name|certificateClient
operator|.
name|init
argument_list|()
expr_stmt|;
name|expiryTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|+
literal|60
operator|*
literal|60
operator|*
literal|24
expr_stmt|;
name|serviceRpcAdd
operator|=
operator|new
name|Text
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|s3Secrets
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|s3Secrets
operator|.
name|put
argument_list|(
literal|"testuser1"
argument_list|,
name|s3Secret
argument_list|)
expr_stmt|;
name|s3Secrets
operator|.
name|put
argument_list|(
literal|"abc"
argument_list|,
literal|"djakjahkd"
argument_list|)
expr_stmt|;
name|OMMetadataManager
name|metadataManager
init|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|s3SecretManager
operator|=
operator|new
name|S3SecretManagerImpl
argument_list|(
name|conf
argument_list|,
name|metadataManager
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|S3SecretValue
name|getS3Secret
parameter_list|(
name|String
name|kerberosID
parameter_list|)
block|{
if|if
condition|(
name|s3Secrets
operator|.
name|containsKey
argument_list|(
name|kerberosID
argument_list|)
condition|)
block|{
return|return
operator|new
name|S3SecretValue
argument_list|(
name|kerberosID
argument_list|,
name|s3Secrets
operator|.
name|get
argument_list|(
name|kerberosID
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getS3UserSecretString
parameter_list|(
name|String
name|awsAccessKey
parameter_list|)
block|{
if|if
condition|(
name|s3Secrets
operator|.
name|containsKey
argument_list|(
name|awsAccessKey
argument_list|)
condition|)
block|{
return|return
name|s3Secrets
operator|.
name|get
argument_list|(
name|awsAccessKey
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|createNewTestPath ()
specifier|private
name|OzoneConfiguration
name|createNewTestPath
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneConfiguration
name|config
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|File
name|newFolder
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newFolder
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ServerUtils
operator|.
name|setOzoneMetaDirPath
argument_list|(
name|config
argument_list|,
name|newFolder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
comment|/**    * Helper function to create certificate client.    * */
DECL|method|setupCertificateClient ()
specifier|private
name|CertificateClient
name|setupCertificateClient
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyPair
name|keyPair
init|=
name|KeyStoreTestUtil
operator|.
name|generateKeyPair
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
name|KeyStoreTestUtil
operator|.
name|generateCertificate
argument_list|(
literal|"CN=OzoneMaster"
argument_list|,
name|keyPair
argument_list|,
literal|30
argument_list|,
literal|"SHA256withRSA"
argument_list|)
decl_stmt|;
return|return
operator|new
name|OMCertificateClient
argument_list|(
name|securityConfig
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|X509Certificate
name|getCertificate
parameter_list|()
block|{
return|return
name|cert
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrivateKey
name|getPrivateKey
parameter_list|()
block|{
return|return
name|keyPair
operator|.
name|getPrivate
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PublicKey
name|getPublicKey
parameter_list|()
block|{
return|return
name|keyPair
operator|.
name|getPublic
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|X509Certificate
name|getCertificate
parameter_list|(
name|String
name|serialId
parameter_list|)
block|{
return|return
name|cert
return|;
block|}
block|}
return|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|secretManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateToken ()
specifier|public
name|void
name|testCreateToken
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|expiryTime
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|createToken
argument_list|(
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|OzoneTokenIdentifier
name|identifier
init|=
name|OzoneTokenIdentifier
operator|.
name|readProtoBuf
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check basic details.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|identifier
operator|.
name|getRealUser
argument_list|()
operator|.
name|equals
argument_list|(
name|TEST_USER
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|identifier
operator|.
name|getRenewer
argument_list|()
operator|.
name|equals
argument_list|(
name|TEST_USER
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|identifier
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|TEST_USER
argument_list|)
argument_list|)
expr_stmt|;
name|validateHash
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenewTokenSuccess ()
specifier|public
name|void
name|testRenewTokenSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|expiryTime
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|createToken
argument_list|(
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|5
argument_list|)
expr_stmt|;
name|long
name|renewalTime
init|=
name|secretManager
operator|.
name|renewToken
argument_list|(
name|token
argument_list|,
name|TEST_USER
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|renewalTime
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests failure for mismatch in renewer.    */
annotation|@
name|Test
DECL|method|testRenewTokenFailure ()
specifier|public
name|void
name|testRenewTokenFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|expiryTime
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|createToken
argument_list|(
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
literal|"rougeUser tries to renew a token"
argument_list|,
parameter_list|()
lambda|->
block|{
name|secretManager
operator|.
name|renewToken
argument_list|(
name|token
argument_list|,
literal|"rougeUser"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests token renew failure due to max time.    */
annotation|@
name|Test
DECL|method|testRenewTokenFailureMaxTime ()
specifier|public
name|void
name|testRenewTokenFailureMaxTime
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|createToken
argument_list|(
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"testUser tried to renew an expired token"
argument_list|,
parameter_list|()
lambda|->
block|{
name|secretManager
operator|.
name|renewToken
argument_list|(
name|token
argument_list|,
name|TEST_USER
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests token renew failure due to renewal time.    */
annotation|@
name|Test
DECL|method|testRenewTokenFailureRenewalTime ()
specifier|public
name|void
name|testRenewTokenFailureRenewalTime
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
literal|1000
operator|*
literal|10
argument_list|,
literal|10
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|createToken
argument_list|(
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
literal|"is expired"
argument_list|,
parameter_list|()
lambda|->
block|{
name|secretManager
operator|.
name|renewToken
argument_list|(
name|token
argument_list|,
name|TEST_USER
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateIdentifier ()
specifier|public
name|void
name|testCreateIdentifier
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|expiryTime
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|OzoneTokenIdentifier
name|identifier
init|=
name|secretManager
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
comment|// Check basic details.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|identifier
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|identifier
operator|.
name|getRealUser
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|identifier
operator|.
name|getRenewer
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCancelTokenSuccess ()
specifier|public
name|void
name|testCancelTokenSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|expiryTime
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|createToken
argument_list|(
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|secretManager
operator|.
name|cancelToken
argument_list|(
name|token
argument_list|,
name|TEST_USER
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCancelTokenFailure ()
specifier|public
name|void
name|testCancelTokenFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|expiryTime
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|createToken
argument_list|(
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
literal|"rougeUser is not authorized to cancel the token"
argument_list|,
parameter_list|()
lambda|->
block|{
name|secretManager
operator|.
name|cancelToken
argument_list|(
name|token
argument_list|,
literal|"rougeUser"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifySignatureSuccess ()
specifier|public
name|void
name|testVerifySignatureSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|expiryTime
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|OzoneTokenIdentifier
name|id
init|=
operator|new
name|OzoneTokenIdentifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|setOmCertSerialId
argument_list|(
name|certificateClient
operator|.
name|getCertificate
argument_list|()
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|.
name|setMaxDate
argument_list|(
name|Time
operator|.
name|now
argument_list|()
operator|+
literal|60
operator|*
literal|60
operator|*
literal|24
argument_list|)
expr_stmt|;
name|id
operator|.
name|setOwner
argument_list|(
operator|new
name|Text
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|secretManager
operator|.
name|verifySignature
argument_list|(
name|id
argument_list|,
name|certificateClient
operator|.
name|signData
argument_list|(
name|id
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifySignatureFailure ()
specifier|public
name|void
name|testVerifySignatureFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|expiryTime
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|OzoneTokenIdentifier
name|id
init|=
operator|new
name|OzoneTokenIdentifier
argument_list|()
decl_stmt|;
comment|// set invalid om cert serial id
name|id
operator|.
name|setOmCertSerialId
argument_list|(
literal|"1927393"
argument_list|)
expr_stmt|;
name|id
operator|.
name|setMaxDate
argument_list|(
name|Time
operator|.
name|now
argument_list|()
operator|+
literal|60
operator|*
literal|60
operator|*
literal|24
argument_list|)
expr_stmt|;
name|id
operator|.
name|setOwner
argument_list|(
operator|new
name|Text
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|secretManager
operator|.
name|verifySignature
argument_list|(
name|id
argument_list|,
name|id
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateS3TOKENSuccess ()
specifier|public
name|void
name|testValidateS3TOKENSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|expiryTime
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|OzoneTokenIdentifier
name|identifier
init|=
operator|new
name|OzoneTokenIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|setTokenType
argument_list|(
name|S3TOKEN
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setSignature
argument_list|(
literal|"56ec73ba1974f8feda8365c3caef89c5d4a688d"
operator|+
literal|"5f9baccf4765f46a14cd745ad"
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setStrToSign
argument_list|(
literal|"AWS4-HMAC-SHA256\n"
operator|+
literal|"20190221T002037Z\n"
operator|+
literal|"20190221/us-west-1/s3/aws4_request\n"
operator|+
literal|"c297c080cce4e0927779823d3fd1f5cae71481a8f7dfc7e18d91851294efc47d"
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setAwsAccessId
argument_list|(
literal|"testuser1"
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateS3TOKENFailure ()
specifier|public
name|void
name|testValidateS3TOKENFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|secretManager
operator|=
name|createSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|expiryTime
argument_list|,
name|tokenRemoverScanInterval
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|start
argument_list|(
name|certificateClient
argument_list|)
expr_stmt|;
name|OzoneTokenIdentifier
name|identifier
init|=
operator|new
name|OzoneTokenIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|setTokenType
argument_list|(
name|S3TOKEN
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setSignature
argument_list|(
literal|"56ec73ba1974f8feda8365c3caef89c5d4a688d"
operator|+
literal|"5f9baccf4765f46a14cd745ad"
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setStrToSign
argument_list|(
literal|"AWS4-HMAC-SHA256\n"
operator|+
literal|"20190221T002037Z\n"
operator|+
literal|"20190221/us-west-1/s3/aws4_request\n"
operator|+
literal|"c297c080cce4e0927779823d3fd1f5cae71481a8f7dfc7e18d91851294efc47d"
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setAwsAccessId
argument_list|(
literal|"testuser2"
argument_list|)
expr_stmt|;
comment|// Case 1: User don't have aws secret set.
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|SecretManager
operator|.
name|InvalidToken
operator|.
name|class
argument_list|,
literal|" No S3 "
operator|+
literal|"secret found for S3 identifier"
argument_list|,
parameter_list|()
lambda|->
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 2: Invalid hash in string to sign.
name|identifier
operator|.
name|setStrToSign
argument_list|(
literal|"AWS4-HMAC-SHA256\n"
operator|+
literal|"20190221T002037Z\n"
operator|+
literal|"20190221/us-west-1/s3/aws4_request\n"
operator|+
literal|"c297c080cce4e0927779823d3fd1f5cae71481a8f7dfc7e18d91851294efc47d"
operator|+
literal|"+invalidhash"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|SecretManager
operator|.
name|InvalidToken
operator|.
name|class
argument_list|,
literal|" No S3 "
operator|+
literal|"secret found for S3 identifier"
argument_list|,
parameter_list|()
lambda|->
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
comment|// Case 3: Invalid hash in authorization hmac.
name|identifier
operator|.
name|setSignature
argument_list|(
literal|"56ec73ba1974f8feda8365c3caef89c5d4a688d"
operator|+
literal|"+invalidhash"
operator|+
literal|"5f9baccf4765f46a14cd745ad"
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setStrToSign
argument_list|(
literal|"AWS4-HMAC-SHA256\n"
operator|+
literal|"20190221T002037Z\n"
operator|+
literal|"20190221/us-west-1/s3/aws4_request\n"
operator|+
literal|"c297c080cce4e0927779823d3fd1f5cae71481a8f7dfc7e18d91851294efc47d"
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|SecretManager
operator|.
name|InvalidToken
operator|.
name|class
argument_list|,
literal|" No S3 "
operator|+
literal|"secret found for S3 identifier"
argument_list|,
parameter_list|()
lambda|->
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate hash using public key of KeyPair.    */
DECL|method|validateHash (byte[] hash, byte[] identifier)
specifier|private
name|void
name|validateHash
parameter_list|(
name|byte
index|[]
name|hash
parameter_list|,
name|byte
index|[]
name|identifier
parameter_list|)
throws|throws
name|Exception
block|{
name|Signature
name|rsaSignature
init|=
name|Signature
operator|.
name|getInstance
argument_list|(
name|securityConfig
operator|.
name|getSignatureAlgo
argument_list|()
argument_list|,
name|securityConfig
operator|.
name|getProvider
argument_list|()
argument_list|)
decl_stmt|;
name|rsaSignature
operator|.
name|initVerify
argument_list|(
name|certificateClient
operator|.
name|getPublicKey
argument_list|()
argument_list|)
expr_stmt|;
name|rsaSignature
operator|.
name|update
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rsaSignature
operator|.
name|verify
argument_list|(
name|hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create instance of {@link OzoneDelegationTokenSecretManager}.    */
specifier|private
name|OzoneDelegationTokenSecretManager
DECL|method|createSecretManager (OzoneConfiguration config, long tokenMaxLife, long expiry, long tokenRemoverScanTime)
name|createSecretManager
parameter_list|(
name|OzoneConfiguration
name|config
parameter_list|,
name|long
name|tokenMaxLife
parameter_list|,
name|long
name|expiry
parameter_list|,
name|long
name|tokenRemoverScanTime
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|OzoneDelegationTokenSecretManager
argument_list|(
name|config
argument_list|,
name|tokenMaxLife
argument_list|,
name|expiry
argument_list|,
name|tokenRemoverScanTime
argument_list|,
name|serviceRpcAdd
argument_list|,
name|s3SecretManager
argument_list|)
return|;
block|}
block|}
end_class

end_unit

