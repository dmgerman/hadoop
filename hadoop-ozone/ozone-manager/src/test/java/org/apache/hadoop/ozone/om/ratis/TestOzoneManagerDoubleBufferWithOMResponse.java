begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|utils
operator|.
name|OzoneManagerDoubleBufferHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|TestOMRequestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|bucket
operator|.
name|OMBucketCreateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|bucket
operator|.
name|OMBucketDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|volume
operator|.
name|OMVolumeCreateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|volume
operator|.
name|OMVolumeCreateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|DeleteBucketResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|bucket
operator|.
name|OMBucketCreateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|bucket
operator|.
name|OMBucketDeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_LOCK_MAX_CONCURRENCY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * This class tests OzoneManagerDouble Buffer with actual OMResponse classes.  */
end_comment

begin_class
DECL|class|TestOzoneManagerDoubleBufferWithOMResponse
specifier|public
class|class
name|TestOzoneManagerDoubleBufferWithOMResponse
block|{
DECL|field|ozoneManager
specifier|private
name|OzoneManager
name|ozoneManager
decl_stmt|;
DECL|field|omMetrics
specifier|private
name|OMMetrics
name|omMetrics
decl_stmt|;
DECL|field|auditLogger
specifier|private
name|AuditLogger
name|auditLogger
decl_stmt|;
DECL|field|ozoneManagerDoubleBufferHelper
specifier|private
name|OzoneManagerDoubleBufferHelper
name|ozoneManagerDoubleBufferHelper
decl_stmt|;
DECL|field|omMetadataManager
specifier|private
name|OMMetadataManager
name|omMetadataManager
decl_stmt|;
DECL|field|doubleBuffer
specifier|private
name|OzoneManagerDoubleBuffer
name|doubleBuffer
decl_stmt|;
DECL|field|trxId
specifier|private
specifier|final
name|AtomicLong
name|trxId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|ozoneManagerRatisSnapshot
specifier|private
name|OzoneManagerRatisSnapshot
name|ozoneManagerRatisSnapshot
decl_stmt|;
DECL|field|lastAppliedIndex
specifier|private
specifier|volatile
name|long
name|lastAppliedIndex
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|ozoneManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OzoneManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|omMetrics
operator|=
name|OMMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
name|OzoneConfiguration
name|ozoneConfiguration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|ozoneConfiguration
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ozoneConfiguration
operator|.
name|setInt
argument_list|(
name|HDDS_LOCK_MAX_CONCURRENCY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|ozoneConfiguration
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|omMetrics
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneManager
operator|.
name|getMetadataManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|omMetadataManager
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneManager
operator|.
name|getMaxUserVolumeCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|auditLogger
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AuditLogger
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneManager
operator|.
name|getAuditLogger
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|auditLogger
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|auditLogger
argument_list|)
operator|.
name|logWrite
argument_list|(
name|any
argument_list|(
name|AuditMessage
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ozoneManagerRatisSnapshot
operator|=
name|index
lambda|->
block|{
name|lastAppliedIndex
operator|=
name|index
expr_stmt|;
block|}
expr_stmt|;
name|doubleBuffer
operator|=
operator|new
name|OzoneManagerDoubleBuffer
argument_list|(
name|omMetadataManager
argument_list|,
name|ozoneManagerRatisSnapshot
argument_list|)
expr_stmt|;
name|ozoneManagerDoubleBufferHelper
operator|=
name|doubleBuffer
operator|::
name|add
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|doubleBuffer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * This tests OzoneManagerDoubleBuffer implementation. It calls    * testDoubleBuffer with number of iterations to do transactions and    * number of buckets to be created in each iteration. It then    * verifies OM DB entries count is matching with total number of    * transactions or not.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500_000
argument_list|)
DECL|method|testDoubleBuffer ()
specifier|public
name|void
name|testDoubleBuffer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test checks whether count in tables are correct or not.
name|testDoubleBuffer
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|testDoubleBuffer
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|testDoubleBuffer
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|testDoubleBuffer
argument_list|(
literal|1000
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test first creates a volume, and then does a mix of transactions    * like create/delete buckets and add them to double buffer. Then it    * verifies OM DB entries are matching with actual responses added to    * double buffer or not.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDoubleBufferWithMixOfTransactions ()
specifier|public
name|void
name|testDoubleBufferWithMixOfTransactions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test checks count, data in table is correct or not.
name|Queue
argument_list|<
name|OMBucketCreateResponse
argument_list|>
name|bucketQueue
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|OMBucketDeleteResponse
argument_list|>
name|deleteBucketQueue
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OMVolumeCreateResponse
name|omVolumeCreateResponse
init|=
operator|(
name|OMVolumeCreateResponse
operator|)
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|trxId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|bucketCount
init|=
literal|10
decl_stmt|;
name|doMixTransactions
argument_list|(
name|volumeName
argument_list|,
literal|10
argument_list|,
name|deleteBucketQueue
argument_list|,
name|bucketQueue
argument_list|)
expr_stmt|;
comment|// As for every 2 transactions of create bucket we add deleted bucket.
specifier|final
name|int
name|deleteCount
init|=
literal|5
decl_stmt|;
comment|// We are doing +1 for volume transaction.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|doubleBuffer
operator|.
name|getFlushedTransactionCount
argument_list|()
operator|==
operator|(
name|bucketCount
operator|+
name|deleteCount
operator|+
literal|1
operator|)
argument_list|,
literal|100
argument_list|,
literal|120000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetadataManager
operator|.
name|countRowsInTable
argument_list|(
name|omMetadataManager
operator|.
name|getVolumeTable
argument_list|()
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetadataManager
operator|.
name|countRowsInTable
argument_list|(
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|// Now after this in our DB we should have 5 buckets and one volume
name|checkVolume
argument_list|(
name|volumeName
argument_list|,
name|omVolumeCreateResponse
argument_list|)
expr_stmt|;
name|checkCreateBuckets
argument_list|(
name|bucketQueue
argument_list|)
expr_stmt|;
name|checkDeletedBuckets
argument_list|(
name|deleteBucketQueue
argument_list|)
expr_stmt|;
comment|// Check lastAppliedIndex is updated correctly or not.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketCount
operator|+
name|deleteCount
operator|+
literal|1
argument_list|,
name|lastAppliedIndex
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test first creates a volume, and then does a mix of transactions    * like create/delete buckets in parallel and add to double buffer. Then it    * verifies OM DB entries are matching with actual responses added to    * double buffer or not.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDoubleBufferWithMixOfTransactionsParallel ()
specifier|public
name|void
name|testDoubleBufferWithMixOfTransactionsParallel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test checks count, data in table is correct or not.
name|Queue
argument_list|<
name|OMBucketCreateResponse
argument_list|>
name|bucketQueue
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|OMBucketDeleteResponse
argument_list|>
name|deleteBucketQueue
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|volumeName1
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OMVolumeCreateResponse
name|omVolumeCreateResponse1
init|=
operator|(
name|OMVolumeCreateResponse
operator|)
name|createVolume
argument_list|(
name|volumeName1
argument_list|,
name|trxId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|volumeName2
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OMVolumeCreateResponse
name|omVolumeCreateResponse2
init|=
operator|(
name|OMVolumeCreateResponse
operator|)
name|createVolume
argument_list|(
name|volumeName2
argument_list|,
name|trxId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
name|Daemon
name|daemon1
init|=
operator|new
name|Daemon
argument_list|(
parameter_list|()
lambda|->
name|doMixTransactions
argument_list|(
name|volumeName1
argument_list|,
literal|10
argument_list|,
name|deleteBucketQueue
argument_list|,
name|bucketQueue
argument_list|)
argument_list|)
decl_stmt|;
name|Daemon
name|daemon2
init|=
operator|new
name|Daemon
argument_list|(
parameter_list|()
lambda|->
name|doMixTransactions
argument_list|(
name|volumeName2
argument_list|,
literal|10
argument_list|,
name|deleteBucketQueue
argument_list|,
name|bucketQueue
argument_list|)
argument_list|)
decl_stmt|;
name|daemon1
operator|.
name|start
argument_list|()
expr_stmt|;
name|daemon2
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|bucketCount
init|=
literal|20
decl_stmt|;
comment|// As for every 2 transactions of create bucket we add deleted bucket.
specifier|final
name|int
name|deleteCount
init|=
literal|10
decl_stmt|;
comment|// We are doing +1 for volume transaction.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|doubleBuffer
operator|.
name|getFlushedTransactionCount
argument_list|()
operator|==
operator|(
name|bucketCount
operator|+
name|deleteCount
operator|+
literal|2
operator|)
argument_list|,
literal|100
argument_list|,
literal|120000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetadataManager
operator|.
name|countRowsInTable
argument_list|(
name|omMetadataManager
operator|.
name|getVolumeTable
argument_list|()
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetadataManager
operator|.
name|countRowsInTable
argument_list|(
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
comment|// Now after this in our DB we should have 5 buckets and one volume
name|checkVolume
argument_list|(
name|volumeName1
argument_list|,
name|omVolumeCreateResponse1
argument_list|)
expr_stmt|;
name|checkVolume
argument_list|(
name|volumeName2
argument_list|,
name|omVolumeCreateResponse2
argument_list|)
expr_stmt|;
name|checkCreateBuckets
argument_list|(
name|bucketQueue
argument_list|)
expr_stmt|;
name|checkDeletedBuckets
argument_list|(
name|deleteBucketQueue
argument_list|)
expr_stmt|;
comment|// Check lastAppliedIndex is updated correctly or not.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bucketCount
operator|+
name|deleteCount
operator|+
literal|2
argument_list|,
name|lastAppliedIndex
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method add's a mix of createBucket/DeleteBucket responses to double    * buffer. Total number of responses added is specified by bucketCount.    * @param volumeName    * @param bucketCount    * @param deleteBucketQueue    * @param bucketQueue    */
DECL|method|doMixTransactions (String volumeName, int bucketCount, Queue<OMBucketDeleteResponse> deleteBucketQueue, Queue<OMBucketCreateResponse> bucketQueue)
specifier|private
name|void
name|doMixTransactions
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|int
name|bucketCount
parameter_list|,
name|Queue
argument_list|<
name|OMBucketDeleteResponse
argument_list|>
name|deleteBucketQueue
parameter_list|,
name|Queue
argument_list|<
name|OMBucketCreateResponse
argument_list|>
name|bucketQueue
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|transactionID
init|=
name|trxId
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|OMBucketCreateResponse
name|omBucketCreateResponse
init|=
name|createBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|transactionID
argument_list|)
decl_stmt|;
comment|// For every 2 transactions have a deleted bucket.
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|OMBucketDeleteResponse
name|omBucketDeleteResponse
init|=
operator|(
name|OMBucketDeleteResponse
operator|)
name|deleteBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|trxId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
name|deleteBucketQueue
operator|.
name|add
argument_list|(
name|omBucketDeleteResponse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bucketQueue
operator|.
name|add
argument_list|(
name|omBucketCreateResponse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|deleteBucket (String volumeName, String bucketName, long transactionID)
specifier|private
name|OMClientResponse
name|deleteBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|long
name|transactionID
parameter_list|)
block|{
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
name|omRequest
init|=
name|TestOMRequestUtils
operator|.
name|createDeleteBucketRequest
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
decl_stmt|;
name|OMBucketDeleteRequest
name|omBucketDeleteRequest
init|=
operator|new
name|OMBucketDeleteRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
return|return
name|omBucketDeleteRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
name|transactionID
argument_list|,
name|ozoneManagerDoubleBufferHelper
argument_list|)
return|;
block|}
comment|/**    * Verifies volume table data is matching with actual response added to    * double buffer.    * @param volumeName    * @param omVolumeCreateResponse    * @throws Exception    */
DECL|method|checkVolume (String volumeName, OMVolumeCreateResponse omVolumeCreateResponse)
specifier|private
name|void
name|checkVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|OMVolumeCreateResponse
name|omVolumeCreateResponse
parameter_list|)
throws|throws
name|Exception
block|{
name|OmVolumeArgs
name|tableVolumeArgs
init|=
name|omMetadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|omMetadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volumeName
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tableVolumeArgs
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|OmVolumeArgs
name|omVolumeArgs
init|=
name|omVolumeCreateResponse
operator|.
name|getOmVolumeArgs
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|,
name|tableVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omVolumeArgs
operator|.
name|getAdminName
argument_list|()
argument_list|,
name|tableVolumeArgs
operator|.
name|getAdminName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omVolumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|tableVolumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omVolumeArgs
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|tableVolumeArgs
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies bucket table data is matching with actual response added to    * double buffer.    * @param bucketQueue    */
DECL|method|checkCreateBuckets (Queue<OMBucketCreateResponse> bucketQueue)
specifier|private
name|void
name|checkCreateBuckets
parameter_list|(
name|Queue
argument_list|<
name|OMBucketCreateResponse
argument_list|>
name|bucketQueue
parameter_list|)
block|{
name|bucketQueue
operator|.
name|forEach
argument_list|(
parameter_list|(
name|omBucketCreateResponse
parameter_list|)
lambda|->
block|{
name|OmBucketInfo
name|omBucketInfo
init|=
name|omBucketCreateResponse
operator|.
name|getOmBucketInfo
argument_list|()
decl_stmt|;
name|String
name|bucket
init|=
name|omBucketInfo
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|OmBucketInfo
name|tableBucketInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableBucketInfo
operator|=
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|get
argument_list|(
name|omMetadataManager
operator|.
name|getBucketKey
argument_list|(
name|omBucketInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testDoubleBufferWithMixOfTransactions failed"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tableBucketInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omBucketInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|tableBucketInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omBucketInfo
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|tableBucketInfo
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omBucketInfo
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|tableBucketInfo
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifies deleted bucket responses added to double buffer are actually    * removed from the OM DB or not.    * @param deleteBucketQueue    */
DECL|method|checkDeletedBuckets (Queue<OMBucketDeleteResponse> deleteBucketQueue)
specifier|private
name|void
name|checkDeletedBuckets
parameter_list|(
name|Queue
argument_list|<
name|OMBucketDeleteResponse
argument_list|>
name|deleteBucketQueue
parameter_list|)
block|{
name|deleteBucketQueue
operator|.
name|forEach
argument_list|(
operator|(
name|omBucketDeleteResponse
lambda|->
block|{
try|try
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|get
argument_list|(
name|omMetadataManager
operator|.
name|getBucketKey
argument_list|(
name|omBucketDeleteResponse
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|omBucketDeleteResponse
operator|.
name|getBucketName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testDoubleBufferWithMixOfTransactions failed"
argument_list|)
expr_stmt|;
block|}
block|}
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create bucketCount number of createBucket responses for each iteration.    * All these iterations are run in parallel. Then verify OM DB has correct    * number of entries or not.    * @param iterations    * @param bucketCount    * @throws Exception    */
DECL|method|testDoubleBuffer (int iterations, int bucketCount)
specifier|public
name|void
name|testDoubleBuffer
parameter_list|(
name|int
name|iterations
parameter_list|,
name|int
name|bucketCount
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Reset transaction id.
name|trxId
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Calling setup and stop here because this method is called from a
comment|// single test multiple times.
name|setup
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|Daemon
name|d1
init|=
operator|new
name|Daemon
argument_list|(
parameter_list|()
lambda|->
name|doTransactions
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
argument_list|,
name|bucketCount
argument_list|)
argument_list|)
decl_stmt|;
name|d1
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// We are doing +1 for volume transaction.
name|long
name|expectedTransactions
init|=
operator|(
name|bucketCount
operator|+
literal|1
operator|)
operator|*
name|iterations
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|lastAppliedIndex
operator|==
name|expectedTransactions
argument_list|,
literal|100
argument_list|,
literal|120000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedTransactions
argument_list|,
name|doubleBuffer
operator|.
name|getFlushedTransactionCount
argument_list|()
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
name|long
name|count
init|=
literal|0L
decl_stmt|;
try|try
block|{
name|count
operator|=
name|omMetadataManager
operator|.
name|countRowsInTable
argument_list|(
name|omMetadataManager
operator|.
name|getVolumeTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testDoubleBuffer failed"
argument_list|)
expr_stmt|;
block|}
return|return
name|count
operator|==
name|iterations
return|;
block|}
argument_list|,
literal|300
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
name|long
name|count
init|=
literal|0L
decl_stmt|;
try|try
block|{
name|count
operator|=
name|omMetadataManager
operator|.
name|countRowsInTable
argument_list|(
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"testDoubleBuffer failed"
argument_list|)
expr_stmt|;
block|}
return|return
name|count
operator|==
name|bucketCount
operator|*
name|iterations
return|;
block|}
argument_list|,
literal|300
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|doubleBuffer
operator|.
name|getFlushIterations
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This method adds bucketCount number of createBucket responses to double    * buffer.    * @param volumeName    * @param bucketCount    */
DECL|method|doTransactions (String volumeName, int bucketCount)
specifier|public
name|void
name|doTransactions
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|int
name|bucketCount
parameter_list|)
block|{
name|createVolume
argument_list|(
name|volumeName
argument_list|,
name|trxId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketCount
condition|;
name|i
operator|++
control|)
block|{
name|createBucket
argument_list|(
name|volumeName
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|trxId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
comment|// For every 100 buckets creation adding 100ms delay
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{          }
block|}
block|}
block|}
comment|/**    * Create OMVolumeCreateResponse for specified volume.    * @param volumeName    * @return OMVolumeCreateResponse    */
DECL|method|createVolume (String volumeName, long transactionId)
specifier|private
name|OMClientResponse
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|long
name|transactionId
parameter_list|)
block|{
name|String
name|admin
init|=
literal|"ozone"
decl_stmt|;
name|String
name|owner
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
name|omRequest
init|=
name|TestOMRequestUtils
operator|.
name|createVolumeRequest
argument_list|(
name|volumeName
argument_list|,
name|admin
argument_list|,
name|owner
argument_list|)
decl_stmt|;
name|OMVolumeCreateRequest
name|omVolumeCreateRequest
init|=
operator|new
name|OMVolumeCreateRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
return|return
name|omVolumeCreateRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
name|transactionId
argument_list|,
name|ozoneManagerDoubleBufferHelper
argument_list|)
return|;
block|}
comment|/**    * Create OMBucketCreateResponse for specified volume and bucket.    * @param volumeName    * @param bucketName    * @return OMBucketCreateResponse    */
DECL|method|createBucket (String volumeName, String bucketName, long transactionID)
specifier|private
name|OMBucketCreateResponse
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|long
name|transactionID
parameter_list|)
block|{
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
name|omRequest
init|=
name|TestOMRequestUtils
operator|.
name|createBucketRequest
argument_list|(
name|bucketName
argument_list|,
name|volumeName
argument_list|,
literal|false
argument_list|,
name|OzoneManagerProtocolProtos
operator|.
name|StorageTypeProto
operator|.
name|DISK
argument_list|)
decl_stmt|;
name|OMBucketCreateRequest
name|omBucketCreateRequest
init|=
operator|new
name|OMBucketCreateRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
return|return
operator|(
name|OMBucketCreateResponse
operator|)
name|omBucketCreateRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
name|transactionID
argument_list|,
name|ozoneManagerDoubleBufferHelper
argument_list|)
return|;
block|}
comment|/**    * Create OMBucketDeleteResponse for specified volume and bucket.    * @param volumeName    * @param bucketName    * @return OMBucketDeleteResponse    */
DECL|method|deleteBucket (String volumeName, String bucketName)
specifier|private
name|OMBucketDeleteResponse
name|deleteBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
block|{
return|return
operator|new
name|OMBucketDeleteResponse
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|OMResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Type
operator|.
name|DeleteBucket
argument_list|)
operator|.
name|setStatus
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|setDeleteBucketResponse
argument_list|(
name|DeleteBucketResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

