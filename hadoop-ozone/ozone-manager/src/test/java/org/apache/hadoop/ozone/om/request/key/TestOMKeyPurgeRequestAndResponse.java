begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.key
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|key
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|TestOMRequestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|key
operator|.
name|OMKeyPurgeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|PurgeKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|PurgeKeysResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|BatchOperation
import|;
end_import

begin_comment
comment|/**  * Tests {@link OMKeyPurgeRequest} and {@link OMKeyPurgeResponse}.  */
end_comment

begin_class
DECL|class|TestOMKeyPurgeRequestAndResponse
specifier|public
class|class
name|TestOMKeyPurgeRequestAndResponse
extends|extends
name|TestOMKeyRequest
block|{
DECL|field|numKeys
specifier|private
name|int
name|numKeys
init|=
literal|10
decl_stmt|;
comment|/**    * Creates volume, bucket and key entries and adds to OM DB and then    * deletes these keys to move them to deletedKeys table.    */
DECL|method|createAndDeleteKeys ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createAndDeleteKeys
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add volume, bucket and key entries to OM DB.
name|TestOMRequestUtils
operator|.
name|addVolumeAndBucketToDB
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|omMetadataManager
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ozoneKeyNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numKeys
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numKeys
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|keyName
operator|+
literal|"-"
operator|+
name|i
decl_stmt|;
name|TestOMRequestUtils
operator|.
name|addKeyToTable
argument_list|(
literal|false
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|key
argument_list|,
name|clientID
argument_list|,
name|replicationType
argument_list|,
name|replicationFactor
argument_list|,
name|omMetadataManager
argument_list|)
expr_stmt|;
name|ozoneKeyNames
operator|.
name|add
argument_list|(
name|omMetadataManager
operator|.
name|getOzoneKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|deletedKeyNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numKeys
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ozoneKey
range|:
name|ozoneKeyNames
control|)
block|{
name|String
name|deletedKeyName
init|=
name|TestOMRequestUtils
operator|.
name|deleteKey
argument_list|(
name|ozoneKey
argument_list|,
name|omMetadataManager
argument_list|)
decl_stmt|;
name|deletedKeyNames
operator|.
name|add
argument_list|(
name|deletedKeyName
argument_list|)
expr_stmt|;
block|}
return|return
name|deletedKeyNames
return|;
block|}
comment|/**    * Create OMRequest which encapsulates DeleteKeyRequest.    * @return OMRequest    */
DECL|method|createPurgeKeysRequest (List<String> deletedKeys)
specifier|private
name|OMRequest
name|createPurgeKeysRequest
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|deletedKeys
parameter_list|)
block|{
name|PurgeKeysRequest
name|purgeKeysRequest
init|=
name|PurgeKeysRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllKeys
argument_list|(
name|deletedKeys
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|OMRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPurgeKeysRequest
argument_list|(
name|purgeKeysRequest
argument_list|)
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|PurgeKeys
argument_list|)
operator|.
name|setClientId
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testValidateAndUpdateCache ()
specifier|public
name|void
name|testValidateAndUpdateCache
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create and Delete keys. The keys should be moved to DeletedKeys table
name|List
argument_list|<
name|String
argument_list|>
name|deletedKeyNames
init|=
name|createAndDeleteKeys
argument_list|()
decl_stmt|;
comment|// The keys should be present in the DeletedKeys table before purging
for|for
control|(
name|String
name|deletedKey
range|:
name|deletedKeyNames
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetadataManager
operator|.
name|getDeletedTable
argument_list|()
operator|.
name|isExist
argument_list|(
name|deletedKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create PurgeKeysRequest to purge the deleted keys
name|OMRequest
name|omRequest
init|=
name|createPurgeKeysRequest
argument_list|(
name|deletedKeyNames
argument_list|)
decl_stmt|;
name|OMRequest
name|preExecutedRequest
init|=
name|preExecute
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
name|OMKeyPurgeRequest
name|omKeyPurgeRequest
init|=
operator|new
name|OMKeyPurgeRequest
argument_list|(
name|preExecutedRequest
argument_list|)
decl_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
name|omKeyPurgeRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
literal|100L
argument_list|,
name|ozoneManagerDoubleBufferHelper
argument_list|)
decl_stmt|;
name|OMResponse
name|omResponse
init|=
name|OMResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPurgeKeysResponse
argument_list|(
name|PurgeKeysResponse
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
operator|.
name|setCmdType
argument_list|(
name|Type
operator|.
name|PurgeKeys
argument_list|)
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|BatchOperation
name|batchOperation
init|=
name|omMetadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|initBatchOperation
argument_list|()
decl_stmt|;
name|OMKeyPurgeResponse
name|omKeyPurgeResponse
init|=
operator|new
name|OMKeyPurgeResponse
argument_list|(
name|deletedKeyNames
argument_list|,
name|omResponse
argument_list|)
decl_stmt|;
name|omKeyPurgeResponse
operator|.
name|addToDBBatch
argument_list|(
name|omMetadataManager
argument_list|,
name|batchOperation
argument_list|)
expr_stmt|;
comment|// Do manual commit and see whether addToBatch is successful or not.
name|omMetadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|commitBatchOperation
argument_list|(
name|batchOperation
argument_list|)
expr_stmt|;
comment|// The keys should not exist in the DeletedKeys table
for|for
control|(
name|String
name|deletedKey
range|:
name|deletedKeyNames
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|omMetadataManager
operator|.
name|getDeletedTable
argument_list|()
operator|.
name|isExist
argument_list|(
name|deletedKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|preExecute (OMRequest originalOmRequest)
specifier|private
name|OMRequest
name|preExecute
parameter_list|(
name|OMRequest
name|originalOmRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|OMKeyPurgeRequest
name|omKeyPurgeRequest
init|=
operator|new
name|OMKeyPurgeRequest
argument_list|(
name|originalOmRequest
argument_list|)
decl_stmt|;
name|OMRequest
name|modifiedOmRequest
init|=
name|omKeyPurgeRequest
operator|.
name|preExecute
argument_list|(
name|ozoneManager
argument_list|)
decl_stmt|;
comment|// Will not be equal, as UserInfo will be set.
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|originalOmRequest
argument_list|,
name|modifiedOmRequest
argument_list|)
expr_stmt|;
return|return
name|modifiedOmRequest
return|;
block|}
block|}
end_class

end_unit

