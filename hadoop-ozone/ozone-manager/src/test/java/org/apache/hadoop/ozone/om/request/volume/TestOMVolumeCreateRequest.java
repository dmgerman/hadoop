begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.volume
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|volume
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|TestOMRequestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests create volume request.  */
end_comment

begin_class
DECL|class|TestOMVolumeCreateRequest
specifier|public
class|class
name|TestOMVolumeCreateRequest
block|{
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|ozoneManager
specifier|private
name|OzoneManager
name|ozoneManager
decl_stmt|;
DECL|field|omMetrics
specifier|private
name|OMMetrics
name|omMetrics
decl_stmt|;
DECL|field|omMetadataManager
specifier|private
name|OMMetadataManager
name|omMetadataManager
decl_stmt|;
DECL|field|auditLogger
specifier|private
name|AuditLogger
name|auditLogger
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ozoneManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OzoneManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|omMetrics
operator|=
name|OMMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
name|OzoneConfiguration
name|ozoneConfiguration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|ozoneConfiguration
operator|.
name|set
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|ozoneConfiguration
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|omMetrics
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneManager
operator|.
name|getMetadataManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|omMetadataManager
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneManager
operator|.
name|getMaxUserVolumeCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|auditLogger
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AuditLogger
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ozoneManager
operator|.
name|getAuditLogger
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|auditLogger
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|auditLogger
argument_list|)
operator|.
name|logWrite
argument_list|(
name|any
argument_list|(
name|AuditMessage
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|omMetrics
operator|.
name|unRegister
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|framework
argument_list|()
operator|.
name|clearInlineMocks
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreExecute ()
specifier|public
name|void
name|testPreExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|adminName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|ownerName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|doPreExecute
argument_list|(
name|volumeName
argument_list|,
name|adminName
argument_list|,
name|ownerName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateAndUpdateCacheWithZeroMaxUserVolumeCount ()
specifier|public
name|void
name|testValidateAndUpdateCacheWithZeroMaxUserVolumeCount
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|ozoneManager
operator|.
name|getMaxUserVolumeCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|adminName
init|=
literal|"user1"
decl_stmt|;
name|String
name|ownerName
init|=
literal|"user1"
decl_stmt|;
name|OMRequest
name|originalRequest
init|=
name|createVolumeRequest
argument_list|(
name|volumeName
argument_list|,
name|adminName
argument_list|,
name|ownerName
argument_list|)
decl_stmt|;
name|OMVolumeCreateRequest
name|omVolumeCreateRequest
init|=
operator|new
name|OMVolumeCreateRequest
argument_list|(
name|originalRequest
argument_list|)
decl_stmt|;
name|omVolumeCreateRequest
operator|.
name|preExecute
argument_list|(
name|ozoneManager
argument_list|)
expr_stmt|;
try|try
block|{
name|OMClientResponse
name|omClientResponse
init|=
name|omVolumeCreateRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
literal|1
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"should be greater than zero"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidateAndUpdateCacheSuccess ()
specifier|public
name|void
name|testValidateAndUpdateCacheSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|adminName
init|=
literal|"user1"
decl_stmt|;
name|String
name|ownerName
init|=
literal|"user1"
decl_stmt|;
name|OMRequest
name|originalRequest
init|=
name|createVolumeRequest
argument_list|(
name|volumeName
argument_list|,
name|adminName
argument_list|,
name|ownerName
argument_list|)
decl_stmt|;
name|OMVolumeCreateRequest
name|omVolumeCreateRequest
init|=
operator|new
name|OMVolumeCreateRequest
argument_list|(
name|originalRequest
argument_list|)
decl_stmt|;
name|omVolumeCreateRequest
operator|.
name|preExecute
argument_list|(
name|ozoneManager
argument_list|)
expr_stmt|;
name|String
name|volumeKey
init|=
name|omMetadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|String
name|ownerKey
init|=
name|omMetadataManager
operator|.
name|getUserKey
argument_list|(
name|ownerName
argument_list|)
decl_stmt|;
comment|// As we have not still called validateAndUpdateCache, get() should
comment|// return null.
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|volumeKey
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|get
argument_list|(
name|ownerKey
argument_list|)
argument_list|)
expr_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
name|omVolumeCreateRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
name|omResponse
init|=
name|omClientResponse
operator|.
name|getOMResponse
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|omResponse
operator|.
name|getCreateVolumeResponse
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|omResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get volumeInfo from request.
name|VolumeInfo
name|volumeInfo
init|=
name|omVolumeCreateRequest
operator|.
name|getOmRequest
argument_list|()
operator|.
name|getCreateVolumeRequest
argument_list|()
operator|.
name|getVolumeInfo
argument_list|()
decl_stmt|;
name|OmVolumeArgs
name|omVolumeArgs
init|=
name|omMetadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|volumeKey
argument_list|)
decl_stmt|;
comment|// As request is valid volume table should not have entry.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|omVolumeArgs
argument_list|)
expr_stmt|;
comment|// Check data from table and request.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeInfo
operator|.
name|getVolume
argument_list|()
argument_list|,
name|omVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeInfo
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|omVolumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeInfo
operator|.
name|getAdminName
argument_list|()
argument_list|,
name|omVolumeArgs
operator|.
name|getAdminName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeInfo
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|omVolumeArgs
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneManagerProtocolProtos
operator|.
name|VolumeList
name|volumeList
init|=
name|omMetadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|get
argument_list|(
name|ownerKey
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|volumeList
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeName
argument_list|,
name|volumeList
operator|.
name|getVolumeNames
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateAndUpdateCacheWithVolumeAlreadyExists ()
specifier|public
name|void
name|testValidateAndUpdateCacheWithVolumeAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|adminName
init|=
literal|"user1"
decl_stmt|;
name|String
name|ownerName
init|=
literal|"user1"
decl_stmt|;
name|TestOMRequestUtils
operator|.
name|addVolumeToDB
argument_list|(
name|volumeName
argument_list|,
name|omMetadataManager
argument_list|)
expr_stmt|;
name|OMRequest
name|originalRequest
init|=
name|createVolumeRequest
argument_list|(
name|volumeName
argument_list|,
name|adminName
argument_list|,
name|ownerName
argument_list|)
decl_stmt|;
name|OMVolumeCreateRequest
name|omVolumeCreateRequest
init|=
operator|new
name|OMVolumeCreateRequest
argument_list|(
name|originalRequest
argument_list|)
decl_stmt|;
name|omVolumeCreateRequest
operator|.
name|preExecute
argument_list|(
name|ozoneManager
argument_list|)
expr_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
name|omVolumeCreateRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
name|omResponse
init|=
name|omClientResponse
operator|.
name|getOMResponse
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|omResponse
operator|.
name|getCreateVolumeResponse
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|VOLUME_ALREADY_EXISTS
argument_list|,
name|omResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check really if we have a volume with the specified volume name.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|omMetadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|omMetadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volumeName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doPreExecute (String volumeName, String adminName, String ownerName)
specifier|private
name|void
name|doPreExecute
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|adminName
parameter_list|,
name|String
name|ownerName
parameter_list|)
throws|throws
name|Exception
block|{
name|OMRequest
name|originalRequest
init|=
name|createVolumeRequest
argument_list|(
name|volumeName
argument_list|,
name|adminName
argument_list|,
name|ownerName
argument_list|)
decl_stmt|;
name|OMVolumeCreateRequest
name|omVolumeCreateRequest
init|=
operator|new
name|OMVolumeCreateRequest
argument_list|(
name|originalRequest
argument_list|)
decl_stmt|;
name|OMRequest
name|modifiedRequest
init|=
name|omVolumeCreateRequest
operator|.
name|preExecute
argument_list|(
name|ozoneManager
argument_list|)
decl_stmt|;
name|verifyRequest
argument_list|(
name|modifiedRequest
argument_list|,
name|originalRequest
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify modifiedOmRequest and originalRequest.    * @param modifiedRequest    * @param originalRequest    */
DECL|method|verifyRequest (OMRequest modifiedRequest, OMRequest originalRequest)
specifier|private
name|void
name|verifyRequest
parameter_list|(
name|OMRequest
name|modifiedRequest
parameter_list|,
name|OMRequest
name|originalRequest
parameter_list|)
block|{
name|VolumeInfo
name|original
init|=
name|originalRequest
operator|.
name|getCreateVolumeRequest
argument_list|()
operator|.
name|getVolumeInfo
argument_list|()
decl_stmt|;
name|VolumeInfo
name|updated
init|=
name|modifiedRequest
operator|.
name|getCreateVolumeRequest
argument_list|()
operator|.
name|getVolumeInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|original
operator|.
name|getAdminName
argument_list|()
argument_list|,
name|updated
operator|.
name|getAdminName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|original
operator|.
name|getVolume
argument_list|()
argument_list|,
name|updated
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|original
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|updated
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|original
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|updated
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create OMRequest for create volume.    * @param volumeName    * @param adminName    * @param ownerName    * @return OMRequest    */
DECL|method|createVolumeRequest (String volumeName, String adminName, String ownerName)
specifier|private
name|OMRequest
name|createVolumeRequest
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|adminName
parameter_list|,
name|String
name|ownerName
parameter_list|)
block|{
name|VolumeInfo
name|volumeInfo
init|=
name|VolumeInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setAdminName
argument_list|(
name|adminName
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|ownerName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CreateVolumeRequest
name|createVolumeRequest
init|=
name|CreateVolumeRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeInfo
argument_list|(
name|volumeInfo
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|OMRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClientId
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setCmdType
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Type
operator|.
name|CreateVolume
argument_list|)
operator|.
name|setCreateVolumeRequest
argument_list|(
name|createVolumeRequest
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

