begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|TestOMRequestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
import|;
end_import

begin_comment
comment|/**  * Tests OzoneManager MetadataManager.  */
end_comment

begin_class
DECL|class|TestOmMetadataManager
specifier|public
class|class
name|TestOmMetadataManager
block|{
DECL|field|omMetadataManager
specifier|private
name|OMMetadataManager
name|omMetadataManager
decl_stmt|;
DECL|field|ozoneConfiguration
specifier|private
name|OzoneConfiguration
name|ozoneConfiguration
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ozoneConfiguration
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|ozoneConfiguration
operator|.
name|set
argument_list|(
name|OZONE_OM_DB_DIRS
argument_list|,
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|ozoneConfiguration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListBuckets ()
specifier|public
name|void
name|testListBuckets
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName1
init|=
literal|"volumeA"
decl_stmt|;
name|String
name|prefixBucketNameWithOzoneOwner
init|=
literal|"ozoneBucket"
decl_stmt|;
name|String
name|prefixBucketNameWithHadoopOwner
init|=
literal|"hadoopBucket"
decl_stmt|;
name|TestOMRequestUtils
operator|.
name|addVolumeToDB
argument_list|(
name|volumeName1
argument_list|,
name|omMetadataManager
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|volumeABucketsPrefixWithOzoneOwner
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|volumeABucketsPrefixWithHadoopOwner
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|volumeABucketsPrefixWithOzoneOwner
operator|.
name|add
argument_list|(
name|prefixBucketNameWithOzoneOwner
operator|+
name|i
argument_list|)
expr_stmt|;
name|addBucketsToCache
argument_list|(
name|volumeName1
argument_list|,
name|prefixBucketNameWithOzoneOwner
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|volumeABucketsPrefixWithHadoopOwner
operator|.
name|add
argument_list|(
name|prefixBucketNameWithHadoopOwner
operator|+
name|i
argument_list|)
expr_stmt|;
name|addBucketsToCache
argument_list|(
name|volumeName1
argument_list|,
name|prefixBucketNameWithHadoopOwner
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|volumeName2
init|=
literal|"volumeB"
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|volumeBBucketsPrefixWithOzoneOwner
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|volumeBBucketsPrefixWithHadoopOwner
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|TestOMRequestUtils
operator|.
name|addVolumeToDB
argument_list|(
name|volumeName2
argument_list|,
name|omMetadataManager
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|volumeBBucketsPrefixWithOzoneOwner
operator|.
name|add
argument_list|(
name|prefixBucketNameWithOzoneOwner
operator|+
name|i
argument_list|)
expr_stmt|;
name|addBucketsToCache
argument_list|(
name|volumeName2
argument_list|,
name|prefixBucketNameWithOzoneOwner
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|volumeBBucketsPrefixWithHadoopOwner
operator|.
name|add
argument_list|(
name|prefixBucketNameWithHadoopOwner
operator|+
name|i
argument_list|)
expr_stmt|;
name|addBucketsToCache
argument_list|(
name|volumeName2
argument_list|,
name|prefixBucketNameWithHadoopOwner
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// List all buckets which have prefix ozoneBucket
name|List
argument_list|<
name|OmBucketInfo
argument_list|>
name|omBucketInfoList
init|=
name|omMetadataManager
operator|.
name|listBuckets
argument_list|(
name|volumeName1
argument_list|,
literal|null
argument_list|,
name|prefixBucketNameWithOzoneOwner
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omBucketInfoList
operator|.
name|size
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
for|for
control|(
name|OmBucketInfo
name|omBucketInfo
range|:
name|omBucketInfoList
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omBucketInfo
operator|.
name|getBucketName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefixBucketNameWithOzoneOwner
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|startBucket
init|=
name|prefixBucketNameWithOzoneOwner
operator|+
literal|10
decl_stmt|;
name|omBucketInfoList
operator|=
name|omMetadataManager
operator|.
name|listBuckets
argument_list|(
name|volumeName1
argument_list|,
name|startBucket
argument_list|,
name|prefixBucketNameWithOzoneOwner
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeABucketsPrefixWithOzoneOwner
operator|.
name|tailSet
argument_list|(
name|startBucket
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|omBucketInfoList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|startBucket
operator|=
name|prefixBucketNameWithOzoneOwner
operator|+
literal|38
expr_stmt|;
name|omBucketInfoList
operator|=
name|omMetadataManager
operator|.
name|listBuckets
argument_list|(
name|volumeName1
argument_list|,
name|startBucket
argument_list|,
name|prefixBucketNameWithOzoneOwner
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeABucketsPrefixWithOzoneOwner
operator|.
name|tailSet
argument_list|(
name|startBucket
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|omBucketInfoList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|OmBucketInfo
name|omBucketInfo
range|:
name|omBucketInfoList
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omBucketInfo
operator|.
name|getBucketName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefixBucketNameWithOzoneOwner
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|omBucketInfo
operator|.
name|getBucketName
argument_list|()
operator|.
name|equals
argument_list|(
name|prefixBucketNameWithOzoneOwner
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|omBucketInfoList
operator|=
name|omMetadataManager
operator|.
name|listBuckets
argument_list|(
name|volumeName2
argument_list|,
literal|null
argument_list|,
name|prefixBucketNameWithHadoopOwner
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omBucketInfoList
operator|.
name|size
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
for|for
control|(
name|OmBucketInfo
name|omBucketInfo
range|:
name|omBucketInfoList
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omBucketInfo
operator|.
name|getBucketName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefixBucketNameWithHadoopOwner
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Try to get buckets by count 10, like that get all buckets in the
comment|// volumeB with prefixBucketNameWithHadoopOwner.
name|startBucket
operator|=
literal|null
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|expectedBuckets
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|omBucketInfoList
operator|=
name|omMetadataManager
operator|.
name|listBuckets
argument_list|(
name|volumeName2
argument_list|,
name|startBucket
argument_list|,
name|prefixBucketNameWithHadoopOwner
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omBucketInfoList
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|OmBucketInfo
name|omBucketInfo
range|:
name|omBucketInfoList
control|)
block|{
name|expectedBuckets
operator|.
name|add
argument_list|(
name|omBucketInfo
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omBucketInfo
operator|.
name|getBucketName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefixBucketNameWithHadoopOwner
argument_list|)
argument_list|)
expr_stmt|;
name|startBucket
operator|=
name|omBucketInfo
operator|.
name|getBucketName
argument_list|()
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|volumeBBucketsPrefixWithHadoopOwner
argument_list|,
name|expectedBuckets
argument_list|)
expr_stmt|;
comment|// As now we have iterated all 50 buckets, calling next time should
comment|// return empty list.
name|omBucketInfoList
operator|=
name|omMetadataManager
operator|.
name|listBuckets
argument_list|(
name|volumeName2
argument_list|,
name|startBucket
argument_list|,
name|prefixBucketNameWithHadoopOwner
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|omBucketInfoList
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|addBucketsToCache (String volumeName, String bucketName)
specifier|private
name|void
name|addBucketsToCache
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
block|{
name|OmBucketInfo
name|omBucketInfo
init|=
name|OmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
operator|.
name|setIsVersionEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|omMetadataManager
operator|.
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|omBucketInfo
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

