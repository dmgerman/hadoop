begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|ContainerBlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|AllocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|DeleteBlockResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ExcludeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|PipelineID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocol
operator|.
name|ScmBlockLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|BlockGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|DeleteBlockGroupResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ScmBlockLocationProtocolProtos
operator|.
name|DeleteScmBlockResult
operator|.
name|Result
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ScmBlockLocationProtocolProtos
operator|.
name|DeleteScmBlockResult
operator|.
name|Result
operator|.
name|success
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|ScmBlockLocationProtocolProtos
operator|.
name|DeleteScmBlockResult
operator|.
name|Result
operator|.
name|unknownFailure
import|;
end_import

begin_comment
comment|/**  * This is a testing client that allows us to intercept calls from OzoneManager  * to SCM.  *<p>  * TODO: OzoneManager#getScmBlockClient -- so that we can load this class up via  * config setting into OzoneManager. Right now, we just pass this to  * KeyDeletingService only.  *<p>  * TODO: Move this class to a generic test utils so we can use this class in  * other Ozone Manager tests.  */
end_comment

begin_class
DECL|class|ScmBlockLocationTestIngClient
specifier|public
class|class
name|ScmBlockLocationTestIngClient
implements|implements
name|ScmBlockLocationProtocol
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ScmBlockLocationTestIngClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|clusterID
specifier|private
specifier|final
name|String
name|clusterID
decl_stmt|;
DECL|field|scmId
specifier|private
specifier|final
name|String
name|scmId
decl_stmt|;
comment|// 0 means no calls will fail, +1 means all calls will fail, +2 means every
comment|// second call will fail, +3 means every third and so on.
DECL|field|failCallsFrequency
specifier|private
specifier|final
name|int
name|failCallsFrequency
decl_stmt|;
DECL|field|currentCall
specifier|private
name|int
name|currentCall
init|=
literal|0
decl_stmt|;
comment|/**    * If ClusterID or SCMID is blank a per instance ID is generated.    *    * @param clusterID - String or blank.    * @param scmId - String or Blank.    * @param failCallsFrequency - Set to 0 for no failures, 1 for always to fail,    * a positive number for that frequency of failure.    */
DECL|method|ScmBlockLocationTestIngClient (String clusterID, String scmId, int failCallsFrequency)
specifier|public
name|ScmBlockLocationTestIngClient
parameter_list|(
name|String
name|clusterID
parameter_list|,
name|String
name|scmId
parameter_list|,
name|int
name|failCallsFrequency
parameter_list|)
block|{
name|this
operator|.
name|clusterID
operator|=
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|clusterID
argument_list|)
condition|?
name|clusterID
else|:
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|scmId
operator|=
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|scmId
argument_list|)
condition|?
name|scmId
else|:
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|failCallsFrequency
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|failCallsFrequency
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|this
operator|.
name|failCallsFrequency
condition|)
block|{
case|case
literal|0
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set to no failure mode, all delete block calls will "
operator|+
literal|"succeed."
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set to all failure mode. All delete block calls to SCM"
operator|+
literal|" will fail."
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set to Mix mode, every {} -th call will fail"
argument_list|,
name|this
operator|.
name|failCallsFrequency
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns Fake blocks to the BlockManager so we get blocks in the Database.    * @param size - size of the block.    * @param type Replication Type    * @param factor - Replication factor    * @param owner - String owner.    * @param excludeList list of dns/pipelines to exclude    * @return    * @throws IOException    */
annotation|@
name|Override
DECL|method|allocateBlock (long size, HddsProtos.ReplicationType type, HddsProtos.ReplicationFactor factor, String owner, ExcludeList excludeList)
specifier|public
name|AllocatedBlock
name|allocateBlock
parameter_list|(
name|long
name|size
parameter_list|,
name|HddsProtos
operator|.
name|ReplicationType
name|type
parameter_list|,
name|HddsProtos
operator|.
name|ReplicationFactor
name|factor
parameter_list|,
name|String
name|owner
parameter_list|,
name|ExcludeList
name|excludeList
parameter_list|)
throws|throws
name|IOException
block|{
name|DatanodeDetails
name|datanodeDetails
init|=
name|TestUtils
operator|.
name|randomDatanodeDetails
argument_list|()
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|createPipeline
argument_list|(
name|datanodeDetails
argument_list|)
decl_stmt|;
name|long
name|containerID
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|long
name|localID
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|AllocatedBlock
operator|.
name|Builder
name|abb
init|=
operator|new
name|AllocatedBlock
operator|.
name|Builder
argument_list|()
operator|.
name|setContainerBlockID
argument_list|(
operator|new
name|ContainerBlockID
argument_list|(
name|containerID
argument_list|,
name|localID
argument_list|)
argument_list|)
operator|.
name|setPipeline
argument_list|(
name|pipeline
argument_list|)
decl_stmt|;
return|return
name|abb
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createPipeline (DatanodeDetails datanode)
specifier|private
name|Pipeline
name|createPipeline
parameter_list|(
name|DatanodeDetails
name|datanode
parameter_list|)
block|{
name|List
argument_list|<
name|DatanodeDetails
argument_list|>
name|dns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|dns
operator|.
name|add
argument_list|(
name|datanode
argument_list|)
expr_stmt|;
name|Pipeline
name|pipeline
init|=
name|Pipeline
operator|.
name|newBuilder
argument_list|()
operator|.
name|setState
argument_list|(
name|Pipeline
operator|.
name|PipelineState
operator|.
name|OPEN
argument_list|)
operator|.
name|setId
argument_list|(
name|PipelineID
operator|.
name|randomId
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|setFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setNodes
argument_list|(
name|dns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|pipeline
return|;
block|}
annotation|@
name|Override
DECL|method|deleteKeyBlocks ( List<BlockGroup> keyBlocksInfoList)
specifier|public
name|List
argument_list|<
name|DeleteBlockGroupResult
argument_list|>
name|deleteKeyBlocks
parameter_list|(
name|List
argument_list|<
name|BlockGroup
argument_list|>
name|keyBlocksInfoList
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|DeleteBlockGroupResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DeleteBlockResult
argument_list|>
name|blockResultList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Result
name|result
decl_stmt|;
for|for
control|(
name|BlockGroup
name|keyBlocks
range|:
name|keyBlocksInfoList
control|)
block|{
for|for
control|(
name|BlockID
name|blockKey
range|:
name|keyBlocks
operator|.
name|getBlockIDList
argument_list|()
control|)
block|{
name|currentCall
operator|++
expr_stmt|;
switch|switch
condition|(
name|this
operator|.
name|failCallsFrequency
condition|)
block|{
case|case
literal|0
case|:
name|result
operator|=
name|success
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|result
operator|=
name|unknownFailure
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|currentCall
operator|%
name|this
operator|.
name|failCallsFrequency
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|unknownFailure
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|success
expr_stmt|;
block|}
block|}
name|blockResultList
operator|.
name|add
argument_list|(
operator|new
name|DeleteBlockResult
argument_list|(
name|blockKey
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
operator|new
name|DeleteBlockGroupResult
argument_list|(
name|keyBlocks
operator|.
name|getGroupID
argument_list|()
argument_list|,
name|blockResultList
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
DECL|method|getScmInfo ()
specifier|public
name|ScmInfo
name|getScmInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|ScmInfo
operator|.
name|Builder
name|builder
init|=
operator|new
name|ScmInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setClusterId
argument_list|(
name|clusterID
argument_list|)
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{    }
block|}
end_class

end_unit

