begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocol
operator|.
name|ScmBlockLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadListParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|TestOMRequestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneBlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Unit test key manager.  */
end_comment

begin_class
DECL|class|TestKeyManagerUnit
specifier|public
class|class
name|TestKeyManagerUnit
block|{
DECL|field|metadataManager
specifier|private
name|OmMetadataManagerImpl
name|metadataManager
decl_stmt|;
DECL|field|keyManager
specifier|private
name|KeyManagerImpl
name|keyManager
decl_stmt|;
DECL|field|startDate
specifier|private
name|Instant
name|startDate
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneConfiguration
name|configuration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|metadataManager
operator|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|keyManager
operator|=
operator|new
name|KeyManagerImpl
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|ScmBlockLocationProtocol
operator|.
name|class
argument_list|)
argument_list|,
name|metadataManager
argument_list|,
name|configuration
argument_list|,
literal|"omtest"
argument_list|,
name|Mockito
operator|.
name|mock
argument_list|(
name|OzoneBlockTokenSecretManager
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|startDate
operator|=
name|Instant
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listMultipartUploadPartsWithZeroUpload ()
specifier|public
name|void
name|listMultipartUploadPartsWithZeroUpload
parameter_list|()
throws|throws
name|IOException
block|{
comment|//GIVEN
name|createBucket
argument_list|(
name|metadataManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|)
expr_stmt|;
name|OmMultipartInfo
name|omMultipartInfo
init|=
name|initMultipartUpload
argument_list|(
name|keyManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|,
literal|"dir/key1"
argument_list|)
decl_stmt|;
comment|//WHEN
name|OmMultipartUploadListParts
name|omMultipartUploadListParts
init|=
name|keyManager
operator|.
name|listParts
argument_list|(
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|,
literal|"dir/key1"
argument_list|,
name|omMultipartInfo
operator|.
name|getUploadID
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|omMultipartUploadListParts
operator|.
name|getPartInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|startDate
operator|=
name|Instant
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listMultipartUploads ()
specifier|public
name|void
name|listMultipartUploads
parameter_list|()
throws|throws
name|IOException
block|{
comment|//GIVEN
name|createBucket
argument_list|(
name|metadataManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|)
expr_stmt|;
name|createBucket
argument_list|(
name|metadataManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket2"
argument_list|)
expr_stmt|;
name|OmMultipartInfo
name|upload1
init|=
name|initMultipartUpload
argument_list|(
name|keyManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|,
literal|"dir/key1"
argument_list|)
decl_stmt|;
name|OmMultipartInfo
name|upload2
init|=
name|initMultipartUpload
argument_list|(
name|keyManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|,
literal|"dir/key2"
argument_list|)
decl_stmt|;
name|OmMultipartInfo
name|upload3
init|=
name|initMultipartUpload
argument_list|(
name|keyManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket2"
argument_list|,
literal|"dir/key1"
argument_list|)
decl_stmt|;
comment|//WHEN
name|OmMultipartUploadList
name|omMultipartUploadList
init|=
name|keyManager
operator|.
name|listMultipartUploads
argument_list|(
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|//THEN
name|List
argument_list|<
name|OmMultipartUpload
argument_list|>
name|uploads
init|=
name|omMultipartUploadList
operator|.
name|getUploads
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|uploads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dir/key1"
argument_list|,
name|uploads
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dir/key2"
argument_list|,
name|uploads
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|uploads
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|uploads
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Creation date is too old"
argument_list|,
name|uploads
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCreationTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|startDate
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|listMultipartUploadsWithPrefix ()
specifier|public
name|void
name|listMultipartUploadsWithPrefix
parameter_list|()
throws|throws
name|IOException
block|{
comment|//GIVEN
name|createBucket
argument_list|(
name|metadataManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|)
expr_stmt|;
name|createBucket
argument_list|(
name|metadataManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket2"
argument_list|)
expr_stmt|;
name|OmMultipartInfo
name|upload1
init|=
name|initMultipartUpload
argument_list|(
name|keyManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|,
literal|"dip/key1"
argument_list|)
decl_stmt|;
name|initMultipartUpload
argument_list|(
name|keyManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|,
literal|"dir/key1"
argument_list|)
expr_stmt|;
name|initMultipartUpload
argument_list|(
name|keyManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|,
literal|"dir/key2"
argument_list|)
expr_stmt|;
name|initMultipartUpload
argument_list|(
name|keyManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|,
literal|"key3"
argument_list|)
expr_stmt|;
name|initMultipartUpload
argument_list|(
name|keyManager
argument_list|,
literal|"vol1"
argument_list|,
literal|"bucket2"
argument_list|,
literal|"dir/key1"
argument_list|)
expr_stmt|;
comment|//WHEN
name|OmMultipartUploadList
name|omMultipartUploadList
init|=
name|keyManager
operator|.
name|listMultipartUploads
argument_list|(
literal|"vol1"
argument_list|,
literal|"bucket1"
argument_list|,
literal|"dir"
argument_list|)
decl_stmt|;
comment|//THEN
name|List
argument_list|<
name|OmMultipartUpload
argument_list|>
name|uploads
init|=
name|omMultipartUploadList
operator|.
name|getUploads
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|uploads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dir/key1"
argument_list|,
name|uploads
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dir/key2"
argument_list|,
name|uploads
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createBucket (OmMetadataManagerImpl omMetadataManager, String volume, String bucket)
specifier|private
name|void
name|createBucket
parameter_list|(
name|OmMetadataManagerImpl
name|omMetadataManager
parameter_list|,
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|OmBucketInfo
name|omBucketInfo
init|=
name|OmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DISK
argument_list|)
operator|.
name|setIsVersionEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|setAcls
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TestOMRequestUtils
operator|.
name|addBucketToOM
argument_list|(
name|metadataManager
argument_list|,
name|omBucketInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|initMultipartUpload (KeyManagerImpl omtest, String volume, String bucket, String key)
specifier|private
name|OmMultipartInfo
name|initMultipartUpload
parameter_list|(
name|KeyManagerImpl
name|omtest
parameter_list|,
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|OmKeyArgs
name|key1
init|=
operator|new
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|key
argument_list|)
operator|.
name|setType
argument_list|(
name|ReplicationType
operator|.
name|RATIS
argument_list|)
operator|.
name|setFactor
argument_list|(
name|ReplicationFactor
operator|.
name|THREE
argument_list|)
operator|.
name|setAcls
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|omtest
operator|.
name|initiateMultipartUpload
argument_list|(
name|key1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

