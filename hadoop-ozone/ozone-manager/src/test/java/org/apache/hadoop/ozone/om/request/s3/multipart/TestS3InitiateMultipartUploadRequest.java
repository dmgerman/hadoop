begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.s3.multipart
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|s3
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|TestOMRequestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_comment
comment|/**  * Tests S3 Initiate Multipart Upload request.  */
end_comment

begin_class
DECL|class|TestS3InitiateMultipartUploadRequest
specifier|public
class|class
name|TestS3InitiateMultipartUploadRequest
extends|extends
name|TestS3MultipartRequest
block|{
annotation|@
name|Test
DECL|method|testPreExecute ()
specifier|public
name|void
name|testPreExecute
parameter_list|()
block|{
name|doPreExecuteInitiateMPU
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateAndUpdateCache ()
specifier|public
name|void
name|testValidateAndUpdateCache
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Add volume and bucket to DB.
name|TestOMRequestUtils
operator|.
name|addVolumeAndBucketToDB
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|omMetadataManager
argument_list|)
expr_stmt|;
name|OMRequest
name|modifiedRequest
init|=
name|doPreExecuteInitiateMPU
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|S3InitiateMultipartUploadRequest
name|s3InitiateMultipartUploadRequest
init|=
operator|new
name|S3InitiateMultipartUploadRequest
argument_list|(
name|modifiedRequest
argument_list|)
decl_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
name|s3InitiateMultipartUploadRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
literal|100L
argument_list|,
name|ozoneManagerDoubleBufferHelper
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|omClientResponse
operator|.
name|getOMResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|multipartKey
init|=
name|omMetadataManager
operator|.
name|getMultipartKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|modifiedRequest
operator|.
name|getInitiateMultiPartUploadRequest
argument_list|()
operator|.
name|getKeyArgs
argument_list|()
operator|.
name|getMultipartUploadID
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|omMetadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|omMetadataManager
operator|.
name|getMultipartInfoTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|modifiedRequest
operator|.
name|getInitiateMultiPartUploadRequest
argument_list|()
operator|.
name|getKeyArgs
argument_list|()
operator|.
name|getMultipartUploadID
argument_list|()
argument_list|,
name|omMetadataManager
operator|.
name|getMultipartInfoTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
operator|.
name|getUploadID
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|modifiedRequest
operator|.
name|getInitiateMultiPartUploadRequest
argument_list|()
operator|.
name|getKeyArgs
argument_list|()
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|omMetadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|modifiedRequest
operator|.
name|getInitiateMultiPartUploadRequest
argument_list|()
operator|.
name|getKeyArgs
argument_list|()
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|omMetadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateAndUpdateCacheWithBucketNotFound ()
specifier|public
name|void
name|testValidateAndUpdateCacheWithBucketNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TestOMRequestUtils
operator|.
name|addVolumeToDB
argument_list|(
name|volumeName
argument_list|,
name|omMetadataManager
argument_list|)
expr_stmt|;
name|OMRequest
name|modifiedRequest
init|=
name|doPreExecuteInitiateMPU
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|S3InitiateMultipartUploadRequest
name|s3InitiateMultipartUploadRequest
init|=
operator|new
name|S3InitiateMultipartUploadRequest
argument_list|(
name|modifiedRequest
argument_list|)
decl_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
name|s3InitiateMultipartUploadRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
literal|100L
argument_list|,
name|ozoneManagerDoubleBufferHelper
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|BUCKET_NOT_FOUND
argument_list|,
name|omClientResponse
operator|.
name|getOMResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|multipartKey
init|=
name|omMetadataManager
operator|.
name|getMultipartKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|modifiedRequest
operator|.
name|getInitiateMultiPartUploadRequest
argument_list|()
operator|.
name|getKeyArgs
argument_list|()
operator|.
name|getMultipartUploadID
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getMultipartInfoTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateAndUpdateCacheWithVolumeNotFound ()
specifier|public
name|void
name|testValidateAndUpdateCacheWithVolumeNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OMRequest
name|modifiedRequest
init|=
name|doPreExecuteInitiateMPU
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|S3InitiateMultipartUploadRequest
name|s3InitiateMultipartUploadRequest
init|=
operator|new
name|S3InitiateMultipartUploadRequest
argument_list|(
name|modifiedRequest
argument_list|)
decl_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
name|s3InitiateMultipartUploadRequest
operator|.
name|validateAndUpdateCache
argument_list|(
name|ozoneManager
argument_list|,
literal|100L
argument_list|,
name|ozoneManagerDoubleBufferHelper
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|VOLUME_NOT_FOUND
argument_list|,
name|omClientResponse
operator|.
name|getOMResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|multipartKey
init|=
name|omMetadataManager
operator|.
name|getMultipartKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|modifiedRequest
operator|.
name|getInitiateMultiPartUploadRequest
argument_list|()
operator|.
name|getKeyArgs
argument_list|()
operator|.
name|getMultipartUploadID
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getMultipartInfoTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

