begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|BatchOperation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
import|;
end_import

begin_comment
comment|/**  * This class tests OzoneManagerDoubleBuffer implementation with  * dummy response class.  */
end_comment

begin_class
DECL|class|TestOzoneManagerDoubleBufferWithDummyResponse
specifier|public
class|class
name|TestOzoneManagerDoubleBufferWithDummyResponse
block|{
DECL|field|omMetadataManager
specifier|private
name|OMMetadataManager
name|omMetadataManager
decl_stmt|;
DECL|field|doubleBuffer
specifier|private
name|OzoneManagerDoubleBuffer
name|doubleBuffer
decl_stmt|;
DECL|field|trxId
specifier|private
name|AtomicLong
name|trxId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneConfiguration
name|configuration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OZONE_METADATA_DIRS
argument_list|,
name|folder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|doubleBuffer
operator|=
operator|new
name|OzoneManagerDoubleBuffer
argument_list|(
name|omMetadataManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|doubleBuffer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * This tests add's 100 bucket creation responses to doubleBuffer, and    * check OM DB bucket table has 100 entries or not. In addition checks    * flushed transaction count is matching with expected count or not.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300_000
argument_list|)
DECL|method|testDoubleBufferWithDummyResponse ()
specifier|public
name|void
name|testDoubleBufferWithDummyResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|bucketCount
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketCount
condition|;
name|i
operator|++
control|)
block|{
name|doubleBuffer
operator|.
name|add
argument_list|(
name|createDummyBucketResponse
argument_list|(
name|volumeName
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|trxId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|doubleBuffer
operator|.
name|getFlushedTransactionCount
argument_list|()
operator|==
name|bucketCount
argument_list|,
literal|100
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetadataManager
operator|.
name|countRowsInTable
argument_list|(
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
argument_list|)
operator|==
operator|(
name|bucketCount
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|doubleBuffer
operator|.
name|getFlushIterations
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create DummyBucketCreate response.    * @param volumeName    * @param bucketName    * @return OMDummyCreateBucketResponse    */
DECL|method|createDummyBucketResponse ( String volumeName, String bucketName)
specifier|private
name|OMDummyCreateBucketResponse
name|createDummyBucketResponse
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
block|{
name|OmBucketInfo
name|omBucketInfo
init|=
name|OmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setCreationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|OMDummyCreateBucketResponse
argument_list|(
name|omBucketInfo
argument_list|)
return|;
block|}
comment|/**    * DummyCreatedBucket Response class used in testing.    */
DECL|class|OMDummyCreateBucketResponse
specifier|public
specifier|static
class|class
name|OMDummyCreateBucketResponse
implements|implements
name|OMClientResponse
block|{
DECL|field|omBucketInfo
specifier|private
specifier|final
name|OmBucketInfo
name|omBucketInfo
decl_stmt|;
DECL|method|OMDummyCreateBucketResponse (OmBucketInfo omBucketInfo)
specifier|public
name|OMDummyCreateBucketResponse
parameter_list|(
name|OmBucketInfo
name|omBucketInfo
parameter_list|)
block|{
name|this
operator|.
name|omBucketInfo
operator|=
name|omBucketInfo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addToDBBatch (OMMetadataManager omMetadataManager, BatchOperation batchOperation)
specifier|public
name|void
name|addToDBBatch
parameter_list|(
name|OMMetadataManager
name|omMetadataManager
parameter_list|,
name|BatchOperation
name|batchOperation
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dbBucketKey
init|=
name|omMetadataManager
operator|.
name|getBucketKey
argument_list|(
name|omBucketInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|omBucketInfo
operator|.
name|getBucketName
argument_list|()
argument_list|)
decl_stmt|;
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|putWithBatch
argument_list|(
name|batchOperation
argument_list|,
name|dbBucketKey
argument_list|,
name|omBucketInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

