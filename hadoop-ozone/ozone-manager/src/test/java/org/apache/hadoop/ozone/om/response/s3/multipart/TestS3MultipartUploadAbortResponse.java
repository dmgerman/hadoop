begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.response.s3.multipart
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|s3
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|PartKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_comment
comment|/**  * Test multipart upload abort response.  */
end_comment

begin_class
DECL|class|TestS3MultipartUploadAbortResponse
specifier|public
class|class
name|TestS3MultipartUploadAbortResponse
extends|extends
name|TestS3MultipartResponse
block|{
annotation|@
name|Test
DECL|method|testAddDBToBatch ()
specifier|public
name|void
name|testAddDBToBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|multipartUploadID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|multipartKey
init|=
name|omMetadataManager
operator|.
name|getMultipartKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|multipartUploadID
argument_list|)
decl_stmt|;
name|S3InitiateMultipartUploadResponse
name|s3InitiateMultipartUploadResponse
init|=
name|createS3InitiateMPUResponse
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|multipartUploadID
argument_list|)
decl_stmt|;
name|s3InitiateMultipartUploadResponse
operator|.
name|addToDBBatch
argument_list|(
name|omMetadataManager
argument_list|,
name|batchOperation
argument_list|)
expr_stmt|;
name|S3MultipartUploadAbortResponse
name|s3MultipartUploadAbortResponse
init|=
name|createS3AbortMPUResponse
argument_list|(
name|multipartKey
argument_list|,
name|Time
operator|.
name|now
argument_list|()
argument_list|,
name|s3InitiateMultipartUploadResponse
operator|.
name|getOmMultipartKeyInfo
argument_list|()
argument_list|)
decl_stmt|;
name|s3MultipartUploadAbortResponse
operator|.
name|addToDBBatch
argument_list|(
name|omMetadataManager
argument_list|,
name|batchOperation
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|commitBatchOperation
argument_list|(
name|batchOperation
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getMultipartInfoTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// As no parts are created, so no entries should be there in delete table.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetadataManager
operator|.
name|countRowsInTable
argument_list|(
name|omMetadataManager
operator|.
name|getDeletedTable
argument_list|()
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddDBToBatchWithParts ()
specifier|public
name|void
name|testAddDBToBatchWithParts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|volumeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|multipartUploadID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|multipartKey
init|=
name|omMetadataManager
operator|.
name|getMultipartKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|multipartUploadID
argument_list|)
decl_stmt|;
name|S3InitiateMultipartUploadResponse
name|s3InitiateMultipartUploadResponse
init|=
name|createS3InitiateMPUResponse
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|multipartUploadID
argument_list|)
decl_stmt|;
name|s3InitiateMultipartUploadResponse
operator|.
name|addToDBBatch
argument_list|(
name|omMetadataManager
argument_list|,
name|batchOperation
argument_list|)
expr_stmt|;
comment|// Add some dummy parts for testing.
comment|// Not added any key locations, as this just test is to see entries are
comment|// adding to delete table or not.
name|OmMultipartKeyInfo
name|omMultipartKeyInfo
init|=
name|s3InitiateMultipartUploadResponse
operator|.
name|getOmMultipartKeyInfo
argument_list|()
decl_stmt|;
name|PartKeyInfo
name|part1
init|=
name|createPartKeyInfo
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|PartKeyInfo
name|part2
init|=
name|createPartKeyInfo
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|addPart
argument_list|(
literal|1
argument_list|,
name|part1
argument_list|,
name|omMultipartKeyInfo
argument_list|)
expr_stmt|;
name|addPart
argument_list|(
literal|2
argument_list|,
name|part2
argument_list|,
name|omMultipartKeyInfo
argument_list|)
expr_stmt|;
name|long
name|timeStamp
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|S3MultipartUploadAbortResponse
name|s3MultipartUploadAbortResponse
init|=
name|createS3AbortMPUResponse
argument_list|(
name|multipartKey
argument_list|,
name|timeStamp
argument_list|,
name|s3InitiateMultipartUploadResponse
operator|.
name|getOmMultipartKeyInfo
argument_list|()
argument_list|)
decl_stmt|;
name|s3MultipartUploadAbortResponse
operator|.
name|addToDBBatch
argument_list|(
name|omMetadataManager
argument_list|,
name|batchOperation
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|commitBatchOperation
argument_list|(
name|batchOperation
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|omMetadataManager
operator|.
name|getMultipartInfoTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// As 2 parts are created, so 2 entries should be there in delete table.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|omMetadataManager
operator|.
name|countRowsInTable
argument_list|(
name|omMetadataManager
operator|.
name|getDeletedTable
argument_list|()
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|String
name|part1DeletedKeyName
init|=
name|OmUtils
operator|.
name|getDeletedKeyName
argument_list|(
name|omMultipartKeyInfo
operator|.
name|getPartKeyInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|getPartName
argument_list|()
argument_list|,
name|timeStamp
argument_list|)
decl_stmt|;
name|String
name|part2DeletedKeyName
init|=
name|OmUtils
operator|.
name|getDeletedKeyName
argument_list|(
name|omMultipartKeyInfo
operator|.
name|getPartKeyInfo
argument_list|(
literal|2
argument_list|)
operator|.
name|getPartName
argument_list|()
argument_list|,
name|timeStamp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|omMetadataManager
operator|.
name|getDeletedTable
argument_list|()
operator|.
name|get
argument_list|(
name|part1DeletedKeyName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|omMetadataManager
operator|.
name|getDeletedTable
argument_list|()
operator|.
name|get
argument_list|(
name|part2DeletedKeyName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|part1
operator|.
name|getPartKeyInfo
argument_list|()
argument_list|)
argument_list|,
name|omMetadataManager
operator|.
name|getDeletedTable
argument_list|()
operator|.
name|get
argument_list|(
name|part1DeletedKeyName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|part2
operator|.
name|getPartKeyInfo
argument_list|()
argument_list|)
argument_list|,
name|omMetadataManager
operator|.
name|getDeletedTable
argument_list|()
operator|.
name|get
argument_list|(
name|part2DeletedKeyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

