begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|MockNodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ExcludeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocol
operator|.
name|ScmBlockLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|SCMConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|server
operator|.
name|StorageContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmPrefixInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OpenKeySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OzoneFSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OzoneFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObjInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_KEY_PREALLOCATION_BLOCKS_MAX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_BLOCK_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_BLOCK_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|ALL
import|;
end_import

begin_comment
comment|/**  * Test class for @{@link KeyManagerImpl}.  */
end_comment

begin_class
DECL|class|TestKeyManagerImpl
specifier|public
class|class
name|TestKeyManagerImpl
block|{
DECL|field|prefixManager
specifier|private
specifier|static
name|PrefixManager
name|prefixManager
decl_stmt|;
DECL|field|keyManager
specifier|private
specifier|static
name|KeyManagerImpl
name|keyManager
decl_stmt|;
DECL|field|volumeManager
specifier|private
specifier|static
name|VolumeManagerImpl
name|volumeManager
decl_stmt|;
DECL|field|bucketManager
specifier|private
specifier|static
name|BucketManagerImpl
name|bucketManager
decl_stmt|;
DECL|field|scm
specifier|private
specifier|static
name|StorageContainerManager
name|scm
decl_stmt|;
DECL|field|mockScmBlockLocationProtocol
specifier|private
specifier|static
name|ScmBlockLocationProtocol
name|mockScmBlockLocationProtocol
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|metadataManager
specifier|private
specifier|static
name|OMMetadataManager
name|metadataManager
decl_stmt|;
DECL|field|dir
specifier|private
specifier|static
name|File
name|dir
decl_stmt|;
DECL|field|scmBlockSize
specifier|private
specifier|static
name|long
name|scmBlockSize
decl_stmt|;
DECL|field|KEY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|KEY_NAME
init|=
literal|"key1"
decl_stmt|;
DECL|field|BUCKET_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BUCKET_NAME
init|=
literal|"bucket1"
decl_stmt|;
DECL|field|VOLUME_NAME
specifier|private
specifier|static
specifier|final
name|String
name|VOLUME_NAME
init|=
literal|"vol1"
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|dir
operator|=
name|GenericTestUtils
operator|.
name|getRandomizedTestDir
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mockScmBlockLocationProtocol
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ScmBlockLocationProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|metadataManager
operator|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|volumeManager
operator|=
operator|new
name|VolumeManagerImpl
argument_list|(
name|metadataManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|bucketManager
operator|=
operator|new
name|BucketManagerImpl
argument_list|(
name|metadataManager
argument_list|)
expr_stmt|;
name|NodeManager
name|nodeManager
init|=
operator|new
name|MockNodeManager
argument_list|(
literal|true
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SCMConfigurator
name|configurator
init|=
operator|new
name|SCMConfigurator
argument_list|()
decl_stmt|;
name|configurator
operator|.
name|setScmNodeManager
argument_list|(
name|nodeManager
argument_list|)
expr_stmt|;
name|scm
operator|=
name|TestUtils
operator|.
name|getScm
argument_list|(
name|conf
argument_list|,
name|configurator
argument_list|)
expr_stmt|;
name|scm
operator|.
name|start
argument_list|()
expr_stmt|;
name|scm
operator|.
name|exitSafeMode
argument_list|()
expr_stmt|;
name|scmBlockSize
operator|=
operator|(
name|long
operator|)
name|conf
operator|.
name|getStorageSize
argument_list|(
name|OZONE_SCM_BLOCK_SIZE
argument_list|,
name|OZONE_SCM_BLOCK_SIZE_DEFAULT
argument_list|,
name|StorageUnit
operator|.
name|BYTES
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|OZONE_KEY_PREALLOCATION_BLOCKS_MAX
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|keyManager
operator|=
operator|new
name|KeyManagerImpl
argument_list|(
name|scm
operator|.
name|getBlockProtocolServer
argument_list|()
argument_list|,
name|metadataManager
argument_list|,
name|conf
argument_list|,
literal|"om1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|prefixManager
operator|=
operator|new
name|PrefixManagerImpl
argument_list|(
name|metadataManager
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockScmBlockLocationProtocol
operator|.
name|allocateBlock
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ReplicationType
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ReplicationFactor
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ExcludeList
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SCMException
argument_list|(
literal|"SafeModePrecheck failed for allocateBlock"
argument_list|,
name|ResultCodes
operator|.
name|SAFE_MODE_EXCEPTION
argument_list|)
argument_list|)
expr_stmt|;
name|createVolume
argument_list|(
name|VOLUME_NAME
argument_list|)
expr_stmt|;
name|createBucket
argument_list|(
name|VOLUME_NAME
argument_list|,
name|BUCKET_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|scm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|scm
operator|.
name|join
argument_list|()
expr_stmt|;
name|metadataManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|keyManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanupTest ()
specifier|public
name|void
name|cleanupTest
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OzoneFileStatus
argument_list|>
name|fileStatuses
init|=
name|keyManager
operator|.
name|listStatus
argument_list|(
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
for|for
control|(
name|OzoneFileStatus
name|fileStatus
range|:
name|fileStatuses
control|)
block|{
if|if
condition|(
name|fileStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|keyManager
operator|.
name|deleteKey
argument_list|(
name|createKeyArgs
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keyManager
operator|.
name|deleteKey
argument_list|(
name|createKeyArgs
argument_list|(
name|OzoneFSUtils
operator|.
name|addTrailingSlashIfNeeded
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createBucket (String volumeName, String bucketName)
specifier|private
specifier|static
name|void
name|createBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|OmBucketInfo
name|bucketInfo
init|=
name|OmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|createVolume (String volumeName)
specifier|private
specifier|static
name|void
name|createVolume
parameter_list|(
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|OmVolumeArgs
name|volumeArgs
init|=
name|OmVolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setAdminName
argument_list|(
literal|"bilbo"
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"bilbo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|volumeManager
operator|.
name|createVolume
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allocateBlockFailureInSafeMode ()
specifier|public
name|void
name|allocateBlockFailureInSafeMode
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyManager
name|keyManager1
init|=
operator|new
name|KeyManagerImpl
argument_list|(
name|mockScmBlockLocationProtocol
argument_list|,
name|metadataManager
argument_list|,
name|conf
argument_list|,
literal|"om1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OmKeyArgs
name|keyArgs
init|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|KEY_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OpenKeySession
name|keySession
init|=
name|keyManager1
operator|.
name|openKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OMException
operator|.
name|class
argument_list|,
literal|"SafeModePrecheck failed for allocateBlock"
argument_list|,
parameter_list|()
lambda|->
block|{
name|keyManager1
operator|.
name|allocateBlock
argument_list|(
name|keyArgs
argument_list|,
name|keySession
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|ExcludeList
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|openKeyFailureInSafeMode ()
specifier|public
name|void
name|openKeyFailureInSafeMode
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|KeyManager
name|keyManager1
init|=
operator|new
name|KeyManagerImpl
argument_list|(
name|mockScmBlockLocationProtocol
argument_list|,
name|metadataManager
argument_list|,
name|conf
argument_list|,
literal|"om1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OmKeyArgs
name|keyArgs
init|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|KEY_NAME
argument_list|)
operator|.
name|setDataSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|setAcls
argument_list|(
name|OzoneUtils
operator|.
name|getAclList
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroups
argument_list|()
argument_list|,
name|ALL
argument_list|,
name|ALL
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OMException
operator|.
name|class
argument_list|,
literal|"SafeModePrecheck failed for allocateBlock"
argument_list|,
parameter_list|()
lambda|->
block|{
name|keyManager1
operator|.
name|openKey
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|openKeyWithMultipleBlocks ()
specifier|public
name|void
name|openKeyWithMultipleBlocks
parameter_list|()
throws|throws
name|IOException
block|{
name|OmKeyArgs
name|keyArgs
init|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|scmBlockSize
operator|*
literal|10
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OpenKeySession
name|keySession
init|=
name|keyManager
operator|.
name|openKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|OmKeyInfo
name|keyInfo
init|=
name|keySession
operator|.
name|getKeyInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|keyInfo
operator|.
name|getLatestVersionLocations
argument_list|()
operator|.
name|getLocationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDirectory ()
specifier|public
name|void
name|testCreateDirectory
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create directory where the parent directory does not exist
name|String
name|keyName
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OmKeyArgs
name|keyArgs
init|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|keyName
operator|+=
literal|"/"
operator|+
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|keyManager
operator|.
name|createDirectory
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
decl_stmt|;
while|while
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
comment|// verify parent directories are created
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyManager
operator|.
name|getFileStatus
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
comment|// make sure create directory fails where parent is a file
name|keyName
operator|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|keyArgs
operator|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|OpenKeySession
name|keySession
init|=
name|keyManager
operator|.
name|openKey
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setLocationInfoList
argument_list|(
name|keySession
operator|.
name|getKeyInfo
argument_list|()
operator|.
name|getLatestVersionLocations
argument_list|()
operator|.
name|getLocationList
argument_list|()
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|commitKey
argument_list|(
name|keyArgs
argument_list|,
name|keySession
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|keyName
operator|+=
literal|"/"
operator|+
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|keyManager
operator|.
name|createDirectory
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Creation should fail for directory."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|e
operator|.
name|getResult
argument_list|()
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FILE_ALREADY_EXISTS
argument_list|)
expr_stmt|;
block|}
comment|// create directory for root directory
name|keyName
operator|=
literal|""
expr_stmt|;
name|keyArgs
operator|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|keyManager
operator|.
name|createDirectory
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyManager
operator|.
name|getFileStatus
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// create directory where parent is root
name|keyName
operator|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|keyArgs
operator|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|keyManager
operator|.
name|createDirectory
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyManager
operator|.
name|getFileStatus
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenFile ()
specifier|public
name|void
name|testOpenFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create key
name|String
name|keyName
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OmKeyArgs
name|keyArgs
init|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OpenKeySession
name|keySession
init|=
name|keyManager
operator|.
name|createFile
argument_list|(
name|keyArgs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setLocationInfoList
argument_list|(
name|keySession
operator|.
name|getKeyInfo
argument_list|()
operator|.
name|getLatestVersionLocations
argument_list|()
operator|.
name|getLocationList
argument_list|()
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|commitKey
argument_list|(
name|keyArgs
argument_list|,
name|keySession
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// try to open created key with overWrite flag set to false
try|try
block|{
name|keyManager
operator|.
name|createFile
argument_list|(
name|keyArgs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Open key should fail for non overwrite create"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|!=
name|OMException
operator|.
name|ResultCodes
operator|.
name|FILE_ALREADY_EXISTS
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
comment|// create file should pass with overwrite flag set to true
name|keyManager
operator|.
name|createFile
argument_list|(
name|keyArgs
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// try to create a file where parent directories do not exist and
comment|// recursive flag is set to false
name|keyName
operator|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|keyName
operator|+=
literal|"/"
operator|+
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|keyArgs
operator|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|keyManager
operator|.
name|createFile
argument_list|(
name|keyArgs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Open file should fail for non recursive write"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|!=
name|OMException
operator|.
name|ResultCodes
operator|.
name|DIRECTORY_NOT_FOUND
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
comment|// file create should pass when recursive flag is set to true
name|keySession
operator|=
name|keyManager
operator|.
name|createFile
argument_list|(
name|keyArgs
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|keyArgs
operator|.
name|setLocationInfoList
argument_list|(
name|keySession
operator|.
name|getKeyInfo
argument_list|()
operator|.
name|getLatestVersionLocations
argument_list|()
operator|.
name|getLocationList
argument_list|()
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|commitKey
argument_list|(
name|keyArgs
argument_list|,
name|keySession
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyManager
operator|.
name|getFileStatus
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// try creating a file over a directory
name|keyArgs
operator|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|keyManager
operator|.
name|createFile
argument_list|(
name|keyArgs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Open file should fail for non recursive write"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|!=
name|OMException
operator|.
name|ResultCodes
operator|.
name|NOT_A_FILE
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPrefixAclOps ()
specifier|public
name|void
name|testPrefixAclOps
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|volumeName
init|=
literal|"vol1"
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket1"
decl_stmt|;
name|String
name|prefix1
init|=
literal|"pf1/"
decl_stmt|;
name|OzoneObj
name|ozPrefix1
init|=
operator|new
name|OzoneObjInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setPrefixName
argument_list|(
name|prefix1
argument_list|)
operator|.
name|setResType
argument_list|(
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|PREFIX
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|OzoneObj
operator|.
name|StoreType
operator|.
name|OZONE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OzoneAcl
name|ozAcl1
init|=
operator|new
name|OzoneAcl
argument_list|(
name|ACLIdentityType
operator|.
name|USER
argument_list|,
literal|"user1"
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|)
decl_stmt|;
name|prefixManager
operator|.
name|addAcl
argument_list|(
name|ozPrefix1
argument_list|,
name|ozAcl1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|ozAclGet
init|=
name|prefixManager
operator|.
name|getAcl
argument_list|(
name|ozPrefix1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ozAclGet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ozAcl1
argument_list|,
name|ozAclGet
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|OzoneAcl
name|ozAcl2
init|=
operator|new
name|OzoneAcl
argument_list|(
name|ACLIdentityType
operator|.
name|USER
argument_list|,
literal|"admin"
argument_list|,
name|ACLType
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|BitSet
name|rwRights
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|rwRights
operator|.
name|set
argument_list|(
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|WRITE
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|rwRights
operator|.
name|set
argument_list|(
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|READ
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneAcl
name|ozAcl3
init|=
operator|new
name|OzoneAcl
argument_list|(
name|ACLIdentityType
operator|.
name|GROUP
argument_list|,
literal|"dev"
argument_list|,
name|rwRights
argument_list|)
decl_stmt|;
name|BitSet
name|wRights
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|wRights
operator|.
name|set
argument_list|(
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|WRITE
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneAcl
name|ozAcl4
init|=
operator|new
name|OzoneAcl
argument_list|(
name|ACLIdentityType
operator|.
name|GROUP
argument_list|,
literal|"dev"
argument_list|,
name|wRights
argument_list|)
decl_stmt|;
name|BitSet
name|rRights
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|rRights
operator|.
name|set
argument_list|(
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|READ
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneAcl
name|ozAcl5
init|=
operator|new
name|OzoneAcl
argument_list|(
name|ACLIdentityType
operator|.
name|GROUP
argument_list|,
literal|"dev"
argument_list|,
name|rRights
argument_list|)
decl_stmt|;
name|acls
operator|.
name|add
argument_list|(
name|ozAcl2
argument_list|)
expr_stmt|;
name|acls
operator|.
name|add
argument_list|(
name|ozAcl3
argument_list|)
expr_stmt|;
name|prefixManager
operator|.
name|setAcl
argument_list|(
name|ozPrefix1
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|ozAclGet
operator|=
name|prefixManager
operator|.
name|getAcl
argument_list|(
name|ozPrefix1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ozAclGet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|matchEntries
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OzoneAcl
name|acl
range|:
name|ozAclGet
control|)
block|{
if|if
condition|(
name|acl
operator|.
name|getType
argument_list|()
operator|==
name|ACLIdentityType
operator|.
name|GROUP
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ozAcl3
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|matchEntries
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|acl
operator|.
name|getType
argument_list|()
operator|==
name|ACLIdentityType
operator|.
name|USER
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ozAcl2
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|matchEntries
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|matchEntries
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|prefixManager
operator|.
name|removeAcl
argument_list|(
name|ozPrefix1
argument_list|,
name|ozAcl4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|ozAclGet
operator|=
name|prefixManager
operator|.
name|getAcl
argument_list|(
name|ozPrefix1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ozAclGet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|prefixManager
operator|.
name|removeAcl
argument_list|(
name|ozPrefix1
argument_list|,
name|ozAcl3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|ozAclGet
operator|=
name|prefixManager
operator|.
name|getAcl
argument_list|(
name|ozPrefix1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ozAclGet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ozAcl2
argument_list|,
name|ozAclGet
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// add dev:w
name|prefixManager
operator|.
name|addAcl
argument_list|(
name|ozPrefix1
argument_list|,
name|ozAcl4
argument_list|)
expr_stmt|;
name|ozAclGet
operator|=
name|prefixManager
operator|.
name|getAcl
argument_list|(
name|ozPrefix1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ozAclGet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add dev:r and validate the acl bitset combined
name|prefixManager
operator|.
name|addAcl
argument_list|(
name|ozPrefix1
argument_list|,
name|ozAcl5
argument_list|)
expr_stmt|;
name|ozAclGet
operator|=
name|prefixManager
operator|.
name|getAcl
argument_list|(
name|ozPrefix1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ozAclGet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|matchEntries
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|OzoneAcl
name|acl
range|:
name|ozAclGet
control|)
block|{
if|if
condition|(
name|acl
operator|.
name|getType
argument_list|()
operator|==
name|ACLIdentityType
operator|.
name|GROUP
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ozAcl3
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|matchEntries
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|acl
operator|.
name|getType
argument_list|()
operator|==
name|ACLIdentityType
operator|.
name|USER
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ozAcl2
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|matchEntries
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|matchEntries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidPrefixAcl ()
specifier|public
name|void
name|testInvalidPrefixAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|volumeName
init|=
literal|"vol1"
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket1"
decl_stmt|;
name|String
name|prefix1
init|=
literal|"pf1/"
decl_stmt|;
comment|// Invalid prefix not ending with "/"
name|String
name|invalidPrefix
init|=
literal|"invalid/pf"
decl_stmt|;
name|OzoneAcl
name|ozAcl1
init|=
operator|new
name|OzoneAcl
argument_list|(
name|ACLIdentityType
operator|.
name|USER
argument_list|,
literal|"user1"
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|)
decl_stmt|;
name|OzoneObj
name|ozInvalidPrefix
init|=
operator|new
name|OzoneObjInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setPrefixName
argument_list|(
name|invalidPrefix
argument_list|)
operator|.
name|setResType
argument_list|(
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|PREFIX
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|OzoneObj
operator|.
name|StoreType
operator|.
name|OZONE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// add acl with invalid prefix name
name|exception
operator|.
name|expect
argument_list|(
name|OMException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Invalid prefix name"
argument_list|)
expr_stmt|;
name|prefixManager
operator|.
name|addAcl
argument_list|(
name|ozInvalidPrefix
argument_list|,
name|ozAcl1
argument_list|)
expr_stmt|;
name|OzoneObj
name|ozPrefix1
init|=
operator|new
name|OzoneObjInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setPrefixName
argument_list|(
name|prefix1
argument_list|)
operator|.
name|setResType
argument_list|(
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|PREFIX
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|OzoneObj
operator|.
name|StoreType
operator|.
name|OZONE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|ozAclGet
init|=
name|prefixManager
operator|.
name|getAcl
argument_list|(
name|ozPrefix1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ozAclGet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ozAcl1
argument_list|,
name|ozAclGet
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// get acl with invalid prefix name
name|exception
operator|.
name|expect
argument_list|(
name|OMException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Invalid prefix name"
argument_list|)
expr_stmt|;
name|ozAclGet
operator|=
name|prefixManager
operator|.
name|getAcl
argument_list|(
name|ozInvalidPrefix
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ozAcl1
argument_list|)
expr_stmt|;
comment|// set acl with invalid prefix name
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|ozoneAcls
init|=
operator|new
name|ArrayList
argument_list|<
name|OzoneAcl
argument_list|>
argument_list|()
decl_stmt|;
name|ozoneAcls
operator|.
name|add
argument_list|(
name|ozAcl1
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|OMException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Invalid prefix name"
argument_list|)
expr_stmt|;
name|prefixManager
operator|.
name|setAcl
argument_list|(
name|ozInvalidPrefix
argument_list|,
name|ozoneAcls
argument_list|)
expr_stmt|;
comment|// remove acl with invalid prefix name
name|exception
operator|.
name|expect
argument_list|(
name|OMException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"Invalid prefix name"
argument_list|)
expr_stmt|;
name|prefixManager
operator|.
name|removeAcl
argument_list|(
name|ozInvalidPrefix
argument_list|,
name|ozAcl1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongestPrefixPath ()
specifier|public
name|void
name|testLongestPrefixPath
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|volumeName
init|=
literal|"vol1"
decl_stmt|;
name|String
name|bucketName
init|=
literal|"bucket1"
decl_stmt|;
name|String
name|prefix1
init|=
literal|"pf1/pf11/pf111/pf1111/"
decl_stmt|;
name|String
name|file1
init|=
literal|"pf1/pf11/file1"
decl_stmt|;
name|String
name|file2
init|=
literal|"pf1/pf11/pf111/pf1111/file2"
decl_stmt|;
name|OzoneObj
name|ozPrefix1
init|=
operator|new
name|OzoneObjInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setPrefixName
argument_list|(
name|prefix1
argument_list|)
operator|.
name|setResType
argument_list|(
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|PREFIX
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|OzoneObj
operator|.
name|StoreType
operator|.
name|OZONE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OzoneAcl
name|ozAcl1
init|=
operator|new
name|OzoneAcl
argument_list|(
name|ACLIdentityType
operator|.
name|USER
argument_list|,
literal|"user1"
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|)
decl_stmt|;
name|prefixManager
operator|.
name|addAcl
argument_list|(
name|ozPrefix1
argument_list|,
name|ozAcl1
argument_list|)
expr_stmt|;
name|OzoneObj
name|ozFile1
init|=
operator|new
name|OzoneObjInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|file1
argument_list|)
operator|.
name|setResType
argument_list|(
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|KEY
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|OzoneObj
operator|.
name|StoreType
operator|.
name|OZONE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OmPrefixInfo
argument_list|>
name|prefixInfos
init|=
name|prefixManager
operator|.
name|getLongestPrefixPath
argument_list|(
name|ozFile1
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|prefixInfos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OzoneObj
name|ozFile2
init|=
operator|new
name|OzoneObjInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setPrefixName
argument_list|(
name|file2
argument_list|)
operator|.
name|setResType
argument_list|(
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|KEY
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|OzoneObj
operator|.
name|StoreType
operator|.
name|OZONE
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|prefixInfos
operator|=
name|prefixManager
operator|.
name|getLongestPrefixPath
argument_list|(
name|ozFile2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|prefixInfos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only the last node has acl on it
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ozAcl1
argument_list|,
name|prefixInfos
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getAcls
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// All other nodes don't have acl value associate with it
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|prefixInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLookupFile ()
specifier|public
name|void
name|testLookupFile
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|keyName
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OmKeyArgs
name|keyArgs
init|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// lookup for a non-existent file
try|try
block|{
name|keyManager
operator|.
name|lookupFile
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Lookup file should fail for non existent file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|!=
name|OMException
operator|.
name|ResultCodes
operator|.
name|FILE_NOT_FOUND
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
comment|// create a file
name|OpenKeySession
name|keySession
init|=
name|keyManager
operator|.
name|createFile
argument_list|(
name|keyArgs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setLocationInfoList
argument_list|(
name|keySession
operator|.
name|getKeyInfo
argument_list|()
operator|.
name|getLatestVersionLocations
argument_list|()
operator|.
name|getLocationList
argument_list|()
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|commitKey
argument_list|(
name|keyArgs
argument_list|,
name|keySession
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyManager
operator|.
name|lookupFile
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
comment|// lookup for created file
name|keyArgs
operator|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
literal|""
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|keyManager
operator|.
name|lookupFile
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Lookup file should fail for a directory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|!=
name|OMException
operator|.
name|ResultCodes
operator|.
name|NOT_A_FILE
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
DECL|method|createKeyArgs (String toKeyName)
specifier|private
name|OmKeyArgs
name|createKeyArgs
parameter_list|(
name|String
name|toKeyName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|toKeyName
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testListStatus ()
specifier|public
name|void
name|testListStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|superDir
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|int
name|numDirectories
init|=
literal|5
decl_stmt|;
name|int
name|numFiles
init|=
literal|5
decl_stmt|;
comment|// set of directory descendants of root
name|Set
argument_list|<
name|String
argument_list|>
name|directorySet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// set of file descendants of root
name|Set
argument_list|<
name|String
argument_list|>
name|fileSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|createDepthTwoDirectory
argument_list|(
name|superDir
argument_list|,
name|numDirectories
argument_list|,
name|numFiles
argument_list|,
name|directorySet
argument_list|,
name|fileSet
argument_list|)
expr_stmt|;
comment|// set of all descendants of root
name|Set
argument_list|<
name|String
argument_list|>
name|children
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|directorySet
argument_list|)
decl_stmt|;
name|children
operator|.
name|addAll
argument_list|(
name|fileSet
argument_list|)
expr_stmt|;
comment|// number of entries in the filesystem
name|int
name|numEntries
init|=
name|directorySet
operator|.
name|size
argument_list|()
operator|+
name|fileSet
operator|.
name|size
argument_list|()
decl_stmt|;
name|OmKeyArgs
name|rootDirArgs
init|=
name|createKeyArgs
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OzoneFileStatus
argument_list|>
name|fileStatuses
init|=
name|keyManager
operator|.
name|listStatus
argument_list|(
name|rootDirArgs
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// verify the number of status returned is same as number of entries
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numEntries
argument_list|,
name|fileStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fileStatuses
operator|=
name|keyManager
operator|.
name|listStatus
argument_list|(
name|rootDirArgs
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// the number of immediate children of root is 1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fileStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// if startKey is the first descendant of the root then listStatus should
comment|// return all the entries.
name|String
name|startKey
init|=
name|children
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|fileStatuses
operator|=
name|keyManager
operator|.
name|listStatus
argument_list|(
name|rootDirArgs
argument_list|,
literal|true
argument_list|,
name|startKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|startKey
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numEntries
argument_list|,
name|fileStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|directory
range|:
name|directorySet
control|)
block|{
comment|// verify status list received for each directory with recursive flag set
comment|// to false
name|OmKeyArgs
name|dirArgs
init|=
name|createKeyArgs
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|fileStatuses
operator|=
name|keyManager
operator|.
name|listStatus
argument_list|(
name|dirArgs
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|verifyFileStatus
argument_list|(
name|directory
argument_list|,
name|fileStatuses
argument_list|,
name|directorySet
argument_list|,
name|fileSet
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// verify status list received for each directory with recursive flag set
comment|// to true
name|fileStatuses
operator|=
name|keyManager
operator|.
name|listStatus
argument_list|(
name|dirArgs
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|verifyFileStatus
argument_list|(
name|directory
argument_list|,
name|fileStatuses
argument_list|,
name|directorySet
argument_list|,
name|fileSet
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// verify list status call with using the startKey parameter and
comment|// recursive flag set to false. After every call to listStatus use the
comment|// latest received file status as the startKey until no more entries are
comment|// left to list.
name|List
argument_list|<
name|OzoneFileStatus
argument_list|>
name|tempFileStatus
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|OzoneFileStatus
argument_list|>
name|tmpStatusSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
do|do
block|{
name|tempFileStatus
operator|=
name|keyManager
operator|.
name|listStatus
argument_list|(
name|dirArgs
argument_list|,
literal|false
argument_list|,
name|tempFileStatus
operator|!=
literal|null
condition|?
name|OzoneFSUtils
operator|.
name|pathToKey
argument_list|(
name|tempFileStatus
operator|.
name|get
argument_list|(
name|tempFileStatus
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tmpStatusSet
operator|.
name|addAll
argument_list|(
name|tempFileStatus
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|tempFileStatus
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
do|;
name|verifyFileStatus
argument_list|(
name|directory
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tmpStatusSet
argument_list|)
argument_list|,
name|directorySet
argument_list|,
name|fileSet
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// verify list status call with using the startKey parameter and
comment|// recursive flag set to true. After every call to listStatus use the
comment|// latest received file status as the startKey until no more entries are
comment|// left to list.
name|tempFileStatus
operator|=
literal|null
expr_stmt|;
name|tmpStatusSet
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
do|do
block|{
name|tempFileStatus
operator|=
name|keyManager
operator|.
name|listStatus
argument_list|(
name|dirArgs
argument_list|,
literal|true
argument_list|,
name|tempFileStatus
operator|!=
literal|null
condition|?
name|OzoneFSUtils
operator|.
name|pathToKey
argument_list|(
name|tempFileStatus
operator|.
name|get
argument_list|(
name|tempFileStatus
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tmpStatusSet
operator|.
name|addAll
argument_list|(
name|tempFileStatus
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|tempFileStatus
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
do|;
name|verifyFileStatus
argument_list|(
name|directory
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tmpStatusSet
argument_list|)
argument_list|,
name|directorySet
argument_list|,
name|fileSet
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a depth two directory.    *    * @param superDir       Super directory to create    * @param numDirectories number of directory children    * @param numFiles       number of file children    * @param directorySet   set of descendant directories for the super directory    * @param fileSet        set of descendant files for the super directory    */
DECL|method|createDepthTwoDirectory (String superDir, int numDirectories, int numFiles, Set<String> directorySet, Set<String> fileSet)
specifier|private
name|void
name|createDepthTwoDirectory
parameter_list|(
name|String
name|superDir
parameter_list|,
name|int
name|numDirectories
parameter_list|,
name|int
name|numFiles
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|directorySet
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fileSet
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create super directory
name|OmKeyArgs
name|superDirArgs
init|=
name|createKeyArgs
argument_list|(
name|superDir
argument_list|)
decl_stmt|;
name|keyManager
operator|.
name|createDirectory
argument_list|(
name|superDirArgs
argument_list|)
expr_stmt|;
name|directorySet
operator|.
name|add
argument_list|(
name|superDir
argument_list|)
expr_stmt|;
comment|// add directory children to super directory
name|Set
argument_list|<
name|String
argument_list|>
name|childDirectories
init|=
name|createDirectories
argument_list|(
name|superDir
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|numDirectories
argument_list|)
decl_stmt|;
name|directorySet
operator|.
name|addAll
argument_list|(
name|childDirectories
argument_list|)
expr_stmt|;
comment|// add file to super directory
name|fileSet
operator|.
name|addAll
argument_list|(
name|createFiles
argument_list|(
name|superDir
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|numFiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// for each child directory create files and directories
for|for
control|(
name|String
name|child
range|:
name|childDirectories
control|)
block|{
name|fileSet
operator|.
name|addAll
argument_list|(
name|createFiles
argument_list|(
name|child
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|numFiles
argument_list|)
argument_list|)
expr_stmt|;
name|directorySet
operator|.
name|addAll
argument_list|(
name|createDirectories
argument_list|(
name|child
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|numDirectories
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyFileStatus (String directory, List<OzoneFileStatus> fileStatuses, Set<String> directorySet, Set<String> fileSet, boolean recursive)
specifier|private
name|void
name|verifyFileStatus
parameter_list|(
name|String
name|directory
parameter_list|,
name|List
argument_list|<
name|OzoneFileStatus
argument_list|>
name|fileStatuses
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|directorySet
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fileSet
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
for|for
control|(
name|OzoneFileStatus
name|fileStatus
range|:
name|fileStatuses
control|)
block|{
name|String
name|keyName
init|=
name|OzoneFSUtils
operator|.
name|pathToKey
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|parent
init|=
name|Paths
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|recursive
condition|)
block|{
comment|// if recursive is false, verify all the statuses have the input
comment|// directory as parent
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parent
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
comment|// verify filestatus is present in directory or file set accordingly
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|directorySet
operator|.
name|contains
argument_list|(
name|keyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fileSet
operator|.
name|contains
argument_list|(
name|keyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// count the number of entries which should be present in the directory
name|int
name|numEntries
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|entrySet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|directorySet
argument_list|)
decl_stmt|;
name|entrySet
operator|.
name|addAll
argument_list|(
name|fileSet
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|entrySet
control|)
block|{
if|if
condition|(
name|OzoneFSUtils
operator|.
name|getParent
argument_list|(
name|entry
argument_list|)
operator|.
name|startsWith
argument_list|(
name|OzoneFSUtils
operator|.
name|addTrailingSlashIfNeeded
argument_list|(
name|directory
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|recursive
condition|)
block|{
name|numEntries
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OzoneFSUtils
operator|.
name|getParent
argument_list|(
name|entry
argument_list|)
operator|.
name|equals
argument_list|(
name|OzoneFSUtils
operator|.
name|addTrailingSlashIfNeeded
argument_list|(
name|directory
argument_list|)
argument_list|)
condition|)
block|{
name|numEntries
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// verify the number of entries match the status list size
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fileStatuses
operator|.
name|size
argument_list|()
argument_list|,
name|numEntries
argument_list|)
expr_stmt|;
block|}
DECL|method|createDirectories (String parent, Map<String, List<String>> directoryMap, int numDirectories)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|createDirectories
parameter_list|(
name|String
name|parent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|directoryMap
parameter_list|,
name|int
name|numDirectories
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keyNames
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirectories
condition|;
name|i
operator|++
control|)
block|{
name|String
name|keyName
init|=
name|parent
operator|+
literal|"/"
operator|+
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OmKeyArgs
name|keyArgs
init|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|keyManager
operator|.
name|createDirectory
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|keyNames
operator|.
name|add
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
block|}
name|directoryMap
operator|.
name|put
argument_list|(
name|parent
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keyNames
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|keyNames
return|;
block|}
DECL|method|createFiles (String parent, Map<String, List<String>> fileMap, int numFiles)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|createFiles
parameter_list|(
name|String
name|parent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|fileMap
parameter_list|,
name|int
name|numFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keyNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|String
name|keyName
init|=
name|parent
operator|+
literal|"/"
operator|+
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|OmKeyArgs
name|keyArgs
init|=
name|createBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OpenKeySession
name|keySession
init|=
name|keyManager
operator|.
name|createFile
argument_list|(
name|keyArgs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|keyArgs
operator|.
name|setLocationInfoList
argument_list|(
name|keySession
operator|.
name|getKeyInfo
argument_list|()
operator|.
name|getLatestVersionLocations
argument_list|()
operator|.
name|getLocationList
argument_list|()
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|commitKey
argument_list|(
name|keyArgs
argument_list|,
name|keySession
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|keyNames
operator|.
name|add
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
block|}
name|fileMap
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|keyNames
argument_list|)
expr_stmt|;
return|return
name|keyNames
return|;
block|}
DECL|method|createBuilder ()
specifier|private
name|OmKeyArgs
operator|.
name|Builder
name|createBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
return|return
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setBucketName
argument_list|(
name|BUCKET_NAME
argument_list|)
operator|.
name|setFactor
argument_list|(
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setDataSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setType
argument_list|(
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|setAcls
argument_list|(
name|OzoneUtils
operator|.
name|getAclList
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|ugi
operator|.
name|getGroups
argument_list|()
argument_list|,
name|ALL
argument_list|,
name|ALL
argument_list|)
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|VOLUME_NAME
argument_list|)
return|;
block|}
block|}
end_class

end_unit

