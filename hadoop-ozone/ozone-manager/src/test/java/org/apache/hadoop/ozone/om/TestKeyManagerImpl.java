begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.ââSee the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.ââThe ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.ââYou may obtain a copy of the License at  *  * ââââ http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocol
operator|.
name|ScmBlockLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|RDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|TableConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|ColumnFamilyOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|DBOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|RocksDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|StatsLevel
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * Test class for @{@link KeyManagerImpl}.  * */
end_comment

begin_class
DECL|class|TestKeyManagerImpl
specifier|public
class|class
name|TestKeyManagerImpl
block|{
DECL|field|keyManager
specifier|private
specifier|static
name|KeyManagerImpl
name|keyManager
decl_stmt|;
DECL|field|scmBlockLocationProtocol
specifier|private
specifier|static
name|ScmBlockLocationProtocol
name|scmBlockLocationProtocol
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|metadataManager
specifier|private
specifier|static
name|OMMetadataManager
name|metadataManager
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|static
name|long
name|blockSize
init|=
literal|1000
decl_stmt|;
DECL|field|KEY_NAME
specifier|private
specifier|static
specifier|final
name|String
name|KEY_NAME
init|=
literal|"key1"
decl_stmt|;
DECL|field|BUCKET_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BUCKET_NAME
init|=
literal|"bucket1"
decl_stmt|;
DECL|field|VOLUME_NAME
specifier|private
specifier|static
specifier|final
name|String
name|VOLUME_NAME
init|=
literal|"vol1"
decl_stmt|;
DECL|field|rdbStore
specifier|private
specifier|static
name|RDBStore
name|rdbStore
init|=
literal|null
decl_stmt|;
DECL|field|rdbTable
specifier|private
specifier|static
name|Table
name|rdbTable
init|=
literal|null
decl_stmt|;
DECL|field|options
specifier|private
specifier|static
name|DBOptions
name|options
init|=
literal|null
decl_stmt|;
DECL|field|keyData
specifier|private
name|KeyInfo
name|keyData
decl_stmt|;
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|OzoneConfiguration
argument_list|()
expr_stmt|;
name|scmBlockLocationProtocol
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ScmBlockLocationProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|metadataManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OMMetadataManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|keyManager
operator|=
operator|new
name|KeyManagerImpl
argument_list|(
name|scmBlockLocationProtocol
argument_list|,
name|metadataManager
argument_list|,
name|conf
argument_list|,
literal|"om1"
argument_list|)
expr_stmt|;
name|setupMocks
argument_list|()
expr_stmt|;
block|}
DECL|method|setupMocks ()
specifier|private
name|void
name|setupMocks
parameter_list|()
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|scmBlockLocationProtocol
operator|.
name|allocateBlock
argument_list|(
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ReplicationType
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ReplicationFactor
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SCMException
argument_list|(
literal|"ChillModePrecheck failed for allocateBlock"
argument_list|,
name|ResultCodes
operator|.
name|CHILL_MODE_EXCEPTION
argument_list|)
argument_list|)
expr_stmt|;
name|setupRocksDb
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rdbTable
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|getBucketTable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rdbTable
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|getOpenKeyTable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rdbTable
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|getLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|OzoneManagerLock
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|VOLUME_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|VOLUME_NAME
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|getBucketKey
argument_list|(
name|VOLUME_NAME
argument_list|,
name|BUCKET_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BUCKET_NAME
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|metadataManager
operator|.
name|getOpenKeyBytes
argument_list|(
name|VOLUME_NAME
argument_list|,
name|BUCKET_NAME
argument_list|,
name|KEY_NAME
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KEY_NAME
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupRocksDb ()
specifier|private
name|void
name|setupRocksDb
parameter_list|()
throws|throws
name|Exception
block|{
name|options
operator|=
operator|new
name|DBOptions
argument_list|()
expr_stmt|;
name|options
operator|.
name|setCreateIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setCreateMissingColumnFamilies
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Statistics
name|statistics
init|=
operator|new
name|Statistics
argument_list|()
decl_stmt|;
name|statistics
operator|.
name|setStatsLevel
argument_list|(
name|StatsLevel
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|options
operator|=
name|options
operator|.
name|setStatistics
argument_list|(
name|statistics
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|TableConfig
argument_list|>
name|configSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|RocksDB
operator|.
name|DEFAULT_COLUMN_FAMILY
argument_list|)
argument_list|,
literal|"testTable"
argument_list|)
control|)
block|{
name|TableConfig
name|newConfig
init|=
operator|new
name|TableConfig
argument_list|(
name|name
argument_list|,
operator|new
name|ColumnFamilyOptions
argument_list|()
argument_list|)
decl_stmt|;
name|configSet
operator|.
name|add
argument_list|(
name|newConfig
argument_list|)
expr_stmt|;
block|}
name|keyData
operator|=
name|KeyInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|KEY_NAME
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|BUCKET_NAME
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|VOLUME_NAME
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|setType
argument_list|(
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|setFactor
argument_list|(
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setCreationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|setModificationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|rdbStore
operator|=
operator|new
name|RDBStore
argument_list|(
name|folder
operator|.
name|newFolder
argument_list|()
argument_list|,
name|options
argument_list|,
name|configSet
argument_list|)
expr_stmt|;
name|rdbTable
operator|=
name|rdbStore
operator|.
name|getTable
argument_list|(
literal|"testTable"
argument_list|)
expr_stmt|;
name|rdbTable
operator|.
name|put
argument_list|(
name|VOLUME_NAME
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|rdbTable
operator|.
name|put
argument_list|(
name|BUCKET_NAME
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|rdbTable
operator|.
name|put
argument_list|(
name|KEY_NAME
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
name|keyData
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|allocateBlockFailureInChillMode ()
specifier|public
name|void
name|allocateBlockFailureInChillMode
parameter_list|()
throws|throws
name|Exception
block|{
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|KEY_NAME
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|BUCKET_NAME
argument_list|)
operator|.
name|setFactor
argument_list|(
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setType
argument_list|(
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|VOLUME_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OMException
operator|.
name|class
argument_list|,
literal|"ChillModePrecheck failed for allocateBlock"
argument_list|,
parameter_list|()
lambda|->
block|{
name|keyManager
operator|.
name|allocateBlock
argument_list|(
name|keyArgs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|openKeyFailureInChillMode ()
specifier|public
name|void
name|openKeyFailureInChillMode
parameter_list|()
throws|throws
name|Exception
block|{
name|OmKeyArgs
name|keyArgs
init|=
operator|new
name|OmKeyArgs
operator|.
name|Builder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|KEY_NAME
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|BUCKET_NAME
argument_list|)
operator|.
name|setFactor
argument_list|(
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setDataSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|setType
argument_list|(
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|VOLUME_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|OMException
operator|.
name|class
argument_list|,
literal|"ChillModePrecheck failed for allocateBlock"
argument_list|,
parameter_list|()
lambda|->
block|{
name|keyManager
operator|.
name|openKey
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

