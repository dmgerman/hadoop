begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Contains test-cases to verify OzoneManagerLock.  */
end_comment

begin_class
DECL|class|TestOzoneManagerLock
specifier|public
class|class
name|TestOzoneManagerLock
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testDifferentUserLock ()
specifier|public
name|void
name|testDifferentUserLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireUserLock
argument_list|(
literal|"userTwo"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseUserLock
argument_list|(
literal|"userTwo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSameUserLock ()
specifier|public
name|void
name|testSameUserLock
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|gotLock
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|acquireUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
name|gotLock
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Let's give some time for the new thread to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Since the new thread is trying to get lock on same user, it will wait.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|gotLock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
comment|// Since we have released the lock, the new thread should have the lock
comment|// now
comment|// Let's give some time for the new thread to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotLock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testDifferentVolumeLock ()
specifier|public
name|void
name|testDifferentVolumeLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireVolumeLock
argument_list|(
literal|"volTwo"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseVolumeLock
argument_list|(
literal|"volTwo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSameVolumeLock ()
specifier|public
name|void
name|testSameVolumeLock
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|gotLock
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|acquireVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|gotLock
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Let's give some time for the new thread to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Since the new thread is trying to get lock on same user, it will wait.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|gotLock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
comment|// Since we have released the lock, the new thread should have the lock
comment|// now
comment|// Let's give some time for the new thread to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotLock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testDifferentBucketLock ()
specifier|public
name|void
name|testDifferentBucketLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketTwo"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketTwo"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSameBucketLock ()
specifier|public
name|void
name|testSameBucketLock
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|gotLock
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|acquireBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
name|gotLock
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Let's give some time for the new thread to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Since the new thread is trying to get lock on same user, it will wait.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|gotLock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
comment|// Since we have released the lock, the new thread should have the lock
comment|// now
comment|// Let's give some time for the new thread to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotLock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testVolumeLockAfterUserLock ()
specifier|public
name|void
name|testVolumeLockAfterUserLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testBucketLockAfterVolumeLock ()
specifier|public
name|void
name|testBucketLockAfterVolumeLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testBucketLockAfterVolumeLockAfterUserLock ()
specifier|public
name|void
name|testBucketLockAfterVolumeLockAfterUserLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserLockAfterVolumeLock ()
specifier|public
name|void
name|testUserLockAfterVolumeLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquireUserLock
argument_list|(
literal|"userOne"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"cannot acquire user lock while holding volume/bucket lock(s)."
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|releaseVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVolumeLockAfterBucketLock ()
specifier|public
name|void
name|testVolumeLockAfterBucketLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquireVolumeLock
argument_list|(
literal|"volOne"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"cannot acquire volume lock while holding bucket lock(s)."
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|releaseBucketLock
argument_list|(
literal|"volOne"
argument_list|,
literal|"bucketOne"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

