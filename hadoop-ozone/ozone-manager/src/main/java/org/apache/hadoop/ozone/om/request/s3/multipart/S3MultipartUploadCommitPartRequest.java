begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.s3.multipart
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|s3
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|OMAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|utils
operator|.
name|OzoneManagerDoubleBufferHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|key
operator|.
name|OMKeyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|s3
operator|.
name|multipart
operator|.
name|S3MultipartUploadCommitPartResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartCommitUploadPartRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartCommitUploadPartResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|KEY_NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|BUCKET_LOCK
import|;
end_import

begin_comment
comment|/**  * Handle Multipart upload commit upload part file.  */
end_comment

begin_class
DECL|class|S3MultipartUploadCommitPartRequest
specifier|public
class|class
name|S3MultipartUploadCommitPartRequest
extends|extends
name|OMKeyRequest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3MultipartUploadCommitPartRequest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|S3MultipartUploadCommitPartRequest (OMRequest omRequest)
specifier|public
name|S3MultipartUploadCommitPartRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|)
block|{
name|super
argument_list|(
name|omRequest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preExecute (OzoneManager ozoneManager)
specifier|public
name|OMRequest
name|preExecute
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|)
block|{
name|MultipartCommitUploadPartRequest
name|multipartCommitUploadPartRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getCommitMultiPartUploadRequest
argument_list|()
decl_stmt|;
return|return
name|getOmRequest
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setCommitMultiPartUploadRequest
argument_list|(
name|multipartCommitUploadPartRequest
operator|.
name|toBuilder
argument_list|()
operator|.
name|setKeyArgs
argument_list|(
name|multipartCommitUploadPartRequest
operator|.
name|getKeyArgs
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setModificationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setUserInfo
argument_list|(
name|getUserInfo
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|validateAndUpdateCache (OzoneManager ozoneManager, long transactionLogIndex, OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper)
specifier|public
name|OMClientResponse
name|validateAndUpdateCache
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|,
name|long
name|transactionLogIndex
parameter_list|,
name|OzoneManagerDoubleBufferHelper
name|ozoneManagerDoubleBufferHelper
parameter_list|)
block|{
name|MultipartCommitUploadPartRequest
name|multipartCommitUploadPartRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getCommitMultiPartUploadRequest
argument_list|()
decl_stmt|;
name|OzoneManagerProtocolProtos
operator|.
name|KeyArgs
name|keyArgs
init|=
name|multipartCommitUploadPartRequest
operator|.
name|getKeyArgs
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|keyArgs
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|keyArgs
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|keyArgs
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|OMMetadataManager
name|omMetadataManager
init|=
name|ozoneManager
operator|.
name|getMetadataManager
argument_list|()
decl_stmt|;
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
operator|.
name|incNumCommitMultipartUploadParts
argument_list|()
expr_stmt|;
name|boolean
name|acquiredLock
init|=
literal|false
decl_stmt|;
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
name|OMResponse
operator|.
name|Builder
name|omResponse
init|=
name|OMResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Type
operator|.
name|CommitMultiPartUpload
argument_list|)
operator|.
name|setStatus
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|setSuccess
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
literal|null
decl_stmt|;
name|OzoneManagerProtocolProtos
operator|.
name|PartKeyInfo
name|oldPartKeyInfo
init|=
literal|null
decl_stmt|;
name|String
name|openKey
init|=
literal|null
decl_stmt|;
name|OmKeyInfo
name|omKeyInfo
init|=
literal|null
decl_stmt|;
name|String
name|multipartKey
init|=
literal|null
decl_stmt|;
name|OmMultipartKeyInfo
name|multipartKeyInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// TODO to support S3 ACL later.
name|acquiredLock
operator|=
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireWriteLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|validateBucketAndVolume
argument_list|(
name|omMetadataManager
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|String
name|uploadID
init|=
name|keyArgs
operator|.
name|getMultipartUploadID
argument_list|()
decl_stmt|;
name|multipartKey
operator|=
name|omMetadataManager
operator|.
name|getMultipartKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|uploadID
argument_list|)
expr_stmt|;
name|multipartKeyInfo
operator|=
name|omMetadataManager
operator|.
name|getMultipartInfoTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
expr_stmt|;
name|long
name|clientID
init|=
name|multipartCommitUploadPartRequest
operator|.
name|getClientID
argument_list|()
decl_stmt|;
name|openKey
operator|=
name|omMetadataManager
operator|.
name|getOpenKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|clientID
argument_list|)
expr_stmt|;
name|omKeyInfo
operator|=
name|omMetadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|openKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|omKeyInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Failed to commit Multipart Upload key, as "
operator|+
name|openKey
operator|+
literal|"entry is not found in the openKey table"
argument_list|,
name|KEY_NOT_FOUND
argument_list|)
throw|;
block|}
comment|// set the data size and location info list
name|omKeyInfo
operator|.
name|setDataSize
argument_list|(
name|keyArgs
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|omKeyInfo
operator|.
name|updateLocationInfoList
argument_list|(
name|keyArgs
operator|.
name|getKeyLocationsList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OmKeyLocationInfo
operator|::
name|getFromProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set Modification time
name|omKeyInfo
operator|.
name|setModificationTime
argument_list|(
name|keyArgs
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
name|partName
operator|=
name|omMetadataManager
operator|.
name|getOzoneKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
operator|+
name|clientID
expr_stmt|;
if|if
condition|(
name|multipartKeyInfo
operator|==
literal|null
condition|)
block|{
comment|// This can occur when user started uploading part by the time commit
comment|// of that part happens, in between the user might have requested
comment|// abort multipart upload. If we just throw exception, then the data
comment|// will not be garbage collected, so move this part to delete table
comment|// and throw error
comment|// Move this part to delete table.
throw|throw
operator|new
name|OMException
argument_list|(
literal|"No such Multipart upload is with specified "
operator|+
literal|"uploadId "
operator|+
name|uploadID
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|NO_SUCH_MULTIPART_UPLOAD_ERROR
argument_list|)
throw|;
block|}
else|else
block|{
name|int
name|partNumber
init|=
name|keyArgs
operator|.
name|getMultipartNumber
argument_list|()
decl_stmt|;
name|oldPartKeyInfo
operator|=
name|multipartKeyInfo
operator|.
name|getPartKeyInfo
argument_list|(
name|partNumber
argument_list|)
expr_stmt|;
comment|// Build this multipart upload part info.
name|OzoneManagerProtocolProtos
operator|.
name|PartKeyInfo
operator|.
name|Builder
name|partKeyInfo
init|=
name|OzoneManagerProtocolProtos
operator|.
name|PartKeyInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|partKeyInfo
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|partKeyInfo
operator|.
name|setPartNumber
argument_list|(
name|partNumber
argument_list|)
expr_stmt|;
name|partKeyInfo
operator|.
name|setPartKeyInfo
argument_list|(
name|omKeyInfo
operator|.
name|getProtobuf
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add this part information in to multipartKeyInfo.
name|multipartKeyInfo
operator|.
name|addPartKeyInfo
argument_list|(
name|partNumber
argument_list|,
name|partKeyInfo
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add to cache.
comment|// Delete from open key table and add it to multipart info table.
comment|// No need to add cache entries to delete table, as no
comment|// read/write requests that info for validation.
name|omMetadataManager
operator|.
name|getMultipartInfoTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|multipartKey
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|multipartKeyInfo
argument_list|)
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|openKey
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|absent
argument_list|()
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|omResponse
operator|.
name|setCommitMultiPartUploadResponse
argument_list|(
name|MultipartCommitUploadPartResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
argument_list|)
expr_stmt|;
name|omClientResponse
operator|=
operator|new
name|S3MultipartUploadCommitPartResponse
argument_list|(
name|multipartKey
argument_list|,
name|openKey
argument_list|,
name|omKeyInfo
argument_list|,
name|multipartKeyInfo
argument_list|,
name|oldPartKeyInfo
argument_list|,
name|omResponse
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
name|omClientResponse
operator|=
operator|new
name|S3MultipartUploadCommitPartResponse
argument_list|(
name|multipartKey
argument_list|,
name|openKey
argument_list|,
name|omKeyInfo
argument_list|,
name|multipartKeyInfo
argument_list|,
name|oldPartKeyInfo
argument_list|,
name|createErrorOMResponse
argument_list|(
name|omResponse
argument_list|,
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|omClientResponse
operator|!=
literal|null
condition|)
block|{
name|omClientResponse
operator|.
name|setFlushFuture
argument_list|(
name|ozoneManagerDoubleBufferHelper
operator|.
name|add
argument_list|(
name|omClientResponse
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acquiredLock
condition|)
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseWriteLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// audit log
name|auditLog
argument_list|(
name|ozoneManager
operator|.
name|getAuditLogger
argument_list|()
argument_list|,
name|buildAuditMessage
argument_list|(
name|OMAction
operator|.
name|COMMIT_MULTIPART_UPLOAD_PARTKEY
argument_list|,
name|buildKeyArgsAuditMap
argument_list|(
name|keyArgs
argument_list|)
argument_list|,
name|exception
argument_list|,
name|getOmRequest
argument_list|()
operator|.
name|getUserInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MultipartUpload Commit is successfully for Key:{} in "
operator|+
literal|"Volume/Bucket {}/{}"
argument_list|,
name|keyName
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MultipartUpload Commit is failed for Key:{} in "
operator|+
literal|"Volume/Bucket {}/{}"
argument_list|,
name|keyName
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
operator|.
name|incNumCommitMultipartUploadPartFails
argument_list|()
expr_stmt|;
block|}
return|return
name|omClientResponse
return|;
block|}
block|}
end_class

end_unit

