begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|KeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|UserInfo
import|;
end_import

begin_comment
comment|/**  * Interface for OM Requests to convert to audit objects.  */
end_comment

begin_interface
DECL|interface|RequestAuditor
specifier|public
interface|interface
name|RequestAuditor
block|{
comment|/**    * Build AuditMessage.    * @param op    * @param auditMap    * @param throwable    * @param userInfo    * @return    */
DECL|method|buildAuditMessage (AuditAction op, Map<String, String> auditMap, Throwable throwable, UserInfo userInfo)
name|AuditMessage
name|buildAuditMessage
parameter_list|(
name|AuditAction
name|op
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
parameter_list|,
name|Throwable
name|throwable
parameter_list|,
name|UserInfo
name|userInfo
parameter_list|)
function_decl|;
comment|/**    * Build auditMap with specified volume.    * @param volume    * @return auditMap.    */
DECL|method|buildVolumeAuditMap (String volume)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildVolumeAuditMap
parameter_list|(
name|String
name|volume
parameter_list|)
function_decl|;
comment|/**    * Build auditMap for KeyArgs.    * @param keyArgs    */
DECL|method|buildKeyArgsAuditMap (KeyArgs keyArgs)
specifier|default
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildKeyArgsAuditMap
parameter_list|(
name|KeyArgs
name|keyArgs
parameter_list|)
block|{
if|if
condition|(
name|keyArgs
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|VOLUME
argument_list|,
name|keyArgs
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|BUCKET
argument_list|,
name|keyArgs
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|KEY
argument_list|,
name|keyArgs
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|DATA_SIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|keyArgs
operator|.
name|getDataSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|REPLICATION_TYPE
argument_list|,
operator|(
name|keyArgs
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|keyArgs
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|REPLICATION_FACTOR
argument_list|,
operator|(
name|keyArgs
operator|.
name|getFactor
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|keyArgs
operator|.
name|getFactor
argument_list|()
operator|.
name|name
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|KEY_LOCATION_INFO
argument_list|,
operator|(
name|keyArgs
operator|.
name|getKeyLocationsList
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|keyArgs
operator|.
name|getKeyLocationsList
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
name|auditMap
return|;
block|}
block|}
block|}
end_interface

end_unit

