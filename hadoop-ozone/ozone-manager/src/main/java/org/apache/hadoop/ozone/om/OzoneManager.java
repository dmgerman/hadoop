begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|SCMSecurityProtocolProtos
operator|.
name|SCMGetCertResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocolPB
operator|.
name|SCMSecurityProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ExcludeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocol
operator|.
name|ScmBlockLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocol
operator|.
name|StorageContainerLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|ScmBlockLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|ScmBlockLocationProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolClientSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocolPB
operator|.
name|StorageContainerLocationProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|SecurityConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|CertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|client
operator|.
name|OMCertificateClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificate
operator|.
name|utils
operator|.
name|CertificateCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
operator|.
name|utils
operator|.
name|CertificateSignRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServiceRuntimeInfoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
operator|.
name|TracingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ha
operator|.
name|OMFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|S3SecretValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocol
operator|.
name|OzoneManagerServerProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|OMRatisSnapshotInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|snapshot
operator|.
name|OzoneManagerSnapshotProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|DBUpdatesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|KeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|ProtocolMessageMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditEventStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditLoggerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|Auditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|OMAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Storage
operator|.
name|StorageState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartCommitUploadPartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadCompleteInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadListParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OpenKeySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OzoneFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocolPB
operator|.
name|OzoneManagerProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|OzoneManagerRatisClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|OzoneManagerRatisServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ServicePort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|OzoneManagerProtocolServerSideTranslatorPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneAccessAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneNativeAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
operator|.
name|StoreType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObjInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneBlockTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|util
operator|.
name|OzoneVersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JvmPauseMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|KMSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|RetriableTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|DBUpdatesWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|SequenceNumberNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|DBCheckpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|DBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|protocol
operator|.
name|TermIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|LifeCycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS10CertificationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_BLOCK_TOKEN_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
operator|.
name|HDDS_BLOCK_TOKEN_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
operator|.
name|getScmAddressForBlockClients
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
operator|.
name|getScmAddressForClients
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeState
operator|.
name|HEALTHY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|security
operator|.
name|x509
operator|.
name|certificates
operator|.
name|utils
operator|.
name|CertificateSignRequest
operator|.
name|getEncodedString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
operator|.
name|updateRPCListenAddress
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
operator|.
name|retryUpToMaximumCountWithFixedSleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ACL_AUTHORIZER_CLASS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ACL_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ACL_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ADMINISTRATORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_KEY_PREALLOCATION_BLOCKS_MAX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_KEY_PREALLOCATION_BLOCKS_MAX_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_BLOCK_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_BLOCK_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OM_METRICS_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OM_METRICS_TEMP_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|RPC_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_HANDLER_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_HANDLER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_KERBEROS_KEYTAB_FILE_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_KERBEROS_PRINCIPAL_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_METRICS_SAVE_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_METRICS_SAVE_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_NODE_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_SERVICE_IDS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_PORT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_USER_MAX_VOLUME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_USER_MAX_VOLUME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|INVALID_AUTH_METHOD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|INVALID_REQUEST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|KEY_NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_ADMINISTRATORS_WILDCARD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|TOKEN_ERROR_OTHER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|S3_BUCKET_LOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|VOLUME_LOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneManagerService
operator|.
name|newReflectiveBlockingService
import|;
end_import

begin_comment
comment|/**  * Ozone Manager is the metadata manager of ozone.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"CBLOCK"
block|,
literal|"OZONE"
block|,
literal|"HBASE"
block|}
argument_list|)
DECL|class|OzoneManager
specifier|public
specifier|final
class|class
name|OzoneManager
extends|extends
name|ServiceRuntimeInfoImpl
implements|implements
name|OzoneManagerServerProtocol
implements|,
name|OMMXBean
implements|,
name|Auditor
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AUDIT
specifier|private
specifier|static
specifier|final
name|AuditLogger
name|AUDIT
init|=
operator|new
name|AuditLogger
argument_list|(
name|AuditLoggerType
operator|.
name|OMLOGGER
argument_list|)
decl_stmt|;
DECL|field|OM_DAEMON
specifier|private
specifier|static
specifier|final
name|String
name|OM_DAEMON
init|=
literal|"om"
decl_stmt|;
DECL|field|securityEnabled
specifier|private
specifier|static
name|boolean
name|securityEnabled
init|=
literal|false
decl_stmt|;
DECL|field|delegationTokenMgr
specifier|private
name|OzoneDelegationTokenSecretManager
name|delegationTokenMgr
decl_stmt|;
DECL|field|blockTokenMgr
specifier|private
name|OzoneBlockTokenSecretManager
name|blockTokenMgr
decl_stmt|;
DECL|field|certClient
specifier|private
name|CertificateClient
name|certClient
decl_stmt|;
DECL|field|testSecureOmFlag
specifier|private
specifier|static
name|boolean
name|testSecureOmFlag
init|=
literal|false
decl_stmt|;
DECL|field|omRpcAddressTxt
specifier|private
specifier|final
name|Text
name|omRpcAddressTxt
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|OzoneConfiguration
name|configuration
decl_stmt|;
DECL|field|omRpcServer
specifier|private
name|RPC
operator|.
name|Server
name|omRpcServer
decl_stmt|;
DECL|field|omRpcAddress
specifier|private
name|InetSocketAddress
name|omRpcAddress
decl_stmt|;
DECL|field|omId
specifier|private
name|String
name|omId
decl_stmt|;
DECL|field|metadataManager
specifier|private
name|OMMetadataManager
name|metadataManager
decl_stmt|;
DECL|field|volumeManager
specifier|private
name|VolumeManager
name|volumeManager
decl_stmt|;
DECL|field|bucketManager
specifier|private
name|BucketManager
name|bucketManager
decl_stmt|;
DECL|field|keyManager
specifier|private
name|KeyManager
name|keyManager
decl_stmt|;
DECL|field|prefixManager
specifier|private
name|PrefixManagerImpl
name|prefixManager
decl_stmt|;
DECL|field|s3BucketManager
specifier|private
name|S3BucketManager
name|s3BucketManager
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|OMMetrics
name|metrics
decl_stmt|;
DECL|field|omClientProtocolMetrics
specifier|private
specifier|final
name|ProtocolMessageMetrics
name|omClientProtocolMetrics
decl_stmt|;
DECL|field|httpServer
specifier|private
name|OzoneManagerHttpServer
name|httpServer
decl_stmt|;
DECL|field|omStorage
specifier|private
specifier|final
name|OMStorage
name|omStorage
decl_stmt|;
DECL|field|scmBlockClient
specifier|private
specifier|final
name|ScmBlockLocationProtocol
name|scmBlockClient
decl_stmt|;
DECL|field|scmContainerClient
specifier|private
specifier|final
name|StorageContainerLocationProtocol
name|scmContainerClient
decl_stmt|;
DECL|field|omInfoBeanName
specifier|private
name|ObjectName
name|omInfoBeanName
decl_stmt|;
DECL|field|metricsTimer
specifier|private
name|Timer
name|metricsTimer
decl_stmt|;
DECL|field|scheduleOMMetricsWriteTask
specifier|private
name|ScheduleOMMetricsWriteTask
name|scheduleOMMetricsWriteTask
decl_stmt|;
DECL|field|WRITER
specifier|private
specifier|static
specifier|final
name|ObjectWriter
name|WRITER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
decl_stmt|;
DECL|field|READER
specifier|private
specifier|static
specifier|final
name|ObjectReader
name|READER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readerFor
argument_list|(
name|OmMetricsInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SHUTDOWN_HOOK_PRIORITY
specifier|private
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|30
decl_stmt|;
DECL|field|shutdownHook
specifier|private
specifier|final
name|Runnable
name|shutdownHook
decl_stmt|;
DECL|field|omMetaDir
specifier|private
specifier|final
name|File
name|omMetaDir
decl_stmt|;
DECL|field|isAclEnabled
specifier|private
specifier|final
name|boolean
name|isAclEnabled
decl_stmt|;
DECL|field|accessAuthorizer
specifier|private
name|IAccessAuthorizer
name|accessAuthorizer
decl_stmt|;
DECL|field|jvmPauseMonitor
specifier|private
name|JvmPauseMonitor
name|jvmPauseMonitor
decl_stmt|;
DECL|field|secConfig
specifier|private
specifier|final
name|SecurityConfig
name|secConfig
decl_stmt|;
DECL|field|s3SecretManager
specifier|private
name|S3SecretManager
name|s3SecretManager
decl_stmt|;
DECL|field|isOmRpcServerRunning
specifier|private
specifier|volatile
name|boolean
name|isOmRpcServerRunning
init|=
literal|false
decl_stmt|;
DECL|field|omComponent
specifier|private
name|String
name|omComponent
decl_stmt|;
DECL|field|omServerProtocol
specifier|private
name|OzoneManagerProtocolServerSideTranslatorPB
name|omServerProtocol
decl_stmt|;
DECL|field|isRatisEnabled
specifier|private
name|boolean
name|isRatisEnabled
decl_stmt|;
DECL|field|omRatisServer
specifier|private
name|OzoneManagerRatisServer
name|omRatisServer
decl_stmt|;
DECL|field|omRatisClient
specifier|private
name|OzoneManagerRatisClient
name|omRatisClient
decl_stmt|;
DECL|field|omSnapshotProvider
specifier|private
name|OzoneManagerSnapshotProvider
name|omSnapshotProvider
decl_stmt|;
DECL|field|omNodeDetails
specifier|private
name|OMNodeDetails
name|omNodeDetails
decl_stmt|;
DECL|field|peerNodes
specifier|private
name|List
argument_list|<
name|OMNodeDetails
argument_list|>
name|peerNodes
decl_stmt|;
DECL|field|omRatisSnapshotDir
specifier|private
name|File
name|omRatisSnapshotDir
decl_stmt|;
DECL|field|omRatisSnapshotInfo
specifier|private
specifier|final
name|OMRatisSnapshotInfo
name|omRatisSnapshotInfo
decl_stmt|;
DECL|field|ozAdmins
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|ozAdmins
decl_stmt|;
DECL|field|kmsProvider
specifier|private
name|KeyProviderCryptoExtension
name|kmsProvider
init|=
literal|null
decl_stmt|;
DECL|field|keyProviderUriKeyName
specifier|private
specifier|static
name|String
name|keyProviderUriKeyName
init|=
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
decl_stmt|;
comment|// Adding parameters needed for VolumeRequests here, so that during request
comment|// execution, we can get from ozoneManager.
DECL|field|maxUserVolumeCount
specifier|private
name|long
name|maxUserVolumeCount
decl_stmt|;
DECL|field|scmClient
specifier|private
specifier|final
name|ScmClient
name|scmClient
decl_stmt|;
DECL|field|scmBlockSize
specifier|private
specifier|final
name|long
name|scmBlockSize
decl_stmt|;
DECL|field|preallocateBlocksMax
specifier|private
specifier|final
name|int
name|preallocateBlocksMax
decl_stmt|;
DECL|field|grpcBlockTokenEnabled
specifier|private
specifier|final
name|boolean
name|grpcBlockTokenEnabled
decl_stmt|;
DECL|field|useRatisForReplication
specifier|private
specifier|final
name|boolean
name|useRatisForReplication
decl_stmt|;
DECL|method|OzoneManager (OzoneConfiguration conf)
specifier|private
name|OzoneManager
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|super
argument_list|(
name|OzoneVersionInfo
operator|.
name|OZONE_VERSION_INFO
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|configuration
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|maxUserVolumeCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_OM_USER_MAX_VOLUME
argument_list|,
name|OZONE_OM_USER_MAX_VOLUME_DEFAULT
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|this
operator|.
name|maxUserVolumeCount
operator|>
literal|0
argument_list|,
name|OZONE_OM_USER_MAX_VOLUME
operator|+
literal|" value should be greater than zero"
argument_list|)
expr_stmt|;
name|omStorage
operator|=
operator|new
name|OMStorage
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|omId
operator|=
name|omStorage
operator|.
name|getOmId
argument_list|()
expr_stmt|;
if|if
condition|(
name|omStorage
operator|.
name|getState
argument_list|()
operator|!=
name|StorageState
operator|.
name|INITIALIZED
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"OM not initialized."
argument_list|,
name|ResultCodes
operator|.
name|OM_NOT_INITIALIZED
argument_list|)
throw|;
block|}
comment|// Read configuration and set values.
name|ozAdmins
operator|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|OZONE_ADMINISTRATORS
argument_list|)
expr_stmt|;
name|omMetaDir
operator|=
name|OmUtils
operator|.
name|getOmDbDir
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|isAclEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|OZONE_ACL_ENABLED
argument_list|,
name|OZONE_ACL_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|scmBlockSize
operator|=
operator|(
name|long
operator|)
name|conf
operator|.
name|getStorageSize
argument_list|(
name|OZONE_SCM_BLOCK_SIZE
argument_list|,
name|OZONE_SCM_BLOCK_SIZE_DEFAULT
argument_list|,
name|StorageUnit
operator|.
name|BYTES
argument_list|)
expr_stmt|;
name|this
operator|.
name|preallocateBlocksMax
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_KEY_PREALLOCATION_BLOCKS_MAX
argument_list|,
name|OZONE_KEY_PREALLOCATION_BLOCKS_MAX_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|grpcBlockTokenEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|HDDS_BLOCK_TOKEN_ENABLED
argument_list|,
name|HDDS_BLOCK_TOKEN_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|useRatisForReplication
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CONTAINER_RATIS_ENABLED_KEY
argument_list|,
name|DFS_CONTAINER_RATIS_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
comment|// TODO: This is a temporary check. Once fully implemented, all OM state
comment|//  change should go through Ratis - be it standalone (for non-HA) or
comment|//  replicated (for HA).
name|isRatisEnabled
operator|=
name|configuration
operator|.
name|getBoolean
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_ENABLE_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_ENABLE_DEFAULT
argument_list|)
expr_stmt|;
comment|// Load HA related configurations
name|loadOMHAConfigs
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|omNodeRpcAddr
init|=
name|omNodeDetails
operator|.
name|getRpcAddress
argument_list|()
decl_stmt|;
name|omRpcAddressTxt
operator|=
operator|new
name|Text
argument_list|(
name|omNodeDetails
operator|.
name|getRpcAddressString
argument_list|()
argument_list|)
expr_stmt|;
name|scmContainerClient
operator|=
name|getScmContainerClient
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// verifies that the SCM info in the OM Version file is correct.
name|scmBlockClient
operator|=
name|getScmBlockClient
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|scmClient
operator|=
operator|new
name|ScmClient
argument_list|(
name|scmBlockClient
argument_list|,
name|scmContainerClient
argument_list|)
expr_stmt|;
comment|// For testing purpose only, not hit scm from om as Hadoop UGI can't login
comment|// two principals in the same JVM.
if|if
condition|(
operator|!
name|testSecureOmFlag
condition|)
block|{
name|ScmInfo
name|scmInfo
init|=
name|getScmInfo
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|scmInfo
operator|.
name|getClusterId
argument_list|()
operator|.
name|equals
argument_list|(
name|omStorage
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|&&
name|scmInfo
operator|.
name|getScmId
argument_list|()
operator|.
name|equals
argument_list|(
name|omStorage
operator|.
name|getScmId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"SCM version info mismatch."
argument_list|,
name|ResultCodes
operator|.
name|SCM_VERSION_MISMATCH_ERROR
argument_list|)
throw|;
block|}
block|}
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|configuration
argument_list|,
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|secConfig
operator|=
operator|new
name|SecurityConfig
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// Create the KMS Key Provider
try|try
block|{
name|kmsProvider
operator|=
name|createKeyProviderExt
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|kmsProvider
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Fail to create Key Provider"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secConfig
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|omComponent
operator|=
name|OM_DAEMON
operator|+
literal|"-"
operator|+
name|omId
expr_stmt|;
if|if
condition|(
name|omStorage
operator|.
name|getOmCertSerialId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"OzoneManager started in secure mode but "
operator|+
literal|"doesn't have SCM signed certificate."
argument_list|)
throw|;
block|}
name|certClient
operator|=
operator|new
name|OMCertificateClient
argument_list|(
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
argument_list|,
name|omStorage
operator|.
name|getOmCertSerialId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secConfig
operator|.
name|isBlockTokenEnabled
argument_list|()
condition|)
block|{
name|blockTokenMgr
operator|=
name|createBlockTokenSecretManager
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
name|instantiateServices
argument_list|()
expr_stmt|;
name|this
operator|.
name|omRatisSnapshotInfo
operator|=
operator|new
name|OMRatisSnapshotInfo
argument_list|(
name|omStorage
operator|.
name|getCurrentDir
argument_list|()
argument_list|)
expr_stmt|;
name|initializeRatisServer
argument_list|()
expr_stmt|;
name|initializeRatisClient
argument_list|()
expr_stmt|;
if|if
condition|(
name|isRatisEnabled
condition|)
block|{
comment|// Create Ratis storage dir
name|String
name|omRatisDirectory
init|=
name|OmUtils
operator|.
name|getOMRatisDirectory
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|omRatisDirectory
operator|==
literal|null
operator|||
name|omRatisDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
operator|+
literal|" must be defined."
argument_list|)
throw|;
block|}
name|OmUtils
operator|.
name|createOMDir
argument_list|(
name|omRatisDirectory
argument_list|)
expr_stmt|;
comment|// Create Ratis snapshot dir
name|omRatisSnapshotDir
operator|=
name|OmUtils
operator|.
name|createOMDir
argument_list|(
name|OmUtils
operator|.
name|getOMRatisSnapshotDirectory
argument_list|(
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|peerNodes
operator|!=
literal|null
operator|&&
operator|!
name|peerNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|omSnapshotProvider
operator|=
operator|new
name|OzoneManagerSnapshotProvider
argument_list|(
name|configuration
argument_list|,
name|omRatisSnapshotDir
argument_list|,
name|peerNodes
argument_list|)
expr_stmt|;
block|}
block|}
name|metrics
operator|=
name|OMMetrics
operator|.
name|create
argument_list|()
expr_stmt|;
name|omClientProtocolMetrics
operator|=
name|ProtocolMessageMetrics
operator|.
name|create
argument_list|(
literal|"OmClientProtocol"
argument_list|,
literal|"Ozone Manager RPC endpoint"
argument_list|,
name|OzoneManagerProtocolProtos
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start Om Rpc Server.
name|omRpcServer
operator|=
name|getRpcServer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|omRpcAddress
operator|=
name|updateRPCListenAddress
argument_list|(
name|configuration
argument_list|,
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|omNodeRpcAddr
argument_list|,
name|omRpcServer
argument_list|)
expr_stmt|;
name|shutdownHook
operator|=
parameter_list|()
lambda|->
block|{
name|saveOmMetrics
argument_list|()
expr_stmt|;
block|}
expr_stmt|;
name|ShutdownHookManager
operator|.
name|get
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|shutdownHook
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
block|}
comment|/**    * Instantiate services which are dependent on the OM DB state.    * When OM state is reloaded, these services are re-initialized with the    * new OM state.    */
DECL|method|instantiateServices ()
specifier|private
name|void
name|instantiateServices
parameter_list|()
throws|throws
name|IOException
block|{
name|metadataManager
operator|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|volumeManager
operator|=
operator|new
name|VolumeManagerImpl
argument_list|(
name|metadataManager
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|bucketManager
operator|=
operator|new
name|BucketManagerImpl
argument_list|(
name|metadataManager
argument_list|,
name|getKmsProvider
argument_list|()
argument_list|,
name|isRatisEnabled
argument_list|)
expr_stmt|;
name|s3BucketManager
operator|=
operator|new
name|S3BucketManagerImpl
argument_list|(
name|configuration
argument_list|,
name|metadataManager
argument_list|,
name|volumeManager
argument_list|,
name|bucketManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|secConfig
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|s3SecretManager
operator|=
operator|new
name|S3SecretManagerImpl
argument_list|(
name|configuration
argument_list|,
name|metadataManager
argument_list|)
expr_stmt|;
name|delegationTokenMgr
operator|=
name|createDelegationTokenSecretManager
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
name|prefixManager
operator|=
operator|new
name|PrefixManagerImpl
argument_list|(
name|metadataManager
argument_list|,
name|isRatisEnabled
argument_list|)
expr_stmt|;
name|keyManager
operator|=
operator|new
name|KeyManagerImpl
argument_list|(
name|this
argument_list|,
name|scmClient
argument_list|,
name|configuration
argument_list|,
name|omStorage
operator|.
name|getOmId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|accessAuthorizer
operator|=
name|getACLAuthorizerInstance
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
if|if
condition|(
name|accessAuthorizer
operator|instanceof
name|OzoneNativeAuthorizer
condition|)
block|{
name|OzoneNativeAuthorizer
name|authorizer
init|=
operator|(
name|OzoneNativeAuthorizer
operator|)
name|accessAuthorizer
decl_stmt|;
name|authorizer
operator|.
name|setVolumeManager
argument_list|(
name|volumeManager
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|setBucketManager
argument_list|(
name|bucketManager
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|setKeyManager
argument_list|(
name|keyManager
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|setPrefixManager
argument_list|(
name|prefixManager
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|accessAuthorizer
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Return configuration value of    * {@link OzoneConfigKeys#DFS_CONTAINER_RATIS_ENABLED_KEY}.    */
DECL|method|shouldUseRatis ()
specifier|public
name|boolean
name|shouldUseRatis
parameter_list|()
block|{
return|return
name|useRatisForReplication
return|;
block|}
comment|/**    * Return scmClient.    */
DECL|method|getScmClient ()
specifier|public
name|ScmClient
name|getScmClient
parameter_list|()
block|{
return|return
name|scmClient
return|;
block|}
comment|/**    * Return SecretManager for OM.    */
DECL|method|getBlockTokenSecretManager ()
specifier|public
name|OzoneBlockTokenSecretManager
name|getBlockTokenSecretManager
parameter_list|()
block|{
return|return
name|blockTokenMgr
return|;
block|}
comment|/**    * Return config value of {@link OzoneConfigKeys#OZONE_SCM_BLOCK_SIZE}.    */
DECL|method|getScmBlockSize ()
specifier|public
name|long
name|getScmBlockSize
parameter_list|()
block|{
return|return
name|scmBlockSize
return|;
block|}
comment|/**    * Return config value of    * {@link OzoneConfigKeys#OZONE_KEY_PREALLOCATION_BLOCKS_MAX}.    */
DECL|method|getPreallocateBlocksMax ()
specifier|public
name|int
name|getPreallocateBlocksMax
parameter_list|()
block|{
return|return
name|preallocateBlocksMax
return|;
block|}
comment|/**    * Return config value of    * {@link HddsConfigKeys#HDDS_BLOCK_TOKEN_ENABLED}.    */
DECL|method|isGrpcBlockTokenEnabled ()
specifier|public
name|boolean
name|isGrpcBlockTokenEnabled
parameter_list|()
block|{
return|return
name|grpcBlockTokenEnabled
return|;
block|}
comment|/**    * Inspects and loads OM node configurations.    *    * If {@link OMConfigKeys#OZONE_OM_SERVICE_IDS_KEY} is configured with    * multiple ids and/ or if {@link OMConfigKeys#OZONE_OM_NODE_ID_KEY} is not    * specifically configured , this method determines the omServiceId    * and omNodeId by matching the node's address with the configured    * addresses. When a match is found, it sets the omServicId and omNodeId from    * the corresponding configuration key. This method also finds the OM peers    * nodes belonging to the same OM service.    *    * @param conf    */
DECL|method|loadOMHAConfigs (Configuration conf)
specifier|private
name|void
name|loadOMHAConfigs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|InetSocketAddress
name|localRpcAddress
init|=
literal|null
decl_stmt|;
name|String
name|localOMServiceId
init|=
literal|null
decl_stmt|;
name|String
name|localOMNodeId
init|=
literal|null
decl_stmt|;
name|int
name|localRatisPort
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|omServiceIds
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|OZONE_OM_SERVICE_IDS_KEY
argument_list|)
decl_stmt|;
name|String
name|knownOMNodeId
init|=
name|conf
operator|.
name|get
argument_list|(
name|OZONE_OM_NODE_ID_KEY
argument_list|)
decl_stmt|;
name|int
name|found
init|=
literal|0
decl_stmt|;
name|boolean
name|isOMAddressSet
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|serviceId
range|:
name|OmUtils
operator|.
name|emptyAsSingletonNull
argument_list|(
name|omServiceIds
argument_list|)
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|omNodeIds
init|=
name|OmUtils
operator|.
name|getOMNodeIds
argument_list|(
name|conf
argument_list|,
name|serviceId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OMNodeDetails
argument_list|>
name|peerNodesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isPeer
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|OmUtils
operator|.
name|emptyAsSingletonNull
argument_list|(
name|omNodeIds
argument_list|)
control|)
block|{
if|if
condition|(
name|knownOMNodeId
operator|!=
literal|null
operator|&&
operator|!
name|knownOMNodeId
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|isPeer
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isPeer
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|rpcAddrKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|String
name|rpcAddrStr
init|=
name|OmUtils
operator|.
name|getOmRpcAddress
argument_list|(
name|conf
argument_list|,
name|rpcAddrKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpcAddrStr
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// If OM address is set for any node id, we will not fallback to the
comment|// default
name|isOMAddressSet
operator|=
literal|true
expr_stmt|;
name|String
name|ratisPortKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OZONE_OM_RATIS_PORT_KEY
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|int
name|ratisPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ratisPortKey
argument_list|,
name|OZONE_OM_RATIS_PORT_DEFAULT
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|addr
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|rpcAddrStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in creating socket address "
operator|+
name|addr
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|addr
operator|.
name|isUnresolved
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isPeer
operator|&&
name|OmUtils
operator|.
name|isAddressLocal
argument_list|(
name|addr
argument_list|)
condition|)
block|{
name|localRpcAddress
operator|=
name|addr
expr_stmt|;
name|localOMServiceId
operator|=
name|serviceId
expr_stmt|;
name|localOMNodeId
operator|=
name|nodeId
expr_stmt|;
name|localRatisPort
operator|=
name|ratisPort
expr_stmt|;
name|found
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// This OMNode belongs to same OM service as the current OMNode.
comment|// Add it to peerNodes list.
name|String
name|httpAddr
init|=
name|OmUtils
operator|.
name|getHttpAddressForOMPeerNode
argument_list|(
name|conf
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|,
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|httpsAddr
init|=
name|OmUtils
operator|.
name|getHttpsAddressForOMPeerNode
argument_list|(
name|conf
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|,
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
name|OMNodeDetails
name|peerNodeInfo
init|=
operator|new
name|OMNodeDetails
operator|.
name|Builder
argument_list|()
operator|.
name|setOMServiceId
argument_list|(
name|serviceId
argument_list|)
operator|.
name|setOMNodeId
argument_list|(
name|nodeId
argument_list|)
operator|.
name|setRpcAddress
argument_list|(
name|addr
argument_list|)
operator|.
name|setRatisPort
argument_list|(
name|ratisPort
argument_list|)
operator|.
name|setHttpAddress
argument_list|(
name|httpAddr
argument_list|)
operator|.
name|setHttpsAddress
argument_list|(
name|httpsAddr
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|peerNodesList
operator|.
name|add
argument_list|(
name|peerNodeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found one matching OM address with service ID: {} and node"
operator|+
literal|" ID: {}"
argument_list|,
name|localOMServiceId
argument_list|,
name|localOMNodeId
argument_list|)
expr_stmt|;
name|setOMNodeDetails
argument_list|(
name|localOMServiceId
argument_list|,
name|localOMNodeId
argument_list|,
name|localRpcAddress
argument_list|,
name|localRatisPort
argument_list|)
expr_stmt|;
name|this
operator|.
name|peerNodes
operator|=
name|peerNodesList
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found matching OM address with OMServiceId: {}, "
operator|+
literal|"OMNodeId: {}, RPC Address: {} and Ratis port: {}"
argument_list|,
name|localOMServiceId
argument_list|,
name|localOMNodeId
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|localRpcAddress
argument_list|)
argument_list|,
name|localRatisPort
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|found
operator|>
literal|1
condition|)
block|{
name|String
name|msg
init|=
literal|"Configuration has multiple "
operator|+
name|OZONE_OM_ADDRESS_KEY
operator|+
literal|" addresses that match local node's address. Please configure the"
operator|+
literal|" system with "
operator|+
name|OZONE_OM_SERVICE_IDS_KEY
operator|+
literal|" and "
operator|+
name|OZONE_OM_ADDRESS_KEY
decl_stmt|;
throw|throw
operator|new
name|OzoneIllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|isOMAddressSet
condition|)
block|{
comment|// No OM address is set. Fallback to default
name|InetSocketAddress
name|omAddress
init|=
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|ratisPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_OM_RATIS_PORT_KEY
argument_list|,
name|OZONE_OM_RATIS_PORT_DEFAULT
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuration either no {} set. Falling back to the default "
operator|+
literal|"OM address {}"
argument_list|,
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|omAddress
argument_list|)
expr_stmt|;
name|setOMNodeDetails
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|omAddress
argument_list|,
name|ratisPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Configuration has no "
operator|+
name|OZONE_OM_ADDRESS_KEY
operator|+
literal|" "
operator|+
literal|"address that matches local node's address. Please configure the "
operator|+
literal|"system with "
operator|+
name|OZONE_OM_ADDRESS_KEY
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OzoneIllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Builds and sets OMNodeDetails object.    */
DECL|method|setOMNodeDetails (String serviceId, String nodeId, InetSocketAddress rpcAddress, int ratisPort)
specifier|private
name|void
name|setOMNodeDetails
parameter_list|(
name|String
name|serviceId
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|InetSocketAddress
name|rpcAddress
parameter_list|,
name|int
name|ratisPort
parameter_list|)
block|{
if|if
condition|(
name|serviceId
operator|==
literal|null
condition|)
block|{
comment|// If no serviceId is set, take the default serviceID om-service
name|serviceId
operator|=
name|OzoneConsts
operator|.
name|OM_SERVICE_ID_DEFAULT
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OM Service ID is not set. Setting it to the default ID: {}"
argument_list|,
name|serviceId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
comment|// If no nodeId is set, take the omId from omStorage as the nodeID
name|nodeId
operator|=
name|omId
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OM Node ID is not set. Setting it to the OmStorage's "
operator|+
literal|"OmID: {}"
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|omNodeDetails
operator|=
operator|new
name|OMNodeDetails
operator|.
name|Builder
argument_list|()
operator|.
name|setOMServiceId
argument_list|(
name|serviceId
argument_list|)
operator|.
name|setOMNodeId
argument_list|(
name|nodeId
argument_list|)
operator|.
name|setRpcAddress
argument_list|(
name|rpcAddress
argument_list|)
operator|.
name|setRatisPort
argument_list|(
name|ratisPort
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Set this nodes OZONE_OM_ADDRESS_KEY to the discovered address.
name|configuration
operator|.
name|set
argument_list|(
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|rpcAddress
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get and set Http(s) address of local node. If base config keys are
comment|// not set, check for keys suffixed with OM serivce ID and node ID.
name|setOMNodeSpecificConfigs
argument_list|(
name|serviceId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if any of the following configuration keys have been set using OM    * Node ID suffixed to the key. If yes, then set the base key with the    * configured valued.    *    1. {@link OMConfigKeys#OZONE_OM_HTTP_ADDRESS_KEY}    *    2. {@link OMConfigKeys#OZONE_OM_HTTPS_ADDRESS_KEY}    *    3. {@link OMConfigKeys#OZONE_OM_HTTP_BIND_HOST_KEY}    *    4. {@link OMConfigKeys#OZONE_OM_HTTPS_BIND_HOST_KEY}    */
DECL|method|setOMNodeSpecificConfigs (String omServiceId, String omNodeId)
specifier|private
name|void
name|setOMNodeSpecificConfigs
parameter_list|(
name|String
name|omServiceId
parameter_list|,
name|String
name|omNodeId
parameter_list|)
block|{
name|String
index|[]
name|confKeys
init|=
operator|new
name|String
index|[]
block|{
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_ADDRESS_KEY
block|,
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTPS_ADDRESS_KEY
block|,
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_BIND_HOST_KEY
block|,
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTPS_BIND_HOST_KEY
block|}
decl_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|confKeys
control|)
block|{
name|String
name|confValue
init|=
name|OmUtils
operator|.
name|getConfSuffixedWithOMNodeId
argument_list|(
name|configuration
argument_list|,
name|confKey
argument_list|,
name|omServiceId
argument_list|,
name|omNodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|confValue
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting configuration key {} with value of key {}: {}"
argument_list|,
name|confKey
argument_list|,
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|confKey
argument_list|,
name|omNodeId
argument_list|)
argument_list|,
name|confValue
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|confKey
argument_list|,
name|confValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createKeyProviderExt ( OzoneConfiguration conf)
specifier|private
name|KeyProviderCryptoExtension
name|createKeyProviderExt
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyProvider
name|keyProvider
init|=
name|KMSUtil
operator|.
name|createKeyProvider
argument_list|(
name|conf
argument_list|,
name|keyProviderUriKeyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyProvider
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|KeyProviderCryptoExtension
name|cryptoProvider
init|=
name|KeyProviderCryptoExtension
operator|.
name|createKeyProviderCryptoExtension
argument_list|(
name|keyProvider
argument_list|)
decl_stmt|;
return|return
name|cryptoProvider
return|;
block|}
comment|/**    * Returns an instance of {@link IAccessAuthorizer}.    * Looks up the configuration to see if there is custom class specified.    * Constructs the instance by passing the configuration directly to the    * constructor to achieve thread safety using final fields.    * @param conf    * @return IAccessAuthorizer    */
DECL|method|getACLAuthorizerInstance (OzoneConfiguration conf)
specifier|private
name|IAccessAuthorizer
name|getACLAuthorizerInstance
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|IAccessAuthorizer
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|OZONE_ACL_AUTHORIZER_CLASS
argument_list|,
name|OzoneAccessAuthorizer
operator|.
name|class
argument_list|,
name|IAccessAuthorizer
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Class which schedule saving metrics to a file.    */
DECL|class|ScheduleOMMetricsWriteTask
specifier|private
class|class
name|ScheduleOMMetricsWriteTask
extends|extends
name|TimerTask
block|{
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|saveOmMetrics
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|saveOmMetrics ()
specifier|private
name|void
name|saveOmMetrics
parameter_list|()
block|{
try|try
block|{
name|boolean
name|success
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|getTempMetricsStorageFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|getTempMetricsStorageFile
argument_list|()
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
init|)
block|{
name|OmMetricsInfo
name|metricsInfo
init|=
operator|new
name|OmMetricsInfo
argument_list|()
decl_stmt|;
name|metricsInfo
operator|.
name|setNumKeys
argument_list|(
name|metrics
operator|.
name|getNumKeys
argument_list|()
argument_list|)
expr_stmt|;
name|WRITER
operator|.
name|writeValue
argument_list|(
name|writer
argument_list|,
name|metricsInfo
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|success
condition|)
block|{
name|Files
operator|.
name|move
argument_list|(
name|getTempMetricsStorageFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|getMetricsStorageFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to write the om Metrics file"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns temporary metrics storage file.    * @return File    */
DECL|method|getTempMetricsStorageFile ()
specifier|private
name|File
name|getTempMetricsStorageFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|omMetaDir
argument_list|,
name|OM_METRICS_TEMP_FILE
argument_list|)
return|;
block|}
comment|/**    * Returns metrics storage file.    * @return File    */
DECL|method|getMetricsStorageFile ()
specifier|private
name|File
name|getMetricsStorageFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|omMetaDir
argument_list|,
name|OM_METRICS_FILE
argument_list|)
return|;
block|}
DECL|method|createDelegationTokenSecretManager ( OzoneConfiguration conf)
specifier|private
name|OzoneDelegationTokenSecretManager
name|createDelegationTokenSecretManager
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|tokenRemoverScanInterval
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|DELEGATION_REMOVER_SCAN_INTERVAL_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|DELEGATION_REMOVER_SCAN_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|long
name|tokenMaxLifetime
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|DELEGATION_TOKEN_MAX_LIFETIME_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|long
name|tokenRenewInterval
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|DELEGATION_TOKEN_RENEW_INTERVAL_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
return|return
operator|new
name|OzoneDelegationTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|tokenRenewInterval
argument_list|,
name|tokenRemoverScanInterval
argument_list|,
name|omRpcAddressTxt
argument_list|,
name|s3SecretManager
argument_list|)
return|;
block|}
DECL|method|createBlockTokenSecretManager ( OzoneConfiguration conf)
specifier|private
name|OzoneBlockTokenSecretManager
name|createBlockTokenSecretManager
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|long
name|expiryTime
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|HddsConfigKeys
operator|.
name|HDDS_BLOCK_TOKEN_EXPIRY_TIME
argument_list|,
name|HddsConfigKeys
operator|.
name|HDDS_BLOCK_TOKEN_EXPIRY_TIME_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
comment|// TODO: Pass OM cert serial ID.
if|if
condition|(
name|testSecureOmFlag
condition|)
block|{
return|return
operator|new
name|OzoneBlockTokenSecretManager
argument_list|(
name|secConfig
argument_list|,
name|expiryTime
argument_list|,
literal|"1"
argument_list|)
return|;
block|}
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|certClient
argument_list|)
expr_stmt|;
return|return
operator|new
name|OzoneBlockTokenSecretManager
argument_list|(
name|secConfig
argument_list|,
name|expiryTime
argument_list|,
name|certClient
operator|.
name|getCertificate
argument_list|()
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|stopSecretManager ()
specifier|private
name|void
name|stopSecretManager
parameter_list|()
block|{
if|if
condition|(
name|blockTokenMgr
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping OM block token manager."
argument_list|)
expr_stmt|;
try|try
block|{
name|blockTokenMgr
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop block token manager"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|delegationTokenMgr
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping OM delegation token secret manager."
argument_list|)
expr_stmt|;
try|try
block|{
name|delegationTokenMgr
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop delegation token manager"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|startSecretManager ()
specifier|public
name|void
name|startSecretManager
parameter_list|()
block|{
try|try
block|{
name|readKeyPair
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OzoneSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to read key pair for OM."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|secConfig
operator|.
name|isBlockTokenEnabled
argument_list|()
operator|&&
name|blockTokenMgr
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting OM block token secret manager"
argument_list|)
expr_stmt|;
name|blockTokenMgr
operator|.
name|start
argument_list|(
name|certClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Unable to start secret manager.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting block token secret manager."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|delegationTokenMgr
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting OM delegation token secret manager"
argument_list|)
expr_stmt|;
name|delegationTokenMgr
operator|.
name|start
argument_list|(
name|certClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Unable to start secret manager.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error starting delegation token secret manager."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * For testing purpose only.    * */
DECL|method|setCertClient (CertificateClient certClient)
specifier|public
name|void
name|setCertClient
parameter_list|(
name|CertificateClient
name|certClient
parameter_list|)
block|{
comment|// TODO: Initialize it in constructor with implementation for certClient.
name|this
operator|.
name|certClient
operator|=
name|certClient
expr_stmt|;
block|}
comment|/**    * Read private key from file.    */
DECL|method|readKeyPair ()
specifier|private
name|void
name|readKeyPair
parameter_list|()
throws|throws
name|OzoneSecurityException
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading keypair and certificate from file system."
argument_list|)
expr_stmt|;
name|PublicKey
name|pubKey
init|=
name|certClient
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|PrivateKey
name|pvtKey
init|=
name|certClient
operator|.
name|getPrivateKey
argument_list|()
decl_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|pubKey
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|pvtKey
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|certClient
operator|.
name|getCertificate
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneSecurityException
argument_list|(
literal|"Error reading keypair& certificate "
operator|+
literal|"OzoneManager."
argument_list|,
name|e
argument_list|,
name|OzoneSecurityException
operator|.
name|ResultCodes
operator|.
name|OM_PUBLIC_PRIVATE_KEY_FILE_NOT_EXIST
argument_list|)
throw|;
block|}
block|}
comment|/**    * Login OM service user if security and Kerberos are enabled.    *    * @param  conf    * @throws IOException, AuthenticationException    */
DECL|method|loginOMUser (OzoneConfiguration conf)
specifier|private
specifier|static
name|void
name|loginOMUser
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
if|if
condition|(
name|SecurityUtil
operator|.
name|getAuthenticationMethod
argument_list|(
name|conf
argument_list|)
operator|.
name|equals
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ozone security is enabled. Attempting login for OM user. "
operator|+
literal|"Principal: {},keytab: {}"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|OZONE_OM_KERBEROS_PRINCIPAL_KEY
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|OZONE_OM_KERBEROS_KEYTAB_FILE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|socAddr
init|=
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|login
argument_list|(
name|conf
argument_list|,
name|OZONE_OM_KERBEROS_KEYTAB_FILE_KEY
argument_list|,
name|OZONE_OM_KERBEROS_PRINCIPAL_KEY
argument_list|,
name|socAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|SecurityUtil
operator|.
name|getAuthenticationMethod
argument_list|(
name|conf
argument_list|)
operator|+
literal|" authentication method not supported. OM user login "
operator|+
literal|"failed."
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Ozone Manager login successful."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a scm block client, used by putKey() and getKey().    *    * @return {@link ScmBlockLocationProtocol}    * @throws IOException    */
DECL|method|getScmBlockClient ( OzoneConfiguration conf)
specifier|private
specifier|static
name|ScmBlockLocationProtocol
name|getScmBlockClient
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|ScmBlockLocationProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|long
name|scmVersion
init|=
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|ScmBlockLocationProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|scmBlockAddress
init|=
name|getScmAddressForBlockClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ScmBlockLocationProtocolClientSideTranslatorPB
name|scmBlockLocationClient
init|=
operator|new
name|ScmBlockLocationProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|ScmBlockLocationProtocolPB
operator|.
name|class
argument_list|,
name|scmVersion
argument_list|,
name|scmBlockAddress
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|Client
operator|.
name|getRpcTimeout
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|TracingUtil
operator|.
name|createProxy
argument_list|(
name|scmBlockLocationClient
argument_list|,
name|ScmBlockLocationProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Returns a scm container client.    *    * @return {@link StorageContainerLocationProtocol}    * @throws IOException    */
DECL|method|getScmContainerClient ( OzoneConfiguration conf)
specifier|private
specifier|static
name|StorageContainerLocationProtocol
name|getScmContainerClient
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|long
name|scmVersion
init|=
name|RPC
operator|.
name|getProtocolVersion
argument_list|(
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|scmAddr
init|=
name|getScmAddressForClients
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StorageContainerLocationProtocol
name|scmContainerClient
init|=
name|TracingUtil
operator|.
name|createProxy
argument_list|(
operator|new
name|StorageContainerLocationProtocolClientSideTranslatorPB
argument_list|(
name|RPC
operator|.
name|getProxy
argument_list|(
name|StorageContainerLocationProtocolPB
operator|.
name|class
argument_list|,
name|scmVersion
argument_list|,
name|scmAddr
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getDefaultSocketFactory
argument_list|(
name|conf
argument_list|)
argument_list|,
name|Client
operator|.
name|getRpcTimeout
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|StorageContainerLocationProtocol
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|scmContainerClient
return|;
block|}
comment|/**    * Starts an RPC server, if configured.    *    * @param conf configuration    * @param addr configured address of RPC server    * @param protocol RPC protocol provided by RPC server    * @param instance RPC protocol implementation instance    * @param handlerCount RPC server handler count    * @return RPC server    * @throws IOException if there is an I/O error while creating RPC server    */
DECL|method|startRpcServer (OzoneConfiguration conf, InetSocketAddress addr, Class<?> protocol, BlockingService instance, int handlerCount)
specifier|private
name|RPC
operator|.
name|Server
name|startRpcServer
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|BlockingService
name|instance
parameter_list|,
name|int
name|handlerCount
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|Server
name|rpcServer
init|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
operator|.
name|setInstance
argument_list|(
name|instance
argument_list|)
operator|.
name|setBindAddress
argument_list|(
name|addr
operator|.
name|getHostString
argument_list|()
argument_list|)
operator|.
name|setPort
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|handlerCount
argument_list|)
operator|.
name|setVerbose
argument_list|(
literal|false
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|delegationTokenMgr
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DFSUtil
operator|.
name|addPBProtocol
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|instance
argument_list|,
name|rpcServer
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|rpcServer
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
name|OMPolicyProvider
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rpcServer
return|;
block|}
DECL|method|isOzoneSecurityEnabled ()
specifier|private
specifier|static
name|boolean
name|isOzoneSecurityEnabled
parameter_list|()
block|{
return|return
name|securityEnabled
return|;
block|}
comment|/**    * Constructs OM instance based on the configuration.    *    * @param conf OzoneConfiguration    * @return OM instance    * @throws IOException, AuthenticationException in case OM instance    *   creation fails.    */
DECL|method|createOm (OzoneConfiguration conf)
specifier|public
specifier|static
name|OzoneManager
name|createOm
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|loginOMUserIfSecurityEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|OzoneManager
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Logs in the OM use if security is enabled in the configuration.    *    * @param conf OzoneConfiguration    * @throws IOException, AuthenticationException in case login failes.    */
DECL|method|loginOMUserIfSecurityEnabled (OzoneConfiguration conf)
specifier|private
specifier|static
name|void
name|loginOMUserIfSecurityEnabled
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|securityEnabled
operator|=
name|OzoneSecurityUtil
operator|.
name|isSecurityEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|securityEnabled
condition|)
block|{
name|loginOMUser
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initializes the OM instance.    *    * @param conf OzoneConfiguration    * @return true if OM initialization succeeds, false otherwise    * @throws IOException in case ozone metadata directory path is not    *                     accessible    */
annotation|@
name|VisibleForTesting
DECL|method|omInit (OzoneConfiguration conf)
specifier|public
specifier|static
name|boolean
name|omInit
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|loginOMUserIfSecurityEnabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|OMStorage
name|omStorage
init|=
operator|new
name|OMStorage
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StorageState
name|state
init|=
name|omStorage
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|StorageState
operator|.
name|INITIALIZED
condition|)
block|{
try|try
block|{
name|ScmInfo
name|scmInfo
init|=
name|getScmInfo
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|clusterId
init|=
name|scmInfo
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
name|String
name|scmId
init|=
name|scmInfo
operator|.
name|getScmId
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterId
operator|==
literal|null
operator|||
name|clusterId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid Cluster ID"
argument_list|)
throw|;
block|}
if|if
condition|(
name|scmId
operator|==
literal|null
operator|||
name|scmId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid SCM ID"
argument_list|)
throw|;
block|}
name|omStorage
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|omStorage
operator|.
name|setScmId
argument_list|(
name|scmId
argument_list|)
expr_stmt|;
if|if
condition|(
name|OzoneSecurityUtil
operator|.
name|isSecurityEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|initializeSecurity
argument_list|(
name|conf
argument_list|,
name|omStorage
argument_list|)
expr_stmt|;
block|}
name|omStorage
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"OM initialization succeeded.Current cluster id for sd="
operator|+
name|omStorage
operator|.
name|getStorageDir
argument_list|()
operator|+
literal|";cid="
operator|+
name|omStorage
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not initialize OM version file"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|OzoneSecurityUtil
operator|.
name|isSecurityEnabled
argument_list|(
name|conf
argument_list|)
operator|&&
name|omStorage
operator|.
name|getOmCertSerialId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"OM storage is already initialized. Initializing security"
argument_list|)
expr_stmt|;
name|initializeSecurity
argument_list|(
name|conf
argument_list|,
name|omStorage
argument_list|)
expr_stmt|;
name|omStorage
operator|.
name|persistCurrentState
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"OM already initialized.Reusing existing cluster id for sd="
operator|+
name|omStorage
operator|.
name|getStorageDir
argument_list|()
operator|+
literal|";cid="
operator|+
name|omStorage
operator|.
name|getClusterID
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Initializes secure OzoneManager.    * */
annotation|@
name|VisibleForTesting
DECL|method|initializeSecurity (OzoneConfiguration conf, OMStorage omStore)
specifier|public
specifier|static
name|void
name|initializeSecurity
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|OMStorage
name|omStore
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing secure OzoneManager."
argument_list|)
expr_stmt|;
name|CertificateClient
name|certClient
init|=
operator|new
name|OMCertificateClient
argument_list|(
operator|new
name|SecurityConfig
argument_list|(
name|conf
argument_list|)
argument_list|,
name|omStore
operator|.
name|getOmCertSerialId
argument_list|()
argument_list|)
decl_stmt|;
name|CertificateClient
operator|.
name|InitResponse
name|response
init|=
name|certClient
operator|.
name|init
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Init response: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|response
condition|)
block|{
case|case
name|SUCCESS
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialization successful."
argument_list|)
expr_stmt|;
break|break;
case|case
name|GETCERT
case|:
name|getSCMSignedCert
argument_list|(
name|certClient
argument_list|,
name|conf
argument_list|,
name|omStore
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully stored SCM signed certificate."
argument_list|)
expr_stmt|;
break|break;
case|case
name|FAILURE
case|:
name|LOG
operator|.
name|error
argument_list|(
literal|"OM security initialization failed."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"OM security initialization failed."
argument_list|)
throw|;
case|case
name|RECOVER
case|:
name|LOG
operator|.
name|error
argument_list|(
literal|"OM security initialization failed. OM certificate is "
operator|+
literal|"missing."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"OM security initialization failed."
argument_list|)
throw|;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"OM security initialization failed. Init response: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"OM security initialization failed."
argument_list|)
throw|;
block|}
block|}
DECL|method|getScmInfo (OzoneConfiguration conf)
specifier|private
specifier|static
name|ScmInfo
name|getScmInfo
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|RetryPolicy
name|retryPolicy
init|=
name|retryUpToMaximumCountWithFixedSleep
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|RetriableTask
argument_list|<
name|ScmInfo
argument_list|>
name|retriable
init|=
operator|new
name|RetriableTask
argument_list|<>
argument_list|(
name|retryPolicy
argument_list|,
literal|"OM#getScmInfo"
argument_list|,
parameter_list|()
lambda|->
name|getScmBlockClient
argument_list|(
name|conf
argument_list|)
operator|.
name|getScmInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|retriable
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to get SCM info"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Builds a message for logging startup information about an RPC server.    *    * @param description RPC server description    * @param addr RPC server listening address    * @return server startup message    */
DECL|method|buildRpcServerStartMessage (String description, InetSocketAddress addr)
specifier|private
specifier|static
name|String
name|buildRpcServerStartMessage
parameter_list|(
name|String
name|description
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|!=
literal|null
condition|?
name|String
operator|.
name|format
argument_list|(
literal|"%s is listening at %s"
argument_list|,
name|description
argument_list|,
name|addr
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|String
operator|.
name|format
argument_list|(
literal|"%s not started"
argument_list|,
name|description
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getKeyManager ()
specifier|public
name|KeyManager
name|getKeyManager
parameter_list|()
block|{
return|return
name|keyManager
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getScmInfo ()
specifier|public
name|ScmInfo
name|getScmInfo
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scmBlockClient
operator|.
name|getScmInfo
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getOmStorage ()
specifier|public
name|OMStorage
name|getOmStorage
parameter_list|()
block|{
return|return
name|omStorage
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getOmRatisServer ()
specifier|public
name|OzoneManagerRatisServer
name|getOmRatisServer
parameter_list|()
block|{
return|return
name|omRatisServer
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getOmSnapshotProvider ()
specifier|public
name|OzoneManagerSnapshotProvider
name|getOmSnapshotProvider
parameter_list|()
block|{
return|return
name|omSnapshotProvider
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getOmRpcServerAddr ()
specifier|public
name|InetSocketAddress
name|getOmRpcServerAddr
parameter_list|()
block|{
return|return
name|omRpcAddress
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getOmRatisServerState ()
specifier|public
name|LifeCycle
operator|.
name|State
name|getOmRatisServerState
parameter_list|()
block|{
if|if
condition|(
name|omRatisServer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|omRatisServer
operator|.
name|getServerState
argument_list|()
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getKmsProvider ()
specifier|public
name|KeyProviderCryptoExtension
name|getKmsProvider
parameter_list|()
block|{
return|return
name|kmsProvider
return|;
block|}
DECL|method|getPrefixManager ()
specifier|public
name|PrefixManager
name|getPrefixManager
parameter_list|()
block|{
return|return
name|prefixManager
return|;
block|}
comment|/**    * Get metadata manager.    *    * @return metadata manager.    */
DECL|method|getMetadataManager ()
specifier|public
name|OMMetadataManager
name|getMetadataManager
parameter_list|()
block|{
return|return
name|metadataManager
return|;
block|}
DECL|method|getBlockTokenMgr ()
specifier|public
name|OzoneBlockTokenSecretManager
name|getBlockTokenMgr
parameter_list|()
block|{
return|return
name|blockTokenMgr
return|;
block|}
DECL|method|getOmServerProtocol ()
specifier|public
name|OzoneManagerProtocolServerSideTranslatorPB
name|getOmServerProtocol
parameter_list|()
block|{
return|return
name|omServerProtocol
return|;
block|}
DECL|method|getMetrics ()
specifier|public
name|OMMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
comment|/**    * Start service.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|omClientProtocolMetrics
operator|.
name|register
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"OzoneManager RPC server"
argument_list|,
name|omRpcAddress
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|initialize
argument_list|(
literal|"OzoneManager"
argument_list|)
expr_stmt|;
comment|// Start Ratis services
if|if
condition|(
name|omRatisServer
operator|!=
literal|null
condition|)
block|{
name|omRatisServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|omRatisClient
operator|!=
literal|null
condition|)
block|{
name|omRatisClient
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
name|metadataManager
operator|.
name|start
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|startSecretManagerIfNecessary
argument_list|()
expr_stmt|;
comment|// Set metrics and start metrics back ground thread
name|metrics
operator|.
name|setNumVolumes
argument_list|(
name|metadataManager
operator|.
name|countRowsInTable
argument_list|(
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setNumBuckets
argument_list|(
name|metadataManager
operator|.
name|countRowsInTable
argument_list|(
name|metadataManager
operator|.
name|getBucketTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getMetricsStorageFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|OmMetricsInfo
name|metricsInfo
init|=
name|READER
operator|.
name|readValue
argument_list|(
name|getMetricsStorageFile
argument_list|()
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|setNumKeys
argument_list|(
name|metricsInfo
operator|.
name|getNumKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Schedule save metrics
name|long
name|period
init|=
name|configuration
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_OM_METRICS_SAVE_INTERVAL
argument_list|,
name|OZONE_OM_METRICS_SAVE_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduleOMMetricsWriteTask
operator|=
operator|new
name|ScheduleOMMetricsWriteTask
argument_list|()
expr_stmt|;
name|metricsTimer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
name|metricsTimer
operator|.
name|schedule
argument_list|(
name|scheduleOMMetricsWriteTask
argument_list|,
literal|0
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|start
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|omRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|isOmRpcServerRunning
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|httpServer
operator|=
operator|new
name|OzoneManagerHttpServer
argument_list|(
name|configuration
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Allow OM to start as Http Server failure is not fatal.
name|LOG
operator|.
name|error
argument_list|(
literal|"OM HttpServer failed to start."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|registerMXBean
argument_list|()
expr_stmt|;
name|setStartTime
argument_list|()
expr_stmt|;
block|}
comment|/**    * Restarts the service. This method re-initializes the rpc server.    */
DECL|method|restart ()
specifier|public
name|void
name|restart
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|buildRpcServerStartMessage
argument_list|(
literal|"OzoneManager RPC server"
argument_list|,
name|omRpcAddress
argument_list|)
argument_list|)
expr_stmt|;
name|HddsUtils
operator|.
name|initializeMetrics
argument_list|(
name|configuration
argument_list|,
literal|"OzoneManager"
argument_list|)
expr_stmt|;
name|instantiateServices
argument_list|()
expr_stmt|;
name|startSecretManagerIfNecessary
argument_list|()
expr_stmt|;
comment|// Set metrics and start metrics back ground thread
name|metrics
operator|.
name|setNumVolumes
argument_list|(
name|metadataManager
operator|.
name|countRowsInTable
argument_list|(
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setNumBuckets
argument_list|(
name|metadataManager
operator|.
name|countRowsInTable
argument_list|(
name|metadataManager
operator|.
name|getBucketTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getMetricsStorageFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|OmMetricsInfo
name|metricsInfo
init|=
name|READER
operator|.
name|readValue
argument_list|(
name|getMetricsStorageFile
argument_list|()
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|setNumKeys
argument_list|(
name|metricsInfo
operator|.
name|getNumKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Schedule save metrics
name|long
name|period
init|=
name|configuration
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_OM_METRICS_SAVE_INTERVAL
argument_list|,
name|OZONE_OM_METRICS_SAVE_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|scheduleOMMetricsWriteTask
operator|=
operator|new
name|ScheduleOMMetricsWriteTask
argument_list|()
expr_stmt|;
name|metricsTimer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
name|metricsTimer
operator|.
name|schedule
argument_list|(
name|scheduleOMMetricsWriteTask
argument_list|,
literal|0
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|omRpcServer
operator|=
name|getRpcServer
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|omRpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|isOmRpcServerRunning
operator|=
literal|true
expr_stmt|;
name|initializeRatisServer
argument_list|()
expr_stmt|;
if|if
condition|(
name|omRatisServer
operator|!=
literal|null
condition|)
block|{
name|omRatisServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|initializeRatisClient
argument_list|()
expr_stmt|;
if|if
condition|(
name|omRatisClient
operator|!=
literal|null
condition|)
block|{
name|omRatisClient
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|httpServer
operator|=
operator|new
name|OzoneManagerHttpServer
argument_list|(
name|configuration
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Allow OM to start as Http Server failure is not fatal.
name|LOG
operator|.
name|error
argument_list|(
literal|"OM HttpServer failed to start."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|registerMXBean
argument_list|()
expr_stmt|;
comment|// Start jvm monitor
name|jvmPauseMonitor
operator|=
operator|new
name|JvmPauseMonitor
argument_list|()
expr_stmt|;
name|jvmPauseMonitor
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|jvmPauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|setStartTime
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates a new instance of rpc server. If an earlier instance is already    * running then returns the same.    */
DECL|method|getRpcServer (OzoneConfiguration conf)
specifier|private
name|RPC
operator|.
name|Server
name|getRpcServer
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isOmRpcServerRunning
condition|)
block|{
return|return
name|omRpcServer
return|;
block|}
name|InetSocketAddress
name|omNodeRpcAddr
init|=
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|int
name|handlerCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_OM_HANDLER_COUNT_KEY
argument_list|,
name|OZONE_OM_HANDLER_COUNT_DEFAULT
argument_list|)
decl_stmt|;
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|configuration
argument_list|,
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|omServerProtocol
operator|=
operator|new
name|OzoneManagerProtocolServerSideTranslatorPB
argument_list|(
name|this
argument_list|,
name|omRatisServer
argument_list|,
name|omClientProtocolMetrics
argument_list|,
name|isRatisEnabled
argument_list|)
expr_stmt|;
name|BlockingService
name|omService
init|=
name|newReflectiveBlockingService
argument_list|(
name|omServerProtocol
argument_list|)
decl_stmt|;
return|return
name|startRpcServer
argument_list|(
name|configuration
argument_list|,
name|omNodeRpcAddr
argument_list|,
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|omService
argument_list|,
name|handlerCount
argument_list|)
return|;
block|}
comment|/**    * Creates an instance of ratis server.    */
DECL|method|initializeRatisServer ()
specifier|private
name|void
name|initializeRatisServer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isRatisEnabled
condition|)
block|{
if|if
condition|(
name|omRatisServer
operator|==
literal|null
condition|)
block|{
name|omRatisServer
operator|=
name|OzoneManagerRatisServer
operator|.
name|newOMRatisServer
argument_list|(
name|configuration
argument_list|,
name|this
argument_list|,
name|omNodeDetails
argument_list|,
name|peerNodes
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"OzoneManager Ratis server initialized at port {}"
argument_list|,
name|omRatisServer
operator|.
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|omRatisServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Creates an instance of ratis client.    */
DECL|method|initializeRatisClient ()
specifier|private
name|void
name|initializeRatisClient
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isRatisEnabled
condition|)
block|{
if|if
condition|(
name|omRatisClient
operator|==
literal|null
condition|)
block|{
name|omRatisClient
operator|=
name|OzoneManagerRatisClient
operator|.
name|newOzoneManagerRatisClient
argument_list|(
name|omNodeDetails
operator|.
name|getOMNodeId
argument_list|()
argument_list|,
name|omRatisServer
operator|.
name|getRaftGroup
argument_list|()
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|omRatisClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getSnapshotInfo ()
specifier|public
name|OMRatisSnapshotInfo
name|getSnapshotInfo
parameter_list|()
block|{
return|return
name|omRatisSnapshotInfo
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRatisSnapshotIndex ()
specifier|public
name|long
name|getRatisSnapshotIndex
parameter_list|()
block|{
return|return
name|omRatisSnapshotInfo
operator|.
name|getIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|saveRatisSnapshot ()
specifier|public
name|long
name|saveRatisSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|snapshotIndex
init|=
name|omRatisServer
operator|.
name|getStateMachineLastAppliedIndex
argument_list|()
decl_stmt|;
comment|// Flush the OM state to disk
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|omRatisSnapshotInfo
operator|.
name|saveRatisSnapshotToDisk
argument_list|(
name|snapshotIndex
argument_list|)
expr_stmt|;
return|return
name|snapshotIndex
return|;
block|}
comment|/**    * Stop service.    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
comment|// Cancel the metrics timer and set to null.
if|if
condition|(
name|metricsTimer
operator|!=
literal|null
condition|)
block|{
name|metricsTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|metricsTimer
operator|=
literal|null
expr_stmt|;
name|scheduleOMMetricsWriteTask
operator|=
literal|null
expr_stmt|;
block|}
name|omRpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// When ratis is not enabled, we need to call stop() to stop
comment|// OzoneManageDoubleBuffer in OM server protocol.
if|if
condition|(
operator|!
name|isRatisEnabled
condition|)
block|{
name|omServerProtocol
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|omRatisServer
operator|!=
literal|null
condition|)
block|{
name|omRatisServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|omRatisServer
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|omRatisClient
operator|!=
literal|null
condition|)
block|{
name|omRatisClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|omRatisClient
operator|=
literal|null
expr_stmt|;
block|}
name|isOmRpcServerRunning
operator|=
literal|false
expr_stmt|;
name|keyManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|stopSecretManager
argument_list|()
expr_stmt|;
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
block|{
name|httpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|metadataManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|unRegister
argument_list|()
expr_stmt|;
name|omClientProtocolMetrics
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|unregisterMXBean
argument_list|()
expr_stmt|;
if|if
condition|(
name|jvmPauseMonitor
operator|!=
literal|null
condition|)
block|{
name|jvmPauseMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"OzoneManager stop failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait until service has completed shutdown.    */
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
block|{
try|try
block|{
name|omRpcServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted during OzoneManager join."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startSecretManagerIfNecessary ()
specifier|private
name|void
name|startSecretManagerIfNecessary
parameter_list|()
block|{
name|boolean
name|shouldRun
init|=
name|isOzoneSecurityEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldRun
condition|)
block|{
name|boolean
name|running
init|=
name|delegationTokenMgr
operator|.
name|isRunning
argument_list|()
operator|&&
name|blockTokenMgr
operator|.
name|isRunning
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|running
condition|)
block|{
name|startSecretManager
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get SCM signed certificate and store it using certificate client.    * */
DECL|method|getSCMSignedCert (CertificateClient client, OzoneConfiguration config, OMStorage omStore)
specifier|private
specifier|static
name|void
name|getSCMSignedCert
parameter_list|(
name|CertificateClient
name|client
parameter_list|,
name|OzoneConfiguration
name|config
parameter_list|,
name|OMStorage
name|omStore
parameter_list|)
throws|throws
name|IOException
block|{
name|CertificateSignRequest
operator|.
name|Builder
name|builder
init|=
name|client
operator|.
name|getCSRBuilder
argument_list|()
decl_stmt|;
name|KeyPair
name|keyPair
init|=
operator|new
name|KeyPair
argument_list|(
name|client
operator|.
name|getPublicKey
argument_list|()
argument_list|,
name|client
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|omRpcAdd
decl_stmt|;
name|omRpcAdd
operator|=
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|omRpcAdd
operator|==
literal|null
operator|||
name|omRpcAdd
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Incorrect om rpc address. omRpcAdd:{}"
argument_list|,
name|omRpcAdd
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't get SCM signed certificate. "
operator|+
literal|"omRpcAdd: "
operator|+
name|omRpcAdd
argument_list|)
throw|;
block|}
comment|// Get host name.
name|String
name|hostname
init|=
name|omRpcAdd
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|String
name|ip
init|=
name|omRpcAdd
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
decl_stmt|;
name|String
name|subject
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"@"
operator|+
name|hostname
decl_stmt|;
name|builder
operator|.
name|setCA
argument_list|(
literal|false
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyPair
argument_list|)
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
operator|.
name|setScmID
argument_list|(
name|omStore
operator|.
name|getScmId
argument_list|()
argument_list|)
operator|.
name|setClusterID
argument_list|(
name|omStore
operator|.
name|getClusterID
argument_list|()
argument_list|)
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
operator|.
name|addIpAddress
argument_list|(
name|ip
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating csr for OM->dns:{},ip:{},scmId:{},clusterId:{},"
operator|+
literal|"subject:{}"
argument_list|,
name|hostname
argument_list|,
name|ip
argument_list|,
name|omStore
operator|.
name|getScmId
argument_list|()
argument_list|,
name|omStore
operator|.
name|getClusterID
argument_list|()
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|HddsProtos
operator|.
name|OzoneManagerDetailsProto
operator|.
name|Builder
name|omDetailsProtoBuilder
init|=
name|HddsProtos
operator|.
name|OzoneManagerDetailsProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setHostName
argument_list|(
name|omRpcAdd
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|setIpAddress
argument_list|(
name|ip
argument_list|)
operator|.
name|setUuid
argument_list|(
name|omStore
operator|.
name|getOmId
argument_list|()
argument_list|)
operator|.
name|addPorts
argument_list|(
name|HddsProtos
operator|.
name|Port
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|RPC_PORT
argument_list|)
operator|.
name|setValue
argument_list|(
name|omRpcAdd
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|PKCS10CertificationRequest
name|csr
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|HddsProtos
operator|.
name|OzoneManagerDetailsProto
name|omDetailsProto
init|=
name|omDetailsProtoBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OzoneManager ports added:{}"
argument_list|,
name|omDetailsProto
operator|.
name|getPortsList
argument_list|()
argument_list|)
expr_stmt|;
name|SCMSecurityProtocolClientSideTranslatorPB
name|secureScmClient
init|=
name|HddsUtils
operator|.
name|getScmSecurityClient
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|SCMGetCertResponseProto
name|response
init|=
name|secureScmClient
operator|.
name|getOMCertChain
argument_list|(
name|omDetailsProto
argument_list|,
name|getEncodedString
argument_list|(
name|csr
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|pemEncodedCert
init|=
name|response
operator|.
name|getX509Certificate
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Store SCM CA certificate.
if|if
condition|(
name|response
operator|.
name|hasX509CACertificate
argument_list|()
condition|)
block|{
name|String
name|pemEncodedRootCert
init|=
name|response
operator|.
name|getX509CACertificate
argument_list|()
decl_stmt|;
name|client
operator|.
name|storeCertificate
argument_list|(
name|pemEncodedRootCert
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|storeCertificate
argument_list|(
name|pemEncodedCert
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Persist om cert serial id.
name|omStore
operator|.
name|setOmCertSerialId
argument_list|(
name|CertificateCodec
operator|.
name|getX509Certificate
argument_list|(
name|pemEncodedCert
argument_list|)
operator|.
name|getSerialNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to retrieve OM certificate "
operator|+
literal|"chain"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|CertificateException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while storing SCM signed certificate."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    *    * @return true if delegation token operation is allowed    */
DECL|method|isAllowedDelegationTokenOp ()
specifier|private
name|boolean
name|isAllowedDelegationTokenOp
parameter_list|()
throws|throws
name|IOException
block|{
name|AuthenticationMethod
name|authMethod
init|=
name|getConnectionAuthenticationMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthenticationMethod
operator|.
name|KERBEROS
operator|)
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthenticationMethod
operator|.
name|KERBEROS_SSL
operator|)
operator|&&
operator|(
name|authMethod
operator|!=
name|AuthenticationMethod
operator|.
name|CERTIFICATE
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns authentication method used to establish the connection.    * @return AuthenticationMethod used to establish connection    * @throws IOException    */
DECL|method|getConnectionAuthenticationMethod ()
specifier|private
name|AuthenticationMethod
name|getConnectionAuthenticationMethod
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|getRemoteUser
argument_list|()
decl_stmt|;
name|AuthenticationMethod
name|authMethod
init|=
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|authMethod
operator|==
name|AuthenticationMethod
operator|.
name|PROXY
condition|)
block|{
name|authMethod
operator|=
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getAuthenticationMethod
argument_list|()
expr_stmt|;
block|}
return|return
name|authMethod
return|;
block|}
comment|// optimize ugi lookup for RPC operations to avoid a trip through
comment|// UGI.getCurrentUser which is synch'ed
DECL|method|getRemoteUser ()
specifier|private
specifier|static
name|UserGroupInformation
name|getRemoteUser
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|Server
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
return|return
operator|(
name|ugi
operator|!=
literal|null
operator|)
condition|?
name|ugi
else|:
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
comment|/**    * Get delegation token from OzoneManager.    * @param renewer Renewer information    * @return delegationToken DelegationToken signed by OzoneManager    * @throws IOException on error    */
annotation|@
name|Override
DECL|method|getDelegationToken (Text renewer)
specifier|public
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|OMException
block|{
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Delegation Token can be issued only with "
operator|+
literal|"kerberos or web authentication"
argument_list|,
name|INVALID_AUTH_METHOD
argument_list|)
throw|;
block|}
if|if
condition|(
name|delegationTokenMgr
operator|==
literal|null
operator|||
operator|!
name|delegationTokenMgr
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"trying to get DT with no secret manager running in OM."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|UserGroupInformation
name|ugi
init|=
name|getRemoteUser
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|Text
name|owner
init|=
operator|new
name|Text
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Text
name|realUser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|realUser
operator|=
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getRealUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|delegationTokenMgr
operator|.
name|createToken
argument_list|(
name|owner
argument_list|,
name|renewer
argument_list|,
name|realUser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OMException
name|oex
parameter_list|)
block|{
throw|throw
name|oex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Get Delegation token failed, cause: {}"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Get Delegation token failed."
argument_list|,
name|ex
argument_list|,
name|TOKEN_ERROR_OTHER
argument_list|)
throw|;
block|}
block|}
comment|/**    * Method to renew a delegationToken issued by OzoneManager.    * @param token token to renew    * @return new expiryTime of the token    * @throws InvalidToken if {@code token} is invalid    * @throws IOException on other errors    */
annotation|@
name|Override
DECL|method|renewDelegationToken (Token<OzoneTokenIdentifier> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|OMException
block|{
name|long
name|expiryTime
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isAllowedDelegationTokenOp
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Delegation Token can be renewed only with "
operator|+
literal|"kerberos or web authentication"
argument_list|,
name|INVALID_AUTH_METHOD
argument_list|)
throw|;
block|}
name|String
name|renewer
init|=
name|getRemoteUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|expiryTime
operator|=
name|delegationTokenMgr
operator|.
name|renewToken
argument_list|(
name|token
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|oex
parameter_list|)
block|{
throw|throw
name|oex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|OzoneTokenIdentifier
name|id
init|=
literal|null
decl_stmt|;
try|try
block|{
name|id
operator|=
name|OzoneTokenIdentifier
operator|.
name|readProtoBuf
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exe
parameter_list|)
block|{       }
name|LOG
operator|.
name|error
argument_list|(
literal|"Delegation token renewal failed for dt id: {}, cause: {}"
argument_list|,
name|id
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Delegation token renewal failed for dt: "
operator|+
name|token
argument_list|,
name|ex
argument_list|,
name|TOKEN_ERROR_OTHER
argument_list|)
throw|;
block|}
return|return
name|expiryTime
return|;
block|}
comment|/**    * Cancels a delegation token.    * @param token token to cancel    * @throws IOException on error    */
annotation|@
name|Override
DECL|method|cancelDelegationToken (Token<OzoneTokenIdentifier> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|OMException
block|{
name|OzoneTokenIdentifier
name|id
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|canceller
init|=
name|getRemoteUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|id
operator|=
name|delegationTokenMgr
operator|.
name|cancelToken
argument_list|(
name|token
argument_list|,
name|canceller
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Delegation token cancelled for dt: {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|oex
parameter_list|)
block|{
throw|throw
name|oex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Delegation token cancellation failed for dt id: {}, cause: {}"
argument_list|,
name|id
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Delegation token renewal failed for dt: "
operator|+
name|token
argument_list|,
name|ex
argument_list|,
name|TOKEN_ERROR_OTHER
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates a volume.    *    * @param args - Arguments to create Volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createVolume (OmVolumeArgs args)
specifier|public
name|void
name|createVolume
parameter_list|(
name|OmVolumeArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
if|if
condition|(
operator|!
name|ozAdmins
operator|.
name|contains
argument_list|(
name|OZONE_ADMINISTRATORS_WILDCARD
argument_list|)
operator|&&
operator|!
name|ozAdmins
operator|.
name|contains
argument_list|(
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Only admin users are authorized to create "
operator|+
literal|"Ozone volumes. User :{} is not an admin."
argument_list|,
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Only admin users are authorized to create "
operator|+
literal|"Ozone volumes."
argument_list|,
name|ResultCodes
operator|.
name|PERMISSION_DENIED
argument_list|)
throw|;
block|}
block|}
name|metrics
operator|.
name|incNumVolumeCreates
argument_list|()
expr_stmt|;
name|volumeManager
operator|.
name|createVolume
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|CREATE_VOLUME
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incNumVolumes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeCreateFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|CREATE_VOLUME
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Checks if current caller has acl permissions.    *    * @param resType - Type of ozone resource. Ex volume, bucket.    * @param store   - Store type. i.e Ozone, S3.    * @param acl     - type of access to be checked.    * @param vol     - name of volume    * @param bucket  - bucket name    * @param key     - key    * @throws OMException    */
DECL|method|checkAcls (ResourceType resType, StoreType store, ACLType acl, String vol, String bucket, String key)
specifier|private
name|void
name|checkAcls
parameter_list|(
name|ResourceType
name|resType
parameter_list|,
name|StoreType
name|store
parameter_list|,
name|ACLType
name|acl
parameter_list|,
name|String
name|vol
parameter_list|,
name|String
name|bucket
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|OMException
block|{
name|checkAcls
argument_list|(
name|resType
argument_list|,
name|store
argument_list|,
name|acl
argument_list|,
name|vol
argument_list|,
name|bucket
argument_list|,
name|key
argument_list|,
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
argument_list|,
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteIp
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * CheckAcls for the ozone object.    * @param resType    * @param storeType    * @param aclType    * @param vol    * @param bucket    * @param key    * @param ugi    * @param remoteAddress    * @throws OMException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"parameternumber"
argument_list|)
DECL|method|checkAcls (ResourceType resType, StoreType storeType, ACLType aclType, String vol, String bucket, String key, UserGroupInformation ugi, InetAddress remoteAddress)
specifier|public
name|void
name|checkAcls
parameter_list|(
name|ResourceType
name|resType
parameter_list|,
name|StoreType
name|storeType
parameter_list|,
name|ACLType
name|aclType
parameter_list|,
name|String
name|vol
parameter_list|,
name|String
name|bucket
parameter_list|,
name|String
name|key
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|InetAddress
name|remoteAddress
parameter_list|)
throws|throws
name|OMException
block|{
name|OzoneObj
name|obj
init|=
name|OzoneObjInfo
operator|.
name|Builder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResType
argument_list|(
name|resType
argument_list|)
operator|.
name|setStoreType
argument_list|(
name|storeType
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|vol
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|key
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RequestContext
name|context
init|=
name|RequestContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClientUgi
argument_list|(
name|ugi
argument_list|)
operator|.
name|setIp
argument_list|(
name|remoteAddress
argument_list|)
operator|.
name|setAclType
argument_list|(
name|ACLIdentityType
operator|.
name|USER
argument_list|)
operator|.
name|setAclRights
argument_list|(
name|aclType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|accessAuthorizer
operator|.
name|checkAccess
argument_list|(
name|obj
argument_list|,
name|context
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"User {} doesn't have {} permission to access {}"
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|aclType
argument_list|,
name|resType
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"User "
operator|+
name|ugi
operator|.
name|getUserName
argument_list|()
operator|+
literal|" doesn't "
operator|+
literal|"have "
operator|+
name|aclType
operator|+
literal|" permission to access "
operator|+
name|resType
argument_list|,
name|ResultCodes
operator|.
name|PERMISSION_DENIED
argument_list|)
throw|;
block|}
block|}
comment|/**    *    * Return true if Ozone acl's are enabled, else false.    * @return boolean    */
DECL|method|getAclsEnabled ()
specifier|public
name|boolean
name|getAclsEnabled
parameter_list|()
block|{
return|return
name|isAclEnabled
return|;
block|}
comment|/**    * Changes the owner of a volume.    *    * @param volume - Name of the volume.    * @param owner - Name of the owner.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setOwner (String volume, String owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|VOLUME
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE_ACL
argument_list|,
name|volume
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|buildAuditMap
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|OWNER
argument_list|,
name|owner
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumVolumeUpdates
argument_list|()
expr_stmt|;
name|volumeManager
operator|.
name|setOwner
argument_list|(
name|volume
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|SET_OWNER
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeUpdateFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|SET_OWNER
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Changes the Quota on a volume.    *    * @param volume - Name of the volume.    * @param quota - Quota in bytes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setQuota (String volume, long quota)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|volume
parameter_list|,
name|long
name|quota
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|VOLUME
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|volume
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|buildAuditMap
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|QUOTA
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|quota
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumVolumeUpdates
argument_list|()
expr_stmt|;
name|volumeManager
operator|.
name|setQuota
argument_list|(
name|volume
argument_list|,
name|quota
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|SET_QUOTA
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeUpdateFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|SET_QUOTA
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Checks if the specified user can access this volume.    *    * @param volume - volume    * @param userAcl - user acls which needs to be checked for access    * @return true if the user has required access for the volume, false    * otherwise    * @throws IOException    */
annotation|@
name|Override
DECL|method|checkVolumeAccess (String volume, OzoneAclInfo userAcl)
specifier|public
name|boolean
name|checkVolumeAccess
parameter_list|(
name|String
name|volume
parameter_list|,
name|OzoneAclInfo
name|userAcl
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|VOLUME
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|,
name|volume
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|buildAuditMap
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|USER_ACL
argument_list|,
operator|(
name|userAcl
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|userAcl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumVolumeCheckAccesses
argument_list|()
expr_stmt|;
return|return
name|volumeManager
operator|.
name|checkVolumeAccess
argument_list|(
name|volume
argument_list|,
name|userAcl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeCheckAccessFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|CHECK_VOLUME_ACCESS
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|CHECK_VOLUME_ACCESS
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Gets the volume information.    *    * @param volume - Volume name.    * @return VolumeArgs or exception is thrown.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getVolumeInfo (String volume)
specifier|public
name|OmVolumeArgs
name|getVolumeInfo
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|VOLUME
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|,
name|volume
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|buildAuditMap
argument_list|(
name|volume
argument_list|)
decl_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumVolumeInfos
argument_list|()
expr_stmt|;
return|return
name|volumeManager
operator|.
name|getVolumeInfo
argument_list|(
name|volume
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeInfoFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|READ_VOLUME
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|READ_VOLUME
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Deletes an existing empty volume.    *    * @param volume - Name of the volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteVolume (String volume)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|VOLUME
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|DELETE
argument_list|,
name|volume
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incNumVolumeDeletes
argument_list|()
expr_stmt|;
name|volumeManager
operator|.
name|deleteVolume
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|DELETE_VOLUME
argument_list|,
name|buildAuditMap
argument_list|(
name|volume
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|decNumVolumes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeDeleteFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|DELETE_VOLUME
argument_list|,
name|buildAuditMap
argument_list|(
name|volume
argument_list|)
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Lists volume owned by a specific user.    *    * @param userName - user name    * @param prefix - Filter prefix -- Return only entries that match this.    * @param prevKey - Previous key -- List starts from the next from the    * prevkey    * @param maxKeys - Max number of keys to return.    * @return List of Volumes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|listVolumeByUser (String userName, String prefix, String prevKey, int maxKeys)
specifier|public
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|listVolumeByUser
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|UserGroupInformation
name|remoteUserUgi
init|=
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteUserUgi
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Rpc user UGI is null. Authorization failed."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Rpc user UGI is null. Authorization "
operator|+
literal|"failed."
argument_list|,
name|ResultCodes
operator|.
name|PERMISSION_DENIED
argument_list|)
throw|;
block|}
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|PREV_KEY
argument_list|,
name|prevKey
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|PREFIX
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|MAX_KEYS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxKeys
argument_list|)
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|USERNAME
argument_list|,
name|userName
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumVolumeLists
argument_list|()
expr_stmt|;
return|return
name|volumeManager
operator|.
name|listVolumes
argument_list|(
name|userName
argument_list|,
name|prefix
argument_list|,
name|prevKey
argument_list|,
name|maxKeys
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeListFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|LIST_VOLUMES
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|LIST_VOLUMES
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Lists volume all volumes in the cluster.    *    * @param prefix - Filter prefix -- Return only entries that match this.    * @param prevKey - Previous key -- List starts from the next from the    * prevkey    * @param maxKeys - Max number of keys to return.    * @return List of Volumes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|listAllVolumes (String prefix, String prevKey, int maxKeys)
specifier|public
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|listAllVolumes
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
if|if
condition|(
operator|!
name|ozAdmins
operator|.
name|contains
argument_list|(
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|&&
operator|!
name|ozAdmins
operator|.
name|contains
argument_list|(
name|OZONE_ADMINISTRATORS_WILDCARD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Only admin users are authorized to create "
operator|+
literal|"Ozone volumes."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Only admin users are authorized to create "
operator|+
literal|"Ozone volumes."
argument_list|,
name|ResultCodes
operator|.
name|PERMISSION_DENIED
argument_list|)
throw|;
block|}
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|PREV_KEY
argument_list|,
name|prevKey
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|PREFIX
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|MAX_KEYS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxKeys
argument_list|)
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|USERNAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumVolumeLists
argument_list|()
expr_stmt|;
return|return
name|volumeManager
operator|.
name|listVolumes
argument_list|(
literal|null
argument_list|,
name|prefix
argument_list|,
name|prevKey
argument_list|,
name|maxKeys
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumVolumeListFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|LIST_VOLUMES
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|LIST_VOLUMES
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creates a bucket.    *    * @param bucketInfo - BucketInfo to create bucket.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createBucket (OmBucketInfo bucketInfo)
specifier|public
name|void
name|createBucket
parameter_list|(
name|OmBucketInfo
name|bucketInfo
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|VOLUME
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|CREATE
argument_list|,
name|bucketInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|bucketInfo
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incNumBucketCreates
argument_list|()
expr_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|CREATE_BUCKET
argument_list|,
operator|(
name|bucketInfo
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|bucketInfo
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incNumBuckets
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketCreateFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|CREATE_BUCKET
argument_list|,
operator|(
name|bucketInfo
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|bucketInfo
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|listBuckets (String volumeName, String startKey, String prefix, int maxNumOfBuckets)
specifier|public
name|List
argument_list|<
name|OmBucketInfo
argument_list|>
name|listBuckets
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|prefix
parameter_list|,
name|int
name|maxNumOfBuckets
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|VOLUME
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|LIST
argument_list|,
name|volumeName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|buildAuditMap
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|START_KEY
argument_list|,
name|startKey
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|PREFIX
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|MAX_NUM_OF_BUCKETS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxNumOfBuckets
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumBucketLists
argument_list|()
expr_stmt|;
return|return
name|bucketManager
operator|.
name|listBuckets
argument_list|(
name|volumeName
argument_list|,
name|startKey
argument_list|,
name|prefix
argument_list|,
name|maxNumOfBuckets
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketListFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|LIST_BUCKETS
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|LIST_BUCKETS
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Gets the bucket information.    *    * @param volume - Volume name.    * @param bucket - Bucket name.    * @return OmBucketInfo or exception is thrown.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getBucketInfo (String volume, String bucket)
specifier|public
name|OmBucketInfo
name|getBucketInfo
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|,
name|volume
argument_list|,
name|bucket
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|buildAuditMap
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|BUCKET
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumBucketInfos
argument_list|()
expr_stmt|;
return|return
name|bucketManager
operator|.
name|getBucketInfo
argument_list|(
name|volume
argument_list|,
name|bucket
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketInfoFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|READ_BUCKET
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|READ_BUCKET
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Allocate a key.    *    * @param args - attributes of the key.    * @return OmKeyInfo - the info about the allocated key.    * @throws IOException    */
annotation|@
name|Override
DECL|method|openKey (OmKeyArgs args)
specifier|public
name|OpenKeySession
name|openKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
try|try
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|KEY
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
comment|// For new keys key checkAccess call will fail as key doesn't exist.
comment|// Check user access for bucket.
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|.
name|equals
argument_list|(
name|KEY_NOT_FOUND
argument_list|)
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumKeyAllocates
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|openKey
argument_list|(
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumKeyAllocateFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|ALLOCATE_KEY
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|ALLOCATE_KEY
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|toAuditMap (KeyArgs omKeyArgs)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toAuditMap
parameter_list|(
name|KeyArgs
name|omKeyArgs
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|VOLUME
argument_list|,
name|omKeyArgs
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|BUCKET
argument_list|,
name|omKeyArgs
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|KEY
argument_list|,
name|omKeyArgs
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|DATA_SIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|omKeyArgs
operator|.
name|getDataSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|REPLICATION_TYPE
argument_list|,
name|omKeyArgs
operator|.
name|hasType
argument_list|()
condition|?
name|omKeyArgs
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|REPLICATION_FACTOR
argument_list|,
name|omKeyArgs
operator|.
name|hasFactor
argument_list|()
condition|?
name|omKeyArgs
operator|.
name|getFactor
argument_list|()
operator|.
name|name
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|KEY_LOCATION_INFO
argument_list|,
operator|(
name|omKeyArgs
operator|.
name|getKeyLocationsList
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|omKeyArgs
operator|.
name|getKeyLocationsList
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
name|auditMap
return|;
block|}
annotation|@
name|Override
DECL|method|commitKey (OmKeyArgs args, long clientID)
specifier|public
name|void
name|commitKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|long
name|clientID
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
try|try
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|KEY
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
comment|// For new keys key checkAccess call will fail as key doesn't exist.
comment|// Check user access for bucket.
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|.
name|equals
argument_list|(
name|KEY_NOT_FOUND
argument_list|)
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|CLIENT_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clientID
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumKeyCommits
argument_list|()
expr_stmt|;
name|keyManager
operator|.
name|commitKey
argument_list|(
name|args
argument_list|,
name|clientID
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|COMMIT_KEY
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
comment|// As when we commit the key it is visible, so we should increment here.
comment|// As key also can have multiple versions, we need to increment keys
comment|// only if version is 0. Currently we have not complete support of
comment|// versioning of keys. So, this can be revisited later.
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|getLocationInfoList
argument_list|()
operator|!=
literal|null
operator|&&
name|args
operator|.
name|getLocationInfoList
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|args
operator|.
name|getLocationInfoList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
operator|&&
name|args
operator|.
name|getLocationInfoList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCreateVersion
argument_list|()
operator|==
literal|0
condition|)
block|{
name|metrics
operator|.
name|incNumKeys
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumKeyCommitFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|COMMIT_KEY
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|allocateBlock (OmKeyArgs args, long clientID, ExcludeList excludeList)
specifier|public
name|OmKeyLocationInfo
name|allocateBlock
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|long
name|clientID
parameter_list|,
name|ExcludeList
name|excludeList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
try|try
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|KEY
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
comment|// For new keys key checkAccess call will fail as key doesn't exist.
comment|// Check user access for bucket.
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|.
name|equals
argument_list|(
name|KEY_NOT_FOUND
argument_list|)
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|CLIENT_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clientID
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumBlockAllocateCalls
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|allocateBlock
argument_list|(
name|args
argument_list|,
name|clientID
argument_list|,
name|excludeList
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBlockAllocateCallFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|ALLOCATE_BLOCK
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|ALLOCATE_BLOCK
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Lookup a key.    *    * @param args - attributes of the key.    * @return OmKeyInfo - the info about the requested key.    * @throws IOException    */
annotation|@
name|Override
DECL|method|lookupKey (OmKeyArgs args)
specifier|public
name|OmKeyInfo
name|lookupKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|KEY
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumKeyLookups
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|lookupKey
argument_list|(
name|args
argument_list|,
name|getClientAddress
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumKeyLookupFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|READ_KEY
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|READ_KEY
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|renameKey (OmKeyArgs args, String toKeyName)
specifier|public
name|void
name|renameKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|String
name|toKeyName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|KEY
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|TO_KEY_NAME
argument_list|,
name|toKeyName
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumKeyRenames
argument_list|()
expr_stmt|;
name|keyManager
operator|.
name|renameKey
argument_list|(
name|args
argument_list|,
name|toKeyName
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|RENAME_KEY
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|metrics
operator|.
name|incNumKeyRenameFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|RENAME_KEY
argument_list|,
name|auditMap
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Deletes an existing key.    *    * @param args - attributes of the key.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteKey (OmKeyArgs args)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|KEY
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|DELETE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incNumKeyDeletes
argument_list|()
expr_stmt|;
name|keyManager
operator|.
name|deleteKey
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|DELETE_KEY
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|decNumKeys
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumKeyDeleteFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|DELETE_KEY
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|listKeys (String volumeName, String bucketName, String startKey, String keyPrefix, int maxKeys)
specifier|public
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|listKeys
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|keyPrefix
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|LIST
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyPrefix
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|buildAuditMap
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|BUCKET
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|START_KEY
argument_list|,
name|startKey
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|MAX_KEYS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxKeys
argument_list|)
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|KEY_PREFIX
argument_list|,
name|keyPrefix
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumKeyLists
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|listKeys
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|startKey
argument_list|,
name|keyPrefix
argument_list|,
name|maxKeys
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumKeyListFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|LIST_KEYS
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|LIST_KEYS
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Sets bucket property from args.    *    * @param args - BucketArgs.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setBucketProperty (OmBucketArgs args)
specifier|public
name|void
name|setBucketProperty
parameter_list|(
name|OmBucketArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|metrics
operator|.
name|incNumBucketUpdates
argument_list|()
expr_stmt|;
name|bucketManager
operator|.
name|setBucketProperty
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|UPDATE_BUCKET
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketUpdateFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|UPDATE_BUCKET
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Deletes an existing empty bucket from volume.    *    * @param volume - Name of the volume.    * @param bucket - Name of the bucket.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteBucket (String volume, String bucket)
specifier|public
name|void
name|deleteBucket
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|volume
argument_list|,
name|bucket
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|buildAuditMap
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|BUCKET
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumBucketDeletes
argument_list|()
expr_stmt|;
name|bucketManager
operator|.
name|deleteBucket
argument_list|(
name|volume
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|DELETE_BUCKET
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|decNumBuckets
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketDeleteFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|DELETE_BUCKET
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|buildAuditMap (String volume)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildAuditMap
parameter_list|(
name|String
name|volume
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|VOLUME
argument_list|,
name|volume
argument_list|)
expr_stmt|;
return|return
name|auditMap
return|;
block|}
DECL|method|getAuditLogger ()
specifier|public
name|AuditLogger
name|getAuditLogger
parameter_list|()
block|{
return|return
name|AUDIT
return|;
block|}
annotation|@
name|Override
DECL|method|buildAuditMessageForSuccess (AuditAction op, Map<String, String> auditMap)
specifier|public
name|AuditMessage
name|buildAuditMessageForSuccess
parameter_list|(
name|AuditAction
name|op
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
parameter_list|)
block|{
return|return
operator|new
name|AuditMessage
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
operator|(
name|Server
operator|.
name|getRemoteUser
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Server
operator|.
name|getRemoteUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|atIp
argument_list|(
operator|(
name|Server
operator|.
name|getRemoteIp
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Server
operator|.
name|getRemoteIp
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
operator|.
name|forOperation
argument_list|(
name|op
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|withParams
argument_list|(
name|auditMap
argument_list|)
operator|.
name|withResult
argument_list|(
name|AuditEventStatus
operator|.
name|SUCCESS
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withException
argument_list|(
literal|null
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|buildAuditMessageForFailure (AuditAction op, Map<String, String> auditMap, Throwable throwable)
specifier|public
name|AuditMessage
name|buildAuditMessageForFailure
parameter_list|(
name|AuditAction
name|op
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
return|return
operator|new
name|AuditMessage
operator|.
name|Builder
argument_list|()
operator|.
name|setUser
argument_list|(
operator|(
name|Server
operator|.
name|getRemoteUser
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Server
operator|.
name|getRemoteUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|atIp
argument_list|(
operator|(
name|Server
operator|.
name|getRemoteIp
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Server
operator|.
name|getRemoteIp
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|)
operator|.
name|forOperation
argument_list|(
name|op
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|withParams
argument_list|(
name|auditMap
argument_list|)
operator|.
name|withResult
argument_list|(
name|AuditEventStatus
operator|.
name|FAILURE
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withException
argument_list|(
name|throwable
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|registerMXBean ()
specifier|private
name|void
name|registerMXBean
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jmxProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|jmxProperties
operator|.
name|put
argument_list|(
literal|"component"
argument_list|,
literal|"ServerRuntime"
argument_list|)
expr_stmt|;
name|this
operator|.
name|omInfoBeanName
operator|=
name|HddsUtils
operator|.
name|registerWithJmxProperties
argument_list|(
literal|"OzoneManager"
argument_list|,
literal|"OzoneManagerInfo"
argument_list|,
name|jmxProperties
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterMXBean ()
specifier|private
name|void
name|unregisterMXBean
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|omInfoBeanName
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|this
operator|.
name|omInfoBeanName
argument_list|)
expr_stmt|;
name|this
operator|.
name|omInfoBeanName
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|getClientAddress ()
specifier|private
specifier|static
name|String
name|getClientAddress
parameter_list|()
block|{
name|String
name|clientMachine
init|=
name|Server
operator|.
name|getRemoteAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientMachine
operator|==
literal|null
condition|)
block|{
comment|//not a RPC client
name|clientMachine
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|clientMachine
return|;
block|}
annotation|@
name|Override
DECL|method|getRpcPort ()
specifier|public
name|String
name|getRpcPort
parameter_list|()
block|{
return|return
literal|""
operator|+
name|omRpcAddress
operator|.
name|getPort
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHttpServer ()
specifier|public
name|OzoneManagerHttpServer
name|getHttpServer
parameter_list|()
block|{
return|return
name|httpServer
return|;
block|}
annotation|@
name|Override
DECL|method|getServiceList ()
specifier|public
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|getServiceList
parameter_list|()
throws|throws
name|IOException
block|{
comment|// When we implement multi-home this call has to be handled properly.
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ServiceInfo
operator|.
name|Builder
name|omServiceInfoBuilder
init|=
name|ServiceInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNodeType
argument_list|(
name|HddsProtos
operator|.
name|NodeType
operator|.
name|OM
argument_list|)
operator|.
name|setHostname
argument_list|(
name|omRpcAddress
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|addServicePort
argument_list|(
name|ServicePort
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|ServicePort
operator|.
name|Type
operator|.
name|RPC
argument_list|)
operator|.
name|setValue
argument_list|(
name|omRpcAddress
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpServer
operator|.
name|getHttpAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|omServiceInfoBuilder
operator|.
name|addServicePort
argument_list|(
name|ServicePort
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|ServicePort
operator|.
name|Type
operator|.
name|HTTP
argument_list|)
operator|.
name|setValue
argument_list|(
name|httpServer
operator|.
name|getHttpAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpServer
operator|.
name|getHttpsAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|omServiceInfoBuilder
operator|.
name|addServicePort
argument_list|(
name|ServicePort
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|ServicePort
operator|.
name|Type
operator|.
name|HTTPS
argument_list|)
operator|.
name|setValue
argument_list|(
name|httpServer
operator|.
name|getHttpsAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|services
operator|.
name|add
argument_list|(
name|omServiceInfoBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// For client we have to return SCM with container protocol port,
comment|// not block protocol.
name|InetSocketAddress
name|scmAddr
init|=
name|getScmAddressForClients
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|ServiceInfo
operator|.
name|Builder
name|scmServiceInfoBuilder
init|=
name|ServiceInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNodeType
argument_list|(
name|HddsProtos
operator|.
name|NodeType
operator|.
name|SCM
argument_list|)
operator|.
name|setHostname
argument_list|(
name|scmAddr
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|addServicePort
argument_list|(
name|ServicePort
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|ServicePort
operator|.
name|Type
operator|.
name|RPC
argument_list|)
operator|.
name|setValue
argument_list|(
name|scmAddr
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|services
operator|.
name|add
argument_list|(
name|scmServiceInfoBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HddsProtos
operator|.
name|Node
argument_list|>
name|nodes
init|=
name|scmContainerClient
operator|.
name|queryNode
argument_list|(
name|HEALTHY
argument_list|,
name|HddsProtos
operator|.
name|QueryScope
operator|.
name|CLUSTER
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|HddsProtos
operator|.
name|Node
name|node
range|:
name|nodes
control|)
block|{
name|HddsProtos
operator|.
name|DatanodeDetailsProto
name|datanode
init|=
name|node
operator|.
name|getNodeID
argument_list|()
decl_stmt|;
name|ServiceInfo
operator|.
name|Builder
name|dnServiceInfoBuilder
init|=
name|ServiceInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNodeType
argument_list|(
name|HddsProtos
operator|.
name|NodeType
operator|.
name|DATANODE
argument_list|)
operator|.
name|setHostname
argument_list|(
name|datanode
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|DatanodeDetails
operator|.
name|getFromProtoBuf
argument_list|(
name|datanode
argument_list|)
operator|.
name|getPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|REST
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|dnServiceInfoBuilder
operator|.
name|addServicePort
argument_list|(
name|ServicePort
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|ServicePort
operator|.
name|Type
operator|.
name|HTTP
argument_list|)
operator|.
name|setValue
argument_list|(
name|DatanodeDetails
operator|.
name|getFromProtoBuf
argument_list|(
name|datanode
argument_list|)
operator|.
name|getPort
argument_list|(
name|DatanodeDetails
operator|.
name|Port
operator|.
name|Name
operator|.
name|REST
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|services
operator|.
name|add
argument_list|(
name|dnServiceInfoBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incNumGetServiceLists
argument_list|()
expr_stmt|;
comment|// For now there is no exception that can can happen in this call,
comment|// so failure metrics is not handled. In future if there is any need to
comment|// handle exception in this method, we need to incorporate
comment|// metrics.incNumGetServiceListFails()
return|return
name|services
return|;
block|}
annotation|@
name|Override
comment|/**    * {@inheritDoc}    */
DECL|method|createS3Bucket (String userName, String s3BucketName)
specifier|public
name|void
name|createS3Bucket
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|acquiredS3Lock
init|=
literal|false
decl_stmt|;
name|boolean
name|acquiredVolumeLock
init|=
literal|false
decl_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumBucketCreates
argument_list|()
expr_stmt|;
name|acquiredS3Lock
operator|=
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|S3_BUCKET_LOCK
argument_list|,
name|s3BucketName
argument_list|)
expr_stmt|;
try|try
block|{
name|acquiredVolumeLock
operator|=
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|s3BucketManager
operator|.
name|formatOzoneVolumeName
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|newVolumeCreate
init|=
name|s3BucketManager
operator|.
name|createOzoneVolumeIfNeeded
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|newVolumeCreate
condition|)
block|{
name|metrics
operator|.
name|incNumVolumeCreates
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incNumVolumes
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// We need to increment volume creates also because this is first
comment|// time we are trying to create a volume, it failed. As we increment
comment|// ops and create when we try to do that operation.
name|metrics
operator|.
name|incNumVolumeCreates
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incNumVolumeCreateFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|s3BucketManager
operator|.
name|createS3Bucket
argument_list|(
name|userName
argument_list|,
name|s3BucketName
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incNumBuckets
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketCreateFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|acquiredVolumeLock
condition|)
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|s3BucketManager
operator|.
name|formatOzoneVolumeName
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acquiredS3Lock
condition|)
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|S3_BUCKET_LOCK
argument_list|,
name|s3BucketName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
comment|/**    * {@inheritDoc}    */
DECL|method|deleteS3Bucket (String s3BucketName)
specifier|public
name|void
name|deleteS3Bucket
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|S3
argument_list|,
name|ACLType
operator|.
name|DELETE
argument_list|,
name|getS3VolumeName
argument_list|()
argument_list|,
name|s3BucketName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|incNumBucketDeletes
argument_list|()
expr_stmt|;
name|s3BucketManager
operator|.
name|deleteS3Bucket
argument_list|(
name|s3BucketName
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|decNumBuckets
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumBucketDeleteFails
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|/**    * {@inheritDoc}    */
DECL|method|getS3Secret (String kerberosID)
specifier|public
name|S3SecretValue
name|getS3Secret
parameter_list|(
name|String
name|kerberosID
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|user
init|=
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
comment|// Check whether user name passed is matching with the current user or not.
if|if
condition|(
operator|!
name|user
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|kerberosID
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"User mismatch. Requested user name is "
operator|+
literal|"mismatched "
operator|+
name|kerberosID
operator|+
literal|", with current user "
operator|+
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|USER_MISMATCH
argument_list|)
throw|;
block|}
return|return
name|s3SecretManager
operator|.
name|getS3Secret
argument_list|(
name|kerberosID
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|/**    * {@inheritDoc}    */
DECL|method|getOzoneBucketMapping (String s3BucketName)
specifier|public
name|String
name|getOzoneBucketMapping
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|S3
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|,
name|getS3VolumeName
argument_list|()
argument_list|,
name|s3BucketName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|s3BucketManager
operator|.
name|getOzoneBucketMapping
argument_list|(
name|s3BucketName
argument_list|)
return|;
block|}
comment|/**    * Helper function to return volume name for S3 users.    * */
DECL|method|getS3VolumeName ()
specifier|private
name|String
name|getS3VolumeName
parameter_list|()
block|{
return|return
name|s3BucketManager
operator|.
name|formatOzoneVolumeName
argument_list|(
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
operator|.
name|getUserName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listS3Buckets (String userName, String startKey, String prefix, int maxNumOfBuckets)
specifier|public
name|List
argument_list|<
name|OmBucketInfo
argument_list|>
name|listS3Buckets
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|prefix
parameter_list|,
name|int
name|maxNumOfBuckets
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|VOLUME
argument_list|,
name|StoreType
operator|.
name|S3
argument_list|,
name|ACLType
operator|.
name|LIST
argument_list|,
name|s3BucketManager
operator|.
name|getOzoneVolumeNameForUser
argument_list|(
name|userName
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|buildAuditMap
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|START_KEY
argument_list|,
name|startKey
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|PREFIX
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|MAX_NUM_OF_BUCKETS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|maxNumOfBuckets
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumListS3Buckets
argument_list|()
expr_stmt|;
name|String
name|volumeName
init|=
name|s3BucketManager
operator|.
name|getOzoneVolumeNameForUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
return|return
name|bucketManager
operator|.
name|listBuckets
argument_list|(
name|volumeName
argument_list|,
name|startKey
argument_list|,
name|prefix
argument_list|,
name|maxNumOfBuckets
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumListS3BucketsFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logReadFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|LIST_S3BUCKETS
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logReadSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|LIST_S3BUCKETS
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|initiateMultipartUpload (OmKeyArgs keyArgs)
specifier|public
name|OmMultipartInfo
name|initiateMultipartUpload
parameter_list|(
name|OmKeyArgs
name|keyArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|OmMultipartInfo
name|multipartInfo
decl_stmt|;
name|metrics
operator|.
name|incNumInitiateMultipartUploads
argument_list|()
expr_stmt|;
try|try
block|{
name|multipartInfo
operator|=
name|keyManager
operator|.
name|initiateMultipartUpload
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|INITIATE_MULTIPART_UPLOAD
argument_list|,
operator|(
name|keyArgs
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|keyArgs
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|INITIATE_MULTIPART_UPLOAD
argument_list|,
operator|(
name|keyArgs
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|keyArgs
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incNumInitiateMultipartUploadFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|multipartInfo
return|;
block|}
annotation|@
name|Override
DECL|method|commitMultipartUploadPart ( OmKeyArgs keyArgs, long clientID)
specifier|public
name|OmMultipartCommitUploadPartInfo
name|commitMultipartUploadPart
parameter_list|(
name|OmKeyArgs
name|keyArgs
parameter_list|,
name|long
name|clientID
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|auditSuccess
init|=
literal|false
decl_stmt|;
name|OmMultipartCommitUploadPartInfo
name|commitUploadPartInfo
decl_stmt|;
name|metrics
operator|.
name|incNumCommitMultipartUploadParts
argument_list|()
expr_stmt|;
try|try
block|{
name|commitUploadPartInfo
operator|=
name|keyManager
operator|.
name|commitMultipartUploadPart
argument_list|(
name|keyArgs
argument_list|,
name|clientID
argument_list|)
expr_stmt|;
name|auditSuccess
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|INITIATE_MULTIPART_UPLOAD
argument_list|,
operator|(
name|keyArgs
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|keyArgs
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incNumCommitMultipartUploadPartFails
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|COMMIT_MULTIPART_UPLOAD_PARTKEY
argument_list|,
operator|(
name|keyArgs
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|keyArgs
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|commitUploadPartInfo
return|;
block|}
annotation|@
name|Override
DECL|method|completeMultipartUpload ( OmKeyArgs omKeyArgs, OmMultipartUploadList multipartUploadList)
specifier|public
name|OmMultipartUploadCompleteInfo
name|completeMultipartUpload
parameter_list|(
name|OmKeyArgs
name|omKeyArgs
parameter_list|,
name|OmMultipartUploadList
name|multipartUploadList
parameter_list|)
throws|throws
name|IOException
block|{
name|OmMultipartUploadCompleteInfo
name|omMultipartUploadCompleteInfo
decl_stmt|;
name|metrics
operator|.
name|incNumCompleteMultipartUploads
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|(
name|omKeyArgs
operator|==
literal|null
operator|)
condition|?
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
else|:
name|omKeyArgs
operator|.
name|toAuditMap
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|MULTIPART_LIST
argument_list|,
name|multipartUploadList
operator|.
name|getMultipartMap
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|omMultipartUploadCompleteInfo
operator|=
name|keyManager
operator|.
name|completeMultipartUpload
argument_list|(
name|omKeyArgs
argument_list|,
name|multipartUploadList
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|COMPLETE_MULTIPART_UPLOAD
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|omMultipartUploadCompleteInfo
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumCompleteMultipartUploadFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|COMPLETE_MULTIPART_UPLOAD
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|abortMultipartUpload (OmKeyArgs omKeyArgs)
specifier|public
name|void
name|abortMultipartUpload
parameter_list|(
name|OmKeyArgs
name|omKeyArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|(
name|omKeyArgs
operator|==
literal|null
operator|)
condition|?
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
else|:
name|omKeyArgs
operator|.
name|toAuditMap
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incNumAbortMultipartUploads
argument_list|()
expr_stmt|;
try|try
block|{
name|keyManager
operator|.
name|abortMultipartUpload
argument_list|(
name|omKeyArgs
argument_list|)
expr_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|COMPLETE_MULTIPART_UPLOAD
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumAbortMultipartUploadFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|COMPLETE_MULTIPART_UPLOAD
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|listParts (String volumeName, String bucketName, String keyName, String uploadID, int partNumberMarker, int maxParts)
specifier|public
name|OmMultipartUploadListParts
name|listParts
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|keyName
parameter_list|,
name|String
name|uploadID
parameter_list|,
name|int
name|partNumberMarker
parameter_list|,
name|int
name|maxParts
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|VOLUME
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|BUCKET
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|KEY
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|UPLOAD_ID
argument_list|,
name|uploadID
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|PART_NUMBER_MARKER
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|partNumberMarker
argument_list|)
argument_list|)
expr_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|MAX_PARTS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxParts
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incNumListMultipartUploadParts
argument_list|()
expr_stmt|;
try|try
block|{
name|OmMultipartUploadListParts
name|omMultipartUploadListParts
init|=
name|keyManager
operator|.
name|listParts
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|uploadID
argument_list|,
name|partNumberMarker
argument_list|,
name|maxParts
argument_list|)
decl_stmt|;
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|LIST_MULTIPART_UPLOAD_PARTS
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|omMultipartUploadListParts
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumListMultipartUploadPartFails
argument_list|()
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|LIST_MULTIPART_UPLOAD_PARTS
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFileStatus (OmKeyArgs args)
specifier|public
name|OzoneFileStatus
name|getFileStatus
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|getResourceType
argument_list|(
name|args
argument_list|)
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumGetFileStatus
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|getFileStatus
argument_list|(
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumGetFileStatusFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|GET_FILE_STATUS
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|GET_FILE_STATUS
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getResourceType (OmKeyArgs args)
specifier|private
name|ResourceType
name|getResourceType
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|getKeyName
argument_list|()
operator|==
literal|null
operator|||
name|args
operator|.
name|getKeyName
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|ResourceType
operator|.
name|BUCKET
return|;
block|}
return|return
name|ResourceType
operator|.
name|KEY
return|;
block|}
annotation|@
name|Override
DECL|method|createDirectory (OmKeyArgs args)
specifier|public
name|void
name|createDirectory
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumCreateDirectory
argument_list|()
expr_stmt|;
name|keyManager
operator|.
name|createDirectory
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumCreateDirectoryFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|CREATE_DIRECTORY
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|CREATE_DIRECTORY
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createFile (OmKeyArgs args, boolean overWrite, boolean recursive)
specifier|public
name|OpenKeySession
name|createFile
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|boolean
name|overWrite
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumCreateFile
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|createFile
argument_list|(
name|args
argument_list|,
name|overWrite
argument_list|,
name|recursive
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumCreateFileFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|CREATE_FILE
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|CREATE_FILE
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|lookupFile (OmKeyArgs args)
specifier|public
name|OmKeyInfo
name|lookupFile
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|ResourceType
operator|.
name|KEY
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumLookupFile
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|lookupFile
argument_list|(
name|args
argument_list|,
name|getClientAddress
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumLookupFileFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|LOOKUP_FILE
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|LOOKUP_FILE
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|listStatus (OmKeyArgs args, boolean recursive, String startKey, long numEntries)
specifier|public
name|List
argument_list|<
name|OzoneFileStatus
argument_list|>
name|listStatus
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|String
name|startKey
parameter_list|,
name|long
name|numEntries
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|getResourceType
argument_list|(
name|args
argument_list|)
argument_list|,
name|StoreType
operator|.
name|OZONE
argument_list|,
name|ACLType
operator|.
name|READ
argument_list|,
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
name|metrics
operator|.
name|incNumListStatus
argument_list|()
expr_stmt|;
return|return
name|keyManager
operator|.
name|listStatus
argument_list|(
name|args
argument_list|,
name|recursive
argument_list|,
name|startKey
argument_list|,
name|numEntries
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|metrics
operator|.
name|incNumListStatusFails
argument_list|()
expr_stmt|;
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|OMAction
operator|.
name|LIST_STATUS
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|OMAction
operator|.
name|LIST_STATUS
argument_list|,
operator|(
name|args
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|args
operator|.
name|toAuditMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|auditAcl (OzoneObj ozoneObj, List<OzoneAcl> ozoneAcl, OMAction omAction, Exception ex)
specifier|private
name|void
name|auditAcl
parameter_list|(
name|OzoneObj
name|ozoneObj
parameter_list|,
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|ozoneAcl
parameter_list|,
name|OMAction
name|omAction
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|ozoneObj
operator|.
name|toAuditMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|ozoneAcl
operator|!=
literal|null
condition|)
block|{
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|ACL
argument_list|,
name|ozoneAcl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
name|AUDIT
operator|.
name|logWriteSuccess
argument_list|(
name|buildAuditMessageForSuccess
argument_list|(
name|omAction
argument_list|,
name|auditMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AUDIT
operator|.
name|logWriteFailure
argument_list|(
name|buildAuditMessageForFailure
argument_list|(
name|omAction
argument_list|,
name|auditMap
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add acl for Ozone object. Return true if acl is added successfully else    * false.    *    * @param obj Ozone object for which acl should be added.    * @param acl ozone acl top be added.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|addAcl (OzoneObj obj, OzoneAcl acl)
specifier|public
name|boolean
name|addAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|OzoneAcl
name|acl
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|obj
operator|.
name|getStoreType
argument_list|()
argument_list|,
name|ACLType
operator|.
name|WRITE_ACL
argument_list|,
name|obj
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|obj
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|obj
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|obj
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|VOLUME
case|:
return|return
name|volumeManager
operator|.
name|addAcl
argument_list|(
name|obj
argument_list|,
name|acl
argument_list|)
return|;
case|case
name|BUCKET
case|:
return|return
name|bucketManager
operator|.
name|addAcl
argument_list|(
name|obj
argument_list|,
name|acl
argument_list|)
return|;
case|case
name|KEY
case|:
return|return
name|keyManager
operator|.
name|addAcl
argument_list|(
name|obj
argument_list|,
name|acl
argument_list|)
return|;
case|case
name|PREFIX
case|:
return|return
name|prefixManager
operator|.
name|addAcl
argument_list|(
name|obj
argument_list|,
name|acl
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Unexpected resource type: "
operator|+
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|auditAcl
argument_list|(
name|obj
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|acl
argument_list|)
argument_list|,
name|OMAction
operator|.
name|ADD_ACL
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|auditAcl
argument_list|(
name|obj
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|acl
argument_list|)
argument_list|,
name|OMAction
operator|.
name|ADD_ACL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Remove acl for Ozone object. Return true if acl is removed successfully    * else false.    *    * @param obj Ozone object.    * @param acl Ozone acl to be removed.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|removeAcl (OzoneObj obj, OzoneAcl acl)
specifier|public
name|boolean
name|removeAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|OzoneAcl
name|acl
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|obj
operator|.
name|getStoreType
argument_list|()
argument_list|,
name|ACLType
operator|.
name|WRITE_ACL
argument_list|,
name|obj
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|obj
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|obj
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|obj
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|VOLUME
case|:
return|return
name|volumeManager
operator|.
name|removeAcl
argument_list|(
name|obj
argument_list|,
name|acl
argument_list|)
return|;
case|case
name|BUCKET
case|:
return|return
name|bucketManager
operator|.
name|removeAcl
argument_list|(
name|obj
argument_list|,
name|acl
argument_list|)
return|;
case|case
name|KEY
case|:
return|return
name|keyManager
operator|.
name|removeAcl
argument_list|(
name|obj
argument_list|,
name|acl
argument_list|)
return|;
case|case
name|PREFIX
case|:
return|return
name|prefixManager
operator|.
name|removeAcl
argument_list|(
name|obj
argument_list|,
name|acl
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Unexpected resource type: "
operator|+
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|auditAcl
argument_list|(
name|obj
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|acl
argument_list|)
argument_list|,
name|OMAction
operator|.
name|REMOVE_ACL
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|auditAcl
argument_list|(
name|obj
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|acl
argument_list|)
argument_list|,
name|OMAction
operator|.
name|REMOVE_ACL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Acls to be set for given Ozone object. This operations reset ACL for given    * object to list of ACLs provided in argument.    *    * @param obj Ozone object.    * @param acls List of acls.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|setAcl (OzoneObj obj, List<OzoneAcl> acls)
specifier|public
name|boolean
name|setAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|obj
operator|.
name|getStoreType
argument_list|()
argument_list|,
name|ACLType
operator|.
name|WRITE_ACL
argument_list|,
name|obj
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|obj
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|obj
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|obj
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|VOLUME
case|:
return|return
name|volumeManager
operator|.
name|setAcl
argument_list|(
name|obj
argument_list|,
name|acls
argument_list|)
return|;
case|case
name|BUCKET
case|:
return|return
name|bucketManager
operator|.
name|setAcl
argument_list|(
name|obj
argument_list|,
name|acls
argument_list|)
return|;
case|case
name|KEY
case|:
return|return
name|keyManager
operator|.
name|setAcl
argument_list|(
name|obj
argument_list|,
name|acls
argument_list|)
return|;
case|case
name|PREFIX
case|:
return|return
name|prefixManager
operator|.
name|setAcl
argument_list|(
name|obj
argument_list|,
name|acls
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Unexpected resource type: "
operator|+
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|auditAcl
argument_list|(
name|obj
argument_list|,
name|acls
argument_list|,
name|OMAction
operator|.
name|SET_ACL
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|auditAcl
argument_list|(
name|obj
argument_list|,
name|acls
argument_list|,
name|OMAction
operator|.
name|SET_ACL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns list of ACLs for given Ozone object.    *    * @param obj Ozone object.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|getAcl (OzoneObj obj)
specifier|public
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|getAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|auditSuccess
init|=
literal|true
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isAclEnabled
condition|)
block|{
name|checkAcls
argument_list|(
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|obj
operator|.
name|getStoreType
argument_list|()
argument_list|,
name|ACLType
operator|.
name|READ_ACL
argument_list|,
name|obj
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|obj
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|obj
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|obj
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|VOLUME
case|:
return|return
name|volumeManager
operator|.
name|getAcl
argument_list|(
name|obj
argument_list|)
return|;
case|case
name|BUCKET
case|:
return|return
name|bucketManager
operator|.
name|getAcl
argument_list|(
name|obj
argument_list|)
return|;
case|case
name|KEY
case|:
return|return
name|keyManager
operator|.
name|getAcl
argument_list|(
name|obj
argument_list|)
return|;
case|case
name|PREFIX
case|:
return|return
name|prefixManager
operator|.
name|getAcl
argument_list|(
name|obj
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Unexpected resource type: "
operator|+
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|INVALID_REQUEST
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|auditSuccess
operator|=
literal|false
expr_stmt|;
name|auditAcl
argument_list|(
name|obj
argument_list|,
literal|null
argument_list|,
name|OMAction
operator|.
name|GET_ACL
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|auditSuccess
condition|)
block|{
name|auditAcl
argument_list|(
name|obj
argument_list|,
literal|null
argument_list|,
name|OMAction
operator|.
name|GET_ACL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Download and install latest checkpoint from leader OM.    * If the download checkpoints snapshot index is greater than this OM's    * last applied transaction index, then re-initialize the OM state via this    * checkpoint. Before re-initializing OM state, the OM Ratis server should    * be stopped so that no new transactions can be applied.    * @param leaderId peerNodeID of the leader OM    * @return If checkpoint is installed, return the corresponding termIndex.    * Otherwise, return null.    */
DECL|method|installSnapshot (String leaderId)
specifier|public
name|TermIndex
name|installSnapshot
parameter_list|(
name|String
name|leaderId
parameter_list|)
block|{
if|if
condition|(
name|omSnapshotProvider
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"OM Snapshot Provider is not configured as there are no peer "
operator|+
literal|"nodes."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|DBCheckpoint
name|omDBcheckpoint
init|=
name|getDBCheckpointFromLeader
argument_list|(
name|leaderId
argument_list|)
decl_stmt|;
name|Path
name|newDBlocation
init|=
name|omDBcheckpoint
operator|.
name|getCheckpointLocation
argument_list|()
decl_stmt|;
comment|// Check if current ratis log index is smaller than the downloaded
comment|// snapshot index. If yes, proceed by stopping the ratis server so that
comment|// the OM state can be re-initialized. If no, then do not proceed with
comment|// installSnapshot.
name|long
name|lastAppliedIndex
init|=
name|omRatisServer
operator|.
name|getStateMachineLastAppliedIndex
argument_list|()
decl_stmt|;
name|long
name|checkpointSnapshotIndex
init|=
name|omDBcheckpoint
operator|.
name|getRatisSnapshotIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkpointSnapshotIndex
operator|<=
name|lastAppliedIndex
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to install checkpoint from OM leader: {}. The last "
operator|+
literal|"applied index: {} is greater than or equal to the checkpoint's "
operator|+
literal|"snapshot index: {}. Deleting the downloaded checkpoint {}"
argument_list|,
name|leaderId
argument_list|,
name|lastAppliedIndex
argument_list|,
name|checkpointSnapshotIndex
argument_list|,
name|newDBlocation
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|deleteFully
argument_list|(
name|newDBlocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to fully delete the downloaded DB checkpoint {} "
operator|+
literal|"from OM leader {}."
argument_list|,
name|newDBlocation
argument_list|,
name|leaderId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// Pause the State Machine so that no new transactions can be applied.
comment|// This action also clears the OM Double Buffer so that if there are any
comment|// pending transactions in the buffer, they are discarded.
comment|// TODO: The Ratis server should also be paused here. This is required
comment|//  because a leader election might happen while the snapshot
comment|//  installation is in progress and the new leader might start sending
comment|//  append log entries to the ratis server.
name|omRatisServer
operator|.
name|getOmStateMachine
argument_list|()
operator|.
name|pause
argument_list|()
expr_stmt|;
name|File
name|dbBackup
decl_stmt|;
try|try
block|{
name|dbBackup
operator|=
name|replaceOMDBWithCheckpoint
argument_list|(
name|lastAppliedIndex
argument_list|,
name|newDBlocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"OM DB checkpoint replacement with new downloaded checkpoint "
operator|+
literal|"failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Reload the OM DB store with the new checkpoint.
comment|// Restart (unpause) the state machine and update its last applied index
comment|// to the installed checkpoint's snapshot index.
try|try
block|{
name|reloadOMState
argument_list|(
name|checkpointSnapshotIndex
argument_list|)
expr_stmt|;
name|omRatisServer
operator|.
name|getOmStateMachine
argument_list|()
operator|.
name|unpause
argument_list|(
name|checkpointSnapshotIndex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to reload OM state with new DB checkpoint."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Delete the backup DB
try|try
block|{
name|FileUtils
operator|.
name|deleteFully
argument_list|(
name|dbBackup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete the backup of the original DB {}"
argument_list|,
name|dbBackup
argument_list|)
expr_stmt|;
block|}
comment|// TODO: We should only return the snpashotIndex to the leader.
comment|//  Should be fixed after RATIS-586
name|TermIndex
name|newTermIndex
init|=
name|TermIndex
operator|.
name|newTermIndex
argument_list|(
literal|0
argument_list|,
name|checkpointSnapshotIndex
argument_list|)
decl_stmt|;
return|return
name|newTermIndex
return|;
block|}
comment|/**    * Download the latest OM DB checkpoint from the leader OM.    * @param leaderId OMNodeID of the leader OM node.    * @return latest DB checkpoint from leader OM.    */
DECL|method|getDBCheckpointFromLeader (String leaderId)
specifier|private
name|DBCheckpoint
name|getDBCheckpointFromLeader
parameter_list|(
name|String
name|leaderId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Downloading checkpoint from leader OM {} and reloading state "
operator|+
literal|"from the checkpoint."
argument_list|,
name|leaderId
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|omSnapshotProvider
operator|.
name|getOzoneManagerDBSnapshot
argument_list|(
name|leaderId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to download checkpoint from OM leader {}"
argument_list|,
name|leaderId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Replace the current OM DB with the new DB checkpoint.    * @param lastAppliedIndex the last applied index in the current OM DB.    * @param checkpointPath path to the new DB checkpoint    * @return location of the backup of the original DB    * @throws Exception    */
DECL|method|replaceOMDBWithCheckpoint (long lastAppliedIndex, Path checkpointPath)
name|File
name|replaceOMDBWithCheckpoint
parameter_list|(
name|long
name|lastAppliedIndex
parameter_list|,
name|Path
name|checkpointPath
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Stop the DB first
name|DBStore
name|store
init|=
name|metadataManager
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Take a backup of the current DB
name|File
name|db
init|=
name|store
operator|.
name|getDbLocation
argument_list|()
decl_stmt|;
name|String
name|dbBackupName
init|=
name|OzoneConsts
operator|.
name|OM_DB_BACKUP_PREFIX
operator|+
name|lastAppliedIndex
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|File
name|dbBackup
init|=
operator|new
name|File
argument_list|(
name|db
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|dbBackupName
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|db
operator|.
name|toPath
argument_list|()
argument_list|,
name|dbBackup
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create a backup of the current DB. Aborting "
operator|+
literal|"snapshot installation."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// Move the new DB checkpoint into the om metadata dir
try|try
block|{
name|Files
operator|.
name|move
argument_list|(
name|checkpointPath
argument_list|,
name|db
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to move downloaded DB checkpoint {} to metadata "
operator|+
literal|"directory {}. Resetting to original DB."
argument_list|,
name|checkpointPath
argument_list|,
name|db
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|dbBackup
operator|.
name|toPath
argument_list|()
argument_list|,
name|db
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|dbBackup
return|;
block|}
comment|/**    * Re-instantiate MetadataManager with new DB checkpoint.    * All the classes which use/ store MetadataManager should also be updated    * with the new MetadataManager instance.    */
DECL|method|reloadOMState (long newSnapshotIndex)
name|void
name|reloadOMState
parameter_list|(
name|long
name|newSnapshotIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|instantiateServices
argument_list|()
expr_stmt|;
comment|// Restart required services
name|metadataManager
operator|.
name|start
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|keyManager
operator|.
name|start
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// Set metrics and start metrics back ground thread
name|metrics
operator|.
name|setNumVolumes
argument_list|(
name|metadataManager
operator|.
name|countRowsInTable
argument_list|(
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setNumBuckets
argument_list|(
name|metadataManager
operator|.
name|countRowsInTable
argument_list|(
name|metadataManager
operator|.
name|getBucketTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setNumKeys
argument_list|(
name|metadataManager
operator|.
name|countEstimatedRowsInTable
argument_list|(
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the omMetrics file if it exists and save the a new metrics file
comment|// with new data
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|getMetricsStorageFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|saveOmMetrics
argument_list|()
expr_stmt|;
comment|// Update OM snapshot index with the new snapshot index (from the new OM
comment|// DB state) and save the snapshot index to disk
name|omRatisSnapshotInfo
operator|.
name|saveRatisSnapshotToDisk
argument_list|(
name|newSnapshotIndex
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogger ()
specifier|public
specifier|static
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|OzoneConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setTestSecureOmFlag (boolean testSecureOmFlag)
specifier|public
specifier|static
name|void
name|setTestSecureOmFlag
parameter_list|(
name|boolean
name|testSecureOmFlag
parameter_list|)
block|{
name|OzoneManager
operator|.
name|testSecureOmFlag
operator|=
name|testSecureOmFlag
expr_stmt|;
block|}
DECL|method|getOMNodeId ()
specifier|public
name|String
name|getOMNodeId
parameter_list|()
block|{
return|return
name|omNodeDetails
operator|.
name|getOMNodeId
argument_list|()
return|;
block|}
DECL|method|getOMServiceId ()
specifier|public
name|String
name|getOMServiceId
parameter_list|()
block|{
return|return
name|omNodeDetails
operator|.
name|getOMServiceId
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getPeerNodes ()
specifier|public
name|List
argument_list|<
name|OMNodeDetails
argument_list|>
name|getPeerNodes
parameter_list|()
block|{
return|return
name|peerNodes
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getCertificateClient ()
specifier|public
name|CertificateClient
name|getCertificateClient
parameter_list|()
block|{
return|return
name|certClient
return|;
block|}
DECL|method|getComponent ()
specifier|public
name|String
name|getComponent
parameter_list|()
block|{
return|return
name|omComponent
return|;
block|}
annotation|@
name|Override
DECL|method|getOMFailoverProxyProvider ()
specifier|public
name|OMFailoverProxyProvider
name|getOMFailoverProxyProvider
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Return maximum volumes count per user.    * @return maxUserVolumeCount    */
DECL|method|getMaxUserVolumeCount ()
specifier|public
name|long
name|getMaxUserVolumeCount
parameter_list|()
block|{
return|return
name|maxUserVolumeCount
return|;
block|}
comment|/**    * Checks the Leader status of OM Ratis Server.    * Note that this status has a small window of error. It should not be used    * to determine the absolute leader status.    * If it is the leader, the role status is cached till Ratis server    * notifies of leader change. If it is not leader, the role information is    * retrieved through by submitting a GroupInfoRequest to Ratis server.    *    * If ratis is not enabled, then it always returns true.    *    * @return Return true if this node is the leader, false otherwsie.    */
DECL|method|isLeader ()
specifier|public
name|boolean
name|isLeader
parameter_list|()
block|{
return|return
name|isRatisEnabled
condition|?
name|omRatisServer
operator|.
name|isLeader
argument_list|()
else|:
literal|true
return|;
block|}
comment|/**    * Return if Ratis is enabled or not.    * @return    */
DECL|method|isRatisEnabled ()
specifier|public
name|boolean
name|isRatisEnabled
parameter_list|()
block|{
return|return
name|isRatisEnabled
return|;
block|}
comment|/**    * Get DB updates since a specific sequence number.    * @param dbUpdatesRequest request that encapsulates a sequence number.    * @return Wrapper containing the updates.    * @throws SequenceNumberNotFoundException if db is unable to read the data.    */
annotation|@
name|Override
DECL|method|getDBUpdates ( DBUpdatesRequest dbUpdatesRequest)
specifier|public
name|DBUpdatesWrapper
name|getDBUpdates
parameter_list|(
name|DBUpdatesRequest
name|dbUpdatesRequest
parameter_list|)
throws|throws
name|SequenceNumberNotFoundException
block|{
return|return
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|getUpdatesSince
argument_list|(
name|dbUpdatesRequest
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getDelegationTokenMgr ()
specifier|public
name|OzoneDelegationTokenSecretManager
name|getDelegationTokenMgr
parameter_list|()
block|{
return|return
name|delegationTokenMgr
return|;
block|}
comment|/**    * Return list of OzoneAdministrators.    */
DECL|method|getOzoneAdmins ()
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getOzoneAdmins
parameter_list|()
block|{
return|return
name|ozAdmins
return|;
block|}
block|}
end_class

end_unit

