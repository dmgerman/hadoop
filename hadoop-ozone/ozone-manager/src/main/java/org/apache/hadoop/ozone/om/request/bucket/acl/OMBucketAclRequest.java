begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.bucket.acl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|bucket
operator|.
name|acl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|utils
operator|.
name|OzoneManagerDoubleBufferHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|OMClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|util
operator|.
name|BooleanBiFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|util
operator|.
name|ObjectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneObj
operator|.
name|ObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|BUCKET_LOCK
import|;
end_import

begin_comment
comment|/**  * Base class for Bucket acl request.  */
end_comment

begin_class
DECL|class|OMBucketAclRequest
specifier|public
specifier|abstract
class|class
name|OMBucketAclRequest
extends|extends
name|OMClientRequest
block|{
DECL|field|omBucketAclOp
specifier|private
name|BooleanBiFunction
argument_list|<
name|List
argument_list|<
name|OzoneAcl
argument_list|>
argument_list|,
name|OmBucketInfo
argument_list|>
name|omBucketAclOp
decl_stmt|;
DECL|method|OMBucketAclRequest (OMRequest omRequest, BooleanBiFunction<List<OzoneAcl>, OmBucketInfo> aclOp)
specifier|public
name|OMBucketAclRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|,
name|BooleanBiFunction
argument_list|<
name|List
argument_list|<
name|OzoneAcl
argument_list|>
argument_list|,
name|OmBucketInfo
argument_list|>
name|aclOp
parameter_list|)
block|{
name|super
argument_list|(
name|omRequest
argument_list|)
expr_stmt|;
name|omBucketAclOp
operator|=
name|aclOp
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validateAndUpdateCache (OzoneManager ozoneManager, long transactionLogIndex, OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper)
specifier|public
name|OMClientResponse
name|validateAndUpdateCache
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|,
name|long
name|transactionLogIndex
parameter_list|,
name|OzoneManagerDoubleBufferHelper
name|ozoneManagerDoubleBufferHelper
parameter_list|)
block|{
comment|// protobuf guarantees acls are non-null.
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|ozoneAcls
init|=
name|getAcls
argument_list|()
decl_stmt|;
name|OMMetrics
name|omMetrics
init|=
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|omMetrics
operator|.
name|incNumBucketUpdates
argument_list|()
expr_stmt|;
name|OmBucketInfo
name|omBucketInfo
init|=
literal|null
decl_stmt|;
name|OMResponse
operator|.
name|Builder
name|omResponse
init|=
name|onInit
argument_list|()
decl_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
literal|null
decl_stmt|;
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
name|OMMetadataManager
name|omMetadataManager
init|=
name|ozoneManager
operator|.
name|getMetadataManager
argument_list|()
decl_stmt|;
name|boolean
name|lockAcquired
init|=
literal|false
decl_stmt|;
name|String
name|volume
init|=
literal|null
decl_stmt|;
name|String
name|bucket
init|=
literal|null
decl_stmt|;
name|boolean
name|operationResult
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ObjectParser
name|objectParser
init|=
operator|new
name|ObjectParser
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|ObjectType
operator|.
name|BUCKET
argument_list|)
decl_stmt|;
name|volume
operator|=
name|objectParser
operator|.
name|getVolume
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|objectParser
operator|.
name|getBucket
argument_list|()
expr_stmt|;
comment|// check Acl
if|if
condition|(
name|ozoneManager
operator|.
name|getAclsEnabled
argument_list|()
condition|)
block|{
name|checkAcls
argument_list|(
name|ozoneManager
argument_list|,
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|VOLUME
argument_list|,
name|OzoneObj
operator|.
name|StoreType
operator|.
name|OZONE
argument_list|,
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|WRITE_ACL
argument_list|,
name|volume
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|lockAcquired
operator|=
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireWriteLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volume
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|String
name|dbBucketKey
init|=
name|omMetadataManager
operator|.
name|getBucketKey
argument_list|(
name|volume
argument_list|,
name|bucket
argument_list|)
decl_stmt|;
name|omBucketInfo
operator|=
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbBucketKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|omBucketInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
name|OMException
operator|.
name|ResultCodes
operator|.
name|BUCKET_NOT_FOUND
argument_list|)
throw|;
block|}
name|operationResult
operator|=
name|omBucketAclOp
operator|.
name|apply
argument_list|(
name|ozoneAcls
argument_list|,
name|omBucketInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|operationResult
condition|)
block|{
comment|// update cache.
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|dbBucketKey
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|omBucketInfo
argument_list|)
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|omClientResponse
operator|=
name|onSuccess
argument_list|(
name|omResponse
argument_list|,
name|omBucketInfo
argument_list|,
name|operationResult
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
name|omClientResponse
operator|=
name|onFailure
argument_list|(
name|omResponse
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|omClientResponse
operator|!=
literal|null
condition|)
block|{
name|omClientResponse
operator|.
name|setFlushFuture
argument_list|(
name|ozoneManagerDoubleBufferHelper
operator|.
name|add
argument_list|(
name|omClientResponse
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockAcquired
condition|)
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseWriteLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volume
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
block|}
name|onComplete
argument_list|(
name|operationResult
argument_list|,
name|exception
argument_list|,
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|omClientResponse
return|;
block|}
comment|/**    * Get the Acls from the request.    * @return List of OzoneAcls, for add/remove it is a single element list    * for set it can be non-single element list.    */
DECL|method|getAcls ()
specifier|abstract
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|getAcls
parameter_list|()
function_decl|;
comment|/**    * Get the path name from the request.    * @return path name    */
DECL|method|getPath ()
specifier|abstract
name|String
name|getPath
parameter_list|()
function_decl|;
comment|// TODO: Finer grain metrics can be moved to these callbacks. They can also
comment|// be abstracted into separate interfaces in future.
comment|/**    * Get the initial om response builder with lock.    * @return om response builder.    */
DECL|method|onInit ()
specifier|abstract
name|OMResponse
operator|.
name|Builder
name|onInit
parameter_list|()
function_decl|;
comment|/**    * Get the om client response on success case with lock.    * @param omResponse    * @param omBucketInfo    * @param operationResult    * @return OMClientResponse    */
DECL|method|onSuccess ( OMResponse.Builder omResponse, OmBucketInfo omBucketInfo, boolean operationResult)
specifier|abstract
name|OMClientResponse
name|onSuccess
parameter_list|(
name|OMResponse
operator|.
name|Builder
name|omResponse
parameter_list|,
name|OmBucketInfo
name|omBucketInfo
parameter_list|,
name|boolean
name|operationResult
parameter_list|)
function_decl|;
comment|/**    * Get the om client response on failure case with lock.    * @param omResponse    * @param exception    * @return OMClientResponse    */
DECL|method|onFailure (OMResponse.Builder omResponse, IOException exception)
specifier|abstract
name|OMClientResponse
name|onFailure
parameter_list|(
name|OMResponse
operator|.
name|Builder
name|omResponse
parameter_list|,
name|IOException
name|exception
parameter_list|)
function_decl|;
comment|/**    * Completion hook for final processing before return without lock.    * Usually used for logging without lock and metric update.    * @param operationResult    * @param exception    * @param omMetrics    */
DECL|method|onComplete (boolean operationResult, IOException exception, OMMetrics omMetrics)
specifier|abstract
name|void
name|onComplete
parameter_list|(
name|boolean
name|operationResult
parameter_list|,
name|IOException
name|exception
parameter_list|,
name|OMMetrics
name|omMetrics
parameter_list|)
function_decl|;
block|}
end_class

end_unit

