begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_VOLUME_ALREADY_EXISTS
import|;
end_import

begin_comment
comment|/**  * S3 Bucket Manager, this class maintains a mapping between S3 Bucket and Ozone  * Volume/bucket.  */
end_comment

begin_class
DECL|class|S3BucketManagerImpl
specifier|public
class|class
name|S3BucketManagerImpl
implements|implements
name|S3BucketManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3BucketManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|S3_ADMIN_NAME
specifier|private
specifier|static
specifier|final
name|String
name|S3_ADMIN_NAME
init|=
literal|"OzoneS3Manager"
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|OzoneConfiguration
name|configuration
decl_stmt|;
DECL|field|omMetadataManager
specifier|private
specifier|final
name|OMMetadataManager
name|omMetadataManager
decl_stmt|;
DECL|field|volumeManager
specifier|private
specifier|final
name|VolumeManager
name|volumeManager
decl_stmt|;
DECL|field|bucketManager
specifier|private
specifier|final
name|BucketManager
name|bucketManager
decl_stmt|;
comment|/**    * Construct an S3 Bucket Manager Object.    *    * @param configuration - Ozone Configuration.    * @param omMetadataManager - Ozone Metadata Manager.    */
DECL|method|S3BucketManagerImpl ( OzoneConfiguration configuration, OMMetadataManager omMetadataManager, VolumeManager volumeManager, BucketManager bucketManager)
specifier|public
name|S3BucketManagerImpl
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|,
name|OMMetadataManager
name|omMetadataManager
parameter_list|,
name|VolumeManager
name|volumeManager
parameter_list|,
name|BucketManager
name|bucketManager
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|omMetadataManager
operator|=
name|omMetadataManager
expr_stmt|;
name|this
operator|.
name|volumeManager
operator|=
name|volumeManager
expr_stmt|;
name|this
operator|.
name|bucketManager
operator|=
name|bucketManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createS3Bucket (String userName, String bucketName)
specifier|public
name|void
name|createS3Bucket
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|bucketName
argument_list|)
argument_list|,
literal|"Bucket name cannot be null or empty."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|userName
argument_list|)
argument_list|,
literal|"User name "
operator|+
literal|"cannot be null or empty."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|bucketName
operator|.
name|length
argument_list|()
operator|>=
literal|3
operator|&&
name|bucketName
operator|.
name|length
argument_list|()
operator|<
literal|64
argument_list|,
literal|"Length of the S3 Bucket is not correct."
argument_list|)
expr_stmt|;
comment|// TODO: Decide if we want to enforce S3 Bucket Creation Rules in this
comment|// code path?
comment|// https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html
comment|// Generate an Ozone volume name. For the time being, we are going to use
comment|// s3userName as the Ozone volume name. Since S3 advices 100 buckets max
comment|// for a user and we have no limit to the number of Ozone buckets under a
comment|// volume we will stick to very simple model.
comment|//
comment|// s3Bucket -> ozoneVolume/OzoneBucket name
comment|// s3BucketName ->s3userName/s3Bucketname
comment|//
comment|// You might wonder if all names map to this pattern, why we need to
comment|// store the S3 bucketName in a table at all. This is to support
comment|// anonymous access to bucket where the user name is absent.
comment|// About Locking:
comment|// We need to do this before we take the S3Bucket Lock since createVolume
comment|// takes the userLock. So an attempt to take the user lock while holding
comment|// S3Bucket lock will throw, so we need to create the volume if needed
comment|// before we execute the bucket mapping functions.
name|String
name|ozoneVolumeName
init|=
name|formatOzoneVolumeName
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|createOzoneVolumeIfNeeded
argument_list|(
name|userName
argument_list|,
name|ozoneVolumeName
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireS3Lock
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|bucket
init|=
name|omMetadataManager
operator|.
name|getS3Table
argument_list|()
operator|.
name|get
argument_list|(
name|bucketName
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucket
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Bucket already exists. {}"
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Unable to create S3 bucket. "
operator|+
name|bucketName
operator|+
literal|" already exists."
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|S3_BUCKET_ALREADY_EXISTS
argument_list|)
throw|;
block|}
name|String
name|ozoneBucketName
init|=
name|bucketName
decl_stmt|;
name|createOzoneBucket
argument_list|(
name|ozoneVolumeName
argument_list|,
name|ozoneBucketName
argument_list|)
expr_stmt|;
name|String
name|finalName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/%s"
argument_list|,
name|ozoneVolumeName
argument_list|,
name|ozoneBucketName
argument_list|)
decl_stmt|;
name|omMetadataManager
operator|.
name|getS3Table
argument_list|()
operator|.
name|put
argument_list|(
name|bucketName
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|finalName
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseS3Lock
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteS3Bucket (String bucketName)
specifier|public
name|void
name|deleteS3Bucket
parameter_list|(
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|bucketName
argument_list|)
argument_list|,
literal|"Bucket name cannot be null or empty"
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireS3Lock
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|bucket
init|=
name|bucketName
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|map
init|=
name|omMetadataManager
operator|.
name|getS3Table
argument_list|()
operator|.
name|get
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"No such S3 bucket. "
operator|+
name|bucketName
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|S3_BUCKET_NOT_FOUND
argument_list|)
throw|;
block|}
name|bucketManager
operator|.
name|deleteBucket
argument_list|(
name|getOzoneVolumeName
argument_list|(
name|bucketName
argument_list|)
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getS3Table
argument_list|()
operator|.
name|delete
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseS3Lock
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|formatOzoneVolumeName (String userName)
specifier|private
name|String
name|formatOzoneVolumeName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"s3%s"
argument_list|,
name|userName
argument_list|)
return|;
block|}
DECL|method|createOzoneVolumeIfNeeded (String userName, String volumeName)
specifier|private
name|void
name|createOzoneVolumeIfNeeded
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We don't have to time of check. time of use problem here because
comment|// this call is invoked while holding the s3Bucket lock.
try|try
block|{
name|OmVolumeArgs
name|args
init|=
name|OmVolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAdminName
argument_list|(
name|S3_ADMIN_NAME
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|userName
argument_list|)
operator|.
name|setVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setQuotaInBytes
argument_list|(
name|OzoneConsts
operator|.
name|MAX_QUOTA_IN_BYTES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|volumeManager
operator|.
name|createVolume
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|exp
parameter_list|)
block|{
if|if
condition|(
name|exp
operator|.
name|getResult
argument_list|()
operator|.
name|compareTo
argument_list|(
name|FAILED_VOLUME_ALREADY_EXISTS
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Volume already exists. {}"
argument_list|,
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|exp
throw|;
block|}
block|}
block|}
DECL|method|createOzoneBucket (String volumeName, String bucketName)
specifier|private
name|void
name|createOzoneBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|OmBucketInfo
operator|.
name|Builder
name|builder
init|=
name|OmBucketInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|OmBucketInfo
name|bucketInfo
init|=
name|builder
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setIsVersionEnabled
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|setStorageType
argument_list|(
name|StorageType
operator|.
name|DEFAULT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOzoneBucketMapping (String s3BucketName)
specifier|public
name|String
name|getOzoneBucketMapping
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|s3BucketName
argument_list|)
argument_list|,
literal|"Bucket name cannot be null or empty."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|s3BucketName
operator|.
name|length
argument_list|()
operator|>=
literal|3
operator|&&
name|s3BucketName
operator|.
name|length
argument_list|()
operator|<
literal|64
argument_list|,
literal|"Length of the S3 Bucket is not correct."
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireS3Lock
argument_list|(
name|s3BucketName
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|mapping
init|=
name|omMetadataManager
operator|.
name|getS3Table
argument_list|()
operator|.
name|get
argument_list|(
name|s3BucketName
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|mapping
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
throw|throw
operator|new
name|OMException
argument_list|(
literal|"No such S3 bucket."
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|S3_BUCKET_NOT_FOUND
argument_list|)
throw|;
block|}
finally|finally
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseS3Lock
argument_list|(
name|s3BucketName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getOzoneVolumeName (String s3BucketName)
specifier|public
name|String
name|getOzoneVolumeName
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|getOzoneBucketMapping
argument_list|(
name|s3BucketName
argument_list|)
decl_stmt|;
return|return
name|mapping
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getOzoneBucketName (String s3BucketName)
specifier|public
name|String
name|getOzoneBucketName
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|mapping
init|=
name|getOzoneBucketMapping
argument_list|(
name|s3BucketName
argument_list|)
decl_stmt|;
return|return
name|mapping
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
index|[
literal|1
index|]
return|;
block|}
block|}
end_class

end_unit

