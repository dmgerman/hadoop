begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.s3.bucket
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|s3
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|utils
operator|.
name|OzoneManagerDoubleBufferHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|OMAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|volume
operator|.
name|OMVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|s3
operator|.
name|bucket
operator|.
name|S3BucketDeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|S3DeleteBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|S3_BUCKET_MAX_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|S3_BUCKET_MIN_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|BUCKET_LOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|S3_BUCKET_LOCK
import|;
end_import

begin_comment
comment|/**  * Handle Create S3Bucket request.  */
end_comment

begin_class
DECL|class|S3BucketDeleteRequest
specifier|public
class|class
name|S3BucketDeleteRequest
extends|extends
name|OMVolumeRequest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3BucketDeleteRequest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|S3BucketDeleteRequest (OMRequest omRequest)
specifier|public
name|S3BucketDeleteRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|)
block|{
name|super
argument_list|(
name|omRequest
argument_list|)
expr_stmt|;
block|}
DECL|method|preExecute (OzoneManager ozoneManager)
specifier|public
name|OMRequest
name|preExecute
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|)
throws|throws
name|IOException
block|{
name|S3DeleteBucketRequest
name|s3DeleteBucketRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getDeleteS3BucketRequest
argument_list|()
decl_stmt|;
comment|// TODO: Do we need to enforce the bucket rules in this code path?
comment|// https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html
comment|// For now only checked the length.
name|int
name|bucketLength
init|=
name|s3DeleteBucketRequest
operator|.
name|getS3BucketName
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|bucketLength
operator|<
name|S3_BUCKET_MIN_LENGTH
operator|||
name|bucketLength
operator|>=
name|S3_BUCKET_MAX_LENGTH
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"S3BucketName must be at least 3 and not more "
operator|+
literal|"than 63 characters long"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|S3_BUCKET_INVALID_LENGTH
argument_list|)
throw|;
block|}
return|return
name|getOmRequest
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setUserInfo
argument_list|(
name|getUserInfo
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|validateAndUpdateCache (OzoneManager ozoneManager, long transactionLogIndex, OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper)
specifier|public
name|OMClientResponse
name|validateAndUpdateCache
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|,
name|long
name|transactionLogIndex
parameter_list|,
name|OzoneManagerDoubleBufferHelper
name|ozoneManagerDoubleBufferHelper
parameter_list|)
block|{
name|S3DeleteBucketRequest
name|s3DeleteBucketRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getDeleteS3BucketRequest
argument_list|()
decl_stmt|;
name|String
name|s3BucketName
init|=
name|s3DeleteBucketRequest
operator|.
name|getS3BucketName
argument_list|()
decl_stmt|;
name|OMResponse
operator|.
name|Builder
name|omResponse
init|=
name|OMResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Type
operator|.
name|DeleteS3Bucket
argument_list|)
operator|.
name|setStatus
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|setSuccess
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|OMMetrics
name|omMetrics
init|=
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|omMetrics
operator|.
name|incNumS3BucketDeletes
argument_list|()
expr_stmt|;
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
name|boolean
name|acquiredS3Lock
init|=
literal|false
decl_stmt|;
name|boolean
name|acquiredBucketLock
init|=
literal|false
decl_stmt|;
name|String
name|volumeName
init|=
literal|null
decl_stmt|;
name|OMMetadataManager
name|omMetadataManager
init|=
name|ozoneManager
operator|.
name|getMetadataManager
argument_list|()
decl_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// TODO to support S3 ACL later.
name|acquiredS3Lock
operator|=
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|S3_BUCKET_LOCK
argument_list|,
name|s3BucketName
argument_list|)
expr_stmt|;
name|String
name|s3Mapping
init|=
name|omMetadataManager
operator|.
name|getS3Table
argument_list|()
operator|.
name|get
argument_list|(
name|s3BucketName
argument_list|)
decl_stmt|;
if|if
condition|(
name|s3Mapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"S3Bucket "
operator|+
name|s3BucketName
operator|+
literal|" not found"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|S3_BUCKET_NOT_FOUND
argument_list|)
throw|;
block|}
else|else
block|{
name|volumeName
operator|=
name|getOzoneVolumeName
argument_list|(
name|s3Mapping
argument_list|)
expr_stmt|;
name|acquiredBucketLock
operator|=
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volumeName
argument_list|,
name|s3BucketName
argument_list|)
expr_stmt|;
name|String
name|bucketKey
init|=
name|omMetadataManager
operator|.
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|s3BucketName
argument_list|)
decl_stmt|;
comment|// Update bucket table cache and s3 table cache.
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|bucketKey
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|absent
argument_list|()
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getS3Table
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|s3BucketName
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|absent
argument_list|()
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|omResponse
operator|.
name|setDeleteS3BucketResponse
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|S3DeleteBucketResponse
operator|.
name|newBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|omClientResponse
operator|=
operator|new
name|S3BucketDeleteResponse
argument_list|(
name|s3BucketName
argument_list|,
name|volumeName
argument_list|,
name|omResponse
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
name|omClientResponse
operator|=
operator|new
name|S3BucketDeleteResponse
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|createErrorOMResponse
argument_list|(
name|omResponse
argument_list|,
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|omClientResponse
operator|!=
literal|null
condition|)
block|{
name|omClientResponse
operator|.
name|setFlushFuture
argument_list|(
name|ozoneManagerDoubleBufferHelper
operator|.
name|add
argument_list|(
name|omClientResponse
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acquiredBucketLock
condition|)
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volumeName
argument_list|,
name|s3BucketName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acquiredS3Lock
condition|)
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|S3_BUCKET_LOCK
argument_list|,
name|s3BucketName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Performing audit logging outside of the lock.
name|auditLog
argument_list|(
name|ozoneManager
operator|.
name|getAuditLogger
argument_list|()
argument_list|,
name|buildAuditMessage
argument_list|(
name|OMAction
operator|.
name|DELETE_S3_BUCKET
argument_list|,
name|buildAuditMap
argument_list|(
name|s3BucketName
argument_list|)
argument_list|,
name|exception
argument_list|,
name|getOmRequest
argument_list|()
operator|.
name|getUserInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
comment|// Decrement s3 bucket and ozone bucket count. As S3 bucket is mapped to
comment|// ozonevolume/ozone bucket.
name|LOG
operator|.
name|debug
argument_list|(
literal|"S3Bucket {} successfully deleted"
argument_list|,
name|s3BucketName
argument_list|)
expr_stmt|;
name|omMetrics
operator|.
name|decNumS3Buckets
argument_list|()
expr_stmt|;
name|omMetrics
operator|.
name|decNumBuckets
argument_list|()
expr_stmt|;
return|return
name|omClientResponse
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"S3Bucket Deletion failed for S3Bucket:{}"
argument_list|,
name|s3BucketName
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|omMetrics
operator|.
name|incNumS3BucketDeleteFails
argument_list|()
expr_stmt|;
return|return
name|omClientResponse
return|;
block|}
block|}
comment|/**    * Extract volumeName from s3Mapping.    * @param s3Mapping    * @return volumeName    * @throws IOException    */
DECL|method|getOzoneVolumeName (String s3Mapping)
specifier|private
name|String
name|getOzoneVolumeName
parameter_list|(
name|String
name|s3Mapping
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|s3Mapping
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
index|[
literal|0
index|]
return|;
block|}
DECL|method|buildAuditMap (String s3BucketName)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildAuditMap
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|s3BucketName
argument_list|,
name|OzoneConsts
operator|.
name|S3_BUCKET
argument_list|)
expr_stmt|;
return|return
name|auditMap
return|;
block|}
block|}
end_class

end_unit

