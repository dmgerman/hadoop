begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_DB_CHECKPOINT_REQUEST_FLUSH
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|TransferFsImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|util
operator|.
name|DataTransferThrottler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBCheckpointSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Provides the current checkpoint Snapshot of the OM DB. (tar.gz)  */
end_comment

begin_class
DECL|class|OMDbSnapshotServlet
specifier|public
class|class
name|OMDbSnapshotServlet
extends|extends
name|HttpServlet
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OMDbSnapshotServlet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|omDbStore
specifier|private
specifier|transient
name|DBStore
name|omDbStore
decl_stmt|;
DECL|field|throttler
specifier|private
specifier|transient
name|DataTransferThrottler
name|throttler
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|OzoneManager
name|om
init|=
operator|(
name|OzoneManager
operator|)
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|OzoneConsts
operator|.
name|OM_CONTEXT_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|om
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to initialize OMDbSnapshotServlet. OM is null"
argument_list|)
expr_stmt|;
return|return;
block|}
name|omDbStore
operator|=
name|om
operator|.
name|getMetadataManager
argument_list|()
operator|.
name|getStore
argument_list|()
expr_stmt|;
name|OzoneConfiguration
name|configuration
init|=
name|om
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|long
name|transferBandwidth
init|=
name|configuration
operator|.
name|getLongBytes
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_DB_SNAPSHOT_TRANSFER_RATE_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_DB_SNAPSHOT_TRANSFER_RATE_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|transferBandwidth
operator|>
literal|0
condition|)
block|{
name|throttler
operator|=
operator|new
name|DataTransferThrottler
argument_list|(
name|transferBandwidth
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Process a GET request for the Ozone Manager DB checkpoint snapshot.    *    * @param request  The servlet request we are processing    * @param response The servlet response we are creating    */
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received request to obtain OM DB checkpoint snapshot"
argument_list|)
expr_stmt|;
if|if
condition|(
name|omDbStore
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to process metadata snapshot request. DB Store is null"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
return|return;
block|}
name|FileInputStream
name|checkpointFileInputStream
init|=
literal|null
decl_stmt|;
name|File
name|checkPointTarFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|boolean
name|flush
init|=
literal|false
decl_stmt|;
name|String
name|flushParam
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|OZONE_DB_CHECKPOINT_REQUEST_FLUSH
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|flushParam
argument_list|)
condition|)
block|{
name|flush
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|flushParam
argument_list|)
expr_stmt|;
block|}
name|DBCheckpointSnapshot
name|checkpoint
init|=
name|omDbStore
operator|.
name|getCheckpointSnapshot
argument_list|(
name|flush
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkpoint
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to process metadata snapshot request. "
operator|+
literal|"Checkpoint request returned null."
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
return|return;
block|}
name|checkPointTarFile
operator|=
name|OmUtils
operator|.
name|createTarFile
argument_list|(
name|checkpoint
operator|.
name|getCheckpointLocation
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Tar location = "
operator|+
name|checkPointTarFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/x-tgz"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\""
operator|+
name|checkPointTarFile
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|checkpointFileInputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|checkPointTarFile
argument_list|)
expr_stmt|;
name|TransferFsImage
operator|.
name|copyFileToStream
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|checkPointTarFile
argument_list|,
name|checkpointFileInputStream
argument_list|,
name|throttler
argument_list|)
expr_stmt|;
name|checkpoint
operator|.
name|cleanupCheckpoint
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to process metadata snapshot request. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|checkPointTarFile
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|checkPointTarFile
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|checkpointFileInputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

