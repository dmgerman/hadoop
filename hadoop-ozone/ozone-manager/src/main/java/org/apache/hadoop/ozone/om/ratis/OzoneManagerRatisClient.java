begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OMRatisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|client
operator|.
name|RaftClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftClientReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftRetryFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|RpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|SupportedRpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|TimeDuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * OM Ratis client to interact with OM Ratis server endpoint.  */
end_comment

begin_class
DECL|class|OzoneManagerRatisClient
specifier|public
specifier|final
class|class
name|OzoneManagerRatisClient
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneManagerRatisClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|raftGroup
specifier|private
specifier|final
name|RaftGroup
name|raftGroup
decl_stmt|;
DECL|field|omNodeID
specifier|private
specifier|final
name|String
name|omNodeID
decl_stmt|;
DECL|field|rpcType
specifier|private
specifier|final
name|RpcType
name|rpcType
decl_stmt|;
DECL|field|raftClient
specifier|private
name|RaftClient
name|raftClient
decl_stmt|;
DECL|field|retryPolicy
specifier|private
specifier|final
name|RetryPolicy
name|retryPolicy
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|method|OzoneManagerRatisClient (String omNodeId, RaftGroup raftGroup, RpcType rpcType, RetryPolicy retryPolicy, Configuration config)
specifier|private
name|OzoneManagerRatisClient
parameter_list|(
name|String
name|omNodeId
parameter_list|,
name|RaftGroup
name|raftGroup
parameter_list|,
name|RpcType
name|rpcType
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|raftGroup
operator|=
name|raftGroup
expr_stmt|;
name|this
operator|.
name|omNodeID
operator|=
name|omNodeId
expr_stmt|;
name|this
operator|.
name|rpcType
operator|=
name|rpcType
expr_stmt|;
name|this
operator|.
name|retryPolicy
operator|=
name|retryPolicy
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
block|}
DECL|method|newOzoneManagerRatisClient ( String omNodeId, RaftGroup raftGroup, Configuration conf)
specifier|public
specifier|static
name|OzoneManagerRatisClient
name|newOzoneManagerRatisClient
parameter_list|(
name|String
name|omNodeId
parameter_list|,
name|RaftGroup
name|raftGroup
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|String
name|rpcType
init|=
name|conf
operator|.
name|get
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_RPC_TYPE_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_RPC_TYPE_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxRetryCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_CLIENT_REQUEST_MAX_RETRIES_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_CLIENT_REQUEST_MAX_RETRIES_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|long
name|retryInterval
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_CLIENT_REQUEST_RETRY_INTERVAL_DEFAULT
operator|.
name|toIntExact
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|sleepDuration
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|retryInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
specifier|final
name|RetryPolicy
name|retryPolicy
init|=
name|RetryPolicies
operator|.
name|retryUpToMaximumCountWithFixedSleep
argument_list|(
name|maxRetryCount
argument_list|,
name|sleepDuration
argument_list|)
decl_stmt|;
return|return
operator|new
name|OzoneManagerRatisClient
argument_list|(
name|omNodeId
argument_list|,
name|raftGroup
argument_list|,
name|SupportedRpcType
operator|.
name|valueOfIgnoreCase
argument_list|(
name|rpcType
argument_list|)
argument_list|,
name|retryPolicy
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|connect ()
specifier|public
name|void
name|connect
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connecting to OM Ratis Server GroupId:{} OM:{}"
argument_list|,
name|raftGroup
operator|.
name|getGroupId
argument_list|()
operator|.
name|getUuid
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|omNodeID
argument_list|)
expr_stmt|;
comment|// TODO : XceiverClient ratis should pass the config value of
comment|// maxOutstandingRequests so as to set the upper bound on max no of async
comment|// requests to be handled by raft client
name|raftClient
operator|=
name|OMRatisHelper
operator|.
name|newRaftClient
argument_list|(
name|rpcType
argument_list|,
name|omNodeID
argument_list|,
name|raftGroup
argument_list|,
name|retryPolicy
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|raftClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|raftClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Sends a given request to server and gets the reply back.    * @param request Request    * @return Response to the command    */
DECL|method|sendCommand (OMRequest request)
specifier|public
name|OMResponse
name|sendCommand
parameter_list|(
name|OMRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|CompletableFuture
argument_list|<
name|OMResponse
argument_list|>
name|reply
init|=
name|sendCommandAsync
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Sends a given command to server gets a waitable future back.    *    * @param request Request    * @return Response to the command    */
DECL|method|sendCommandAsync (OMRequest request)
specifier|private
name|CompletableFuture
argument_list|<
name|OMResponse
argument_list|>
name|sendCommandAsync
parameter_list|(
name|OMRequest
name|request
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|RaftClientReply
argument_list|>
name|raftClientReply
init|=
name|sendRequestAsync
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|OMResponse
argument_list|>
name|omRatisResponse
init|=
name|raftClientReply
operator|.
name|whenComplete
argument_list|(
parameter_list|(
name|reply
parameter_list|,
name|e
parameter_list|)
lambda|->
name|LOG
operator|.
name|debug
argument_list|(
literal|"received reply {} for request: cmdType={} traceID={} "
operator|+
literal|"exception: {}"
argument_list|,
name|reply
argument_list|,
name|request
operator|.
name|getCmdType
argument_list|()
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
operator|.
name|thenApply
argument_list|(
name|reply
lambda|->
block|{
lambda|try
block|{
comment|// we need to handle RaftRetryFailure Exception
name|RaftRetryFailureException
name|raftRetryFailureException
init|=
name|reply
operator|.
name|getRetryFailureException
argument_list|()
decl_stmt|;
if|if
condition|(
name|raftRetryFailureException
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|CompletionException
argument_list|(
name|raftRetryFailureException
argument_list|)
throw|;
block|}
name|OMResponse
name|response
init|=
name|OMRatisHelper
operator|.
name|getOMResponseFromRaftClientReply
argument_list|(
name|reply
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CompletionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|)
class|;
end_class

begin_return
return|return
name|omRatisResponse
return|;
end_return

begin_comment
unit|}
comment|/**    * Submits {@link RaftClient#sendReadOnlyAsync(Message)} request to Ratis    * server if the request is readOnly. Otherwise, submits    * {@link RaftClient#sendAsync(Message)} request.    * @param request OMRequest    * @return RaftClient response    */
end_comment

begin_function
DECL|method|sendRequestAsync ( OMRequest request)
unit|private
name|CompletableFuture
argument_list|<
name|RaftClientReply
argument_list|>
name|sendRequestAsync
parameter_list|(
name|OMRequest
name|request
parameter_list|)
block|{
name|boolean
name|isReadOnlyRequest
init|=
name|OmUtils
operator|.
name|isReadOnly
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ByteString
name|byteString
init|=
name|OMRatisHelper
operator|.
name|convertRequestToByteString
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"sendOMRequestAsync {} {}"
argument_list|,
name|isReadOnlyRequest
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
name|isReadOnlyRequest
condition|?
name|raftClient
operator|.
name|sendReadOnlyAsync
argument_list|(
parameter_list|()
lambda|->
name|byteString
argument_list|)
else|:
name|raftClient
operator|.
name|sendAsync
argument_list|(
parameter_list|()
lambda|->
name|byteString
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

