begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.ozShell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|ozShell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_HTTP_SCHEME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_RPC_SCHEME
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_comment
comment|/**  * Address of an ozone object for ozone shell.  */
end_comment

begin_class
DECL|class|OzoneAddress
specifier|public
class|class
name|OzoneAddress
block|{
DECL|field|EMPTY_HOST
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_HOST
init|=
literal|"___DEFAULT___"
decl_stmt|;
DECL|field|ozoneURI
specifier|private
name|URI
name|ozoneURI
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
init|=
literal|""
decl_stmt|;
DECL|field|bucketName
specifier|private
name|String
name|bucketName
init|=
literal|""
decl_stmt|;
DECL|field|keyName
specifier|private
name|String
name|keyName
init|=
literal|""
decl_stmt|;
DECL|method|OzoneAddress ()
specifier|public
name|OzoneAddress
parameter_list|()
throws|throws
name|OzoneClientException
block|{
name|this
argument_list|(
literal|"o3:///"
argument_list|)
expr_stmt|;
block|}
DECL|method|OzoneAddress (String address)
specifier|public
name|OzoneAddress
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|OzoneClientException
block|{
if|if
condition|(
name|address
operator|==
literal|null
operator|||
name|address
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|address
operator|=
name|OZONE_RPC_SCHEME
operator|+
literal|":///"
expr_stmt|;
block|}
name|this
operator|.
name|ozoneURI
operator|=
name|parseURI
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|this
operator|.
name|ozoneURI
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|replaceAll
argument_list|(
literal|"^/+"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|int
name|sep1
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|int
name|sep2
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|sep1
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|sep1
operator|==
operator|-
literal|1
condition|)
block|{
name|volumeName
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
comment|//we have vol/bucket
name|volumeName
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sep1
argument_list|)
expr_stmt|;
if|if
condition|(
name|sep2
operator|==
operator|-
literal|1
condition|)
block|{
name|bucketName
operator|=
name|path
operator|.
name|substring
argument_list|(
name|sep1
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//we have vol/bucket/key/.../...
name|bucketName
operator|=
name|path
operator|.
name|substring
argument_list|(
name|sep1
operator|+
literal|1
argument_list|,
name|sep2
argument_list|)
expr_stmt|;
name|keyName
operator|=
name|path
operator|.
name|substring
argument_list|(
name|sep2
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createClient (OzoneConfiguration conf)
specifier|public
name|OzoneClient
name|createClient
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|OzoneClientException
block|{
name|OzoneClient
name|client
decl_stmt|;
name|String
name|scheme
init|=
name|ozoneURI
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|ozoneURI
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|||
name|scheme
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|scheme
operator|=
name|OZONE_RPC_SCHEME
expr_stmt|;
block|}
if|if
condition|(
name|scheme
operator|.
name|equals
argument_list|(
name|OZONE_HTTP_SCHEME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"REST schema is not supported any more. Please use AWS S3 protocol "
operator|+
literal|"if you need REST interface."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|scheme
operator|.
name|equals
argument_list|(
name|OZONE_RPC_SCHEME
argument_list|)
condition|)
block|{
if|if
condition|(
name|ozoneURI
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ozoneURI
operator|.
name|getAuthority
argument_list|()
operator|.
name|equals
argument_list|(
name|EMPTY_HOST
argument_list|)
condition|)
block|{
if|if
condition|(
name|ozoneURI
operator|.
name|getPort
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|client
operator|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|ozoneURI
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|ozoneURI
operator|.
name|getHost
argument_list|()
argument_list|,
name|ozoneURI
operator|.
name|getPort
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|client
operator|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Invalid URI, unknown protocol scheme: "
operator|+
name|scheme
argument_list|)
throw|;
block|}
return|return
name|client
return|;
block|}
comment|/**    * verifies user provided URI.    *    * @param uri - UriString    * @return URI    * @throws URISyntaxException    * @throws OzoneException    */
DECL|method|parseURI (String uri)
specifier|protected
name|URI
name|parseURI
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|OzoneClientException
block|{
if|if
condition|(
operator|(
name|uri
operator|==
literal|null
operator|)
operator|||
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Ozone URI is needed to execute this command."
argument_list|)
throw|;
block|}
name|URIBuilder
name|uriBuilder
init|=
operator|new
name|URIBuilder
argument_list|(
name|stringToUri
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriBuilder
operator|.
name|getPort
argument_list|()
operator|==
literal|0
condition|)
block|{
name|uriBuilder
operator|.
name|setPort
argument_list|(
name|Shell
operator|.
name|DEFAULT_OZONE_PORT
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|uriBuilder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Invalid URI: "
operator|+
name|ozoneURI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Construct a URI from a String with unescaped special characters    * that have non-standard semantics. e.g. /, ?, #. A custom parsing    * is needed to prevent misbehavior.    *    * @param pathString The input path in string form    * @return URI    */
DECL|method|stringToUri (String pathString)
specifier|private
specifier|static
name|URI
name|stringToUri
parameter_list|(
name|String
name|pathString
parameter_list|)
block|{
comment|// parse uri components
name|String
name|scheme
init|=
literal|null
decl_stmt|;
name|String
name|authority
init|=
literal|null
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
comment|// parse uri scheme, if any
name|int
name|colon
init|=
name|pathString
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|int
name|slash
init|=
name|pathString
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|>
literal|0
operator|&&
operator|(
name|slash
operator|==
name|colon
operator|+
literal|1
operator|)
condition|)
block|{
comment|// has a non zero-length scheme
name|scheme
operator|=
name|pathString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colon
argument_list|)
expr_stmt|;
name|start
operator|=
name|colon
operator|+
literal|1
expr_stmt|;
block|}
comment|// parse uri authority, if any
if|if
condition|(
name|pathString
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|,
name|start
argument_list|)
operator|&&
operator|(
name|pathString
operator|.
name|length
argument_list|()
operator|-
name|start
operator|>
literal|2
operator|)
condition|)
block|{
name|start
operator|+=
literal|2
expr_stmt|;
name|int
name|nextSlash
init|=
name|pathString
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|int
name|authEnd
init|=
name|nextSlash
operator|>
literal|0
condition|?
name|nextSlash
else|:
name|pathString
operator|.
name|length
argument_list|()
decl_stmt|;
name|authority
operator|=
name|pathString
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|authEnd
argument_list|)
expr_stmt|;
name|start
operator|=
name|authEnd
expr_stmt|;
block|}
comment|// uri path is the rest of the string. ? or # are not interpreted,
comment|// but any occurrence of them will be quoted by the URI ctor.
name|String
name|path
init|=
name|pathString
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|pathString
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// add leading slash to the path, if it does not exist
name|int
name|firstSlash
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstSlash
operator|!=
literal|0
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
if|if
condition|(
name|authority
operator|==
literal|null
operator|||
name|authority
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|authority
operator|=
name|EMPTY_HOST
expr_stmt|;
block|}
comment|// Construct the URI
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getVolumeName ()
specifier|public
name|String
name|getVolumeName
parameter_list|()
block|{
return|return
name|volumeName
return|;
block|}
DECL|method|getBucketName ()
specifier|public
name|String
name|getBucketName
parameter_list|()
block|{
return|return
name|bucketName
return|;
block|}
DECL|method|getKeyName ()
specifier|public
name|String
name|getKeyName
parameter_list|()
block|{
return|return
name|keyName
return|;
block|}
DECL|method|ensureBucketAddress ()
specifier|public
name|void
name|ensureBucketAddress
parameter_list|()
throws|throws
name|OzoneClientException
block|{
if|if
condition|(
name|keyName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Invalid bucket name. Delimiters (/) not allowed in bucket name"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|volumeName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Volume name is required."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|bucketName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Bucket name is required."
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureKeyAddress ()
specifier|public
name|void
name|ensureKeyAddress
parameter_list|()
throws|throws
name|OzoneClientException
block|{
if|if
condition|(
name|keyName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Key name is missing."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|volumeName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Volume name is missing"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|bucketName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Bucket name is missing"
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureVolumeAddress ()
specifier|public
name|void
name|ensureVolumeAddress
parameter_list|()
throws|throws
name|OzoneClientException
block|{
if|if
condition|(
name|keyName
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Invalid volume name. Delimiters (/) not allowed in volume name"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|volumeName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Volume name is required"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|bucketName
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Invalid volume name. Delimiters (/) not allowed in volume name"
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureRootAddress ()
specifier|public
name|void
name|ensureRootAddress
parameter_list|()
throws|throws
name|OzoneClientException
block|{
if|if
condition|(
name|keyName
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|||
name|bucketName
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|||
name|volumeName
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|OzoneClientException
argument_list|(
literal|"Invalid URI. Volume/bucket/key elements should not been used"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

