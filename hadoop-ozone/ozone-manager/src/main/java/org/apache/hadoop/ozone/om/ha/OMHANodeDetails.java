begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.ha
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_NODES_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_NODE_ID_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_PORT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_SERVICE_IDS_KEY
import|;
end_import

begin_comment
comment|/**  * Class which maintains peer information and it's own OM node information.  */
end_comment

begin_class
DECL|class|OMHANodeDetails
specifier|public
class|class
name|OMHANodeDetails
block|{
DECL|field|genericConfigKeys
specifier|private
specifier|static
name|String
index|[]
name|genericConfigKeys
init|=
operator|new
name|String
index|[]
block|{
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_ADDRESS_KEY
block|,
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTPS_ADDRESS_KEY
block|,
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_BIND_HOST_KEY
block|,
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTPS_BIND_HOST_KEY
block|,
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
block|,
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
block|,   }
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OMHANodeDetails
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|localNodeDetails
specifier|private
specifier|final
name|OMNodeDetails
name|localNodeDetails
decl_stmt|;
DECL|field|peerNodeDetails
specifier|private
specifier|final
name|List
argument_list|<
name|OMNodeDetails
argument_list|>
name|peerNodeDetails
decl_stmt|;
DECL|method|OMHANodeDetails (OMNodeDetails localNodeDetails, List<OMNodeDetails> peerNodeDetails)
specifier|public
name|OMHANodeDetails
parameter_list|(
name|OMNodeDetails
name|localNodeDetails
parameter_list|,
name|List
argument_list|<
name|OMNodeDetails
argument_list|>
name|peerNodeDetails
parameter_list|)
block|{
name|this
operator|.
name|localNodeDetails
operator|=
name|localNodeDetails
expr_stmt|;
name|this
operator|.
name|peerNodeDetails
operator|=
name|peerNodeDetails
expr_stmt|;
block|}
DECL|method|getLocalNodeDetails ()
specifier|public
name|OMNodeDetails
name|getLocalNodeDetails
parameter_list|()
block|{
return|return
name|localNodeDetails
return|;
block|}
DECL|method|getPeerNodeDetails ()
specifier|public
name|List
argument_list|<
name|OMNodeDetails
argument_list|>
name|getPeerNodeDetails
parameter_list|()
block|{
return|return
name|peerNodeDetails
return|;
block|}
comment|/**    * Inspects and loads OM node configurations.    *    * If {@link OMConfigKeys#OZONE_OM_SERVICE_IDS_KEY} is configured with    * multiple ids and/ or if {@link OMConfigKeys#OZONE_OM_NODE_ID_KEY} is not    * specifically configured , this method determines the omServiceId    * and omNodeId by matching the node's address with the configured    * addresses. When a match is found, it sets the omServicId and omNodeId from    * the corresponding configuration key. This method also finds the OM peers    * nodes belonging to the same OM service.    *    * @param conf    */
DECL|method|loadOMHAConfig (OzoneConfiguration conf)
specifier|public
specifier|static
name|OMHANodeDetails
name|loadOMHAConfig
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|InetSocketAddress
name|localRpcAddress
init|=
literal|null
decl_stmt|;
name|String
name|localOMServiceId
init|=
literal|null
decl_stmt|;
name|String
name|localOMNodeId
init|=
literal|null
decl_stmt|;
name|int
name|localRatisPort
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|omServiceIds
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|OZONE_OM_SERVICE_IDS_KEY
argument_list|)
decl_stmt|;
name|String
name|knownOMNodeId
init|=
name|conf
operator|.
name|get
argument_list|(
name|OZONE_OM_NODE_ID_KEY
argument_list|)
decl_stmt|;
name|int
name|found
init|=
literal|0
decl_stmt|;
name|boolean
name|isOMAddressSet
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|serviceId
range|:
name|omServiceIds
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|omNodeIds
init|=
name|OmUtils
operator|.
name|getOMNodeIds
argument_list|(
name|conf
argument_list|,
name|serviceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|omNodeIds
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"Configuration does not have any value set for "
operator|+
name|OZONE_OM_NODES_KEY
operator|+
literal|" for service ID "
operator|+
name|serviceId
operator|+
literal|". List of "
operator|+
literal|"OM Node ID's should be specified for the service ID"
decl_stmt|;
throw|throw
operator|new
name|OzoneIllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|OMNodeDetails
argument_list|>
name|peerNodesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isPeer
decl_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|omNodeIds
control|)
block|{
if|if
condition|(
name|knownOMNodeId
operator|!=
literal|null
operator|&&
operator|!
name|knownOMNodeId
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|isPeer
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isPeer
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|rpcAddrKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|String
name|rpcAddrStr
init|=
name|OmUtils
operator|.
name|getOmRpcAddress
argument_list|(
name|conf
argument_list|,
name|rpcAddrKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpcAddrStr
operator|==
literal|null
operator|||
name|rpcAddrStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Configuration does not have any value set for "
operator|+
name|rpcAddrKey
operator|+
literal|"."
operator|+
literal|"OM Rpc Address should be set for all node "
operator|+
literal|"IDs for a service ID."
decl_stmt|;
throw|throw
operator|new
name|OzoneIllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// If OM address is set for any node id, we will not fallback to the
comment|// default
name|isOMAddressSet
operator|=
literal|true
expr_stmt|;
name|String
name|ratisPortKey
init|=
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|OZONE_OM_RATIS_PORT_KEY
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|int
name|ratisPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|ratisPortKey
argument_list|,
name|OZONE_OM_RATIS_PORT_DEFAULT
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|addr
operator|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|rpcAddrStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in creating socket address "
operator|+
name|addr
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|addr
operator|.
name|isUnresolved
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isPeer
operator|&&
name|OmUtils
operator|.
name|isAddressLocal
argument_list|(
name|addr
argument_list|)
condition|)
block|{
name|localRpcAddress
operator|=
name|addr
expr_stmt|;
name|localOMServiceId
operator|=
name|serviceId
expr_stmt|;
name|localOMNodeId
operator|=
name|nodeId
expr_stmt|;
name|localRatisPort
operator|=
name|ratisPort
expr_stmt|;
name|found
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// This OMNode belongs to same OM service as the current OMNode.
comment|// Add it to peerNodes list.
comment|// This OMNode belongs to same OM service as the current OMNode.
comment|// Add it to peerNodes list.
name|peerNodesList
operator|.
name|add
argument_list|(
name|getHAOMNodeDetails
argument_list|(
name|conf
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|,
name|addr
argument_list|,
name|ratisPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found one matching OM address with service ID: {} and node"
operator|+
literal|" ID: {}"
argument_list|,
name|localOMServiceId
argument_list|,
name|localOMNodeId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found matching OM address with OMServiceId: {}, "
operator|+
literal|"OMNodeId: {}, RPC Address: {} and Ratis port: {}"
argument_list|,
name|localOMServiceId
argument_list|,
name|localOMNodeId
argument_list|,
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|localRpcAddress
argument_list|)
argument_list|,
name|localRatisPort
argument_list|)
expr_stmt|;
name|setOMNodeSpecificConfigs
argument_list|(
name|conf
argument_list|,
name|localOMServiceId
argument_list|,
name|localOMNodeId
argument_list|)
expr_stmt|;
return|return
operator|new
name|OMHANodeDetails
argument_list|(
name|getHAOMNodeDetails
argument_list|(
name|conf
argument_list|,
name|localOMServiceId
argument_list|,
name|localOMNodeId
argument_list|,
name|localRpcAddress
argument_list|,
name|localRatisPort
argument_list|)
argument_list|,
name|peerNodesList
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|found
operator|>
literal|1
condition|)
block|{
name|String
name|msg
init|=
literal|"Configuration has multiple "
operator|+
name|OZONE_OM_ADDRESS_KEY
operator|+
literal|" addresses that match local node's address. Please configure the"
operator|+
literal|" system with "
operator|+
name|OZONE_OM_SERVICE_IDS_KEY
operator|+
literal|" and "
operator|+
name|OZONE_OM_ADDRESS_KEY
decl_stmt|;
throw|throw
operator|new
name|OzoneIllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|isOMAddressSet
condition|)
block|{
comment|// No OM address is set. Fallback to default
name|InetSocketAddress
name|omAddress
init|=
name|OmUtils
operator|.
name|getOmAddress
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|ratisPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_OM_RATIS_PORT_KEY
argument_list|,
name|OZONE_OM_RATIS_PORT_DEFAULT
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Configuration either no {} set. Falling back to the default "
operator|+
literal|"OM address {}"
argument_list|,
name|OZONE_OM_ADDRESS_KEY
argument_list|,
name|omAddress
argument_list|)
expr_stmt|;
return|return
operator|new
name|OMHANodeDetails
argument_list|(
name|getOMNodeDetails
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|omAddress
argument_list|,
name|ratisPort
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Configuration has no "
operator|+
name|OZONE_OM_ADDRESS_KEY
operator|+
literal|" "
operator|+
literal|"address that matches local node's address. Please configure the "
operator|+
literal|"system with "
operator|+
name|OZONE_OM_ADDRESS_KEY
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OzoneIllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create Local OM Node Details.    * @param serviceId - Service ID this OM belongs to,    * @param nodeId - Node ID of this OM.    * @param rpcAddress - Rpc Address of the OM.    * @param ratisPort - Ratis port of the OM.    * @return OMNodeDetails    */
DECL|method|getOMNodeDetails (OzoneConfiguration conf, String serviceId, String nodeId, InetSocketAddress rpcAddress, int ratisPort)
specifier|public
specifier|static
name|OMNodeDetails
name|getOMNodeDetails
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|serviceId
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|InetSocketAddress
name|rpcAddress
parameter_list|,
name|int
name|ratisPort
parameter_list|)
block|{
if|if
condition|(
name|serviceId
operator|==
literal|null
condition|)
block|{
comment|// If no serviceId is set, take the default serviceID om-service
name|serviceId
operator|=
name|OzoneConsts
operator|.
name|OM_SERVICE_ID_DEFAULT
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OM Service ID is not set. Setting it to the default ID: {}"
argument_list|,
name|serviceId
argument_list|)
expr_stmt|;
block|}
comment|// We need to pass null for serviceID and nodeID as this is set for
comment|// non-HA cluster. This means one node OM cluster.
name|String
name|httpAddr
init|=
name|OmUtils
operator|.
name|getHttpAddressForOMPeerNode
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|rpcAddress
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|httpsAddr
init|=
name|OmUtils
operator|.
name|getHttpsAddressForOMPeerNode
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|rpcAddress
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|OMNodeDetails
operator|.
name|Builder
argument_list|()
operator|.
name|setOMServiceId
argument_list|(
name|serviceId
argument_list|)
operator|.
name|setOMNodeId
argument_list|(
name|nodeId
argument_list|)
operator|.
name|setRpcAddress
argument_list|(
name|rpcAddress
argument_list|)
operator|.
name|setRatisPort
argument_list|(
name|ratisPort
argument_list|)
operator|.
name|setHttpAddress
argument_list|(
name|httpAddr
argument_list|)
operator|.
name|setHttpsAddress
argument_list|(
name|httpsAddr
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Create Local OM Node Details.    * @param serviceId - Service ID this OM belongs to,    * @param nodeId - Node ID of this OM.    * @param rpcAddress - Rpc Address of the OM.    * @param ratisPort - Ratis port of the OM.    * @return OMNodeDetails    */
DECL|method|getHAOMNodeDetails (OzoneConfiguration conf, String serviceId, String nodeId, InetSocketAddress rpcAddress, int ratisPort)
specifier|public
specifier|static
name|OMNodeDetails
name|getHAOMNodeDetails
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|serviceId
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|InetSocketAddress
name|rpcAddress
parameter_list|,
name|int
name|ratisPort
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|serviceId
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|String
name|httpAddr
init|=
name|OmUtils
operator|.
name|getHttpAddressForOMPeerNode
argument_list|(
name|conf
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|,
name|rpcAddress
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|httpsAddr
init|=
name|OmUtils
operator|.
name|getHttpsAddressForOMPeerNode
argument_list|(
name|conf
argument_list|,
name|serviceId
argument_list|,
name|nodeId
argument_list|,
name|rpcAddress
operator|.
name|getHostName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|OMNodeDetails
operator|.
name|Builder
argument_list|()
operator|.
name|setOMServiceId
argument_list|(
name|serviceId
argument_list|)
operator|.
name|setOMNodeId
argument_list|(
name|nodeId
argument_list|)
operator|.
name|setRpcAddress
argument_list|(
name|rpcAddress
argument_list|)
operator|.
name|setRatisPort
argument_list|(
name|ratisPort
argument_list|)
operator|.
name|setHttpAddress
argument_list|(
name|httpAddr
argument_list|)
operator|.
name|setHttpsAddress
argument_list|(
name|httpsAddr
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Check if any of the following configuration keys have been set using OM    * Node ID suffixed to the key. If yes, then set the base key with the    * configured valued.    *    1. {@link OMConfigKeys#OZONE_OM_HTTP_ADDRESS_KEY}    *    2. {@link OMConfigKeys#OZONE_OM_HTTPS_ADDRESS_KEY}    *    3. {@link OMConfigKeys#OZONE_OM_HTTP_BIND_HOST_KEY}    *    4. {@link OMConfigKeys#OZONE_OM_HTTPS_BIND_HOST_KEY}\    *    5. {@link OMConfigKeys#OZONE_OM_HTTP_KERBEROS_KEYTAB_FILE}    *    6. {@link OMConfigKeys#OZONE_OM_HTTP_KERBEROS_PRINCIPAL_KEY}    *    7. {@link OMConfigKeys#OZONE_OM_KERBEROS_KEYTAB_FILE_KEY}    *    8. {@link OMConfigKeys#OZONE_OM_KERBEROS_PRINCIPAL_KEY}    *    9. {@link OMConfigKeys#OZONE_OM_DB_DIRS}    *    10. {@link OMConfigKeys#OZONE_OM_ADDRESS_KEY}    */
DECL|method|setOMNodeSpecificConfigs ( OzoneConfiguration ozoneConfiguration, String omServiceId, String omNodeId)
specifier|private
specifier|static
name|void
name|setOMNodeSpecificConfigs
parameter_list|(
name|OzoneConfiguration
name|ozoneConfiguration
parameter_list|,
name|String
name|omServiceId
parameter_list|,
name|String
name|omNodeId
parameter_list|)
block|{
for|for
control|(
name|String
name|confKey
range|:
name|genericConfigKeys
control|)
block|{
name|String
name|confValue
init|=
name|OmUtils
operator|.
name|getConfSuffixedWithOMNodeId
argument_list|(
name|ozoneConfiguration
argument_list|,
name|confKey
argument_list|,
name|omServiceId
argument_list|,
name|omNodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|confValue
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting configuration key {} with value of key {}: {}"
argument_list|,
name|confKey
argument_list|,
name|OmUtils
operator|.
name|addKeySuffixes
argument_list|(
name|confKey
argument_list|,
name|omNodeId
argument_list|)
argument_list|,
name|confValue
argument_list|)
expr_stmt|;
name|ozoneConfiguration
operator|.
name|set
argument_list|(
name|confKey
argument_list|,
name|confValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

