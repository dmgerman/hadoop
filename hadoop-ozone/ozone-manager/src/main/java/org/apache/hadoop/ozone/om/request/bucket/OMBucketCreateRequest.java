begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.bucket
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OzoneAclUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|utils
operator|.
name|OzoneManagerDoubleBufferHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|CipherSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeyProviderCryptoExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|AuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|OMAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|OMClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|bucket
operator|.
name|OMBucketCreateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|BucketEncryptionInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateBucketResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|BucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|OMPBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|VOLUME_LOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|BUCKET_LOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CryptoProtocolVersionProto
operator|.
name|ENCRYPTION_ZONES
import|;
end_import

begin_comment
comment|/**  * Handles CreateBucket Request.  */
end_comment

begin_class
DECL|class|OMBucketCreateRequest
specifier|public
class|class
name|OMBucketCreateRequest
extends|extends
name|OMClientRequest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OMBucketCreateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|OMBucketCreateRequest (OMRequest omRequest)
specifier|public
name|OMBucketCreateRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|)
block|{
name|super
argument_list|(
name|omRequest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preExecute (OzoneManager ozoneManager)
specifier|public
name|OMRequest
name|preExecute
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get original request.
name|CreateBucketRequest
name|createBucketRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getCreateBucketRequest
argument_list|()
decl_stmt|;
name|BucketInfo
name|bucketInfo
init|=
name|createBucketRequest
operator|.
name|getBucketInfo
argument_list|()
decl_stmt|;
comment|// Get KMS provider.
name|KeyProviderCryptoExtension
name|kmsProvider
init|=
name|ozoneManager
operator|.
name|getKmsProvider
argument_list|()
decl_stmt|;
comment|// Create new Bucket request with new bucket info.
name|CreateBucketRequest
operator|.
name|Builder
name|newCreateBucketRequest
init|=
name|createBucketRequest
operator|.
name|toBuilder
argument_list|()
decl_stmt|;
name|BucketInfo
operator|.
name|Builder
name|newBucketInfo
init|=
name|bucketInfo
operator|.
name|toBuilder
argument_list|()
decl_stmt|;
comment|// Set creation time.
name|newBucketInfo
operator|.
name|setCreationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucketInfo
operator|.
name|hasBeinfo
argument_list|()
condition|)
block|{
name|newBucketInfo
operator|.
name|setBeinfo
argument_list|(
name|getBeinfo
argument_list|(
name|kmsProvider
argument_list|,
name|bucketInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newCreateBucketRequest
operator|.
name|setBucketInfo
argument_list|(
name|newBucketInfo
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getOmRequest
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setUserInfo
argument_list|(
name|getUserInfo
argument_list|()
argument_list|)
operator|.
name|setCreateBucketRequest
argument_list|(
name|newCreateBucketRequest
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|validateAndUpdateCache (OzoneManager ozoneManager, long transactionLogIndex, OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper)
specifier|public
name|OMClientResponse
name|validateAndUpdateCache
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|,
name|long
name|transactionLogIndex
parameter_list|,
name|OzoneManagerDoubleBufferHelper
name|ozoneManagerDoubleBufferHelper
parameter_list|)
block|{
name|OMMetrics
name|omMetrics
init|=
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|omMetrics
operator|.
name|incNumBucketCreates
argument_list|()
expr_stmt|;
name|OMMetadataManager
name|metadataManager
init|=
name|ozoneManager
operator|.
name|getMetadataManager
argument_list|()
decl_stmt|;
name|BucketInfo
name|bucketInfo
init|=
name|getBucketInfoFromRequest
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|bucketInfo
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|bucketInfo
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|OMResponse
operator|.
name|Builder
name|omResponse
init|=
name|OMResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Type
operator|.
name|CreateBucket
argument_list|)
operator|.
name|setStatus
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|OK
argument_list|)
decl_stmt|;
name|OmBucketInfo
name|omBucketInfo
init|=
name|OmBucketInfo
operator|.
name|getFromProtobuf
argument_list|(
name|bucketInfo
argument_list|)
decl_stmt|;
name|AuditLogger
name|auditLogger
init|=
name|ozoneManager
operator|.
name|getAuditLogger
argument_list|()
decl_stmt|;
name|OzoneManagerProtocolProtos
operator|.
name|UserInfo
name|userInfo
init|=
name|getOmRequest
argument_list|()
operator|.
name|getUserInfo
argument_list|()
decl_stmt|;
name|String
name|volumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|String
name|bucketKey
init|=
name|metadataManager
operator|.
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
decl_stmt|;
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
name|boolean
name|acquiredBucketLock
init|=
literal|false
decl_stmt|;
name|boolean
name|acquiredVolumeLock
init|=
literal|false
decl_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// check Acl
if|if
condition|(
name|ozoneManager
operator|.
name|getAclsEnabled
argument_list|()
condition|)
block|{
name|checkAcls
argument_list|(
name|ozoneManager
argument_list|,
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|VOLUME
argument_list|,
name|OzoneObj
operator|.
name|StoreType
operator|.
name|OZONE
argument_list|,
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|CREATE
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|acquiredVolumeLock
operator|=
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireReadLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
name|acquiredBucketLock
operator|=
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireWriteLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|OmVolumeArgs
name|omVolumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|volumeKey
argument_list|)
decl_stmt|;
comment|//Check if the volume exists
if|if
condition|(
name|omVolumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume: {} not found "
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume doesn't exist"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
comment|//Check if bucket already exists
if|if
condition|(
name|metadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|get
argument_list|(
name|bucketKey
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"bucket: {} already exists "
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Bucket already exist"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|BUCKET_ALREADY_EXISTS
argument_list|)
throw|;
block|}
comment|// Add default acls from volume.
name|addDefaultAcls
argument_list|(
name|omBucketInfo
argument_list|,
name|omVolumeArgs
argument_list|)
expr_stmt|;
comment|// Update table cache.
name|metadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|bucketKey
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|omBucketInfo
argument_list|)
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
name|omResponse
operator|.
name|setCreateBucketResponse
argument_list|(
name|CreateBucketResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|omClientResponse
operator|=
operator|new
name|OMBucketCreateResponse
argument_list|(
name|omBucketInfo
argument_list|,
name|omResponse
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
name|omClientResponse
operator|=
operator|new
name|OMBucketCreateResponse
argument_list|(
name|omBucketInfo
argument_list|,
name|createErrorOMResponse
argument_list|(
name|omResponse
argument_list|,
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|omClientResponse
operator|!=
literal|null
condition|)
block|{
name|omClientResponse
operator|.
name|setFlushFuture
argument_list|(
name|ozoneManagerDoubleBufferHelper
operator|.
name|add
argument_list|(
name|omClientResponse
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acquiredBucketLock
condition|)
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseWriteLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acquiredVolumeLock
condition|)
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseReadLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Performing audit logging outside of the lock.
name|auditLog
argument_list|(
name|auditLogger
argument_list|,
name|buildAuditMessage
argument_list|(
name|OMAction
operator|.
name|CREATE_BUCKET
argument_list|,
name|omBucketInfo
operator|.
name|toAuditMap
argument_list|()
argument_list|,
name|exception
argument_list|,
name|userInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// return response.
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"created bucket: {} in volume: {}"
argument_list|,
name|bucketName
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
name|omMetrics
operator|.
name|incNumBuckets
argument_list|()
expr_stmt|;
return|return
name|omClientResponse
return|;
block|}
else|else
block|{
name|omMetrics
operator|.
name|incNumBucketCreateFails
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Bucket creation failed for bucket:{} in volume:{}"
argument_list|,
name|bucketName
argument_list|,
name|volumeName
argument_list|,
name|exception
argument_list|)
expr_stmt|;
return|return
name|omClientResponse
return|;
block|}
block|}
comment|/**    * Add default acls for bucket. These acls are inherited from volume    * default acl list.    * @param omBucketInfo    * @param omVolumeArgs    */
DECL|method|addDefaultAcls (OmBucketInfo omBucketInfo, OmVolumeArgs omVolumeArgs)
specifier|private
name|void
name|addDefaultAcls
parameter_list|(
name|OmBucketInfo
name|omBucketInfo
parameter_list|,
name|OmVolumeArgs
name|omVolumeArgs
parameter_list|)
block|{
comment|// Add default acls from volume.
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|omBucketInfo
operator|.
name|getAcls
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|acls
operator|.
name|addAll
argument_list|(
name|omBucketInfo
operator|.
name|getAcls
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|defaultVolumeAclList
init|=
name|omVolumeArgs
operator|.
name|getAclMap
argument_list|()
operator|.
name|getDefaultAclList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OzoneAcl
operator|::
name|fromProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|OzoneAclUtil
operator|.
name|inheritDefaultAcls
argument_list|(
name|acls
argument_list|,
name|defaultVolumeAclList
argument_list|)
expr_stmt|;
name|omBucketInfo
operator|.
name|setAcls
argument_list|(
name|acls
argument_list|)
expr_stmt|;
block|}
DECL|method|getBucketInfoFromRequest ()
specifier|private
name|BucketInfo
name|getBucketInfoFromRequest
parameter_list|()
block|{
name|CreateBucketRequest
name|createBucketRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getCreateBucketRequest
argument_list|()
decl_stmt|;
return|return
name|createBucketRequest
operator|.
name|getBucketInfo
argument_list|()
return|;
block|}
DECL|method|getBeinfo ( KeyProviderCryptoExtension kmsProvider, BucketInfo bucketInfo)
specifier|private
name|BucketEncryptionInfoProto
name|getBeinfo
parameter_list|(
name|KeyProviderCryptoExtension
name|kmsProvider
parameter_list|,
name|BucketInfo
name|bucketInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|BucketEncryptionInfoProto
name|bek
init|=
name|bucketInfo
operator|.
name|getBeinfo
argument_list|()
decl_stmt|;
name|BucketEncryptionInfoProto
operator|.
name|Builder
name|bekb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|kmsProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Invalid KMS provider, check configuration "
operator|+
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_KEY_PROVIDER_PATH
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|INVALID_KMS_PROVIDER
argument_list|)
throw|;
block|}
if|if
condition|(
name|bek
operator|.
name|getKeyName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Bucket encryption key needed."
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|BUCKET_ENCRYPTION_KEY_NOT_FOUND
argument_list|)
throw|;
block|}
comment|// Talk to KMS to retrieve the bucket encryption key info.
name|KeyProvider
operator|.
name|Metadata
name|metadata
init|=
name|kmsProvider
operator|.
name|getMetadata
argument_list|(
name|bek
operator|.
name|getKeyName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Bucket encryption key "
operator|+
name|bek
operator|.
name|getKeyName
argument_list|()
operator|+
literal|" doesn't exist."
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|BUCKET_ENCRYPTION_KEY_NOT_FOUND
argument_list|)
throw|;
block|}
comment|// If the provider supports pool for EDEKs, this will fill in the pool
name|kmsProvider
operator|.
name|warmUpEncryptedKeys
argument_list|(
name|bek
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|bekb
operator|=
name|BucketEncryptionInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|bek
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setCryptoProtocolVersion
argument_list|(
name|ENCRYPTION_ZONES
argument_list|)
operator|.
name|setSuite
argument_list|(
name|OMPBHelper
operator|.
name|convert
argument_list|(
name|CipherSuite
operator|.
name|convert
argument_list|(
name|metadata
operator|.
name|getCipher
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bekb
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

