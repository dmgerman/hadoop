begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.file
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|utils
operator|.
name|OzoneManagerDoubleBufferHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ExcludeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|OMAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|key
operator|.
name|OMKeyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|KeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|UniqueId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|TableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|file
operator|.
name|OMFileRequest
operator|.
name|OMDirectoryResult
operator|.
name|DIRECTORY_EXISTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|file
operator|.
name|OMFileRequest
operator|.
name|OMDirectoryResult
operator|.
name|DIRECTORY_EXISTS_IN_GIVENPATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|file
operator|.
name|OMFileRequest
operator|.
name|OMDirectoryResult
operator|.
name|FILE_EXISTS_IN_GIVENPATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|file
operator|.
name|OMFileRequest
operator|.
name|OMDirectoryResult
operator|.
name|FILE_EXISTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|BUCKET_LOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|file
operator|.
name|OMFileRequest
operator|.
name|OMDirectoryResult
operator|.
name|NONE
import|;
end_import

begin_comment
comment|/**  * Handles create file request.  */
end_comment

begin_class
DECL|class|OMFileCreateRequest
specifier|public
class|class
name|OMFileCreateRequest
extends|extends
name|OMKeyRequest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OMFileCreateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|OMFileCreateRequest (OMRequest omRequest)
specifier|public
name|OMFileCreateRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|)
block|{
name|super
argument_list|(
name|omRequest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preExecute (OzoneManager ozoneManager)
specifier|public
name|OMRequest
name|preExecute
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|)
throws|throws
name|IOException
block|{
name|CreateFileRequest
name|createFileRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getCreateFileRequest
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|createFileRequest
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|createFileRequest
operator|.
name|getKeyArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyArgs
operator|.
name|getKeyName
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Check if this is the root of the filesystem.
comment|// Not throwing exception here, as need to throw exception after
comment|// checking volume/bucket exists.
return|return
name|getOmRequest
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setUserInfo
argument_list|(
name|getUserInfo
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
name|long
name|scmBlockSize
init|=
name|ozoneManager
operator|.
name|getScmBlockSize
argument_list|()
decl_stmt|;
comment|// NOTE size of a key is not a hard limit on anything, it is a value that
comment|// client should expect, in terms of current size of key. If client sets
comment|// a value, then this value is used, otherwise, we allocate a single
comment|// block which is the current size, if read by the client.
specifier|final
name|long
name|requestedSize
init|=
name|keyArgs
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
condition|?
name|keyArgs
operator|.
name|getDataSize
argument_list|()
else|:
name|scmBlockSize
decl_stmt|;
name|boolean
name|useRatis
init|=
name|ozoneManager
operator|.
name|shouldUseRatis
argument_list|()
decl_stmt|;
name|HddsProtos
operator|.
name|ReplicationFactor
name|factor
init|=
name|keyArgs
operator|.
name|getFactor
argument_list|()
decl_stmt|;
if|if
condition|(
name|factor
operator|==
literal|null
condition|)
block|{
name|factor
operator|=
name|useRatis
condition|?
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|THREE
else|:
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
expr_stmt|;
block|}
name|HddsProtos
operator|.
name|ReplicationType
name|type
init|=
name|keyArgs
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|useRatis
condition|?
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|RATIS
else|:
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
expr_stmt|;
block|}
comment|// TODO: Here we are allocating block with out any check for
comment|//  bucket/key/volume or not and also with out any authorization checks.
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|omKeyLocationInfoList
init|=
name|allocateBlock
argument_list|(
name|ozoneManager
operator|.
name|getScmClient
argument_list|()
argument_list|,
name|ozoneManager
operator|.
name|getBlockTokenSecretManager
argument_list|()
argument_list|,
name|type
argument_list|,
name|factor
argument_list|,
operator|new
name|ExcludeList
argument_list|()
argument_list|,
name|requestedSize
argument_list|,
name|scmBlockSize
argument_list|,
name|ozoneManager
operator|.
name|getPreallocateBlocksMax
argument_list|()
argument_list|,
name|ozoneManager
operator|.
name|isGrpcBlockTokenEnabled
argument_list|()
argument_list|,
name|ozoneManager
operator|.
name|getOMNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|KeyArgs
operator|.
name|Builder
name|newKeyArgs
init|=
name|keyArgs
operator|.
name|toBuilder
argument_list|()
operator|.
name|setModificationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|type
argument_list|)
operator|.
name|setFactor
argument_list|(
name|factor
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|requestedSize
argument_list|)
decl_stmt|;
name|newKeyArgs
operator|.
name|addAllKeyLocations
argument_list|(
name|omKeyLocationInfoList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OmKeyLocationInfo
operator|::
name|getProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CreateFileRequest
operator|.
name|Builder
name|newCreateFileRequest
init|=
name|createFileRequest
operator|.
name|toBuilder
argument_list|()
operator|.
name|setKeyArgs
argument_list|(
name|newKeyArgs
argument_list|)
operator|.
name|setClientID
argument_list|(
name|UniqueId
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getOmRequest
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setCreateFileRequest
argument_list|(
name|newCreateFileRequest
argument_list|)
operator|.
name|setUserInfo
argument_list|(
name|getUserInfo
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|validateAndUpdateCache (OzoneManager ozoneManager, long transactionLogIndex, OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper)
specifier|public
name|OMClientResponse
name|validateAndUpdateCache
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|,
name|long
name|transactionLogIndex
parameter_list|,
name|OzoneManagerDoubleBufferHelper
name|ozoneManagerDoubleBufferHelper
parameter_list|)
block|{
name|CreateFileRequest
name|createFileRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getCreateFileRequest
argument_list|()
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|createFileRequest
operator|.
name|getKeyArgs
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|keyArgs
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|keyArgs
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|keyArgs
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
comment|// if isRecursive is true, file would be created even if parent
comment|// directories does not exist.
name|boolean
name|isRecursive
init|=
name|createFileRequest
operator|.
name|getIsRecursive
argument_list|()
decl_stmt|;
comment|// if isOverWrite is true, file would be over written.
name|boolean
name|isOverWrite
init|=
name|createFileRequest
operator|.
name|getIsOverwrite
argument_list|()
decl_stmt|;
name|OMMetrics
name|omMetrics
init|=
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|omMetrics
operator|.
name|incNumCreateFile
argument_list|()
expr_stmt|;
name|OMMetadataManager
name|omMetadataManager
init|=
name|ozoneManager
operator|.
name|getMetadataManager
argument_list|()
decl_stmt|;
name|boolean
name|acquiredLock
init|=
literal|false
decl_stmt|;
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
name|Optional
argument_list|<
name|FileEncryptionInfo
argument_list|>
name|encryptionInfo
init|=
name|Optional
operator|.
name|absent
argument_list|()
decl_stmt|;
name|OmKeyInfo
name|omKeyInfo
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// check Acl
if|if
condition|(
name|ozoneManager
operator|.
name|getAclsEnabled
argument_list|()
condition|)
block|{
name|checkAcls
argument_list|(
name|ozoneManager
argument_list|,
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|BUCKET
argument_list|,
name|OzoneObj
operator|.
name|StoreType
operator|.
name|OZONE
argument_list|,
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|WRITE
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
block|}
comment|// acquire lock
name|acquiredLock
operator|=
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|OmBucketInfo
name|bucketInfo
init|=
name|omMetadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|get
argument_list|(
name|omMetadataManager
operator|.
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucketInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Bucket "
operator|+
name|bucketName
operator|+
literal|" not found"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|BUCKET_NOT_FOUND
argument_list|)
throw|;
block|}
if|if
condition|(
name|keyName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Check if this is the root of the filesystem.
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Can not write to directory: "
operator|+
name|keyName
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|NOT_A_FILE
argument_list|)
throw|;
block|}
name|OMFileRequest
operator|.
name|OMDirectoryResult
name|omDirectoryResult
init|=
name|OMFileRequest
operator|.
name|verifyFilesInPath
argument_list|(
name|omMetadataManager
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check if a file or directory exists with same key name.
if|if
condition|(
name|omDirectoryResult
operator|==
name|FILE_EXISTS
condition|)
block|{
if|if
condition|(
operator|!
name|isOverWrite
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"File "
operator|+
name|keyName
operator|+
literal|" already exists"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FILE_ALREADY_EXISTS
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|omDirectoryResult
operator|==
name|DIRECTORY_EXISTS
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Can not write to directory: "
operator|+
name|keyName
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|NOT_A_FILE
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|omDirectoryResult
operator|==
name|FILE_EXISTS_IN_GIVENPATH
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Can not create file: "
operator|+
name|keyName
operator|+
literal|"as there "
operator|+
literal|"is already file in the given path"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|NOT_A_FILE
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isRecursive
condition|)
block|{
comment|// We cannot create a file if complete parent directories does not exist
comment|// verifyFilesInPath, checks only the path and its parent directories.
comment|// But there may be some keys below the given path. So this method
comment|// checks them.
comment|// Example:
comment|// Existing keys in table
comment|// a/b/c/d/e
comment|// a/b/c/d/f
comment|// a/b
comment|// Take an example if given key to be created with isRecursive set
comment|// to false is "a/b/c/e".
comment|// There is no key in keyTable with the provided path.
comment|// Check in case if there are keys exist in given path. (This can
comment|// happen if keys are directly created using key requests.)
comment|// We need to do this check only in the case of non-recursive, so
comment|// not included the checks done in checkKeysUnderPath in
comment|// verifyFilesInPath method, as that method is common method for
comment|// directory and file create request. This also avoid's this
comment|// unnecessary check which is not required for those cases.
if|if
condition|(
name|omDirectoryResult
operator|==
name|NONE
operator|||
name|omDirectoryResult
operator|==
name|DIRECTORY_EXISTS_IN_GIVENPATH
condition|)
block|{
name|boolean
name|canBeCreated
init|=
name|checkKeysUnderPath
argument_list|(
name|omMetadataManager
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|canBeCreated
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Can not create file: "
operator|+
name|keyName
operator|+
literal|"as one"
operator|+
literal|" of parent directory is not created"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|NOT_A_FILE
argument_list|)
throw|;
block|}
block|}
block|}
comment|// do open key
name|encryptionInfo
operator|=
name|getFileEncryptionInfo
argument_list|(
name|ozoneManager
argument_list|,
name|bucketInfo
argument_list|)
expr_stmt|;
name|omKeyInfo
operator|=
name|prepareKeyInfo
argument_list|(
name|omMetadataManager
argument_list|,
name|keyArgs
argument_list|,
name|omMetadataManager
operator|.
name|getOzoneKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
argument_list|,
name|keyArgs
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|locations
argument_list|,
name|encryptionInfo
operator|.
name|orNull
argument_list|()
argument_list|)
expr_stmt|;
name|omClientResponse
operator|=
name|prepareCreateKeyResponse
argument_list|(
name|keyArgs
argument_list|,
name|omKeyInfo
argument_list|,
name|locations
argument_list|,
name|encryptionInfo
operator|.
name|orNull
argument_list|()
argument_list|,
name|exception
argument_list|,
name|createFileRequest
operator|.
name|getClientID
argument_list|()
argument_list|,
name|transactionLogIndex
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ozoneManager
argument_list|,
name|OMAction
operator|.
name|CREATE_FILE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
name|omClientResponse
operator|=
name|prepareCreateKeyResponse
argument_list|(
name|keyArgs
argument_list|,
name|omKeyInfo
argument_list|,
name|locations
argument_list|,
name|encryptionInfo
operator|.
name|orNull
argument_list|()
argument_list|,
name|exception
argument_list|,
name|createFileRequest
operator|.
name|getClientID
argument_list|()
argument_list|,
name|transactionLogIndex
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ozoneManager
argument_list|,
name|OMAction
operator|.
name|CREATE_FILE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|omClientResponse
operator|!=
literal|null
condition|)
block|{
name|omClientResponse
operator|.
name|setFlushFuture
argument_list|(
name|ozoneManagerDoubleBufferHelper
operator|.
name|add
argument_list|(
name|omClientResponse
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acquiredLock
condition|)
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|omClientResponse
return|;
block|}
comment|/**    * Check if any keys exist under given path.    * @param omMetadataManager    * @param volumeName    * @param bucketName    * @param keyName    * @return if exists true, else false. If key name is one level path return    * true.    * @throws IOException    */
DECL|method|checkKeysUnderPath (OMMetadataManager omMetadataManager, @Nonnull String volumeName, @Nonnull String bucketName, @Nonnull String keyName)
specifier|private
name|boolean
name|checkKeysUnderPath
parameter_list|(
name|OMMetadataManager
name|omMetadataManager
parameter_list|,
annotation|@
name|Nonnull
name|String
name|volumeName
parameter_list|,
annotation|@
name|Nonnull
name|String
name|bucketName
parameter_list|,
annotation|@
name|Nonnull
name|String
name|keyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|parentPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentPath
operator|!=
literal|null
condition|)
block|{
name|String
name|dbKeyPath
init|=
name|omMetadataManager
operator|.
name|getOzoneDirKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|parentPath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// First check in key table cache.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|CacheKey
argument_list|<
name|String
argument_list|>
argument_list|,
name|CacheValue
argument_list|<
name|OmKeyInfo
argument_list|>
argument_list|>
argument_list|>
name|iterator
init|=
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|cacheIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|CacheKey
argument_list|<
name|String
argument_list|>
argument_list|,
name|CacheValue
argument_list|<
name|OmKeyInfo
argument_list|>
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getCacheKey
argument_list|()
decl_stmt|;
name|OmKeyInfo
name|omKeyInfo
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getCacheValue
argument_list|()
decl_stmt|;
comment|// Making sure that entry is not for delete key request.
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|dbKeyPath
argument_list|)
operator|&&
name|omKeyInfo
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
try|try
init|(
name|TableIterator
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Table
operator|.
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
argument_list|>
name|keyIter
init|=
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|iterator
argument_list|()
init|)
block|{
name|Table
operator|.
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
name|kv
init|=
name|keyIter
operator|.
name|seek
argument_list|(
name|dbKeyPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|!=
literal|null
condition|)
block|{
comment|// Check the entry in db is not marked for delete. This can happen
comment|// while entry is marked for delete, but it is not flushed to DB.
name|CacheValue
argument_list|<
name|OmKeyInfo
argument_list|>
name|cacheValue
init|=
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|getCacheValue
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|kv
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|dbKeyPath
argument_list|)
operator|&&
name|cacheValue
operator|.
name|getCacheValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
comment|// we found at least one key with this db key path
block|}
block|}
else|else
block|{
if|if
condition|(
name|kv
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|dbKeyPath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
comment|// we found at least one key with this db key path
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// one level key path.
comment|// We can safely return true, as this method is called after
comment|// verifyFilesInPath, so with this keyName there is no file and directory.
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

