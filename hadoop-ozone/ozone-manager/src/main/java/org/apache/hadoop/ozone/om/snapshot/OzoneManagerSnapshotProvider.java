begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.snapshot
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMNodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBCheckpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|RocksDBCheckpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_CREATED
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OM_RATIS_SNAPSHOT_INDEX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_SNAPSHOT_PROVIDER_CONNECTION_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_SNAPSHOT_PROVIDER_REQUEST_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_SNAPSHOT_PROVIDER_REQUEST_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_SNAPSHOT_PROVIDER_CONNECTION_TIMEOUT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_SNAPSHOT_PROVIDER_SOCKET_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_SNAPSHOT_PROVIDER_SOCKET_TIMEOUT_KEY
import|;
end_import

begin_comment
comment|/**  * OzoneManagerSnapshotProvider downloads the latest checkpoint from the  * leader OM and loads the checkpoint into State Machine.  */
end_comment

begin_class
DECL|class|OzoneManagerSnapshotProvider
specifier|public
class|class
name|OzoneManagerSnapshotProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneManagerSnapshotProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|omSnapshotDir
specifier|private
specifier|final
name|File
name|omSnapshotDir
decl_stmt|;
DECL|field|peerNodesMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|OMNodeDetails
argument_list|>
name|peerNodesMap
decl_stmt|;
DECL|field|httpPolicy
specifier|private
specifier|final
name|HttpConfig
operator|.
name|Policy
name|httpPolicy
decl_stmt|;
DECL|field|httpRequestConfig
specifier|private
specifier|final
name|RequestConfig
name|httpRequestConfig
decl_stmt|;
DECL|field|httpClient
specifier|private
name|CloseableHttpClient
name|httpClient
decl_stmt|;
DECL|field|OM_SNAPSHOT_DB
specifier|private
specifier|static
specifier|final
name|String
name|OM_SNAPSHOT_DB
init|=
literal|"om.snapshot.db"
decl_stmt|;
DECL|method|OzoneManagerSnapshotProvider (Configuration conf, File omRatisSnapshotDir, List<OMNodeDetails> peerNodes)
specifier|public
name|OzoneManagerSnapshotProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|File
name|omRatisSnapshotDir
parameter_list|,
name|List
argument_list|<
name|OMNodeDetails
argument_list|>
name|peerNodes
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing OM Snapshot Provider"
argument_list|)
expr_stmt|;
name|this
operator|.
name|omSnapshotDir
operator|=
name|omRatisSnapshotDir
expr_stmt|;
name|this
operator|.
name|peerNodesMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|OMNodeDetails
name|peerNode
range|:
name|peerNodes
control|)
block|{
name|this
operator|.
name|peerNodesMap
operator|.
name|put
argument_list|(
name|peerNode
operator|.
name|getOMNodeId
argument_list|()
argument_list|,
name|peerNode
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|httpPolicy
operator|=
name|DFSUtil
operator|.
name|getHttpPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpRequestConfig
operator|=
name|getHttpRequestConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpRequestConfig (Configuration conf)
specifier|private
name|RequestConfig
name|getHttpRequestConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|TimeUnit
name|socketTimeoutUnit
init|=
name|OZONE_OM_SNAPSHOT_PROVIDER_SOCKET_TIMEOUT_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|int
name|socketTimeoutMS
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_OM_SNAPSHOT_PROVIDER_SOCKET_TIMEOUT_KEY
argument_list|,
name|OZONE_OM_SNAPSHOT_PROVIDER_SOCKET_TIMEOUT_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|socketTimeoutUnit
argument_list|)
decl_stmt|;
name|TimeUnit
name|connectionTimeoutUnit
init|=
name|OZONE_OM_SNAPSHOT_PROVIDER_CONNECTION_TIMEOUT_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|int
name|connectionTimeoutMS
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_OM_SNAPSHOT_PROVIDER_CONNECTION_TIMEOUT_KEY
argument_list|,
name|OZONE_OM_SNAPSHOT_PROVIDER_CONNECTION_TIMEOUT_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|connectionTimeoutUnit
argument_list|)
decl_stmt|;
name|TimeUnit
name|requestTimeoutUnit
init|=
name|OZONE_OM_SNAPSHOT_PROVIDER_REQUEST_TIMEOUT_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|int
name|requestTimeoutMS
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_OM_SNAPSHOT_PROVIDER_REQUEST_TIMEOUT_KEY
argument_list|,
name|OZONE_OM_SNAPSHOT_PROVIDER_REQUEST_TIMEOUT_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|requestTimeoutUnit
argument_list|)
decl_stmt|;
name|RequestConfig
name|requestConfig
init|=
name|RequestConfig
operator|.
name|custom
argument_list|()
operator|.
name|setSocketTimeout
argument_list|(
name|socketTimeoutMS
argument_list|)
operator|.
name|setConnectTimeout
argument_list|(
name|connectionTimeoutMS
argument_list|)
operator|.
name|setConnectionRequestTimeout
argument_list|(
name|requestTimeoutMS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|requestConfig
return|;
block|}
comment|/**    * Create and return http client object.    */
DECL|method|getHttpClient ()
specifier|private
name|HttpClient
name|getHttpClient
parameter_list|()
block|{
if|if
condition|(
name|httpClient
operator|==
literal|null
condition|)
block|{
name|httpClient
operator|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|setDefaultRequestConfig
argument_list|(
name|httpRequestConfig
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|httpClient
return|;
block|}
comment|/**    * Close http client object.    */
DECL|method|closeHttpClient ()
specifier|private
name|void
name|closeHttpClient
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|httpClient
operator|!=
literal|null
condition|)
block|{
name|httpClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|httpClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Download the latest checkpoint from OM Leader via HTTP.    * @param leaderOMNodeID leader OM Node ID.    * @return the DB checkpoint (including the ratis snapshot index)    */
DECL|method|getOzoneManagerDBSnapshot (String leaderOMNodeID)
specifier|public
name|DBCheckpoint
name|getOzoneManagerDBSnapshot
parameter_list|(
name|String
name|leaderOMNodeID
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|snapshotFileName
init|=
name|OM_SNAPSHOT_DB
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|omSnapshotDir
argument_list|,
name|snapshotFileName
operator|+
literal|".tar.gz"
argument_list|)
decl_stmt|;
name|String
name|omCheckpointUrl
init|=
name|peerNodesMap
operator|.
name|get
argument_list|(
name|leaderOMNodeID
argument_list|)
operator|.
name|getOMDBCheckpointEnpointUrl
argument_list|(
name|httpPolicy
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Downloading latest checkpoint from Leader OM {}. Checkpoint "
operator|+
literal|"URL: {}"
argument_list|,
name|leaderOMNodeID
argument_list|,
name|omCheckpointUrl
argument_list|)
expr_stmt|;
try|try
block|{
name|HttpGet
name|httpGet
init|=
operator|new
name|HttpGet
argument_list|(
name|omCheckpointUrl
argument_list|)
decl_stmt|;
name|HttpResponse
name|response
init|=
name|getHttpClient
argument_list|()
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|HttpEntity
name|entity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|errorCode
operator|==
name|HTTP_OK
operator|)
operator|||
operator|(
name|errorCode
operator|==
name|HTTP_CREATED
operator|)
condition|)
block|{
name|Header
name|header
init|=
name|response
operator|.
name|getFirstHeader
argument_list|(
name|OM_RATIS_SNAPSHOT_INDEX
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The HTTP response header "
operator|+
name|OM_RATIS_SNAPSHOT_INDEX
operator|+
literal|" is missing."
argument_list|)
throw|;
block|}
name|long
name|snapshotIndex
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|inputStream
init|=
name|entity
operator|.
name|getContent
argument_list|()
init|)
block|{
name|FileUtils
operator|.
name|copyInputStreamToFile
argument_list|(
name|inputStream
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
block|}
comment|// Untar the checkpoint file.
name|Path
name|untarredDbDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|omSnapshotDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|snapshotFileName
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|unTar
argument_list|(
name|targetFile
argument_list|,
name|untarredDbDir
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sucessfully downloaded latest checkpoint with snapshot "
operator|+
literal|"index {} from leader OM: {}"
argument_list|,
name|snapshotIndex
argument_list|,
name|leaderOMNodeID
argument_list|)
expr_stmt|;
name|RocksDBCheckpoint
name|omCheckpoint
init|=
operator|new
name|RocksDBCheckpoint
argument_list|(
name|untarredDbDir
argument_list|)
decl_stmt|;
name|omCheckpoint
operator|.
name|setRatisSnapshotIndex
argument_list|(
name|snapshotIndex
argument_list|)
expr_stmt|;
return|return
name|omCheckpoint
return|;
block|}
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected exception when trying to reach "
operator|+
literal|"OM to download latest checkpoint. Checkpoint URL: "
operator|+
name|omCheckpointUrl
operator|+
literal|". Entity: "
operator|+
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected null in http payload, while "
operator|+
literal|"processing request to OM to download latest checkpoint. "
operator|+
literal|"Checkpoint Url: "
operator|+
name|omCheckpointUrl
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|closeHttpClient
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

