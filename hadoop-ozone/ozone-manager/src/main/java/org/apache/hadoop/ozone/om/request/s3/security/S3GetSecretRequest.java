begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.s3.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|s3
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|OMAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|S3SecretValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|utils
operator|.
name|OzoneManagerDoubleBufferHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|OMClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|s3
operator|.
name|security
operator|.
name|S3GetSecretResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|GetS3SecretRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|GetS3SecretResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|UpdateGetS3SecretRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|S3Secret
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|S3_SECRET_LOCK
import|;
end_import

begin_comment
comment|/**  * Handles GetS3Secret request.  */
end_comment

begin_class
DECL|class|S3GetSecretRequest
specifier|public
class|class
name|S3GetSecretRequest
extends|extends
name|OMClientRequest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3GetSecretRequest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|S3GetSecretRequest (OMRequest omRequest)
specifier|public
name|S3GetSecretRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|)
block|{
name|super
argument_list|(
name|omRequest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preExecute (OzoneManager ozoneManager)
specifier|public
name|OMRequest
name|preExecute
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|)
throws|throws
name|IOException
block|{
name|GetS3SecretRequest
name|s3GetSecretRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getGetS3SecretRequest
argument_list|()
decl_stmt|;
comment|// Generate S3 Secret to be used by OM quorum.
name|String
name|kerberosID
init|=
name|s3GetSecretRequest
operator|.
name|getKerberosID
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|getUserName
argument_list|()
operator|.
name|equals
argument_list|(
name|kerberosID
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"User mismatch. Requested user name is "
operator|+
literal|"mismatched "
operator|+
name|kerberosID
operator|+
literal|", with current user "
operator|+
name|user
operator|.
name|getUserName
argument_list|()
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|USER_MISMATCH
argument_list|)
throw|;
block|}
name|String
name|s3Secret
init|=
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|OmUtils
operator|.
name|getSHADigest
argument_list|()
argument_list|)
decl_stmt|;
name|UpdateGetS3SecretRequest
name|updateGetS3SecretRequest
init|=
name|UpdateGetS3SecretRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAwsSecret
argument_list|(
name|s3Secret
argument_list|)
operator|.
name|setKerberosID
argument_list|(
name|kerberosID
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Client issues GetS3Secret request, when received by OM leader
comment|// it will generate s3Secret. Original GetS3Secret request is
comment|// converted to UpdateGetS3Secret request with the generated token
comment|// information. This updated request will be submitted to Ratis. In this
comment|// way S3Secret created by leader, will be replicated across all
comment|// OMs. With this approach, original GetS3Secret request from
comment|// client does not need any proto changes.
name|OMRequest
operator|.
name|Builder
name|omRequest
init|=
name|OMRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserInfo
argument_list|(
name|getUserInfo
argument_list|()
argument_list|)
operator|.
name|setUpdateGetS3SecretRequest
argument_list|(
name|updateGetS3SecretRequest
argument_list|)
operator|.
name|setCmdType
argument_list|(
name|getOmRequest
argument_list|()
operator|.
name|getCmdType
argument_list|()
argument_list|)
operator|.
name|setClientId
argument_list|(
name|getOmRequest
argument_list|()
operator|.
name|getClientId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getOmRequest
argument_list|()
operator|.
name|hasTraceID
argument_list|()
condition|)
block|{
name|omRequest
operator|.
name|setTraceID
argument_list|(
name|getOmRequest
argument_list|()
operator|.
name|getTraceID
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|omRequest
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|validateAndUpdateCache (OzoneManager ozoneManager, long transactionLogIndex, OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper)
specifier|public
name|OMClientResponse
name|validateAndUpdateCache
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|,
name|long
name|transactionLogIndex
parameter_list|,
name|OzoneManagerDoubleBufferHelper
name|ozoneManagerDoubleBufferHelper
parameter_list|)
block|{
name|OMClientResponse
name|omClientResponse
init|=
literal|null
decl_stmt|;
name|OMResponse
operator|.
name|Builder
name|omResponse
init|=
name|OMResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Type
operator|.
name|GetS3Secret
argument_list|)
operator|.
name|setStatus
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|setSuccess
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|acquiredLock
init|=
literal|false
decl_stmt|;
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
name|OMMetadataManager
name|omMetadataManager
init|=
name|ozoneManager
operator|.
name|getMetadataManager
argument_list|()
decl_stmt|;
name|UpdateGetS3SecretRequest
name|updateGetS3SecretRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getUpdateGetS3SecretRequest
argument_list|()
decl_stmt|;
name|String
name|kerberosID
init|=
name|updateGetS3SecretRequest
operator|.
name|getKerberosID
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|awsSecret
init|=
name|updateGetS3SecretRequest
operator|.
name|getAwsSecret
argument_list|()
decl_stmt|;
name|acquiredLock
operator|=
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|S3_SECRET_LOCK
argument_list|,
name|kerberosID
argument_list|)
expr_stmt|;
name|S3SecretValue
name|s3SecretValue
init|=
name|omMetadataManager
operator|.
name|getS3SecretTable
argument_list|()
operator|.
name|get
argument_list|(
name|kerberosID
argument_list|)
decl_stmt|;
comment|// If s3Secret for user is not in S3Secret table, add the Secret to cache.
if|if
condition|(
name|s3SecretValue
operator|==
literal|null
condition|)
block|{
name|omMetadataManager
operator|.
name|getS3SecretTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|kerberosID
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|S3SecretValue
argument_list|(
name|kerberosID
argument_list|,
name|awsSecret
argument_list|)
argument_list|)
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If it already exists, use the existing one.
name|awsSecret
operator|=
name|s3SecretValue
operator|.
name|getAwsSecret
argument_list|()
expr_stmt|;
block|}
name|GetS3SecretResponse
operator|.
name|Builder
name|getS3SecretResponse
init|=
name|GetS3SecretResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setS3Secret
argument_list|(
name|S3Secret
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAwsSecret
argument_list|(
name|awsSecret
argument_list|)
operator|.
name|setKerberosID
argument_list|(
name|kerberosID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|s3SecretValue
operator|==
literal|null
condition|)
block|{
name|omClientResponse
operator|=
operator|new
name|S3GetSecretResponse
argument_list|(
operator|new
name|S3SecretValue
argument_list|(
name|kerberosID
argument_list|,
name|awsSecret
argument_list|)
argument_list|,
name|omResponse
operator|.
name|setGetS3SecretResponse
argument_list|(
name|getS3SecretResponse
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// As when it already exists, we don't need to add to DB again. So
comment|// set the value to null.
name|omClientResponse
operator|=
operator|new
name|S3GetSecretResponse
argument_list|(
literal|null
argument_list|,
name|omResponse
operator|.
name|setGetS3SecretResponse
argument_list|(
name|getS3SecretResponse
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
name|omClientResponse
operator|=
operator|new
name|S3GetSecretResponse
argument_list|(
literal|null
argument_list|,
name|createErrorOMResponse
argument_list|(
name|omResponse
argument_list|,
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|omClientResponse
operator|!=
literal|null
condition|)
block|{
name|omClientResponse
operator|.
name|setFlushFuture
argument_list|(
name|ozoneManagerDoubleBufferHelper
operator|.
name|add
argument_list|(
name|omClientResponse
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acquiredLock
condition|)
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|S3_SECRET_LOCK
argument_list|,
name|kerberosID
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|S3_GETSECRET_USER
argument_list|,
name|kerberosID
argument_list|)
expr_stmt|;
comment|// audit log
name|auditLog
argument_list|(
name|ozoneManager
operator|.
name|getAuditLogger
argument_list|()
argument_list|,
name|buildAuditMessage
argument_list|(
name|OMAction
operator|.
name|GET_S3_SECRET
argument_list|,
name|auditMap
argument_list|,
name|exception
argument_list|,
name|getOmRequest
argument_list|()
operator|.
name|getUserInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Secret for accessKey:{} is generated Successfully"
argument_list|,
name|kerberosID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Secret for accessKey:{} is generation failed"
argument_list|,
name|kerberosID
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
return|return
name|omClientResponse
return|;
block|}
block|}
end_class

end_unit

