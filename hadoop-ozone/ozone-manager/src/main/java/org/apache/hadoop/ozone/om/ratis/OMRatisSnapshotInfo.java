begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|protocol
operator|.
name|TermIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|storage
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|SnapshotInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|DumperOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|yaml
operator|.
name|snakeyaml
operator|.
name|Yaml
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OM_RATIS_SNAPSHOT_INDEX
import|;
end_import

begin_comment
comment|/**  * This class captures the snapshotIndex and term of the latest snapshot in  * the OM.  * Ratis server loads the snapshotInfo during startup and updates the  * lastApplied index to this snapshotIndex. OM SnapshotInfo does not contain  * any files. It is used only to store/ update the last applied index and term.  */
end_comment

begin_class
DECL|class|OMRatisSnapshotInfo
specifier|public
class|class
name|OMRatisSnapshotInfo
implements|implements
name|SnapshotInfo
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OMRatisSnapshotInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|term
specifier|private
specifier|volatile
name|long
name|term
init|=
literal|0
decl_stmt|;
DECL|field|snapshotIndex
specifier|private
specifier|volatile
name|long
name|snapshotIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|ratisSnapshotFile
specifier|private
specifier|final
name|File
name|ratisSnapshotFile
decl_stmt|;
DECL|method|OMRatisSnapshotInfo (File ratisDir)
specifier|public
name|OMRatisSnapshotInfo
parameter_list|(
name|File
name|ratisDir
parameter_list|)
throws|throws
name|IOException
block|{
name|ratisSnapshotFile
operator|=
operator|new
name|File
argument_list|(
name|ratisDir
argument_list|,
name|OM_RATIS_SNAPSHOT_INDEX
argument_list|)
expr_stmt|;
name|loadRatisSnapshotIndex
argument_list|()
expr_stmt|;
block|}
DECL|method|updateTerm (long newTerm)
specifier|public
name|void
name|updateTerm
parameter_list|(
name|long
name|newTerm
parameter_list|)
block|{
name|term
operator|=
name|newTerm
expr_stmt|;
block|}
DECL|method|updateSnapshotIndex (long newSnapshotIndex)
specifier|private
name|void
name|updateSnapshotIndex
parameter_list|(
name|long
name|newSnapshotIndex
parameter_list|)
block|{
name|snapshotIndex
operator|=
name|newSnapshotIndex
expr_stmt|;
block|}
DECL|method|updateTermIndex (long newTerm, long newIndex)
specifier|private
name|void
name|updateTermIndex
parameter_list|(
name|long
name|newTerm
parameter_list|,
name|long
name|newIndex
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|newTerm
expr_stmt|;
name|this
operator|.
name|snapshotIndex
operator|=
name|newIndex
expr_stmt|;
block|}
comment|/**    * Load the snapshot index and term from the snapshot file on disk,    * if it exists.    * @throws IOException    */
DECL|method|loadRatisSnapshotIndex ()
specifier|private
name|void
name|loadRatisSnapshotIndex
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ratisSnapshotFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|RatisSnapshotYaml
name|ratisSnapshotYaml
init|=
name|readRatisSnapshotYaml
argument_list|()
decl_stmt|;
name|updateTermIndex
argument_list|(
name|ratisSnapshotYaml
operator|.
name|term
argument_list|,
name|ratisSnapshotYaml
operator|.
name|snapshotIndex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read and parse the snapshot yaml file.    */
DECL|method|readRatisSnapshotYaml ()
specifier|private
name|RatisSnapshotYaml
name|readRatisSnapshotYaml
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|FileInputStream
name|inputFileStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|ratisSnapshotFile
argument_list|)
init|)
block|{
name|Yaml
name|yaml
init|=
operator|new
name|Yaml
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|yaml
operator|.
name|loadAs
argument_list|(
name|inputFileStream
argument_list|,
name|RatisSnapshotYaml
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to parse RatisSnapshot yaml file."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Update and persist the snapshot index and term to disk.    * @param index new snapshot index to be persisted to disk.    * @throws IOException    */
DECL|method|saveRatisSnapshotToDisk (long index)
specifier|public
name|void
name|saveRatisSnapshotToDisk
parameter_list|(
name|long
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|updateSnapshotIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|writeRatisSnapshotYaml
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Saved Ratis Snapshot on the OM with snapshotIndex {}"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write snapshot details to disk in yaml format.    */
DECL|method|writeRatisSnapshotYaml ()
specifier|private
name|void
name|writeRatisSnapshotYaml
parameter_list|()
throws|throws
name|IOException
block|{
name|DumperOptions
name|options
init|=
operator|new
name|DumperOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setPrettyFlow
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|options
operator|.
name|setDefaultFlowStyle
argument_list|(
name|DumperOptions
operator|.
name|FlowStyle
operator|.
name|FLOW
argument_list|)
expr_stmt|;
name|Yaml
name|yaml
init|=
operator|new
name|Yaml
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|RatisSnapshotYaml
name|ratisSnapshotYaml
init|=
operator|new
name|RatisSnapshotYaml
argument_list|(
name|term
argument_list|,
name|snapshotIndex
argument_list|)
decl_stmt|;
try|try
init|(
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|ratisSnapshotFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|yaml
operator|.
name|dump
argument_list|(
name|ratisSnapshotYaml
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTermIndex ()
specifier|public
name|TermIndex
name|getTermIndex
parameter_list|()
block|{
return|return
name|TermIndex
operator|.
name|newTermIndex
argument_list|(
name|term
argument_list|,
name|snapshotIndex
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTerm ()
specifier|public
name|long
name|getTerm
parameter_list|()
block|{
return|return
name|term
return|;
block|}
annotation|@
name|Override
DECL|method|getIndex ()
specifier|public
name|long
name|getIndex
parameter_list|()
block|{
return|return
name|snapshotIndex
return|;
block|}
annotation|@
name|Override
DECL|method|getFiles ()
specifier|public
name|List
argument_list|<
name|FileInfo
argument_list|>
name|getFiles
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Ratis Snapshot details to be written to the yaml file.    */
DECL|class|RatisSnapshotYaml
specifier|public
specifier|static
class|class
name|RatisSnapshotYaml
block|{
DECL|field|term
specifier|private
name|long
name|term
decl_stmt|;
DECL|field|snapshotIndex
specifier|private
name|long
name|snapshotIndex
decl_stmt|;
DECL|method|RatisSnapshotYaml ()
specifier|public
name|RatisSnapshotYaml
parameter_list|()
block|{
comment|// Needed for snake-yaml introspection.
block|}
DECL|method|RatisSnapshotYaml (long term, long snapshotIndex)
name|RatisSnapshotYaml
parameter_list|(
name|long
name|term
parameter_list|,
name|long
name|snapshotIndex
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|snapshotIndex
operator|=
name|snapshotIndex
expr_stmt|;
block|}
DECL|method|setTerm (long term)
specifier|public
name|void
name|setTerm
parameter_list|(
name|long
name|term
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
DECL|method|getTerm ()
specifier|public
name|long
name|getTerm
parameter_list|()
block|{
return|return
name|this
operator|.
name|term
return|;
block|}
DECL|method|setSnapshotIndex (long index)
specifier|public
name|void
name|setSnapshotIndex
parameter_list|(
name|long
name|index
parameter_list|)
block|{
name|this
operator|.
name|snapshotIndex
operator|=
name|index
expr_stmt|;
block|}
DECL|method|getSnapshotIndex ()
specifier|public
name|long
name|getSnapshotIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshotIndex
return|;
block|}
block|}
block|}
end_class

end_unit

