begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.volume
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|volume
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|OMClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|VolumeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Defines common methods required for volume requests.  */
end_comment

begin_class
DECL|class|OMVolumeRequest
specifier|public
specifier|abstract
class|class
name|OMVolumeRequest
extends|extends
name|OMClientRequest
block|{
DECL|method|OMVolumeRequest (OMRequest omRequest)
specifier|public
name|OMVolumeRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|)
block|{
name|super
argument_list|(
name|omRequest
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete volume from user volume list. This method should be called after    * acquiring user lock.    * @param volumeList - current volume list owned by user.    * @param volume - volume which needs to deleted from the volume list.    * @param owner - Name of the Owner.    * @param txID - The transaction ID that is updating this value.    * @return VolumeList - updated volume list for the user.    * @throws IOException    */
DECL|method|delVolumeFromOwnerList (VolumeList volumeList, String volume, String owner, long txID)
specifier|protected
name|VolumeList
name|delVolumeFromOwnerList
parameter_list|(
name|VolumeList
name|volumeList
parameter_list|,
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|,
name|long
name|txID
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|prevVolList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|volumeList
operator|!=
literal|null
condition|)
block|{
name|prevVolList
operator|.
name|addAll
argument_list|(
name|volumeList
operator|.
name|getVolumeNamesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No Volumes for this user
throw|throw
operator|new
name|OMException
argument_list|(
literal|"User not found: "
operator|+
name|owner
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|USER_NOT_FOUND
argument_list|)
throw|;
block|}
comment|// Remove the volume from the list
name|prevVolList
operator|.
name|remove
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|VolumeList
name|newVolList
init|=
name|VolumeList
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllVolumeNames
argument_list|(
name|prevVolList
argument_list|)
operator|.
name|setObjectID
argument_list|(
name|volumeList
operator|.
name|getObjectID
argument_list|()
argument_list|)
operator|.
name|setUpdateID
argument_list|(
name|txID
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|newVolList
return|;
block|}
comment|/**    * Add volume to user volume list. This method should be called after    * acquiring user lock.    * @param volumeList - current volume list owned by user.    * @param volume - volume which needs to be added to this list.    * @param owner    * @param maxUserVolumeCount    * @return VolumeList - which is updated volume list.    * @throws OMException - if user has volumes greater than    * maxUserVolumeCount, an exception is thrown.    */
DECL|method|addVolumeToOwnerList (VolumeList volumeList, String volume, String owner, long maxUserVolumeCount, long txID)
specifier|protected
name|VolumeList
name|addVolumeToOwnerList
parameter_list|(
name|VolumeList
name|volumeList
parameter_list|,
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|,
name|long
name|maxUserVolumeCount
parameter_list|,
name|long
name|txID
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check the volume count
if|if
condition|(
name|volumeList
operator|!=
literal|null
operator|&&
name|volumeList
operator|.
name|getVolumeNamesList
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|maxUserVolumeCount
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Too many volumes for user:"
operator|+
name|owner
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|USER_TOO_MANY_VOLUMES
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|prevVolList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|objectID
init|=
name|txID
decl_stmt|;
if|if
condition|(
name|volumeList
operator|!=
literal|null
condition|)
block|{
name|prevVolList
operator|.
name|addAll
argument_list|(
name|volumeList
operator|.
name|getVolumeNamesList
argument_list|()
argument_list|)
expr_stmt|;
name|objectID
operator|=
name|volumeList
operator|.
name|getObjectID
argument_list|()
expr_stmt|;
block|}
comment|// Add the new volume to the list
name|prevVolList
operator|.
name|add
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|VolumeList
name|newVolList
init|=
name|VolumeList
operator|.
name|newBuilder
argument_list|()
operator|.
name|setObjectID
argument_list|(
name|objectID
argument_list|)
operator|.
name|setUpdateID
argument_list|(
name|txID
argument_list|)
operator|.
name|addAllVolumeNames
argument_list|(
name|prevVolList
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|newVolList
return|;
block|}
comment|/**    * Create Ozone Volume. This method should be called after acquiring user    * and volume Lock.    * @param omMetadataManager    * @param omVolumeArgs    * @param volumeList    * @param dbVolumeKey    * @param dbUserKey    * @param transactionLogIndex    * @throws IOException    */
DECL|method|createVolume (final OMMetadataManager omMetadataManager, OmVolumeArgs omVolumeArgs, VolumeList volumeList, String dbVolumeKey, String dbUserKey, long transactionLogIndex)
specifier|protected
name|void
name|createVolume
parameter_list|(
specifier|final
name|OMMetadataManager
name|omMetadataManager
parameter_list|,
name|OmVolumeArgs
name|omVolumeArgs
parameter_list|,
name|VolumeList
name|volumeList
parameter_list|,
name|String
name|dbVolumeKey
parameter_list|,
name|String
name|dbUserKey
parameter_list|,
name|long
name|transactionLogIndex
parameter_list|)
block|{
comment|// Update cache: Update user and volume cache.
name|omMetadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|dbUserKey
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|volumeList
argument_list|)
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|dbVolumeKey
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|omVolumeArgs
argument_list|)
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

