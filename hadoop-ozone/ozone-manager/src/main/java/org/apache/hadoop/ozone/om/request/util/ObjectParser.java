begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneObj
operator|.
name|ObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_URI_DELIMITER
import|;
end_import

begin_comment
comment|/**  * Utility class to parse {@link OzoneObj#getPath()}.  */
end_comment

begin_class
DECL|class|ObjectParser
specifier|public
class|class
name|ObjectParser
block|{
DECL|field|volume
specifier|private
name|String
name|volume
decl_stmt|;
DECL|field|bucket
specifier|private
name|String
name|bucket
decl_stmt|;
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
comment|/**    * Parse the path and extract volume, bucket and key names.    * @param path    */
DECL|method|ObjectParser (String path, ObjectType objectType)
specifier|public
name|ObjectParser
parameter_list|(
name|String
name|path
parameter_list|,
name|ObjectType
name|objectType
parameter_list|)
throws|throws
name|OMException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
index|[]
name|tokens
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|path
argument_list|,
name|OZONE_URI_DELIMITER
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectType
operator|==
name|ObjectType
operator|.
name|VOLUME
operator|&&
name|tokens
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|volume
operator|=
name|tokens
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|objectType
operator|==
name|ObjectType
operator|.
name|BUCKET
operator|&&
name|tokens
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|volume
operator|=
name|tokens
index|[
literal|0
index|]
expr_stmt|;
name|bucket
operator|=
name|tokens
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|objectType
operator|==
name|ObjectType
operator|.
name|KEY
operator|&&
name|tokens
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|volume
operator|=
name|tokens
index|[
literal|0
index|]
expr_stmt|;
name|bucket
operator|=
name|tokens
index|[
literal|1
index|]
expr_stmt|;
name|key
operator|=
name|tokens
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Illegal path "
operator|+
name|path
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|INVALID_PATH_IN_ACL_REQUEST
argument_list|)
throw|;
block|}
block|}
DECL|method|getVolume ()
specifier|public
name|String
name|getVolume
parameter_list|()
block|{
return|return
name|volume
return|;
block|}
DECL|method|getBucket ()
specifier|public
name|String
name|getBucket
parameter_list|()
block|{
return|return
name|bucket
return|;
block|}
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
block|}
end_class

end_unit

