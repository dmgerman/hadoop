begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|Storage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|SCM_ID
import|;
end_import

begin_comment
comment|/**  * OMStorage is responsible for management of the StorageDirectories used by  * the Ozone Manager.  */
end_comment

begin_class
DECL|class|OMStorage
specifier|public
class|class
name|OMStorage
extends|extends
name|Storage
block|{
DECL|field|STORAGE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|STORAGE_DIR
init|=
literal|"om"
decl_stmt|;
DECL|field|OM_ID
specifier|public
specifier|static
specifier|final
name|String
name|OM_ID
init|=
literal|"omUuid"
decl_stmt|;
DECL|field|OM_CERT_SERIAL_ID
specifier|public
specifier|static
specifier|final
name|String
name|OM_CERT_SERIAL_ID
init|=
literal|"omCertSerialId"
decl_stmt|;
comment|/**    * Construct OMStorage.    * @throws IOException if any directories are inaccessible.    */
DECL|method|OMStorage (OzoneConfiguration conf)
specifier|public
name|OMStorage
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|NodeType
operator|.
name|OM
argument_list|,
name|OmUtils
operator|.
name|getOmDbDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|STORAGE_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|setScmId (String scmId)
specifier|public
name|void
name|setScmId
parameter_list|(
name|String
name|scmId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|==
name|StorageState
operator|.
name|INITIALIZED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"OM is already initialized."
argument_list|)
throw|;
block|}
else|else
block|{
name|getStorageInfo
argument_list|()
operator|.
name|setProperty
argument_list|(
name|SCM_ID
argument_list|,
name|scmId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setOmCertSerialId (String certSerialId)
specifier|public
name|void
name|setOmCertSerialId
parameter_list|(
name|String
name|certSerialId
parameter_list|)
throws|throws
name|IOException
block|{
name|getStorageInfo
argument_list|()
operator|.
name|setProperty
argument_list|(
name|OM_CERT_SERIAL_ID
argument_list|,
name|certSerialId
argument_list|)
expr_stmt|;
block|}
DECL|method|setOmId (String omId)
specifier|public
name|void
name|setOmId
parameter_list|(
name|String
name|omId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|==
name|StorageState
operator|.
name|INITIALIZED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"OM is already initialized."
argument_list|)
throw|;
block|}
else|else
block|{
name|getStorageInfo
argument_list|()
operator|.
name|setProperty
argument_list|(
name|OM_ID
argument_list|,
name|omId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Retrieves the SCM ID from the version file.    * @return SCM_ID    */
DECL|method|getScmId ()
specifier|public
name|String
name|getScmId
parameter_list|()
block|{
return|return
name|getStorageInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SCM_ID
argument_list|)
return|;
block|}
comment|/**    * Retrieves the OM ID from the version file.    * @return OM_ID    */
DECL|method|getOmId ()
specifier|public
name|String
name|getOmId
parameter_list|()
block|{
return|return
name|getStorageInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|OM_ID
argument_list|)
return|;
block|}
comment|/**    * Retrieves the serial id of certificate issued by SCM.    * @return OM_ID    */
DECL|method|getOmCertSerialId ()
specifier|public
name|String
name|getOmCertSerialId
parameter_list|()
block|{
return|return
name|getStorageInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|OM_CERT_SERIAL_ID
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeProperties ()
specifier|protected
name|Properties
name|getNodeProperties
parameter_list|()
block|{
name|String
name|omId
init|=
name|getOmId
argument_list|()
decl_stmt|;
if|if
condition|(
name|omId
operator|==
literal|null
condition|)
block|{
name|omId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|Properties
name|omProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|omProperties
operator|.
name|setProperty
argument_list|(
name|OM_ID
argument_list|,
name|omId
argument_list|)
expr_stmt|;
if|if
condition|(
name|getOmCertSerialId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|omProperties
operator|.
name|setProperty
argument_list|(
name|OM_CERT_SERIAL_ID
argument_list|,
name|getOmCertSerialId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|omProperties
return|;
block|}
block|}
end_class

end_unit

