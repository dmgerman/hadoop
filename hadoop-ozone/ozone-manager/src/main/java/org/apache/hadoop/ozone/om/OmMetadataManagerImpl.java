begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|BlockGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|codec
operator|.
name|OmBucketInfoCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|codec
operator|.
name|OmKeyInfoCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|codec
operator|.
name|OmMultipartKeyInfoCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|codec
operator|.
name|OmVolumeArgsCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|codec
operator|.
name|VolumeListCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfoGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|VolumeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|TableIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OM_DB_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OM_KEY_PREFIX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Ozone metadata manager interface.  */
end_comment

begin_class
DECL|class|OmMetadataManagerImpl
specifier|public
class|class
name|OmMetadataManagerImpl
implements|implements
name|OMMetadataManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OmMetadataManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * OM RocksDB Structure .    *<p>    * OM DB stores metadata as KV pairs in different column families.    *<p>    * OM DB Schema:    * |-------------------------------------------------------------------|    * |  Column Family     |        VALUE                                 |    * |-------------------------------------------------------------------|    * | userTable          |     user->VolumeList                         |    * |-------------------------------------------------------------------|    * | volumeTable        |     /volume->VolumeInfo                      |    * |-------------------------------------------------------------------|    * | bucketTable        |     /volume/bucket-> BucketInfo              |    * |-------------------------------------------------------------------|    * | keyTable           | /volumeName/bucketName/keyName->KeyInfo      |    * |-------------------------------------------------------------------|    * | deletedTable       | /volumeName/bucketName/keyName->KeyInfo      |    * |-------------------------------------------------------------------|    * | openKey            | /volumeName/bucketName/keyName/id->KeyInfo   |    * |-------------------------------------------------------------------|    * | s3Table            | s3BucketName -> /volumeName/bucketName       |    * |-------------------------------------------------------------------|    */
DECL|field|USER_TABLE
specifier|private
specifier|static
specifier|final
name|String
name|USER_TABLE
init|=
literal|"userTable"
decl_stmt|;
DECL|field|VOLUME_TABLE
specifier|private
specifier|static
specifier|final
name|String
name|VOLUME_TABLE
init|=
literal|"volumeTable"
decl_stmt|;
DECL|field|BUCKET_TABLE
specifier|private
specifier|static
specifier|final
name|String
name|BUCKET_TABLE
init|=
literal|"bucketTable"
decl_stmt|;
DECL|field|KEY_TABLE
specifier|private
specifier|static
specifier|final
name|String
name|KEY_TABLE
init|=
literal|"keyTable"
decl_stmt|;
DECL|field|DELETED_TABLE
specifier|private
specifier|static
specifier|final
name|String
name|DELETED_TABLE
init|=
literal|"deletedTable"
decl_stmt|;
DECL|field|OPEN_KEY_TABLE
specifier|private
specifier|static
specifier|final
name|String
name|OPEN_KEY_TABLE
init|=
literal|"openKeyTable"
decl_stmt|;
DECL|field|S3_TABLE
specifier|private
specifier|static
specifier|final
name|String
name|S3_TABLE
init|=
literal|"s3Table"
decl_stmt|;
DECL|field|MULTIPARTINFO_TABLE
specifier|private
specifier|static
specifier|final
name|String
name|MULTIPARTINFO_TABLE
init|=
literal|"multipartInfoTable"
decl_stmt|;
DECL|field|store
specifier|private
name|DBStore
name|store
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|OzoneManagerLock
name|lock
decl_stmt|;
DECL|field|openKeyExpireThresholdMS
specifier|private
specifier|final
name|long
name|openKeyExpireThresholdMS
decl_stmt|;
DECL|field|userTable
specifier|private
name|Table
name|userTable
decl_stmt|;
DECL|field|volumeTable
specifier|private
name|Table
name|volumeTable
decl_stmt|;
DECL|field|bucketTable
specifier|private
name|Table
name|bucketTable
decl_stmt|;
DECL|field|keyTable
specifier|private
name|Table
name|keyTable
decl_stmt|;
DECL|field|deletedTable
specifier|private
name|Table
name|deletedTable
decl_stmt|;
DECL|field|openKeyTable
specifier|private
name|Table
name|openKeyTable
decl_stmt|;
DECL|field|s3Table
specifier|private
name|Table
name|s3Table
decl_stmt|;
DECL|field|multipartInfoTable
specifier|private
name|Table
argument_list|<
name|String
argument_list|,
name|OmMultipartKeyInfo
argument_list|>
name|multipartInfoTable
decl_stmt|;
DECL|method|OmMetadataManagerImpl (OzoneConfiguration conf)
specifier|public
name|OmMetadataManagerImpl
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|lock
operator|=
operator|new
name|OzoneManagerLock
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|openKeyExpireThresholdMS
operator|=
literal|1000L
operator|*
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS
argument_list|,
name|OZONE_OPEN_KEY_EXPIRE_THRESHOLD_SECONDS_DEFAULT
argument_list|)
expr_stmt|;
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUserTable ()
specifier|public
name|Table
argument_list|<
name|String
argument_list|,
name|VolumeList
argument_list|>
name|getUserTable
parameter_list|()
block|{
return|return
name|userTable
return|;
block|}
annotation|@
name|Override
DECL|method|getVolumeTable ()
specifier|public
name|Table
argument_list|<
name|String
argument_list|,
name|OmVolumeArgs
argument_list|>
name|getVolumeTable
parameter_list|()
block|{
return|return
name|volumeTable
return|;
block|}
annotation|@
name|Override
DECL|method|getBucketTable ()
specifier|public
name|Table
argument_list|<
name|String
argument_list|,
name|OmBucketInfo
argument_list|>
name|getBucketTable
parameter_list|()
block|{
return|return
name|bucketTable
return|;
block|}
annotation|@
name|Override
DECL|method|getKeyTable ()
specifier|public
name|Table
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
name|getKeyTable
parameter_list|()
block|{
return|return
name|keyTable
return|;
block|}
annotation|@
name|Override
DECL|method|getDeletedTable ()
specifier|public
name|Table
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
name|getDeletedTable
parameter_list|()
block|{
return|return
name|deletedTable
return|;
block|}
annotation|@
name|Override
DECL|method|getOpenKeyTable ()
specifier|public
name|Table
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
name|getOpenKeyTable
parameter_list|()
block|{
return|return
name|openKeyTable
return|;
block|}
annotation|@
name|Override
DECL|method|getS3Table ()
specifier|public
name|Table
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getS3Table
parameter_list|()
block|{
return|return
name|s3Table
return|;
block|}
annotation|@
name|Override
DECL|method|getMultipartInfoTable ()
specifier|public
name|Table
argument_list|<
name|String
argument_list|,
name|OmMultipartKeyInfo
argument_list|>
name|getMultipartInfoTable
parameter_list|()
block|{
return|return
name|multipartInfoTable
return|;
block|}
DECL|method|checkTableStatus (Table table, String name)
specifier|private
name|void
name|checkTableStatus
parameter_list|(
name|Table
name|table
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|logMessage
init|=
literal|"Unable to get a reference to %s table. Cannot "
operator|+
literal|"continue."
decl_stmt|;
name|String
name|errMsg
init|=
literal|"Inconsistent DB state, Table - %s. Please check the logs"
operator|+
literal|"for more info."
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|logMessage
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|errMsg
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Start metadata manager.    */
annotation|@
name|Override
DECL|method|start (OzoneConfiguration configuration)
specifier|public
name|void
name|start
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We need to create the DB here, as when during restart, stop closes the
comment|// db, so we need to create the store object and initialize DB.
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|File
name|metaDir
init|=
name|OmUtils
operator|.
name|getOmDbDir
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|this
operator|.
name|store
operator|=
name|DBStoreBuilder
operator|.
name|newBuilder
argument_list|(
name|configuration
argument_list|)
operator|.
name|setName
argument_list|(
name|OM_DB_NAME
argument_list|)
operator|.
name|setPath
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|metaDir
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addTable
argument_list|(
name|USER_TABLE
argument_list|)
operator|.
name|addTable
argument_list|(
name|VOLUME_TABLE
argument_list|)
operator|.
name|addTable
argument_list|(
name|BUCKET_TABLE
argument_list|)
operator|.
name|addTable
argument_list|(
name|KEY_TABLE
argument_list|)
operator|.
name|addTable
argument_list|(
name|DELETED_TABLE
argument_list|)
operator|.
name|addTable
argument_list|(
name|OPEN_KEY_TABLE
argument_list|)
operator|.
name|addTable
argument_list|(
name|S3_TABLE
argument_list|)
operator|.
name|addTable
argument_list|(
name|MULTIPARTINFO_TABLE
argument_list|)
operator|.
name|addCodec
argument_list|(
name|OmKeyInfo
operator|.
name|class
argument_list|,
operator|new
name|OmKeyInfoCodec
argument_list|()
argument_list|)
operator|.
name|addCodec
argument_list|(
name|OmBucketInfo
operator|.
name|class
argument_list|,
operator|new
name|OmBucketInfoCodec
argument_list|()
argument_list|)
operator|.
name|addCodec
argument_list|(
name|OmVolumeArgs
operator|.
name|class
argument_list|,
operator|new
name|OmVolumeArgsCodec
argument_list|()
argument_list|)
operator|.
name|addCodec
argument_list|(
name|VolumeList
operator|.
name|class
argument_list|,
operator|new
name|VolumeListCodec
argument_list|()
argument_list|)
operator|.
name|addCodec
argument_list|(
name|OmMultipartKeyInfo
operator|.
name|class
argument_list|,
operator|new
name|OmMultipartKeyInfoCodec
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|userTable
operator|=
name|this
operator|.
name|store
operator|.
name|getTable
argument_list|(
name|USER_TABLE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|VolumeList
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkTableStatus
argument_list|(
name|userTable
argument_list|,
name|USER_TABLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|getTable
argument_list|(
name|VOLUME_TABLE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|volumeTable
operator|=
name|this
operator|.
name|store
operator|.
name|getTable
argument_list|(
name|VOLUME_TABLE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|OmVolumeArgs
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkTableStatus
argument_list|(
name|volumeTable
argument_list|,
name|VOLUME_TABLE
argument_list|)
expr_stmt|;
name|bucketTable
operator|=
name|this
operator|.
name|store
operator|.
name|getTable
argument_list|(
name|BUCKET_TABLE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|OmBucketInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkTableStatus
argument_list|(
name|bucketTable
argument_list|,
name|BUCKET_TABLE
argument_list|)
expr_stmt|;
name|keyTable
operator|=
name|this
operator|.
name|store
operator|.
name|getTable
argument_list|(
name|KEY_TABLE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|OmKeyInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkTableStatus
argument_list|(
name|keyTable
argument_list|,
name|KEY_TABLE
argument_list|)
expr_stmt|;
name|deletedTable
operator|=
name|this
operator|.
name|store
operator|.
name|getTable
argument_list|(
name|DELETED_TABLE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|OmKeyInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkTableStatus
argument_list|(
name|deletedTable
argument_list|,
name|DELETED_TABLE
argument_list|)
expr_stmt|;
name|openKeyTable
operator|=
name|this
operator|.
name|store
operator|.
name|getTable
argument_list|(
name|OPEN_KEY_TABLE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|OmKeyInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkTableStatus
argument_list|(
name|openKeyTable
argument_list|,
name|OPEN_KEY_TABLE
argument_list|)
expr_stmt|;
name|s3Table
operator|=
name|this
operator|.
name|store
operator|.
name|getTable
argument_list|(
name|S3_TABLE
argument_list|)
expr_stmt|;
name|checkTableStatus
argument_list|(
name|s3Table
argument_list|,
name|S3_TABLE
argument_list|)
expr_stmt|;
name|multipartInfoTable
operator|=
name|this
operator|.
name|store
operator|.
name|getTable
argument_list|(
name|MULTIPARTINFO_TABLE
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|OmMultipartKeyInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|checkTableStatus
argument_list|(
name|multipartInfoTable
argument_list|,
name|MULTIPARTINFO_TABLE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Stop metadata manager.    */
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Get metadata store.    *    * @return store - metadata store.    */
annotation|@
name|VisibleForTesting
annotation|@
name|Override
DECL|method|getStore ()
specifier|public
name|DBStore
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
comment|/**    * Given a volume return the corresponding DB key.    *    * @param volume - Volume name    */
annotation|@
name|Override
DECL|method|getVolumeKey (String volume)
specifier|public
name|String
name|getVolumeKey
parameter_list|(
name|String
name|volume
parameter_list|)
block|{
return|return
name|OzoneConsts
operator|.
name|OM_KEY_PREFIX
operator|+
name|volume
return|;
block|}
comment|/**    * Given a user return the corresponding DB key.    *    * @param user - User name    */
annotation|@
name|Override
DECL|method|getUserKey (String user)
specifier|public
name|String
name|getUserKey
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
name|user
return|;
block|}
comment|/**    * Given a volume and bucket, return the corresponding DB key.    *    * @param volume - User name    * @param bucket - Bucket name    */
annotation|@
name|Override
DECL|method|getBucketKey (String volume, String bucket)
specifier|public
name|String
name|getBucketKey
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|OM_KEY_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|volume
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|bucket
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|OM_KEY_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getOzoneKey (String volume, String bucket, String key)
specifier|public
name|String
name|getOzoneKey
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|OM_KEY_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|volume
argument_list|)
decl_stmt|;
comment|// TODO : Throw if the Bucket is null?
name|builder
operator|.
name|append
argument_list|(
name|OM_KEY_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isNotBlank
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|OM_KEY_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getOpenKey (String volume, String bucket, String key, long id)
specifier|public
name|String
name|getOpenKey
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|,
name|String
name|key
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|String
name|openKey
init|=
name|OM_KEY_PREFIX
operator|+
name|volume
operator|+
name|OM_KEY_PREFIX
operator|+
name|bucket
operator|+
name|OM_KEY_PREFIX
operator|+
name|key
operator|+
name|OM_KEY_PREFIX
operator|+
name|id
decl_stmt|;
return|return
name|openKey
return|;
block|}
annotation|@
name|Override
DECL|method|getMultipartKey (String volume, String bucket, String key, String uploadId)
specifier|public
name|String
name|getMultipartKey
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|uploadId
parameter_list|)
block|{
name|String
name|multipartKey
init|=
name|OM_KEY_PREFIX
operator|+
name|volume
operator|+
name|OM_KEY_PREFIX
operator|+
name|bucket
operator|+
name|OM_KEY_PREFIX
operator|+
name|key
operator|+
name|OM_KEY_PREFIX
operator|+
name|uploadId
decl_stmt|;
return|return
name|multipartKey
return|;
block|}
comment|/**    * Returns the OzoneManagerLock used on Metadata DB.    *    * @return OzoneManagerLock    */
annotation|@
name|Override
DECL|method|getLock ()
specifier|public
name|OzoneManagerLock
name|getLock
parameter_list|()
block|{
return|return
name|lock
return|;
block|}
comment|/**    * Returns true if the firstArray startsWith the bytes of secondArray.    *    * @param firstArray - Byte array    * @param secondArray - Byte array    * @return true if the first array bytes match the bytes in the second array.    */
DECL|method|startsWith (byte[] firstArray, byte[] secondArray)
specifier|private
name|boolean
name|startsWith
parameter_list|(
name|byte
index|[]
name|firstArray
parameter_list|,
name|byte
index|[]
name|secondArray
parameter_list|)
block|{
if|if
condition|(
name|firstArray
operator|==
literal|null
condition|)
block|{
comment|// if both are null, then the arrays match, else if first is null and
comment|// second is not, then this function returns false.
return|return
name|secondArray
operator|==
literal|null
return|;
block|}
if|if
condition|(
name|secondArray
operator|!=
literal|null
condition|)
block|{
comment|// If the second array is longer then first array cannot be starting with
comment|// the bytes of second array.
if|if
condition|(
name|secondArray
operator|.
name|length
operator|>
name|firstArray
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|ndx
init|=
literal|0
init|;
name|ndx
operator|<
name|secondArray
operator|.
name|length
condition|;
name|ndx
operator|++
control|)
block|{
if|if
condition|(
name|firstArray
index|[
name|ndx
index|]
operator|!=
name|secondArray
index|[
name|ndx
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
comment|//match, return true.
block|}
return|return
literal|false
return|;
comment|// if first is not null and second is null, we define that
comment|// array does not start with same chars.
block|}
comment|/**    * Given a volume, check if it is empty, i.e there are no buckets inside it.    * We iterate in the bucket table and see if there is any key that starts with    * the volume prefix. We actually look for /volume/, since if we don't have    * the trailing slash it is possible that we might match some other volume.    *<p>    * For example, vol1 and vol122 might match, to avoid that we look for /vol1/    *    * @param volume - Volume name    * @return true if the volume is empty    */
annotation|@
name|Override
DECL|method|isVolumeEmpty (String volume)
specifier|public
name|boolean
name|isVolumeEmpty
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|volumePrefix
init|=
name|getVolumeKey
argument_list|(
name|volume
operator|+
name|OM_KEY_PREFIX
argument_list|)
decl_stmt|;
try|try
init|(
name|TableIterator
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmBucketInfo
argument_list|>
argument_list|>
name|bucketIter
init|=
name|bucketTable
operator|.
name|iterator
argument_list|()
init|)
block|{
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmBucketInfo
argument_list|>
name|kv
init|=
name|bucketIter
operator|.
name|seek
argument_list|(
name|volumePrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|!=
literal|null
operator|&&
name|kv
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|volumePrefix
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// we found at least one bucket with this volume prefix.
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Given a volume/bucket, check if it is empty, i.e there are no keys inside    * it. Prefix is /volume/bucket/, and we lookup the keyTable.    *    * @param volume - Volume name    * @param bucket - Bucket name    * @return true if the bucket is empty    */
annotation|@
name|Override
DECL|method|isBucketEmpty (String volume, String bucket)
specifier|public
name|boolean
name|isBucketEmpty
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|keyPrefix
init|=
name|getBucketKey
argument_list|(
name|volume
argument_list|,
name|bucket
argument_list|)
decl_stmt|;
try|try
init|(
name|TableIterator
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
argument_list|>
name|keyIter
init|=
name|keyTable
operator|.
name|iterator
argument_list|()
init|)
block|{
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
name|kv
init|=
name|keyIter
operator|.
name|seek
argument_list|(
name|keyPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|!=
literal|null
operator|&&
name|kv
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|// we found at least one key with this vol/bucket prefix.
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|listBuckets (final String volumeName, final String startBucket, final String bucketPrefix, final int maxNumOfBuckets)
specifier|public
name|List
argument_list|<
name|OmBucketInfo
argument_list|>
name|listBuckets
parameter_list|(
specifier|final
name|String
name|volumeName
parameter_list|,
specifier|final
name|String
name|startBucket
parameter_list|,
specifier|final
name|String
name|bucketPrefix
parameter_list|,
specifier|final
name|int
name|maxNumOfBuckets
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OmBucketInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|volumeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume name is required."
argument_list|,
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|String
name|volumeNameBytes
init|=
name|getVolumeKey
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeTable
operator|.
name|get
argument_list|(
name|volumeNameBytes
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume "
operator|+
name|volumeName
operator|+
literal|" not found."
argument_list|,
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|String
name|startKey
decl_stmt|;
name|boolean
name|skipStartKey
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isNotBlank
argument_list|(
name|startBucket
argument_list|)
condition|)
block|{
comment|// if the user has specified a start key, we need to seek to that key
comment|// and avoid that key in the response set.
name|startKey
operator|=
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|startBucket
argument_list|)
expr_stmt|;
name|skipStartKey
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// If the user has specified a prefix key, we need to get to the first
comment|// of the keys with the prefix match. We can leverage RocksDB to do that.
comment|// However, if the user has specified only a prefix, we cannot skip
comment|// the first prefix key we see, the boolean skipStartKey allows us to
comment|// skip the startkey or not depending on what patterns are specified.
name|startKey
operator|=
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketPrefix
argument_list|)
expr_stmt|;
block|}
name|String
name|seekPrefix
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isNotBlank
argument_list|(
name|bucketPrefix
argument_list|)
condition|)
block|{
name|seekPrefix
operator|=
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|seekPrefix
operator|=
name|getVolumeKey
argument_list|(
name|volumeName
operator|+
name|OM_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
name|int
name|currentCount
init|=
literal|0
decl_stmt|;
try|try
init|(
name|TableIterator
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmBucketInfo
argument_list|>
argument_list|>
name|bucketIter
init|=
name|bucketTable
operator|.
name|iterator
argument_list|()
init|)
block|{
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmBucketInfo
argument_list|>
name|kv
init|=
name|bucketIter
operator|.
name|seek
argument_list|(
name|startKey
argument_list|)
decl_stmt|;
while|while
condition|(
name|currentCount
operator|<
name|maxNumOfBuckets
operator|&&
name|bucketIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|kv
operator|=
name|bucketIter
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// Skip the Start Bucket if needed.
if|if
condition|(
name|kv
operator|!=
literal|null
operator|&&
name|skipStartKey
operator|&&
name|kv
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|startKey
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|kv
operator|!=
literal|null
operator|&&
name|kv
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|seekPrefix
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// The SeekPrefix does not match any more, we can break out of the
comment|// loop.
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|listKeys (String volumeName, String bucketName, String startKey, String keyPrefix, int maxKeys)
specifier|public
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|listKeys
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|keyPrefix
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|volumeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume name is required."
argument_list|,
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|bucketName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Bucket name is required."
argument_list|,
name|ResultCodes
operator|.
name|FAILED_BUCKET_NOT_FOUND
argument_list|)
throw|;
block|}
name|String
name|bucketNameBytes
init|=
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
decl_stmt|;
if|if
condition|(
name|getBucketTable
argument_list|()
operator|.
name|get
argument_list|(
name|bucketNameBytes
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Bucket "
operator|+
name|bucketName
operator|+
literal|" not found."
argument_list|,
name|ResultCodes
operator|.
name|FAILED_BUCKET_NOT_FOUND
argument_list|)
throw|;
block|}
name|String
name|seekKey
decl_stmt|;
name|boolean
name|skipStartKey
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isNotBlank
argument_list|(
name|startKey
argument_list|)
condition|)
block|{
comment|// Seek to the specified key.
name|seekKey
operator|=
name|getOzoneKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|startKey
argument_list|)
expr_stmt|;
name|skipStartKey
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// This allows us to seek directly to the first key with the right prefix.
name|seekKey
operator|=
name|getOzoneKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyPrefix
argument_list|)
expr_stmt|;
block|}
name|String
name|seekPrefix
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isNotBlank
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
name|seekPrefix
operator|=
name|getOzoneKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|seekPrefix
operator|=
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
operator|+
name|OM_KEY_PREFIX
argument_list|)
expr_stmt|;
block|}
name|int
name|currentCount
init|=
literal|0
decl_stmt|;
try|try
init|(
name|TableIterator
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
argument_list|>
name|keyIter
init|=
name|getKeyTable
argument_list|()
operator|.
name|iterator
argument_list|()
init|)
block|{
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
name|kv
init|=
name|keyIter
operator|.
name|seek
argument_list|(
name|seekKey
argument_list|)
decl_stmt|;
while|while
condition|(
name|currentCount
operator|<
name|maxKeys
operator|&&
name|keyIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|kv
operator|=
name|keyIter
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// Skip the Start key if needed.
if|if
condition|(
name|kv
operator|!=
literal|null
operator|&&
name|skipStartKey
operator|&&
name|kv
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|seekKey
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|kv
operator|!=
literal|null
operator|&&
name|kv
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|seekPrefix
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// The SeekPrefix does not match any more, we can break out of the
comment|// loop.
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|listVolumes (String userName, String prefix, String startKey, int maxKeys)
specifier|public
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|listVolumes
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|startKey
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|VolumeList
name|volumes
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|userName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"User name is required to list Volumes."
argument_list|,
name|ResultCodes
operator|.
name|FAILED_USER_NOT_FOUND
argument_list|)
throw|;
block|}
name|volumes
operator|=
name|getVolumesByUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|volumes
operator|==
literal|null
operator|||
name|volumes
operator|.
name|getVolumeNamesCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
name|boolean
name|startKeyFound
init|=
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|startKey
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|volumeName
range|:
name|volumes
operator|.
name|getVolumeNamesList
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|volumeName
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
operator|!
name|startKeyFound
operator|&&
name|volumeName
operator|.
name|equals
argument_list|(
name|startKey
argument_list|)
condition|)
block|{
name|startKeyFound
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|startKeyFound
operator|&&
name|result
operator|.
name|size
argument_list|()
operator|<
name|maxKeys
condition|)
block|{
name|OmVolumeArgs
name|volumeArgs
init|=
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|this
operator|.
name|getVolumeKey
argument_list|(
name|volumeName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
comment|// Could not get volume info by given volume name,
comment|// since the volume name is loaded from db,
comment|// this probably means om db is corrupted or some entries are
comment|// accidentally removed.
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume info not found for "
operator|+
name|volumeName
argument_list|,
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|result
operator|.
name|add
argument_list|(
name|volumeArgs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|getVolumesByUser (String userNameKey)
specifier|private
name|VolumeList
name|getVolumesByUser
parameter_list|(
name|String
name|userNameKey
parameter_list|)
throws|throws
name|OMException
block|{
try|try
block|{
name|VolumeList
name|volumeList
init|=
name|getUserTable
argument_list|()
operator|.
name|get
argument_list|(
name|userNameKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeList
operator|==
literal|null
condition|)
block|{
comment|// No volume found for this user, return an empty list
return|return
name|VolumeList
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|volumeList
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Unable to get volumes info by the given user, "
operator|+
literal|"metadata might be corrupted"
argument_list|,
name|e
argument_list|,
name|ResultCodes
operator|.
name|FAILED_METADATA_ERROR
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPendingDeletionKeys (final int keyCount)
specifier|public
name|List
argument_list|<
name|BlockGroup
argument_list|>
name|getPendingDeletionKeys
parameter_list|(
specifier|final
name|int
name|keyCount
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BlockGroup
argument_list|>
name|keyBlocksList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
try|try
init|(
name|TableIterator
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
argument_list|>
name|keyIter
init|=
name|getDeletedTable
argument_list|()
operator|.
name|iterator
argument_list|()
init|)
block|{
name|int
name|currentCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|keyIter
operator|.
name|hasNext
argument_list|()
operator|&&
name|currentCount
operator|<
name|keyCount
condition|)
block|{
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
name|kv
init|=
name|keyIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|kv
operator|!=
literal|null
condition|)
block|{
name|OmKeyInfo
name|info
init|=
name|kv
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Get block keys as a list.
name|OmKeyLocationInfoGroup
name|latest
init|=
name|info
operator|.
name|getLatestVersionLocations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockID
argument_list|>
name|item
init|=
name|latest
operator|.
name|getLocationList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|b
lambda|->
operator|new
name|BlockID
argument_list|(
name|b
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|b
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|BlockGroup
name|keyBlocks
init|=
name|BlockGroup
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyName
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|addAllBlockIDs
argument_list|(
name|item
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|keyBlocksList
operator|.
name|add
argument_list|(
name|keyBlocks
argument_list|)
expr_stmt|;
name|currentCount
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|keyBlocksList
return|;
block|}
annotation|@
name|Override
DECL|method|getExpiredOpenKeys ()
specifier|public
name|List
argument_list|<
name|BlockGroup
argument_list|>
name|getExpiredOpenKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|BlockGroup
argument_list|>
name|keyBlocksList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// TODO: Fix the getExpiredOpenKeys, Not part of this patch.
return|return
name|keyBlocksList
return|;
block|}
annotation|@
name|Override
DECL|method|countRowsInTable (Table<KEY, VALUE> table)
specifier|public
parameter_list|<
name|KEY
parameter_list|,
name|VALUE
parameter_list|>
name|long
name|countRowsInTable
parameter_list|(
name|Table
argument_list|<
name|KEY
argument_list|,
name|VALUE
argument_list|>
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|TableIterator
argument_list|<
name|KEY
argument_list|,
name|?
extends|extends
name|KeyValue
argument_list|<
name|KEY
argument_list|,
name|VALUE
argument_list|>
argument_list|>
name|keyValueTableIterator
init|=
name|table
operator|.
name|iterator
argument_list|()
init|)
block|{
while|while
condition|(
name|keyValueTableIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|keyValueTableIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

