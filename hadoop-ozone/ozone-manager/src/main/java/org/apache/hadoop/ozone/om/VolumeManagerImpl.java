begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|UserVolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|BatchOperation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_USER_MAX_VOLUME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_USER_MAX_VOLUME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|USER_LOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|VOLUME_LOCK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * OM volume management code.  */
end_comment

begin_class
DECL|class|VolumeManagerImpl
specifier|public
class|class
name|VolumeManagerImpl
implements|implements
name|VolumeManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VolumeManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|metadataManager
specifier|private
specifier|final
name|OMMetadataManager
name|metadataManager
decl_stmt|;
DECL|field|maxUserVolumeCount
specifier|private
specifier|final
name|int
name|maxUserVolumeCount
decl_stmt|;
DECL|field|aclEnabled
specifier|private
specifier|final
name|boolean
name|aclEnabled
decl_stmt|;
comment|/**    * Constructor.    * @param conf - Ozone configuration.    * @throws IOException    */
DECL|method|VolumeManagerImpl (OMMetadataManager metadataManager, OzoneConfiguration conf)
specifier|public
name|VolumeManagerImpl
parameter_list|(
name|OMMetadataManager
name|metadataManager
parameter_list|,
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|metadataManager
operator|=
name|metadataManager
expr_stmt|;
name|this
operator|.
name|maxUserVolumeCount
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_OM_USER_MAX_VOLUME
argument_list|,
name|OZONE_OM_USER_MAX_VOLUME_DEFAULT
argument_list|)
expr_stmt|;
name|aclEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_ACL_ENABLED
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_ACL_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|// Helpers to add and delete volume from user list
DECL|method|addVolumeToOwnerList (String volume, String owner)
specifier|private
name|UserVolumeInfo
name|addVolumeToOwnerList
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the volume list
name|String
name|dbUserKey
init|=
name|metadataManager
operator|.
name|getUserKey
argument_list|(
name|owner
argument_list|)
decl_stmt|;
name|UserVolumeInfo
name|volumeList
init|=
name|metadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbUserKey
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|prevVolList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|volumeList
operator|!=
literal|null
condition|)
block|{
name|prevVolList
operator|.
name|addAll
argument_list|(
name|volumeList
operator|.
name|getVolumeNamesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the volume count
if|if
condition|(
name|prevVolList
operator|.
name|size
argument_list|()
operator|>=
name|maxUserVolumeCount
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Too many volumes for user:{}"
argument_list|,
name|owner
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Too many volumes for user:"
operator|+
name|owner
argument_list|,
name|ResultCodes
operator|.
name|USER_TOO_MANY_VOLUMES
argument_list|)
throw|;
block|}
comment|// Add the new volume to the list
name|prevVolList
operator|.
name|add
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|UserVolumeInfo
name|newVolList
init|=
name|UserVolumeInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllVolumeNames
argument_list|(
name|prevVolList
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|newVolList
return|;
block|}
DECL|method|delVolumeFromOwnerList (String volume, String owner)
specifier|private
name|UserVolumeInfo
name|delVolumeFromOwnerList
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the volume list
name|UserVolumeInfo
name|volumeList
init|=
name|metadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|get
argument_list|(
name|owner
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|prevVolList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|volumeList
operator|!=
literal|null
condition|)
block|{
name|prevVolList
operator|.
name|addAll
argument_list|(
name|volumeList
operator|.
name|getVolumeNamesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} not found for user:{}"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
name|ResultCodes
operator|.
name|USER_NOT_FOUND
argument_list|)
throw|;
block|}
comment|// Remove the volume from the list
name|prevVolList
operator|.
name|remove
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|UserVolumeInfo
name|newVolList
init|=
name|UserVolumeInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllVolumeNames
argument_list|(
name|prevVolList
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|newVolList
return|;
block|}
comment|/**    * Creates a volume.    * @param omVolumeArgs - OmVolumeArgs.    */
annotation|@
name|Override
DECL|method|createVolume (OmVolumeArgs omVolumeArgs)
specifier|public
name|void
name|createVolume
parameter_list|(
name|OmVolumeArgs
name|omVolumeArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|omVolumeArgs
argument_list|)
expr_stmt|;
name|boolean
name|acquiredUserLock
init|=
literal|false
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|omVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|acquiredUserLock
operator|=
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|USER_LOCK
argument_list|,
name|omVolumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|omVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dbUserKey
init|=
name|metadataManager
operator|.
name|getUserKey
argument_list|(
name|omVolumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeInfo
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
comment|// Check of the volume already exists
if|if
condition|(
name|volumeInfo
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} already exists"
argument_list|,
name|omVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
name|ResultCodes
operator|.
name|VOLUME_ALREADY_EXISTS
argument_list|)
throw|;
block|}
name|UserVolumeInfo
name|volumeList
init|=
name|addVolumeToOwnerList
argument_list|(
name|omVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|,
name|omVolumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set creation time
name|omVolumeArgs
operator|.
name|setCreationTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|createVolumeCommitToDB
argument_list|(
name|omVolumeArgs
argument_list|,
name|volumeList
argument_list|,
name|dbVolumeKey
argument_list|,
name|dbUserKey
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"created volume:{} user:{}"
argument_list|,
name|omVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|,
name|omVolumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|OMException
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Volume creation failed for user:{} volume:{}"
argument_list|,
name|omVolumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|omVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|acquiredUserLock
condition|)
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|USER_LOCK
argument_list|,
name|omVolumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|omVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createVolumeCommitToDB (OmVolumeArgs omVolumeArgs, UserVolumeInfo volumeList, String dbVolumeKey, String dbUserKey)
specifier|private
name|void
name|createVolumeCommitToDB
parameter_list|(
name|OmVolumeArgs
name|omVolumeArgs
parameter_list|,
name|UserVolumeInfo
name|volumeList
parameter_list|,
name|String
name|dbVolumeKey
parameter_list|,
name|String
name|dbUserKey
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BatchOperation
name|batch
init|=
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|initBatchOperation
argument_list|()
init|)
block|{
comment|// Write the vol info
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|putWithBatch
argument_list|(
name|batch
argument_list|,
name|dbVolumeKey
argument_list|,
name|omVolumeArgs
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|putWithBatch
argument_list|(
name|batch
argument_list|,
name|dbUserKey
argument_list|,
name|volumeList
argument_list|)
expr_stmt|;
comment|// Add volume to user list
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|commitBatchOperation
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * Changes the owner of a volume.    *    * @param volume - Name of the volume.    * @param owner - Name of the owner.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setOwner (String volume, String owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|boolean
name|acquiredUsersLock
init|=
literal|false
decl_stmt|;
name|String
name|actualOwner
init|=
literal|null
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Changing volume ownership failed for user:{} volume:{}"
argument_list|,
name|owner
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume "
operator|+
name|volume
operator|+
literal|" is not found"
argument_list|,
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equals
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actualOwner
operator|=
name|volumeArgs
operator|.
name|getOwnerName
argument_list|()
expr_stmt|;
name|String
name|originalOwner
init|=
name|metadataManager
operator|.
name|getUserKey
argument_list|(
name|actualOwner
argument_list|)
decl_stmt|;
name|acquiredUsersLock
operator|=
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireMultiUserLock
argument_list|(
name|owner
argument_list|,
name|originalOwner
argument_list|)
expr_stmt|;
name|UserVolumeInfo
name|oldOwnerVolumeList
init|=
name|delVolumeFromOwnerList
argument_list|(
name|volume
argument_list|,
name|originalOwner
argument_list|)
decl_stmt|;
name|String
name|newOwner
init|=
name|metadataManager
operator|.
name|getUserKey
argument_list|(
name|owner
argument_list|)
decl_stmt|;
name|UserVolumeInfo
name|newOwnerVolumeList
init|=
name|addVolumeToOwnerList
argument_list|(
name|volume
argument_list|,
name|newOwner
argument_list|)
decl_stmt|;
name|volumeArgs
operator|.
name|setOwnerName
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|setOwnerCommitToDB
argument_list|(
name|oldOwnerVolumeList
argument_list|,
name|newOwnerVolumeList
argument_list|,
name|volumeArgs
argument_list|,
name|owner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|OMException
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Changing volume ownership failed for user:{} volume:{}"
argument_list|,
name|owner
argument_list|,
name|volume
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|acquiredUsersLock
condition|)
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseMultiUserLock
argument_list|(
name|owner
argument_list|,
name|actualOwner
argument_list|)
expr_stmt|;
block|}
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setOwnerCommitToDB (UserVolumeInfo oldOwnerVolumeList, UserVolumeInfo newOwnerVolumeList, OmVolumeArgs newOwnerVolumeArgs, String oldOwner)
specifier|private
name|void
name|setOwnerCommitToDB
parameter_list|(
name|UserVolumeInfo
name|oldOwnerVolumeList
parameter_list|,
name|UserVolumeInfo
name|newOwnerVolumeList
parameter_list|,
name|OmVolumeArgs
name|newOwnerVolumeArgs
parameter_list|,
name|String
name|oldOwner
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BatchOperation
name|batch
init|=
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|initBatchOperation
argument_list|()
init|)
block|{
if|if
condition|(
name|oldOwnerVolumeList
operator|.
name|getVolumeNamesList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|metadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|deleteWithBatch
argument_list|(
name|batch
argument_list|,
name|oldOwner
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|putWithBatch
argument_list|(
name|batch
argument_list|,
name|oldOwner
argument_list|,
name|oldOwnerVolumeList
argument_list|)
expr_stmt|;
block|}
name|metadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|putWithBatch
argument_list|(
name|batch
argument_list|,
name|newOwnerVolumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|,
name|newOwnerVolumeList
argument_list|)
expr_stmt|;
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|newOwnerVolumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
decl_stmt|;
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|putWithBatch
argument_list|(
name|batch
argument_list|,
name|dbVolumeKey
argument_list|,
name|newOwnerVolumeArgs
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|commitBatchOperation
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Changes the Quota on a volume.    *    * @param volume - Name of the volume.    * @param quota - Quota in bytes.    *    * @throws IOException    */
annotation|@
name|Override
DECL|method|setQuota (String volume, long quota)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|volume
parameter_list|,
name|long
name|quota
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} does not exist"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equals
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|volumeArgs
operator|.
name|setQuotaInBytes
argument_list|(
name|quota
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|put
argument_list|(
name|dbVolumeKey
argument_list|,
name|volumeArgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|OMException
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Changing volume quota failed for volume:{} quota:{}"
argument_list|,
name|volume
argument_list|,
name|quota
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Gets the volume information.    * @param volume - Volume name.    * @return VolumeArgs or exception is thrown.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getVolumeInfo (String volume)
specifier|public
name|OmVolumeArgs
name|getVolumeInfo
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireReadLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} does not exist"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume "
operator|+
name|volume
operator|+
literal|" is not found"
argument_list|,
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
return|return
name|volumeArgs
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|OMException
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Info volume failed for volume:{}"
argument_list|,
name|volume
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseReadLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes an existing empty volume.    *    * @param volume - Name of the volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteVolume (String volume)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|String
name|owner
init|=
literal|null
decl_stmt|;
name|boolean
name|acquiredUserLock
init|=
literal|false
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
try|try
block|{
name|owner
operator|=
name|getVolumeInfo
argument_list|(
name|volume
argument_list|)
operator|.
name|getOwnerName
argument_list|()
expr_stmt|;
name|acquiredUserLock
operator|=
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|USER_LOCK
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} does not exist"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume "
operator|+
name|volume
operator|+
literal|" is not found"
argument_list|,
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|metadataManager
operator|.
name|isVolumeEmpty
argument_list|(
name|volume
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} is not empty"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
name|ResultCodes
operator|.
name|VOLUME_NOT_EMPTY
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equals
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete the volume from the owner list
comment|// as well as delete the volume entry
name|UserVolumeInfo
name|newVolumeList
init|=
name|delVolumeFromOwnerList
argument_list|(
name|volume
argument_list|,
name|volumeArgs
operator|.
name|getOwnerName
argument_list|()
argument_list|)
decl_stmt|;
name|deleteVolumeCommitToDB
argument_list|(
name|newVolumeList
argument_list|,
name|volume
argument_list|,
name|owner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|OMException
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Delete volume failed for volume:{}"
argument_list|,
name|volume
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|acquiredUserLock
condition|)
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|USER_LOCK
argument_list|,
name|owner
argument_list|)
expr_stmt|;
block|}
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteVolumeCommitToDB (UserVolumeInfo newVolumeList, String volume, String owner)
specifier|private
name|void
name|deleteVolumeCommitToDB
parameter_list|(
name|UserVolumeInfo
name|newVolumeList
parameter_list|,
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BatchOperation
name|batch
init|=
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|initBatchOperation
argument_list|()
init|)
block|{
name|String
name|dbUserKey
init|=
name|metadataManager
operator|.
name|getUserKey
argument_list|(
name|owner
argument_list|)
decl_stmt|;
if|if
condition|(
name|newVolumeList
operator|.
name|getVolumeNamesList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|metadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|deleteWithBatch
argument_list|(
name|batch
argument_list|,
name|dbUserKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadataManager
operator|.
name|getUserTable
argument_list|()
operator|.
name|putWithBatch
argument_list|(
name|batch
argument_list|,
name|dbUserKey
argument_list|,
name|newVolumeList
argument_list|)
expr_stmt|;
block|}
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|deleteWithBatch
argument_list|(
name|batch
argument_list|,
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|commitBatchOperation
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks if the specified user with a role can access this volume.    *    * @param volume - volume    * @param userAcl - user acl which needs to be checked for access    * @return true if the user has access for the volume, false otherwise    * @throws IOException    */
annotation|@
name|Override
DECL|method|checkVolumeAccess (String volume, OzoneAclInfo userAcl)
specifier|public
name|boolean
name|checkVolumeAccess
parameter_list|(
name|String
name|volume
parameter_list|,
name|OzoneAclInfo
name|userAcl
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|userAcl
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireReadLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} does not exist"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume "
operator|+
name|volume
operator|+
literal|" is not found"
argument_list|,
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equals
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|volumeArgs
operator|.
name|getAclMap
argument_list|()
operator|.
name|hasAccess
argument_list|(
name|userAcl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|OMException
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Check volume access failed for volume:{} user:{} rights:{}"
argument_list|,
name|volume
argument_list|,
name|userAcl
operator|.
name|getName
argument_list|()
argument_list|,
name|userAcl
operator|.
name|getRights
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseReadLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|listVolumes (String userName, String prefix, String startKey, int maxKeys)
specifier|public
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|listVolumes
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|startKey
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|USER_LOCK
argument_list|,
name|userName
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|volumes
init|=
name|metadataManager
operator|.
name|listVolumes
argument_list|(
name|userName
argument_list|,
name|prefix
argument_list|,
name|startKey
argument_list|,
name|maxKeys
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|userUgi
init|=
name|ProtobufRpcEngine
operator|.
name|Server
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|userUgi
operator|==
literal|null
operator|||
operator|!
name|aclEnabled
condition|)
block|{
return|return
name|volumes
return|;
block|}
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|filteredVolumes
init|=
name|volumes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|.
name|getAclMap
argument_list|()
operator|.
name|hasAccess
argument_list|(
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|LIST
argument_list|,
name|userUgi
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|filteredVolumes
return|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|USER_LOCK
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add acl for Ozone object. Return true if acl is added successfully else    * false.    *    * @param obj Ozone object for which acl should be added.    * @param acl ozone acl top be added.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|addAcl (OzoneObj obj, OzoneAcl acl)
specifier|public
name|boolean
name|addAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|OzoneAcl
name|acl
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|acl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|obj
operator|.
name|getResourceType
argument_list|()
operator|.
name|equals
argument_list|(
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|VOLUME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected argument passed to "
operator|+
literal|"VolumeManager. OzoneObj type:"
operator|+
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|volume
init|=
name|obj
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} does not exist"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume "
operator|+
name|volume
operator|+
literal|" is not found"
argument_list|,
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
try|try
block|{
name|volumeArgs
operator|.
name|addAcl
argument_list|(
name|acl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Add acl failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|put
argument_list|(
name|dbVolumeKey
argument_list|,
name|volumeArgs
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equals
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//return volumeArgs.getAclMap().hasAccess(userAcl);
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|OMException
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Add acl operation failed for volume:{} acl:{}"
argument_list|,
name|volume
argument_list|,
name|acl
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Remove acl for Ozone object. Return true if acl is removed successfully    * else false.    *    * @param obj Ozone object.    * @param acl Ozone acl to be removed.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|removeAcl (OzoneObj obj, OzoneAcl acl)
specifier|public
name|boolean
name|removeAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|OzoneAcl
name|acl
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|acl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|obj
operator|.
name|getResourceType
argument_list|()
operator|.
name|equals
argument_list|(
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|VOLUME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected argument passed to "
operator|+
literal|"VolumeManager. OzoneObj type:"
operator|+
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|volume
init|=
name|obj
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} does not exist"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume "
operator|+
name|volume
operator|+
literal|" is not found"
argument_list|,
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
try|try
block|{
name|volumeArgs
operator|.
name|removeAcl
argument_list|(
name|acl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Remove acl failed."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|put
argument_list|(
name|dbVolumeKey
argument_list|,
name|volumeArgs
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equals
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//return volumeArgs.getAclMap().hasAccess(userAcl);
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|OMException
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Remove acl operation failed for volume:{} acl:{}"
argument_list|,
name|volume
argument_list|,
name|acl
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Acls to be set for given Ozone object. This operations reset ACL for given    * object to list of ACLs provided in argument.    *    * @param obj Ozone object.    * @param acls List of acls.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|setAcl (OzoneObj obj, List<OzoneAcl> acls)
specifier|public
name|boolean
name|setAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|acls
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|obj
operator|.
name|getResourceType
argument_list|()
operator|.
name|equals
argument_list|(
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|VOLUME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected argument passed to "
operator|+
literal|"VolumeManager. OzoneObj type:"
operator|+
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|volume
init|=
name|obj
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} does not exist"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume "
operator|+
name|volume
operator|+
literal|" is not found"
argument_list|,
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|volumeArgs
operator|.
name|setAcls
argument_list|(
name|acls
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|put
argument_list|(
name|dbVolumeKey
argument_list|,
name|volumeArgs
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equals
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//return volumeArgs.getAclMap().hasAccess(userAcl);
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|OMException
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Set acl operation failed for volume:{} acls:{}"
argument_list|,
name|volume
argument_list|,
name|acls
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns list of ACLs for given Ozone object.    *    * @param obj Ozone object.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|getAcl (OzoneObj obj)
specifier|public
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|getAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|obj
operator|.
name|getResourceType
argument_list|()
operator|.
name|equals
argument_list|(
name|OzoneObj
operator|.
name|ResourceType
operator|.
name|VOLUME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected argument passed to "
operator|+
literal|"VolumeManager. OzoneObj type:"
operator|+
name|obj
operator|.
name|getResourceType
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|volume
init|=
name|obj
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireReadLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} does not exist"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume "
operator|+
name|volume
operator|+
literal|" is not found"
argument_list|,
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equals
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|volumeArgs
operator|.
name|getAclMap
argument_list|()
operator|.
name|getAcl
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ex
operator|instanceof
name|OMException
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Get acl operation failed for volume:{}"
argument_list|,
name|volume
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseReadLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check access for given ozoneObject.    *    * @param ozObject object for which access needs to be checked.    * @param context Context object encapsulating all user related information.    * @return true if user has access else false.    */
annotation|@
name|Override
DECL|method|checkAccess (OzoneObj ozObject, RequestContext context)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|OzoneObj
name|ozObject
parameter_list|,
name|RequestContext
name|context
parameter_list|)
throws|throws
name|OMException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|ozObject
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|String
name|volume
init|=
name|ozObject
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dbVolumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volume
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|volumeArgs
init|=
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|dbVolumeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|volumeArgs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} does not exist"
argument_list|,
name|volume
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume "
operator|+
name|volume
operator|+
literal|" is not found"
argument_list|,
name|ResultCodes
operator|.
name|VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|volume
operator|.
name|equals
argument_list|(
name|volumeArgs
operator|.
name|getVolume
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|hasAccess
init|=
name|volumeArgs
operator|.
name|getAclMap
argument_list|()
operator|.
name|hasAccess
argument_list|(
name|context
operator|.
name|getAclRights
argument_list|()
argument_list|,
name|context
operator|.
name|getClientUgi
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"user:{} has access rights for volume:{} :{} "
argument_list|,
name|context
operator|.
name|getClientUgi
argument_list|()
argument_list|,
name|ozObject
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|hasAccess
argument_list|)
expr_stmt|;
return|return
name|hasAccess
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Check access operation failed for volume:{}"
argument_list|,
name|volume
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Check access operation failed for "
operator|+
literal|"volume:"
operator|+
name|volume
argument_list|,
name|ex
argument_list|,
name|ResultCodes
operator|.
name|INTERNAL_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|VOLUME_LOCK
argument_list|,
name|volume
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

