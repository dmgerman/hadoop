begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
operator|.
name|TracingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|NotLeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocolPB
operator|.
name|OzoneManagerProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|OzoneManagerRatisServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|utils
operator|.
name|OzoneManagerRatisUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|OMClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftPeerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * This class is the server-side translator that forwards requests received on  * {@link OzoneManagerProtocolPB}  * to the OzoneManagerService server implementation.  */
end_comment

begin_class
DECL|class|OzoneManagerProtocolServerSideTranslatorPB
specifier|public
class|class
name|OzoneManagerProtocolServerSideTranslatorPB
implements|implements
name|OzoneManagerProtocolPB
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneManagerProtocolServerSideTranslatorPB
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|omRatisServer
specifier|private
specifier|final
name|OzoneManagerRatisServer
name|omRatisServer
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|RequestHandler
name|handler
decl_stmt|;
DECL|field|isRatisEnabled
specifier|private
specifier|final
name|boolean
name|isRatisEnabled
decl_stmt|;
DECL|field|ozoneManager
specifier|private
specifier|final
name|OzoneManager
name|ozoneManager
decl_stmt|;
comment|/**    * Constructs an instance of the server handler.    *    * @param impl OzoneManagerProtocolPB    */
DECL|method|OzoneManagerProtocolServerSideTranslatorPB ( OzoneManager impl, OzoneManagerRatisServer ratisServer, boolean enableRatis)
specifier|public
name|OzoneManagerProtocolServerSideTranslatorPB
parameter_list|(
name|OzoneManager
name|impl
parameter_list|,
name|OzoneManagerRatisServer
name|ratisServer
parameter_list|,
name|boolean
name|enableRatis
parameter_list|)
block|{
name|this
operator|.
name|ozoneManager
operator|=
name|impl
expr_stmt|;
name|handler
operator|=
operator|new
name|OzoneManagerRequestHandler
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|this
operator|.
name|omRatisServer
operator|=
name|ratisServer
expr_stmt|;
name|this
operator|.
name|isRatisEnabled
operator|=
name|enableRatis
expr_stmt|;
block|}
comment|/**    * Submit requests to Ratis server for OM HA implementation.    * TODO: Once HA is implemented fully, we should have only one server side    * translator for OM protocol.    */
annotation|@
name|Override
DECL|method|submitRequest (RpcController controller, OMRequest request)
specifier|public
name|OMResponse
name|submitRequest
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|OMRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|Scope
name|scope
init|=
name|TracingUtil
operator|.
name|importAndCreateScope
argument_list|(
name|request
operator|.
name|getCmdType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isRatisEnabled
condition|)
block|{
comment|// Check if the request is a read only request
if|if
condition|(
name|OmUtils
operator|.
name|isReadOnly
argument_list|(
name|request
argument_list|)
condition|)
block|{
return|return
name|submitReadRequestToOM
argument_list|(
name|request
argument_list|)
return|;
block|}
else|else
block|{
comment|// PreExecute if needed.
try|try
block|{
name|OMClientRequest
name|omClientRequest
init|=
name|OzoneManagerRatisUtils
operator|.
name|createClientRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|omClientRequest
operator|!=
literal|null
condition|)
block|{
name|request
operator|=
name|omClientRequest
operator|.
name|preExecute
argument_list|(
name|ozoneManager
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// As some of the preExecute returns error. So handle here.
return|return
name|createErrorResponse
argument_list|(
name|request
argument_list|,
name|ex
argument_list|)
return|;
block|}
return|return
name|submitRequestToRatis
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|submitRequestDirectlyToOM
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create OMResponse from the specified OMRequest and exception.    * @param omRequest    * @param exception    * @return OMResponse    */
DECL|method|createErrorResponse ( OMRequest omRequest, IOException exception)
specifier|private
name|OMResponse
name|createErrorResponse
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|,
name|IOException
name|exception
parameter_list|)
block|{
name|OzoneManagerProtocolProtos
operator|.
name|Type
name|cmdType
init|=
name|omRequest
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|cmdType
condition|)
block|{
case|case
name|CreateBucket
case|:
name|OMResponse
operator|.
name|Builder
name|omResponse
init|=
name|OMResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setStatus
argument_list|(
name|OzoneManagerRatisUtils
operator|.
name|exceptionToResponseStatus
argument_list|(
name|exception
argument_list|)
argument_list|)
operator|.
name|setCmdType
argument_list|(
name|cmdType
argument_list|)
operator|.
name|setSuccess
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|omResponse
operator|.
name|setMessage
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|omResponse
operator|.
name|build
argument_list|()
return|;
case|case
name|DeleteBucket
case|:
case|case
name|SetBucketProperty
case|:
comment|// In these cases, we can return null. As this method is called when
comment|// some error occurred in preExecute. For these request types
comment|// preExecute is do nothing.
return|return
literal|null
return|;
default|default:
comment|// We shall never come here.
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Submits request to OM's Ratis server.    */
DECL|method|submitRequestToRatis (OMRequest request)
specifier|private
name|OMResponse
name|submitRequestToRatis
parameter_list|(
name|OMRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|//TODO: Need to remove OzoneManagerRatisClient, as now we are using
comment|// RatisServer Api's.
return|return
name|omRatisServer
operator|.
name|submitRequest
argument_list|(
name|request
argument_list|)
return|;
block|}
DECL|method|submitReadRequestToOM (OMRequest request)
specifier|private
name|OMResponse
name|submitReadRequestToOM
parameter_list|(
name|OMRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// Check if this OM is the leader.
if|if
condition|(
name|omRatisServer
operator|.
name|isLeader
argument_list|()
condition|)
block|{
return|return
name|handler
operator|.
name|handle
argument_list|(
name|request
argument_list|)
return|;
block|}
else|else
block|{
name|RaftPeerId
name|raftPeerId
init|=
name|omRatisServer
operator|.
name|getRaftPeerId
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|RaftPeerId
argument_list|>
name|leaderRaftPeerId
init|=
name|omRatisServer
operator|.
name|getCachedLeaderPeerId
argument_list|()
decl_stmt|;
name|NotLeaderException
name|notLeaderException
decl_stmt|;
if|if
condition|(
name|leaderRaftPeerId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|notLeaderException
operator|=
operator|new
name|NotLeaderException
argument_list|(
name|raftPeerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|notLeaderException
operator|=
operator|new
name|NotLeaderException
argument_list|(
name|raftPeerId
operator|.
name|toString
argument_list|()
argument_list|,
name|leaderRaftPeerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|notLeaderException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|ServiceException
argument_list|(
name|notLeaderException
argument_list|)
throw|;
block|}
block|}
comment|/**    * Submits request directly to OM.    */
DECL|method|submitRequestDirectlyToOM (OMRequest request)
specifier|private
name|OMResponse
name|submitRequestDirectlyToOM
parameter_list|(
name|OMRequest
name|request
parameter_list|)
block|{
return|return
name|handler
operator|.
name|handle
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
end_class

end_unit

