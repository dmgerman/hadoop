begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
operator|.
name|TracingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocol
operator|.
name|OzoneManagerProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocolPB
operator|.
name|OzoneManagerProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|OzoneManagerRatisClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|opentracing
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class is the server-side translator that forwards requests received on  * {@link OzoneManagerProtocolPB}  * to the OzoneManagerService server implementation.  */
end_comment

begin_class
DECL|class|OzoneManagerProtocolServerSideTranslatorPB
specifier|public
class|class
name|OzoneManagerProtocolServerSideTranslatorPB
implements|implements
name|OzoneManagerProtocolPB
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneManagerProtocolServerSideTranslatorPB
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|omRatisClient
specifier|private
specifier|final
name|OzoneManagerRatisClient
name|omRatisClient
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|OzoneManagerRequestHandler
name|handler
decl_stmt|;
DECL|field|isRatisEnabled
specifier|private
specifier|final
name|boolean
name|isRatisEnabled
decl_stmt|;
comment|/**    * Constructs an instance of the server handler.    *    * @param impl OzoneManagerProtocolPB    */
DECL|method|OzoneManagerProtocolServerSideTranslatorPB ( OzoneManagerProtocol impl, OzoneManagerRatisClient ratisClient, boolean enableRatis)
specifier|public
name|OzoneManagerProtocolServerSideTranslatorPB
parameter_list|(
name|OzoneManagerProtocol
name|impl
parameter_list|,
name|OzoneManagerRatisClient
name|ratisClient
parameter_list|,
name|boolean
name|enableRatis
parameter_list|)
block|{
name|handler
operator|=
operator|new
name|OzoneManagerRequestHandler
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|this
operator|.
name|omRatisClient
operator|=
name|ratisClient
expr_stmt|;
name|this
operator|.
name|isRatisEnabled
operator|=
name|enableRatis
expr_stmt|;
block|}
comment|/**    * Submit requests to Ratis server for OM HA implementation.    * TODO: Once HA is implemented fully, we should have only one server side    * translator for OM protocol.    */
annotation|@
name|Override
DECL|method|submitRequest (RpcController controller, OMRequest request)
specifier|public
name|OMResponse
name|submitRequest
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|OMRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|Scope
name|scope
init|=
name|TracingUtil
operator|.
name|importAndCreateScope
argument_list|(
name|request
operator|.
name|getCmdType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|getTraceID
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isRatisEnabled
condition|)
block|{
return|return
name|submitRequestToRatis
argument_list|(
name|request
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|submitRequestDirectlyToOM
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Submits request to OM's Ratis server.    */
DECL|method|submitRequestToRatis (OMRequest request)
specifier|private
name|OMResponse
name|submitRequestToRatis
parameter_list|(
name|OMRequest
name|request
parameter_list|)
block|{
return|return
name|omRatisClient
operator|.
name|sendCommand
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Submits request directly to OM.    */
DECL|method|submitRequestDirectlyToOM (OMRequest request)
specifier|private
name|OMResponse
name|submitRequestDirectlyToOM
parameter_list|(
name|OMRequest
name|request
parameter_list|)
block|{
return|return
name|handler
operator|.
name|handle
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
end_class

end_unit

