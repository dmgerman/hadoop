begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|HddsServerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|RaftConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|client
operator|.
name|RaftClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|conf
operator|.
name|RaftProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|grpc
operator|.
name|GrpcConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|netty
operator|.
name|NettyConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftPeerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|RpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|SupportedRpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|RaftServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|RaftServerConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|statemachine
operator|.
name|impl
operator|.
name|BaseStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|LifeCycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|SizeInBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|TimeDuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Creates a Ratis server endpoint for OM.  */
end_comment

begin_class
DECL|class|OzoneManagerRatisServer
specifier|public
specifier|final
class|class
name|OzoneManagerRatisServer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneManagerRatisServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|RaftServer
name|server
decl_stmt|;
DECL|method|OzoneManagerRatisServer (String omId, int port, Configuration conf)
specifier|private
name|OzoneManagerRatisServer
parameter_list|(
name|String
name|omId
parameter_list|,
name|int
name|port
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|omId
argument_list|,
literal|"omId == null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|RaftProperties
name|serverProperties
init|=
name|newRaftProperties
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|server
operator|=
name|RaftServer
operator|.
name|newBuilder
argument_list|()
operator|.
name|setServerId
argument_list|(
name|RaftPeerId
operator|.
name|valueOf
argument_list|(
name|omId
argument_list|)
argument_list|)
operator|.
name|setProperties
argument_list|(
name|serverProperties
argument_list|)
operator|.
name|setStateMachineRegistry
argument_list|(
name|this
operator|::
name|getStateMachine
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|newOMRatisServer (String omId, Configuration ozoneConf)
specifier|public
specifier|static
name|OzoneManagerRatisServer
name|newOMRatisServer
parameter_list|(
name|String
name|omId
parameter_list|,
name|Configuration
name|ozoneConf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|localPort
init|=
name|ozoneConf
operator|.
name|getInt
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_PORT_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_PORT_DEFAULT
argument_list|)
decl_stmt|;
comment|// Get an available port on current node and
comment|// use that as the container port
if|if
condition|(
name|ozoneConf
operator|.
name|getBoolean
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_RANDOM_PORT_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_RANDOM_PORT_KEY_DEFAULT
argument_list|)
condition|)
block|{
try|try
init|(
name|ServerSocket
name|socket
init|=
operator|new
name|ServerSocket
argument_list|()
init|)
block|{
name|socket
operator|.
name|setReuseAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|socket
operator|.
name|bind
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|localPort
operator|=
name|socket
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found a free port for the OM Ratis server : {}"
argument_list|,
name|localPort
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable find a random free port for the server, "
operator|+
literal|"fallback to use default port {}"
argument_list|,
name|localPort
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|OzoneManagerRatisServer
argument_list|(
name|omId
argument_list|,
name|localPort
argument_list|,
name|ozoneConf
argument_list|)
return|;
block|}
comment|/**    * Return a dummy StateMachine.    * TODO: Implement a state machine on OM.    */
DECL|method|getStateMachine (RaftGroupId gid)
specifier|private
name|BaseStateMachine
name|getStateMachine
parameter_list|(
name|RaftGroupId
name|gid
parameter_list|)
block|{
return|return
operator|new
name|BaseStateMachine
argument_list|()
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting {} {} at port {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|server
operator|.
name|getId
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|newRaftProperties (Configuration conf)
specifier|private
name|RaftProperties
name|newRaftProperties
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|RaftProperties
name|properties
init|=
operator|new
name|RaftProperties
argument_list|()
decl_stmt|;
comment|// Set RPC type
specifier|final
name|String
name|rpcType
init|=
name|conf
operator|.
name|get
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_RPC_TYPE_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_RPC_TYPE_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RpcType
name|rpc
init|=
name|SupportedRpcType
operator|.
name|valueOfIgnoreCase
argument_list|(
name|rpcType
argument_list|)
decl_stmt|;
name|RaftConfigKeys
operator|.
name|Rpc
operator|.
name|setType
argument_list|(
name|properties
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
comment|// Set the ratis port number
if|if
condition|(
name|rpc
operator|==
name|SupportedRpcType
operator|.
name|GRPC
condition|)
block|{
name|GrpcConfigKeys
operator|.
name|Server
operator|.
name|setPort
argument_list|(
name|properties
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rpc
operator|==
name|SupportedRpcType
operator|.
name|NETTY
condition|)
block|{
name|NettyConfigKeys
operator|.
name|Server
operator|.
name|setPort
argument_list|(
name|properties
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
comment|// Set Ratis storage directory
name|String
name|storageDir
init|=
name|getOMRatisDirectory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|setStorageDirs
argument_list|(
name|properties
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|File
argument_list|(
name|storageDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set RAFT segment size
specifier|final
name|int
name|raftSegmentSize
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getStorageSize
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SEGMENT_SIZE_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SEGMENT_SIZE_DEFAULT
argument_list|,
name|StorageUnit
operator|.
name|BYTES
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Log
operator|.
name|setSegmentSizeMax
argument_list|(
name|properties
argument_list|,
name|SizeInBytes
operator|.
name|valueOf
argument_list|(
name|raftSegmentSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set RAFT segment pre-allocated size
specifier|final
name|int
name|raftSegmentPreallocatedSize
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getStorageSize
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SEGMENT_PREALLOCATED_SIZE_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SEGMENT_PREALLOCATED_SIZE_DEFAULT
argument_list|,
name|StorageUnit
operator|.
name|BYTES
argument_list|)
decl_stmt|;
name|int
name|logAppenderQueueNumElements
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_LOG_APPENDER_QUEUE_NUM_ELEMENTS
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_LOG_APPENDER_QUEUE_NUM_ELEMENTS_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|logAppenderQueueByteLimit
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getStorageSize
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_LOG_APPENDER_QUEUE_BYTE_LIMIT
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_LOG_APPENDER_QUEUE_BYTE_LIMIT_DEFAULT
argument_list|,
name|StorageUnit
operator|.
name|BYTES
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Log
operator|.
name|Appender
operator|.
name|setBufferElementLimit
argument_list|(
name|properties
argument_list|,
name|logAppenderQueueNumElements
argument_list|)
expr_stmt|;
name|RaftServerConfigKeys
operator|.
name|Log
operator|.
name|Appender
operator|.
name|setBufferByteLimit
argument_list|(
name|properties
argument_list|,
name|SizeInBytes
operator|.
name|valueOf
argument_list|(
name|logAppenderQueueByteLimit
argument_list|)
argument_list|)
expr_stmt|;
name|RaftServerConfigKeys
operator|.
name|Log
operator|.
name|setPreallocatedSize
argument_list|(
name|properties
argument_list|,
name|SizeInBytes
operator|.
name|valueOf
argument_list|(
name|raftSegmentPreallocatedSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// For grpc set the maximum message size
comment|// TODO: calculate the max message size based on the max size of a
comment|// PutSmallFileRequest's file size limit
name|GrpcConfigKeys
operator|.
name|setMessageSizeMax
argument_list|(
name|properties
argument_list|,
name|SizeInBytes
operator|.
name|valueOf
argument_list|(
name|logAppenderQueueByteLimit
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the server request timeout
name|TimeUnit
name|serverRequestTimeoutUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|serverRequestTimeoutDuration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|serverRequestTimeoutUnit
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|serverRequestTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|serverRequestTimeoutDuration
argument_list|,
name|serverRequestTimeoutUnit
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Rpc
operator|.
name|setRequestTimeout
argument_list|(
name|properties
argument_list|,
name|serverRequestTimeout
argument_list|)
expr_stmt|;
comment|// Set timeout for server retry cache entry
name|TimeUnit
name|retryCacheTimeoutUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_RETRY_CACHE_TIMEOUT_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|retryCacheTimeoutDuration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_RETRY_CACHE_TIMEOUT_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_RETRY_CACHE_TIMEOUT_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|retryCacheTimeoutUnit
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|retryCacheTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|retryCacheTimeoutDuration
argument_list|,
name|retryCacheTimeoutUnit
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|RetryCache
operator|.
name|setExpiryTime
argument_list|(
name|properties
argument_list|,
name|retryCacheTimeout
argument_list|)
expr_stmt|;
comment|// Set the server min and max timeout
name|TimeUnit
name|serverMinTimeoutUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_MINIMUM_TIMEOUT_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|serverMinTimeoutDuration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_MINIMUM_TIMEOUT_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_MINIMUM_TIMEOUT_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|serverMinTimeoutUnit
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|serverMinTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|serverMinTimeoutDuration
argument_list|,
name|serverMinTimeoutUnit
argument_list|)
decl_stmt|;
name|long
name|serverMaxTimeoutDuration
init|=
name|serverMinTimeout
operator|.
name|toLong
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|+
literal|200
decl_stmt|;
specifier|final
name|TimeDuration
name|serverMaxTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|serverMaxTimeoutDuration
argument_list|,
name|serverMinTimeoutUnit
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Rpc
operator|.
name|setTimeoutMin
argument_list|(
name|properties
argument_list|,
name|serverMinTimeout
argument_list|)
expr_stmt|;
name|RaftServerConfigKeys
operator|.
name|Rpc
operator|.
name|setTimeoutMax
argument_list|(
name|properties
argument_list|,
name|serverMaxTimeout
argument_list|)
expr_stmt|;
comment|// Set the number of maximum cached segments
name|RaftServerConfigKeys
operator|.
name|Log
operator|.
name|setMaxCachedSegmentNum
argument_list|(
name|properties
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Set the client request timeout
name|TimeUnit
name|clientRequestTimeoutUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|clientRequestTimeoutDuration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|clientRequestTimeoutUnit
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|clientRequestTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|clientRequestTimeoutDuration
argument_list|,
name|clientRequestTimeoutUnit
argument_list|)
decl_stmt|;
name|RaftClientConfigKeys
operator|.
name|Rpc
operator|.
name|setRequestTimeout
argument_list|(
name|properties
argument_list|,
name|clientRequestTimeout
argument_list|)
expr_stmt|;
comment|// TODO: set max write buffer size
comment|/**      * TODO: when state machine is implemented, enable StateMachineData sync      * and set sync timeout and number of sync retries.      */
comment|/**      * TODO: set following ratis leader election related configs when      * replicated ratis server is implemented.      * 1. leader election timeout      * 2. node failure timeout      * 3.      */
comment|/**      * TODO: when ratis snapshots are implemented, set snapshot threshold and      * queue size.      */
return|return
name|properties
return|;
block|}
DECL|method|getServerPort ()
specifier|public
name|int
name|getServerPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getServerState ()
specifier|public
name|LifeCycle
operator|.
name|State
name|getServerState
parameter_list|()
block|{
return|return
name|server
operator|.
name|getLifeCycleState
argument_list|()
return|;
block|}
DECL|method|getOMRatisDirectory (Configuration conf)
specifier|public
specifier|static
name|String
name|getOMRatisDirectory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|storageDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_STORAGE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|storageDir
argument_list|)
condition|)
block|{
name|storageDir
operator|=
name|HddsServerUtil
operator|.
name|getDefaultRatisDirectory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|storageDir
return|;
block|}
block|}
end_class

end_unit

