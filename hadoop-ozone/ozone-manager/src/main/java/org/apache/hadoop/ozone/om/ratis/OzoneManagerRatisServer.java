begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.ratis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|StorageUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMNodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OMRatisHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|RaftConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|client
operator|.
name|RaftClientConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|conf
operator|.
name|RaftProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|grpc
operator|.
name|GrpcConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|netty
operator|.
name|NettyConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|proto
operator|.
name|RaftProtos
operator|.
name|RoleInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|proto
operator|.
name|RaftProtos
operator|.
name|RaftPeerRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|ClientId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|GroupInfoReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|GroupInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|NotLeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftClientReply
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftClientRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|RaftPeerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|protocol
operator|.
name|StateMachineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|RpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|rpc
operator|.
name|SupportedRpcType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|RaftServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|server
operator|.
name|RaftServerConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|LifeCycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|SizeInBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|TimeDuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|STATUS_CODE
import|;
end_import

begin_comment
comment|/**  * Creates a Ratis server endpoint for OM.  */
end_comment

begin_class
DECL|class|OzoneManagerRatisServer
specifier|public
specifier|final
class|class
name|OzoneManagerRatisServer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneManagerRatisServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|omRatisAddress
specifier|private
specifier|final
name|InetSocketAddress
name|omRatisAddress
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|RaftServer
name|server
decl_stmt|;
DECL|field|raftGroupId
specifier|private
specifier|final
name|RaftGroupId
name|raftGroupId
decl_stmt|;
DECL|field|raftGroup
specifier|private
specifier|final
name|RaftGroup
name|raftGroup
decl_stmt|;
DECL|field|raftPeerId
specifier|private
specifier|final
name|RaftPeerId
name|raftPeerId
decl_stmt|;
DECL|field|ozoneManager
specifier|private
specifier|final
name|OzoneManager
name|ozoneManager
decl_stmt|;
DECL|field|omStateMachine
specifier|private
specifier|final
name|OzoneManagerStateMachine
name|omStateMachine
decl_stmt|;
DECL|field|clientId
specifier|private
specifier|final
name|ClientId
name|clientId
init|=
name|ClientId
operator|.
name|randomId
argument_list|()
decl_stmt|;
DECL|field|scheduledRoleChecker
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduledRoleChecker
decl_stmt|;
DECL|field|roleCheckInitialDelayMs
specifier|private
name|long
name|roleCheckInitialDelayMs
init|=
literal|1000
decl_stmt|;
comment|// 1 second default
DECL|field|roleCheckIntervalMs
specifier|private
name|long
name|roleCheckIntervalMs
decl_stmt|;
DECL|field|roleCheckLock
specifier|private
name|ReentrantReadWriteLock
name|roleCheckLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|cachedPeerRole
specifier|private
name|Optional
argument_list|<
name|RaftPeerRole
argument_list|>
name|cachedPeerRole
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|cachedLeaderPeerId
specifier|private
name|Optional
argument_list|<
name|RaftPeerId
argument_list|>
name|cachedLeaderPeerId
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|CALL_ID_COUNTER
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|CALL_ID_COUNTER
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|nextCallId ()
specifier|private
specifier|static
name|long
name|nextCallId
parameter_list|()
block|{
return|return
name|CALL_ID_COUNTER
operator|.
name|getAndIncrement
argument_list|()
operator|&
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
comment|/**    * Submit request to Ratis server.    * @param omRequest    * @return OMResponse - response returned to the client.    * @throws ServiceException    */
DECL|method|submitRequest (OMRequest omRequest)
specifier|public
name|OMResponse
name|submitRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|)
throws|throws
name|ServiceException
block|{
name|RaftClientRequest
name|raftClientRequest
init|=
name|createWriteRaftClientRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
name|RaftClientReply
name|raftClientReply
decl_stmt|;
try|try
block|{
name|raftClientReply
operator|=
name|server
operator|.
name|submitClientRequestAsync
argument_list|(
name|raftClientRequest
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
name|processReply
argument_list|(
name|omRequest
argument_list|,
name|raftClientReply
argument_list|)
return|;
block|}
comment|/**    * Create Write RaftClient request from OMRequest.    * @param omRequest    * @return RaftClientRequest - Raft Client request which is submitted to    * ratis server.    */
DECL|method|createWriteRaftClientRequest (OMRequest omRequest)
specifier|private
name|RaftClientRequest
name|createWriteRaftClientRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|)
block|{
return|return
operator|new
name|RaftClientRequest
argument_list|(
name|clientId
argument_list|,
name|server
operator|.
name|getId
argument_list|()
argument_list|,
name|raftGroupId
argument_list|,
name|nextCallId
argument_list|()
argument_list|,
name|Message
operator|.
name|valueOf
argument_list|(
name|OMRatisHelper
operator|.
name|convertRequestToByteString
argument_list|(
name|omRequest
argument_list|)
argument_list|)
argument_list|,
name|RaftClientRequest
operator|.
name|writeRequestType
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Process the raftClientReply and return OMResponse.    * @param omRequest    * @param reply    * @return OMResponse - response which is returned to client.    * @throws ServiceException    */
DECL|method|processReply (OMRequest omRequest, RaftClientReply reply)
specifier|private
name|OMResponse
name|processReply
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|,
name|RaftClientReply
name|reply
parameter_list|)
throws|throws
name|ServiceException
block|{
comment|// NotLeader exception is thrown only when the raft server to which the
comment|// request is submitted is not the leader. This can happen first time
comment|// when client is submitting request to OM.
name|NotLeaderException
name|notLeaderException
init|=
name|reply
operator|.
name|getNotLeaderException
argument_list|()
decl_stmt|;
if|if
condition|(
name|notLeaderException
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|notLeaderException
argument_list|)
throw|;
block|}
name|StateMachineException
name|stateMachineException
init|=
name|reply
operator|.
name|getStateMachineException
argument_list|()
decl_stmt|;
if|if
condition|(
name|stateMachineException
operator|!=
literal|null
condition|)
block|{
name|OMResponse
operator|.
name|Builder
name|omResponse
init|=
name|OMResponse
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|omResponse
operator|.
name|setCmdType
argument_list|(
name|omRequest
operator|.
name|getCmdType
argument_list|()
argument_list|)
expr_stmt|;
name|omResponse
operator|.
name|setSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|omResponse
operator|.
name|setMessage
argument_list|(
name|stateMachineException
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|omResponse
operator|.
name|setStatus
argument_list|(
name|parseErrorStatus
argument_list|(
name|stateMachineException
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error while executing ratis request. "
operator|+
literal|"stateMachineException: "
argument_list|,
name|stateMachineException
argument_list|)
expr_stmt|;
return|return
name|omResponse
operator|.
name|build
argument_list|()
return|;
block|}
try|try
block|{
return|return
name|OMRatisHelper
operator|.
name|getOMResponseFromRaftClientReply
argument_list|(
name|reply
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// TODO: Still need to handle RaftRetry failure exception and
comment|//  NotReplicated exception.
block|}
comment|/**    * Parse errorMessage received from the exception and convert to    * {@link OzoneManagerProtocolProtos.Status}.    * @param errorMessage    * @return OzoneManagerProtocolProtos.Status    */
DECL|method|parseErrorStatus ( String errorMessage)
specifier|private
name|OzoneManagerProtocolProtos
operator|.
name|Status
name|parseErrorStatus
parameter_list|(
name|String
name|errorMessage
parameter_list|)
block|{
if|if
condition|(
name|errorMessage
operator|.
name|contains
argument_list|(
name|STATUS_CODE
argument_list|)
condition|)
block|{
name|String
name|errorCode
init|=
name|errorMessage
operator|.
name|substring
argument_list|(
name|errorMessage
operator|.
name|indexOf
argument_list|(
name|STATUS_CODE
argument_list|)
operator|+
name|STATUS_CODE
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing error message for error code "
operator|+
name|errorCode
argument_list|)
expr_stmt|;
return|return
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|valueOf
argument_list|(
name|errorCode
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|INTERNAL_ERROR
return|;
block|}
block|}
comment|/**    * Returns an OM Ratis server.    * @param conf configuration    * @param om the OM instance starting the ratis server    * @param raftGroupIdStr raft group id string    * @param localRaftPeerId raft peer id of this Ratis server    * @param addr address of the ratis server    * @param raftPeers peer nodes in the raft ring    * @throws IOException    */
DECL|method|OzoneManagerRatisServer (Configuration conf, OzoneManager om, String raftGroupIdStr, RaftPeerId localRaftPeerId, InetSocketAddress addr, List<RaftPeer> raftPeers)
specifier|private
name|OzoneManagerRatisServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|OzoneManager
name|om
parameter_list|,
name|String
name|raftGroupIdStr
parameter_list|,
name|RaftPeerId
name|localRaftPeerId
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|List
argument_list|<
name|RaftPeer
argument_list|>
name|raftPeers
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|ozoneManager
operator|=
name|om
expr_stmt|;
name|this
operator|.
name|omRatisAddress
operator|=
name|addr
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|addr
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|RaftProperties
name|serverProperties
init|=
name|newRaftProperties
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|raftPeerId
operator|=
name|localRaftPeerId
expr_stmt|;
name|this
operator|.
name|raftGroupId
operator|=
name|RaftGroupId
operator|.
name|valueOf
argument_list|(
name|getRaftGroupIdFromOmServiceId
argument_list|(
name|raftGroupIdStr
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|raftGroup
operator|=
name|RaftGroup
operator|.
name|valueOf
argument_list|(
name|raftGroupId
argument_list|,
name|raftPeers
argument_list|)
expr_stmt|;
name|StringBuilder
name|raftPeersStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RaftPeer
name|peer
range|:
name|raftPeers
control|)
block|{
name|raftPeersStr
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|peer
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Instantiating OM Ratis server with GroupID: {} and "
operator|+
literal|"Raft Peers: {}"
argument_list|,
name|raftGroupIdStr
argument_list|,
name|raftPeersStr
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|omStateMachine
operator|=
name|getStateMachine
argument_list|()
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|RaftServer
operator|.
name|newBuilder
argument_list|()
operator|.
name|setServerId
argument_list|(
name|this
operator|.
name|raftPeerId
argument_list|)
operator|.
name|setGroup
argument_list|(
name|this
operator|.
name|raftGroup
argument_list|)
operator|.
name|setProperties
argument_list|(
name|serverProperties
argument_list|)
operator|.
name|setStateMachine
argument_list|(
name|omStateMachine
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Run a scheduler to check and update the server role on the leader
comment|// periodically
name|this
operator|.
name|scheduledRoleChecker
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|this
operator|.
name|scheduledRoleChecker
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Run this check only on the leader OM
if|if
condition|(
name|cachedPeerRole
operator|.
name|isPresent
argument_list|()
operator|&&
name|cachedPeerRole
operator|.
name|get
argument_list|()
operator|==
name|RaftPeerRole
operator|.
name|LEADER
condition|)
block|{
name|updateServerRole
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|roleCheckInitialDelayMs
argument_list|,
name|roleCheckIntervalMs
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates an instance of OzoneManagerRatisServer.    */
DECL|method|newOMRatisServer ( Configuration ozoneConf, OzoneManager omProtocol, OMNodeDetails omNodeDetails, List<OMNodeDetails> peerNodes)
specifier|public
specifier|static
name|OzoneManagerRatisServer
name|newOMRatisServer
parameter_list|(
name|Configuration
name|ozoneConf
parameter_list|,
name|OzoneManager
name|omProtocol
parameter_list|,
name|OMNodeDetails
name|omNodeDetails
parameter_list|,
name|List
argument_list|<
name|OMNodeDetails
argument_list|>
name|peerNodes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// RaftGroupId is the omServiceId
name|String
name|omServiceId
init|=
name|omNodeDetails
operator|.
name|getOMServiceId
argument_list|()
decl_stmt|;
name|String
name|omNodeId
init|=
name|omNodeDetails
operator|.
name|getOMNodeId
argument_list|()
decl_stmt|;
name|RaftPeerId
name|localRaftPeerId
init|=
name|RaftPeerId
operator|.
name|getRaftPeerId
argument_list|(
name|omNodeId
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|ratisAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|omNodeDetails
operator|.
name|getAddress
argument_list|()
argument_list|,
name|omNodeDetails
operator|.
name|getRatisPort
argument_list|()
argument_list|)
decl_stmt|;
name|RaftPeer
name|localRaftPeer
init|=
operator|new
name|RaftPeer
argument_list|(
name|localRaftPeerId
argument_list|,
name|ratisAddr
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RaftPeer
argument_list|>
name|raftPeers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add this Ratis server to the Ratis ring
name|raftPeers
operator|.
name|add
argument_list|(
name|localRaftPeer
argument_list|)
expr_stmt|;
for|for
control|(
name|OMNodeDetails
name|peerInfo
range|:
name|peerNodes
control|)
block|{
name|String
name|peerNodeId
init|=
name|peerInfo
operator|.
name|getOMNodeId
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|peerRatisAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|peerInfo
operator|.
name|getAddress
argument_list|()
argument_list|,
name|peerInfo
operator|.
name|getRatisPort
argument_list|()
argument_list|)
decl_stmt|;
name|RaftPeerId
name|raftPeerId
init|=
name|RaftPeerId
operator|.
name|valueOf
argument_list|(
name|peerNodeId
argument_list|)
decl_stmt|;
name|RaftPeer
name|raftPeer
init|=
operator|new
name|RaftPeer
argument_list|(
name|raftPeerId
argument_list|,
name|peerRatisAddr
argument_list|)
decl_stmt|;
comment|// Add other OM nodes belonging to the same OM service to the Ratis ring
name|raftPeers
operator|.
name|add
argument_list|(
name|raftPeer
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|OzoneManagerRatisServer
argument_list|(
name|ozoneConf
argument_list|,
name|omProtocol
argument_list|,
name|omServiceId
argument_list|,
name|localRaftPeerId
argument_list|,
name|ratisAddr
argument_list|,
name|raftPeers
argument_list|)
return|;
block|}
DECL|method|getRaftGroup ()
specifier|public
name|RaftGroup
name|getRaftGroup
parameter_list|()
block|{
return|return
name|this
operator|.
name|raftGroup
return|;
block|}
comment|/**    * Returns OzoneManager StateMachine.    */
DECL|method|getStateMachine ()
specifier|private
name|OzoneManagerStateMachine
name|getStateMachine
parameter_list|()
block|{
return|return
operator|new
name|OzoneManagerStateMachine
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getOzoneManager ()
specifier|public
name|OzoneManager
name|getOzoneManager
parameter_list|()
block|{
return|return
name|ozoneManager
return|;
block|}
comment|/**    * Start the Ratis server.    * @throws IOException    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting {} {} at port {}"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|server
operator|.
name|getId
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|omStateMachine
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//TODO simplify it to make it shorter
annotation|@
name|SuppressWarnings
argument_list|(
literal|"methodlength"
argument_list|)
DECL|method|newRaftProperties (Configuration conf)
specifier|private
name|RaftProperties
name|newRaftProperties
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|RaftProperties
name|properties
init|=
operator|new
name|RaftProperties
argument_list|()
decl_stmt|;
comment|// Set RPC type
specifier|final
name|String
name|rpcType
init|=
name|conf
operator|.
name|get
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_RPC_TYPE_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_RPC_TYPE_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|RpcType
name|rpc
init|=
name|SupportedRpcType
operator|.
name|valueOfIgnoreCase
argument_list|(
name|rpcType
argument_list|)
decl_stmt|;
name|RaftConfigKeys
operator|.
name|Rpc
operator|.
name|setType
argument_list|(
name|properties
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
comment|// Set the ratis port number
if|if
condition|(
name|rpc
operator|==
name|SupportedRpcType
operator|.
name|GRPC
condition|)
block|{
name|GrpcConfigKeys
operator|.
name|Server
operator|.
name|setPort
argument_list|(
name|properties
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rpc
operator|==
name|SupportedRpcType
operator|.
name|NETTY
condition|)
block|{
name|NettyConfigKeys
operator|.
name|Server
operator|.
name|setPort
argument_list|(
name|properties
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
comment|// Set Ratis storage directory
name|String
name|storageDir
init|=
name|OmUtils
operator|.
name|getOMRatisDirectory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|setStorageDirs
argument_list|(
name|properties
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|File
argument_list|(
name|storageDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set RAFT segment size
specifier|final
name|int
name|raftSegmentSize
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getStorageSize
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SEGMENT_SIZE_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SEGMENT_SIZE_DEFAULT
argument_list|,
name|StorageUnit
operator|.
name|BYTES
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Log
operator|.
name|setSegmentSizeMax
argument_list|(
name|properties
argument_list|,
name|SizeInBytes
operator|.
name|valueOf
argument_list|(
name|raftSegmentSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set RAFT segment pre-allocated size
specifier|final
name|int
name|raftSegmentPreallocatedSize
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getStorageSize
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SEGMENT_PREALLOCATED_SIZE_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SEGMENT_PREALLOCATED_SIZE_DEFAULT
argument_list|,
name|StorageUnit
operator|.
name|BYTES
argument_list|)
decl_stmt|;
name|int
name|logAppenderQueueNumElements
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_LOG_APPENDER_QUEUE_NUM_ELEMENTS
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_LOG_APPENDER_QUEUE_NUM_ELEMENTS_DEFAULT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|logAppenderQueueByteLimit
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getStorageSize
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_LOG_APPENDER_QUEUE_BYTE_LIMIT
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_LOG_APPENDER_QUEUE_BYTE_LIMIT_DEFAULT
argument_list|,
name|StorageUnit
operator|.
name|BYTES
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Log
operator|.
name|Appender
operator|.
name|setBufferElementLimit
argument_list|(
name|properties
argument_list|,
name|logAppenderQueueNumElements
argument_list|)
expr_stmt|;
name|RaftServerConfigKeys
operator|.
name|Log
operator|.
name|Appender
operator|.
name|setBufferByteLimit
argument_list|(
name|properties
argument_list|,
name|SizeInBytes
operator|.
name|valueOf
argument_list|(
name|logAppenderQueueByteLimit
argument_list|)
argument_list|)
expr_stmt|;
name|RaftServerConfigKeys
operator|.
name|Log
operator|.
name|setPreallocatedSize
argument_list|(
name|properties
argument_list|,
name|SizeInBytes
operator|.
name|valueOf
argument_list|(
name|raftSegmentPreallocatedSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// For grpc set the maximum message size
comment|// TODO: calculate the optimal max message size
name|GrpcConfigKeys
operator|.
name|setMessageSizeMax
argument_list|(
name|properties
argument_list|,
name|SizeInBytes
operator|.
name|valueOf
argument_list|(
name|logAppenderQueueByteLimit
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the server request timeout
name|TimeUnit
name|serverRequestTimeoutUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|serverRequestTimeoutDuration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_REQUEST_TIMEOUT_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|serverRequestTimeoutUnit
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|serverRequestTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|serverRequestTimeoutDuration
argument_list|,
name|serverRequestTimeoutUnit
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Rpc
operator|.
name|setRequestTimeout
argument_list|(
name|properties
argument_list|,
name|serverRequestTimeout
argument_list|)
expr_stmt|;
comment|// Set timeout for server retry cache entry
name|TimeUnit
name|retryCacheTimeoutUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_RETRY_CACHE_TIMEOUT_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|retryCacheTimeoutDuration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_RETRY_CACHE_TIMEOUT_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_RETRY_CACHE_TIMEOUT_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|retryCacheTimeoutUnit
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|retryCacheTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|retryCacheTimeoutDuration
argument_list|,
name|retryCacheTimeoutUnit
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|RetryCache
operator|.
name|setExpiryTime
argument_list|(
name|properties
argument_list|,
name|retryCacheTimeout
argument_list|)
expr_stmt|;
comment|// Set the server min and max timeout
name|TimeUnit
name|serverMinTimeoutUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_MINIMUM_TIMEOUT_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|serverMinTimeoutDuration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_MINIMUM_TIMEOUT_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_MINIMUM_TIMEOUT_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|serverMinTimeoutUnit
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|serverMinTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|serverMinTimeoutDuration
argument_list|,
name|serverMinTimeoutUnit
argument_list|)
decl_stmt|;
name|long
name|serverMaxTimeoutDuration
init|=
name|serverMinTimeout
operator|.
name|toLong
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|+
literal|200
decl_stmt|;
specifier|final
name|TimeDuration
name|serverMaxTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|serverMaxTimeoutDuration
argument_list|,
name|serverMinTimeoutUnit
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Rpc
operator|.
name|setTimeoutMin
argument_list|(
name|properties
argument_list|,
name|serverMinTimeout
argument_list|)
expr_stmt|;
name|RaftServerConfigKeys
operator|.
name|Rpc
operator|.
name|setTimeoutMax
argument_list|(
name|properties
argument_list|,
name|serverMaxTimeout
argument_list|)
expr_stmt|;
comment|// Set the number of maximum cached segments
name|RaftServerConfigKeys
operator|.
name|Log
operator|.
name|setMaxCachedSegmentNum
argument_list|(
name|properties
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Set the client request timeout
name|TimeUnit
name|clientRequestTimeoutUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DURATION_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|clientRequestTimeoutDuration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DURATION_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_CLIENT_REQUEST_TIMEOUT_DURATION_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|clientRequestTimeoutUnit
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|clientRequestTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|clientRequestTimeoutDuration
argument_list|,
name|clientRequestTimeoutUnit
argument_list|)
decl_stmt|;
name|RaftClientConfigKeys
operator|.
name|Rpc
operator|.
name|setRequestTimeout
argument_list|(
name|properties
argument_list|,
name|clientRequestTimeout
argument_list|)
expr_stmt|;
comment|// TODO: set max write buffer size
comment|// Set the ratis leader election timeout
name|TimeUnit
name|leaderElectionMinTimeoutUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_LEADER_ELECTION_MINIMUM_TIMEOUT_DURATION_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|leaderElectionMinTimeoutduration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_LEADER_ELECTION_MINIMUM_TIMEOUT_DURATION_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_LEADER_ELECTION_MINIMUM_TIMEOUT_DURATION_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|leaderElectionMinTimeoutUnit
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|leaderElectionMinTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|leaderElectionMinTimeoutduration
argument_list|,
name|leaderElectionMinTimeoutUnit
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Rpc
operator|.
name|setTimeoutMin
argument_list|(
name|properties
argument_list|,
name|leaderElectionMinTimeout
argument_list|)
expr_stmt|;
name|long
name|leaderElectionMaxTimeout
init|=
name|leaderElectionMinTimeout
operator|.
name|toLong
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|+
literal|200
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Rpc
operator|.
name|setTimeoutMax
argument_list|(
name|properties
argument_list|,
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|leaderElectionMaxTimeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|TimeUnit
name|nodeFailureTimeoutUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_FAILURE_TIMEOUT_DURATION_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|nodeFailureTimeoutDuration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_FAILURE_TIMEOUT_DURATION_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_FAILURE_TIMEOUT_DURATION_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|nodeFailureTimeoutUnit
argument_list|)
decl_stmt|;
specifier|final
name|TimeDuration
name|nodeFailureTimeout
init|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|nodeFailureTimeoutDuration
argument_list|,
name|nodeFailureTimeoutUnit
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|setLeaderElectionTimeout
argument_list|(
name|properties
argument_list|,
name|nodeFailureTimeout
argument_list|)
expr_stmt|;
name|RaftServerConfigKeys
operator|.
name|Rpc
operator|.
name|setSlownessTimeout
argument_list|(
name|properties
argument_list|,
name|nodeFailureTimeout
argument_list|)
expr_stmt|;
name|TimeUnit
name|roleCheckIntervalUnit
init|=
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_ROLE_CHECK_INTERVAL_DEFAULT
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|roleCheckIntervalDuration
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_ROLE_CHECK_INTERVAL_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SERVER_ROLE_CHECK_INTERVAL_DEFAULT
operator|.
name|getDuration
argument_list|()
argument_list|,
name|nodeFailureTimeoutUnit
argument_list|)
decl_stmt|;
name|this
operator|.
name|roleCheckIntervalMs
operator|=
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|roleCheckIntervalDuration
argument_list|,
name|roleCheckIntervalUnit
argument_list|)
operator|.
name|toLong
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|roleCheckInitialDelayMs
operator|=
name|leaderElectionMinTimeout
operator|.
name|toLong
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|long
name|snapshotAutoTriggerThreshold
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_KEY
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_RATIS_SNAPSHOT_AUTO_TRIGGER_THRESHOLD_DEFAULT
argument_list|)
decl_stmt|;
name|RaftServerConfigKeys
operator|.
name|Snapshot
operator|.
name|setAutoTriggerEnabled
argument_list|(
name|properties
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RaftServerConfigKeys
operator|.
name|Snapshot
operator|.
name|setAutoTriggerThreshold
argument_list|(
name|properties
argument_list|,
name|snapshotAutoTriggerThreshold
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
comment|/**    * Check the cached leader status.    * @return true if cached role is Leader, false otherwise.    */
DECL|method|checkCachedPeerRoleIsLeader ()
specifier|private
name|boolean
name|checkCachedPeerRoleIsLeader
parameter_list|()
block|{
name|this
operator|.
name|roleCheckLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|cachedPeerRole
operator|.
name|isPresent
argument_list|()
operator|&&
name|cachedPeerRole
operator|.
name|get
argument_list|()
operator|==
name|RaftPeerRole
operator|.
name|LEADER
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|roleCheckLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Check if the current OM node is the leader node.    * @return true if Leader, false otherwise.    */
DECL|method|isLeader ()
specifier|public
name|boolean
name|isLeader
parameter_list|()
block|{
if|if
condition|(
name|checkCachedPeerRoleIsLeader
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Get the server role from ratis server and update the cached values.
name|updateServerRole
argument_list|()
expr_stmt|;
comment|// After updating the server role, check and return if leader or not.
return|return
name|checkCachedPeerRoleIsLeader
argument_list|()
return|;
block|}
comment|/**    * Get the suggested leader peer id.    * @return RaftPeerId of the suggested leader node.    */
DECL|method|getCachedLeaderPeerId ()
specifier|public
name|Optional
argument_list|<
name|RaftPeerId
argument_list|>
name|getCachedLeaderPeerId
parameter_list|()
block|{
name|this
operator|.
name|roleCheckLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|cachedLeaderPeerId
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|roleCheckLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the gorup info (peer role and leader peer id) from Ratis server and    * update the OM server role.    */
DECL|method|updateServerRole ()
specifier|public
name|void
name|updateServerRole
parameter_list|()
block|{
try|try
block|{
name|GroupInfoReply
name|groupInfo
init|=
name|getGroupInfo
argument_list|()
decl_stmt|;
name|RoleInfoProto
name|roleInfoProto
init|=
name|groupInfo
operator|.
name|getRoleInfoProto
argument_list|()
decl_stmt|;
name|RaftPeerRole
name|thisNodeRole
init|=
name|roleInfoProto
operator|.
name|getRole
argument_list|()
decl_stmt|;
if|if
condition|(
name|thisNodeRole
operator|.
name|equals
argument_list|(
name|RaftPeerRole
operator|.
name|LEADER
argument_list|)
condition|)
block|{
name|setServerRole
argument_list|(
name|thisNodeRole
argument_list|,
name|raftPeerId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|thisNodeRole
operator|.
name|equals
argument_list|(
name|RaftPeerRole
operator|.
name|FOLLOWER
argument_list|)
condition|)
block|{
name|ByteString
name|leaderNodeId
init|=
name|roleInfoProto
operator|.
name|getFollowerInfo
argument_list|()
operator|.
name|getLeaderInfo
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|RaftPeerId
name|leaderPeerId
init|=
name|RaftPeerId
operator|.
name|valueOf
argument_list|(
name|leaderNodeId
argument_list|)
decl_stmt|;
name|setServerRole
argument_list|(
name|thisNodeRole
argument_list|,
name|leaderPeerId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setServerRole
argument_list|(
name|thisNodeRole
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to retrieve RaftPeerRole. Setting cached role to "
operator|+
literal|"{} and resetting leader info."
argument_list|,
name|RaftPeerRole
operator|.
name|UNRECOGNIZED
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setServerRole
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the current server role and the leader peer id.    */
DECL|method|setServerRole (RaftPeerRole currentRole, RaftPeerId leaderPeerId)
specifier|private
name|void
name|setServerRole
parameter_list|(
name|RaftPeerRole
name|currentRole
parameter_list|,
name|RaftPeerId
name|leaderPeerId
parameter_list|)
block|{
name|this
operator|.
name|roleCheckLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|cachedPeerRole
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|currentRole
argument_list|)
expr_stmt|;
name|this
operator|.
name|cachedLeaderPeerId
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|leaderPeerId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|roleCheckLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getGroupInfo ()
specifier|private
name|GroupInfoReply
name|getGroupInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|GroupInfoRequest
name|groupInfoRequest
init|=
operator|new
name|GroupInfoRequest
argument_list|(
name|clientId
argument_list|,
name|raftPeerId
argument_list|,
name|raftGroupId
argument_list|,
name|nextCallId
argument_list|()
argument_list|)
decl_stmt|;
name|GroupInfoReply
name|groupInfo
init|=
name|server
operator|.
name|getGroupInfo
argument_list|(
name|groupInfoRequest
argument_list|)
decl_stmt|;
return|return
name|groupInfo
return|;
block|}
DECL|method|getServerPort ()
specifier|public
name|int
name|getServerPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getServerState ()
specifier|public
name|LifeCycle
operator|.
name|State
name|getServerState
parameter_list|()
block|{
return|return
name|server
operator|.
name|getLifeCycleState
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRaftPeerId ()
specifier|public
name|RaftPeerId
name|getRaftPeerId
parameter_list|()
block|{
return|return
name|this
operator|.
name|raftPeerId
return|;
block|}
DECL|method|getRaftGroupIdFromOmServiceId (String omServiceId)
specifier|private
name|UUID
name|getRaftGroupIdFromOmServiceId
parameter_list|(
name|String
name|omServiceId
parameter_list|)
block|{
return|return
name|UUID
operator|.
name|nameUUIDFromBytes
argument_list|(
name|omServiceId
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getStateMachineLastAppliedIndex ()
specifier|public
name|long
name|getStateMachineLastAppliedIndex
parameter_list|()
block|{
return|return
name|omStateMachine
operator|.
name|getLastAppliedIndex
argument_list|()
return|;
block|}
block|}
end_class

end_unit

