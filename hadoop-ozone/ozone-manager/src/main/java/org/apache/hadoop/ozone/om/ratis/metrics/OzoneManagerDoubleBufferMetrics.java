begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.ratis.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_comment
comment|/**  * Class which maintains metrics related to OzoneManager DoubleBuffer.  */
end_comment

begin_class
DECL|class|OzoneManagerDoubleBufferMetrics
specifier|public
class|class
name|OzoneManagerDoubleBufferMetrics
block|{
DECL|field|SOURCE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SOURCE_NAME
init|=
name|OzoneManagerDoubleBufferMetrics
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
annotation|@
name|Metric
argument_list|(
name|about
operator|=
literal|"Total Number of flush operations happened in "
operator|+
literal|"OzoneManagerDoubleBuffer."
argument_list|)
DECL|field|totalNumOfFlushOperations
specifier|private
name|MutableCounterLong
name|totalNumOfFlushOperations
decl_stmt|;
annotation|@
name|Metric
argument_list|(
name|about
operator|=
literal|"Total Number of flushed transactions happened in "
operator|+
literal|"OzoneManagerDoubleBuffer."
argument_list|)
DECL|field|totalNumOfFlushedTransactions
specifier|private
name|MutableCounterLong
name|totalNumOfFlushedTransactions
decl_stmt|;
annotation|@
name|Metric
argument_list|(
name|about
operator|=
literal|"Max Number of transactions flushed in a iteration in "
operator|+
literal|"OzoneManagerDoubleBuffer. This will provide a value which is maximum "
operator|+
literal|"number of transactions flushed in a single flush iteration till now."
argument_list|)
DECL|field|maxNumberOfTransactionsFlushedInOneIteration
specifier|private
name|MutableCounterLong
name|maxNumberOfTransactionsFlushedInOneIteration
decl_stmt|;
DECL|method|create ()
specifier|public
specifier|static
name|OzoneManagerDoubleBufferMetrics
name|create
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
return|return
name|ms
operator|.
name|register
argument_list|(
name|SOURCE_NAME
argument_list|,
literal|"OzoneManager DoubleBuffer Metrics"
argument_list|,
operator|new
name|OzoneManagerDoubleBufferMetrics
argument_list|()
argument_list|)
return|;
block|}
DECL|method|incrTotalNumOfFlushOperations ()
specifier|public
name|void
name|incrTotalNumOfFlushOperations
parameter_list|()
block|{
name|this
operator|.
name|totalNumOfFlushOperations
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
DECL|method|incrTotalSizeOfFlushedTransactions ( long flushedTransactions)
specifier|public
name|void
name|incrTotalSizeOfFlushedTransactions
parameter_list|(
name|long
name|flushedTransactions
parameter_list|)
block|{
name|this
operator|.
name|totalNumOfFlushedTransactions
operator|.
name|incr
argument_list|(
name|flushedTransactions
argument_list|)
expr_stmt|;
block|}
DECL|method|setMaxNumberOfTransactionsFlushedInOneIteration ( long maxTransactions)
specifier|public
name|void
name|setMaxNumberOfTransactionsFlushedInOneIteration
parameter_list|(
name|long
name|maxTransactions
parameter_list|)
block|{
comment|// We should set the value with maxTransactions, so decrement old value
comment|// first and then add the new value.
name|this
operator|.
name|maxNumberOfTransactionsFlushedInOneIteration
operator|.
name|incr
argument_list|(
name|Math
operator|.
name|negateExact
argument_list|(
name|getMaxNumberOfTransactionsFlushedInOneIteration
argument_list|()
argument_list|)
operator|+
name|maxTransactions
argument_list|)
expr_stmt|;
block|}
DECL|method|getTotalNumOfFlushOperations ()
specifier|public
name|long
name|getTotalNumOfFlushOperations
parameter_list|()
block|{
return|return
name|totalNumOfFlushOperations
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getTotalNumOfFlushedTransactions ()
specifier|public
name|long
name|getTotalNumOfFlushedTransactions
parameter_list|()
block|{
return|return
name|totalNumOfFlushedTransactions
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|getMaxNumberOfTransactionsFlushedInOneIteration ()
specifier|public
name|long
name|getMaxNumberOfTransactionsFlushedInOneIteration
parameter_list|()
block|{
return|return
name|maxNumberOfTransactionsFlushedInOneIteration
operator|.
name|value
argument_list|()
return|;
block|}
DECL|method|unRegister ()
specifier|public
name|void
name|unRegister
parameter_list|()
block|{
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
name|ms
operator|.
name|unregisterSource
argument_list|(
name|SOURCE_NAME
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

