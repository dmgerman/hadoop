begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|client
operator|.
name|BlockID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationFactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|AllocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|exceptions
operator|.
name|SCMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|protocol
operator|.
name|ScmBlockLocationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|common
operator|.
name|BlockGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfoGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OpenKeySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|KeyLocationList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|BackgroundService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|RocksDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|WriteBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_ENABLED_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|DFS_CONTAINER_RATIS_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_BLOCK_DELETING_SERVICE_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_KEY_PREALLOCATION_MAXSIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_KEY_PREALLOCATION_MAXSIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_BLOCK_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SCM_BLOCK_SIZE_IN_MB
import|;
end_import

begin_comment
comment|/**  * Implementation of keyManager.  */
end_comment

begin_class
DECL|class|KeyManagerImpl
specifier|public
class|class
name|KeyManagerImpl
implements|implements
name|KeyManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeyManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * A SCM block client, used to talk to SCM to allocate block during putKey.    */
DECL|field|scmBlockClient
specifier|private
specifier|final
name|ScmBlockLocationProtocol
name|scmBlockClient
decl_stmt|;
DECL|field|metadataManager
specifier|private
specifier|final
name|OMMetadataManager
name|metadataManager
decl_stmt|;
DECL|field|scmBlockSize
specifier|private
specifier|final
name|long
name|scmBlockSize
decl_stmt|;
DECL|field|useRatis
specifier|private
specifier|final
name|boolean
name|useRatis
decl_stmt|;
DECL|field|preallocateMax
specifier|private
specifier|final
name|long
name|preallocateMax
decl_stmt|;
DECL|field|omId
specifier|private
specifier|final
name|String
name|omId
decl_stmt|;
DECL|field|keyDeletingService
specifier|private
specifier|final
name|BackgroundService
name|keyDeletingService
decl_stmt|;
DECL|method|KeyManagerImpl (ScmBlockLocationProtocol scmBlockClient, OMMetadataManager metadataManager, OzoneConfiguration conf, String omId)
specifier|public
name|KeyManagerImpl
parameter_list|(
name|ScmBlockLocationProtocol
name|scmBlockClient
parameter_list|,
name|OMMetadataManager
name|metadataManager
parameter_list|,
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|omId
parameter_list|)
block|{
name|this
operator|.
name|scmBlockClient
operator|=
name|scmBlockClient
expr_stmt|;
name|this
operator|.
name|metadataManager
operator|=
name|metadataManager
expr_stmt|;
name|this
operator|.
name|scmBlockSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|OZONE_SCM_BLOCK_SIZE_IN_MB
argument_list|,
name|OZONE_SCM_BLOCK_SIZE_DEFAULT
argument_list|)
operator|*
name|OzoneConsts
operator|.
name|MB
expr_stmt|;
name|this
operator|.
name|useRatis
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CONTAINER_RATIS_ENABLED_KEY
argument_list|,
name|DFS_CONTAINER_RATIS_ENABLED_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|preallocateMax
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|OZONE_KEY_PREALLOCATION_MAXSIZE
argument_list|,
name|OZONE_KEY_PREALLOCATION_MAXSIZE_DEFAULT
argument_list|)
expr_stmt|;
name|long
name|blockDeleteInterval
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL
argument_list|,
name|OZONE_BLOCK_DELETING_SERVICE_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|long
name|serviceTimeout
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|OZONE_BLOCK_DELETING_SERVICE_TIMEOUT
argument_list|,
name|OZONE_BLOCK_DELETING_SERVICE_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|keyDeletingService
operator|=
operator|new
name|KeyDeletingService
argument_list|(
name|scmBlockClient
argument_list|,
name|this
argument_list|,
name|blockDeleteInterval
argument_list|,
name|serviceTimeout
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|omId
operator|=
name|omId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|keyDeletingService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|keyDeletingService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|validateBucket (String volumeName, String bucketName)
specifier|private
name|void
name|validateBucket
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|volumeKey
init|=
name|metadataManager
operator|.
name|getVolumeKey
argument_list|(
name|volumeName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bucketKey
init|=
name|metadataManager
operator|.
name|getBucketKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
decl_stmt|;
comment|//Check if the volume exists
if|if
condition|(
name|metadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|get
argument_list|(
name|volumeKey
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"volume not found: {}"
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Volume not found"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_VOLUME_NOT_FOUND
argument_list|)
throw|;
block|}
comment|//Check if bucket already exists
if|if
condition|(
name|metadataManager
operator|.
name|getBucketTable
argument_list|()
operator|.
name|get
argument_list|(
name|bucketKey
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"bucket not found: {}/{} "
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Bucket not found"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_BUCKET_NOT_FOUND
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|allocateBlock (OmKeyArgs args, long clientID)
specifier|public
name|OmKeyLocationInfo
name|allocateBlock
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|long
name|clientID
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|args
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|args
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|args
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|validateBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|byte
index|[]
name|openKey
init|=
name|metadataManager
operator|.
name|getOpenKeyBytes
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|clientID
argument_list|)
decl_stmt|;
name|byte
index|[]
name|keyData
init|=
name|metadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|openKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyData
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Allocate block for a key not in open status in meta store"
operator|+
literal|" /{}/{}/{} with ID {}"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|clientID
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Open Key not found"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_NOT_FOUND
argument_list|)
throw|;
block|}
name|OmKeyInfo
name|keyInfo
init|=
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|KeyInfo
operator|.
name|parseFrom
argument_list|(
name|keyData
argument_list|)
argument_list|)
decl_stmt|;
name|AllocatedBlock
name|allocatedBlock
decl_stmt|;
try|try
block|{
name|allocatedBlock
operator|=
name|scmBlockClient
operator|.
name|allocateBlock
argument_list|(
name|scmBlockSize
argument_list|,
name|keyInfo
operator|.
name|getType
argument_list|()
argument_list|,
name|keyInfo
operator|.
name|getFactor
argument_list|()
argument_list|,
name|omId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SCMException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getResult
argument_list|()
operator|.
name|equals
argument_list|(
name|SCMException
operator|.
name|ResultCodes
operator|.
name|CHILL_MODE_EXCEPTION
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ResultCodes
operator|.
name|SCM_IN_CHILL_MODE
argument_list|)
throw|;
block|}
throw|throw
name|ex
throw|;
block|}
name|OmKeyLocationInfo
name|info
init|=
operator|new
name|OmKeyLocationInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setBlockID
argument_list|(
operator|new
name|BlockID
argument_list|(
name|allocatedBlock
operator|.
name|getBlockID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setShouldCreateContainer
argument_list|(
name|allocatedBlock
operator|.
name|getCreateContainer
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|scmBlockSize
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// current version not committed, so new blocks coming now are added to
comment|// the same version
name|keyInfo
operator|.
name|appendNewBlocks
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|keyInfo
operator|.
name|updateModifcationTime
argument_list|()
expr_stmt|;
name|metadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|put
argument_list|(
name|openKey
argument_list|,
name|keyInfo
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
annotation|@
name|Override
DECL|method|openKey (OmKeyArgs args)
specifier|public
name|OpenKeySession
name|openKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|args
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|args
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|validateBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireBucketLock
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|String
name|keyName
init|=
name|args
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|ReplicationFactor
name|factor
init|=
name|args
operator|.
name|getFactor
argument_list|()
decl_stmt|;
name|ReplicationType
name|type
init|=
name|args
operator|.
name|getType
argument_list|()
decl_stmt|;
name|long
name|currentTime
init|=
name|Time
operator|.
name|monotonicNowNanos
argument_list|()
decl_stmt|;
comment|// If user does not specify a replication strategy or
comment|// replication factor, OM will use defaults.
if|if
condition|(
name|factor
operator|==
literal|null
condition|)
block|{
name|factor
operator|=
name|useRatis
condition|?
name|ReplicationFactor
operator|.
name|THREE
else|:
name|ReplicationFactor
operator|.
name|ONE
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|useRatis
condition|?
name|ReplicationType
operator|.
name|RATIS
else|:
name|ReplicationType
operator|.
name|STAND_ALONE
expr_stmt|;
block|}
try|try
block|{
name|long
name|requestedSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|preallocateMax
argument_list|,
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|objectKey
init|=
name|metadataManager
operator|.
name|getOzoneKeyBytes
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
comment|// requested size is not required but more like a optimization:
comment|// SCM looks at the requested, if it 0, no block will be allocated at
comment|// the point, if client needs more blocks, client can always call
comment|// allocateBlock. But if requested size is not 0, OM will preallocate
comment|// some blocks and piggyback to client, to save RPC calls.
while|while
condition|(
name|requestedSize
operator|>
literal|0
condition|)
block|{
name|long
name|allocateSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|scmBlockSize
argument_list|,
name|requestedSize
argument_list|)
decl_stmt|;
name|AllocatedBlock
name|allocatedBlock
decl_stmt|;
try|try
block|{
name|allocatedBlock
operator|=
name|scmBlockClient
operator|.
name|allocateBlock
argument_list|(
name|allocateSize
argument_list|,
name|type
argument_list|,
name|factor
argument_list|,
name|omId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|SCMException
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|SCMException
operator|)
name|ex
operator|)
operator|.
name|getResult
argument_list|()
operator|.
name|equals
argument_list|(
name|SCMException
operator|.
name|ResultCodes
operator|.
name|CHILL_MODE_EXCEPTION
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ResultCodes
operator|.
name|SCM_IN_CHILL_MODE
argument_list|)
throw|;
block|}
block|}
throw|throw
name|ex
throw|;
block|}
name|OmKeyLocationInfo
name|subKeyInfo
init|=
operator|new
name|OmKeyLocationInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setBlockID
argument_list|(
operator|new
name|BlockID
argument_list|(
name|allocatedBlock
operator|.
name|getBlockID
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setShouldCreateContainer
argument_list|(
name|allocatedBlock
operator|.
name|getCreateContainer
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|allocateSize
argument_list|)
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|subKeyInfo
argument_list|)
expr_stmt|;
name|requestedSize
operator|-=
name|allocateSize
expr_stmt|;
block|}
comment|// NOTE size of a key is not a hard limit on anything, it is a value that
comment|// client should expect, in terms of current size of key. If client sets a
comment|// value, then this value is used, otherwise, we allocate a single block
comment|// which is the current size, if read by the client.
name|long
name|size
init|=
name|args
operator|.
name|getDataSize
argument_list|()
operator|>=
literal|0
condition|?
name|args
operator|.
name|getDataSize
argument_list|()
else|:
name|scmBlockSize
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|objectKey
argument_list|)
decl_stmt|;
name|OmKeyInfo
name|keyInfo
decl_stmt|;
name|long
name|openVersion
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// the key already exist, the new blocks will be added as new version
name|keyInfo
operator|=
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|KeyInfo
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// when locations.size = 0, the new version will have identical blocks
comment|// as its previous version
name|openVersion
operator|=
name|keyInfo
operator|.
name|addNewVersion
argument_list|(
name|locations
argument_list|)
expr_stmt|;
name|keyInfo
operator|.
name|setDataSize
argument_list|(
name|size
operator|+
name|keyInfo
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the key does not exist, create a new object, the new blocks are the
comment|// version 0
name|keyInfo
operator|=
operator|new
name|OmKeyInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setOmKeyLocationInfos
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|OmKeyLocationInfoGroup
argument_list|(
literal|0
argument_list|,
name|locations
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setCreationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|setModificationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|size
argument_list|)
operator|.
name|setReplicationType
argument_list|(
name|type
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
name|factor
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|openVersion
operator|=
literal|0
expr_stmt|;
block|}
name|byte
index|[]
name|openKey
init|=
name|metadataManager
operator|.
name|getOpenKeyBytes
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|currentTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|openKey
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// This should not happen. If this condition is satisfied, it means
comment|// that we have generated a same openKeyId (i.e. currentTime) for two
comment|// different client who are trying to write the same key at the same
comment|// time. The chance of this happening is very, very minimal.
comment|// Do we really need this check? Can we avoid this to gain some
comment|// minor performance improvement?
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot allocate key. The generated open key id is already"
operator|+
literal|"used for the same key which is currently being written."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Cannot allocate key. Not able to get a valid"
operator|+
literal|"open key id."
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_ALLOCATION
argument_list|)
throw|;
block|}
name|metadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|put
argument_list|(
name|openKey
argument_list|,
name|keyInfo
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key {} allocated in volume {} bucket {}"
argument_list|,
name|keyName
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
return|return
operator|new
name|OpenKeySession
argument_list|(
name|currentTime
argument_list|,
name|keyInfo
argument_list|,
name|openVersion
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OMException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Key open failed for volume:{} bucket:{} key:{}"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_ALLOCATION
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseBucketLock
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|commitKey (OmKeyArgs args, long clientID)
specifier|public
name|void
name|commitKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|long
name|clientID
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|args
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|args
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|args
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireBucketLock
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
try|try
block|{
name|validateBucket
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|byte
index|[]
name|openKey
init|=
name|metadataManager
operator|.
name|getOpenKeyBytes
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|clientID
argument_list|)
decl_stmt|;
name|byte
index|[]
name|objectKey
init|=
name|metadataManager
operator|.
name|getOzoneKeyBytes
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|openKeyData
init|=
name|metadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|openKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|openKeyData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Commit a key without corresponding entry "
operator|+
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|objectKey
argument_list|)
argument_list|,
name|ResultCodes
operator|.
name|FAILED_KEY_NOT_FOUND
argument_list|)
throw|;
block|}
name|OmKeyInfo
name|keyInfo
init|=
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|KeyInfo
operator|.
name|parseFrom
argument_list|(
name|openKeyData
argument_list|)
argument_list|)
decl_stmt|;
name|keyInfo
operator|.
name|setDataSize
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|keyInfo
operator|.
name|setModificationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locationInfoList
init|=
name|args
operator|.
name|getLocationInfoList
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|locationInfoList
argument_list|)
expr_stmt|;
comment|//update the block length for each block
name|keyInfo
operator|.
name|updateLocationInfoList
argument_list|(
name|locationInfoList
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|move
argument_list|(
name|openKey
argument_list|,
name|objectKey
argument_list|,
name|keyInfo
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|metadataManager
operator|.
name|getOpenKeyTable
argument_list|()
argument_list|,
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Key commit failed for volume:{} bucket:{} key:{}"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_ALLOCATION
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseBucketLock
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|lookupKey (OmKeyArgs args)
specifier|public
name|OmKeyInfo
name|lookupKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|args
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|args
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|args
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireBucketLock
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|keyBytes
init|=
name|metadataManager
operator|.
name|getOzoneKeyBytes
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|keyBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"volume:{} bucket:{} Key:{} not found"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Key not found"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_NOT_FOUND
argument_list|)
throw|;
block|}
return|return
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|KeyInfo
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get key failed for volume:{} bucket:{} key:{}"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_NOT_FOUND
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseBucketLock
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|renameKey (OmKeyArgs args, String toKeyName)
specifier|public
name|void
name|renameKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|String
name|toKeyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|toKeyName
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|args
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|args
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|fromKeyName
init|=
name|args
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
if|if
condition|(
name|toKeyName
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|fromKeyName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Rename key failed for volume:{} bucket:{} fromKey:{} toKey:{}"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|fromKeyName
argument_list|,
name|toKeyName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Key name is empty"
argument_list|,
name|ResultCodes
operator|.
name|FAILED_INVALID_KEY_NAME
argument_list|)
throw|;
block|}
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireBucketLock
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
try|try
block|{
comment|// fromKeyName should exist
name|byte
index|[]
name|fromKey
init|=
name|metadataManager
operator|.
name|getOzoneKeyBytes
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|fromKeyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fromKeyValue
init|=
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|fromKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromKeyValue
operator|==
literal|null
condition|)
block|{
comment|// TODO: Add support for renaming open key
name|LOG
operator|.
name|error
argument_list|(
literal|"Rename key failed for volume:{} bucket:{} fromKey:{} toKey:{}. "
operator|+
literal|"Key: {} not found."
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|fromKeyName
argument_list|,
name|toKeyName
argument_list|,
name|fromKeyName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Key not found"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_NOT_FOUND
argument_list|)
throw|;
block|}
comment|// A rename is a no-op if the target and source name is same.
comment|// TODO: Discuss if we need to throw?.
if|if
condition|(
name|fromKeyName
operator|.
name|equals
argument_list|(
name|toKeyName
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// toKeyName should not exist
name|byte
index|[]
name|toKey
init|=
name|metadataManager
operator|.
name|getOzoneKeyBytes
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|toKeyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|toKeyValue
init|=
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|toKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|toKeyValue
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Rename key failed for volume:{} bucket:{} fromKey:{} toKey:{}. "
operator|+
literal|"Key: {} already exists."
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|fromKeyName
argument_list|,
name|toKeyName
argument_list|,
name|toKeyName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Key not found"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_ALREADY_EXISTS
argument_list|)
throw|;
block|}
name|OmKeyInfo
name|newKeyInfo
init|=
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|KeyInfo
operator|.
name|parseFrom
argument_list|(
name|fromKeyValue
argument_list|)
argument_list|)
decl_stmt|;
name|newKeyInfo
operator|.
name|setKeyName
argument_list|(
name|toKeyName
argument_list|)
expr_stmt|;
name|newKeyInfo
operator|.
name|updateModifcationTime
argument_list|()
expr_stmt|;
try|try
init|(
name|WriteBatch
name|batch
init|=
operator|new
name|WriteBatch
argument_list|()
init|)
block|{
name|batch
operator|.
name|delete
argument_list|(
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|getHandle
argument_list|()
argument_list|,
name|fromKey
argument_list|)
expr_stmt|;
name|batch
operator|.
name|put
argument_list|(
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|getHandle
argument_list|()
argument_list|,
name|toKey
argument_list|,
name|newKeyInfo
operator|.
name|getProtobuf
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|write
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RocksDBException
decl||
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Rename key failed for volume:{} bucket:{} fromKey:{} toKey:{}"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|fromKeyName
argument_list|,
name|toKeyName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ResultCodes
operator|.
name|FAILED_KEY_RENAME
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseBucketLock
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteKey (OmKeyArgs args)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|String
name|volumeName
init|=
name|args
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|args
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|args
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireBucketLock
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|objectKey
init|=
name|metadataManager
operator|.
name|getOzoneKeyBytes
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|objectValue
init|=
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|objectKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Key not found"
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|FAILED_KEY_NOT_FOUND
argument_list|)
throw|;
block|}
else|else
block|{
comment|// directly delete key with no blocks from db. This key need not be
comment|// moved to deleted table.
name|KeyInfo
name|keyInfo
init|=
name|KeyInfo
operator|.
name|parseFrom
argument_list|(
name|objectValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|isKeyEmpty
argument_list|(
name|keyInfo
argument_list|)
condition|)
block|{
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|delete
argument_list|(
name|objectKey
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Key {} deleted from OM DB"
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|metadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|move
argument_list|(
name|objectKey
argument_list|,
name|metadataManager
operator|.
name|getKeyTable
argument_list|()
argument_list|,
name|metadataManager
operator|.
name|getDeletedTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OMException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Delete key failed for volume:%s "
operator|+
literal|"bucket:%s key:%s"
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|,
name|ResultCodes
operator|.
name|FAILED_KEY_DELETION
argument_list|)
throw|;
block|}
finally|finally
block|{
name|metadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseBucketLock
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isKeyEmpty (KeyInfo keyInfo)
specifier|private
name|boolean
name|isKeyEmpty
parameter_list|(
name|KeyInfo
name|keyInfo
parameter_list|)
block|{
for|for
control|(
name|KeyLocationList
name|keyLocationList
range|:
name|keyInfo
operator|.
name|getKeyLocationListList
argument_list|()
control|)
block|{
if|if
condition|(
name|keyLocationList
operator|.
name|getKeyLocationsCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|listKeys (String volumeName, String bucketName, String startKey, String keyPrefix, int maxKeys)
specifier|public
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|listKeys
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|keyPrefix
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
comment|// We don't take a lock in this path, since we walk the
comment|// underlying table using an iterator. That automatically creates a
comment|// snapshot of the data, so we don't need these locks at a higher level
comment|// when we iterate.
return|return
name|metadataManager
operator|.
name|listKeys
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|startKey
argument_list|,
name|keyPrefix
argument_list|,
name|maxKeys
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPendingDeletionKeys (final int count)
specifier|public
name|List
argument_list|<
name|BlockGroup
argument_list|>
name|getPendingDeletionKeys
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|metadataManager
operator|.
name|getPendingDeletionKeys
argument_list|(
name|count
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getExpiredOpenKeys ()
specifier|public
name|List
argument_list|<
name|BlockGroup
argument_list|>
name|getExpiredOpenKeys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|metadataManager
operator|.
name|getExpiredOpenKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|deleteExpiredOpenKey (String objectKeyName)
specifier|public
name|void
name|deleteExpiredOpenKey
parameter_list|(
name|String
name|objectKeyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|objectKeyName
argument_list|)
expr_stmt|;
comment|// TODO: Fix this in later patches.
block|}
annotation|@
name|Override
DECL|method|getMetadataManager ()
specifier|public
name|OMMetadataManager
name|getMetadataManager
parameter_list|()
block|{
return|return
name|metadataManager
return|;
block|}
annotation|@
name|Override
DECL|method|getDeletingService ()
specifier|public
name|BackgroundService
name|getDeletingService
parameter_list|()
block|{
return|return
name|keyDeletingService
return|;
block|}
block|}
end_class

end_unit

