begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.request.s3.multipart
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|s3
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|audit
operator|.
name|OMAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OzoneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfoGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OzoneAclUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ratis
operator|.
name|utils
operator|.
name|OzoneManagerDoubleBufferHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|request
operator|.
name|key
operator|.
name|OMKeyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|OMClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|response
operator|.
name|s3
operator|.
name|multipart
operator|.
name|S3MultipartUploadCompleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|KeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartUploadCompleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartUploadCompleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|PartKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|cache
operator|.
name|CacheValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OM_MULTIPART_MIN_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
operator|.
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|BUCKET_LOCK
import|;
end_import

begin_comment
comment|/**  * Handle Multipart upload complete request.  */
end_comment

begin_class
DECL|class|S3MultipartUploadCompleteRequest
specifier|public
class|class
name|S3MultipartUploadCompleteRequest
extends|extends
name|OMKeyRequest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3MultipartUploadCompleteRequest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|S3MultipartUploadCompleteRequest (OMRequest omRequest)
specifier|public
name|S3MultipartUploadCompleteRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|)
block|{
name|super
argument_list|(
name|omRequest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preExecute (OzoneManager ozoneManager)
specifier|public
name|OMRequest
name|preExecute
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|)
throws|throws
name|IOException
block|{
name|MultipartUploadCompleteRequest
name|multipartUploadCompleteRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getCompleteMultiPartUploadRequest
argument_list|()
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|multipartUploadCompleteRequest
operator|.
name|getKeyArgs
argument_list|()
decl_stmt|;
return|return
name|getOmRequest
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setCompleteMultiPartUploadRequest
argument_list|(
name|multipartUploadCompleteRequest
operator|.
name|toBuilder
argument_list|()
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
operator|.
name|toBuilder
argument_list|()
operator|.
name|setModificationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setUserInfo
argument_list|(
name|getUserInfo
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"methodlength"
argument_list|)
DECL|method|validateAndUpdateCache (OzoneManager ozoneManager, long transactionLogIndex, OzoneManagerDoubleBufferHelper ozoneManagerDoubleBufferHelper)
specifier|public
name|OMClientResponse
name|validateAndUpdateCache
parameter_list|(
name|OzoneManager
name|ozoneManager
parameter_list|,
name|long
name|transactionLogIndex
parameter_list|,
name|OzoneManagerDoubleBufferHelper
name|ozoneManagerDoubleBufferHelper
parameter_list|)
block|{
name|MultipartUploadCompleteRequest
name|multipartUploadCompleteRequest
init|=
name|getOmRequest
argument_list|()
operator|.
name|getCompleteMultiPartUploadRequest
argument_list|()
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|multipartUploadCompleteRequest
operator|.
name|getKeyArgs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OzoneManagerProtocolProtos
operator|.
name|Part
argument_list|>
name|partsList
init|=
name|multipartUploadCompleteRequest
operator|.
name|getPartsListList
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|keyArgs
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|String
name|bucketName
init|=
name|keyArgs
operator|.
name|getBucketName
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
name|keyArgs
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|String
name|uploadID
init|=
name|keyArgs
operator|.
name|getMultipartUploadID
argument_list|()
decl_stmt|;
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
operator|.
name|incNumCompleteMultipartUploads
argument_list|()
expr_stmt|;
name|OMMetadataManager
name|omMetadataManager
init|=
name|ozoneManager
operator|.
name|getMetadataManager
argument_list|()
decl_stmt|;
name|boolean
name|acquiredLock
init|=
literal|false
decl_stmt|;
name|OMResponse
operator|.
name|Builder
name|omResponse
init|=
name|OMResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Type
operator|.
name|CommitMultiPartUpload
argument_list|)
operator|.
name|setStatus
argument_list|(
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|OK
argument_list|)
operator|.
name|setSuccess
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|OMClientResponse
name|omClientResponse
init|=
literal|null
decl_stmt|;
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
name|OmMultipartUploadList
name|multipartUploadList
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// TODO to support S3 ACL later.
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|partsMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OzoneManagerProtocolProtos
operator|.
name|Part
name|part
range|:
name|partsList
control|)
block|{
name|partsMap
operator|.
name|put
argument_list|(
name|part
operator|.
name|getPartNumber
argument_list|()
argument_list|,
name|part
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|multipartUploadList
operator|=
operator|new
name|OmMultipartUploadList
argument_list|(
name|partsMap
argument_list|)
expr_stmt|;
name|acquiredLock
operator|=
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|validateBucketAndVolume
argument_list|(
name|omMetadataManager
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
name|String
name|multipartKey
init|=
name|omMetadataManager
operator|.
name|getMultipartKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|uploadID
argument_list|)
decl_stmt|;
name|String
name|ozoneKey
init|=
name|omMetadataManager
operator|.
name|getOzoneKey
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|)
decl_stmt|;
name|OmKeyInfo
name|omKeyInfo
init|=
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|ozoneKey
argument_list|)
decl_stmt|;
name|OmMultipartKeyInfo
name|multipartKeyInfo
init|=
name|omMetadataManager
operator|.
name|getMultipartInfoTable
argument_list|()
operator|.
name|get
argument_list|(
name|multipartKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|multipartKeyInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Complete Multipart Upload Failed: volume: "
operator|+
name|volumeName
operator|+
literal|"bucket: "
operator|+
name|bucketName
operator|+
literal|"key: "
operator|+
name|keyName
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|NO_SUCH_MULTIPART_UPLOAD_ERROR
argument_list|)
throw|;
block|}
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|PartKeyInfo
argument_list|>
name|partKeyInfoMap
init|=
name|multipartKeyInfo
operator|.
name|getPartKeyInfoMap
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|multipartMap
init|=
name|multipartUploadList
operator|.
name|getMultipartMap
argument_list|()
decl_stmt|;
comment|// Last key in the map should be having key value as size, as map's
comment|// are sorted. Last entry in both maps should have partNumber as size
comment|// of the map. As we have part entries 1, 2, 3, 4 and then we get
comment|// complete multipart upload request so the map last entry should have 4,
comment|// if it is having value greater or less than map size, then there is
comment|// some thing wrong throw error.
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|multipartMapLastEntry
init|=
name|multipartMap
operator|.
name|lastEntry
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|PartKeyInfo
argument_list|>
name|partKeyInfoLastEntry
init|=
name|partKeyInfoMap
operator|.
name|lastEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|partKeyInfoMap
operator|.
name|size
argument_list|()
operator|!=
name|multipartMap
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Complete Multipart Upload Failed: volume: "
operator|+
name|volumeName
operator|+
literal|"bucket: "
operator|+
name|bucketName
operator|+
literal|"key: "
operator|+
name|keyName
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|MISMATCH_MULTIPART_LIST
argument_list|)
throw|;
block|}
comment|// Last entry part Number should be the size of the map, otherwise this
comment|// means we have missing some parts but we got a complete request.
if|if
condition|(
name|multipartMapLastEntry
operator|.
name|getKey
argument_list|()
operator|!=
name|partKeyInfoMap
operator|.
name|size
argument_list|()
operator|||
name|partKeyInfoLastEntry
operator|.
name|getKey
argument_list|()
operator|!=
name|partKeyInfoMap
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Complete Multipart Upload Failed: volume: "
operator|+
name|volumeName
operator|+
literal|"bucket: "
operator|+
name|bucketName
operator|+
literal|"key: "
operator|+
name|keyName
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|MISSING_UPLOAD_PARTS
argument_list|)
throw|;
block|}
name|HddsProtos
operator|.
name|ReplicationType
name|type
init|=
name|partKeyInfoLastEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getPartKeyInfo
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
name|HddsProtos
operator|.
name|ReplicationFactor
name|factor
init|=
name|partKeyInfoLastEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getPartKeyInfo
argument_list|()
operator|.
name|getFactor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
name|int
name|partsCount
init|=
literal|1
decl_stmt|;
name|int
name|partsMapSize
init|=
name|partKeyInfoMap
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|PartKeyInfo
argument_list|>
name|partKeyInfoEntry
range|:
name|partKeyInfoMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|partNumber
init|=
name|partKeyInfoEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PartKeyInfo
name|partKeyInfo
init|=
name|partKeyInfoEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Check we have all parts to complete multipart upload and also
comment|// check partNames provided match with actual part names
name|String
name|providedPartName
init|=
name|multipartMap
operator|.
name|get
argument_list|(
name|partNumber
argument_list|)
decl_stmt|;
name|String
name|actualPartName
init|=
name|partKeyInfo
operator|.
name|getPartName
argument_list|()
decl_stmt|;
if|if
condition|(
name|partNumber
operator|==
name|partsCount
condition|)
block|{
if|if
condition|(
operator|!
name|actualPartName
operator|.
name|equals
argument_list|(
name|providedPartName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Complete Multipart Upload Failed: volume: "
operator|+
name|volumeName
operator|+
literal|"bucket: "
operator|+
name|bucketName
operator|+
literal|"key: "
operator|+
name|keyName
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|MISMATCH_MULTIPART_LIST
argument_list|)
throw|;
block|}
name|OmKeyInfo
name|currentPartKeyInfo
init|=
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|partKeyInfo
operator|.
name|getPartKeyInfo
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if any part size is less than 5mb, last part can be less
comment|// than 5 mb.
if|if
condition|(
name|partsCount
operator|!=
name|partsMapSize
operator|&&
name|currentPartKeyInfo
operator|.
name|getDataSize
argument_list|()
operator|<
name|OM_MULTIPART_MIN_SIZE
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MultipartUpload: "
operator|+
name|ozoneKey
operator|+
literal|"Part number: "
operator|+
name|partKeyInfo
operator|.
name|getPartNumber
argument_list|()
operator|+
literal|"size "
operator|+
name|currentPartKeyInfo
operator|.
name|getDataSize
argument_list|()
operator|+
literal|" is less than minimum part size "
operator|+
name|OzoneConsts
operator|.
name|OM_MULTIPART_MIN_SIZE
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Complete Multipart Upload Failed: Entity "
operator|+
literal|"too small: volume: "
operator|+
name|volumeName
operator|+
literal|"bucket: "
operator|+
name|bucketName
operator|+
literal|"key: "
operator|+
name|keyName
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|ENTITY_TOO_SMALL
argument_list|)
throw|;
block|}
comment|// As all part keys will have only one version.
name|OmKeyLocationInfoGroup
name|currentKeyInfoGroup
init|=
name|currentPartKeyInfo
operator|.
name|getKeyLocationVersions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|locations
operator|.
name|addAll
argument_list|(
name|currentKeyInfoGroup
operator|.
name|getLocationList
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|+=
name|currentPartKeyInfo
operator|.
name|getDataSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Complete Multipart Upload Failed: volume: "
operator|+
name|volumeName
operator|+
literal|"bucket: "
operator|+
name|bucketName
operator|+
literal|"key: "
operator|+
name|keyName
argument_list|,
name|OMException
operator|.
name|ResultCodes
operator|.
name|MISSING_UPLOAD_PARTS
argument_list|)
throw|;
block|}
name|partsCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|omKeyInfo
operator|==
literal|null
condition|)
block|{
comment|// This is a newly added key, it does not have any versions.
name|OmKeyLocationInfoGroup
name|keyLocationInfoGroup
init|=
operator|new
name|OmKeyLocationInfoGroup
argument_list|(
literal|0
argument_list|,
name|locations
argument_list|)
decl_stmt|;
comment|// A newly created key, this is the first version.
name|omKeyInfo
operator|=
operator|new
name|OmKeyInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
name|factor
argument_list|)
operator|.
name|setReplicationType
argument_list|(
name|type
argument_list|)
operator|.
name|setCreationTime
argument_list|(
name|keyArgs
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|setModificationTime
argument_list|(
name|keyArgs
operator|.
name|getModificationTime
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|size
argument_list|)
operator|.
name|setOmKeyLocationInfos
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|keyLocationInfoGroup
argument_list|)
argument_list|)
operator|.
name|setAcls
argument_list|(
name|OzoneAclUtil
operator|.
name|fromProtobuf
argument_list|(
name|keyArgs
operator|.
name|getAclsList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Already a version exists, so we should add it as a new version.
comment|// But now as versioning is not supported, just following the commit
comment|// key approach. When versioning support comes, then we can uncomment
comment|// below code keyInfo.addNewVersion(locations);
name|omKeyInfo
operator|.
name|updateLocationInfoList
argument_list|(
name|locations
argument_list|)
expr_stmt|;
name|omKeyInfo
operator|.
name|setModificationTime
argument_list|(
name|keyArgs
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateCache
argument_list|(
name|omMetadataManager
argument_list|,
name|ozoneKey
argument_list|,
name|multipartKey
argument_list|,
name|omKeyInfo
argument_list|,
name|transactionLogIndex
argument_list|)
expr_stmt|;
name|omResponse
operator|.
name|setCompleteMultiPartUploadResponse
argument_list|(
name|MultipartUploadCompleteResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucket
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyName
argument_list|)
operator|.
name|setHash
argument_list|(
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|keyName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|omClientResponse
operator|=
operator|new
name|S3MultipartUploadCompleteResponse
argument_list|(
name|multipartKey
argument_list|,
name|omKeyInfo
argument_list|,
name|omResponse
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
name|omClientResponse
operator|=
operator|new
name|S3MultipartUploadCompleteResponse
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|createErrorOMResponse
argument_list|(
name|omResponse
argument_list|,
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|omClientResponse
operator|!=
literal|null
condition|)
block|{
name|omClientResponse
operator|.
name|setFlushFuture
argument_list|(
name|ozoneManagerDoubleBufferHelper
operator|.
name|add
argument_list|(
name|omClientResponse
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acquiredLock
condition|)
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseLock
argument_list|(
name|BUCKET_LOCK
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|auditMap
init|=
name|buildKeyArgsAuditMap
argument_list|(
name|keyArgs
argument_list|)
decl_stmt|;
if|if
condition|(
name|multipartUploadList
operator|!=
literal|null
condition|)
block|{
name|auditMap
operator|.
name|put
argument_list|(
name|OzoneConsts
operator|.
name|MULTIPART_LIST
argument_list|,
name|multipartUploadList
operator|.
name|getMultipartMap
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// audit log
name|auditLog
argument_list|(
name|ozoneManager
operator|.
name|getAuditLogger
argument_list|()
argument_list|,
name|buildAuditMessage
argument_list|(
name|OMAction
operator|.
name|COMPLETE_MULTIPART_UPLOAD
argument_list|,
name|auditMap
argument_list|,
name|exception
argument_list|,
name|getOmRequest
argument_list|()
operator|.
name|getUserInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MultipartUpload Complete request is successfull for Key: {} "
operator|+
literal|"in Volume/Bucket {}/{}"
argument_list|,
name|keyName
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MultipartUpload Complete request failed for Key: {} "
operator|+
literal|"in Volume/Bucket {}/{}"
argument_list|,
name|keyName
argument_list|,
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|ozoneManager
operator|.
name|getMetrics
argument_list|()
operator|.
name|incNumCompleteMultipartUploadFails
argument_list|()
expr_stmt|;
block|}
return|return
name|omClientResponse
return|;
block|}
DECL|method|updateCache (OMMetadataManager omMetadataManager, String ozoneKey, String multipartKey, OmKeyInfo omKeyInfo, long transactionLogIndex)
specifier|private
name|void
name|updateCache
parameter_list|(
name|OMMetadataManager
name|omMetadataManager
parameter_list|,
name|String
name|ozoneKey
parameter_list|,
name|String
name|multipartKey
parameter_list|,
name|OmKeyInfo
name|omKeyInfo
parameter_list|,
name|long
name|transactionLogIndex
parameter_list|)
block|{
comment|// Update cache.
comment|// 1. Add key entry to key table.
comment|// 2. Delete multipartKey entry from openKeyTable and multipartInfo table.
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|ozoneKey
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|omKeyInfo
argument_list|)
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getOpenKeyTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|multipartKey
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|absent
argument_list|()
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getMultipartInfoTable
argument_list|()
operator|.
name|addCacheEntry
argument_list|(
operator|new
name|CacheKey
argument_list|<>
argument_list|(
name|multipartKey
argument_list|)
argument_list|,
operator|new
name|CacheValue
argument_list|<>
argument_list|(
name|Optional
operator|.
name|absent
argument_list|()
argument_list|,
name|transactionLogIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

