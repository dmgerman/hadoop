begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ServerSocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNodeServicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ObjectStoreHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|netty
operator|.
name|ObjectStoreRestHttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
operator|.
name|OzoneUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * DataNode service plugin implementation to start ObjectStore rest server.  */
end_comment

begin_class
DECL|class|ObjectStoreRestPlugin
specifier|public
class|class
name|ObjectStoreRestPlugin
implements|implements
name|DataNodeServicePlugin
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ObjectStoreRestPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|handler
specifier|private
name|ObjectStoreHandler
name|handler
decl_stmt|;
DECL|field|restServicePort
specifier|private
specifier|volatile
name|int
name|restServicePort
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|objectStoreRestHttpServer
specifier|private
name|ObjectStoreRestHttpServer
name|objectStoreRestHttpServer
decl_stmt|;
DECL|method|ObjectStoreRestPlugin ()
specifier|public
name|ObjectStoreRestPlugin
parameter_list|()
block|{
name|OzoneConfiguration
operator|.
name|activate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start (Object service)
specifier|public
name|void
name|start
parameter_list|(
name|Object
name|service
parameter_list|)
block|{
name|DataNode
name|dataNode
init|=
operator|(
name|DataNode
operator|)
name|service
decl_stmt|;
if|if
condition|(
name|OzoneUtils
operator|.
name|isOzoneEnabled
argument_list|(
name|dataNode
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|handler
operator|=
operator|new
name|ObjectStoreHandler
argument_list|(
name|dataNode
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|ServerSocketChannel
name|httpServerChannel
init|=
name|dataNode
operator|.
name|getSecureResources
argument_list|()
operator|!=
literal|null
condition|?
name|dataNode
operator|.
name|getSecureResources
argument_list|()
operator|.
name|getHttpServerChannel
argument_list|()
else|:
literal|null
decl_stmt|;
name|objectStoreRestHttpServer
operator|=
operator|new
name|ObjectStoreRestHttpServer
argument_list|(
name|dataNode
operator|.
name|getConf
argument_list|()
argument_list|,
name|httpServerChannel
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|objectStoreRestHttpServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't start the Object Store Rest server"
argument_list|,
name|e
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|restServicePort
operator|=
name|objectStoreRestHttpServer
operator|.
name|getHttpAddress
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|//in case fo waiting for the port information: we can continue.
name|this
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|handler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't stop the Object Store Rest server"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|objectStoreRestHttpServer
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onDatanodeIdCreation (DatanodeID dataNodeId)
specifier|public
name|void
name|onDatanodeIdCreation
parameter_list|(
name|DatanodeID
name|dataNodeId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|restServicePort
operator|==
operator|-
literal|1
condition|)
block|{
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Wait for starting up http server is interrupted."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|dataNodeId
operator|.
name|setOzoneRestPort
argument_list|(
name|restServicePort
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

