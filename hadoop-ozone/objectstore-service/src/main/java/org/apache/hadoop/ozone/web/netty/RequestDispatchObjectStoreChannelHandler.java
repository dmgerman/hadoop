begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.netty
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultFullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|CONTINUE
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
operator|.
name|HTTP_1_1
import|;
end_import

begin_comment
comment|/**  * Object Store Netty channel pipeline handler that handles an inbound  * {@link HttpRequest} by dispatching it to the Object Store Jersey container.  * The handler establishes 2 sets of connected piped streams: one for inbound  * request handling and another for outbound response handling.  The relevant  * ends of these pipes are handed off to the Jersey application dispatch and the  * next channel handler, which is responsible for streaming in the inbound  * request body and flushing out the response body.  */
end_comment

begin_class
DECL|class|RequestDispatchObjectStoreChannelHandler
specifier|public
specifier|final
class|class
name|RequestDispatchObjectStoreChannelHandler
extends|extends
name|ObjectStoreChannelHandler
argument_list|<
name|HttpRequest
argument_list|>
block|{
DECL|field|jerseyContainer
specifier|private
specifier|final
name|ObjectStoreJerseyContainer
name|jerseyContainer
decl_stmt|;
DECL|field|reqIn
specifier|private
name|PipedInputStream
name|reqIn
decl_stmt|;
DECL|field|reqOut
specifier|private
name|PipedOutputStream
name|reqOut
decl_stmt|;
DECL|field|respIn
specifier|private
name|PipedInputStream
name|respIn
decl_stmt|;
DECL|field|respOut
specifier|private
name|PipedOutputStream
name|respOut
decl_stmt|;
comment|/**    * Creates a new RequestDispatchObjectStoreChannelHandler.    *    * @param jerseyContainer Object Store application Jersey container for    * request dispatch    */
DECL|method|RequestDispatchObjectStoreChannelHandler ( ObjectStoreJerseyContainer jerseyContainer)
specifier|public
name|RequestDispatchObjectStoreChannelHandler
parameter_list|(
name|ObjectStoreJerseyContainer
name|jerseyContainer
parameter_list|)
block|{
name|this
operator|.
name|jerseyContainer
operator|=
name|jerseyContainer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|channelRead0 (ChannelHandlerContext ctx, HttpRequest nettyReq)
specifier|public
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|nettyReq
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"begin RequestDispatchObjectStoreChannelHandler channelRead0, "
operator|+
literal|"ctx = {}, nettyReq = {}"
argument_list|,
name|ctx
argument_list|,
name|nettyReq
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nettyReq
operator|.
name|getDecoderResult
argument_list|()
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|sendErrorResponse
argument_list|(
name|ctx
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|reqIn
operator|=
operator|new
name|PipedInputStream
argument_list|()
expr_stmt|;
name|this
operator|.
name|reqOut
operator|=
operator|new
name|PipedOutputStream
argument_list|(
name|reqIn
argument_list|)
expr_stmt|;
name|this
operator|.
name|respIn
operator|=
operator|new
name|PipedInputStream
argument_list|()
expr_stmt|;
name|this
operator|.
name|respOut
operator|=
operator|new
name|PipedOutputStream
argument_list|(
name|respIn
argument_list|)
expr_stmt|;
if|if
condition|(
name|HttpHeaders
operator|.
name|is100ContinueExpected
argument_list|(
name|nettyReq
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sending continue response."
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|writeAndFlush
argument_list|(
operator|new
name|DefaultFullHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|CONTINUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Future
argument_list|<
name|HttpResponse
argument_list|>
name|nettyResp
init|=
name|this
operator|.
name|jerseyContainer
operator|.
name|dispatch
argument_list|(
name|nettyReq
argument_list|,
name|reqIn
argument_list|,
name|respOut
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|pipeline
argument_list|()
operator|.
name|replace
argument_list|(
name|this
argument_list|,
name|RequestContentObjectStoreChannelHandler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
operator|new
name|RequestContentObjectStoreChannelHandler
argument_list|(
name|nettyReq
argument_list|,
name|nettyResp
argument_list|,
name|reqOut
argument_list|,
name|respIn
argument_list|,
name|jerseyContainer
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"end RequestDispatchObjectStoreChannelHandler channelRead0, "
operator|+
literal|"ctx = {}, nettyReq = {}"
argument_list|,
name|ctx
argument_list|,
name|nettyReq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exceptionCaught (ChannelHandlerContext ctx, Throwable cause)
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
operator|.
name|exceptionCaught
argument_list|(
name|ctx
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|reqIn
argument_list|,
name|this
operator|.
name|reqOut
argument_list|,
name|this
operator|.
name|respIn
argument_list|,
name|this
operator|.
name|respOut
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

