begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.netty
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ServerSocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|ObjectStoreHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|http
operator|.
name|RestCsrfPreventionFilter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOption
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequestDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseEncoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|stream
operator|.
name|ChunkedWriteHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_REST_HTTP_ADDRESS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
operator|.
name|HDDS_REST_HTTP_ADDRESS_KEY
import|;
end_import

begin_comment
comment|/**  * Netty based web server for Hdds rest api server.  *<p>  * Based on the Datanode http serer.  */
end_comment

begin_class
DECL|class|ObjectStoreRestHttpServer
specifier|public
class|class
name|ObjectStoreRestHttpServer
implements|implements
name|Closeable
block|{
DECL|field|bossGroup
specifier|private
specifier|final
name|EventLoopGroup
name|bossGroup
decl_stmt|;
DECL|field|workerGroup
specifier|private
specifier|final
name|EventLoopGroup
name|workerGroup
decl_stmt|;
DECL|field|externalHttpChannel
specifier|private
specifier|final
name|ServerSocketChannel
name|externalHttpChannel
decl_stmt|;
DECL|field|httpServer
specifier|private
specifier|final
name|ServerBootstrap
name|httpServer
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|confForCreate
specifier|private
specifier|final
name|Configuration
name|confForCreate
decl_stmt|;
DECL|field|httpAddress
specifier|private
name|InetSocketAddress
name|httpAddress
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ObjectStoreRestHttpServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|objectStoreHandler
specifier|private
specifier|final
name|ObjectStoreHandler
name|objectStoreHandler
decl_stmt|;
DECL|method|ObjectStoreRestHttpServer (final Configuration conf, final ServerSocketChannel externalHttpChannel, ObjectStoreHandler objectStoreHandler)
specifier|public
name|ObjectStoreRestHttpServer
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|ServerSocketChannel
name|externalHttpChannel
parameter_list|,
name|ObjectStoreHandler
name|objectStoreHandler
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|confForCreate
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|objectStoreHandler
operator|=
name|objectStoreHandler
expr_stmt|;
name|confForCreate
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|this
operator|.
name|bossGroup
operator|=
operator|new
name|NioEventLoopGroup
argument_list|()
expr_stmt|;
name|this
operator|.
name|workerGroup
operator|=
operator|new
name|NioEventLoopGroup
argument_list|()
expr_stmt|;
name|this
operator|.
name|externalHttpChannel
operator|=
name|externalHttpChannel
expr_stmt|;
name|this
operator|.
name|httpServer
operator|=
operator|new
name|ServerBootstrap
argument_list|()
expr_stmt|;
name|this
operator|.
name|httpServer
operator|.
name|group
argument_list|(
name|bossGroup
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpServer
operator|.
name|childHandler
argument_list|(
operator|new
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|p
init|=
name|ch
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|p
operator|.
name|addLast
argument_list|(
operator|new
name|HttpRequestDecoder
argument_list|()
argument_list|,
operator|new
name|HttpResponseEncoder
argument_list|()
argument_list|)
expr_stmt|;
comment|// Later we have to support cross-site request forgery (CSRF) Filter
name|p
operator|.
name|addLast
argument_list|(
operator|new
name|ChunkedWriteHandler
argument_list|()
argument_list|,
operator|new
name|ObjectStoreURLDispatcher
argument_list|(
name|objectStoreHandler
operator|.
name|getObjectStoreJerseyContainer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpServer
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|WRITE_BUFFER_HIGH_WATER_MARK
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_REST_NETTY_HIGH_WATERMARK
argument_list|,
name|ScmConfigKeys
operator|.
name|HDDS_REST_NETTY_HIGH_WATERMARK_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpServer
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|WRITE_BUFFER_LOW_WATER_MARK
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|ScmConfigKeys
operator|.
name|HDDS_REST_NETTY_LOW_WATERMARK
argument_list|,
name|ScmConfigKeys
operator|.
name|HDDS_REST_NETTY_LOW_WATERMARK_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|externalHttpChannel
operator|==
literal|null
condition|)
block|{
name|httpServer
operator|.
name|channel
argument_list|(
name|NioServerSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|httpServer
operator|.
name|channelFactory
argument_list|(
call|(
name|ChannelFactory
argument_list|<
name|NioServerSocketChannel
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|NioServerSocketChannel
argument_list|(
name|externalHttpChannel
argument_list|)
block|{
comment|// The channel has been bounded externally via JSVC,
comment|// thus bind() becomes a no-op.
annotation|@
name|Override
specifier|protected
name|void
name|doBind
parameter_list|(
name|SocketAddress
name|localAddress
parameter_list|)
throws|throws
name|Exception
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHttpAddress ()
specifier|public
name|InetSocketAddress
name|getHttpAddress
parameter_list|()
block|{
return|return
name|httpAddress
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|httpServer
operator|!=
literal|null
condition|)
block|{
name|InetSocketAddress
name|infoAddr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|HDDS_REST_HTTP_ADDRESS_KEY
argument_list|,
name|HDDS_REST_HTTP_ADDRESS_DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|ChannelFuture
name|f
init|=
name|httpServer
operator|.
name|bind
argument_list|(
name|infoAddr
argument_list|)
decl_stmt|;
try|try
block|{
name|f
operator|.
name|syncUninterruptibly
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|BindException
condition|)
block|{
throw|throw
name|NetUtils
operator|.
name|wrapException
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
name|infoAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|infoAddr
operator|.
name|getPort
argument_list|()
argument_list|,
operator|(
name|SocketException
operator|)
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|httpAddress
operator|=
operator|(
name|InetSocketAddress
operator|)
name|f
operator|.
name|channel
argument_list|()
operator|.
name|localAddress
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Listening HDDS REST traffic on "
operator|+
name|httpAddress
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|bossGroup
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
name|workerGroup
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
if|if
condition|(
name|externalHttpChannel
operator|!=
literal|null
condition|)
block|{
name|externalHttpChannel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A minimal {@link FilterConfig} implementation backed by a {@link Map}.    */
DECL|class|MapBasedFilterConfig
specifier|private
specifier|static
specifier|final
class|class
name|MapBasedFilterConfig
implements|implements
name|FilterConfig
block|{
DECL|field|filterName
specifier|private
specifier|final
name|String
name|filterName
decl_stmt|;
DECL|field|parameters
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
comment|/**      * Creates a new MapBasedFilterConfig.      *      * @param filterName filter name      * @param parameters mapping of filter initialization parameters      */
DECL|method|MapBasedFilterConfig (String filterName, Map<String, String> parameters)
name|MapBasedFilterConfig
parameter_list|(
name|String
name|filterName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|filterName
operator|=
name|filterName
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilterName ()
specifier|public
name|String
name|getFilterName
parameter_list|()
block|{
return|return
name|this
operator|.
name|filterName
return|;
block|}
annotation|@
name|Override
DECL|method|getInitParameter (String name)
specifier|public
name|String
name|getInitParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
name|parameters
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInitParameterNames ()
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getInitParameterNames
parameter_list|()
block|{
throw|throw
name|this
operator|.
name|notImplemented
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getServletContext ()
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
throw|throw
name|this
operator|.
name|notImplemented
argument_list|()
throw|;
block|}
comment|/**      * Creates an exception indicating that an interface method is not      * implemented.  These should never be seen in practice, because it is only      * used for methods that are not called by {@link RestCsrfPreventionFilter}.      *      * @return exception indicating method not implemented      */
DECL|method|notImplemented ()
specifier|private
name|UnsupportedOperationException
name|notImplemented
parameter_list|()
block|{
return|return
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not implement this method."
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

