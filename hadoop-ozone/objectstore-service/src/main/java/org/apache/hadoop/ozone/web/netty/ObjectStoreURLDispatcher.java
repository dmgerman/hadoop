begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.netty
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Url dispatcher to bridge netty request to jetty container.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|ObjectStoreURLDispatcher
specifier|public
class|class
name|ObjectStoreURLDispatcher
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|HttpRequest
argument_list|>
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ObjectStoreURLDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|objectStoreJerseyContainer
specifier|private
specifier|final
name|ObjectStoreJerseyContainer
name|objectStoreJerseyContainer
decl_stmt|;
DECL|method|ObjectStoreURLDispatcher ( ObjectStoreJerseyContainer objectStoreJerseyContainer)
name|ObjectStoreURLDispatcher
parameter_list|(
name|ObjectStoreJerseyContainer
name|objectStoreJerseyContainer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|objectStoreJerseyContainer
operator|=
name|objectStoreJerseyContainer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|channelRead0 (ChannelHandlerContext ctx, HttpRequest req)
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|req
parameter_list|)
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|p
init|=
name|ctx
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|RequestDispatchObjectStoreChannelHandler
name|h
init|=
operator|new
name|RequestDispatchObjectStoreChannelHandler
argument_list|(
name|this
operator|.
name|objectStoreJerseyContainer
argument_list|)
decl_stmt|;
name|p
operator|.
name|replace
argument_list|(
name|this
argument_list|,
name|RequestDispatchObjectStoreChannelHandler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|h
operator|.
name|channelRead0
argument_list|(
name|ctx
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

