begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_CREATED
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
operator|.
name|getDirectoryFromConfig
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
operator|.
name|getOzoneMetaDirPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|gzip
operator|.
name|GzipCompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Recon Utility class.  */
end_comment

begin_class
DECL|class|ReconUtils
specifier|public
class|class
name|ReconUtils
block|{
DECL|field|WRITE_BUFFER
specifier|private
specifier|final
specifier|static
name|int
name|WRITE_BUFFER
init|=
literal|1048576
decl_stmt|;
comment|//1MB
DECL|method|ReconUtils ()
specifier|public
name|ReconUtils
parameter_list|()
block|{   }
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReconUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Get configured Recon DB directory value based on config. If not present,    * fallback to ozone.metadata.dirs    *    * @param conf         configuration bag    * @param dirConfigKey key to check    * @return Return File based on configured or fallback value.    */
DECL|method|getReconDbDir (Configuration conf, String dirConfigKey)
specifier|public
name|File
name|getReconDbDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|dirConfigKey
parameter_list|)
block|{
name|File
name|metadataDir
init|=
name|getDirectoryFromConfig
argument_list|(
name|conf
argument_list|,
name|dirConfigKey
argument_list|,
literal|"Recon"
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataDir
operator|!=
literal|null
condition|)
block|{
return|return
name|metadataDir
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} is not configured. We recommend adding this setting. "
operator|+
literal|"Falling back to {} instead."
argument_list|,
name|dirConfigKey
argument_list|,
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|)
expr_stmt|;
return|return
name|getOzoneMetaDirPath
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Given a source directory, create a tar.gz file from it.    *    * @param sourcePath the path to the directory to be archived.    * @return tar.gz file    * @throws IOException    */
DECL|method|createTarFile (Path sourcePath)
specifier|public
specifier|static
name|File
name|createTarFile
parameter_list|(
name|Path
name|sourcePath
parameter_list|)
throws|throws
name|IOException
block|{
name|TarArchiveOutputStream
name|tarOs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|sourceDir
init|=
name|sourcePath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|sourceDir
operator|.
name|concat
argument_list|(
literal|".tar.gz"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fileOutputStream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|GZIPOutputStream
name|gzipOutputStream
init|=
operator|new
name|GZIPOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|fileOutputStream
argument_list|)
argument_list|)
decl_stmt|;
name|tarOs
operator|=
operator|new
name|TarArchiveOutputStream
argument_list|(
name|gzipOutputStream
argument_list|)
expr_stmt|;
name|File
name|folder
init|=
operator|new
name|File
argument_list|(
name|sourceDir
argument_list|)
decl_stmt|;
name|File
index|[]
name|filesInDir
init|=
name|folder
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|filesInDir
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|filesInDir
control|)
block|{
name|addFilesToArchive
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|file
argument_list|,
name|tarOs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|tarOs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered when closing "
operator|+
literal|"TAR file output stream: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addFilesToArchive (String source, File file, TarArchiveOutputStream tarFileOutputStream)
specifier|private
specifier|static
name|void
name|addFilesToArchive
parameter_list|(
name|String
name|source
parameter_list|,
name|File
name|file
parameter_list|,
name|TarArchiveOutputStream
name|tarFileOutputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tarFileOutputStream
operator|.
name|putArchiveEntry
argument_list|(
operator|new
name|TarArchiveEntry
argument_list|(
name|file
argument_list|,
name|source
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|FileInputStream
name|fileInputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|BufferedInputStream
name|bufferedInputStream
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|fileInputStream
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|utils
operator|.
name|IOUtils
operator|.
name|copy
argument_list|(
name|bufferedInputStream
argument_list|,
name|tarFileOutputStream
argument_list|)
expr_stmt|;
name|tarFileOutputStream
operator|.
name|closeArchiveEntry
argument_list|()
expr_stmt|;
name|fileInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|tarFileOutputStream
operator|.
name|closeArchiveEntry
argument_list|()
expr_stmt|;
name|File
index|[]
name|filesInDir
init|=
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|filesInDir
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|cFile
range|:
name|filesInDir
control|)
block|{
name|addFilesToArchive
argument_list|(
name|cFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|cFile
argument_list|,
name|tarFileOutputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Untar DB snapshot tar file to recon OM snapshot directory.    *    * @param tarFile  source tar file    * @param destPath destination path to untar to.    * @throws IOException ioException    */
DECL|method|untarCheckpointFile (File tarFile, Path destPath)
specifier|public
name|void
name|untarCheckpointFile
parameter_list|(
name|File
name|tarFile
parameter_list|,
name|Path
name|destPath
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|fileInputStream
init|=
literal|null
decl_stmt|;
name|BufferedInputStream
name|buffIn
init|=
literal|null
decl_stmt|;
name|GzipCompressorInputStream
name|gzIn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileInputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|tarFile
argument_list|)
expr_stmt|;
name|buffIn
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|fileInputStream
argument_list|)
expr_stmt|;
name|gzIn
operator|=
operator|new
name|GzipCompressorInputStream
argument_list|(
name|buffIn
argument_list|)
expr_stmt|;
comment|//Create Destination directory if it does not exist.
if|if
condition|(
operator|!
name|destPath
operator|.
name|toFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|boolean
name|success
init|=
name|destPath
operator|.
name|toFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create Destination directory."
argument_list|)
throw|;
block|}
block|}
try|try
init|(
name|TarArchiveInputStream
name|tarInStream
init|=
operator|new
name|TarArchiveInputStream
argument_list|(
name|gzIn
argument_list|)
init|)
block|{
name|TarArchiveEntry
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
operator|(
name|TarArchiveEntry
operator|)
name|tarInStream
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|//If directory, create a directory.
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|destPath
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|f
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create directory found in tar."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Write contents of file in archive to a new file.
name|int
name|count
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|WRITE_BUFFER
index|]
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|destPath
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedOutputStream
name|dest
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|fos
argument_list|,
name|WRITE_BUFFER
argument_list|)
init|)
block|{
while|while
condition|(
operator|(
name|count
operator|=
name|tarInStream
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|WRITE_BUFFER
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|dest
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|gzIn
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|buffIn
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fileInputStream
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Make HTTP GET call on the URL and return inputstream to the response.    * @param httpClient HttpClient to use.    * @param url url to call    * @return Inputstream to the response of the HTTP call.    * @throws IOException While reading the response.    */
DECL|method|makeHttpCall (CloseableHttpClient httpClient, String url)
specifier|public
name|InputStream
name|makeHttpCall
parameter_list|(
name|CloseableHttpClient
name|httpClient
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpGet
name|httpGet
init|=
operator|new
name|HttpGet
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|HttpResponse
name|response
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|)
decl_stmt|;
name|int
name|errorCode
init|=
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|HttpEntity
name|entity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|errorCode
operator|==
name|HTTP_OK
operator|)
operator|||
operator|(
name|errorCode
operator|==
name|HTTP_CREATED
operator|)
condition|)
block|{
return|return
name|entity
operator|.
name|getContent
argument_list|()
return|;
block|}
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected exception when trying to reach Ozone "
operator|+
literal|"Manager, "
operator|+
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected null in http payload,"
operator|+
literal|" while processing request"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Load last known DB in Recon.    * @param reconDbDir    * @param fileNamePrefix    * @return    */
DECL|method|getLastKnownDB (File reconDbDir, String fileNamePrefix)
specifier|public
name|File
name|getLastKnownDB
parameter_list|(
name|File
name|reconDbDir
parameter_list|,
name|String
name|fileNamePrefix
parameter_list|)
block|{
name|String
name|lastKnownSnapshotFileName
init|=
literal|null
decl_stmt|;
name|long
name|lastKnonwnSnapshotTs
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
if|if
condition|(
name|reconDbDir
operator|!=
literal|null
condition|)
block|{
name|File
index|[]
name|snapshotFiles
init|=
name|reconDbDir
operator|.
name|listFiles
argument_list|(
parameter_list|(
name|dir
parameter_list|,
name|name
parameter_list|)
lambda|->
name|name
operator|.
name|startsWith
argument_list|(
name|fileNamePrefix
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|snapshotFile
range|:
name|snapshotFiles
control|)
block|{
name|String
name|fileName
init|=
name|snapshotFile
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|String
index|[]
name|fileNameSplits
init|=
name|fileName
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileNameSplits
operator|.
name|length
operator|<=
literal|1
condition|)
block|{
continue|continue;
block|}
name|long
name|snapshotTimestamp
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fileNameSplits
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastKnonwnSnapshotTs
operator|<
name|snapshotTimestamp
condition|)
block|{
name|lastKnonwnSnapshotTs
operator|=
name|snapshotTimestamp
expr_stmt|;
name|lastKnownSnapshotFileName
operator|=
name|fileName
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfEx
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown file found in Recon DB dir : {}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|lastKnownSnapshotFileName
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|File
argument_list|(
name|reconDbDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|lastKnownSnapshotFileName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

