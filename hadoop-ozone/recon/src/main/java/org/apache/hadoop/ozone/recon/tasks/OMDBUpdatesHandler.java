begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|tasks
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
operator|.
name|BUCKET_TABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
operator|.
name|KEY_TABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
operator|.
name|VOLUME_TABLE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|utils
operator|.
name|db
operator|.
name|CodecRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|RocksDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|rocksdb
operator|.
name|WriteBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class used to listen on OM RocksDB updates.  */
end_comment

begin_class
DECL|class|OMDBUpdatesHandler
specifier|public
class|class
name|OMDBUpdatesHandler
extends|extends
name|WriteBatch
operator|.
name|Handler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OMDBUpdatesHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tablesNames
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|tablesNames
decl_stmt|;
DECL|field|codecRegistry
specifier|private
name|CodecRegistry
name|codecRegistry
decl_stmt|;
DECL|field|omdbUpdateEvents
specifier|private
name|List
argument_list|<
name|OMDBUpdateEvent
argument_list|>
name|omdbUpdateEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|OMDBUpdatesHandler (OMMetadataManager omMetadataManager)
specifier|public
name|OMDBUpdatesHandler
parameter_list|(
name|OMMetadataManager
name|omMetadataManager
parameter_list|)
block|{
name|tablesNames
operator|=
name|omMetadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|getTableNames
argument_list|()
expr_stmt|;
name|codecRegistry
operator|=
name|omMetadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|getCodecRegistry
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|put (int cfIndex, byte[] keyBytes, byte[] valueBytes)
specifier|public
name|void
name|put
parameter_list|(
name|int
name|cfIndex
parameter_list|,
name|byte
index|[]
name|keyBytes
parameter_list|,
name|byte
index|[]
name|valueBytes
parameter_list|)
throws|throws
name|RocksDBException
block|{
try|try
block|{
name|processEvent
argument_list|(
name|cfIndex
argument_list|,
name|keyBytes
argument_list|,
name|valueBytes
argument_list|,
name|OMDBUpdateEvent
operator|.
name|OMDBUpdateAction
operator|.
name|PUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception when reading key : "
operator|+
name|ioEx
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete (int cfIndex, byte[] keyBytes)
specifier|public
name|void
name|delete
parameter_list|(
name|int
name|cfIndex
parameter_list|,
name|byte
index|[]
name|keyBytes
parameter_list|)
throws|throws
name|RocksDBException
block|{
try|try
block|{
name|processEvent
argument_list|(
name|cfIndex
argument_list|,
name|keyBytes
argument_list|,
literal|null
argument_list|,
name|OMDBUpdateEvent
operator|.
name|OMDBUpdateAction
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception when reading key : "
operator|+
name|ioEx
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *    * @param cfIndex    * @param keyBytes    * @param valueBytes    * @param action    * @throws IOException    */
DECL|method|processEvent (int cfIndex, byte[] keyBytes, byte[] valueBytes, OMDBUpdateEvent.OMDBUpdateAction action)
specifier|private
name|void
name|processEvent
parameter_list|(
name|int
name|cfIndex
parameter_list|,
name|byte
index|[]
name|keyBytes
parameter_list|,
name|byte
index|[]
name|valueBytes
parameter_list|,
name|OMDBUpdateEvent
operator|.
name|OMDBUpdateAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tableName
init|=
name|tablesNames
operator|.
name|get
argument_list|(
name|cfIndex
argument_list|)
decl_stmt|;
name|Class
name|keyType
init|=
name|getKeyType
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Class
name|valueType
init|=
name|getValueType
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueType
operator|!=
literal|null
condition|)
block|{
name|OMDBUpdateEvent
operator|.
name|OMUpdateEventBuilder
name|builder
init|=
operator|new
name|OMDBUpdateEvent
operator|.
name|OMUpdateEventBuilder
argument_list|<>
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
name|codecRegistry
operator|.
name|asObject
argument_list|(
name|keyBytes
argument_list|,
name|keyType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|action
operator|.
name|equals
argument_list|(
name|OMDBUpdateEvent
operator|.
name|OMDBUpdateAction
operator|.
name|DELETE
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|codecRegistry
operator|.
name|asObject
argument_list|(
name|valueBytes
argument_list|,
name|valueType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|OMDBUpdateEvent
name|event
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated OM update Event for table : "
operator|+
name|event
operator|.
name|getTable
argument_list|()
operator|+
literal|", Key = "
operator|+
name|event
operator|.
name|getKey
argument_list|()
operator|+
literal|", action = "
operator|+
name|event
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// Temporarily adding to an event buffer for testing. In subsequent JIRAs,
comment|// a Recon side class will be implemented that requests delta updates
comment|// from OM and calls on this handler. In that case, we will fill up
comment|// this buffer and pass it on to the ReconTaskController which has
comment|// tasks waiting on OM events.
name|omdbUpdateEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|// There are no use cases yet for the remaining methods in Recon. These
comment|// will be implemented as and when need arises.
annotation|@
name|Override
DECL|method|put (byte[] bytes, byte[] bytes1)
specifier|public
name|void
name|put
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
index|[]
name|bytes1
parameter_list|)
block|{    }
annotation|@
name|Override
DECL|method|merge (int i, byte[] bytes, byte[] bytes1)
specifier|public
name|void
name|merge
parameter_list|(
name|int
name|i
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
index|[]
name|bytes1
parameter_list|)
throws|throws
name|RocksDBException
block|{   }
annotation|@
name|Override
DECL|method|merge (byte[] bytes, byte[] bytes1)
specifier|public
name|void
name|merge
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
index|[]
name|bytes1
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|delete (byte[] bytes)
specifier|public
name|void
name|delete
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|singleDelete (int i, byte[] bytes)
specifier|public
name|void
name|singleDelete
parameter_list|(
name|int
name|i
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|RocksDBException
block|{   }
annotation|@
name|Override
DECL|method|singleDelete (byte[] bytes)
specifier|public
name|void
name|singleDelete
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|deleteRange (int i, byte[] bytes, byte[] bytes1)
specifier|public
name|void
name|deleteRange
parameter_list|(
name|int
name|i
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
index|[]
name|bytes1
parameter_list|)
throws|throws
name|RocksDBException
block|{   }
annotation|@
name|Override
DECL|method|deleteRange (byte[] bytes, byte[] bytes1)
specifier|public
name|void
name|deleteRange
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
index|[]
name|bytes1
parameter_list|)
block|{    }
annotation|@
name|Override
DECL|method|logData (byte[] bytes)
specifier|public
name|void
name|logData
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{    }
annotation|@
name|Override
DECL|method|putBlobIndex (int i, byte[] bytes, byte[] bytes1)
specifier|public
name|void
name|putBlobIndex
parameter_list|(
name|int
name|i
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
index|[]
name|bytes1
parameter_list|)
throws|throws
name|RocksDBException
block|{   }
annotation|@
name|Override
DECL|method|markBeginPrepare ()
specifier|public
name|void
name|markBeginPrepare
parameter_list|()
throws|throws
name|RocksDBException
block|{    }
annotation|@
name|Override
DECL|method|markEndPrepare (byte[] bytes)
specifier|public
name|void
name|markEndPrepare
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|RocksDBException
block|{    }
annotation|@
name|Override
DECL|method|markNoop (boolean b)
specifier|public
name|void
name|markNoop
parameter_list|(
name|boolean
name|b
parameter_list|)
throws|throws
name|RocksDBException
block|{    }
annotation|@
name|Override
DECL|method|markRollback (byte[] bytes)
specifier|public
name|void
name|markRollback
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|RocksDBException
block|{    }
annotation|@
name|Override
DECL|method|markCommit (byte[] bytes)
specifier|public
name|void
name|markCommit
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|RocksDBException
block|{    }
comment|/**    * Return Key type class for a given table name.    * @param name table name.    * @return String.class by default.    */
DECL|method|getKeyType (String name)
specifier|private
name|Class
name|getKeyType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
comment|/**    * Return Value type class for a given table.    * @param name table name    * @return Value type based on table name.    */
annotation|@
name|VisibleForTesting
DECL|method|getValueType (String name)
specifier|protected
name|Class
name|getValueType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|name
condition|)
block|{
case|case
name|KEY_TABLE
case|:
return|return
name|OmKeyInfo
operator|.
name|class
return|;
case|case
name|VOLUME_TABLE
case|:
return|return
name|OmVolumeArgs
operator|.
name|class
return|;
case|case
name|BUCKET_TABLE
case|:
return|return
name|OmBucketInfo
operator|.
name|class
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Get List of events. (Temporary API to unit test the class).    * @return List of events.    */
DECL|method|getEvents ()
specifier|public
name|List
argument_list|<
name|OMDBUpdateEvent
argument_list|>
name|getEvents
parameter_list|()
block|{
return|return
name|omdbUpdateEvents
return|;
block|}
block|}
end_class

end_unit

