begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.spi.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|utils
operator|.
name|CharsetNames
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerKeyPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_comment
comment|/**  * Codec to encode ContainerKeyPrefix as byte array.  */
end_comment

begin_class
DECL|class|ContainerKeyPrefixCodec
specifier|public
class|class
name|ContainerKeyPrefixCodec
implements|implements
name|Codec
argument_list|<
name|ContainerKeyPrefix
argument_list|>
block|{
DECL|field|KEY_DELIMITER
specifier|private
specifier|final
specifier|static
name|String
name|KEY_DELIMITER
init|=
literal|"_"
decl_stmt|;
annotation|@
name|Override
DECL|method|toPersistedFormat (ContainerKeyPrefix containerKeyPrefix)
specifier|public
name|byte
index|[]
name|toPersistedFormat
parameter_list|(
name|ContainerKeyPrefix
name|containerKeyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|containerKeyPrefix
argument_list|,
literal|"Null object can't be converted to byte array."
argument_list|)
expr_stmt|;
name|byte
index|[]
name|containerIdBytes
init|=
name|Longs
operator|.
name|toByteArray
argument_list|(
name|containerKeyPrefix
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
comment|//Prefix seek can be done only with containerId. In that case, we can
comment|// expect the key and version to be undefined.
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|containerKeyPrefix
operator|.
name|getKeyPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|byte
index|[]
name|keyPrefixBytes
init|=
operator|(
name|KEY_DELIMITER
operator|+
name|containerKeyPrefix
operator|.
name|getKeyPrefix
argument_list|()
operator|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|containerIdBytes
operator|=
name|ArrayUtils
operator|.
name|addAll
argument_list|(
name|containerIdBytes
argument_list|,
name|keyPrefixBytes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containerKeyPrefix
operator|.
name|getKeyVersion
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|containerIdBytes
operator|=
name|ArrayUtils
operator|.
name|addAll
argument_list|(
name|containerIdBytes
argument_list|,
name|KEY_DELIMITER
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|containerIdBytes
operator|=
name|ArrayUtils
operator|.
name|addAll
argument_list|(
name|containerIdBytes
argument_list|,
name|Longs
operator|.
name|toByteArray
argument_list|(
name|containerKeyPrefix
operator|.
name|getKeyVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|containerIdBytes
return|;
block|}
annotation|@
name|Override
DECL|method|fromPersistedFormat (byte[] rawData)
specifier|public
name|ContainerKeyPrefix
name|fromPersistedFormat
parameter_list|(
name|byte
index|[]
name|rawData
parameter_list|)
throws|throws
name|IOException
block|{
comment|// First 8 bytes is the containerId.
name|long
name|containerIdFromDB
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|ArrayUtils
operator|.
name|subarray
argument_list|(
name|rawData
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|BYTES
argument_list|)
argument_list|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
comment|// When reading from byte[], we can always expect to have the containerId,
comment|// key and version parts in the byte array.
name|byte
index|[]
name|keyBytes
init|=
name|ArrayUtils
operator|.
name|subarray
argument_list|(
name|rawData
argument_list|,
name|Long
operator|.
name|BYTES
operator|+
literal|1
argument_list|,
name|rawData
operator|.
name|length
operator|-
name|Long
operator|.
name|BYTES
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|keyPrefix
init|=
operator|new
name|String
argument_list|(
name|keyBytes
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
comment|// Last 8 bytes is the key version.
name|byte
index|[]
name|versionBytes
init|=
name|ArrayUtils
operator|.
name|subarray
argument_list|(
name|rawData
argument_list|,
name|rawData
operator|.
name|length
operator|-
name|Long
operator|.
name|BYTES
argument_list|,
name|rawData
operator|.
name|length
argument_list|)
decl_stmt|;
name|long
name|version
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|versionBytes
argument_list|)
operator|.
name|getLong
argument_list|()
decl_stmt|;
return|return
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerIdFromDB
argument_list|,
name|keyPrefix
argument_list|,
name|version
argument_list|)
return|;
block|}
block|}
end_class

end_unit

