begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|hk2
operator|.
name|api
operator|.
name|ServiceLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|internal
operator|.
name|inject
operator|.
name|InjectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|server
operator|.
name|ResourceConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|server
operator|.
name|spi
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|server
operator|.
name|spi
operator|.
name|ContainerLifecycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|servlet
operator|.
name|ServletContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jvnet
operator|.
name|hk2
operator|.
name|guice
operator|.
name|bridge
operator|.
name|api
operator|.
name|GuiceBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jvnet
operator|.
name|hk2
operator|.
name|guice
operator|.
name|bridge
operator|.
name|api
operator|.
name|GuiceIntoHK2Bridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Scopes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_comment
comment|/**  * Class to scan API Service classes and bind them to the injector.  */
end_comment

begin_class
DECL|class|ReconRestServletModule
specifier|public
specifier|abstract
class|class
name|ReconRestServletModule
extends|extends
name|ServletModule
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReconRestServletModule
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|abstract
specifier|protected
name|void
name|configureServlets
parameter_list|()
function_decl|;
comment|/**    * Interface to provide packages for scanning.    */
DECL|interface|RestKeyBindingBuilder
specifier|public
interface|interface
name|RestKeyBindingBuilder
block|{
DECL|method|packages (String... packages)
name|void
name|packages
parameter_list|(
name|String
modifier|...
name|packages
parameter_list|)
function_decl|;
block|}
DECL|method|rest (String... urlPatterns)
specifier|protected
name|RestKeyBindingBuilder
name|rest
parameter_list|(
name|String
modifier|...
name|urlPatterns
parameter_list|)
block|{
return|return
operator|new
name|RestKeyBindingBuilderImpl
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|urlPatterns
argument_list|)
argument_list|)
return|;
block|}
DECL|class|RestKeyBindingBuilderImpl
specifier|private
class|class
name|RestKeyBindingBuilderImpl
implements|implements
name|RestKeyBindingBuilder
block|{
DECL|field|paths
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|paths
decl_stmt|;
DECL|method|RestKeyBindingBuilderImpl (List<String> paths)
name|RestKeyBindingBuilderImpl
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
block|}
DECL|method|checkIfPackageExistsAndLog (String pkg)
specifier|private
name|void
name|checkIfPackageExistsAndLog
parameter_list|(
name|String
name|pkg
parameter_list|)
block|{
name|String
name|resourcePath
init|=
name|pkg
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|URL
name|resource
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"rest("
operator|+
name|paths
operator|+
literal|").packages("
operator|+
name|pkg
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No Beans in '"
operator|+
name|pkg
operator|+
literal|"' found. Requests "
operator|+
name|paths
operator|+
literal|" will fail."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|packages (String... packages)
specifier|public
name|void
name|packages
parameter_list|(
name|String
modifier|...
name|packages
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pkg
range|:
name|packages
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|checkIfPackageExistsAndLog
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"javax.ws.rs.Application"
argument_list|,
name|GuiceResourceConfig
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
literal|"jersey.config.server.provider.packages"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bind
argument_list|(
name|ServletContainer
operator|.
name|class
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|serve
argument_list|(
name|path
argument_list|)
operator|.
name|with
argument_list|(
name|ServletContainer
operator|.
name|class
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|/**  * Class to bridge Guice bindings to Jersey hk2 bindings.  */
end_comment

begin_class
DECL|class|GuiceResourceConfig
class|class
name|GuiceResourceConfig
extends|extends
name|ResourceConfig
block|{
DECL|method|GuiceResourceConfig ()
name|GuiceResourceConfig
parameter_list|()
block|{
name|register
argument_list|(
operator|new
name|ContainerLifecycleListener
argument_list|()
block|{
specifier|public
name|void
name|onStartup
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|ServletContainer
name|servletContainer
init|=
operator|(
name|ServletContainer
operator|)
name|container
decl_stmt|;
name|InjectionManager
name|injectionManager
init|=
name|container
operator|.
name|getApplicationHandler
argument_list|()
operator|.
name|getInjectionManager
argument_list|()
decl_stmt|;
name|ServiceLocator
name|serviceLocator
init|=
name|injectionManager
operator|.
name|getInstance
argument_list|(
name|ServiceLocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|GuiceBridge
operator|.
name|getGuiceBridge
argument_list|()
operator|.
name|initializeGuiceBridge
argument_list|(
name|serviceLocator
argument_list|)
expr_stmt|;
name|GuiceIntoHK2Bridge
name|guiceBridge
init|=
name|serviceLocator
operator|.
name|getService
argument_list|(
name|GuiceIntoHK2Bridge
operator|.
name|class
argument_list|)
decl_stmt|;
name|Injector
name|injector
init|=
operator|(
name|Injector
operator|)
name|servletContainer
operator|.
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|Injector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|guiceBridge
operator|.
name|bridgeGuiceInjector
argument_list|(
name|injector
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onReload
parameter_list|(
name|Container
name|container
parameter_list|)
block|{       }
specifier|public
name|void
name|onShutdown
parameter_list|(
name|Container
name|container
parameter_list|)
block|{       }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

