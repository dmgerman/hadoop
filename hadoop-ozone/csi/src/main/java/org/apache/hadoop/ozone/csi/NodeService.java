begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.csi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|csi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|csi
operator|.
name|CsiServer
operator|.
name|CsiConfig
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|NodeGetCapabilitiesRequest
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|NodeGetCapabilitiesResponse
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|NodeGetInfoRequest
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|NodeGetInfoResponse
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|NodePublishVolumeRequest
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|NodePublishVolumeResponse
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|NodeUnpublishVolumeRequest
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|NodeUnpublishVolumeResponse
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|NodeGrpc
operator|.
name|NodeImplBase
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|stub
operator|.
name|StreamObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the CSI node service.  */
end_comment

begin_class
DECL|class|NodeService
specifier|public
class|class
name|NodeService
extends|extends
name|NodeImplBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|s3Endpoint
specifier|private
name|String
name|s3Endpoint
decl_stmt|;
DECL|method|NodeService (CsiConfig configuration)
specifier|public
name|NodeService
parameter_list|(
name|CsiConfig
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|s3Endpoint
operator|=
name|configuration
operator|.
name|getS3gAddress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodePublishVolume (NodePublishVolumeRequest request, StreamObserver<NodePublishVolumeResponse> responseObserver)
specifier|public
name|void
name|nodePublishVolume
parameter_list|(
name|NodePublishVolumeRequest
name|request
parameter_list|,
name|StreamObserver
argument_list|<
name|NodePublishVolumeResponse
argument_list|>
name|responseObserver
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|request
operator|.
name|getTargetPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|mountCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"goofys --endpoint %s %s %s"
argument_list|,
name|s3Endpoint
argument_list|,
name|request
operator|.
name|getVolumeId
argument_list|()
argument_list|,
name|request
operator|.
name|getTargetPath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing {}"
argument_list|,
name|mountCommand
argument_list|)
expr_stmt|;
name|executeCommand
argument_list|(
name|mountCommand
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onNext
argument_list|(
name|NodePublishVolumeResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|responseObserver
operator|.
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeCommand (String mountCommand)
specifier|private
name|void
name|executeCommand
parameter_list|(
name|String
name|mountCommand
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Process
name|exec
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|mountCommand
argument_list|)
decl_stmt|;
name|exec
operator|.
name|waitFor
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Command is executed with  stdout: {}, stderr: {}"
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|exec
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
name|IOUtils
operator|.
name|toString
argument_list|(
name|exec
operator|.
name|getErrorStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|exec
operator|.
name|exitValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Return code of the command %s was %d"
argument_list|,
name|mountCommand
argument_list|,
name|exec
operator|.
name|exitValue
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|nodeUnpublishVolume (NodeUnpublishVolumeRequest request, StreamObserver<NodeUnpublishVolumeResponse> responseObserver)
specifier|public
name|void
name|nodeUnpublishVolume
parameter_list|(
name|NodeUnpublishVolumeRequest
name|request
parameter_list|,
name|StreamObserver
argument_list|<
name|NodeUnpublishVolumeResponse
argument_list|>
name|responseObserver
parameter_list|)
block|{
name|String
name|umountCommand
init|=
name|String
operator|.
name|format
argument_list|(
literal|"fusermount -u %s"
argument_list|,
name|request
operator|.
name|getTargetPath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing {}"
argument_list|,
name|umountCommand
argument_list|)
expr_stmt|;
try|try
block|{
name|executeCommand
argument_list|(
name|umountCommand
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onNext
argument_list|(
name|NodeUnpublishVolumeResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|responseObserver
operator|.
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|nodeGetCapabilities (NodeGetCapabilitiesRequest request, StreamObserver<NodeGetCapabilitiesResponse> responseObserver)
specifier|public
name|void
name|nodeGetCapabilities
parameter_list|(
name|NodeGetCapabilitiesRequest
name|request
parameter_list|,
name|StreamObserver
argument_list|<
name|NodeGetCapabilitiesResponse
argument_list|>
name|responseObserver
parameter_list|)
block|{
name|NodeGetCapabilitiesResponse
name|response
init|=
name|NodeGetCapabilitiesResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|responseObserver
operator|.
name|onNext
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodeGetInfo (NodeGetInfoRequest request, StreamObserver<NodeGetInfoResponse> responseObserver)
specifier|public
name|void
name|nodeGetInfo
parameter_list|(
name|NodeGetInfoRequest
name|request
parameter_list|,
name|StreamObserver
argument_list|<
name|NodeGetInfoResponse
argument_list|>
name|responseObserver
parameter_list|)
block|{
name|NodeGetInfoResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|NodeGetInfoResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNodeId
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|responseObserver
operator|.
name|onNext
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|responseObserver
operator|.
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

