begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.csi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|csi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|GenericCli
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|ConfigGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|ConfigTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneClientFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|netty
operator|.
name|NettyServerBuilder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollServerDomainSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|unix
operator|.
name|DomainSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
operator|.
name|Command
import|;
end_import

begin_comment
comment|/**  * CLI entrypoint of the CSI service daemon.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|name
operator|=
literal|"ozone csi"
argument_list|,
name|hidden
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"CSI service daemon."
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|)
DECL|class|CsiServer
specifier|public
class|class
name|CsiServer
extends|extends
name|GenericCli
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CsiServer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|ozoneConfiguration
init|=
name|createOzoneConfiguration
argument_list|()
decl_stmt|;
name|CsiConfig
name|csiConfig
init|=
name|ozoneConfiguration
operator|.
name|getObject
argument_list|(
name|CsiConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|OzoneClient
name|rpcClient
init|=
name|OzoneClientFactory
operator|.
name|getRpcClient
argument_list|(
name|ozoneConfiguration
argument_list|)
decl_stmt|;
name|EpollEventLoopGroup
name|group
init|=
operator|new
name|EpollEventLoopGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|csiConfig
operator|.
name|getVolumeOwner
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ozone.csi.owner is not set. You should set this configuration "
operator|+
literal|"variable to define which user should own all the created "
operator|+
literal|"buckets."
argument_list|)
throw|;
block|}
name|Server
name|server
init|=
name|NettyServerBuilder
operator|.
name|forAddress
argument_list|(
operator|new
name|DomainSocketAddress
argument_list|(
name|csiConfig
operator|.
name|getSocketPath
argument_list|()
argument_list|)
argument_list|)
operator|.
name|channelType
argument_list|(
name|EpollServerDomainSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|workerEventLoopGroup
argument_list|(
name|group
argument_list|)
operator|.
name|bossEventLoopGroup
argument_list|(
name|group
argument_list|)
operator|.
name|addService
argument_list|(
operator|new
name|IdentitiyService
argument_list|()
argument_list|)
operator|.
name|addService
argument_list|(
operator|new
name|ControllerService
argument_list|(
name|rpcClient
argument_list|,
name|csiConfig
operator|.
name|getDefaultVolumeSize
argument_list|()
argument_list|,
name|csiConfig
operator|.
name|getVolumeOwner
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addService
argument_list|(
operator|new
name|NodeService
argument_list|(
name|csiConfig
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|server
operator|.
name|awaitTermination
argument_list|()
expr_stmt|;
name|rpcClient
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|StringUtils
operator|.
name|startupShutdownMessage
argument_list|(
name|CsiServer
operator|.
name|class
argument_list|,
name|args
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
operator|new
name|CsiServer
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**    * Configuration settings specific to the CSI server.    */
annotation|@
name|ConfigGroup
argument_list|(
name|prefix
operator|=
literal|"ozone.csi"
argument_list|)
DECL|class|CsiConfig
specifier|public
specifier|static
class|class
name|CsiConfig
block|{
DECL|field|socketPath
specifier|private
name|String
name|socketPath
decl_stmt|;
DECL|field|defaultVolumeSize
specifier|private
name|long
name|defaultVolumeSize
decl_stmt|;
DECL|field|s3gAddress
specifier|private
name|String
name|s3gAddress
decl_stmt|;
DECL|field|volumeOwner
specifier|private
name|String
name|volumeOwner
decl_stmt|;
DECL|method|getSocketPath ()
specifier|public
name|String
name|getSocketPath
parameter_list|()
block|{
return|return
name|socketPath
return|;
block|}
DECL|method|getVolumeOwner ()
specifier|public
name|String
name|getVolumeOwner
parameter_list|()
block|{
return|return
name|volumeOwner
return|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"owner"
argument_list|,
name|defaultValue
operator|=
literal|""
argument_list|,
name|description
operator|=
literal|"This is the username which is used to create the requested "
operator|+
literal|"storage. Used as a hadoop username and the generated ozone"
operator|+
literal|" volume used to store all the buckets. WARNING: It can "
operator|+
literal|"be a security hole to use CSI in a secure environments as "
operator|+
literal|"ALL the users can request the mount of a specific bucket "
operator|+
literal|"via the CSI interface."
argument_list|,
name|tags
operator|=
name|ConfigTag
operator|.
name|STORAGE
argument_list|)
DECL|method|setVolumeOwner (String volumeOwner)
specifier|public
name|void
name|setVolumeOwner
parameter_list|(
name|String
name|volumeOwner
parameter_list|)
block|{
name|this
operator|.
name|volumeOwner
operator|=
name|volumeOwner
expr_stmt|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"socket"
argument_list|,
name|defaultValue
operator|=
literal|"/var/lib/csi.sock"
argument_list|,
name|description
operator|=
literal|"The socket where all the CSI services will listen (file name)."
argument_list|,
name|tags
operator|=
name|ConfigTag
operator|.
name|STORAGE
argument_list|)
DECL|method|setSocketPath (String socketPath)
specifier|public
name|void
name|setSocketPath
parameter_list|(
name|String
name|socketPath
parameter_list|)
block|{
name|this
operator|.
name|socketPath
operator|=
name|socketPath
expr_stmt|;
block|}
DECL|method|getDefaultVolumeSize ()
specifier|public
name|long
name|getDefaultVolumeSize
parameter_list|()
block|{
return|return
name|defaultVolumeSize
return|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"default-volume-size"
argument_list|,
name|defaultValue
operator|=
literal|"1000000000"
argument_list|,
name|description
operator|=
literal|"The default size of the create volumes (if not specified)."
argument_list|,
name|tags
operator|=
name|ConfigTag
operator|.
name|STORAGE
argument_list|)
DECL|method|setDefaultVolumeSize (long defaultVolumeSize)
specifier|public
name|void
name|setDefaultVolumeSize
parameter_list|(
name|long
name|defaultVolumeSize
parameter_list|)
block|{
name|this
operator|.
name|defaultVolumeSize
operator|=
name|defaultVolumeSize
expr_stmt|;
block|}
DECL|method|getS3gAddress ()
specifier|public
name|String
name|getS3gAddress
parameter_list|()
block|{
return|return
name|s3gAddress
return|;
block|}
annotation|@
name|Config
argument_list|(
name|key
operator|=
literal|"s3g.address"
argument_list|,
name|defaultValue
operator|=
literal|"http://localhost:9878"
argument_list|,
name|description
operator|=
literal|"The default size of the created volumes (if not specified in the"
operator|+
literal|" requests)."
argument_list|,
name|tags
operator|=
name|ConfigTag
operator|.
name|STORAGE
argument_list|)
DECL|method|setS3gAddress (String s3gAddress)
specifier|public
name|void
name|setS3gAddress
parameter_list|(
name|String
name|s3gAddress
parameter_list|)
block|{
name|this
operator|.
name|s3gAddress
operator|=
name|s3gAddress
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

