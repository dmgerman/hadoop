begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.csi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|csi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|util
operator|.
name|OzoneVersionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BoolValue
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|GetPluginCapabilitiesResponse
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|GetPluginInfoResponse
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|PluginCapability
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|PluginCapability
operator|.
name|Service
import|;
end_import

begin_import
import|import static
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|PluginCapability
operator|.
name|Service
operator|.
name|Type
operator|.
name|CONTROLLER_SERVICE
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|ProbeResponse
import|;
end_import

begin_import
import|import
name|csi
operator|.
name|v1
operator|.
name|IdentityGrpc
operator|.
name|IdentityImplBase
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|stub
operator|.
name|StreamObserver
import|;
end_import

begin_comment
comment|/**  * Implementation of the CSI identity service.  */
end_comment

begin_class
DECL|class|IdentitiyService
specifier|public
class|class
name|IdentitiyService
extends|extends
name|IdentityImplBase
block|{
annotation|@
name|Override
DECL|method|getPluginInfo (csi.v1.Csi.GetPluginInfoRequest request, StreamObserver<csi.v1.Csi.GetPluginInfoResponse> responseObserver)
specifier|public
name|void
name|getPluginInfo
parameter_list|(
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|GetPluginInfoRequest
name|request
parameter_list|,
name|StreamObserver
argument_list|<
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|GetPluginInfoResponse
argument_list|>
name|responseObserver
parameter_list|)
block|{
name|GetPluginInfoResponse
name|response
init|=
name|GetPluginInfoResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"org.apache.hadoop.ozone"
argument_list|)
operator|.
name|setVendorVersion
argument_list|(
name|OzoneVersionInfo
operator|.
name|OZONE_VERSION_INFO
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|responseObserver
operator|.
name|onNext
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPluginCapabilities ( csi.v1.Csi.GetPluginCapabilitiesRequest request, StreamObserver<GetPluginCapabilitiesResponse> responseObserver)
specifier|public
name|void
name|getPluginCapabilities
parameter_list|(
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|GetPluginCapabilitiesRequest
name|request
parameter_list|,
name|StreamObserver
argument_list|<
name|GetPluginCapabilitiesResponse
argument_list|>
name|responseObserver
parameter_list|)
block|{
name|GetPluginCapabilitiesResponse
name|response
init|=
name|GetPluginCapabilitiesResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|addCapabilities
argument_list|(
name|PluginCapability
operator|.
name|newBuilder
argument_list|()
operator|.
name|setService
argument_list|(
name|Service
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|CONTROLLER_SERVICE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|responseObserver
operator|.
name|onNext
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|probe (csi.v1.Csi.ProbeRequest request, StreamObserver<csi.v1.Csi.ProbeResponse> responseObserver)
specifier|public
name|void
name|probe
parameter_list|(
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|ProbeRequest
name|request
parameter_list|,
name|StreamObserver
argument_list|<
name|csi
operator|.
name|v1
operator|.
name|Csi
operator|.
name|ProbeResponse
argument_list|>
name|responseObserver
parameter_list|)
block|{
name|ProbeResponse
name|response
init|=
name|ProbeResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReady
argument_list|(
name|BoolValue
operator|.
name|of
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|responseObserver
operator|.
name|onNext
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|responseObserver
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

