begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.spi.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconConstants
operator|.
name|CONTAINER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconConstants
operator|.
name|CONTAINER_KEY_COUNT_TABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconConstants
operator|.
name|CONTAINER_KEY_TABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|DSL
operator|.
name|currentTimestamp
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|DSL
operator|.
name|select
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|DSL
operator|.
name|using
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerKeyPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|ContainerDBServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|TableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|daos
operator|.
name|GlobalStatsDao
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|pojos
operator|.
name|GlobalStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of the Recon Container DB Service.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ContainerDBServiceProviderImpl
specifier|public
class|class
name|ContainerDBServiceProviderImpl
implements|implements
name|ContainerDBServiceProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerDBServiceProviderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containerKeyTable
specifier|private
name|Table
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|containerKeyTable
decl_stmt|;
DECL|field|containerKeyCountTable
specifier|private
name|Table
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|containerKeyCountTable
decl_stmt|;
DECL|field|globalStatsDao
specifier|private
name|GlobalStatsDao
name|globalStatsDao
decl_stmt|;
annotation|@
name|Inject
DECL|field|configuration
specifier|private
name|OzoneConfiguration
name|configuration
decl_stmt|;
annotation|@
name|Inject
DECL|field|containerDbStore
specifier|private
name|DBStore
name|containerDbStore
decl_stmt|;
annotation|@
name|Inject
DECL|field|sqlConfiguration
specifier|private
name|Configuration
name|sqlConfiguration
decl_stmt|;
annotation|@
name|Inject
DECL|method|ContainerDBServiceProviderImpl (DBStore dbStore, Configuration sqlConfiguration)
specifier|public
name|ContainerDBServiceProviderImpl
parameter_list|(
name|DBStore
name|dbStore
parameter_list|,
name|Configuration
name|sqlConfiguration
parameter_list|)
block|{
name|globalStatsDao
operator|=
operator|new
name|GlobalStatsDao
argument_list|(
name|sqlConfiguration
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|containerKeyTable
operator|=
name|dbStore
operator|.
name|getTable
argument_list|(
name|CONTAINER_KEY_TABLE
argument_list|,
name|ContainerKeyPrefix
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerKeyCountTable
operator|=
name|dbStore
operator|.
name|getTable
argument_list|(
name|CONTAINER_KEY_COUNT_TABLE
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create Container Key tables."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initialize a new container DB instance, getting rid of the old instance    * and then storing the passed in container prefix counts into the created    * DB instance. Also, truncate or reset the SQL tables as required.    * @param containerKeyPrefixCounts Map of container key-prefix to    *                                 number of keys with the prefix.    * @throws IOException    */
annotation|@
name|Override
DECL|method|initNewContainerDB (Map<ContainerKeyPrefix, Integer> containerKeyPrefixCounts)
specifier|public
name|void
name|initNewContainerDB
parameter_list|(
name|Map
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|containerKeyPrefixCounts
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|oldDBLocation
init|=
name|containerDbStore
operator|.
name|getDbLocation
argument_list|()
decl_stmt|;
name|containerDbStore
operator|=
name|ReconContainerDBProvider
operator|.
name|getNewDBStore
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|containerKeyTable
operator|=
name|containerDbStore
operator|.
name|getTable
argument_list|(
name|CONTAINER_KEY_TABLE
argument_list|,
name|ContainerKeyPrefix
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDBLocation
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up old Recon Container DB at {}."
argument_list|,
name|oldDBLocation
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|oldDBLocation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containerKeyPrefixCounts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|containerKeyPrefixCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|containerKeyTable
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// reset total count of containers to zero
name|storeContainerCount
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Concatenate the containerID and Key Prefix using a delimiter and store the    * count into the container DB store.    *    * @param containerKeyPrefix the containerID, key-prefix tuple.    * @param count Count of the keys matching that prefix.    * @throws IOException    */
annotation|@
name|Override
DECL|method|storeContainerKeyMapping (ContainerKeyPrefix containerKeyPrefix, Integer count)
specifier|public
name|void
name|storeContainerKeyMapping
parameter_list|(
name|ContainerKeyPrefix
name|containerKeyPrefix
parameter_list|,
name|Integer
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|containerKeyTable
operator|.
name|put
argument_list|(
name|containerKeyPrefix
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * Store the containerID -> no. of keys count into the container DB store.    *    * @param containerID the containerID.    * @param count count of the keys within the given containerID.    * @throws IOException    */
annotation|@
name|Override
DECL|method|storeContainerKeyCount (Long containerID, Long count)
specifier|public
name|void
name|storeContainerKeyCount
parameter_list|(
name|Long
name|containerID
parameter_list|,
name|Long
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|containerKeyCountTable
operator|.
name|put
argument_list|(
name|containerID
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the total count of keys within the given containerID.    *    * @param containerID the given containerID.    * @return count of keys within the given containerID.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getKeyCountForContainer (Long containerID)
specifier|public
name|long
name|getKeyCountForContainer
parameter_list|(
name|Long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|keyCount
init|=
name|containerKeyCountTable
operator|.
name|get
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
return|return
name|keyCount
operator|==
literal|null
condition|?
literal|0L
else|:
name|keyCount
return|;
block|}
comment|/**    * Get if a containerID exists or not.    *    * @param containerID the given containerID.    * @return if the given ContainerID exists or not.    * @throws IOException    */
annotation|@
name|Override
DECL|method|doesContainerExists (Long containerID)
specifier|public
name|boolean
name|doesContainerExists
parameter_list|(
name|Long
name|containerID
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|containerKeyCountTable
operator|.
name|get
argument_list|(
name|containerID
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Put together the key from the passed in object and get the count from    * the container DB store.    *    * @param containerKeyPrefix the containerID, key-prefix tuple.    * @return count of keys matching the containerID, key-prefix.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getCountForContainerKeyPrefix ( ContainerKeyPrefix containerKeyPrefix)
specifier|public
name|Integer
name|getCountForContainerKeyPrefix
parameter_list|(
name|ContainerKeyPrefix
name|containerKeyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Integer
name|count
init|=
name|containerKeyTable
operator|.
name|get
argument_list|(
name|containerKeyPrefix
argument_list|)
decl_stmt|;
return|return
name|count
operator|==
literal|null
condition|?
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
else|:
name|count
return|;
block|}
comment|/**    * Get key prefixes for the given container ID.    *    * @param containerId the given containerID.    * @return Map of (Key-Prefix,Count of Keys).    */
annotation|@
name|Override
DECL|method|getKeyPrefixesForContainer ( long containerId)
specifier|public
name|Map
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|getKeyPrefixesForContainer
parameter_list|(
name|long
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set the default startKeyPrefix to empty string
return|return
name|getKeyPrefixesForContainer
argument_list|(
name|containerId
argument_list|,
name|StringUtils
operator|.
name|EMPTY
argument_list|)
return|;
block|}
comment|/**    * Use the DB's prefix seek iterator to start the scan from the given    * container ID and prev key prefix. The prev key prefix is skipped from    * the result.    *    * @param containerId the given containerId.    * @param prevKeyPrefix the given key prefix to start the scan from.    * @return Map of (Key-Prefix,Count of Keys).    */
annotation|@
name|Override
DECL|method|getKeyPrefixesForContainer ( long containerId, String prevKeyPrefix)
specifier|public
name|Map
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|getKeyPrefixesForContainer
parameter_list|(
name|long
name|containerId
parameter_list|,
name|String
name|prevKeyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|prefixes
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TableIterator
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|?
extends|extends
name|KeyValue
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|containerIterator
init|=
name|containerKeyTable
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ContainerKeyPrefix
name|seekKey
decl_stmt|;
name|boolean
name|skipPrevKey
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|prevKeyPrefix
argument_list|)
condition|)
block|{
name|skipPrevKey
operator|=
literal|true
expr_stmt|;
name|seekKey
operator|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|prevKeyPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|seekKey
operator|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
name|KeyValue
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|seekKeyValue
init|=
name|containerIterator
operator|.
name|seek
argument_list|(
name|seekKey
argument_list|)
decl_stmt|;
comment|// check if RocksDB was able to seek correctly to the given key prefix
comment|// if not, then return empty result
comment|// In case of an empty prevKeyPrefix, all the keys in the container are
comment|// returned
if|if
condition|(
name|seekKeyValue
operator|==
literal|null
operator|||
operator|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|prevKeyPrefix
argument_list|)
operator|&&
operator|!
name|seekKeyValue
operator|.
name|getKey
argument_list|()
operator|.
name|getKeyPrefix
argument_list|()
operator|.
name|equals
argument_list|(
name|prevKeyPrefix
argument_list|)
operator|)
condition|)
block|{
return|return
name|prefixes
return|;
block|}
while|while
condition|(
name|containerIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|KeyValue
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|keyValue
init|=
name|containerIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|ContainerKeyPrefix
name|containerKeyPrefix
init|=
name|keyValue
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// skip the prev key if prev key is present
if|if
condition|(
name|skipPrevKey
operator|&&
name|containerKeyPrefix
operator|.
name|getKeyPrefix
argument_list|()
operator|.
name|equals
argument_list|(
name|prevKeyPrefix
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// The prefix seek only guarantees that the iterator's head will be
comment|// positioned at the first prefix match. We still have to check the key
comment|// prefix.
if|if
condition|(
name|containerKeyPrefix
operator|.
name|getContainerId
argument_list|()
operator|==
name|containerId
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|containerKeyPrefix
operator|.
name|getKeyPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|prefixes
operator|.
name|put
argument_list|(
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|containerKeyPrefix
operator|.
name|getKeyPrefix
argument_list|()
argument_list|,
name|containerKeyPrefix
operator|.
name|getKeyVersion
argument_list|()
argument_list|)
argument_list|,
name|keyValue
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Null key prefix returned for containerId = "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
comment|//Break when the first mismatch occurs.
block|}
block|}
return|return
name|prefixes
return|;
block|}
comment|/**    * Iterate the DB to construct a Map of containerID -> containerMetadata    * only for the given limit from the given start key. The start containerID    * is skipped from the result.    *    * Return all the containers if limit< 0.    *    * @param limit No of containers to get.    * @param prevContainer containerID after which the    *                      list of containers are scanned.    * @return Map of containerID -> containerMetadata.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getContainers (int limit, long prevContainer)
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|ContainerMetadata
argument_list|>
name|getContainers
parameter_list|(
name|int
name|limit
parameter_list|,
name|long
name|prevContainer
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|ContainerMetadata
argument_list|>
name|containers
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TableIterator
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|?
extends|extends
name|KeyValue
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|containerIterator
init|=
name|containerKeyTable
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ContainerKeyPrefix
name|seekKey
decl_stmt|;
if|if
condition|(
name|prevContainer
operator|>
literal|0L
condition|)
block|{
name|seekKey
operator|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|prevContainer
argument_list|)
expr_stmt|;
name|KeyValue
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|seekKeyValue
init|=
name|containerIterator
operator|.
name|seek
argument_list|(
name|seekKey
argument_list|)
decl_stmt|;
comment|// Check if RocksDB was able to correctly seek to the given
comment|// prevContainer containerId. If not, then return empty result
if|if
condition|(
name|seekKeyValue
operator|!=
literal|null
operator|&&
name|seekKeyValue
operator|.
name|getKey
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|!=
name|prevContainer
condition|)
block|{
return|return
name|containers
return|;
block|}
else|else
block|{
comment|// seek to the prevContainer+1 containerID to start scan
name|seekKey
operator|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|prevContainer
operator|+
literal|1
argument_list|)
expr_stmt|;
name|containerIterator
operator|.
name|seek
argument_list|(
name|seekKey
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|containerIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|KeyValue
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|keyValue
init|=
name|containerIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|ContainerKeyPrefix
name|containerKeyPrefix
init|=
name|keyValue
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Long
name|containerID
init|=
name|containerKeyPrefix
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|Integer
name|numberOfKeys
init|=
name|keyValue
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// break the loop if limit has been reached
comment|// and one more new entity needs to be added to the containers map
if|if
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|==
name|limit
operator|&&
operator|!
name|containers
operator|.
name|containsKey
argument_list|(
name|containerID
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// initialize containerMetadata with 0 as number of keys.
name|containers
operator|.
name|computeIfAbsent
argument_list|(
name|containerID
argument_list|,
name|ContainerMetadata
operator|::
operator|new
argument_list|)
expr_stmt|;
comment|// increment number of keys for the containerID
name|ContainerMetadata
name|containerMetadata
init|=
name|containers
operator|.
name|get
argument_list|(
name|containerID
argument_list|)
decl_stmt|;
name|containerMetadata
operator|.
name|setNumberOfKeys
argument_list|(
name|containerMetadata
operator|.
name|getNumberOfKeys
argument_list|()
operator|+
name|numberOfKeys
argument_list|)
expr_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|containerID
argument_list|,
name|containerMetadata
argument_list|)
expr_stmt|;
block|}
return|return
name|containers
return|;
block|}
annotation|@
name|Override
DECL|method|deleteContainerMapping (ContainerKeyPrefix containerKeyPrefix)
specifier|public
name|void
name|deleteContainerMapping
parameter_list|(
name|ContainerKeyPrefix
name|containerKeyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|containerKeyTable
operator|.
name|delete
argument_list|(
name|containerKeyPrefix
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get total count of containers.    *    * @return total count of containers.    */
annotation|@
name|Override
DECL|method|getCountForContainers ()
specifier|public
name|long
name|getCountForContainers
parameter_list|()
block|{
name|GlobalStats
name|containerCountRecord
init|=
name|globalStatsDao
operator|.
name|fetchOneByKey
argument_list|(
name|CONTAINER_COUNT_KEY
argument_list|)
decl_stmt|;
return|return
operator|(
name|containerCountRecord
operator|==
literal|null
operator|)
condition|?
literal|0L
else|:
name|containerCountRecord
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerTableIterator ()
specifier|public
name|TableIterator
name|getContainerTableIterator
parameter_list|()
block|{
return|return
name|containerKeyTable
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**    * Store the total count of containers into the container DB store.    *    * @param count count of the containers present in the system.    */
annotation|@
name|Override
DECL|method|storeContainerCount (Long count)
specifier|public
name|void
name|storeContainerCount
parameter_list|(
name|Long
name|count
parameter_list|)
block|{
comment|// Get the current timestamp
name|Timestamp
name|now
init|=
name|using
argument_list|(
name|sqlConfiguration
argument_list|)
operator|.
name|fetchValue
argument_list|(
name|select
argument_list|(
name|currentTimestamp
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|GlobalStats
name|containerCountRecord
init|=
name|globalStatsDao
operator|.
name|fetchOneByKey
argument_list|(
name|CONTAINER_COUNT_KEY
argument_list|)
decl_stmt|;
name|GlobalStats
name|globalStatsRecord
init|=
operator|new
name|GlobalStats
argument_list|(
name|CONTAINER_COUNT_KEY
argument_list|,
name|count
argument_list|,
name|now
argument_list|)
decl_stmt|;
comment|// Insert a new record for CONTAINER_COUNT_KEY if it does not exist
if|if
condition|(
name|containerCountRecord
operator|==
literal|null
condition|)
block|{
name|globalStatsDao
operator|.
name|insert
argument_list|(
name|globalStatsRecord
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|globalStatsDao
operator|.
name|update
argument_list|(
name|globalStatsRecord
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Increment the total count for containers in the system by the given count.    *    * @param count no. of new containers to add to containers total count.    */
annotation|@
name|Override
DECL|method|incrementContainerCountBy (long count)
specifier|public
name|void
name|incrementContainerCountBy
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|long
name|containersCount
init|=
name|getCountForContainers
argument_list|()
decl_stmt|;
name|storeContainerCount
argument_list|(
name|containersCount
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

