begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|tasks
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|OZONE_RECON_TASK_THREAD_COUNT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|OZONE_RECON_TASK_THREAD_COUNT_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|recovery
operator|.
name|ReconOMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|daos
operator|.
name|ReconTaskStatusDao
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|pojos
operator|.
name|ReconTaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_comment
comment|/**  * Implementation of ReconTaskController.  */
end_comment

begin_class
DECL|class|ReconTaskControllerImpl
specifier|public
class|class
name|ReconTaskControllerImpl
implements|implements
name|ReconTaskController
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReconTaskControllerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|reconDBUpdateTasks
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ReconDBUpdateTask
argument_list|>
name|reconDBUpdateTasks
decl_stmt|;
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|threadCount
specifier|private
name|int
name|threadCount
init|=
literal|1
decl_stmt|;
DECL|field|taskSemaphore
specifier|private
specifier|final
name|Semaphore
name|taskSemaphore
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|omMetadataManager
specifier|private
specifier|final
name|ReconOMMetadataManager
name|omMetadataManager
decl_stmt|;
DECL|field|taskFailureCounter
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|taskFailureCounter
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|TASK_FAILURE_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|TASK_FAILURE_THRESHOLD
init|=
literal|2
decl_stmt|;
DECL|field|reconTaskStatusDao
specifier|private
name|ReconTaskStatusDao
name|reconTaskStatusDao
decl_stmt|;
annotation|@
name|Inject
DECL|method|ReconTaskControllerImpl (OzoneConfiguration configuration, ReconOMMetadataManager omMetadataManager, Configuration sqlConfiguration)
specifier|public
name|ReconTaskControllerImpl
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|,
name|ReconOMMetadataManager
name|omMetadataManager
parameter_list|,
name|Configuration
name|sqlConfiguration
parameter_list|)
block|{
name|this
operator|.
name|omMetadataManager
operator|=
name|omMetadataManager
expr_stmt|;
name|reconDBUpdateTasks
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|threadCount
operator|=
name|configuration
operator|.
name|getInt
argument_list|(
name|OZONE_RECON_TASK_THREAD_COUNT_KEY
argument_list|,
name|OZONE_RECON_TASK_THREAD_COUNT_DEFAULT
argument_list|)
expr_stmt|;
name|executorService
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadCount
argument_list|)
expr_stmt|;
name|reconTaskStatusDao
operator|=
operator|new
name|ReconTaskStatusDao
argument_list|(
name|sqlConfiguration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerTask (ReconDBUpdateTask task)
specifier|public
name|void
name|registerTask
parameter_list|(
name|ReconDBUpdateTask
name|task
parameter_list|)
block|{
name|String
name|taskName
init|=
name|task
operator|.
name|getTaskName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registered task "
operator|+
name|taskName
operator|+
literal|" with controller."
argument_list|)
expr_stmt|;
comment|// Store task in Task Map.
name|reconDBUpdateTasks
operator|.
name|put
argument_list|(
name|taskName
argument_list|,
name|task
argument_list|)
expr_stmt|;
comment|// Store Task in Task failure tracker.
name|taskFailureCounter
operator|.
name|put
argument_list|(
name|taskName
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create DB record for the task.
name|ReconTaskStatus
name|reconTaskStatusRecord
init|=
operator|new
name|ReconTaskStatus
argument_list|(
name|taskName
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|reconTaskStatusDao
operator|.
name|insert
argument_list|(
name|reconTaskStatusRecord
argument_list|)
expr_stmt|;
block|}
comment|/**    * For every registered task, we try process step twice and then reprocess    * once (if process failed twice) to absorb the events. If a task has failed    * reprocess call more than 2 times across events, it is unregistered    * (blacklisted).    * @param events set of events    * @throws InterruptedException    */
annotation|@
name|Override
DECL|method|consumeOMEvents (OMUpdateEventBatch events)
specifier|public
name|void
name|consumeOMEvents
parameter_list|(
name|OMUpdateEventBatch
name|events
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|taskSemaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|Callable
argument_list|<
name|Pair
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ReconDBUpdateTask
argument_list|>
name|taskEntry
range|:
name|reconDBUpdateTasks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ReconDBUpdateTask
name|task
init|=
name|taskEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|task
operator|.
name|process
argument_list|(
name|events
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Future
argument_list|<
name|Pair
argument_list|>
argument_list|>
name|results
init|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|failedTasks
init|=
name|processTaskResults
argument_list|(
name|results
argument_list|,
name|events
argument_list|)
decl_stmt|;
comment|//Retry
name|List
argument_list|<
name|String
argument_list|>
name|retryFailedTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|failedTasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tasks
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|taskName
range|:
name|failedTasks
control|)
block|{
name|ReconDBUpdateTask
name|task
init|=
name|reconDBUpdateTasks
operator|.
name|get
argument_list|(
name|taskName
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|task
operator|.
name|process
argument_list|(
name|events
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|retryFailedTasks
operator|=
name|processTaskResults
argument_list|(
name|results
argument_list|,
name|events
argument_list|)
expr_stmt|;
block|}
comment|//Reprocess
comment|//TODO Move to a separate task queue since reprocess may be a heavy
comment|//operation for large OM DB instances
if|if
condition|(
operator|!
name|retryFailedTasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tasks
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|taskName
range|:
name|failedTasks
control|)
block|{
name|ReconDBUpdateTask
name|task
init|=
name|reconDBUpdateTasks
operator|.
name|get
argument_list|(
name|taskName
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
parameter_list|()
lambda|->
name|task
operator|.
name|reprocess
argument_list|(
name|omMetadataManager
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|reprocessFailedTasks
init|=
name|processTaskResults
argument_list|(
name|results
argument_list|,
name|events
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|taskName
range|:
name|reprocessFailedTasks
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reprocess step failed for task : "
operator|+
name|taskName
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskFailureCounter
operator|.
name|get
argument_list|(
name|taskName
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
operator|>
name|TASK_FAILURE_THRESHOLD
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Blacklisting Task since it failed retry and "
operator|+
literal|"reprocess more than "
operator|+
name|TASK_FAILURE_THRESHOLD
operator|+
literal|" times."
argument_list|)
expr_stmt|;
name|reconDBUpdateTasks
operator|.
name|remove
argument_list|(
name|taskName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected error : "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|taskSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Store the last completed event sequence number and timestamp to the DB    * for that task.    * @param taskName taskname to be updated.    * @param eventInfo contains the new sequence number and timestamp.    */
DECL|method|storeLastCompletedTransaction ( String taskName, OMDBUpdateEvent.EventInfo eventInfo)
specifier|private
name|void
name|storeLastCompletedTransaction
parameter_list|(
name|String
name|taskName
parameter_list|,
name|OMDBUpdateEvent
operator|.
name|EventInfo
name|eventInfo
parameter_list|)
block|{
name|ReconTaskStatus
name|reconTaskStatusRecord
init|=
operator|new
name|ReconTaskStatus
argument_list|(
name|taskName
argument_list|,
name|eventInfo
operator|.
name|getEventTimestampMillis
argument_list|()
argument_list|,
name|eventInfo
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
name|reconTaskStatusDao
operator|.
name|update
argument_list|(
name|reconTaskStatusRecord
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRegisteredTasks ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ReconDBUpdateTask
argument_list|>
name|getRegisteredTasks
parameter_list|()
block|{
return|return
name|reconDBUpdateTasks
return|;
block|}
comment|/**    * Wait on results of all tasks.    * @param results Set of Futures.    * @param events Events.    * @return List of failed task names    * @throws ExecutionException execution Exception    * @throws InterruptedException Interrupted Exception    */
DECL|method|processTaskResults (List<Future<Pair>> results, OMUpdateEventBatch events)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|processTaskResults
parameter_list|(
name|List
argument_list|<
name|Future
argument_list|<
name|Pair
argument_list|>
argument_list|>
name|results
parameter_list|,
name|OMUpdateEventBatch
name|events
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|failedTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Pair
argument_list|>
name|f
range|:
name|results
control|)
block|{
name|String
name|taskName
init|=
name|f
operator|.
name|get
argument_list|()
operator|.
name|getLeft
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Boolean
operator|)
name|f
operator|.
name|get
argument_list|()
operator|.
name|getRight
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed task : "
operator|+
name|taskName
argument_list|)
expr_stmt|;
name|failedTasks
operator|.
name|add
argument_list|(
name|f
operator|.
name|get
argument_list|()
operator|.
name|getLeft
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskFailureCounter
operator|.
name|get
argument_list|(
name|taskName
argument_list|)
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|storeLastCompletedTransaction
argument_list|(
name|taskName
argument_list|,
name|events
operator|.
name|getLastEventInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|failedTasks
return|;
block|}
block|}
end_class

end_unit

