begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfoGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerKeyPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|ContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|KeyMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|KeyMetadata
operator|.
name|ContainerBlockMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|KeysResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|recovery
operator|.
name|ReconOMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|ContainerDBServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconConstants
operator|.
name|FETCH_ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconConstants
operator|.
name|PREV_CONTAINER_ID_DEFAULT_VALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconConstants
operator|.
name|RECON_QUERY_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconConstants
operator|.
name|RECON_QUERY_PREVKEY
import|;
end_import

begin_comment
comment|/**  * Endpoint for querying keys that belong to a container.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/containers"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|class|ContainerKeyService
specifier|public
class|class
name|ContainerKeyService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerKeyService
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
DECL|field|containerDBServiceProvider
specifier|private
name|ContainerDBServiceProvider
name|containerDBServiceProvider
decl_stmt|;
annotation|@
name|Inject
DECL|field|omMetadataManager
specifier|private
name|ReconOMMetadataManager
name|omMetadataManager
decl_stmt|;
comment|/**    * Return @{@link org.apache.hadoop.ozone.recon.api.types.ContainerMetadata}    * for the containers starting from the given "prev-key" query param for the    * given "limit". The given "prev-key" is skipped from the results returned.    *    * @param limit max no. of containers to get.    * @param prevKey the containerID after which results are returned.    * @return {@link Response}    */
annotation|@
name|GET
DECL|method|getContainers ( @efaultValueFETCH_ALL) @ueryParamRECON_QUERY_LIMIT) int limit, @DefaultValue(PREV_CONTAINER_ID_DEFAULT_VALUE) @QueryParam(RECON_QUERY_PREVKEY) long prevKey)
specifier|public
name|Response
name|getContainers
parameter_list|(
annotation|@
name|DefaultValue
argument_list|(
name|FETCH_ALL
argument_list|)
annotation|@
name|QueryParam
argument_list|(
name|RECON_QUERY_LIMIT
argument_list|)
name|int
name|limit
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
name|PREV_CONTAINER_ID_DEFAULT_VALUE
argument_list|)
annotation|@
name|QueryParam
argument_list|(
name|RECON_QUERY_PREVKEY
argument_list|)
name|long
name|prevKey
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|ContainerMetadata
argument_list|>
name|containersMap
decl_stmt|;
name|long
name|containersCount
decl_stmt|;
try|try
block|{
name|containersMap
operator|=
name|containerDBServiceProvider
operator|.
name|getContainers
argument_list|(
name|limit
argument_list|,
name|prevKey
argument_list|)
expr_stmt|;
name|containersCount
operator|=
name|containerDBServiceProvider
operator|.
name|getCountForContainers
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ioEx
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
name|ContainersResponse
name|containersResponse
init|=
operator|new
name|ContainersResponse
argument_list|(
name|containersCount
argument_list|,
name|containersMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|containersResponse
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Return @{@link org.apache.hadoop.ozone.recon.api.types.KeyMetadata} for    * all keys that belong to the container identified by the id param    * starting from the given "prev-key" query param for the given "limit".    * The given prevKeyPrefix is skipped from the results returned.    *    * @param containerID the given containerID.    * @param limit max no. of keys to get.    * @param prevKeyPrefix the key prefix after which results are returned.    * @return {@link Response}    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/{id}/keys"
argument_list|)
DECL|method|getKeysForContainer ( @athParamR) Long containerID, @DefaultValue(FETCH_ALL) @QueryParam(RECON_QUERY_LIMIT) int limit, @DefaultValue(StringUtils.EMPTY) @QueryParam(RECON_QUERY_PREVKEY) String prevKeyPrefix)
specifier|public
name|Response
name|getKeysForContainer
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|Long
name|containerID
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
name|FETCH_ALL
argument_list|)
annotation|@
name|QueryParam
argument_list|(
name|RECON_QUERY_LIMIT
argument_list|)
name|int
name|limit
parameter_list|,
annotation|@
name|DefaultValue
argument_list|(
name|StringUtils
operator|.
name|EMPTY
argument_list|)
annotation|@
name|QueryParam
argument_list|(
name|RECON_QUERY_PREVKEY
argument_list|)
name|String
name|prevKeyPrefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|KeyMetadata
argument_list|>
name|keyMetadataMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|totalCount
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|containerKeyPrefixMap
init|=
name|containerDBServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
name|containerID
argument_list|,
name|prevKeyPrefix
argument_list|)
decl_stmt|;
comment|// Get set of Container-Key mappings for given containerId.
for|for
control|(
name|ContainerKeyPrefix
name|containerKeyPrefix
range|:
name|containerKeyPrefixMap
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// Directly calling get() on the Key table instead of iterating since
comment|// only full keys are supported now. When we change to using a prefix
comment|// of the key, this needs to change to prefix seek (TODO).
name|OmKeyInfo
name|omKeyInfo
init|=
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
name|containerKeyPrefix
operator|.
name|getKeyPrefix
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|omKeyInfo
condition|)
block|{
continue|continue;
block|}
comment|// Filter keys by version.
name|List
argument_list|<
name|OmKeyLocationInfoGroup
argument_list|>
name|matchedKeys
init|=
name|omKeyInfo
operator|.
name|getKeyLocationVersions
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|k
lambda|->
operator|(
name|k
operator|.
name|getVersion
argument_list|()
operator|==
name|containerKeyPrefix
operator|.
name|getKeyVersion
argument_list|()
operator|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerBlockMetadata
argument_list|>
name|blockIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OmKeyLocationInfoGroup
name|omKeyLocationInfoGroup
range|:
name|matchedKeys
control|)
block|{
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|omKeyLocationInfos
init|=
name|omKeyLocationInfoGroup
operator|.
name|getLocationList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|c
lambda|->
name|c
operator|.
name|getContainerID
argument_list|()
operator|==
name|containerID
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OmKeyLocationInfo
name|omKeyLocationInfo
range|:
name|omKeyLocationInfos
control|)
block|{
name|blockIds
operator|.
name|add
argument_list|(
operator|new
name|ContainerBlockMetadata
argument_list|(
name|omKeyLocationInfo
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|omKeyLocationInfo
operator|.
name|getLocalID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|ozoneKey
init|=
name|omMetadataManager
operator|.
name|getOzoneKey
argument_list|(
name|omKeyInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|omKeyInfo
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|omKeyInfo
operator|.
name|getKeyName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyMetadataMap
operator|.
name|containsKey
argument_list|(
name|ozoneKey
argument_list|)
condition|)
block|{
name|keyMetadataMap
operator|.
name|get
argument_list|(
name|ozoneKey
argument_list|)
operator|.
name|getVersions
argument_list|()
operator|.
name|add
argument_list|(
name|containerKeyPrefix
operator|.
name|getKeyVersion
argument_list|()
argument_list|)
expr_stmt|;
name|keyMetadataMap
operator|.
name|get
argument_list|(
name|ozoneKey
argument_list|)
operator|.
name|getBlockIds
argument_list|()
operator|.
name|putAll
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|containerKeyPrefix
operator|.
name|getKeyVersion
argument_list|()
argument_list|,
name|blockIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// break the for loop if limit has been reached
if|if
condition|(
name|keyMetadataMap
operator|.
name|size
argument_list|()
operator|==
name|limit
condition|)
block|{
break|break;
block|}
name|KeyMetadata
name|keyMetadata
init|=
operator|new
name|KeyMetadata
argument_list|()
decl_stmt|;
name|keyMetadata
operator|.
name|setBucket
argument_list|(
name|omKeyInfo
operator|.
name|getBucketName
argument_list|()
argument_list|)
expr_stmt|;
name|keyMetadata
operator|.
name|setVolume
argument_list|(
name|omKeyInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|keyMetadata
operator|.
name|setKey
argument_list|(
name|omKeyInfo
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|keyMetadata
operator|.
name|setCreationTime
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|omKeyInfo
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keyMetadata
operator|.
name|setModificationTime
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|omKeyInfo
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keyMetadata
operator|.
name|setDataSize
argument_list|(
name|omKeyInfo
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|keyMetadata
operator|.
name|setVersions
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
name|containerKeyPrefix
operator|.
name|getKeyVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keyMetadataMap
operator|.
name|put
argument_list|(
name|ozoneKey
argument_list|,
name|keyMetadata
argument_list|)
expr_stmt|;
name|keyMetadata
operator|.
name|setBlockIds
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|ContainerBlockMetadata
argument_list|>
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
name|containerKeyPrefix
operator|.
name|getKeyVersion
argument_list|()
argument_list|,
name|blockIds
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|totalCount
operator|=
name|containerDBServiceProvider
operator|.
name|getKeyCountForContainer
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ioEx
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
name|KeysResponse
name|keysResponse
init|=
operator|new
name|KeysResponse
argument_list|(
name|totalCount
argument_list|,
name|keyMetadataMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|keysResponse
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

