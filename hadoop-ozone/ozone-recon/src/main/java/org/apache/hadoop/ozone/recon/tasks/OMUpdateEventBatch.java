begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Wrapper class to hold multiple OM DB update events.  */
end_comment

begin_class
DECL|class|OMUpdateEventBatch
specifier|public
class|class
name|OMUpdateEventBatch
block|{
DECL|field|events
specifier|private
name|List
argument_list|<
name|OMDBUpdateEvent
argument_list|>
name|events
decl_stmt|;
DECL|method|OMUpdateEventBatch (Collection<OMDBUpdateEvent> e)
name|OMUpdateEventBatch
parameter_list|(
name|Collection
argument_list|<
name|OMDBUpdateEvent
argument_list|>
name|e
parameter_list|)
block|{
name|events
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get Sequence Number and timestamp of last event in this batch.    * @return Event Info instance.    */
DECL|method|getLastEventInfo ()
name|OMDBUpdateEvent
operator|.
name|EventInfo
name|getLastEventInfo
parameter_list|()
block|{
if|if
condition|(
name|events
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|OMDBUpdateEvent
operator|.
name|EventInfo
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|events
operator|.
name|get
argument_list|(
name|events
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getEventInfo
argument_list|()
return|;
block|}
block|}
comment|/**    * Return iterator to Event batch.    * @return iterator    */
DECL|method|getIterator ()
specifier|public
name|Iterator
argument_list|<
name|OMDBUpdateEvent
argument_list|>
name|getIterator
parameter_list|()
block|{
return|return
name|events
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**    * Filter events based on Tables.    * @param tables set of tables to filter on.    * @return trimmed event batch.    */
DECL|method|filter (Collection<String> tables)
specifier|public
name|OMUpdateEventBatch
name|filter
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|tables
parameter_list|)
block|{
return|return
operator|new
name|OMUpdateEventBatch
argument_list|(
name|events
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|tables
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

