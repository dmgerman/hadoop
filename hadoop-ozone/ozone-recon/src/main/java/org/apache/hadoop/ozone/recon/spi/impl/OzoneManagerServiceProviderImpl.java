begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.spi.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
operator|.
name|OZONE_SECURITY_ENABLED_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_DB_CHECKPOINT_REQUEST_FLUSH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconConstants
operator|.
name|RECON_OM_SNAPSHOT_DB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|OZONE_RECON_OM_SNAPSHOT_DB_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|RECON_OM_CONNECTION_REQUEST_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|RECON_OM_CONNECTION_REQUEST_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|RECON_OM_CONNECTION_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|RECON_OM_CONNECTION_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|RECON_OM_SNAPSHOT_TASK_FLUSH_PARAM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|RECON_OM_SOCKET_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|RECON_OM_SOCKET_TIMEOUT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconUtils
operator|.
name|getReconDbDir
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconUtils
operator|.
name|makeHttpCall
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconUtils
operator|.
name|untarCheckpointFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|recovery
operator|.
name|ReconOMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|OzoneManagerServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBCheckpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|RocksDBCheckpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Implementation of the OzoneManager Service provider.  */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|OzoneManagerServiceProviderImpl
specifier|public
class|class
name|OzoneManagerServiceProviderImpl
implements|implements
name|OzoneManagerServiceProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneManagerServiceProviderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dbCheckpointEndPoint
specifier|private
specifier|final
name|String
name|dbCheckpointEndPoint
init|=
literal|"/dbCheckpoint"
decl_stmt|;
DECL|field|httpClient
specifier|private
specifier|final
name|CloseableHttpClient
name|httpClient
decl_stmt|;
DECL|field|omSnapshotDBParentDir
specifier|private
name|File
name|omSnapshotDBParentDir
init|=
literal|null
decl_stmt|;
DECL|field|omDBSnapshotUrl
specifier|private
name|String
name|omDBSnapshotUrl
decl_stmt|;
annotation|@
name|Inject
DECL|field|configuration
specifier|private
name|OzoneConfiguration
name|configuration
decl_stmt|;
annotation|@
name|Inject
DECL|field|omMetadataManager
specifier|private
name|ReconOMMetadataManager
name|omMetadataManager
decl_stmt|;
annotation|@
name|Inject
DECL|method|OzoneManagerServiceProviderImpl (OzoneConfiguration configuration)
specifier|public
name|OzoneManagerServiceProviderImpl
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|)
block|{
name|String
name|ozoneManagerHttpAddress
init|=
name|configuration
operator|.
name|get
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|String
name|ozoneManagerHttpsAddress
init|=
name|configuration
operator|.
name|get
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTPS_ADDRESS_KEY
argument_list|)
decl_stmt|;
name|omSnapshotDBParentDir
operator|=
name|getReconDbDir
argument_list|(
name|configuration
argument_list|,
name|OZONE_RECON_OM_SNAPSHOT_DB_DIR
argument_list|)
expr_stmt|;
name|boolean
name|ozoneSecurityEnabled
init|=
name|configuration
operator|.
name|getBoolean
argument_list|(
name|OZONE_SECURITY_ENABLED_KEY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|socketTimeout
init|=
operator|(
name|int
operator|)
name|configuration
operator|.
name|getTimeDuration
argument_list|(
name|RECON_OM_SOCKET_TIMEOUT
argument_list|,
name|RECON_OM_SOCKET_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|int
name|connectionTimeout
init|=
operator|(
name|int
operator|)
name|configuration
operator|.
name|getTimeDuration
argument_list|(
name|RECON_OM_CONNECTION_TIMEOUT
argument_list|,
name|RECON_OM_CONNECTION_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|int
name|connectionRequestTimeout
init|=
operator|(
name|int
operator|)
name|configuration
operator|.
name|getTimeDuration
argument_list|(
name|RECON_OM_CONNECTION_REQUEST_TIMEOUT
argument_list|,
name|RECON_OM_CONNECTION_REQUEST_TIMEOUT_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|RequestConfig
name|config
init|=
name|RequestConfig
operator|.
name|custom
argument_list|()
operator|.
name|setConnectTimeout
argument_list|(
name|socketTimeout
argument_list|)
operator|.
name|setConnectionRequestTimeout
argument_list|(
name|connectionTimeout
argument_list|)
operator|.
name|setSocketTimeout
argument_list|(
name|connectionRequestTimeout
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|httpClient
operator|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|setDefaultRequestConfig
argument_list|(
name|config
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|omDBSnapshotUrl
operator|=
literal|"http://"
operator|+
name|ozoneManagerHttpAddress
operator|+
name|dbCheckpointEndPoint
expr_stmt|;
if|if
condition|(
name|ozoneSecurityEnabled
condition|)
block|{
name|omDBSnapshotUrl
operator|=
literal|"https://"
operator|+
name|ozoneManagerHttpsAddress
operator|+
name|dbCheckpointEndPoint
expr_stmt|;
block|}
name|boolean
name|flushParam
init|=
name|configuration
operator|.
name|getBoolean
argument_list|(
name|RECON_OM_SNAPSHOT_TASK_FLUSH_PARAM
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|flushParam
condition|)
block|{
name|omDBSnapshotUrl
operator|+=
literal|"?"
operator|+
name|OZONE_DB_CHECKPOINT_REQUEST_FLUSH
operator|+
literal|"=true"
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|updateReconOmDBWithNewSnapshot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateReconOmDBWithNewSnapshot ()
specifier|public
name|void
name|updateReconOmDBWithNewSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Obtain the current DB snapshot from OM and
comment|//update the in house OM metadata managed DB instance.
name|DBCheckpoint
name|dbSnapshot
init|=
name|getOzoneManagerDBSnapshot
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbSnapshot
operator|!=
literal|null
operator|&&
name|dbSnapshot
operator|.
name|getCheckpointLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|omMetadataManager
operator|.
name|updateOmDB
argument_list|(
name|dbSnapshot
operator|.
name|getCheckpointLocation
argument_list|()
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to refresh Recon OM DB Snapshot. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Null snapshot location got from OM."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getOMMetadataManagerInstance ()
specifier|public
name|OMMetadataManager
name|getOMMetadataManagerInstance
parameter_list|()
block|{
return|return
name|omMetadataManager
return|;
block|}
comment|/**    * Method to obtain current OM DB Snapshot.    * @return DBCheckpoint instance.    */
annotation|@
name|VisibleForTesting
DECL|method|getOzoneManagerDBSnapshot ()
specifier|protected
name|DBCheckpoint
name|getOzoneManagerDBSnapshot
parameter_list|()
block|{
name|String
name|snapshotFileName
init|=
name|RECON_OM_SNAPSHOT_DB
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|omSnapshotDBParentDir
argument_list|,
name|snapshotFileName
operator|+
literal|".tar.gz"
argument_list|)
decl_stmt|;
try|try
block|{
try|try
init|(
name|InputStream
name|inputStream
init|=
name|makeHttpCall
argument_list|(
name|httpClient
argument_list|,
name|omDBSnapshotUrl
argument_list|)
init|)
block|{
name|FileUtils
operator|.
name|copyInputStreamToFile
argument_list|(
name|inputStream
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
block|}
comment|//Untar the checkpoint file.
name|Path
name|untarredDbDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|omSnapshotDBParentDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|snapshotFileName
argument_list|)
decl_stmt|;
name|untarCheckpointFile
argument_list|(
name|targetFile
argument_list|,
name|untarredDbDir
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
comment|//TODO Create Checkpoint based on OM DB type.
comment|// Currently, OM DB type is not configurable. Hence, defaulting to
comment|// RocksDB.
return|return
operator|new
name|RocksDBCheckpoint
argument_list|(
name|untarredDbDir
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to obtain Ozone Manager DB Snapshot. "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

