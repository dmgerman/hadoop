begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Recon's implementation of the OM Metadata manager. By extending and  * relying on the OmMetadataManagerImpl, we can make sure all changes made to  * schema in OM will be automatically picked up by Recon.  */
end_comment

begin_class
DECL|class|ReconOmMetadataManagerImpl
specifier|public
class|class
name|ReconOmMetadataManagerImpl
extends|extends
name|OmMetadataManagerImpl
implements|implements
name|ReconOMMetadataManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReconOmMetadataManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
DECL|field|ozoneConfiguration
specifier|private
name|OzoneConfiguration
name|ozoneConfiguration
decl_stmt|;
annotation|@
name|Inject
DECL|method|ReconOmMetadataManagerImpl (OzoneConfiguration configuration)
specifier|public
name|ReconOmMetadataManagerImpl
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|ozoneConfiguration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start (OzoneConfiguration configuration)
specifier|public
name|void
name|start
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting ReconOMMetadataManagerImpl"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Replace existing DB instance with new one.    *    * @param dbFile new DB file location.    */
DECL|method|initializeNewRdbStore (File dbFile)
specifier|private
name|void
name|initializeNewRdbStore
parameter_list|(
name|File
name|dbFile
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|DBStoreBuilder
name|dbStoreBuilder
init|=
name|DBStoreBuilder
operator|.
name|newBuilder
argument_list|(
name|ozoneConfiguration
argument_list|)
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
name|dbFile
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setPath
argument_list|(
name|dbFile
operator|.
name|toPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|addOMTablesAndCodecs
argument_list|(
name|dbStoreBuilder
argument_list|)
expr_stmt|;
name|DBStore
name|newStore
init|=
name|dbStoreBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|setStore
argument_list|(
name|newStore
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created new OM DB snapshot at {}."
argument_list|,
name|dbFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to initialize Recon OM DB snapshot store."
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|initializeOmTables
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateOmDB (File newDbLocation)
specifier|public
name|void
name|updateOmDB
parameter_list|(
name|File
name|newDbLocation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|File
name|oldDBLocation
init|=
name|getStore
argument_list|()
operator|.
name|getDbLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldDBLocation
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up old OM snapshot db at {}."
argument_list|,
name|oldDBLocation
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|oldDBLocation
argument_list|)
expr_stmt|;
block|}
block|}
name|initializeNewRdbStore
argument_list|(
name|newDbLocation
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

