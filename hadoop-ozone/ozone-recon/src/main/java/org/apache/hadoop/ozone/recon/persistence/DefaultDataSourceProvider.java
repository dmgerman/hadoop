begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.ozone.recon.persistence
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|persistence
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sqlite
operator|.
name|SQLiteDataSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jolbox
operator|.
name|bonecp
operator|.
name|BoneCPDataSource
import|;
end_import

begin_comment
comment|/**  * Provide a {@link javax.sql.DataSource} for the application.  */
end_comment

begin_class
DECL|class|DefaultDataSourceProvider
specifier|public
class|class
name|DefaultDataSourceProvider
implements|implements
name|Provider
argument_list|<
name|DataSource
argument_list|>
block|{
annotation|@
name|Inject
DECL|field|configuration
specifier|private
name|DataSourceConfiguration
name|configuration
decl_stmt|;
comment|/**    * Create a pooled datasource for the application.    *    * Default sqlite database does not work with a connection pool, actually    * most embedded databases do not, hence returning native implementation for    * default db.    */
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|DataSource
name|get
parameter_list|()
block|{
if|if
condition|(
name|StringUtils
operator|.
name|contains
argument_list|(
name|configuration
operator|.
name|getJdbcUrl
argument_list|()
argument_list|,
literal|"sqlite"
argument_list|)
condition|)
block|{
name|SQLiteDataSource
name|ds
init|=
operator|new
name|SQLiteDataSource
argument_list|()
decl_stmt|;
name|ds
operator|.
name|setUrl
argument_list|(
name|configuration
operator|.
name|getJdbcUrl
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ds
return|;
block|}
name|BoneCPDataSource
name|cpDataSource
init|=
operator|new
name|BoneCPDataSource
argument_list|()
decl_stmt|;
name|cpDataSource
operator|.
name|setDriverClass
argument_list|(
name|configuration
operator|.
name|getDriverClass
argument_list|()
argument_list|)
expr_stmt|;
name|cpDataSource
operator|.
name|setJdbcUrl
argument_list|(
name|configuration
operator|.
name|getJdbcUrl
argument_list|()
argument_list|)
expr_stmt|;
name|cpDataSource
operator|.
name|setUsername
argument_list|(
name|configuration
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|cpDataSource
operator|.
name|setPassword
argument_list|(
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|cpDataSource
operator|.
name|setDefaultAutoCommit
argument_list|(
name|configuration
operator|.
name|setAutoCommit
argument_list|()
argument_list|)
expr_stmt|;
name|cpDataSource
operator|.
name|setConnectionTimeoutInMs
argument_list|(
name|configuration
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|cpDataSource
operator|.
name|setMaxConnectionsPerPartition
argument_list|(
name|configuration
operator|.
name|getMaxActiveConnections
argument_list|()
argument_list|)
expr_stmt|;
name|cpDataSource
operator|.
name|setMaxConnectionAgeInSeconds
argument_list|(
name|configuration
operator|.
name|getMaxConnectionAge
argument_list|()
argument_list|)
expr_stmt|;
name|cpDataSource
operator|.
name|setIdleMaxAgeInSeconds
argument_list|(
name|configuration
operator|.
name|getMaxIdleConnectionAge
argument_list|()
argument_list|)
expr_stmt|;
name|cpDataSource
operator|.
name|setIdleConnectionTestPeriodInSeconds
argument_list|(
name|configuration
operator|.
name|getIdleConnectionTestPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|cpDataSource
operator|.
name|setConnectionTestStatement
argument_list|(
name|configuration
operator|.
name|getConnectionTestStatement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cpDataSource
return|;
block|}
block|}
end_class

end_unit

