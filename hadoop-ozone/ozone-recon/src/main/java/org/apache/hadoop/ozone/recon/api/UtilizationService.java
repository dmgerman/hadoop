begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|daos
operator|.
name|FileCountBySizeDao
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|pojos
operator|.
name|FileCountBySize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Endpoint for querying the counts of a certain file Size.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/utilization"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
DECL|class|UtilizationService
specifier|public
class|class
name|UtilizationService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UtilizationService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fileCountBySizeDao
specifier|private
name|FileCountBySizeDao
name|fileCountBySizeDao
decl_stmt|;
annotation|@
name|Inject
DECL|field|sqlConfiguration
specifier|private
name|Configuration
name|sqlConfiguration
decl_stmt|;
DECL|method|getDao ()
name|FileCountBySizeDao
name|getDao
parameter_list|()
block|{
if|if
condition|(
name|fileCountBySizeDao
operator|==
literal|null
condition|)
block|{
name|fileCountBySizeDao
operator|=
operator|new
name|FileCountBySizeDao
argument_list|(
name|sqlConfiguration
argument_list|)
expr_stmt|;
block|}
return|return
name|fileCountBySizeDao
return|;
block|}
comment|/**    * Return the file counts from Recon DB.    * @return {@link Response}    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/fileCount"
argument_list|)
DECL|method|getFileCounts ()
specifier|public
name|Response
name|getFileCounts
parameter_list|()
block|{
name|fileCountBySizeDao
operator|=
name|getDao
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|FileCountBySize
argument_list|>
name|resultSet
init|=
name|fileCountBySizeDao
operator|.
name|findAll
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|resultSet
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

