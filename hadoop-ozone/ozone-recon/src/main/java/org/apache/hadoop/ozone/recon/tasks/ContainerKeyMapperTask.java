begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfoGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerKeyPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|ContainerDBServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|OzoneManagerServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|TableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class to iterate over the OM DB and populate the Recon container DB with  * the container -> Key reverse mapping.  */
end_comment

begin_class
DECL|class|ContainerKeyMapperTask
specifier|public
class|class
name|ContainerKeyMapperTask
implements|implements
name|Runnable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerKeyMapperTask
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ozoneManagerServiceProvider
specifier|private
name|OzoneManagerServiceProvider
name|ozoneManagerServiceProvider
decl_stmt|;
DECL|field|containerDBServiceProvider
specifier|private
name|ContainerDBServiceProvider
name|containerDBServiceProvider
decl_stmt|;
DECL|method|ContainerKeyMapperTask ( OzoneManagerServiceProvider ozoneManagerServiceProvider, ContainerDBServiceProvider containerDBServiceProvider)
specifier|public
name|ContainerKeyMapperTask
parameter_list|(
name|OzoneManagerServiceProvider
name|ozoneManagerServiceProvider
parameter_list|,
name|ContainerDBServiceProvider
name|containerDBServiceProvider
parameter_list|)
block|{
name|this
operator|.
name|ozoneManagerServiceProvider
operator|=
name|ozoneManagerServiceProvider
expr_stmt|;
name|this
operator|.
name|containerDBServiceProvider
operator|=
name|containerDBServiceProvider
expr_stmt|;
block|}
comment|/**    * Read Key -> ContainerId data from OM snapshot DB and write reverse map    * (container, key) -> count to Recon Container DB.    */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|omKeyCount
init|=
literal|0
decl_stmt|;
name|int
name|containerCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting a run of ContainerKeyMapperTask."
argument_list|)
expr_stmt|;
name|Instant
name|start
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
comment|//Update OM DB Snapshot.
name|ozoneManagerServiceProvider
operator|.
name|updateReconOmDBWithNewSnapshot
argument_list|()
expr_stmt|;
name|OMMetadataManager
name|omMetadataManager
init|=
name|ozoneManagerServiceProvider
operator|.
name|getOMMetadataManagerInstance
argument_list|()
decl_stmt|;
name|Table
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
name|omKeyInfoTable
init|=
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
decl_stmt|;
try|try
init|(
name|TableIterator
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Table
operator|.
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
argument_list|>
name|keyIter
init|=
name|omKeyInfoTable
operator|.
name|iterator
argument_list|()
init|)
block|{
while|while
condition|(
name|keyIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Table
operator|.
name|KeyValue
argument_list|<
name|String
argument_list|,
name|OmKeyInfo
argument_list|>
name|kv
init|=
name|keyIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|StringBuilder
name|key
init|=
operator|new
name|StringBuilder
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|OmKeyInfo
name|omKeyInfo
init|=
name|kv
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|OmKeyLocationInfoGroup
name|omKeyLocationInfoGroup
range|:
name|omKeyInfo
operator|.
name|getKeyLocationVersions
argument_list|()
control|)
block|{
name|long
name|keyVersion
init|=
name|omKeyLocationInfoGroup
operator|.
name|getVersion
argument_list|()
decl_stmt|;
for|for
control|(
name|OmKeyLocationInfo
name|omKeyLocationInfo
range|:
name|omKeyLocationInfoGroup
operator|.
name|getLocationList
argument_list|()
control|)
block|{
name|long
name|containerId
init|=
name|omKeyLocationInfo
operator|.
name|getContainerID
argument_list|()
decl_stmt|;
name|ContainerKeyPrefix
name|containerKeyPrefix
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|keyVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerDBServiceProvider
operator|.
name|getCountForForContainerKeyPrefix
argument_list|(
name|containerKeyPrefix
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Save on writes. No need to save same container-key prefix
comment|// mapping again.
name|containerDBServiceProvider
operator|.
name|storeContainerKeyMapping
argument_list|(
name|containerKeyPrefix
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|containerCount
operator|++
expr_stmt|;
block|}
block|}
name|omKeyCount
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed the run of ContainerKeyMapperTask."
argument_list|)
expr_stmt|;
name|Instant
name|end
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
name|Duration
operator|.
name|between
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"It took me "
operator|+
operator|(
name|double
operator|)
name|duration
operator|/
literal|1000.0
operator|+
literal|" seconds to "
operator|+
literal|"process "
operator|+
name|omKeyCount
operator|+
literal|" keys and "
operator|+
name|containerCount
operator|+
literal|" "
operator|+
literal|"containers."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to populate Container Key Prefix data in Recon DB. "
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

