begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.persistence
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|org
operator|.
name|aopalliance
operator|.
name|intercept
operator|.
name|MethodInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|aopalliance
operator|.
name|intercept
operator|.
name|MethodInvocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|datasource
operator|.
name|DataSourceTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|UnexpectedRollbackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|DefaultTransactionDefinition
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_comment
comment|/**  * A {@link MethodInterceptor} that implements nested transactions.  *<p>  * Only the outermost transactional method will<code>commit()</code> or  *<code>rollback()</code> the contextual transaction. This can be verified  * through {@link TransactionStatus#isNewTransaction()}, which returns  *<code>true</code> only for the outermost transactional method call.  *<p>  */
end_comment

begin_class
DECL|class|TransactionalMethodInterceptor
specifier|public
class|class
name|TransactionalMethodInterceptor
implements|implements
name|MethodInterceptor
block|{
DECL|field|transactionManagerProvider
specifier|private
name|Provider
argument_list|<
name|DataSourceTransactionManager
argument_list|>
name|transactionManagerProvider
decl_stmt|;
DECL|method|TransactionalMethodInterceptor ( Provider<DataSourceTransactionManager> transactionManagerProvider)
name|TransactionalMethodInterceptor
parameter_list|(
name|Provider
argument_list|<
name|DataSourceTransactionManager
argument_list|>
name|transactionManagerProvider
parameter_list|)
block|{
name|this
operator|.
name|transactionManagerProvider
operator|=
name|transactionManagerProvider
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke (MethodInvocation invocation)
specifier|public
name|Object
name|invoke
parameter_list|(
name|MethodInvocation
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|DataSourceTransactionManager
name|transactionManager
init|=
name|transactionManagerProvider
operator|.
name|get
argument_list|()
decl_stmt|;
name|DefaultTransactionDefinition
name|transactionDefinition
init|=
operator|new
name|DefaultTransactionDefinition
argument_list|()
decl_stmt|;
name|TransactionStatus
name|transaction
init|=
name|transactionManager
operator|.
name|getTransaction
argument_list|(
name|transactionDefinition
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|result
init|=
name|invocation
operator|.
name|proceed
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|transaction
operator|.
name|isNewTransaction
argument_list|()
condition|)
block|{
name|transactionManager
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnexpectedRollbackException
name|ignore
parameter_list|)
block|{       }
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|transaction
operator|.
name|isNewTransaction
argument_list|()
condition|)
block|{
name|transactionManager
operator|.
name|rollback
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

