begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|daos
operator|.
name|FileCountBySizeDao
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|pojos
operator|.
name|FileCountBySize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test for File size count service.  */
end_comment

begin_class
DECL|class|TestUtilizationService
specifier|public
class|class
name|TestUtilizationService
block|{
DECL|field|utilizationService
specifier|private
name|UtilizationService
name|utilizationService
decl_stmt|;
DECL|field|maxBinSize
specifier|private
name|int
name|maxBinSize
init|=
literal|42
decl_stmt|;
DECL|method|setUpResultList ()
specifier|private
name|List
argument_list|<
name|FileCountBySize
argument_list|>
name|setUpResultList
parameter_list|()
block|{
name|List
argument_list|<
name|FileCountBySize
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxBinSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|maxBinSize
operator|-
literal|1
condition|)
block|{
comment|// for last bin file count is 41.
name|resultList
operator|.
name|add
argument_list|(
operator|new
name|FileCountBySize
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|(
name|long
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// count of files of upperBound is equal to it's index.
name|resultList
operator|.
name|add
argument_list|(
operator|new
name|FileCountBySize
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
operator|(
literal|10
operator|+
name|i
operator|)
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resultList
return|;
block|}
annotation|@
name|Test
DECL|method|testGetFileCounts ()
specifier|public
name|void
name|testGetFileCounts
parameter_list|()
block|{
name|List
argument_list|<
name|FileCountBySize
argument_list|>
name|resultList
init|=
name|setUpResultList
argument_list|()
decl_stmt|;
name|FileCountBySizeDao
name|fileCountBySizeDao
init|=
name|mock
argument_list|(
name|FileCountBySizeDao
operator|.
name|class
argument_list|)
decl_stmt|;
name|utilizationService
operator|=
name|mock
argument_list|(
name|UtilizationService
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|utilizationService
operator|.
name|getFileCounts
argument_list|()
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|utilizationService
operator|.
name|getDao
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileCountBySizeDao
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fileCountBySizeDao
operator|.
name|findAll
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resultList
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|utilizationService
operator|.
name|getFileCounts
argument_list|()
decl_stmt|;
comment|// get result list from Response entity
name|List
argument_list|<
name|FileCountBySize
argument_list|>
name|responseList
init|=
operator|(
name|List
argument_list|<
name|FileCountBySize
argument_list|>
operator|)
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|fileCountBySizeDao
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|findAll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBinSize
argument_list|,
name|responseList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultList
argument_list|,
name|responseList
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

