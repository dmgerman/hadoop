begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.persistence
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|persistence
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|UtilizationSchemaDefinition
operator|.
name|CLUSTER_GROWTH_DAILY_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|UtilizationSchemaDefinition
operator|.
name|FILE_COUNT_BY_SIZE_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|ClusterGrowthDailyTable
operator|.
name|CLUSTER_GROWTH_DAILY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|UtilizationSchemaDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|daos
operator|.
name|ClusterGrowthDailyDao
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|daos
operator|.
name|FileCountBySizeDao
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|pojos
operator|.
name|ClusterGrowthDaily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|pojos
operator|.
name|FileCountBySize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|records
operator|.
name|FileCountBySizeRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|UniqueKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test persistence module provides connection and transaction awareness.  */
end_comment

begin_class
DECL|class|TestUtilizationSchemaDefinition
specifier|public
class|class
name|TestUtilizationSchemaDefinition
extends|extends
name|AbstractSqlDatabaseTest
block|{
annotation|@
name|Test
DECL|method|testReconSchemaCreated ()
specifier|public
name|void
name|testReconSchemaCreated
parameter_list|()
throws|throws
name|Exception
block|{
name|UtilizationSchemaDefinition
name|schemaDefinition
init|=
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|UtilizationSchemaDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|schemaDefinition
operator|.
name|initializeSchema
argument_list|()
expr_stmt|;
name|Connection
name|connection
init|=
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
operator|.
name|getConnection
argument_list|()
decl_stmt|;
comment|// Verify table definition
name|DatabaseMetaData
name|metaData
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|metaData
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|CLUSTER_GROWTH_DAILY_TABLE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|expectedPairs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedPairs
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"timestamp"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPairs
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"datanode_id"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPairs
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"datanode_host"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPairs
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"rack_id"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPairs
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"available_size"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPairs
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"used_size"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPairs
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"container_count"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPairs
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"block_count"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|actualPairs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|actualPairs
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|,
name|resultSet
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|actualPairs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPairs
argument_list|,
name|actualPairs
argument_list|)
expr_stmt|;
name|ResultSet
name|resultSetFileCount
init|=
name|metaData
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|FILE_COUNT_BY_SIZE_TABLE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|expectedPairsFileCount
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedPairsFileCount
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"file_size"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|expectedPairsFileCount
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"count"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|actualPairsFileCount
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|resultSetFileCount
operator|.
name|next
argument_list|()
condition|)
block|{
name|actualPairsFileCount
operator|.
name|add
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
name|resultSetFileCount
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|,
name|resultSetFileCount
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Unexpected number of columns"
argument_list|,
literal|2
argument_list|,
name|actualPairsFileCount
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Columns Do not Match "
argument_list|,
name|expectedPairsFileCount
argument_list|,
name|actualPairsFileCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterGrowthDailyCRUDOperations ()
specifier|public
name|void
name|testClusterGrowthDailyCRUDOperations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Verify table exists
name|UtilizationSchemaDefinition
name|schemaDefinition
init|=
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|UtilizationSchemaDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|schemaDefinition
operator|.
name|initializeSchema
argument_list|()
expr_stmt|;
name|DataSource
name|ds
init|=
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|ds
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|DatabaseMetaData
name|metaData
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|metaData
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|CLUSTER_GROWTH_DAILY_TABLE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CLUSTER_GROWTH_DAILY_TABLE_NAME
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ClusterGrowthDailyDao
name|dao
init|=
operator|new
name|ClusterGrowthDailyDao
argument_list|(
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClusterGrowthDaily
name|newRecord
init|=
operator|new
name|ClusterGrowthDaily
argument_list|()
decl_stmt|;
name|newRecord
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|newRecord
operator|.
name|setDatanodeId
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|newRecord
operator|.
name|setDatanodeHost
argument_list|(
literal|"host1"
argument_list|)
expr_stmt|;
name|newRecord
operator|.
name|setRackId
argument_list|(
literal|"rack1"
argument_list|)
expr_stmt|;
name|newRecord
operator|.
name|setAvailableSize
argument_list|(
literal|1024L
argument_list|)
expr_stmt|;
name|newRecord
operator|.
name|setUsedSize
argument_list|(
literal|512L
argument_list|)
expr_stmt|;
name|newRecord
operator|.
name|setContainerCount
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|newRecord
operator|.
name|setBlockCount
argument_list|(
literal|25
argument_list|)
expr_stmt|;
comment|// Create
name|dao
operator|.
name|insert
argument_list|(
name|newRecord
argument_list|)
expr_stmt|;
comment|// Read
name|ClusterGrowthDaily
name|dbRecord
init|=
name|dao
operator|.
name|findById
argument_list|(
name|getDslContext
argument_list|()
operator|.
name|newRecord
argument_list|(
name|CLUSTER_GROWTH_DAILY
operator|.
name|TIMESTAMP
argument_list|,
name|CLUSTER_GROWTH_DAILY
operator|.
name|DATANODE_ID
argument_list|)
operator|.
name|value1
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|now
argument_list|)
argument_list|)
operator|.
name|value2
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host1"
argument_list|,
name|dbRecord
operator|.
name|getDatanodeHost
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rack1"
argument_list|,
name|dbRecord
operator|.
name|getRackId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|1024
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getAvailableSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|512
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getContainerCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|25
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update
name|dbRecord
operator|.
name|setUsedSize
argument_list|(
literal|700L
argument_list|)
expr_stmt|;
name|dbRecord
operator|.
name|setBlockCount
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|dao
operator|.
name|update
argument_list|(
name|dbRecord
argument_list|)
expr_stmt|;
comment|// Read updated
name|dbRecord
operator|=
name|dao
operator|.
name|findById
argument_list|(
name|getDslContext
argument_list|()
operator|.
name|newRecord
argument_list|(
name|CLUSTER_GROWTH_DAILY
operator|.
name|TIMESTAMP
argument_list|,
name|CLUSTER_GROWTH_DAILY
operator|.
name|DATANODE_ID
argument_list|)
operator|.
name|value1
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|now
argument_list|)
argument_list|)
operator|.
name|value2
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|700
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|30
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete
name|dao
operator|.
name|deleteById
argument_list|(
name|getDslContext
argument_list|()
operator|.
name|newRecord
argument_list|(
name|CLUSTER_GROWTH_DAILY
operator|.
name|TIMESTAMP
argument_list|,
name|CLUSTER_GROWTH_DAILY
operator|.
name|DATANODE_ID
argument_list|)
operator|.
name|value1
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|now
argument_list|)
argument_list|)
operator|.
name|value2
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify
name|dbRecord
operator|=
name|dao
operator|.
name|findById
argument_list|(
name|getDslContext
argument_list|()
operator|.
name|newRecord
argument_list|(
name|CLUSTER_GROWTH_DAILY
operator|.
name|TIMESTAMP
argument_list|,
name|CLUSTER_GROWTH_DAILY
operator|.
name|DATANODE_ID
argument_list|)
operator|.
name|value1
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|now
argument_list|)
argument_list|)
operator|.
name|value2
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dbRecord
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileCountBySizeCRUDOperations ()
specifier|public
name|void
name|testFileCountBySizeCRUDOperations
parameter_list|()
throws|throws
name|SQLException
block|{
name|UtilizationSchemaDefinition
name|schemaDefinition
init|=
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|UtilizationSchemaDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|schemaDefinition
operator|.
name|initializeSchema
argument_list|()
expr_stmt|;
name|DataSource
name|ds
init|=
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|ds
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|DatabaseMetaData
name|metaData
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|resultSet
init|=
name|metaData
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|FILE_COUNT_BY_SIZE_TABLE_NAME
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FILE_COUNT_BY_SIZE_TABLE_NAME
argument_list|,
name|resultSet
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FileCountBySizeDao
name|fileCountBySizeDao
init|=
operator|new
name|FileCountBySizeDao
argument_list|(
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|FileCountBySize
name|newRecord
init|=
operator|new
name|FileCountBySize
argument_list|()
decl_stmt|;
name|newRecord
operator|.
name|setFileSize
argument_list|(
literal|1024L
argument_list|)
expr_stmt|;
name|newRecord
operator|.
name|setCount
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|fileCountBySizeDao
operator|.
name|insert
argument_list|(
name|newRecord
argument_list|)
expr_stmt|;
name|FileCountBySize
name|dbRecord
init|=
name|fileCountBySizeDao
operator|.
name|findById
argument_list|(
literal|1024L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|dbRecord
operator|.
name|setCount
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
name|fileCountBySizeDao
operator|.
name|update
argument_list|(
name|dbRecord
argument_list|)
expr_stmt|;
name|dbRecord
operator|=
name|fileCountBySizeDao
operator|.
name|findById
argument_list|(
literal|1024L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Table
argument_list|<
name|FileCountBySizeRecord
argument_list|>
name|fileCountBySizeRecordTable
init|=
name|fileCountBySizeDao
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|UniqueKey
argument_list|<
name|FileCountBySizeRecord
argument_list|>
argument_list|>
name|tableKeys
init|=
name|fileCountBySizeRecordTable
operator|.
name|getKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|UniqueKey
name|key
range|:
name|tableKeys
control|)
block|{
name|String
name|name
init|=
name|key
operator|.
name|getName
argument_list|()
decl_stmt|;
block|}
block|}
block|}
end_class

end_unit

