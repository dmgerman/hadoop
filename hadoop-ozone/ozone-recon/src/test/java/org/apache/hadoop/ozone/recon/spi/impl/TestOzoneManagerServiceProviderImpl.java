begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.spi.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|OZONE_RECON_OM_SNAPSHOT_DB_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|RECON_OM_SNAPSHOT_TASK_INITIAL_DELAY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|RECON_OM_SNAPSHOT_TASK_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|BucketManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|BucketManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|recovery
operator|.
name|ReconOMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|recovery
operator|.
name|ReconOmMetadataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|OzoneManagerServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBCheckpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|api
operator|.
name|mockito
operator|.
name|PowerMockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|core
operator|.
name|classloader
operator|.
name|annotations
operator|.
name|PowerMockIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|core
operator|.
name|classloader
operator|.
name|annotations
operator|.
name|PrepareForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|powermock
operator|.
name|modules
operator|.
name|junit4
operator|.
name|PowerMockRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_comment
comment|/**  * Class to test Ozone Manager Service Provider Implementation.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|PowerMockRunner
operator|.
name|class
argument_list|)
annotation|@
name|PowerMockIgnore
argument_list|(
block|{
literal|"javax.management.*"
block|,
literal|"javax.net.ssl.*"
block|}
argument_list|)
annotation|@
name|PrepareForTest
argument_list|(
name|ReconUtils
operator|.
name|class
argument_list|)
DECL|class|TestOzoneManagerServiceProviderImpl
specifier|public
class|class
name|TestOzoneManagerServiceProviderImpl
block|{
DECL|field|omMetadataManager
specifier|private
name|OMMetadataManager
name|omMetadataManager
decl_stmt|;
DECL|field|reconOMMetadataManager
specifier|private
name|ReconOMMetadataManager
name|reconOMMetadataManager
decl_stmt|;
DECL|field|injector
specifier|private
name|Injector
name|injector
decl_stmt|;
DECL|field|ozoneManagerServiceProvider
specifier|private
name|OzoneManagerServiceProviderImpl
name|ozoneManagerServiceProvider
decl_stmt|;
annotation|@
name|Rule
DECL|field|temporaryFolder
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeNewOmMetadataManager
argument_list|()
expr_stmt|;
name|injector
operator|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
try|try
block|{
name|initializeNewOmMetadataManager
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|OzoneConfiguration
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|getTestOzoneConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|reconOMMetadataManager
operator|=
name|getTestMetadataManager
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|ReconOMMetadataManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|reconOMMetadataManager
argument_list|)
expr_stmt|;
name|ozoneManagerServiceProvider
operator|=
operator|new
name|OzoneManagerServiceProviderImpl
argument_list|(
name|getTestOzoneConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|OzoneManagerServiceProvider
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|ozoneManagerServiceProvider
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testStart ()
specifier|public
name|void
name|testStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reconOMMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
literal|"/sampleVol/bucketOne/key_one"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|reconOMMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
literal|"/sampleVol/bucketOne/key_two"
argument_list|)
argument_list|)
expr_stmt|;
name|writeDataToOm
argument_list|()
expr_stmt|;
name|DBCheckpoint
name|checkpoint
init|=
name|omMetadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|getCheckpoint
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|File
name|tarFile
init|=
name|OmUtils
operator|.
name|createTarFile
argument_list|(
name|checkpoint
operator|.
name|getCheckpointLocation
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tarFile
argument_list|)
decl_stmt|;
name|PowerMockito
operator|.
name|stub
argument_list|(
name|PowerMockito
operator|.
name|method
argument_list|(
name|ReconUtils
operator|.
name|class
argument_list|,
literal|"makeHttpCall"
argument_list|,
name|CloseableHttpClient
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|toReturn
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
name|ozoneManagerServiceProvider
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reconOMMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
literal|"/sampleVol/bucketOne/key_one"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reconOMMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
literal|"/sampleVol/bucketOne/key_two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetOMMetadataManagerInstance ()
specifier|public
name|void
name|testGetOMMetadataManagerInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|OMMetadataManager
name|omMetaMgr
init|=
name|ozoneManagerServiceProvider
operator|.
name|getOMMetadataManagerInstance
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|omMetaMgr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetOzoneManagerDBSnapshot ()
specifier|public
name|void
name|testGetOzoneManagerDBSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|reconOmSnapshotDbDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|File
name|checkpointDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|reconOmSnapshotDbDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"testGetOzoneManagerDBSnapshot"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|checkpointDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|file1
init|=
name|Paths
operator|.
name|get
argument_list|(
name|checkpointDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"file1"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|String
name|str
init|=
literal|"File1 Contents"
decl_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|file2
init|=
name|Paths
operator|.
name|get
argument_list|(
name|checkpointDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"file2"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|str
operator|=
literal|"File2 Contents"
expr_stmt|;
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Create test tar file.
name|File
name|tarFile
init|=
name|OmUtils
operator|.
name|createTarFile
argument_list|(
name|checkpointDir
operator|.
name|toPath
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|fileInputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tarFile
argument_list|)
decl_stmt|;
name|PowerMockito
operator|.
name|stub
argument_list|(
name|PowerMockito
operator|.
name|method
argument_list|(
name|ReconUtils
operator|.
name|class
argument_list|,
literal|"makeHttpCall"
argument_list|,
name|CloseableHttpClient
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|toReturn
argument_list|(
name|fileInputStream
argument_list|)
expr_stmt|;
name|DBCheckpoint
name|checkpoint
init|=
name|ozoneManagerServiceProvider
operator|.
name|getOzoneManagerDBSnapshot
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkpoint
operator|.
name|getCheckpointLocation
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkpoint
operator|.
name|getCheckpointLocation
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|listFiles
argument_list|()
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get Test OzoneConfiguration instance.    * @return OzoneConfiguration    * @throws IOException ioEx.    */
DECL|method|getTestOzoneConfiguration ()
specifier|private
name|OzoneConfiguration
name|getTestOzoneConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneConfiguration
name|configuration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|RECON_OM_SNAPSHOT_TASK_INITIAL_DELAY
argument_list|,
literal|"0m"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|RECON_OM_SNAPSHOT_TASK_INTERVAL
argument_list|,
literal|"1m"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OZONE_RECON_OM_SNAPSHOT_DB_DIR
argument_list|,
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|configuration
return|;
block|}
comment|/**    * Create a new OM Metadata manager instance.    * @throws IOException ioEx    */
DECL|method|initializeNewOmMetadataManager ()
specifier|private
name|void
name|initializeNewOmMetadataManager
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|omDbDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|OzoneConfiguration
name|omConfiguration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|omConfiguration
operator|.
name|set
argument_list|(
name|OZONE_OM_DB_DIRS
argument_list|,
name|omDbDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|omConfiguration
argument_list|)
expr_stmt|;
name|String
name|volumeKey
init|=
name|omMetadataManager
operator|.
name|getVolumeKey
argument_list|(
literal|"sampleVol"
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|args
init|=
name|OmVolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolume
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setAdminName
argument_list|(
literal|"TestUser"
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"TestUser"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|omMetadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|put
argument_list|(
name|volumeKey
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|BucketManager
name|bucketManager
init|=
operator|new
name|BucketManagerImpl
argument_list|(
name|omMetadataManager
argument_list|)
decl_stmt|;
name|OmBucketInfo
name|bucketInfo
init|=
name|OmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setBucketName
argument_list|(
literal|"bucketOne"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|put
argument_list|(
literal|"/sampleVol/bucketOne/key_one"
argument_list|,
operator|new
name|OmKeyInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setBucketName
argument_list|(
literal|"bucketOne"
argument_list|)
operator|.
name|setVolumeName
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setKeyName
argument_list|(
literal|"key_one"
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setReplicationType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get an instance of Recon OM Metadata manager.    * @return ReconOMMetadataManager    * @throws IOException when creating the RocksDB instance.    */
DECL|method|getTestMetadataManager ()
specifier|private
name|ReconOMMetadataManager
name|getTestMetadataManager
parameter_list|()
throws|throws
name|IOException
block|{
name|DBCheckpoint
name|checkpoint
init|=
name|omMetadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|getCheckpoint
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|checkpoint
operator|.
name|getCheckpointLocation
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|reconOmDbDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|OzoneConfiguration
name|configuration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OZONE_RECON_OM_SNAPSHOT_DB_DIR
argument_list|,
name|reconOmDbDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ReconOMMetadataManager
name|reconOMMetaMgr
init|=
operator|new
name|ReconOmMetadataManagerImpl
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|reconOMMetaMgr
operator|.
name|start
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|reconOMMetaMgr
operator|.
name|updateOmDB
argument_list|(
name|checkpoint
operator|.
name|getCheckpointLocation
argument_list|()
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reconOMMetaMgr
return|;
block|}
comment|/**    * Write a key to OM instance.    * @throws IOException while writing.    */
DECL|method|writeDataToOm ()
specifier|private
name|void
name|writeDataToOm
parameter_list|()
throws|throws
name|IOException
block|{
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|put
argument_list|(
literal|"/sampleVol/bucketOne/key_two"
argument_list|,
operator|new
name|OmKeyInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setBucketName
argument_list|(
literal|"bucketOne"
argument_list|)
operator|.
name|setVolumeName
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setKeyName
argument_list|(
literal|"key_two"
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setReplicationType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

