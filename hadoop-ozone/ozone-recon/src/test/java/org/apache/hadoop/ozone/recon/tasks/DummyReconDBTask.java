begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_comment
comment|/**  * Dummy Recon task that has 3 modes of operations.  * ALWAYS_FAIL / FAIL_ONCE / ALWAYS_PASS  */
end_comment

begin_class
DECL|class|DummyReconDBTask
specifier|public
class|class
name|DummyReconDBTask
extends|extends
name|ReconDBUpdateTask
block|{
DECL|field|numFailuresAllowed
specifier|private
name|int
name|numFailuresAllowed
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|field|callCtr
specifier|private
name|int
name|callCtr
init|=
literal|0
decl_stmt|;
DECL|method|DummyReconDBTask (String taskName, TaskType taskType)
specifier|public
name|DummyReconDBTask
parameter_list|(
name|String
name|taskName
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
name|super
argument_list|(
name|taskName
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskType
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|FAIL_ONCE
argument_list|)
condition|)
block|{
name|numFailuresAllowed
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|ALWAYS_FAIL
argument_list|)
condition|)
block|{
name|numFailuresAllowed
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTaskTables ()
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|getTaskTables
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"volumeTable"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|process (OMUpdateEventBatch events)
name|Pair
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|process
parameter_list|(
name|OMUpdateEventBatch
name|events
parameter_list|)
block|{
if|if
condition|(
operator|++
name|callCtr
operator|<=
name|numFailuresAllowed
condition|)
block|{
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
name|getTaskName
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
name|getTaskName
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|reprocess (OMMetadataManager omMetadataManager)
name|Pair
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|reprocess
parameter_list|(
name|OMMetadataManager
name|omMetadataManager
parameter_list|)
block|{
if|if
condition|(
operator|++
name|callCtr
operator|<=
name|numFailuresAllowed
condition|)
block|{
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
name|getTaskName
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
name|getTaskName
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
comment|/**    * Type of the task.    */
DECL|enum|TaskType
specifier|public
enum|enum
name|TaskType
block|{
DECL|enumConstant|ALWAYS_PASS
name|ALWAYS_PASS
block|,
DECL|enumConstant|FAIL_ONCE
name|FAIL_ONCE
block|,
DECL|enumConstant|ALWAYS_FAIL
name|ALWAYS_FAIL
block|}
block|}
end_class

end_unit

