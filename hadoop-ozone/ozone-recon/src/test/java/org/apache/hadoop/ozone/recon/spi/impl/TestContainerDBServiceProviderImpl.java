begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.spi.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|GuiceInjectorUtilsForTestsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerKeyPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|api
operator|.
name|types
operator|.
name|ContainerMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|spi
operator|.
name|ContainerDBServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|StatsSchemaDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|DSL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|DefaultConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_comment
comment|/**  * Unit Tests for ContainerDBServiceProviderImpl.  */
end_comment

begin_class
DECL|class|TestContainerDBServiceProviderImpl
specifier|public
class|class
name|TestContainerDBServiceProviderImpl
block|{
annotation|@
name|ClassRule
DECL|field|tempFolder
specifier|public
specifier|static
name|TemporaryFolder
name|tempFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|containerDbServiceProvider
specifier|private
specifier|static
name|ContainerDBServiceProvider
name|containerDbServiceProvider
decl_stmt|;
DECL|field|injector
specifier|private
specifier|static
name|Injector
name|injector
decl_stmt|;
DECL|field|guiceInjectorTest
specifier|private
specifier|static
name|GuiceInjectorUtilsForTestsImpl
name|guiceInjectorTest
init|=
operator|new
name|GuiceInjectorUtilsForTestsImpl
argument_list|()
decl_stmt|;
DECL|field|keyPrefix1
specifier|private
name|String
name|keyPrefix1
init|=
literal|"V3/B1/K1"
decl_stmt|;
DECL|field|keyPrefix2
specifier|private
name|String
name|keyPrefix2
init|=
literal|"V3/B1/K2"
decl_stmt|;
DECL|field|keyPrefix3
specifier|private
name|String
name|keyPrefix3
init|=
literal|"V3/B2/K1"
decl_stmt|;
DECL|method|populateKeysInContainers (long containerId1, long containerId2)
specifier|private
name|void
name|populateKeysInContainers
parameter_list|(
name|long
name|containerId1
parameter_list|,
name|long
name|containerId2
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerKeyPrefix
name|containerKeyPrefix1
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId1
argument_list|,
name|keyPrefix1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyMapping
argument_list|(
name|containerKeyPrefix1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerKeyPrefix
name|containerKeyPrefix2
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId1
argument_list|,
name|keyPrefix2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyMapping
argument_list|(
name|containerKeyPrefix2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ContainerKeyPrefix
name|containerKeyPrefix3
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId2
argument_list|,
name|keyPrefix3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyMapping
argument_list|(
name|containerKeyPrefix3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeInjector ()
specifier|private
specifier|static
name|void
name|initializeInjector
parameter_list|()
throws|throws
name|Exception
block|{
name|injector
operator|=
name|guiceInjectorTest
operator|.
name|getInjector
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|tempFolder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupOnce ()
specifier|public
specifier|static
name|void
name|setupOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeInjector
argument_list|()
expr_stmt|;
name|DSL
operator|.
name|using
argument_list|(
operator|new
name|DefaultConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|ContainerDBServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|StatsSchemaDefinition
name|schemaDefinition
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|StatsSchemaDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|schemaDefinition
operator|.
name|initializeSchema
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Reset containerDB before running each test
name|containerDbServiceProvider
operator|.
name|initNewContainerDB
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitNewContainerDB ()
specifier|public
name|void
name|testInitNewContainerDB
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|prefixCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerKeyPrefix
name|ckp1
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
literal|"V1/B1/K1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|ckp1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerKeyPrefix
name|ckp2
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
literal|"V1/B1/K2"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|ckp2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ContainerKeyPrefix
name|ckp3
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
literal|"V1/B2/K3"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|ckp3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerKeyPrefix
name|prefix
range|:
name|prefixCounts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|containerDbServiceProvider
operator|.
name|storeContainerKeyMapping
argument_list|(
name|prefix
argument_list|,
name|prefixCounts
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainerKeyPrefix
argument_list|(
name|ckp1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|prefixCounts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|ckp2
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|ckp3
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|ContainerKeyPrefix
name|ckp4
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
literal|"V1/B3/K1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|ckp4
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|ContainerKeyPrefix
name|ckp5
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
literal|"V1/B3/K2"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|ckp5
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|initNewContainerDB
argument_list|(
name|prefixCounts
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|keyPrefixesForContainer
init|=
name|containerDbServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|keyPrefixesForContainer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|keyPrefixesForContainer
operator|.
name|get
argument_list|(
name|ckp2
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|keyPrefixesForContainer
operator|.
name|get
argument_list|(
name|ckp3
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|keyPrefixesForContainer
operator|.
name|get
argument_list|(
name|ckp4
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|keyPrefixesForContainer
operator|.
name|get
argument_list|(
name|ckp5
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainerKeyPrefix
argument_list|(
name|ckp1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStoreContainerKeyMapping ()
specifier|public
name|void
name|testStoreContainerKeyMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|prefixCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|keyPrefix1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|keyPrefix2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|prefixCounts
operator|.
name|put
argument_list|(
name|keyPrefix3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|prefix
range|:
name|prefixCounts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ContainerKeyPrefix
name|containerKeyPrefix
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|prefix
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyMapping
argument_list|(
name|containerKeyPrefix
argument_list|,
name|prefixCounts
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainerKeyPrefix
argument_list|(
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|keyPrefix1
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainerKeyPrefix
argument_list|(
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|keyPrefix2
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainerKeyPrefix
argument_list|(
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|keyPrefix3
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStoreContainerKeyCount ()
specifier|public
name|void
name|testStoreContainerKeyCount
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerId
init|=
literal|1L
decl_stmt|;
name|long
name|nextContainerId
init|=
literal|2L
decl_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyCount
argument_list|(
name|containerId
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyCount
argument_list|(
name|nextContainerId
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerDbServiceProvider
operator|.
name|getKeyCountForContainer
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containerDbServiceProvider
operator|.
name|getKeyCountForContainer
argument_list|(
name|nextContainerId
argument_list|)
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyCount
argument_list|(
name|containerId
argument_list|,
literal|20L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|containerDbServiceProvider
operator|.
name|getKeyCountForContainer
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetKeyCountForContainer ()
specifier|public
name|void
name|testGetKeyCountForContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerId
init|=
literal|1L
decl_stmt|;
name|long
name|nextContainerId
init|=
literal|2L
decl_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyCount
argument_list|(
name|containerId
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyCount
argument_list|(
name|nextContainerId
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerDbServiceProvider
operator|.
name|getKeyCountForContainer
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containerDbServiceProvider
operator|.
name|getKeyCountForContainer
argument_list|(
name|nextContainerId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerDbServiceProvider
operator|.
name|getKeyCountForContainer
argument_list|(
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoesContainerExists ()
specifier|public
name|void
name|testDoesContainerExists
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerId
init|=
literal|1L
decl_stmt|;
name|long
name|nextContainerId
init|=
literal|2L
decl_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyCount
argument_list|(
name|containerId
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyCount
argument_list|(
name|nextContainerId
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containerDbServiceProvider
operator|.
name|doesContainerExists
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containerDbServiceProvider
operator|.
name|doesContainerExists
argument_list|(
name|nextContainerId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|containerDbServiceProvider
operator|.
name|doesContainerExists
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|containerDbServiceProvider
operator|.
name|doesContainerExists
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetCountForContainerKeyPrefix ()
specifier|public
name|void
name|testGetCountForContainerKeyPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerKeyMapping
argument_list|(
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|keyPrefix1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Integer
name|count
init|=
name|containerDbServiceProvider
operator|.
name|getCountForContainerKeyPrefix
argument_list|(
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|keyPrefix1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|count
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|=
name|containerDbServiceProvider
operator|.
name|getCountForContainerKeyPrefix
argument_list|(
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|count
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetKeyPrefixesForContainer ()
specifier|public
name|void
name|testGetKeyPrefixesForContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerId
init|=
literal|1L
decl_stmt|;
name|long
name|nextContainerId
init|=
literal|2L
decl_stmt|;
name|populateKeysInContainers
argument_list|(
name|containerId
argument_list|,
name|nextContainerId
argument_list|)
expr_stmt|;
name|ContainerKeyPrefix
name|containerKeyPrefix1
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|keyPrefix1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerKeyPrefix
name|containerKeyPrefix2
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|keyPrefix2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerKeyPrefix
name|containerKeyPrefix3
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|nextContainerId
argument_list|,
name|keyPrefix3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|keyPrefixMap
init|=
name|containerDbServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keyPrefixMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyPrefixMap
operator|.
name|get
argument_list|(
name|containerKeyPrefix1
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keyPrefixMap
operator|.
name|get
argument_list|(
name|containerKeyPrefix2
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|keyPrefixMap
operator|=
name|containerDbServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
name|nextContainerId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyPrefixMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|keyPrefixMap
operator|.
name|get
argument_list|(
name|containerKeyPrefix3
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetKeyPrefixesForContainerWithKeyPrefix ()
specifier|public
name|void
name|testGetKeyPrefixesForContainerWithKeyPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerId
init|=
literal|1L
decl_stmt|;
name|long
name|nextContainerId
init|=
literal|2L
decl_stmt|;
name|populateKeysInContainers
argument_list|(
name|containerId
argument_list|,
name|nextContainerId
argument_list|)
expr_stmt|;
name|ContainerKeyPrefix
name|containerKeyPrefix2
init|=
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|keyPrefix2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|keyPrefixMap
init|=
name|containerDbServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
name|containerId
argument_list|,
name|keyPrefix1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyPrefixMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keyPrefixMap
operator|.
name|get
argument_list|(
name|containerKeyPrefix2
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|keyPrefixMap
operator|=
name|containerDbServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
name|nextContainerId
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyPrefixMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test for negative cases
name|keyPrefixMap
operator|=
name|containerDbServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
name|containerId
argument_list|,
literal|"V3/B1/invalid"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyPrefixMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keyPrefixMap
operator|=
name|containerDbServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
name|containerId
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyPrefixMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keyPrefixMap
operator|=
name|containerDbServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
literal|10L
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|keyPrefixMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainersWithPrevContainer ()
specifier|public
name|void
name|testGetContainersWithPrevContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerId
init|=
literal|1L
decl_stmt|;
name|long
name|nextContainerId
init|=
literal|2L
decl_stmt|;
name|populateKeysInContainers
argument_list|(
name|containerId
argument_list|,
name|nextContainerId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|ContainerMetadata
argument_list|>
name|containerMap
init|=
name|containerDbServiceProvider
operator|.
name|getContainers
argument_list|(
operator|-
literal|1
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containerMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
operator|.
name|getNumberOfKeys
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containerMap
operator|.
name|get
argument_list|(
name|nextContainerId
argument_list|)
operator|.
name|getNumberOfKeys
argument_list|()
argument_list|)
expr_stmt|;
comment|// test if limit works
name|containerMap
operator|=
name|containerDbServiceProvider
operator|.
name|getContainers
argument_list|(
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|containerMap
operator|.
name|get
argument_list|(
name|nextContainerId
argument_list|)
argument_list|)
expr_stmt|;
comment|// test for prev key
name|containerMap
operator|=
name|containerDbServiceProvider
operator|.
name|getContainers
argument_list|(
operator|-
literal|1
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// containerId must be skipped from containerMap result
name|assertNull
argument_list|(
name|containerMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|containerMap
operator|=
name|containerDbServiceProvider
operator|.
name|getContainers
argument_list|(
operator|-
literal|1
argument_list|,
name|nextContainerId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test for negative cases
name|containerMap
operator|=
name|containerDbServiceProvider
operator|.
name|getContainers
argument_list|(
operator|-
literal|1
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|containerMap
operator|=
name|containerDbServiceProvider
operator|.
name|getContainers
argument_list|(
literal|0
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteContainerMapping ()
specifier|public
name|void
name|testDeleteContainerMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|containerId
init|=
literal|1L
decl_stmt|;
name|long
name|nextContainerId
init|=
literal|2L
decl_stmt|;
name|populateKeysInContainers
argument_list|(
name|containerId
argument_list|,
name|nextContainerId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ContainerKeyPrefix
argument_list|,
name|Integer
argument_list|>
name|keyPrefixMap
init|=
name|containerDbServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keyPrefixMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|deleteContainerMapping
argument_list|(
operator|new
name|ContainerKeyPrefix
argument_list|(
name|containerId
argument_list|,
name|keyPrefix2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|keyPrefixMap
operator|=
name|containerDbServiceProvider
operator|.
name|getKeyPrefixesForContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyPrefixMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetCountForContainers ()
specifier|public
name|void
name|testGetCountForContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainers
argument_list|()
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerCount
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainers
argument_list|()
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|incrementContainerCountBy
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6L
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainers
argument_list|()
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerCount
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStoreContainerCount ()
specifier|public
name|void
name|testStoreContainerCount
parameter_list|()
throws|throws
name|Exception
block|{
name|containerDbServiceProvider
operator|.
name|storeContainerCount
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainers
argument_list|()
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|storeContainerCount
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncrementContainerCountBy ()
specifier|public
name|void
name|testIncrementContainerCountBy
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainers
argument_list|()
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|incrementContainerCountBy
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainers
argument_list|()
argument_list|)
expr_stmt|;
name|containerDbServiceProvider
operator|.
name|incrementContainerCountBy
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|containerDbServiceProvider
operator|.
name|getCountForContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

