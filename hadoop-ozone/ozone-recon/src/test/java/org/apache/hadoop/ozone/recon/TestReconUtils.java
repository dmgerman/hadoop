begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_comment
comment|/**  * Test Recon Utility methods.  */
end_comment

begin_class
DECL|class|TestReconUtils
specifier|public
class|class
name|TestReconUtils
block|{
annotation|@
name|Rule
DECL|field|folder
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetReconDbDir ()
specifier|public
name|void
name|testGetReconDbDir
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|filePath
init|=
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|OzoneConfiguration
name|configuration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"TEST_DB_DIR"
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|ReconUtils
argument_list|()
operator|.
name|getReconDbDir
argument_list|(
name|configuration
argument_list|,
literal|"TEST_DB_DIR"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|filePath
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUntarCheckpointFile ()
specifier|public
name|void
name|testUntarCheckpointFile
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|newDir
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|File
name|file1
init|=
name|Paths
operator|.
name|get
argument_list|(
name|newDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"file1"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|String
name|str
init|=
literal|"File1 Contents"
decl_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|file2
init|=
name|Paths
operator|.
name|get
argument_list|(
name|newDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"file2"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|str
operator|=
literal|"File2 Contents"
expr_stmt|;
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file2
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Create test tar file.
name|File
name|tarFile
init|=
name|OmUtils
operator|.
name|createTarFile
argument_list|(
name|newDir
operator|.
name|toPath
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|outputDir
init|=
name|folder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
operator|new
name|ReconUtils
argument_list|()
operator|.
name|untarCheckpointFile
argument_list|(
name|tarFile
argument_list|,
name|outputDir
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outputDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outputDir
operator|.
name|listFiles
argument_list|()
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMakeHttpCall ()
specifier|public
name|void
name|testMakeHttpCall
parameter_list|()
throws|throws
name|Exception
block|{
name|CloseableHttpClient
name|httpClientMock
init|=
name|mock
argument_list|(
name|CloseableHttpClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|url
init|=
literal|"http://localhost:9874/dbCheckpoint"
decl_stmt|;
name|CloseableHttpResponse
name|httpResponseMock
init|=
name|mock
argument_list|(
name|CloseableHttpResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|httpClientMock
operator|.
name|execute
argument_list|(
name|any
argument_list|(
name|HttpGet
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|httpResponseMock
argument_list|)
expr_stmt|;
name|StatusLine
name|statusLineMock
init|=
name|mock
argument_list|(
name|StatusLine
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|statusLineMock
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|httpResponseMock
operator|.
name|getStatusLine
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|statusLineMock
argument_list|)
expr_stmt|;
name|HttpEntity
name|httpEntityMock
init|=
name|mock
argument_list|(
name|HttpEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|httpResponseMock
operator|.
name|getEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|httpEntityMock
argument_list|)
expr_stmt|;
name|File
name|file1
init|=
name|Paths
operator|.
name|get
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"file1"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file1
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"File 1 Contents"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|InputStream
name|fileInputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|httpEntityMock
operator|.
name|getContent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|InputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fileInputStream
operator|.
name|read
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|InputStream
name|inputStream
init|=
operator|new
name|ReconUtils
argument_list|()
operator|.
name|makeHttpCall
argument_list|(
name|httpClientMock
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|inputStream
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"File 1 Contents"
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

