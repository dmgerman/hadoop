begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|ReconServerConfigKeys
operator|.
name|OZONE_RECON_OM_SNAPSHOT_DB_DIR
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|BucketManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|BucketManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OmMetadataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|DBCheckpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_comment
comment|/**  * Test Recon OM Metadata Manager implementation.  */
end_comment

begin_class
DECL|class|TestReconOmMetadataManagerImpl
specifier|public
class|class
name|TestReconOmMetadataManagerImpl
block|{
annotation|@
name|Rule
DECL|field|temporaryFolder
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testUpdateOmDB ()
specifier|public
name|void
name|testUpdateOmDB
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Create a new OM Metadata Manager instance + DB.
name|File
name|omDbDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|OzoneConfiguration
name|omConfiguration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|omConfiguration
operator|.
name|set
argument_list|(
name|OZONE_OM_DB_DIRS
argument_list|,
name|omDbDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|OMMetadataManager
name|omMetadataManager
init|=
operator|new
name|OmMetadataManagerImpl
argument_list|(
name|omConfiguration
argument_list|)
decl_stmt|;
comment|//Create a volume + bucket + 2 keys.
name|String
name|volumeKey
init|=
name|omMetadataManager
operator|.
name|getVolumeKey
argument_list|(
literal|"sampleVol"
argument_list|)
decl_stmt|;
name|OmVolumeArgs
name|args
init|=
name|OmVolumeArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolume
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setAdminName
argument_list|(
literal|"TestUser"
argument_list|)
operator|.
name|setOwnerName
argument_list|(
literal|"TestUser"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|omMetadataManager
operator|.
name|getVolumeTable
argument_list|()
operator|.
name|put
argument_list|(
name|volumeKey
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|BucketManager
name|bucketManager
init|=
operator|new
name|BucketManagerImpl
argument_list|(
name|omMetadataManager
argument_list|)
decl_stmt|;
name|OmBucketInfo
name|bucketInfo
init|=
name|OmBucketInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setBucketName
argument_list|(
literal|"bucketOne"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|bucketManager
operator|.
name|createBucket
argument_list|(
name|bucketInfo
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|put
argument_list|(
literal|"/sampleVol/bucketOne/key_one"
argument_list|,
operator|new
name|OmKeyInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setBucketName
argument_list|(
literal|"bucketOne"
argument_list|)
operator|.
name|setVolumeName
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setKeyName
argument_list|(
literal|"key_one"
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setReplicationType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|put
argument_list|(
literal|"/sampleVol/bucketOne/key_two"
argument_list|,
operator|new
name|OmKeyInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setBucketName
argument_list|(
literal|"bucketOne"
argument_list|)
operator|.
name|setVolumeName
argument_list|(
literal|"sampleVol"
argument_list|)
operator|.
name|setKeyName
argument_list|(
literal|"key_two"
argument_list|)
operator|.
name|setReplicationFactor
argument_list|(
name|HddsProtos
operator|.
name|ReplicationFactor
operator|.
name|ONE
argument_list|)
operator|.
name|setReplicationType
argument_list|(
name|HddsProtos
operator|.
name|ReplicationType
operator|.
name|STAND_ALONE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|//Make sure OM Metadata reflects the keys that were inserted.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
literal|"/sampleVol/bucketOne/key_one"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|omMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
literal|"/sampleVol/bucketOne/key_two"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Take checkpoint of OM DB.
name|DBCheckpoint
name|checkpoint
init|=
name|omMetadataManager
operator|.
name|getStore
argument_list|()
operator|.
name|getCheckpoint
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|checkpoint
operator|.
name|getCheckpointLocation
argument_list|()
argument_list|)
expr_stmt|;
comment|//Create new Recon OM Metadata manager instance.
name|File
name|reconOmDbDir
init|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
decl_stmt|;
name|OzoneConfiguration
name|configuration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|OZONE_RECON_OM_SNAPSHOT_DB_DIR
argument_list|,
name|reconOmDbDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ReconOMMetadataManager
name|reconOMMetadataManager
init|=
operator|new
name|ReconOmMetadataManagerImpl
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|reconOMMetadataManager
operator|.
name|start
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|//Before accepting a snapshot, the metadata should have null tables.
name|Assert
operator|.
name|assertNull
argument_list|(
name|reconOMMetadataManager
operator|.
name|getBucketTable
argument_list|()
argument_list|)
expr_stmt|;
comment|//Update Recon OM DB with the OM DB checkpoint location.
name|reconOMMetadataManager
operator|.
name|updateOmDB
argument_list|(
name|checkpoint
operator|.
name|getCheckpointLocation
argument_list|()
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
comment|//Now, the tables should have been initialized.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reconOMMetadataManager
operator|.
name|getBucketTable
argument_list|()
argument_list|)
expr_stmt|;
comment|//Verify Keys inserted in OM DB are available in Recon OM DB.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reconOMMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
literal|"/sampleVol/bucketOne/key_one"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reconOMMetadataManager
operator|.
name|getKeyTable
argument_list|()
operator|.
name|get
argument_list|(
literal|"/sampleVol/bucketOne/key_two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

