begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.persistence
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|DSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|SQLDialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|DSL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|DefaultConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_comment
comment|/**  * Create an injector for tests that need to access the SQl database.  */
end_comment

begin_class
DECL|class|AbstractSqlDatabaseTest
specifier|public
specifier|abstract
class|class
name|AbstractSqlDatabaseTest
block|{
annotation|@
name|ClassRule
DECL|field|temporaryFolder
specifier|public
specifier|static
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
DECL|field|tempDir
specifier|private
specifier|static
name|File
name|tempDir
decl_stmt|;
DECL|field|injector
specifier|private
specifier|static
name|Injector
name|injector
decl_stmt|;
DECL|field|dslContext
specifier|private
specifier|static
name|DSLContext
name|dslContext
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|tempDir
operator|=
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
expr_stmt|;
name|DataSourceConfigurationProvider
name|configurationProvider
init|=
operator|new
name|DataSourceConfigurationProvider
argument_list|()
decl_stmt|;
name|JooqPersistenceModule
name|persistenceModule
init|=
operator|new
name|JooqPersistenceModule
argument_list|(
name|configurationProvider
argument_list|)
decl_stmt|;
name|injector
operator|=
name|Guice
operator|.
name|createInjector
argument_list|(
name|persistenceModule
argument_list|,
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|DataSourceConfiguration
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|configurationProvider
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dslContext
operator|=
name|DSL
operator|.
name|using
argument_list|(
operator|new
name|DefaultConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
name|temporaryFolder
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
DECL|method|getDslContext ()
specifier|protected
name|DSLContext
name|getDslContext
parameter_list|()
block|{
return|return
name|dslContext
return|;
block|}
DECL|class|DataSourceConfigurationProvider
specifier|static
class|class
name|DataSourceConfigurationProvider
implements|implements
name|Provider
argument_list|<
name|DataSourceConfiguration
argument_list|>
block|{
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|DataSourceConfiguration
name|get
parameter_list|()
block|{
return|return
operator|new
name|DataSourceConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getDriverClass
parameter_list|()
block|{
return|return
literal|"org.sqlite.JDBC"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJdbcUrl
parameter_list|()
block|{
return|return
literal|"jdbc:sqlite:"
operator|+
name|tempDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"sqlite_recon.db"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|setAutoCommit
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getConnectionTimeout
parameter_list|()
block|{
return|return
literal|10000
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSqlDialect
parameter_list|()
block|{
return|return
name|SQLDialect
operator|.
name|SQLITE
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getMaxActiveConnections
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getMaxConnectionAge
parameter_list|()
block|{
return|return
literal|120
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getMaxIdleConnectionAge
parameter_list|()
block|{
return|return
literal|120
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConnectionTestStatement
parameter_list|()
block|{
return|return
literal|"SELECT 1"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getIdleConnectionTestPeriod
parameter_list|()
block|{
return|return
literal|30
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

