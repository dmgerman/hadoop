begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.recon.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|tasks
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|persistence
operator|.
name|AbstractSqlDatabaseTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|ReconInternalSchemaDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|daos
operator|.
name|ReconTaskStatusDao
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
operator|.
name|tables
operator|.
name|pojos
operator|.
name|ReconTaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Class used to test ReconTaskControllerImpl.  */
end_comment

begin_class
DECL|class|TestReconTaskControllerImpl
specifier|public
class|class
name|TestReconTaskControllerImpl
extends|extends
name|AbstractSqlDatabaseTest
block|{
DECL|field|reconTaskController
specifier|private
name|ReconTaskController
name|reconTaskController
decl_stmt|;
DECL|field|sqlConfiguration
specifier|private
name|Configuration
name|sqlConfiguration
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|ozoneConfiguration
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|sqlConfiguration
operator|=
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
name|ReconInternalSchemaDefinition
name|schemaDefinition
init|=
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ReconInternalSchemaDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
name|schemaDefinition
operator|.
name|initializeSchema
argument_list|()
expr_stmt|;
name|reconTaskController
operator|=
operator|new
name|ReconTaskControllerImpl
argument_list|(
name|ozoneConfiguration
argument_list|,
name|sqlConfiguration
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegisterTask ()
specifier|public
name|void
name|testRegisterTask
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|taskName
init|=
literal|"Dummy_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|DummyReconDBTask
name|dummyReconDBTask
init|=
operator|new
name|DummyReconDBTask
argument_list|(
name|taskName
argument_list|,
name|DummyReconDBTask
operator|.
name|TaskType
operator|.
name|ALWAYS_PASS
argument_list|)
decl_stmt|;
name|reconTaskController
operator|.
name|registerTask
argument_list|(
name|dummyReconDBTask
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reconTaskController
operator|.
name|getRegisteredTasks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reconTaskController
operator|.
name|getRegisteredTasks
argument_list|()
operator|.
name|get
argument_list|(
name|dummyReconDBTask
operator|.
name|getTaskName
argument_list|()
argument_list|)
operator|==
name|dummyReconDBTask
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumeOMEvents ()
specifier|public
name|void
name|testConsumeOMEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|ReconDBUpdateTask
name|reconDBUpdateTaskMock
init|=
name|getMockTask
argument_list|(
literal|"MockTask"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|reconDBUpdateTaskMock
operator|.
name|process
argument_list|(
name|any
argument_list|(
name|OMUpdateEventBatch
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"MockTask"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|reconTaskController
operator|.
name|registerTask
argument_list|(
name|reconDBUpdateTaskMock
argument_list|)
expr_stmt|;
name|OMUpdateEventBatch
name|omUpdateEventBatchMock
init|=
name|mock
argument_list|(
name|OMUpdateEventBatch
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|omUpdateEventBatchMock
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|omUpdateEventBatchMock
operator|.
name|filter
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"MockTable"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|omUpdateEventBatchMock
argument_list|)
expr_stmt|;
name|reconTaskController
operator|.
name|consumeOMEvents
argument_list|(
name|omUpdateEventBatchMock
argument_list|,
name|mock
argument_list|(
name|OMMetadataManager
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|reconDBUpdateTaskMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailedTaskRetryLogic ()
specifier|public
name|void
name|testFailedTaskRetryLogic
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|taskName
init|=
literal|"Dummy_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|DummyReconDBTask
name|dummyReconDBTask
init|=
operator|new
name|DummyReconDBTask
argument_list|(
name|taskName
argument_list|,
name|DummyReconDBTask
operator|.
name|TaskType
operator|.
name|FAIL_ONCE
argument_list|)
decl_stmt|;
name|reconTaskController
operator|.
name|registerTask
argument_list|(
name|dummyReconDBTask
argument_list|)
expr_stmt|;
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|OMUpdateEventBatch
name|omUpdateEventBatchMock
init|=
name|mock
argument_list|(
name|OMUpdateEventBatch
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|omUpdateEventBatchMock
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|omUpdateEventBatchMock
operator|.
name|getLastSequenceNumber
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|reconTaskController
operator|.
name|consumeOMEvents
argument_list|(
name|omUpdateEventBatchMock
argument_list|,
name|mock
argument_list|(
name|OMMetadataManager
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reconTaskController
operator|.
name|getRegisteredTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dummyReconDBTask
argument_list|,
name|reconTaskController
operator|.
name|getRegisteredTasks
argument_list|()
operator|.
name|get
argument_list|(
name|dummyReconDBTask
operator|.
name|getTaskName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ReconTaskStatusDao
name|dao
init|=
operator|new
name|ReconTaskStatusDao
argument_list|(
name|sqlConfiguration
argument_list|)
decl_stmt|;
name|ReconTaskStatus
name|dbRecord
init|=
name|dao
operator|.
name|findById
argument_list|(
name|taskName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|taskName
argument_list|,
name|dbRecord
operator|.
name|getTaskName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dbRecord
operator|.
name|getLastUpdatedTimestamp
argument_list|()
operator|>
name|currentTime
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|100L
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getLastUpdatedSeqNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadBehavedTaskBlacklisting ()
specifier|public
name|void
name|testBadBehavedTaskBlacklisting
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|taskName
init|=
literal|"Dummy_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|DummyReconDBTask
name|dummyReconDBTask
init|=
operator|new
name|DummyReconDBTask
argument_list|(
name|taskName
argument_list|,
name|DummyReconDBTask
operator|.
name|TaskType
operator|.
name|ALWAYS_FAIL
argument_list|)
decl_stmt|;
name|reconTaskController
operator|.
name|registerTask
argument_list|(
name|dummyReconDBTask
argument_list|)
expr_stmt|;
name|OMUpdateEventBatch
name|omUpdateEventBatchMock
init|=
name|mock
argument_list|(
name|OMUpdateEventBatch
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|omUpdateEventBatchMock
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|omUpdateEventBatchMock
operator|.
name|getLastSequenceNumber
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
name|OMMetadataManager
name|omMetadataManagerMock
init|=
name|mock
argument_list|(
name|OMMetadataManager
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|reconTaskController
operator|.
name|consumeOMEvents
argument_list|(
name|omUpdateEventBatchMock
argument_list|,
name|omMetadataManagerMock
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reconTaskController
operator|.
name|getRegisteredTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dummyReconDBTask
argument_list|,
name|reconTaskController
operator|.
name|getRegisteredTasks
argument_list|()
operator|.
name|get
argument_list|(
name|dummyReconDBTask
operator|.
name|getTaskName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Should be blacklisted now.
name|reconTaskController
operator|.
name|consumeOMEvents
argument_list|(
name|omUpdateEventBatchMock
argument_list|,
name|omMetadataManagerMock
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reconTaskController
operator|.
name|getRegisteredTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ReconTaskStatusDao
name|dao
init|=
operator|new
name|ReconTaskStatusDao
argument_list|(
name|sqlConfiguration
argument_list|)
decl_stmt|;
name|ReconTaskStatus
name|dbRecord
init|=
name|dao
operator|.
name|findById
argument_list|(
name|taskName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|taskName
argument_list|,
name|dbRecord
operator|.
name|getTaskName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getLastUpdatedTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|dbRecord
operator|.
name|getLastUpdatedSeqNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReInitializeTasks ()
specifier|public
name|void
name|testReInitializeTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|OMMetadataManager
name|omMetadataManagerMock
init|=
name|mock
argument_list|(
name|OMMetadataManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReconDBUpdateTask
name|reconDBUpdateTaskMock
init|=
name|getMockTask
argument_list|(
literal|"MockTask2"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|reconDBUpdateTaskMock
operator|.
name|reprocess
argument_list|(
name|omMetadataManagerMock
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ImmutablePair
argument_list|<>
argument_list|(
literal|"MockTask2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|reconTaskController
operator|.
name|registerTask
argument_list|(
name|reconDBUpdateTaskMock
argument_list|)
expr_stmt|;
name|reconTaskController
operator|.
name|reInitializeTasks
argument_list|(
name|omMetadataManagerMock
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|reconDBUpdateTaskMock
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|reprocess
argument_list|(
name|omMetadataManagerMock
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper method for getting a mocked Task.    * @param taskName name of the task.    * @return instance of ReconDBUpdateTask.    */
DECL|method|getMockTask (String taskName)
specifier|private
name|ReconDBUpdateTask
name|getMockTask
parameter_list|(
name|String
name|taskName
parameter_list|)
block|{
name|ReconDBUpdateTask
name|reconDBUpdateTaskMock
init|=
name|mock
argument_list|(
name|ReconDBUpdateTask
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|reconDBUpdateTaskMock
operator|.
name|getTaskTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|reconDBUpdateTaskMock
operator|.
name|getTaskName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|taskName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|reconDBUpdateTaskMock
operator|.
name|getTaskTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"MockTable"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|reconDBUpdateTaskMock
return|;
block|}
block|}
end_class

end_unit

