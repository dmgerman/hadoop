begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests GDPRSymmetricKey structure.  */
end_comment

begin_class
DECL|class|TestGDPRSymmetricKey
specifier|public
class|class
name|TestGDPRSymmetricKey
block|{
annotation|@
name|Test
DECL|method|testKeyGenerationWithDefaults ()
specifier|public
name|void
name|testKeyGenerationWithDefaults
parameter_list|()
throws|throws
name|Exception
block|{
name|GDPRSymmetricKey
name|gkey
init|=
operator|new
name|GDPRSymmetricKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gkey
operator|.
name|getCipher
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|OzoneConsts
operator|.
name|GDPR_ALGORITHM_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|gkey
operator|.
name|getKeyDetails
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|Assert
operator|.
name|assertTrue
argument_list|(
name|v
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyGenerationWithValidInput ()
specifier|public
name|void
name|testKeyGenerationWithValidInput
parameter_list|()
throws|throws
name|Exception
block|{
name|GDPRSymmetricKey
name|gkey
init|=
operator|new
name|GDPRSymmetricKey
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|16
argument_list|)
argument_list|,
name|OzoneConsts
operator|.
name|GDPR_ALGORITHM_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gkey
operator|.
name|getCipher
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|OzoneConsts
operator|.
name|GDPR_ALGORITHM_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|gkey
operator|.
name|getKeyDetails
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|Assert
operator|.
name|assertTrue
argument_list|(
name|v
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyGenerationWithInvalidInput ()
specifier|public
name|void
name|testKeyGenerationWithInvalidInput
parameter_list|()
throws|throws
name|Exception
block|{
name|GDPRSymmetricKey
name|gkey
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gkey
operator|=
operator|new
name|GDPRSymmetricKey
argument_list|(
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|5
argument_list|)
argument_list|,
name|OzoneConsts
operator|.
name|GDPR_ALGORITHM_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Secret must be exactly 16 characters"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gkey
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

