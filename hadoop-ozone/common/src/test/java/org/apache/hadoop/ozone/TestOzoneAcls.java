begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|LambdaTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This class is to test acl storage and retrieval in ozone store.  */
end_comment

begin_class
DECL|class|TestOzoneAcls
specifier|public
class|class
name|TestOzoneAcls
block|{
annotation|@
name|Test
DECL|method|testAclParse ()
specifier|public
name|void
name|testAclParse
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|testMatrix
decl_stmt|;
name|testMatrix
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"user:bilbo:r"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"user:bilbo:w"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"user:bilbo:rw"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"user:bilbo:a"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"    user:bilbo:a   "
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// ACLs makes no judgement on the quality of
comment|// user names. it is for the userAuth interface
comment|// to determine if a user name is really a name
name|testMatrix
operator|.
name|put
argument_list|(
literal|" user:*:rw"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" user:~!:rw"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" user:bilbo:"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" user:bilbo:rx"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" user:bilbo:rwdlncxy"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:bilbo:rwdlncxy"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" world::rwdlncxy"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" user:bilbo:rncxy"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:bilbo:ncxy"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" world::ncxy"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" user:bilbo:rwcxy"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:bilbo:rwcxy"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" world::rwcxy"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" user:bilbo:mk"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" user::rw"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"user11:bilbo:rw"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" user:::rw"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:hobbit:r"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:hobbit:w"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:hobbit:rw"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:hobbit:a"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:*:rw"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:~!:rw"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:hobbit:"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:hobbit:rx"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:hobbit:mk"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group::"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group::rw"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group22:hobbit:"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" group:::rw"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"JUNK group:hobbit:r"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"JUNK group:hobbit:w"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"JUNK group:hobbit:rw"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"JUNK group:hobbit:a"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"JUNK group:*:rw"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"JUNK group:~!:rw"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" world::r"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" world::w"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" world::rw"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" world::a"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" world:bilbo:w"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" world:bilbo:rw"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" anonymous:bilbo:w"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" anonymous:ANONYMOUS:w"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" anonymous::rw"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|" world:WORLD:rw"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|testMatrix
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|testMatrix
operator|.
name|get
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// should never get here since parseAcl will throw
name|fail
argument_list|(
literal|"An exception was expected but did not happen. Key: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// nothing to do
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAclValues ()
specifier|public
name|void
name|testAclValues
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneAcl
name|acl
init|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"user:bilbo:rw"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|READ
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|WRITE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|READ_ACL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACLIdentityType
operator|.
name|USER
argument_list|,
name|acl
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"user:bilbo:a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bilbo"
argument_list|,
name|acl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|WRITE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACLIdentityType
operator|.
name|USER
argument_list|,
name|acl
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"user:bilbo:r"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bilbo"
argument_list|,
name|acl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|READ
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACLIdentityType
operator|.
name|USER
argument_list|,
name|acl
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"user:bilbo:w"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bilbo"
argument_list|,
name|acl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|WRITE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACLIdentityType
operator|.
name|USER
argument_list|,
name|acl
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"group:hobbit:a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
argument_list|,
literal|"hobbit"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|READ
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACLIdentityType
operator|.
name|GROUP
argument_list|,
name|acl
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"world::a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
argument_list|,
literal|"WORLD"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|WRITE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACLIdentityType
operator|.
name|WORLD
argument_list|,
name|acl
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"user:bilbo:rwdlncxy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
argument_list|,
literal|"bilbo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|READ
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|WRITE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|LIST
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|NONE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|CREATE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|READ_ACL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|WRITE_ACL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"group:hadoop:rwdlncxy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
argument_list|,
literal|"hadoop"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|READ
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|WRITE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|LIST
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|NONE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|CREATE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|READ_ACL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|WRITE_ACL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACLIdentityType
operator|.
name|GROUP
argument_list|,
name|acl
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"world::rwdlncxy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
argument_list|,
literal|"WORLD"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|READ
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|WRITE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|DELETE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|LIST
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|NONE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|CREATE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|READ_ACL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|WRITE_ACL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|get
argument_list|(
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ACLIdentityType
operator|.
name|WORLD
argument_list|,
name|acl
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|LambdaTestUtils
operator|.
name|intercept
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
literal|"ACL right"
operator|+
literal|" is not"
argument_list|,
parameter_list|()
lambda|->
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"world::rwdlncxncxdfsfgbny"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBitSetToListConversion ()
specifier|public
name|void
name|testBitSetToListConversion
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneAcl
name|acl
init|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"user:bilbo:rw"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ACLType
argument_list|>
name|rights
init|=
name|acl
operator|.
name|getAclList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"user:bilbo:a"
argument_list|)
expr_stmt|;
name|rights
operator|=
name|acl
operator|.
name|getAclList
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|=
name|OzoneAcl
operator|.
name|parseAcl
argument_list|(
literal|"user:bilbo:cxy"
argument_list|)
expr_stmt|;
name|rights
operator|=
name|acl
operator|.
name|getAclList
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|READ_ACL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|WRITE_ACL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
init|=
name|OzoneAcl
operator|.
name|parseAcls
argument_list|(
literal|"user:bilbo:cxy,group:hadoop:a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|rights
operator|=
name|acls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAclList
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|READ_ACL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|WRITE_ACL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|rights
operator|=
name|acls
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAclList
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rights
operator|.
name|contains
argument_list|(
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

