begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|request
operator|.
name|OzoneQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test Ozone Volume Quota.  */
end_comment

begin_class
DECL|class|TestQuota
specifier|public
class|class
name|TestQuota
block|{
annotation|@
name|Test
DECL|method|testParseQuota ()
specifier|public
name|void
name|testParseQuota
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|testMatrix
decl_stmt|;
name|testMatrix
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"10TB"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"1 TB"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"0MB"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"0 TB"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"    1000MB   "
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"    1000MBMB   "
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"    1000MB00   "
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"1000ZMB"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"MB1000"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"9999"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"remove"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"1UNDEFINED"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"-1000MB"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"1024 bytes"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"1bytes"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"0bytes"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"10000 BYTES"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"BYTESbytes"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|testMatrix
operator|.
name|put
argument_list|(
literal|"bytes"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|testMatrix
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
if|if
condition|(
name|testMatrix
operator|.
name|get
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|OzoneQuota
operator|.
name|parseQuota
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|OzoneQuota
operator|.
name|parseQuota
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// should never get here since the isValid call will throw
name|fail
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"An exception was expected but did not happen."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{          }
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testVerifyQuota ()
specifier|public
name|void
name|testVerifyQuota
parameter_list|()
block|{
name|OzoneQuota
name|qt
init|=
name|OzoneQuota
operator|.
name|parseQuota
argument_list|(
literal|"10TB"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|getSize
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|getUnit
argument_list|()
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|TB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
literal|10L
operator|*
operator|(
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|)
argument_list|)
expr_stmt|;
name|qt
operator|=
name|OzoneQuota
operator|.
name|parseQuota
argument_list|(
literal|"10MB"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|getSize
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|getUnit
argument_list|()
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|MB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
literal|10L
operator|*
operator|(
literal|1024L
operator|*
literal|1024L
operator|)
argument_list|)
expr_stmt|;
name|qt
operator|=
name|OzoneQuota
operator|.
name|parseQuota
argument_list|(
literal|"10GB"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|getSize
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|getUnit
argument_list|()
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|GB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
literal|10L
operator|*
operator|(
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|)
argument_list|)
expr_stmt|;
name|qt
operator|=
name|OzoneQuota
operator|.
name|parseQuota
argument_list|(
literal|"10BYTES"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|getSize
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|getUnit
argument_list|()
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|BYTES
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qt
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|OzoneQuota
name|emptyQuota
init|=
operator|new
name|OzoneQuota
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|emptyQuota
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyQuota
operator|.
name|getSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyQuota
operator|.
name|getUnit
argument_list|()
argument_list|,
name|OzoneQuota
operator|.
name|Units
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyRemove ()
specifier|public
name|void
name|testVerifyRemove
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|OzoneQuota
operator|.
name|isRemove
argument_list|(
literal|"remove"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|OzoneQuota
operator|.
name|isRemove
argument_list|(
literal|"not remove"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|OzoneQuota
operator|.
name|isRemove
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

