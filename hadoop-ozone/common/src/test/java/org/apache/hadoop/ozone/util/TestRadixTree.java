begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test Ozone Radix tree operations.  */
end_comment

begin_class
DECL|class|TestRadixTree
specifier|public
class|class
name|TestRadixTree
block|{
DECL|field|ROOT
specifier|final
specifier|static
name|RadixTree
argument_list|<
name|Integer
argument_list|>
name|ROOT
init|=
operator|new
name|RadixTree
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupRadixTree ()
specifier|public
specifier|static
name|void
name|setupRadixTree
parameter_list|()
block|{
comment|// Test prefix paths with an empty tree
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|ROOT
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"/a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|RadixTree
operator|.
name|radixPathToString
argument_list|(
name|ROOT
operator|.
name|getLongestPrefixPath
argument_list|(
literal|"/a/g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Build Radix tree below for testing.
comment|//                a
comment|//                |
comment|//                b
comment|//             /    \
comment|//            c        e
comment|//           / \    /   \   \
comment|//          d   f  g   dir1  dir2(1000)
comment|//          |
comment|//          g
comment|//          |
comment|//          h
name|ROOT
operator|.
name|insert
argument_list|(
literal|"/a/b/c/d"
argument_list|)
expr_stmt|;
name|ROOT
operator|.
name|insert
argument_list|(
literal|"/a/b/c/d/g/h"
argument_list|)
expr_stmt|;
name|ROOT
operator|.
name|insert
argument_list|(
literal|"/a/b/c/f"
argument_list|)
expr_stmt|;
name|ROOT
operator|.
name|insert
argument_list|(
literal|"/a/b/e/g"
argument_list|)
expr_stmt|;
name|ROOT
operator|.
name|insert
argument_list|(
literal|"/a/b/e/dir1"
argument_list|)
expr_stmt|;
name|ROOT
operator|.
name|insert
argument_list|(
literal|"/a/b/e/dir2"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if insert and build prefix tree is correct.    */
annotation|@
name|Test
DECL|method|testGetLongestPrefix ()
specifier|public
name|void
name|testGetLongestPrefix
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"/a/b/c"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"/a/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/e/g"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"/a/b/e/g/h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"/d/b/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/e"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"/a/b/e/dir3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/c/d"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"/a/b/c/d/p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/c/f"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"/a/b/c/f/p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLongestPrefixPath ()
specifier|public
name|void
name|testGetLongestPrefixPath
parameter_list|()
block|{
name|List
argument_list|<
name|RadixNode
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|lpp
init|=
name|ROOT
operator|.
name|getLongestPrefixPath
argument_list|(
literal|"/a/b/c/d/g/p"
argument_list|)
decl_stmt|;
name|RadixNode
argument_list|<
name|Integer
argument_list|>
name|lpn
init|=
name|lpp
operator|.
name|get
argument_list|(
name|lpp
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"g"
argument_list|,
name|lpn
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|lpn
operator|.
name|setValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RadixNode
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|lpq
init|=
name|ROOT
operator|.
name|getLongestPrefixPath
argument_list|(
literal|"/a/b/c/d/g/q"
argument_list|)
decl_stmt|;
name|RadixNode
argument_list|<
name|Integer
argument_list|>
name|lqn
init|=
name|lpp
operator|.
name|get
argument_list|(
name|lpq
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|RadixTree
operator|.
name|radixPathToString
argument_list|(
name|lpq
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lpn
argument_list|,
name|lqn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g"
argument_list|,
name|lqn
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
operator|(
name|int
operator|)
name|lqn
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/"
argument_list|,
name|RadixTree
operator|.
name|radixPathToString
argument_list|(
name|ROOT
operator|.
name|getLongestPrefixPath
argument_list|(
literal|"/a/g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLastNoeInPrefixPath ()
specifier|public
name|void
name|testGetLastNoeInPrefixPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ROOT
operator|.
name|getLastNodeInPrefixPath
argument_list|(
literal|"/a/g"
argument_list|)
argument_list|)
expr_stmt|;
name|RadixNode
argument_list|<
name|Integer
argument_list|>
name|ln
init|=
name|ROOT
operator|.
name|getLastNodeInPrefixPath
argument_list|(
literal|"/a/b/e/dir1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dir1"
argument_list|,
name|ln
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemovePrefixPath ()
specifier|public
name|void
name|testRemovePrefixPath
parameter_list|()
block|{
comment|// Remove, test and restore
comment|// Remove partially overlapped path
name|ROOT
operator|.
name|removePrefixPath
argument_list|(
literal|"/a/b/c/d/g/h"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/c"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"a/b/c/d"
argument_list|)
argument_list|)
expr_stmt|;
name|ROOT
operator|.
name|insert
argument_list|(
literal|"/a/b/c/d/g/h"
argument_list|)
expr_stmt|;
comment|// Remove fully overlapped path
name|ROOT
operator|.
name|removePrefixPath
argument_list|(
literal|"/a/b/c/d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/c/d"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"a/b/c/d"
argument_list|)
argument_list|)
expr_stmt|;
name|ROOT
operator|.
name|insert
argument_list|(
literal|"/a/b/c/d"
argument_list|)
expr_stmt|;
comment|// Remove non existing path
name|ROOT
operator|.
name|removePrefixPath
argument_list|(
literal|"/d/a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/a/b/c/d"
argument_list|,
name|ROOT
operator|.
name|getLongestPrefix
argument_list|(
literal|"a/b/c/d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

