begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneAclConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
operator|.
name|AclScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
operator|.
name|GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test for OzoneAcls utility class.  */
end_comment

begin_class
DECL|class|TestOzoneAclUtil
specifier|public
class|class
name|TestOzoneAclUtil
block|{
DECL|field|DEFAULT_ACLS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|DEFAULT_ACLS
init|=
name|getDefaultAcls
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|USER1
specifier|private
specifier|static
specifier|final
name|OzoneAcl
name|USER1
init|=
operator|new
name|OzoneAcl
argument_list|(
name|USER
argument_list|,
literal|"user1"
argument_list|,
name|ACLType
operator|.
name|READ_ACL
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
DECL|field|USER2
specifier|private
specifier|static
specifier|final
name|OzoneAcl
name|USER2
init|=
operator|new
name|OzoneAcl
argument_list|(
name|USER
argument_list|,
literal|"user2"
argument_list|,
name|ACLType
operator|.
name|WRITE
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
DECL|field|GROUP1
specifier|private
specifier|static
specifier|final
name|OzoneAcl
name|GROUP1
init|=
operator|new
name|OzoneAcl
argument_list|(
name|GROUP
argument_list|,
literal|"group1"
argument_list|,
name|ACLType
operator|.
name|ALL
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testAddAcl ()
specifier|public
name|void
name|testAddAcl
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|currentAcls
init|=
name|getDefaultAcls
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|currentAcls
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Add new permission to existing acl entry.
name|OzoneAcl
name|oldAcl
init|=
name|currentAcls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|OzoneAcl
name|newAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|oldAcl
operator|.
name|getType
argument_list|()
argument_list|,
name|oldAcl
operator|.
name|getName
argument_list|()
argument_list|,
name|ACLType
operator|.
name|READ_ACL
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
name|addAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|newAcl
argument_list|,
literal|true
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add same permission again and verify result
name|addAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|newAcl
argument_list|,
literal|false
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a new user acl entry.
name|addAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|USER1
argument_list|,
literal|true
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Add same acl entry again and verify result
name|addAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|USER1
argument_list|,
literal|false
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Add a new group acl entry.
name|addAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|GROUP1
argument_list|,
literal|true
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// Add same acl entry again and verify result
name|addAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|GROUP1
argument_list|,
literal|false
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveAcl ()
specifier|public
name|void
name|testRemoveAcl
parameter_list|()
block|{
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|currentAcls
init|=
literal|null
decl_stmt|;
comment|// add/remove to/from null OzoneAcls
name|removeAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|USER1
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|USER1
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|removeAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|USER1
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|currentAcls
operator|=
name|getDefaultAcls
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentAcls
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Add new permission to existing acl entru.
name|OzoneAcl
name|oldAcl
init|=
name|currentAcls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|OzoneAcl
name|newAcl
init|=
operator|new
name|OzoneAcl
argument_list|(
name|oldAcl
operator|.
name|getType
argument_list|()
argument_list|,
name|oldAcl
operator|.
name|getName
argument_list|()
argument_list|,
name|ACLType
operator|.
name|READ_ACL
argument_list|,
name|ACCESS
argument_list|)
decl_stmt|;
comment|// Remove non existing acl entry
name|removeAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|USER1
argument_list|,
literal|false
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove non existing acl permission
name|removeAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|newAcl
argument_list|,
literal|false
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add new permission to existing acl entry.
name|addAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|newAcl
argument_list|,
literal|true
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the new permission added.
name|removeAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|newAcl
argument_list|,
literal|true
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|removeAndVerifyAcl
argument_list|(
name|currentAcls
argument_list|,
name|oldAcl
argument_list|,
literal|true
argument_list|,
name|DEFAULT_ACLS
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|addAndVerifyAcl (List<OzoneAcl> currentAcls, OzoneAcl addedAcl, boolean expectedResult, int expectedSize)
specifier|private
name|void
name|addAndVerifyAcl
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|currentAcls
parameter_list|,
name|OzoneAcl
name|addedAcl
parameter_list|,
name|boolean
name|expectedResult
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|OzoneAclUtil
operator|.
name|addAcl
argument_list|(
name|currentAcls
argument_list|,
name|addedAcl
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentAcls
operator|!=
literal|null
condition|)
block|{
name|boolean
name|verified
init|=
name|verifyAclAdded
argument_list|(
name|currentAcls
argument_list|,
name|addedAcl
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"addedAcl: "
operator|+
name|addedAcl
operator|+
literal|" should exist in the"
operator|+
literal|" current acls: "
operator|+
name|currentAcls
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|currentAcls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeAndVerifyAcl (List<OzoneAcl> currentAcls, OzoneAcl removedAcl, boolean expectedResult, int expectedSize)
specifier|private
name|void
name|removeAndVerifyAcl
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|currentAcls
parameter_list|,
name|OzoneAcl
name|removedAcl
parameter_list|,
name|boolean
name|expectedResult
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|OzoneAclUtil
operator|.
name|removeAcl
argument_list|(
name|currentAcls
argument_list|,
name|removedAcl
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentAcls
operator|!=
literal|null
condition|)
block|{
name|boolean
name|verified
init|=
name|verifyAclRemoved
argument_list|(
name|currentAcls
argument_list|,
name|removedAcl
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"removedAcl: "
operator|+
name|removedAcl
operator|+
literal|" should not exist in the"
operator|+
literal|" current acls: "
operator|+
name|currentAcls
argument_list|,
name|verified
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|currentAcls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyAclRemoved (List<OzoneAcl> acls, OzoneAcl removedAcl)
specifier|private
name|boolean
name|verifyAclRemoved
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
parameter_list|,
name|OzoneAcl
name|removedAcl
parameter_list|)
block|{
for|for
control|(
name|OzoneAcl
name|acl
range|:
name|acls
control|)
block|{
if|if
condition|(
name|acl
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|removedAcl
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|acl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|removedAcl
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|acl
operator|.
name|getAclScope
argument_list|()
operator|.
name|equals
argument_list|(
name|removedAcl
operator|.
name|getAclScope
argument_list|()
argument_list|)
condition|)
block|{
name|BitSet
name|temp
init|=
operator|(
name|BitSet
operator|)
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|temp
operator|.
name|and
argument_list|(
name|removedAcl
operator|.
name|getAclBitSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|!
name|temp
operator|.
name|equals
argument_list|(
name|removedAcl
operator|.
name|getAclBitSet
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|verifyAclAdded (List<OzoneAcl> acls, OzoneAcl newAcl)
specifier|private
name|boolean
name|verifyAclAdded
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
parameter_list|,
name|OzoneAcl
name|newAcl
parameter_list|)
block|{
for|for
control|(
name|OzoneAcl
name|acl
range|:
name|acls
control|)
block|{
if|if
condition|(
name|acl
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|newAcl
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|acl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|newAcl
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|acl
operator|.
name|getAclScope
argument_list|()
operator|.
name|equals
argument_list|(
name|newAcl
operator|.
name|getAclScope
argument_list|()
argument_list|)
condition|)
block|{
name|BitSet
name|temp
init|=
operator|(
name|BitSet
operator|)
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|temp
operator|.
name|and
argument_list|(
name|newAcl
operator|.
name|getAclBitSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|temp
operator|.
name|equals
argument_list|(
name|newAcl
operator|.
name|getAclBitSet
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Helper function to get default acl list for current user.    *    * @return list of ozoneAcls.    * @throws IOException    * */
DECL|method|getDefaultAcls (OzoneConfiguration conf)
specifier|private
specifier|static
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|getDefaultAcls
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|ozoneAcls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//User ACL
name|UserGroupInformation
name|ugi
decl_stmt|;
try|try
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"user0"
argument_list|)
expr_stmt|;
block|}
name|OzoneAclConfig
name|aclConfig
init|=
name|conf
operator|.
name|getObject
argument_list|(
name|OzoneAclConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|IAccessAuthorizer
operator|.
name|ACLType
name|userRights
init|=
name|aclConfig
operator|.
name|getUserDefaultRights
argument_list|()
decl_stmt|;
name|IAccessAuthorizer
operator|.
name|ACLType
name|groupRights
init|=
name|aclConfig
operator|.
name|getGroupDefaultRights
argument_list|()
decl_stmt|;
name|OzoneAclUtil
operator|.
name|addAcl
argument_list|(
name|ozoneAcls
argument_list|,
operator|new
name|OzoneAcl
argument_list|(
name|USER
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|userRights
argument_list|,
name|ACCESS
argument_list|)
argument_list|)
expr_stmt|;
comment|//Group ACLs of the User
name|List
argument_list|<
name|String
argument_list|>
name|userGroups
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
decl_stmt|;
name|userGroups
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|group
parameter_list|)
lambda|->
name|OzoneAclUtil
operator|.
name|addAcl
argument_list|(
name|ozoneAcls
argument_list|,
operator|new
name|OzoneAcl
argument_list|(
name|GROUP
argument_list|,
name|group
argument_list|,
name|groupRights
argument_list|,
name|ACCESS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ozoneAcls
return|;
block|}
block|}
end_class

end_unit

