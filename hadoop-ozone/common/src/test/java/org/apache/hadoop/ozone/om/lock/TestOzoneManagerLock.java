begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.lock
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Class tests OzoneManagerLock.  */
end_comment

begin_class
DECL|class|TestOzoneManagerLock
specifier|public
class|class
name|TestOzoneManagerLock
block|{
annotation|@
name|Test
DECL|method|acquireResourceLock ()
specifier|public
name|void
name|acquireResourceLock
parameter_list|()
block|{
name|String
index|[]
name|resourceName
decl_stmt|;
for|for
control|(
name|OzoneManagerLock
operator|.
name|Resource
name|resource
range|:
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|values
argument_list|()
control|)
block|{
name|resourceName
operator|=
name|generateResourceName
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|testResourceLock
argument_list|(
name|resourceName
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testResourceLock (String[] resourceName, OzoneManagerLock.Resource resource)
specifier|private
name|void
name|testResourceLock
parameter_list|(
name|String
index|[]
name|resourceName
parameter_list|,
name|OzoneManagerLock
operator|.
name|Resource
name|resource
parameter_list|)
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reacquireResourceLock ()
specifier|public
name|void
name|reacquireResourceLock
parameter_list|()
block|{
name|String
index|[]
name|resourceName
decl_stmt|;
for|for
control|(
name|OzoneManagerLock
operator|.
name|Resource
name|resource
range|:
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|values
argument_list|()
control|)
block|{
name|resourceName
operator|=
name|generateResourceName
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|testResourceReacquireLock
argument_list|(
name|resourceName
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testResourceReacquireLock (String[] resourceName, OzoneManagerLock.Resource resource)
specifier|private
name|void
name|testResourceReacquireLock
parameter_list|(
name|String
index|[]
name|resourceName
parameter_list|,
name|OzoneManagerLock
operator|.
name|Resource
name|resource
parameter_list|)
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Lock re-acquire not allowed by same thread.
if|if
condition|(
name|resource
operator|==
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|USER
operator|||
name|resource
operator|==
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|S3_SECRET
operator|||
name|resource
operator|==
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|PREFIX
condition|)
block|{
name|lock
operator|.
name|acquireLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquireLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"reacquireResourceLock failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"cannot acquire "
operator|+
name|resource
operator|.
name|getName
argument_list|()
operator|+
literal|" lock "
operator|+
literal|"while holding ["
operator|+
name|resource
operator|.
name|getName
argument_list|()
operator|+
literal|"] lock(s)."
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|releaseLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lock
operator|.
name|acquireLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLockingOrder ()
specifier|public
name|void
name|testLockingOrder
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|resourceName
decl_stmt|;
comment|// What this test does is iterate all resources. For each resource
comment|// acquire lock, and then in inner loop acquire all locks with higher
comment|// lock level, finally release the locks.
for|for
control|(
name|OzoneManagerLock
operator|.
name|Resource
name|resource
range|:
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|values
argument_list|()
control|)
block|{
name|Stack
argument_list|<
name|ResourceInfo
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
name|resourceName
operator|=
name|generateResourceName
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
operator|new
name|ResourceInfo
argument_list|(
name|resourceName
argument_list|,
name|resource
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OzoneManagerLock
operator|.
name|Resource
name|higherResource
range|:
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|higherResource
operator|.
name|getMask
argument_list|()
operator|>
name|resource
operator|.
name|getMask
argument_list|()
condition|)
block|{
name|resourceName
operator|=
name|generateResourceName
argument_list|(
name|higherResource
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireLock
argument_list|(
name|higherResource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
operator|new
name|ResourceInfo
argument_list|(
name|resourceName
argument_list|,
name|higherResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now release locks
while|while
condition|(
operator|!
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|ResourceInfo
name|resourceInfo
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|lock
operator|.
name|releaseLock
argument_list|(
name|resourceInfo
operator|.
name|getResource
argument_list|()
argument_list|,
name|resourceInfo
operator|.
name|getLockName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLockViolationsWithOneHigherLevelLock ()
specifier|public
name|void
name|testLockViolationsWithOneHigherLevelLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OzoneManagerLock
operator|.
name|Resource
name|resource
range|:
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|OzoneManagerLock
operator|.
name|Resource
name|higherResource
range|:
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|higherResource
operator|.
name|getMask
argument_list|()
operator|>
name|resource
operator|.
name|getMask
argument_list|()
condition|)
block|{
name|String
index|[]
name|resourceName
init|=
name|generateResourceName
argument_list|(
name|higherResource
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireLock
argument_list|(
name|higherResource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquireLock
argument_list|(
name|resource
argument_list|,
name|generateResourceName
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testLockViolationsWithOneHigherLevelLock failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"cannot acquire "
operator|+
name|resource
operator|.
name|getName
argument_list|()
operator|+
literal|" lock "
operator|+
literal|"while holding ["
operator|+
name|higherResource
operator|.
name|getName
argument_list|()
operator|+
literal|"] lock(s)."
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|releaseLock
argument_list|(
name|higherResource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testLockViolations ()
specifier|public
name|void
name|testLockViolations
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|resourceName
decl_stmt|;
comment|// What this test does is iterate all resources. For each resource
comment|// acquire an higher level lock above the resource, and then take the the
comment|// lock. This should fail. Like that it tries all error combinations.
for|for
control|(
name|OzoneManagerLock
operator|.
name|Resource
name|resource
range|:
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|values
argument_list|()
control|)
block|{
name|Stack
argument_list|<
name|ResourceInfo
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|currentLocks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|ResourceInfo
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OzoneManagerLock
operator|.
name|Resource
name|higherResource
range|:
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|higherResource
operator|.
name|getMask
argument_list|()
operator|>
name|resource
operator|.
name|getMask
argument_list|()
condition|)
block|{
name|resourceName
operator|=
name|generateResourceName
argument_list|(
name|higherResource
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireLock
argument_list|(
name|higherResource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
operator|new
name|ResourceInfo
argument_list|(
name|resourceName
argument_list|,
name|higherResource
argument_list|)
argument_list|)
expr_stmt|;
name|currentLocks
operator|.
name|add
argument_list|(
name|higherResource
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|ResourceInfo
argument_list|(
name|resourceName
argument_list|,
name|higherResource
argument_list|)
argument_list|)
expr_stmt|;
comment|// try to acquire lower level lock
try|try
block|{
name|resourceName
operator|=
name|generateResourceName
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|lock
operator|.
name|acquireLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"cannot acquire "
operator|+
name|resource
operator|.
name|getName
argument_list|()
operator|+
literal|" lock "
operator|+
literal|"while holding "
operator|+
name|currentLocks
operator|.
name|toString
argument_list|()
operator|+
literal|" lock(s)."
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now release locks
while|while
condition|(
operator|!
name|stack
operator|.
name|empty
argument_list|()
condition|)
block|{
name|ResourceInfo
name|resourceInfo
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|lock
operator|.
name|releaseLock
argument_list|(
name|resourceInfo
operator|.
name|getResource
argument_list|()
argument_list|,
name|resourceInfo
operator|.
name|getLockName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|releaseLockWithOutAcquiringLock ()
specifier|public
name|void
name|releaseLockWithOutAcquiringLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|releaseLock
argument_list|(
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|USER
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"releaseLockWithOutAcquiringLock failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalMonitorStateException
name|ex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Releasing lock on resource $user3 without acquiring "
operator|+
literal|"lock"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generateResourceName (OzoneManagerLock.Resource resource)
specifier|private
name|String
index|[]
name|generateResourceName
parameter_list|(
name|OzoneManagerLock
operator|.
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|resource
operator|.
name|getName
argument_list|()
operator|==
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|BUCKET
operator|.
name|getName
argument_list|()
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[]
block|{
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
block|}
return|;
block|}
block|}
comment|/**    * Class used to store locked resource info.    */
DECL|class|ResourceInfo
specifier|public
class|class
name|ResourceInfo
block|{
DECL|field|lockName
specifier|private
name|String
index|[]
name|lockName
decl_stmt|;
DECL|field|resource
specifier|private
name|OzoneManagerLock
operator|.
name|Resource
name|resource
decl_stmt|;
DECL|method|ResourceInfo (String[] resourceName, OzoneManagerLock.Resource resource)
name|ResourceInfo
parameter_list|(
name|String
index|[]
name|resourceName
parameter_list|,
name|OzoneManagerLock
operator|.
name|Resource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|lockName
operator|=
name|resourceName
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
DECL|method|getLockName ()
specifier|public
name|String
index|[]
name|getLockName
parameter_list|()
block|{
return|return
name|lockName
return|;
block|}
DECL|method|getResource ()
specifier|public
name|OzoneManagerLock
operator|.
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|acquireMultiUserLock ()
specifier|public
name|void
name|acquireMultiUserLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireMultiUserLock
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseMultiUserLock
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reAcquireMultiUserLock ()
specifier|public
name|void
name|reAcquireMultiUserLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireMultiUserLock
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquireMultiUserLock
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"reAcquireMultiUserLock failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"cannot acquire USER lock while holding [USER] lock(s)."
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|releaseMultiUserLock
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|acquireMultiUserLockAfterUserLock ()
specifier|public
name|void
name|acquireMultiUserLockAfterUserLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireLock
argument_list|(
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|USER
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquireMultiUserLock
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"acquireMultiUserLockAfterUserLock failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"cannot acquire USER lock while holding [USER] lock(s)."
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|releaseLock
argument_list|(
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|USER
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|acquireUserLockAfterMultiUserLock ()
specifier|public
name|void
name|acquireUserLockAfterMultiUserLock
parameter_list|()
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireMultiUserLock
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|acquireLock
argument_list|(
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|USER
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"acquireUserLockAfterMultiUserLock failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|String
name|message
init|=
literal|"cannot acquire USER lock while holding [USER] lock(s)."
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lock
operator|.
name|releaseMultiUserLock
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLockResourceParallel ()
specifier|public
name|void
name|testLockResourceParallel
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OzoneManagerLock
operator|.
name|Resource
name|resource
range|:
name|OzoneManagerLock
operator|.
name|Resource
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|String
index|[]
name|resourceName
init|=
name|generateResourceName
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|gotLock
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|acquireLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|gotLock
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Let's give some time for the new thread to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Since the new thread is trying to get lock on same resource,
comment|// it will wait.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|gotLock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseLock
argument_list|(
name|resource
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
comment|// Since we have released the lock, the new thread should have the lock
comment|// now.
comment|// Let's give some time for the new thread to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotLock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiLockResourceParallel ()
specifier|public
name|void
name|testMultiLockResourceParallel
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneManagerLock
name|lock
init|=
operator|new
name|OzoneManagerLock
argument_list|(
operator|new
name|OzoneConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lock
operator|.
name|acquireMultiUserLock
argument_list|(
literal|"user2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|gotLock
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|lock
operator|.
name|acquireMultiUserLock
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|gotLock
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseMultiUserLock
argument_list|(
literal|"user1"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Let's give some time for the new thread to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Since the new thread is trying to get lock on same resource, it will
comment|// wait.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|gotLock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|releaseMultiUserLock
argument_list|(
literal|"user2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// Since we have released the lock, the new thread should have the lock
comment|// now.
comment|// Let's give some time for the new thread to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotLock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

