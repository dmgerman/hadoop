begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.exceptions
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test code mappping.  */
end_comment

begin_class
DECL|class|TestResultCodes
specifier|public
class|class
name|TestResultCodes
block|{
annotation|@
name|Test
DECL|method|codeMapping ()
specifier|public
name|void
name|codeMapping
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResultCodes
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
name|Status
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ResultCodes
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ResultCodes
name|codeValue
init|=
name|ResultCodes
operator|.
name|values
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|Status
name|protoBufValue
init|=
name|Status
operator|.
name|values
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Protobuf/Enum constant name mismatch %s %s"
argument_list|,
name|codeValue
argument_list|,
name|protoBufValue
argument_list|)
argument_list|,
name|sameName
argument_list|(
name|codeValue
operator|.
name|name
argument_list|()
argument_list|,
name|protoBufValue
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ResultCodes
name|converted
init|=
name|ResultCodes
operator|.
name|values
argument_list|()
index|[
name|protoBufValue
operator|.
name|ordinal
argument_list|()
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|codeValue
argument_list|,
name|converted
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sameName (String codeValue, String protoBufValue)
specifier|private
name|boolean
name|sameName
parameter_list|(
name|String
name|codeValue
parameter_list|,
name|String
name|protoBufValue
parameter_list|)
block|{
return|return
name|codeValue
operator|.
name|equals
argument_list|(
name|protoBufValue
argument_list|)
return|;
block|}
block|}
end_class

end_unit

