begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneTokenIdentifier
operator|.
name|KIND_NAME
import|;
end_import

begin_comment
comment|/**  * Class to test OzoneDelegationTokenSelector.  */
end_comment

begin_class
DECL|class|TestOzoneDelegationTokenSelector
specifier|public
class|class
name|TestOzoneDelegationTokenSelector
block|{
annotation|@
name|Test
DECL|method|testTokenSelector ()
specifier|public
name|void
name|testTokenSelector
parameter_list|()
block|{
comment|// set dummy details for identifier and password in token.
name|byte
index|[]
name|identifier
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|password
init|=
name|RandomStringUtils
operator|.
name|randomAlphabetic
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|tokenIdentifierToken
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|identifier
argument_list|,
name|password
argument_list|,
name|KIND_NAME
argument_list|,
name|getService
argument_list|()
argument_list|)
decl_stmt|;
name|OzoneDelegationTokenSelector
name|ozoneDelegationTokenSelector
init|=
operator|new
name|OzoneDelegationTokenSelector
argument_list|()
decl_stmt|;
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"om1:9862"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|selectedToken
init|=
name|ozoneDelegationTokenSelector
operator|.
name|selectToken
argument_list|(
name|service
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|tokenIdentifierToken
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|selectedToken
argument_list|)
expr_stmt|;
name|tokenIdentifierToken
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
literal|"om1:9863"
argument_list|)
argument_list|)
expr_stmt|;
name|selectedToken
operator|=
name|ozoneDelegationTokenSelector
operator|.
name|selectToken
argument_list|(
name|service
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|tokenIdentifierToken
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|selectedToken
argument_list|)
expr_stmt|;
name|service
operator|=
operator|new
name|Text
argument_list|(
literal|"om1:9863"
argument_list|)
expr_stmt|;
name|selectedToken
operator|=
name|ozoneDelegationTokenSelector
operator|.
name|selectToken
argument_list|(
name|service
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|tokenIdentifierToken
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|selectedToken
argument_list|)
expr_stmt|;
block|}
DECL|method|getService ()
specifier|private
name|Text
name|getService
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|(
literal|"om1:9862,om2:9862,om3:9862"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

