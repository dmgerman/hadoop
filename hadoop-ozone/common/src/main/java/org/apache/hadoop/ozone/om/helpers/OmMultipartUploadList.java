begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * This class represents multipart list, which is required for  * CompleteMultipart upload request.  */
end_comment

begin_class
DECL|class|OmMultipartUploadList
specifier|public
class|class
name|OmMultipartUploadList
block|{
DECL|field|multipartMap
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|multipartMap
decl_stmt|;
comment|/**    * Construct OmMultipartUploadList which holds multipart map which contains    * part number and part name.    * @param partMap    */
DECL|method|OmMultipartUploadList (Map<Integer, String> partMap)
specifier|public
name|OmMultipartUploadList
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|partMap
parameter_list|)
block|{
name|this
operator|.
name|multipartMap
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|partMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return multipartMap which is a map of part number and part name.    * @return multipartMap    */
DECL|method|getMultipartMap ()
specifier|public
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getMultipartMap
parameter_list|()
block|{
return|return
name|multipartMap
return|;
block|}
comment|/**    * Construct Part list from the multipartMap.    * @return List<Part>    */
DECL|method|getPartsList ()
specifier|public
name|List
argument_list|<
name|Part
argument_list|>
name|getPartsList
parameter_list|()
block|{
name|List
argument_list|<
name|Part
argument_list|>
name|partList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|multipartMap
operator|.
name|forEach
argument_list|(
parameter_list|(
name|partNumber
parameter_list|,
name|partName
parameter_list|)
lambda|->
name|partList
operator|.
name|add
argument_list|(
name|Part
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
operator|.
name|setPartNumber
argument_list|(
name|partNumber
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|partList
return|;
block|}
block|}
end_class

end_unit

