begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|KeyValue
import|;
end_import

begin_comment
comment|/**  * Convert from/to hdds KeyValue protobuf structure.  */
end_comment

begin_class
DECL|class|KeyValueUtil
specifier|public
specifier|final
class|class
name|KeyValueUtil
block|{
DECL|method|KeyValueUtil ()
specifier|private
name|KeyValueUtil
parameter_list|()
block|{   }
comment|/**    * Parse Key,Value map data from protobuf representation.    */
DECL|method|getFromProtobuf (List<KeyValue> metadata)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFromProtobuf
parameter_list|(
name|List
argument_list|<
name|KeyValue
argument_list|>
name|metadata
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|KeyValue
operator|::
name|getKey
argument_list|,
name|KeyValue
operator|::
name|getValue
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Encode key value map to protobuf.    */
DECL|method|toProtobuf (Map<String, String> keyValueMap)
specifier|public
specifier|static
name|List
argument_list|<
name|KeyValue
argument_list|>
name|toProtobuf
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keyValueMap
parameter_list|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|metadataList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|keyValueMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metadataList
operator|.
name|add
argument_list|(
name|KeyValue
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|metadataList
return|;
block|}
block|}
end_class

end_unit

