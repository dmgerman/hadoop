begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMMetadataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|Table
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|db
operator|.
name|TableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * SecretStore for Ozone Master.  */
end_comment

begin_class
DECL|class|OzoneSecretStore
specifier|public
class|class
name|OzoneSecretStore
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneSecretStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|omMetadataManager
specifier|private
name|OMMetadataManager
name|omMetadataManager
decl_stmt|;
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|omMetadataManager
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|omMetadataManager
operator|.
name|getDelegationTokenTable
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while closing OzoneSecretStore."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Support class to maintain state of OzoneSecretStore.    */
DECL|class|OzoneManagerSecretState
specifier|public
specifier|static
class|class
name|OzoneManagerSecretState
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|tokenState
specifier|private
name|Map
argument_list|<
name|T
argument_list|,
name|Long
argument_list|>
name|tokenState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getTokenState ()
specifier|public
name|Map
argument_list|<
name|T
argument_list|,
name|Long
argument_list|>
name|getTokenState
parameter_list|()
block|{
return|return
name|tokenState
return|;
block|}
block|}
DECL|method|OzoneSecretStore (OzoneConfiguration conf, OMMetadataManager omMetadataManager)
specifier|public
name|OzoneSecretStore
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|OMMetadataManager
name|omMetadataManager
parameter_list|)
block|{
name|this
operator|.
name|omMetadataManager
operator|=
name|omMetadataManager
expr_stmt|;
block|}
DECL|method|loadState ()
specifier|public
name|OzoneManagerSecretState
name|loadState
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneManagerSecretState
argument_list|<
name|Integer
argument_list|>
name|state
init|=
operator|new
name|OzoneManagerSecretState
argument_list|()
decl_stmt|;
name|int
name|numTokens
init|=
name|loadTokens
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded "
operator|+
name|numTokens
operator|+
literal|" tokens"
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
DECL|method|storeToken (OzoneTokenIdentifier tokenId, long renewDate)
specifier|public
name|void
name|storeToken
parameter_list|(
name|OzoneTokenIdentifier
name|tokenId
parameter_list|,
name|long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing token {}"
argument_list|,
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|omMetadataManager
operator|.
name|getDelegationTokenTable
argument_list|()
operator|.
name|put
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to store token "
operator|+
name|tokenId
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|updateToken (OzoneTokenIdentifier tokenId, long renewDate)
specifier|public
name|void
name|updateToken
parameter_list|(
name|OzoneTokenIdentifier
name|tokenId
parameter_list|,
name|long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
name|storeToken
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
block|}
DECL|method|removeToken (OzoneTokenIdentifier tokenId)
specifier|public
name|void
name|removeToken
parameter_list|(
name|OzoneTokenIdentifier
name|tokenId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|omMetadataManager
operator|.
name|getDelegationTokenTable
argument_list|()
operator|.
name|delete
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove token {}"
argument_list|,
name|tokenId
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|loadTokens (OzoneManagerSecretState state)
specifier|public
name|int
name|loadTokens
parameter_list|(
name|OzoneManagerSecretState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|loadedToken
init|=
literal|0
decl_stmt|;
try|try
init|(
name|TableIterator
argument_list|<
name|OzoneTokenIdentifier
argument_list|,
name|?
extends|extends
name|KeyValue
argument_list|<
name|OzoneTokenIdentifier
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iterator
init|=
name|omMetadataManager
operator|.
name|getDelegationTokenTable
argument_list|()
operator|.
name|iterator
argument_list|()
init|)
block|{
name|iterator
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|KeyValue
argument_list|<
name|OzoneTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|kv
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|state
operator|.
name|tokenState
operator|.
name|put
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|loadedToken
operator|++
expr_stmt|;
block|}
block|}
return|return
name|loadedToken
return|;
block|}
block|}
end_class

end_unit

