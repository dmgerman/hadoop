begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataKeyFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|utils
operator|.
name|MetadataStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
operator|.
name|getOzoneMetaDirPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_MANAGER_TOKEN_DB_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_CACHE_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_CACHE_SIZE_MB
import|;
end_import

begin_comment
comment|/**  * SecretStore for Ozone Master.  */
end_comment

begin_class
DECL|class|OzoneSecretStore
specifier|public
class|class
name|OzoneSecretStore
parameter_list|<
name|T
extends|extends
name|OzoneTokenIdentifier
parameter_list|>
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OzoneSecretStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TOKEN_MASTER_KEY_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_MASTER_KEY_KEY_PREFIX
init|=
literal|"tokens/key_"
decl_stmt|;
DECL|field|TOKEN_STATE_KEY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_STATE_KEY_PREFIX
init|=
literal|"tokens/token_"
decl_stmt|;
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Support class to maintain state of OzoneSecretStore.    */
DECL|class|OzoneManagerSecretState
specifier|public
specifier|static
class|class
name|OzoneManagerSecretState
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|tokenState
specifier|private
name|Map
argument_list|<
name|T
argument_list|,
name|Long
argument_list|>
name|tokenState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|tokenMasterKeyState
specifier|private
name|Set
argument_list|<
name|OzoneSecretKey
argument_list|>
name|tokenMasterKeyState
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getTokenState ()
specifier|public
name|Map
argument_list|<
name|T
argument_list|,
name|Long
argument_list|>
name|getTokenState
parameter_list|()
block|{
return|return
name|tokenState
return|;
block|}
DECL|method|ozoneManagerSecretState ()
specifier|public
name|Set
argument_list|<
name|OzoneSecretKey
argument_list|>
name|ozoneManagerSecretState
parameter_list|()
block|{
return|return
name|tokenMasterKeyState
return|;
block|}
block|}
DECL|field|store
specifier|private
name|MetadataStore
name|store
decl_stmt|;
DECL|method|OzoneSecretStore (OzoneConfiguration conf)
specifier|public
name|OzoneSecretStore
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|metaDir
init|=
name|getOzoneMetaDirPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|cacheSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OZONE_OM_DB_CACHE_SIZE_MB
argument_list|,
name|OZONE_OM_DB_CACHE_SIZE_DEFAULT
argument_list|)
decl_stmt|;
name|File
name|omTokenDBFile
init|=
operator|new
name|File
argument_list|(
name|metaDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|OZONE_MANAGER_TOKEN_DB_NAME
argument_list|)
decl_stmt|;
name|this
operator|.
name|store
operator|=
name|MetadataStoreBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
operator|.
name|setDbFile
argument_list|(
name|omTokenDBFile
argument_list|)
operator|.
name|setCacheSize
argument_list|(
name|cacheSize
operator|*
name|OzoneConsts
operator|.
name|MB
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|loadState ()
specifier|public
name|OzoneManagerSecretState
name|loadState
parameter_list|()
throws|throws
name|IOException
block|{
name|OzoneManagerSecretState
name|state
init|=
operator|new
name|OzoneManagerSecretState
argument_list|()
decl_stmt|;
name|int
name|numKeys
init|=
name|loadMasterKeys
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded "
operator|+
name|numKeys
operator|+
literal|" token master keys"
argument_list|)
expr_stmt|;
name|int
name|numTokens
init|=
name|loadTokens
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded "
operator|+
name|numTokens
operator|+
literal|" tokens"
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
DECL|method|storeTokenMasterKey (OzoneSecretKey key)
specifier|public
name|void
name|storeTokenMasterKey
parameter_list|(
name|OzoneSecretKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing master key "
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|memStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dataStream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|memStream
argument_list|)
decl_stmt|;
try|try
block|{
name|key
operator|.
name|write
argument_list|(
name|dataStream
argument_list|)
expr_stmt|;
name|dataStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|dataStream
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|dataStream
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|byte
index|[]
name|dbKey
init|=
name|getMasterKeyDBKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|store
operator|.
name|put
argument_list|(
name|dbKey
argument_list|,
name|memStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to store master key "
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|removeTokenMasterKey (OzoneSecretKey key)
specifier|public
name|void
name|removeTokenMasterKey
parameter_list|(
name|OzoneSecretKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing master key "
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|dbKey
init|=
name|getMasterKeyDBKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|store
operator|.
name|delete
argument_list|(
name|dbKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to delete master key "
operator|+
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|storeToken (T tokenId, Long renewDate)
specifier|public
name|void
name|storeToken
parameter_list|(
name|T
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing token "
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|memStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dataStream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|memStream
argument_list|)
decl_stmt|;
try|try
block|{
name|tokenId
operator|.
name|write
argument_list|(
name|dataStream
argument_list|)
expr_stmt|;
name|dataStream
operator|.
name|writeLong
argument_list|(
name|renewDate
argument_list|)
expr_stmt|;
name|dataStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|dataStream
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|dataStream
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|dbKey
init|=
name|getTokenDBKey
argument_list|(
name|tokenId
argument_list|)
decl_stmt|;
try|try
block|{
name|store
operator|.
name|put
argument_list|(
name|dbKey
argument_list|,
name|memStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to store token "
operator|+
name|tokenId
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|updateToken (T tokenId, Long renewDate)
specifier|public
name|void
name|updateToken
parameter_list|(
name|T
name|tokenId
parameter_list|,
name|Long
name|renewDate
parameter_list|)
throws|throws
name|IOException
block|{
name|storeToken
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
block|}
DECL|method|removeToken (T tokenId)
specifier|public
name|void
name|removeToken
parameter_list|(
name|T
name|tokenId
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|dbKey
init|=
name|getTokenDBKey
argument_list|(
name|tokenId
argument_list|)
decl_stmt|;
try|try
block|{
name|store
operator|.
name|delete
argument_list|(
name|dbKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove token "
operator|+
name|tokenId
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|loadMasterKeys (OzoneManagerSecretState state)
specifier|public
name|int
name|loadMasterKeys
parameter_list|(
name|OzoneManagerSecretState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|MetadataKeyFilters
operator|.
name|MetadataKeyFilter
name|filter
init|=
parameter_list|(
name|preKey
parameter_list|,
name|currentKey
parameter_list|,
name|nextKey
parameter_list|)
lambda|->
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|currentKey
argument_list|)
operator|.
name|startsWith
argument_list|(
name|TOKEN_MASTER_KEY_KEY_PREFIX
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|kvs
init|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
block|{
try|try
block|{
name|loadTokenMasterKey
argument_list|(
name|state
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to load master key "
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|kvs
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|loadTokenMasterKey (OzoneManagerSecretState state, byte[] data)
specifier|private
name|void
name|loadTokenMasterKey
parameter_list|(
name|OzoneManagerSecretState
name|state
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|OzoneSecretKey
name|key
init|=
name|OzoneSecretKey
operator|.
name|readProtoBuf
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|state
operator|.
name|tokenMasterKeyState
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|loadTokens (OzoneManagerSecretState state)
specifier|public
name|int
name|loadTokens
parameter_list|(
name|OzoneManagerSecretState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|MetadataKeyFilters
operator|.
name|MetadataKeyFilter
name|filter
init|=
parameter_list|(
name|preKey
parameter_list|,
name|currentKey
parameter_list|,
name|nextKey
parameter_list|)
lambda|->
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|currentKey
argument_list|)
operator|.
name|startsWith
argument_list|(
name|TOKEN_STATE_KEY_PREFIX
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|kvs
init|=
name|store
operator|.
name|getRangeKVs
argument_list|(
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
block|{
try|try
block|{
name|loadToken
argument_list|(
name|state
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to load token "
argument_list|,
name|DFSUtil
operator|.
name|bytes2String
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|kvs
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|loadToken (OzoneManagerSecretState state, byte[] data)
specifier|private
name|void
name|loadToken
parameter_list|(
name|OzoneManagerSecretState
name|state
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|renewDate
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|T
name|tokenId
init|=
operator|(
name|T
operator|)
name|T
operator|.
name|readProtoBuf
argument_list|(
name|in
argument_list|)
decl_stmt|;
try|try
block|{
name|tokenId
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|renewDate
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|tokenState
operator|.
name|put
argument_list|(
name|tokenId
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
block|}
DECL|method|getMasterKeyDBKey (OzoneSecretKey masterKey)
specifier|private
name|byte
index|[]
name|getMasterKeyDBKey
parameter_list|(
name|OzoneSecretKey
name|masterKey
parameter_list|)
block|{
return|return
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|TOKEN_MASTER_KEY_KEY_PREFIX
operator|+
name|masterKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getTokenDBKey (T tokenId)
specifier|private
name|byte
index|[]
name|getTokenDBKey
parameter_list|(
name|T
name|tokenId
parameter_list|)
block|{
return|return
name|DFSUtil
operator|.
name|string2Bytes
argument_list|(
name|TOKEN_STATE_KEY_PREFIX
operator|+
name|tokenId
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

