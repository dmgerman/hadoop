begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_URI_DELIMITER
import|;
end_import

begin_comment
comment|/**  * Utility class for OzoneFileSystem.  */
end_comment

begin_class
DECL|class|OzoneFSUtils
specifier|public
specifier|final
class|class
name|OzoneFSUtils
block|{
DECL|method|OzoneFSUtils ()
specifier|private
name|OzoneFSUtils
parameter_list|()
block|{}
comment|/**    * Returns string representation of path after removing the leading slash.    */
DECL|method|pathToKey (Path path)
specifier|public
specifier|static
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Returns string representation of the input path parent. The function adds    * a trailing slash if it does not exist and returns an empty string if the    * parent is root.    */
DECL|method|getParent (String keyName)
specifier|public
specifier|static
name|String
name|getParent
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|parentDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentDir
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|addTrailingSlashIfNeeded
argument_list|(
name|parentDir
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * The function returns immediate child of given ancestor in a particular    * descendant. For example if ancestor is /a/b and descendant is /a/b/c/d/e    * the function should return /a/b/c/. If the descendant itself is the    * immediate child then it is returned as is without adding a trailing slash.    * This is done to distinguish files from a directory as in ozone files do    * not carry a trailing slash.    */
DECL|method|getImmediateChild (String descendant, String ancestor)
specifier|public
specifier|static
name|String
name|getImmediateChild
parameter_list|(
name|String
name|descendant
parameter_list|,
name|String
name|ancestor
parameter_list|)
block|{
name|ancestor
operator|=
operator|!
name|ancestor
operator|.
name|isEmpty
argument_list|()
condition|?
name|addTrailingSlashIfNeeded
argument_list|(
name|ancestor
argument_list|)
else|:
name|ancestor
expr_stmt|;
if|if
condition|(
operator|!
name|descendant
operator|.
name|startsWith
argument_list|(
name|ancestor
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|descendantPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|descendant
argument_list|)
decl_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|ancestorPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|ancestor
argument_list|)
decl_stmt|;
name|int
name|ancestorPathNameCount
init|=
name|ancestor
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|ancestorPath
operator|.
name|getNameCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|descendantPath
operator|.
name|getNameCount
argument_list|()
operator|-
name|ancestorPathNameCount
operator|>
literal|1
condition|)
block|{
return|return
name|addTrailingSlashIfNeeded
argument_list|(
name|ancestor
operator|+
name|descendantPath
operator|.
name|getName
argument_list|(
name|ancestorPathNameCount
argument_list|)
argument_list|)
return|;
block|}
return|return
name|descendant
return|;
block|}
DECL|method|addTrailingSlashIfNeeded (String key)
specifier|public
specifier|static
name|String
name|addTrailingSlashIfNeeded
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|endsWith
argument_list|(
name|OZONE_URI_DELIMITER
argument_list|)
condition|)
block|{
return|return
name|key
operator|+
name|OZONE_URI_DELIMITER
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
DECL|method|isFile (String keyName)
specifier|public
specifier|static
name|boolean
name|isFile
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
return|return
operator|!
name|keyName
operator|.
name|endsWith
argument_list|(
name|OZONE_URI_DELIMITER
argument_list|)
return|;
block|}
block|}
end_class

end_unit

