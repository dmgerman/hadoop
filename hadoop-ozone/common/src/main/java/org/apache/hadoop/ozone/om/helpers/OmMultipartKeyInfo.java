begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|PartKeyInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * This class represents multipart upload information for a key, which holds  * upload part information of the key.  */
end_comment

begin_class
DECL|class|OmMultipartKeyInfo
specifier|public
class|class
name|OmMultipartKeyInfo
block|{
DECL|field|uploadID
specifier|private
name|String
name|uploadID
decl_stmt|;
DECL|field|partKeyInfoList
specifier|private
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|PartKeyInfo
argument_list|>
name|partKeyInfoList
decl_stmt|;
comment|/**    * Construct OmMultipartKeyInfo object which holds multipart upload    * information for a key.    * @param id    * @param list upload parts of a key.    */
DECL|method|OmMultipartKeyInfo (String id, Map<Integer, PartKeyInfo> list)
specifier|public
name|OmMultipartKeyInfo
parameter_list|(
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartKeyInfo
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|uploadID
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|partKeyInfoList
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the uploadID for this multi part upload of a key.    * @return uploadID    */
DECL|method|getUploadID ()
specifier|public
name|String
name|getUploadID
parameter_list|()
block|{
return|return
name|uploadID
return|;
block|}
DECL|method|getPartKeyInfoMap ()
specifier|public
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|PartKeyInfo
argument_list|>
name|getPartKeyInfoMap
parameter_list|()
block|{
return|return
name|partKeyInfoList
return|;
block|}
DECL|method|addPartKeyInfo (int partNumber, PartKeyInfo partKeyInfo)
specifier|public
name|void
name|addPartKeyInfo
parameter_list|(
name|int
name|partNumber
parameter_list|,
name|PartKeyInfo
name|partKeyInfo
parameter_list|)
block|{
name|this
operator|.
name|partKeyInfoList
operator|.
name|put
argument_list|(
name|partNumber
argument_list|,
name|partKeyInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|getPartKeyInfo (int partNumber)
specifier|public
name|PartKeyInfo
name|getPartKeyInfo
parameter_list|(
name|int
name|partNumber
parameter_list|)
block|{
return|return
name|partKeyInfoList
operator|.
name|get
argument_list|(
name|partNumber
argument_list|)
return|;
block|}
comment|/**    * Construct OmMultipartInfo from MultipartKeyInfo proto object.    * @param multipartKeyInfo    * @return OmMultipartKeyInfo    */
DECL|method|getFromProto (MultipartKeyInfo multipartKeyInfo)
specifier|public
specifier|static
name|OmMultipartKeyInfo
name|getFromProto
parameter_list|(
name|MultipartKeyInfo
name|multipartKeyInfo
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|PartKeyInfo
argument_list|>
name|list
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|multipartKeyInfo
operator|.
name|getPartKeyInfoListList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|partKeyInfo
lambda|->
name|list
operator|.
name|put
argument_list|(
name|partKeyInfo
operator|.
name|getPartNumber
argument_list|()
argument_list|,
name|partKeyInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|OmMultipartKeyInfo
argument_list|(
name|multipartKeyInfo
operator|.
name|getUploadID
argument_list|()
argument_list|,
name|list
argument_list|)
return|;
block|}
comment|/**    * Construct MultipartKeyInfo from this object.    * @return MultipartKeyInfo    */
DECL|method|getProto ()
specifier|public
name|MultipartKeyInfo
name|getProto
parameter_list|()
block|{
name|MultipartKeyInfo
operator|.
name|Builder
name|builder
init|=
name|MultipartKeyInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUploadID
argument_list|(
name|uploadID
argument_list|)
decl_stmt|;
name|partKeyInfoList
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
name|builder
operator|.
name|addPartKeyInfoList
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|other
operator|instanceof
name|OmMultipartKeyInfo
operator|&&
name|uploadID
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|OmMultipartKeyInfo
operator|)
name|other
operator|)
operator|.
name|getUploadID
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|uploadID
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

