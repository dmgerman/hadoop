begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|RequestContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
operator|.
name|AclScope
operator|.
name|ACCESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
operator|.
name|AclScope
operator|.
name|DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
operator|.
name|GROUP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
operator|.
name|USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
operator|.
name|NONE
import|;
end_import

begin_comment
comment|/**  * Helper class for ozone acls operations.  */
end_comment

begin_class
DECL|class|OzoneAclUtil
specifier|public
specifier|final
class|class
name|OzoneAclUtil
block|{
DECL|method|OzoneAclUtil ()
specifier|private
name|OzoneAclUtil
parameter_list|()
block|{   }
comment|/**    * Helper function to get access acl list for current user.    *    * @param userName    * @param userGroups    * @return list of OzoneAcls    * */
DECL|method|getAclList (String userName, List<String> userGroups, ACLType userRights, ACLType groupRights)
specifier|public
specifier|static
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|getAclList
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|userGroups
parameter_list|,
name|ACLType
name|userRights
parameter_list|,
name|ACLType
name|groupRights
parameter_list|)
block|{
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|listOfAcls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// User ACL.
name|listOfAcls
operator|.
name|add
argument_list|(
operator|new
name|OzoneAcl
argument_list|(
name|USER
argument_list|,
name|userName
argument_list|,
name|userRights
argument_list|,
name|ACCESS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|userGroups
operator|!=
literal|null
condition|)
block|{
comment|// Group ACLs of the User.
name|userGroups
operator|.
name|forEach
argument_list|(
parameter_list|(
name|group
parameter_list|)
lambda|->
name|listOfAcls
operator|.
name|add
argument_list|(
operator|new
name|OzoneAcl
argument_list|(
name|GROUP
argument_list|,
name|group
argument_list|,
name|groupRights
argument_list|,
name|ACCESS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|listOfAcls
return|;
block|}
comment|/**    * Check if acl right requested for given RequestContext exist    * in provided acl list.    * Acl validation rules:    * 1. If user/group has ALL bit set than all user should have all rights.    * 2. If user/group has NONE bit set than user/group will not have any right.    * 3. For all other individual rights individual bits should be set.    *    * @param acls    * @param context    * @return return true if acl list contains right requsted in context.    * */
DECL|method|checkAclRight (List<OzoneAcl> acls, RequestContext context)
specifier|public
specifier|static
name|boolean
name|checkAclRight
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
parameter_list|,
name|RequestContext
name|context
parameter_list|)
throws|throws
name|OMException
block|{
name|String
index|[]
name|userGroups
init|=
name|context
operator|.
name|getClientUgi
argument_list|()
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
name|context
operator|.
name|getClientUgi
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|ACLType
name|aclToCheck
init|=
name|context
operator|.
name|getAclRights
argument_list|()
decl_stmt|;
for|for
control|(
name|OzoneAcl
name|a
range|:
name|acls
control|)
block|{
if|if
condition|(
name|checkAccessInAcl
argument_list|(
name|a
argument_list|,
name|userGroups
argument_list|,
name|userName
argument_list|,
name|aclToCheck
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|checkAccessInAcl (OzoneAcl a, String[] groups, String username, ACLType aclToCheck)
specifier|private
specifier|static
name|boolean
name|checkAccessInAcl
parameter_list|(
name|OzoneAcl
name|a
parameter_list|,
name|String
index|[]
name|groups
parameter_list|,
name|String
name|username
parameter_list|,
name|ACLType
name|aclToCheck
parameter_list|)
block|{
name|BitSet
name|rights
init|=
name|a
operator|.
name|getAclBitSet
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|a
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|USER
case|:
if|if
condition|(
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|username
argument_list|)
condition|)
block|{
return|return
name|checkIfAclBitIsSet
argument_list|(
name|aclToCheck
argument_list|,
name|rights
argument_list|)
return|;
block|}
break|break;
case|case
name|GROUP
case|:
for|for
control|(
name|String
name|grp
range|:
name|groups
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|grp
argument_list|)
condition|)
block|{
return|return
name|checkIfAclBitIsSet
argument_list|(
name|aclToCheck
argument_list|,
name|rights
argument_list|)
return|;
block|}
block|}
break|break;
default|default:
return|return
name|checkIfAclBitIsSet
argument_list|(
name|aclToCheck
argument_list|,
name|rights
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Check if acl right requested for given RequestContext exist    * in provided acl list.    * Acl validation rules:    * 1. If user/group has ALL bit set than all user should have all rights.    * 2. If user/group has NONE bit set than user/group will not have any right.    * 3. For all other individual rights individual bits should be set.    *    * @param acls    * @param context    * @return return true if acl list contains right requsted in context.    * */
DECL|method|checkAclRights (List<OzoneAcl> acls, RequestContext context)
specifier|public
specifier|static
name|boolean
name|checkAclRights
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
parameter_list|,
name|RequestContext
name|context
parameter_list|)
throws|throws
name|OMException
block|{
name|String
index|[]
name|userGroups
init|=
name|context
operator|.
name|getClientUgi
argument_list|()
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
name|context
operator|.
name|getClientUgi
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|ACLType
name|aclToCheck
init|=
name|context
operator|.
name|getAclRights
argument_list|()
decl_stmt|;
for|for
control|(
name|OzoneAcl
name|acl
range|:
name|acls
control|)
block|{
if|if
condition|(
name|checkAccessInAcl
argument_list|(
name|acl
argument_list|,
name|userGroups
argument_list|,
name|userName
argument_list|,
name|aclToCheck
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Helper function to check if bit for given acl is set.    * @param acl    * @param bitset    * @return True of acl bit is set else false.    * */
DECL|method|checkIfAclBitIsSet (IAccessAuthorizer.ACLType acl, BitSet bitset)
specifier|public
specifier|static
name|boolean
name|checkIfAclBitIsSet
parameter_list|(
name|IAccessAuthorizer
operator|.
name|ACLType
name|acl
parameter_list|,
name|BitSet
name|bitset
parameter_list|)
block|{
if|if
condition|(
name|bitset
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|(
name|bitset
operator|.
name|get
argument_list|(
name|acl
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|||
name|bitset
operator|.
name|get
argument_list|(
name|ALL
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|)
operator|&&
operator|!
name|bitset
operator|.
name|get
argument_list|(
name|NONE
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|/**    * Helper function to inherit default ACL as access ACL for child object.    * 1. deep copy of OzoneAcl to avoid unexpected parent default ACL change    * 2. merge inherited access ACL with existing access ACL via    * OzoneUtils.addAcl().    * @param acls    * @param parentAcls    * @return true if acls inherited DEFAULT acls from parentAcls successfully,    * false otherwise.    */
DECL|method|inheritDefaultAcls (List<OzoneAcl> acls, List<OzoneAcl> parentAcls)
specifier|public
specifier|static
name|boolean
name|inheritDefaultAcls
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
parameter_list|,
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|parentAcls
parameter_list|)
block|{
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|inheritedAcls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parentAcls
operator|!=
literal|null
operator|&&
operator|!
name|parentAcls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|inheritedAcls
operator|=
name|parentAcls
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|a
lambda|->
name|a
operator|.
name|getAclScope
argument_list|()
operator|==
name|DEFAULT
argument_list|)
operator|.
name|map
argument_list|(
name|acl
lambda|->
operator|new
name|OzoneAcl
argument_list|(
name|acl
operator|.
name|getType
argument_list|()
argument_list|,
name|acl
operator|.
name|getName
argument_list|()
argument_list|,
name|acl
operator|.
name|getAclBitSet
argument_list|()
argument_list|,
name|OzoneAcl
operator|.
name|AclScope
operator|.
name|ACCESS
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inheritedAcls
operator|!=
literal|null
operator|&&
operator|!
name|inheritedAcls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|inheritedAcls
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|acl
lambda|->
name|addAcl
argument_list|(
name|acls
argument_list|,
name|acl
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Convert a list of OzoneAclInfo(protoc) to list of OzoneAcl(java).    * @param protoAcls    * @return list of OzoneAcl.    */
DECL|method|fromProtobuf (List<OzoneAclInfo> protoAcls)
specifier|public
specifier|static
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|fromProtobuf
parameter_list|(
name|List
argument_list|<
name|OzoneAclInfo
argument_list|>
name|protoAcls
parameter_list|)
block|{
return|return
name|protoAcls
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|acl
lambda|->
name|OzoneAcl
operator|.
name|fromProtobuf
argument_list|(
name|acl
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convert a list of OzoneAcl(java) to list of OzoneAclInfo(protoc).    * @param protoAcls    * @return list of OzoneAclInfo.    */
DECL|method|toProtobuf (List<OzoneAcl> protoAcls)
specifier|public
specifier|static
name|List
argument_list|<
name|OzoneAclInfo
argument_list|>
name|toProtobuf
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|protoAcls
parameter_list|)
block|{
return|return
name|protoAcls
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|acl
lambda|->
name|OzoneAcl
operator|.
name|toProtobuf
argument_list|(
name|acl
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add an OzoneAcl to existing list of OzoneAcls.    * @param existingAcls    * @param acl    * @return true if current OzoneAcls are changed, false otherwise.    */
DECL|method|addAcl (List<OzoneAcl> existingAcls, OzoneAcl acl)
specifier|public
specifier|static
name|boolean
name|addAcl
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|existingAcls
parameter_list|,
name|OzoneAcl
name|acl
parameter_list|)
block|{
if|if
condition|(
name|existingAcls
operator|==
literal|null
operator|||
name|acl
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|OzoneAcl
name|a
range|:
name|existingAcls
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|acl
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getAclScope
argument_list|()
operator|.
name|equals
argument_list|(
name|acl
operator|.
name|getAclScope
argument_list|()
argument_list|)
condition|)
block|{
name|BitSet
name|current
init|=
name|a
operator|.
name|getAclBitSet
argument_list|()
decl_stmt|;
name|BitSet
name|original
init|=
operator|(
name|BitSet
operator|)
name|current
operator|.
name|clone
argument_list|()
decl_stmt|;
name|current
operator|.
name|or
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|equals
argument_list|(
name|original
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
name|existingAcls
operator|.
name|add
argument_list|(
name|acl
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * remove OzoneAcl from existing list of OzoneAcls.    * @param existingAcls    * @param acl    * @return true if current OzoneAcls are changed, false otherwise.    */
DECL|method|removeAcl (List<OzoneAcl> existingAcls, OzoneAcl acl)
specifier|public
specifier|static
name|boolean
name|removeAcl
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|existingAcls
parameter_list|,
name|OzoneAcl
name|acl
parameter_list|)
block|{
if|if
condition|(
name|existingAcls
operator|==
literal|null
operator|||
name|existingAcls
operator|.
name|isEmpty
argument_list|()
operator|||
name|acl
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|OzoneAcl
name|a
range|:
name|existingAcls
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|acl
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|a
operator|.
name|getAclScope
argument_list|()
operator|.
name|equals
argument_list|(
name|acl
operator|.
name|getAclScope
argument_list|()
argument_list|)
condition|)
block|{
name|BitSet
name|current
init|=
name|a
operator|.
name|getAclBitSet
argument_list|()
decl_stmt|;
name|BitSet
name|original
init|=
operator|(
name|BitSet
operator|)
name|current
operator|.
name|clone
argument_list|()
decl_stmt|;
name|current
operator|.
name|andNot
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|.
name|equals
argument_list|(
name|original
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|existingAcls
operator|.
name|remove
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Set existingAcls to newAcls.    * @param existingAcls    * @param newAcls    * @return true if newAcls are set successfully, false otherwise.    */
DECL|method|setAcl (List<OzoneAcl> existingAcls, List<OzoneAcl> newAcls)
specifier|public
specifier|static
name|boolean
name|setAcl
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|existingAcls
parameter_list|,
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|newAcls
parameter_list|)
block|{
if|if
condition|(
name|existingAcls
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|existingAcls
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|newAcls
operator|!=
literal|null
condition|)
block|{
name|existingAcls
operator|.
name|addAll
argument_list|(
name|newAcls
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

