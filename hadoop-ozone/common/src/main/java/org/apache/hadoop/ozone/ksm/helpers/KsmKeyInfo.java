begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.ksm.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|ksm
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|KeySpaceManagerProtocolProtos
operator|.
name|KeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Args for key block. The block instance for the key requested in putKey.  * This is returned from KSM to client, and client use class to talk to  * datanode. Also, this is the metadata written to ksm.db on server side.  */
end_comment

begin_class
DECL|class|KsmKeyInfo
specifier|public
specifier|final
class|class
name|KsmKeyInfo
block|{
DECL|field|volumeName
specifier|private
specifier|final
name|String
name|volumeName
decl_stmt|;
DECL|field|bucketName
specifier|private
specifier|final
name|String
name|bucketName
decl_stmt|;
comment|// name of key client specified
DECL|field|keyName
specifier|private
name|String
name|keyName
decl_stmt|;
DECL|field|dataSize
specifier|private
name|long
name|dataSize
decl_stmt|;
DECL|field|keyLocationVersions
specifier|private
name|List
argument_list|<
name|KsmKeyLocationInfoGroup
argument_list|>
name|keyLocationVersions
decl_stmt|;
DECL|field|creationTime
specifier|private
specifier|final
name|long
name|creationTime
decl_stmt|;
DECL|field|modificationTime
specifier|private
name|long
name|modificationTime
decl_stmt|;
DECL|method|KsmKeyInfo (String volumeName, String bucketName, String keyName, List<KsmKeyLocationInfoGroup> versions, long dataSize, long creationTime, long modificationTime)
specifier|private
name|KsmKeyInfo
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|keyName
parameter_list|,
name|List
argument_list|<
name|KsmKeyLocationInfoGroup
argument_list|>
name|versions
parameter_list|,
name|long
name|dataSize
parameter_list|,
name|long
name|creationTime
parameter_list|,
name|long
name|modificationTime
parameter_list|)
block|{
name|this
operator|.
name|volumeName
operator|=
name|volumeName
expr_stmt|;
name|this
operator|.
name|bucketName
operator|=
name|bucketName
expr_stmt|;
name|this
operator|.
name|keyName
operator|=
name|keyName
expr_stmt|;
name|this
operator|.
name|dataSize
operator|=
name|dataSize
expr_stmt|;
comment|// it is important that the versions are ordered from old to new.
comment|// Do this sanity check when versions got loaded on creating KsmKeyInfo.
comment|// TODO : this is not necessary, here only because versioning is still a
comment|// work in-progress, remove this following check when versioning is
comment|// complete and prove correctly functioning
name|long
name|currentVersion
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|KsmKeyLocationInfoGroup
name|version
range|:
name|versions
control|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|currentVersion
operator|+
literal|1
operator|==
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|currentVersion
operator|=
name|version
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|keyLocationVersions
operator|=
name|versions
expr_stmt|;
name|this
operator|.
name|creationTime
operator|=
name|creationTime
expr_stmt|;
name|this
operator|.
name|modificationTime
operator|=
name|modificationTime
expr_stmt|;
block|}
DECL|method|getVolumeName ()
specifier|public
name|String
name|getVolumeName
parameter_list|()
block|{
return|return
name|volumeName
return|;
block|}
DECL|method|getBucketName ()
specifier|public
name|String
name|getBucketName
parameter_list|()
block|{
return|return
name|bucketName
return|;
block|}
DECL|method|getKeyName ()
specifier|public
name|String
name|getKeyName
parameter_list|()
block|{
return|return
name|keyName
return|;
block|}
DECL|method|setKeyName (String keyName)
specifier|public
name|void
name|setKeyName
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
name|this
operator|.
name|keyName
operator|=
name|keyName
expr_stmt|;
block|}
DECL|method|getDataSize ()
specifier|public
name|long
name|getDataSize
parameter_list|()
block|{
return|return
name|dataSize
return|;
block|}
DECL|method|setDataSize (long size)
specifier|public
name|void
name|setDataSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|dataSize
operator|=
name|size
expr_stmt|;
block|}
DECL|method|getLatestVersionLocations ()
specifier|public
specifier|synchronized
name|KsmKeyLocationInfoGroup
name|getLatestVersionLocations
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|keyLocationVersions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|keyLocationVersions
operator|.
name|get
argument_list|(
name|keyLocationVersions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|getKeyLocationVersions ()
specifier|public
name|List
argument_list|<
name|KsmKeyLocationInfoGroup
argument_list|>
name|getKeyLocationVersions
parameter_list|()
block|{
return|return
name|keyLocationVersions
return|;
block|}
DECL|method|updateModifcationTime ()
specifier|public
name|void
name|updateModifcationTime
parameter_list|()
block|{
name|this
operator|.
name|modificationTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
comment|/**    * Append a set of blocks to the latest version. Note that these blocks are    * part of the latest version, not a new version.    *    * @param newLocationList the list of new blocks to be added.    * @throws IOException    */
DECL|method|appendNewBlocks ( List<KsmKeyLocationInfo> newLocationList)
specifier|public
specifier|synchronized
name|void
name|appendNewBlocks
parameter_list|(
name|List
argument_list|<
name|KsmKeyLocationInfo
argument_list|>
name|newLocationList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|keyLocationVersions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Appending new block, but no version exist"
argument_list|)
throw|;
block|}
name|KsmKeyLocationInfoGroup
name|currentLatestVersion
init|=
name|keyLocationVersions
operator|.
name|get
argument_list|(
name|keyLocationVersions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|currentLatestVersion
operator|.
name|appendNewBlocks
argument_list|(
name|newLocationList
argument_list|)
expr_stmt|;
name|setModificationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a new set of blocks. The new blocks will be added as appending a new    * version to the all version list.    *    * @param newLocationList the list of new blocks to be added.    * @throws IOException    */
DECL|method|addNewVersion ( List<KsmKeyLocationInfo> newLocationList)
specifier|public
specifier|synchronized
name|long
name|addNewVersion
parameter_list|(
name|List
argument_list|<
name|KsmKeyLocationInfo
argument_list|>
name|newLocationList
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|latestVersionNum
decl_stmt|;
if|if
condition|(
name|keyLocationVersions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no version exist, these blocks are the very first version.
name|keyLocationVersions
operator|.
name|add
argument_list|(
operator|new
name|KsmKeyLocationInfoGroup
argument_list|(
literal|0
argument_list|,
name|newLocationList
argument_list|)
argument_list|)
expr_stmt|;
name|latestVersionNum
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// it is important that the new version are always at the tail of the list
name|KsmKeyLocationInfoGroup
name|currentLatestVersion
init|=
name|keyLocationVersions
operator|.
name|get
argument_list|(
name|keyLocationVersions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// the new version is created based on the current latest version
name|KsmKeyLocationInfoGroup
name|newVersion
init|=
name|currentLatestVersion
operator|.
name|generateNextVersion
argument_list|(
name|newLocationList
argument_list|)
decl_stmt|;
name|keyLocationVersions
operator|.
name|add
argument_list|(
name|newVersion
argument_list|)
expr_stmt|;
name|latestVersionNum
operator|=
name|newVersion
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
name|setModificationTime
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|latestVersionNum
return|;
block|}
DECL|method|getCreationTime ()
specifier|public
name|long
name|getCreationTime
parameter_list|()
block|{
return|return
name|creationTime
return|;
block|}
DECL|method|getModificationTime ()
specifier|public
name|long
name|getModificationTime
parameter_list|()
block|{
return|return
name|modificationTime
return|;
block|}
DECL|method|setModificationTime (long modificationTime)
specifier|public
name|void
name|setModificationTime
parameter_list|(
name|long
name|modificationTime
parameter_list|)
block|{
name|this
operator|.
name|modificationTime
operator|=
name|modificationTime
expr_stmt|;
block|}
comment|/**    * Builder of KsmKeyInfo.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
DECL|field|bucketName
specifier|private
name|String
name|bucketName
decl_stmt|;
DECL|field|keyName
specifier|private
name|String
name|keyName
decl_stmt|;
DECL|field|dataSize
specifier|private
name|long
name|dataSize
decl_stmt|;
DECL|field|ksmKeyLocationInfoGroups
specifier|private
name|List
argument_list|<
name|KsmKeyLocationInfoGroup
argument_list|>
name|ksmKeyLocationInfoGroups
decl_stmt|;
DECL|field|creationTime
specifier|private
name|long
name|creationTime
decl_stmt|;
DECL|field|modificationTime
specifier|private
name|long
name|modificationTime
decl_stmt|;
DECL|method|setVolumeName (String volume)
specifier|public
name|Builder
name|setVolumeName
parameter_list|(
name|String
name|volume
parameter_list|)
block|{
name|this
operator|.
name|volumeName
operator|=
name|volume
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setBucketName (String bucket)
specifier|public
name|Builder
name|setBucketName
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
name|this
operator|.
name|bucketName
operator|=
name|bucket
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setKeyName (String key)
specifier|public
name|Builder
name|setKeyName
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|keyName
operator|=
name|key
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setKsmKeyLocationInfos ( List<KsmKeyLocationInfoGroup> ksmKeyLocationInfoList)
specifier|public
name|Builder
name|setKsmKeyLocationInfos
parameter_list|(
name|List
argument_list|<
name|KsmKeyLocationInfoGroup
argument_list|>
name|ksmKeyLocationInfoList
parameter_list|)
block|{
name|this
operator|.
name|ksmKeyLocationInfoGroups
operator|=
name|ksmKeyLocationInfoList
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDataSize (long size)
specifier|public
name|Builder
name|setDataSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|dataSize
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setCreationTime (long crTime)
specifier|public
name|Builder
name|setCreationTime
parameter_list|(
name|long
name|crTime
parameter_list|)
block|{
name|this
operator|.
name|creationTime
operator|=
name|crTime
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setModificationTime (long mTime)
specifier|public
name|Builder
name|setModificationTime
parameter_list|(
name|long
name|mTime
parameter_list|)
block|{
name|this
operator|.
name|modificationTime
operator|=
name|mTime
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|KsmKeyInfo
name|build
parameter_list|()
block|{
return|return
operator|new
name|KsmKeyInfo
argument_list|(
name|volumeName
argument_list|,
name|bucketName
argument_list|,
name|keyName
argument_list|,
name|ksmKeyLocationInfoGroups
argument_list|,
name|dataSize
argument_list|,
name|creationTime
argument_list|,
name|modificationTime
argument_list|)
return|;
block|}
block|}
DECL|method|getProtobuf ()
specifier|public
name|KeyInfo
name|getProtobuf
parameter_list|()
block|{
name|long
name|latestVersion
init|=
name|keyLocationVersions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|keyLocationVersions
operator|.
name|get
argument_list|(
name|keyLocationVersions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getVersion
argument_list|()
decl_stmt|;
return|return
name|KeyInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|dataSize
argument_list|)
operator|.
name|addAllKeyLocationList
argument_list|(
name|keyLocationVersions
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|KsmKeyLocationInfoGroup
operator|::
name|getProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setLatestVersion
argument_list|(
name|latestVersion
argument_list|)
operator|.
name|setCreationTime
argument_list|(
name|creationTime
argument_list|)
operator|.
name|setModificationTime
argument_list|(
name|modificationTime
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getFromProtobuf (KeyInfo keyInfo)
specifier|public
specifier|static
name|KsmKeyInfo
name|getFromProtobuf
parameter_list|(
name|KeyInfo
name|keyInfo
parameter_list|)
block|{
return|return
operator|new
name|KsmKeyInfo
argument_list|(
name|keyInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|keyInfo
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|keyInfo
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|keyInfo
operator|.
name|getKeyLocationListList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|KsmKeyLocationInfoGroup
operator|::
name|getFromProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|,
name|keyInfo
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|keyInfo
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|keyInfo
operator|.
name|getModificationTime
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

