begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OmUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|S3SecretValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneSecurityException
operator|.
name|ResultCodes
operator|.
name|S3_SECRET_NOT_FOUND
import|;
end_import

begin_comment
comment|/**  * S3 Secret manager.  */
end_comment

begin_class
DECL|class|S3SecretManagerImpl
specifier|public
class|class
name|S3SecretManagerImpl
implements|implements
name|S3SecretManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3SecretManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * OMMetadataManager is used for accessing OM MetadataDB and ReadWriteLock.    */
DECL|field|omMetadataManager
specifier|private
specifier|final
name|OMMetadataManager
name|omMetadataManager
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|OzoneConfiguration
name|configuration
decl_stmt|;
comment|/**    * Constructs S3SecretManager.    *    * @param omMetadataManager    */
DECL|method|S3SecretManagerImpl (OzoneConfiguration configuration, OMMetadataManager omMetadataManager)
specifier|public
name|S3SecretManagerImpl
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|,
name|OMMetadataManager
name|omMetadataManager
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|omMetadataManager
operator|=
name|omMetadataManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getS3Secret (String kerberosID)
specifier|public
name|S3SecretValue
name|getS3Secret
parameter_list|(
name|String
name|kerberosID
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|kerberosID
argument_list|)
argument_list|,
literal|"kerberosID cannot be null or empty."
argument_list|)
expr_stmt|;
name|S3SecretValue
name|result
init|=
literal|null
decl_stmt|;
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireS3SecretLock
argument_list|(
name|kerberosID
argument_list|)
expr_stmt|;
try|try
block|{
name|S3SecretValue
name|s3Secret
init|=
name|omMetadataManager
operator|.
name|getS3SecretTable
argument_list|()
operator|.
name|get
argument_list|(
name|kerberosID
argument_list|)
decl_stmt|;
if|if
condition|(
name|s3Secret
operator|==
literal|null
condition|)
block|{
name|byte
index|[]
name|secret
init|=
name|OmUtils
operator|.
name|getSHADigest
argument_list|()
decl_stmt|;
name|result
operator|=
operator|new
name|S3SecretValue
argument_list|(
name|kerberosID
argument_list|,
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|secret
argument_list|)
argument_list|)
expr_stmt|;
name|omMetadataManager
operator|.
name|getS3SecretTable
argument_list|()
operator|.
name|put
argument_list|(
name|kerberosID
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|s3Secret
return|;
block|}
block|}
finally|finally
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseS3SecretLock
argument_list|(
name|kerberosID
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Secret for accessKey:{}, proto:{}"
argument_list|,
name|kerberosID
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getS3UserSecretString (String kerberosID)
specifier|public
name|String
name|getS3UserSecretString
parameter_list|(
name|String
name|kerberosID
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|kerberosID
argument_list|)
argument_list|,
literal|"awsAccessKeyId cannot be null or empty."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Get secret for awsAccessKey:{}"
argument_list|,
name|kerberosID
argument_list|)
expr_stmt|;
name|S3SecretValue
name|s3Secret
decl_stmt|;
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|acquireS3SecretLock
argument_list|(
name|kerberosID
argument_list|)
expr_stmt|;
try|try
block|{
name|s3Secret
operator|=
name|omMetadataManager
operator|.
name|getS3SecretTable
argument_list|()
operator|.
name|get
argument_list|(
name|kerberosID
argument_list|)
expr_stmt|;
if|if
condition|(
name|s3Secret
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OzoneSecurityException
argument_list|(
literal|"S3 secret not found for "
operator|+
literal|"awsAccessKeyId "
operator|+
name|kerberosID
argument_list|,
name|S3_SECRET_NOT_FOUND
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|omMetadataManager
operator|.
name|getLock
argument_list|()
operator|.
name|releaseS3SecretLock
argument_list|(
name|kerberosID
argument_list|)
expr_stmt|;
block|}
return|return
name|s3Secret
operator|.
name|getAwsSecret
argument_list|()
return|;
block|}
DECL|method|getOmMetadataManager ()
specifier|public
name|OMMetadataManager
name|getOmMetadataManager
parameter_list|()
block|{
return|return
name|omMetadataManager
return|;
block|}
block|}
end_class

end_unit

