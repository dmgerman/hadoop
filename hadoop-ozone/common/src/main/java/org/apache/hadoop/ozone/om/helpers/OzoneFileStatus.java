begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSProtos
operator|.
name|FileStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|protocolPB
operator|.
name|PBHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
operator|.
name|OZONE_URI_DELIMITER
import|;
end_import

begin_comment
comment|/**  * File Status of the Ozone Key.  */
end_comment

begin_class
DECL|class|OzoneFileStatus
specifier|public
class|class
name|OzoneFileStatus
extends|extends
name|FileStatus
block|{
DECL|method|OzoneFileStatus (OmKeyInfo key, long blockSize, boolean isDirectory)
specifier|public
name|OzoneFileStatus
parameter_list|(
name|OmKeyInfo
name|key
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|boolean
name|isDirectory
parameter_list|)
block|{
name|super
argument_list|(
name|key
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|isDirectory
argument_list|,
name|key
operator|.
name|getFactor
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|,
name|blockSize
argument_list|,
name|key
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|getPath
argument_list|(
name|key
operator|.
name|getKeyName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|OzoneFileStatus (FileStatus status)
specifier|public
name|OzoneFileStatus
parameter_list|(
name|FileStatus
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
comment|// Use this constructor only for directories
DECL|method|OzoneFileStatus (int replication, long blockSize, String keyName)
specifier|public
name|OzoneFileStatus
parameter_list|(
name|int
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|String
name|keyName
parameter_list|)
block|{
name|super
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
literal|0
argument_list|,
name|getPath
argument_list|(
name|keyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getProtobuf ()
specifier|public
name|FileStatusProto
name|getProtobuf
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|PBHelper
operator|.
name|convert
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getFromProtobuf (FileStatusProto response)
specifier|public
specifier|static
name|OzoneFileStatus
name|getFromProtobuf
parameter_list|(
name|FileStatusProto
name|response
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|OzoneFileStatus
argument_list|(
name|PBHelper
operator|.
name|convert
argument_list|(
name|response
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getPath (String keyName)
specifier|public
specifier|static
name|Path
name|getPath
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|OZONE_URI_DELIMITER
operator|+
name|keyName
argument_list|)
return|;
block|}
DECL|method|makeQualified (URI defaultUri, Path parent, String owner, String group)
specifier|public
name|FileStatus
name|makeQualified
parameter_list|(
name|URI
name|defaultUri
parameter_list|,
name|Path
name|parent
parameter_list|,
name|String
name|owner
parameter_list|,
name|String
name|group
parameter_list|)
block|{
comment|// fully-qualify path
name|setPath
argument_list|(
name|parent
operator|.
name|makeQualified
argument_list|(
name|defaultUri
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDirectory
argument_list|()
condition|)
block|{
name|setPermission
argument_list|(
name|FsPermission
operator|.
name|getDirDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setPermission
argument_list|(
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
comment|// API compatibility
block|}
comment|/** Get the modification time of the file/directory.    *    * o3fs uses objects as "fake" directories, which are not updated to    * reflect the accurate modification time. We choose to report the    * current time because some parts of the ecosystem (e.g. the    * HistoryServer) use modification time to ignore "old" directories.    *    * @return for files the modification time in milliseconds since January 1,    *         1970 UTC or for directories the current time.    */
annotation|@
name|Override
DECL|method|getModificationTime ()
specifier|public
name|long
name|getModificationTime
parameter_list|()
block|{
if|if
condition|(
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getModificationTime
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

