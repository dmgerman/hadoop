begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rest.response
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|response
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|OzoneQuota
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_comment
comment|/**  * VolumeInfo Class is used for parsing json response  * when VolumeInfo Call is made.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|VolumeInfo
specifier|public
class|class
name|VolumeInfo
implements|implements
name|Comparable
argument_list|<
name|VolumeInfo
argument_list|>
block|{
DECL|field|READER
specifier|private
specifier|static
specifier|final
name|ObjectReader
name|READER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readerFor
argument_list|(
name|VolumeInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|owner
specifier|private
name|VolumeOwner
name|owner
decl_stmt|;
DECL|field|quota
specifier|private
name|OzoneQuota
name|quota
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
DECL|field|createdOn
specifier|private
name|String
name|createdOn
decl_stmt|;
DECL|field|createdBy
specifier|private
name|String
name|createdBy
decl_stmt|;
comment|/**    * Constructor for VolumeInfo.    *    * @param volumeName - Name of the Volume    * @param createdOn _ Date String    * @param createdBy - Person who created it    */
DECL|method|VolumeInfo (String volumeName, String createdOn, String createdBy)
specifier|public
name|VolumeInfo
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|createdOn
parameter_list|,
name|String
name|createdBy
parameter_list|)
block|{
name|this
operator|.
name|volumeName
operator|=
name|volumeName
expr_stmt|;
name|this
operator|.
name|createdOn
operator|=
name|createdOn
expr_stmt|;
name|this
operator|.
name|createdBy
operator|=
name|createdBy
expr_stmt|;
block|}
comment|/**    * Constructor for VolumeInfo.    */
DECL|method|VolumeInfo ()
specifier|public
name|VolumeInfo
parameter_list|()
block|{   }
comment|/**    * gets the volume name.    *    * @return Volume Name    */
DECL|method|getVolumeName ()
specifier|public
name|String
name|getVolumeName
parameter_list|()
block|{
return|return
name|volumeName
return|;
block|}
comment|/**    * Sets the volume name.    *    * @param volumeName Volume Name    */
DECL|method|setVolumeName (String volumeName)
specifier|public
name|void
name|setVolumeName
parameter_list|(
name|String
name|volumeName
parameter_list|)
block|{
name|this
operator|.
name|volumeName
operator|=
name|volumeName
expr_stmt|;
block|}
comment|/**    * Returns the name of the person who created this volume.    *    * @return Name of Admin who created this    */
DECL|method|getCreatedBy ()
specifier|public
name|String
name|getCreatedBy
parameter_list|()
block|{
return|return
name|createdBy
return|;
block|}
comment|/**    * Sets the user name of the person who created this volume.    *    * @param createdBy UserName    */
DECL|method|setCreatedBy (String createdBy)
specifier|public
name|void
name|setCreatedBy
parameter_list|(
name|String
name|createdBy
parameter_list|)
block|{
name|this
operator|.
name|createdBy
operator|=
name|createdBy
expr_stmt|;
block|}
comment|/**    * Gets the date on which this volume was created.    *    * @return Date String    */
DECL|method|getCreatedOn ()
specifier|public
name|String
name|getCreatedOn
parameter_list|()
block|{
return|return
name|createdOn
return|;
block|}
comment|/**    * Sets the date string.    *    * @param createdOn Date String    */
DECL|method|setCreatedOn (String createdOn)
specifier|public
name|void
name|setCreatedOn
parameter_list|(
name|String
name|createdOn
parameter_list|)
block|{
name|this
operator|.
name|createdOn
operator|=
name|createdOn
expr_stmt|;
block|}
comment|/**    * Returns the owner info.    *    * @return OwnerInfo    */
DECL|method|getOwner ()
specifier|public
name|VolumeOwner
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
comment|/**    * Sets the owner.    *    * @param owner OwnerInfo    */
DECL|method|setOwner (VolumeOwner owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|VolumeOwner
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
comment|/**    * Returns the quota information on a volume.    *    * @return Quota    */
DECL|method|getQuota ()
specifier|public
name|OzoneQuota
name|getQuota
parameter_list|()
block|{
return|return
name|quota
return|;
block|}
comment|/**    * Sets the quota info.    *    * @param quota Quota Info    */
DECL|method|setQuota (OzoneQuota quota)
specifier|public
name|void
name|setQuota
parameter_list|(
name|OzoneQuota
name|quota
parameter_list|)
block|{
name|this
operator|.
name|quota
operator|=
name|quota
expr_stmt|;
block|}
comment|/**    * Comparable Interface.    * @param o VolumeInfo Object.    * @return Result of comparison    */
annotation|@
name|Override
DECL|method|compareTo (VolumeInfo o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|VolumeInfo
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|volumeName
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getVolumeName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns VolumeInfo class from json string.    *    * @param data Json String    *    * @return VolumeInfo    *    * @throws IOException    */
DECL|method|parse (String data)
specifier|public
specifier|static
name|VolumeInfo
name|parse
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|READER
operator|.
name|readValue
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**    * Indicates whether some other object is "equal to" this one.    *    * @param obj the reference object with which to compare.    *    * @return {@code true} if this object is the same as the obj    * argument; {@code false} otherwise.    */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|VolumeInfo
name|otherInfo
init|=
operator|(
name|VolumeInfo
operator|)
name|obj
decl_stmt|;
return|return
name|otherInfo
operator|.
name|getVolumeName
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getVolumeName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns a hash code value for the object. This method is    * supported for the benefit of hash tables such as those provided by    * HashMap.    * @return a hash code value for this object.    *    * @see Object#equals(Object)    * @see System#identityHashCode    */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getVolumeName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

