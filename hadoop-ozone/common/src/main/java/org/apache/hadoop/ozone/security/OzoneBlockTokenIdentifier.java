begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|BlockTokenSecretProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|BlockTokenSecretProto
operator|.
name|AccessModeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|BlockTokenSecretProto
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_comment
comment|/**  * Block token identifier for Ozone/HDDS. Ozone block access token is similar  * to HDFS block access token, which is meant to be lightweight and  * short-lived. No need to renew or revoke a block access token. when a  * cached block access token expires, the client simply get a new one.  * Block access token should be cached only in memory and never write to disk.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|OzoneBlockTokenIdentifier
specifier|public
class|class
name|OzoneBlockTokenIdentifier
extends|extends
name|TokenIdentifier
block|{
DECL|field|KIND_NAME
specifier|static
specifier|final
name|Text
name|KIND_NAME
init|=
operator|new
name|Text
argument_list|(
literal|"HDDS_BLOCK_TOKEN"
argument_list|)
decl_stmt|;
DECL|field|expiryDate
specifier|private
name|long
name|expiryDate
decl_stmt|;
DECL|field|ownerId
specifier|private
name|String
name|ownerId
decl_stmt|;
DECL|field|blockId
specifier|private
name|String
name|blockId
decl_stmt|;
DECL|field|modes
specifier|private
specifier|final
name|EnumSet
argument_list|<
name|AccessModeProto
argument_list|>
name|modes
decl_stmt|;
DECL|field|omCertSerialId
specifier|private
specifier|final
name|String
name|omCertSerialId
decl_stmt|;
DECL|method|OzoneBlockTokenIdentifier (String ownerId, String blockId, EnumSet<AccessModeProto> modes, long expiryDate, String omCertSerialId)
specifier|public
name|OzoneBlockTokenIdentifier
parameter_list|(
name|String
name|ownerId
parameter_list|,
name|String
name|blockId
parameter_list|,
name|EnumSet
argument_list|<
name|AccessModeProto
argument_list|>
name|modes
parameter_list|,
name|long
name|expiryDate
parameter_list|,
name|String
name|omCertSerialId
parameter_list|)
block|{
name|this
operator|.
name|ownerId
operator|=
name|ownerId
expr_stmt|;
name|this
operator|.
name|blockId
operator|=
name|blockId
expr_stmt|;
name|this
operator|.
name|expiryDate
operator|=
name|expiryDate
expr_stmt|;
name|this
operator|.
name|modes
operator|=
name|modes
operator|==
literal|null
condition|?
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|AccessModeProto
operator|.
name|class
argument_list|)
else|:
name|modes
expr_stmt|;
name|this
operator|.
name|omCertSerialId
operator|=
name|omCertSerialId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|UserGroupInformation
name|getUser
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getOwnerId
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getOwnerId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|blockId
argument_list|)
return|;
block|}
return|return
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|ownerId
argument_list|)
return|;
block|}
DECL|method|getExpiryDate ()
specifier|public
name|long
name|getExpiryDate
parameter_list|()
block|{
return|return
name|expiryDate
return|;
block|}
DECL|method|getOwnerId ()
specifier|public
name|String
name|getOwnerId
parameter_list|()
block|{
return|return
name|ownerId
return|;
block|}
DECL|method|getBlockId ()
specifier|public
name|String
name|getBlockId
parameter_list|()
block|{
return|return
name|blockId
return|;
block|}
DECL|method|getAccessModes ()
specifier|public
name|EnumSet
argument_list|<
name|AccessModeProto
argument_list|>
name|getAccessModes
parameter_list|()
block|{
return|return
name|modes
return|;
block|}
DECL|method|getOmCertSerialId ()
specifier|public
name|String
name|getOmCertSerialId
parameter_list|()
block|{
return|return
name|omCertSerialId
return|;
block|}
annotation|@
name|Override
DECL|method|getKind ()
specifier|public
name|Text
name|getKind
parameter_list|()
block|{
return|return
name|KIND_NAME
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"block_token_identifier (expiryDate="
operator|+
name|this
operator|.
name|getExpiryDate
argument_list|()
operator|+
literal|", ownerId="
operator|+
name|this
operator|.
name|getOwnerId
argument_list|()
operator|+
literal|", omCertSerialId="
operator|+
name|this
operator|.
name|getOmCertSerialId
argument_list|()
operator|+
literal|", blockId="
operator|+
name|this
operator|.
name|getBlockId
argument_list|()
operator|+
literal|", access modes="
operator|+
name|this
operator|.
name|getAccessModes
argument_list|()
operator|+
literal|")"
return|;
block|}
DECL|method|isEqual (Object a, Object b)
specifier|static
name|boolean
name|isEqual
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
literal|null
condition|?
name|b
operator|==
literal|null
else|:
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|OzoneBlockTokenIdentifier
condition|)
block|{
name|OzoneBlockTokenIdentifier
name|that
init|=
operator|(
name|OzoneBlockTokenIdentifier
operator|)
name|obj
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|this
operator|.
name|expiryDate
argument_list|,
name|that
operator|.
name|expiryDate
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|ownerId
argument_list|,
name|that
operator|.
name|ownerId
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|blockId
argument_list|,
name|that
operator|.
name|blockId
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|modes
argument_list|,
name|that
operator|.
name|modes
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|omCertSerialId
argument_list|,
name|that
operator|.
name|omCertSerialId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|(
literal|133
argument_list|,
literal|567
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|expiryDate
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|blockId
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|ownerId
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|modes
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|omCertSerialId
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DataInputStream
name|dis
init|=
operator|(
name|DataInputStream
operator|)
name|in
decl_stmt|;
if|if
condition|(
operator|!
name|dis
operator|.
name|markSupported
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not peek first byte."
argument_list|)
throw|;
block|}
name|readFieldsProtobuf
argument_list|(
name|dis
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|readFieldsProtobuf (DataInput in)
specifier|public
specifier|static
name|OzoneBlockTokenIdentifier
name|readFieldsProtobuf
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockTokenSecretProto
name|tokenPtoto
init|=
name|BlockTokenSecretProto
operator|.
name|parseFrom
argument_list|(
operator|(
name|DataInputStream
operator|)
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|OzoneBlockTokenIdentifier
argument_list|(
name|tokenPtoto
operator|.
name|getOwnerId
argument_list|()
argument_list|,
name|tokenPtoto
operator|.
name|getBlockId
argument_list|()
argument_list|,
name|EnumSet
operator|.
name|copyOf
argument_list|(
name|tokenPtoto
operator|.
name|getModesList
argument_list|()
argument_list|)
argument_list|,
name|tokenPtoto
operator|.
name|getExpiryDate
argument_list|()
argument_list|,
name|tokenPtoto
operator|.
name|getOmCertSerialId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeProtobuf
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|writeProtobuf (DataOutput out)
name|void
name|writeProtobuf
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
name|BlockTokenSecretProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockId
argument_list|(
name|this
operator|.
name|getBlockId
argument_list|()
argument_list|)
operator|.
name|setOwnerId
argument_list|(
name|this
operator|.
name|getOwnerId
argument_list|()
argument_list|)
operator|.
name|setOmCertSerialId
argument_list|(
name|this
operator|.
name|getOmCertSerialId
argument_list|()
argument_list|)
operator|.
name|setExpiryDate
argument_list|(
name|this
operator|.
name|getExpiryDate
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add access mode allowed
for|for
control|(
name|AccessModeProto
name|mode
range|:
name|this
operator|.
name|getAccessModes
argument_list|()
control|)
block|{
name|builder
operator|.
name|addModes
argument_list|(
name|AccessModeProto
operator|.
name|valueOf
argument_list|(
name|mode
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

