begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ServicePort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HddsProtos
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * ServiceInfo holds the config details of Ozone services.  */
end_comment

begin_class
DECL|class|ServiceInfo
specifier|public
specifier|final
class|class
name|ServiceInfo
block|{
DECL|field|READER
specifier|private
specifier|static
specifier|final
name|ObjectReader
name|READER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readerFor
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|WRITER
specifier|private
specifier|static
specifier|final
name|ObjectWriter
name|WRITER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
decl_stmt|;
comment|/**    * Type of node/service.    */
DECL|field|nodeType
specifier|private
name|NodeType
name|nodeType
decl_stmt|;
comment|/**    * Hostname of the node in which the service is running.    */
DECL|field|hostname
specifier|private
name|String
name|hostname
decl_stmt|;
comment|/**    * List of ports the service listens to.    */
DECL|field|ports
specifier|private
name|Map
argument_list|<
name|ServicePort
operator|.
name|Type
argument_list|,
name|Integer
argument_list|>
name|ports
decl_stmt|;
comment|/**    * Default constructor for JSON deserialization.    */
DECL|method|ServiceInfo ()
specifier|public
name|ServiceInfo
parameter_list|()
block|{}
comment|/**    * Constructs the ServiceInfo for the {@code nodeType}.    * @param nodeType type of node/service    * @param hostname hostname of the service    * @param portList list of ports the service listens to    */
DECL|method|ServiceInfo ( NodeType nodeType, String hostname, List<ServicePort> portList)
specifier|private
name|ServiceInfo
parameter_list|(
name|NodeType
name|nodeType
parameter_list|,
name|String
name|hostname
parameter_list|,
name|List
argument_list|<
name|ServicePort
argument_list|>
name|portList
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|nodeType
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeType
operator|=
name|nodeType
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|this
operator|.
name|ports
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|ServicePort
name|port
range|:
name|portList
control|)
block|{
name|ports
operator|.
name|put
argument_list|(
name|port
operator|.
name|getType
argument_list|()
argument_list|,
name|port
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the type of node/service.    * @return node type    */
DECL|method|getNodeType ()
specifier|public
name|NodeType
name|getNodeType
parameter_list|()
block|{
return|return
name|nodeType
return|;
block|}
comment|/**    * Returns the hostname of the service.    * @return hostname    */
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
comment|/**    * Returns ServicePort.Type to port mappings.    * @return ports    */
DECL|method|getPorts ()
specifier|public
name|Map
argument_list|<
name|ServicePort
operator|.
name|Type
argument_list|,
name|Integer
argument_list|>
name|getPorts
parameter_list|()
block|{
return|return
name|ports
return|;
block|}
comment|/**    * Returns the port for given type.    *    * @param type the type of port.    *             ex: RPC, HTTP, HTTPS, etc..    * @throws NullPointerException if the service doesn't support the given type    */
annotation|@
name|JsonIgnore
DECL|method|getPort (ServicePort.Type type)
specifier|public
name|int
name|getPort
parameter_list|(
name|ServicePort
operator|.
name|Type
name|type
parameter_list|)
block|{
return|return
name|ports
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * Returns the address of the service (hostname with port of the given type).    * @param portType the type of port, eg. RPC, HTTP, etc.    * @return service address (hostname with port of the given type)    */
annotation|@
name|JsonIgnore
DECL|method|getServiceAddress (ServicePort.Type portType)
specifier|public
name|String
name|getServiceAddress
parameter_list|(
name|ServicePort
operator|.
name|Type
name|portType
parameter_list|)
block|{
return|return
name|hostname
operator|+
literal|":"
operator|+
name|getPort
argument_list|(
name|portType
argument_list|)
return|;
block|}
comment|/**    * Converts {@link ServiceInfo} to OzoneManagerProtocolProtos.ServiceInfo.    *    * @return OzoneManagerProtocolProtos.ServiceInfo    */
annotation|@
name|JsonIgnore
DECL|method|getProtobuf ()
specifier|public
name|OzoneManagerProtocolProtos
operator|.
name|ServiceInfo
name|getProtobuf
parameter_list|()
block|{
name|OzoneManagerProtocolProtos
operator|.
name|ServiceInfo
operator|.
name|Builder
name|builder
init|=
name|OzoneManagerProtocolProtos
operator|.
name|ServiceInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNodeType
argument_list|(
name|nodeType
argument_list|)
operator|.
name|setHostname
argument_list|(
name|hostname
argument_list|)
operator|.
name|addAllServicePorts
argument_list|(
name|ports
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|entry
lambda|->
name|ServicePort
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Converts OzoneManagerProtocolProtos.ServiceInfo to {@link ServiceInfo}.    *    * @return {@link ServiceInfo}    */
annotation|@
name|JsonIgnore
DECL|method|getFromProtobuf ( OzoneManagerProtocolProtos.ServiceInfo serviceInfo)
specifier|public
specifier|static
name|ServiceInfo
name|getFromProtobuf
parameter_list|(
name|OzoneManagerProtocolProtos
operator|.
name|ServiceInfo
name|serviceInfo
parameter_list|)
block|{
return|return
operator|new
name|ServiceInfo
argument_list|(
name|serviceInfo
operator|.
name|getNodeType
argument_list|()
argument_list|,
name|serviceInfo
operator|.
name|getHostname
argument_list|()
argument_list|,
name|serviceInfo
operator|.
name|getServicePortsList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Creates a new builder to build {@link ServiceInfo}.    * @return {@link ServiceInfo.Builder}    */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Builder used to build/construct {@link ServiceInfo}.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|node
specifier|private
name|NodeType
name|node
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|portList
specifier|private
name|List
argument_list|<
name|ServicePort
argument_list|>
name|portList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Sets the node/service type.      * @param nodeType type of node      * @return the builder      */
DECL|method|setNodeType (NodeType nodeType)
specifier|public
name|Builder
name|setNodeType
parameter_list|(
name|NodeType
name|nodeType
parameter_list|)
block|{
name|node
operator|=
name|nodeType
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the hostname of the service.      * @param hostname service hostname      * @return the builder      */
DECL|method|setHostname (String hostname)
specifier|public
name|Builder
name|setHostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|host
operator|=
name|hostname
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds the service port to the service port list.      * @param servicePort RPC port      * @return the builder      */
DECL|method|addServicePort (ServicePort servicePort)
specifier|public
name|Builder
name|addServicePort
parameter_list|(
name|ServicePort
name|servicePort
parameter_list|)
block|{
name|portList
operator|.
name|add
argument_list|(
name|servicePort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds and returns {@link ServiceInfo} with the set values.      * @return {@link ServiceInfo}      */
DECL|method|build ()
specifier|public
name|ServiceInfo
name|build
parameter_list|()
block|{
return|return
operator|new
name|ServiceInfo
argument_list|(
name|node
argument_list|,
name|host
argument_list|,
name|portList
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

