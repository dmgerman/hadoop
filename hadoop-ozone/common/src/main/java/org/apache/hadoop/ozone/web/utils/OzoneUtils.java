begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.web.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|web
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|HddsClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|util
operator|.
name|TimeDuration
import|;
end_import

begin_comment
comment|/**  * Set of Utility functions used in ozone.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|OzoneUtils
specifier|public
specifier|final
class|class
name|OzoneUtils
block|{
DECL|field|ENCODING_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ENCODING_NAME
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|ENCODING
specifier|public
specifier|static
specifier|final
name|Charset
name|ENCODING
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|ENCODING_NAME
argument_list|)
decl_stmt|;
DECL|method|OzoneUtils ()
specifier|private
name|OzoneUtils
parameter_list|()
block|{
comment|// Never constructed
block|}
comment|/**    * Date format that used in ozone. Here the format is thread safe to use.    */
DECL|field|DATE_FORMAT
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
name|DATE_FORMAT
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SimpleDateFormat
name|initialValue
parameter_list|()
block|{
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_DATE_FORMAT
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|format
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|OzoneConsts
operator|.
name|OZONE_TIME_ZONE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Verifies that max key length is a valid value.    *    * @param length    *          The max key length to be validated    *    * @throws IllegalArgumentException    */
DECL|method|verifyMaxKeyLength (String length)
specifier|public
specifier|static
name|void
name|verifyMaxKeyLength
parameter_list|(
name|String
name|length
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|int
name|maxKey
init|=
literal|0
decl_stmt|;
try|try
block|{
name|maxKey
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid max key length, the vaule should be digital."
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxKey
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid max key length, the vaule should be a positive number."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns a random Request ID.    *    * Request ID is returned to the client as well as flows through the system    * facilitating debugging on why a certain request failed.    *    * @return String random request ID    */
DECL|method|getRequestID ()
specifier|public
specifier|static
name|String
name|getRequestID
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Return host name if possible.    *    * @return Host Name or localhost    */
DECL|method|getHostName ()
specifier|public
specifier|static
name|String
name|getHostName
parameter_list|()
block|{
name|String
name|host
init|=
literal|"localhost"
decl_stmt|;
try|try
block|{
name|host
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|// Ignore the error
block|}
return|return
name|host
return|;
block|}
comment|/**    * Convert time in millisecond to a human readable format required in ozone.    * @return a human readable string for the input time    */
DECL|method|formatTime (long millis)
specifier|public
specifier|static
name|String
name|formatTime
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
return|return
name|DATE_FORMAT
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|millis
argument_list|)
return|;
block|}
comment|/**    * Convert time in ozone date format to millisecond.    * @return time in milliseconds    */
DECL|method|formatDate (String date)
specifier|public
specifier|static
name|long
name|formatDate
parameter_list|(
name|String
name|date
parameter_list|)
throws|throws
name|ParseException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|date
argument_list|,
literal|"Date string should not be null."
argument_list|)
expr_stmt|;
return|return
name|DATE_FORMAT
operator|.
name|get
argument_list|()
operator|.
name|parse
argument_list|(
name|date
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
DECL|method|isOzoneEnabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isOzoneEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|HddsUtils
operator|.
name|isHddsEnabled
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * verifies that bucket name / volume name is a valid DNS name.    *    * @param resName Bucket or volume Name to be validated    *    * @throws IllegalArgumentException    */
DECL|method|verifyResourceName (String resName)
specifier|public
specifier|static
name|void
name|verifyResourceName
parameter_list|(
name|String
name|resName
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|HddsClientUtils
operator|.
name|verifyResourceName
argument_list|(
name|resName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the TimeDuration configured for the given key. If not configured,    * return the default value.    */
DECL|method|getTimeDuration (Configuration conf, String key, TimeDuration defaultValue)
specifier|public
specifier|static
name|TimeDuration
name|getTimeDuration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|TimeDuration
name|defaultValue
parameter_list|)
block|{
name|TimeUnit
name|defaultTimeUnit
init|=
name|defaultValue
operator|.
name|getUnit
argument_list|()
decl_stmt|;
name|long
name|timeDurationInDefaultUnit
init|=
name|conf
operator|.
name|getTimeDuration
argument_list|(
name|key
argument_list|,
name|defaultValue
operator|.
name|getDuration
argument_list|()
argument_list|,
name|defaultTimeUnit
argument_list|)
decl_stmt|;
return|return
name|TimeDuration
operator|.
name|valueOf
argument_list|(
name|timeDurationInDefaultUnit
argument_list|,
name|defaultTimeUnit
argument_list|)
return|;
block|}
comment|/**    * Return the time configured for the given key in milliseconds.    */
DECL|method|getTimeDurationInMS (Configuration conf, String key, TimeDuration defaultValue)
specifier|public
specifier|static
name|long
name|getTimeDurationInMS
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|,
name|TimeDuration
name|defaultValue
parameter_list|)
block|{
return|return
name|getTimeDuration
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|defaultValue
argument_list|)
operator|.
name|toLong
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
end_class

end_unit

