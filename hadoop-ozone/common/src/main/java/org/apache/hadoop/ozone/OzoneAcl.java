begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneAclInfo
operator|.
name|OzoneAclScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneAclInfo
operator|.
name|OzoneAclType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLIdentityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|IAccessAuthorizer
operator|.
name|ACLType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * OzoneACL classes define bucket ACLs used in OZONE.  *  * ACLs in Ozone follow this pattern.  *<ul>  *<li>user:name:rw  *<li>group:name:rw  *<li>world::rw  *</ul>  */
end_comment

begin_class
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|value
operator|=
block|{
literal|"aclBitSet"
block|}
argument_list|)
DECL|class|OzoneAcl
specifier|public
class|class
name|OzoneAcl
block|{
DECL|field|ACL_SCOPE_REGEX
specifier|private
specifier|static
specifier|final
name|String
name|ACL_SCOPE_REGEX
init|=
literal|".*\\[(ACCESS|DEFAULT)\\]"
decl_stmt|;
DECL|field|type
specifier|private
name|ACLIdentityType
name|type
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|aclBitSet
specifier|private
name|BitSet
name|aclBitSet
decl_stmt|;
DECL|field|aclScope
specifier|private
name|AclScope
name|aclScope
decl_stmt|;
DECL|field|EMPTY_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ACLType
argument_list|>
name|EMPTY_LIST
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|ZERO_BITSET
specifier|public
specifier|static
specifier|final
name|BitSet
name|ZERO_BITSET
init|=
operator|new
name|BitSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * Default constructor.    */
DECL|method|OzoneAcl ()
specifier|public
name|OzoneAcl
parameter_list|()
block|{   }
comment|/**    * Constructor for OzoneAcl.    *    * @param type   - Type    * @param name   - Name of user    * @param acl    - Rights    * @param scope  - AclScope    */
DECL|method|OzoneAcl (ACLIdentityType type, String name, ACLType acl, AclScope scope)
specifier|public
name|OzoneAcl
parameter_list|(
name|ACLIdentityType
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|ACLType
name|acl
parameter_list|,
name|AclScope
name|scope
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|aclBitSet
operator|=
operator|new
name|BitSet
argument_list|(
name|ACLType
operator|.
name|getNoOfAcls
argument_list|()
argument_list|)
expr_stmt|;
name|aclBitSet
operator|.
name|set
argument_list|(
name|acl
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|ACLIdentityType
operator|.
name|WORLD
operator|||
name|type
operator|==
name|ACLIdentityType
operator|.
name|ANONYMOUS
condition|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|ACLIdentityType
operator|.
name|WORLD
operator|.
name|name
argument_list|()
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
name|ACLIdentityType
operator|.
name|ANONYMOUS
operator|.
name|name
argument_list|()
argument_list|)
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected name:{"
operator|+
name|name
operator|+
literal|"} for type WORLD, ANONYMOUS. It should be WORLD& "
operator|+
literal|"ANONYMOUS respectively."
argument_list|)
throw|;
block|}
comment|// For type WORLD and ANONYMOUS we allow only one acl to be set.
name|this
operator|.
name|name
operator|=
name|type
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|type
operator|==
name|ACLIdentityType
operator|.
name|USER
operator|)
operator|||
operator|(
name|type
operator|==
name|ACLIdentityType
operator|.
name|GROUP
operator|)
operator|)
operator|&&
operator|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User or group name is required"
argument_list|)
throw|;
block|}
name|aclScope
operator|=
name|scope
expr_stmt|;
block|}
comment|/**    * Constructor for OzoneAcl.    *    * @param type   - Type    * @param name   - Name of user    * @param acls   - Rights    * @param scope  - AclScope    */
DECL|method|OzoneAcl (ACLIdentityType type, String name, BitSet acls, AclScope scope)
specifier|public
name|OzoneAcl
parameter_list|(
name|ACLIdentityType
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|BitSet
name|acls
parameter_list|,
name|AclScope
name|scope
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|acls
argument_list|)
expr_stmt|;
if|if
condition|(
name|acls
operator|.
name|cardinality
argument_list|()
operator|>
name|ACLType
operator|.
name|getNoOfAcls
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Acl bitset passed has unexpected "
operator|+
literal|"size. bitset size:"
operator|+
name|acls
operator|.
name|cardinality
argument_list|()
operator|+
literal|", bitset:"
operator|+
name|acls
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|aclBitSet
operator|=
operator|(
name|BitSet
operator|)
name|acls
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|ACLIdentityType
operator|.
name|WORLD
operator|||
name|type
operator|==
name|ACLIdentityType
operator|.
name|ANONYMOUS
condition|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|ACLIdentityType
operator|.
name|WORLD
operator|.
name|name
argument_list|()
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
name|ACLIdentityType
operator|.
name|ANONYMOUS
operator|.
name|name
argument_list|()
argument_list|)
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected name:{"
operator|+
name|name
operator|+
literal|"} for type WORLD, ANONYMOUS. It should be WORLD& "
operator|+
literal|"ANONYMOUS respectively."
argument_list|)
throw|;
block|}
comment|// For type WORLD and ANONYMOUS we allow only one acl to be set.
name|this
operator|.
name|name
operator|=
name|type
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|type
operator|==
name|ACLIdentityType
operator|.
name|USER
operator|)
operator|||
operator|(
name|type
operator|==
name|ACLIdentityType
operator|.
name|GROUP
operator|)
operator|)
operator|&&
operator|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User or group name is required"
argument_list|)
throw|;
block|}
name|aclScope
operator|=
name|scope
expr_stmt|;
block|}
comment|/**    * Parses an ACL string and returns the ACL object. If acl scope is not    * passed in input string then scope is set to ACCESS.    *    * @param acl - Acl String , Ex. user:anu:rw    *    * @return - Ozone ACLs    */
DECL|method|parseAcl (String acl)
specifier|public
specifier|static
name|OzoneAcl
name|parseAcl
parameter_list|(
name|String
name|acl
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|acl
operator|==
literal|null
operator|)
operator|||
name|acl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ACLs cannot be null or empty"
argument_list|)
throw|;
block|}
name|String
index|[]
name|parts
init|=
name|acl
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|<
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ACLs are not in expected format"
argument_list|)
throw|;
block|}
name|ACLIdentityType
name|aclType
init|=
name|ACLIdentityType
operator|.
name|valueOf
argument_list|(
name|parts
index|[
literal|0
index|]
operator|.
name|toUpperCase
argument_list|()
argument_list|)
decl_stmt|;
name|BitSet
name|acls
init|=
operator|new
name|BitSet
argument_list|(
name|ACLType
operator|.
name|getNoOfAcls
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|bits
init|=
name|parts
index|[
literal|2
index|]
decl_stmt|;
comment|// Default acl scope is ACCESS.
name|AclScope
name|aclScope
init|=
name|AclScope
operator|.
name|ACCESS
decl_stmt|;
comment|// Check if acl string contains scope info.
if|if
condition|(
name|parts
index|[
literal|2
index|]
operator|.
name|matches
argument_list|(
name|ACL_SCOPE_REGEX
argument_list|)
condition|)
block|{
name|int
name|indexOfOpenBracket
init|=
name|parts
index|[
literal|2
index|]
operator|.
name|indexOf
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
name|bits
operator|=
name|parts
index|[
literal|2
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfOpenBracket
argument_list|)
expr_stmt|;
name|aclScope
operator|=
name|AclScope
operator|.
name|valueOf
argument_list|(
name|parts
index|[
literal|2
index|]
operator|.
name|substring
argument_list|(
name|indexOfOpenBracket
operator|+
literal|1
argument_list|,
name|parts
index|[
literal|2
index|]
operator|.
name|indexOf
argument_list|(
literal|"]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Set all acl bits.
for|for
control|(
name|char
name|ch
range|:
name|bits
operator|.
name|toCharArray
argument_list|()
control|)
block|{
name|acls
operator|.
name|set
argument_list|(
name|ACLType
operator|.
name|getACLRight
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ch
argument_list|)
argument_list|)
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO : Support sanitation of these user names by calling into
comment|// userAuth Interface.
return|return
operator|new
name|OzoneAcl
argument_list|(
name|aclType
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
name|acls
argument_list|,
name|aclScope
argument_list|)
return|;
block|}
comment|/**    * Parses an ACL string and returns the ACL object.    *    * @param acls - Acl String , Ex. user:anu:rw    *    * @return - Ozone ACLs    */
DECL|method|parseAcls (String acls)
specifier|public
specifier|static
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|parseAcls
parameter_list|(
name|String
name|acls
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|(
name|acls
operator|==
literal|null
operator|)
operator|||
name|acls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ACLs cannot be null or empty"
argument_list|)
throw|;
block|}
name|String
index|[]
name|parts
init|=
name|acls
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ACLs are not in expected format"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|ozAcls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|acl
range|:
name|parts
control|)
block|{
name|ozAcls
operator|.
name|add
argument_list|(
name|parseAcl
argument_list|(
name|acl
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ozAcls
return|;
block|}
DECL|method|toProtobuf (OzoneAcl acl)
specifier|public
specifier|static
name|OzoneAclInfo
name|toProtobuf
parameter_list|(
name|OzoneAcl
name|acl
parameter_list|)
block|{
name|OzoneAclInfo
operator|.
name|Builder
name|builder
init|=
name|OzoneAclInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OzoneAclType
operator|.
name|valueOf
argument_list|(
name|acl
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setAclScope
argument_list|(
name|OzoneAclScope
operator|.
name|valueOf
argument_list|(
name|acl
operator|.
name|getAclScope
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setRights
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|fromProtobuf (OzoneAclInfo protoAcl)
specifier|public
specifier|static
name|OzoneAcl
name|fromProtobuf
parameter_list|(
name|OzoneAclInfo
name|protoAcl
parameter_list|)
block|{
name|BitSet
name|aclRights
init|=
name|BitSet
operator|.
name|valueOf
argument_list|(
name|protoAcl
operator|.
name|getRights
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|OzoneAcl
argument_list|(
name|ACLIdentityType
operator|.
name|valueOf
argument_list|(
name|protoAcl
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|protoAcl
operator|.
name|getName
argument_list|()
argument_list|,
name|aclRights
argument_list|,
name|AclScope
operator|.
name|valueOf
argument_list|(
name|protoAcl
operator|.
name|getAclScope
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Helper function to convert a proto message of type {@link OzoneAclInfo}    * to {@link OzoneAcl} with acl scope of type ACCESS.    *    * @param protoAcl    * @return OzoneAcl    * */
DECL|method|fromProtobufWithAccessType (OzoneAclInfo protoAcl)
specifier|public
specifier|static
name|OzoneAcl
name|fromProtobufWithAccessType
parameter_list|(
name|OzoneAclInfo
name|protoAcl
parameter_list|)
block|{
name|BitSet
name|aclRights
init|=
name|BitSet
operator|.
name|valueOf
argument_list|(
name|protoAcl
operator|.
name|getRights
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|OzoneAcl
argument_list|(
name|ACLIdentityType
operator|.
name|valueOf
argument_list|(
name|protoAcl
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|protoAcl
operator|.
name|getName
argument_list|()
argument_list|,
name|aclRights
argument_list|,
name|AclScope
operator|.
name|ACCESS
argument_list|)
return|;
block|}
comment|/**    * Helper function to convert an {@link OzoneAcl} to proto message of type    * {@link OzoneAclInfo} with acl scope of type ACCESS.    *    * @param acl    * @return OzoneAclInfo    * */
DECL|method|toProtobufWithAccessType (OzoneAcl acl)
specifier|public
specifier|static
name|OzoneAclInfo
name|toProtobufWithAccessType
parameter_list|(
name|OzoneAcl
name|acl
parameter_list|)
block|{
name|OzoneAclInfo
operator|.
name|Builder
name|builder
init|=
name|OzoneAclInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|acl
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OzoneAclType
operator|.
name|valueOf
argument_list|(
name|acl
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setAclScope
argument_list|(
name|OzoneAclScope
operator|.
name|ACCESS
argument_list|)
operator|.
name|setRights
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|acl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getAclScope ()
specifier|public
name|AclScope
name|getAclScope
parameter_list|()
block|{
return|return
name|aclScope
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
operator|+
literal|":"
operator|+
name|name
operator|+
literal|":"
operator|+
name|ACLType
operator|.
name|getACLString
argument_list|(
name|aclBitSet
argument_list|)
operator|+
literal|"["
operator|+
name|aclScope
operator|+
literal|"]"
return|;
block|}
comment|/**    * Returns a hash code value for the object. This method is    * supported for the benefit of hash tables.    *    * @return a hash code value for this object.    *    * @see Object#equals(Object)    * @see System#identityHashCode    */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|getAclBitSet
argument_list|()
argument_list|,
name|this
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|getAclScope
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns name.    *    * @return name    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Returns Rights.    *    * @return - Rights    */
DECL|method|getAclBitSet ()
specifier|public
name|BitSet
name|getAclBitSet
parameter_list|()
block|{
return|return
name|aclBitSet
return|;
block|}
DECL|method|getAclList ()
specifier|public
name|List
argument_list|<
name|ACLType
argument_list|>
name|getAclList
parameter_list|()
block|{
if|if
condition|(
name|aclBitSet
operator|!=
literal|null
condition|)
block|{
return|return
name|aclBitSet
operator|.
name|stream
argument_list|()
operator|.
name|mapToObj
argument_list|(
name|a
lambda|->
name|ACLType
operator|.
name|values
argument_list|()
index|[
name|a
index|]
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
return|return
name|EMPTY_LIST
return|;
block|}
comment|/**    * Returns Type.    *    * @return type    */
DECL|method|getType ()
specifier|public
name|ACLIdentityType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**    * Indicates whether some other object is "equal to" this one.    *    * @param obj the reference object with which to compare.    *    * @return {@code true} if this object is the same as the obj    * argument; {@code false} otherwise.    */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|OzoneAcl
name|otherAcl
init|=
operator|(
name|OzoneAcl
operator|)
name|obj
decl_stmt|;
return|return
name|otherAcl
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|otherAcl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|otherAcl
operator|.
name|getAclBitSet
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getAclBitSet
argument_list|()
argument_list|)
operator|&&
name|otherAcl
operator|.
name|getAclScope
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getAclScope
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setAclScope (AclScope scope)
specifier|public
name|OzoneAcl
name|setAclScope
parameter_list|(
name|AclScope
name|scope
parameter_list|)
block|{
name|this
operator|.
name|aclScope
operator|=
name|scope
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Scope of ozone acl.    * */
DECL|enum|AclScope
specifier|public
enum|enum
name|AclScope
block|{
DECL|enumConstant|ACCESS
name|ACCESS
block|,
DECL|enumConstant|DEFAULT
name|DEFAULT
block|;   }
block|}
end_class

end_unit

