begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|KeyLocationList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * A list of key locations. This class represents one single version of the  * blocks of a key.  */
end_comment

begin_class
DECL|class|OmKeyLocationInfoGroup
specifier|public
class|class
name|OmKeyLocationInfoGroup
block|{
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|locationList
specifier|private
specifier|final
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locationList
decl_stmt|;
DECL|method|OmKeyLocationInfoGroup (long version, List<OmKeyLocationInfo> locations)
specifier|public
name|OmKeyLocationInfoGroup
parameter_list|(
name|long
name|version
parameter_list|,
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locations
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|locationList
operator|=
name|locations
expr_stmt|;
block|}
comment|/**    * Return only the blocks that are created in the most recent version.    *    * @return the list of blocks that are created in the latest version.    */
DECL|method|getBlocksLatestVersionOnly ()
specifier|public
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|getBlocksLatestVersionOnly
parameter_list|()
block|{
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|locationList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getCreateVersion
argument_list|()
operator|==
name|version
argument_list|)
operator|.
name|forEach
argument_list|(
name|list
operator|::
name|add
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|method|getVersion ()
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|getLocationList ()
specifier|public
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|getLocationList
parameter_list|()
block|{
return|return
name|locationList
return|;
block|}
DECL|method|getProtobuf ()
specifier|public
name|KeyLocationList
name|getProtobuf
parameter_list|()
block|{
return|return
name|KeyLocationList
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|addAllKeyLocations
argument_list|(
name|locationList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OmKeyLocationInfo
operator|::
name|getProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getFromProtobuf ( KeyLocationList keyLocationList)
specifier|public
specifier|static
name|OmKeyLocationInfoGroup
name|getFromProtobuf
parameter_list|(
name|KeyLocationList
name|keyLocationList
parameter_list|)
block|{
return|return
operator|new
name|OmKeyLocationInfoGroup
argument_list|(
name|keyLocationList
operator|.
name|getVersion
argument_list|()
argument_list|,
name|keyLocationList
operator|.
name|getKeyLocationsList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OmKeyLocationInfo
operator|::
name|getFromProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Given a new block location, generate a new version list based upon this    * one.    *    * @param newLocationList a list of new location to be added.    * @return    */
DECL|method|generateNextVersion ( List<OmKeyLocationInfo> newLocationList)
name|OmKeyLocationInfoGroup
name|generateNextVersion
parameter_list|(
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|newLocationList
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO : revisit if we can do this method more efficiently
comment|// one potential inefficiency here is that later version always include
comment|// older ones. e.g. v1 has B1, then v2, v3...will all have B1 and only add
comment|// more
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|newList
operator|.
name|addAll
argument_list|(
name|locationList
argument_list|)
expr_stmt|;
for|for
control|(
name|OmKeyLocationInfo
name|newInfo
range|:
name|newLocationList
control|)
block|{
comment|// all these new blocks will have addVersion of current version + 1
name|newInfo
operator|.
name|setCreateVersion
argument_list|(
name|version
operator|+
literal|1
argument_list|)
expr_stmt|;
name|newList
operator|.
name|add
argument_list|(
name|newInfo
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|OmKeyLocationInfoGroup
argument_list|(
name|version
operator|+
literal|1
argument_list|,
name|newList
argument_list|)
return|;
block|}
DECL|method|appendNewBlocks (List<OmKeyLocationInfo> newLocationList)
name|void
name|appendNewBlocks
parameter_list|(
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|newLocationList
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|OmKeyLocationInfo
name|info
range|:
name|newLocationList
control|)
block|{
name|info
operator|.
name|setCreateVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|locationList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"version:"
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|OmKeyLocationInfo
name|kli
range|:
name|locationList
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|kli
operator|.
name|getLocalID
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" || "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

