begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|server
operator|.
name|ServerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
operator|.
name|getHostNameFromConfigKeys
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
operator|.
name|getPortNumberFromConfigKeys
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_BIND_HOST_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_HTTP_BIND_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
operator|.
name|OZONE_OM_PORT_DEFAULT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Stateless helper functions for the server and client side of OM  * communication.  */
end_comment

begin_class
DECL|class|OmUtils
specifier|public
specifier|final
class|class
name|OmUtils
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OmUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|OmUtils ()
specifier|private
name|OmUtils
parameter_list|()
block|{   }
comment|/**    * Retrieve the socket address that is used by OM.    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getOmAddress (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getOmAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|getOmRpcAddress
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that is used by OM.    * @param conf    * @return Target InetSocketAddress for the SCM service endpoint.    */
DECL|method|getOmRpcAddress (Configuration conf)
specifier|public
specifier|static
name|String
name|getOmRpcAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_OM_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|host
operator|.
name|orElse
argument_list|(
name|OZONE_OM_BIND_HOST_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|getOmRpcPort
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that should be used by clients to connect    * to OM.    * @param conf    * @return Target InetSocketAddress for the OM service endpoint.    */
DECL|method|getOmAddressForClients ( Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getOmAddressForClients
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_OM_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|OZONE_OM_ADDRESS_KEY
operator|+
literal|" must be defined. See"
operator|+
literal|" https://wiki.apache.org/hadoop/Ozone#Configuration for"
operator|+
literal|" details on configuring Ozone."
argument_list|)
throw|;
block|}
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|get
argument_list|()
operator|+
literal|":"
operator|+
name|getOmRpcPort
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getOmRpcPort (Configuration conf)
specifier|public
specifier|static
name|int
name|getOmRpcPort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_OM_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|port
operator|.
name|orElse
argument_list|(
name|OZONE_OM_PORT_DEFAULT
argument_list|)
return|;
block|}
DECL|method|getOmRestPort (Configuration conf)
specifier|public
specifier|static
name|int
name|getOmRestPort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// If no port number is specified then we'll just try the default
comment|// HTTP BindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OZONE_OM_HTTP_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|port
operator|.
name|orElse
argument_list|(
name|OZONE_OM_HTTP_BIND_PORT_DEFAULT
argument_list|)
return|;
block|}
comment|/**    * Get the location where OM should store its metadata directories.    * Fall back to OZONE_METADATA_DIRS if not defined.    *    * @param conf    * @return    */
DECL|method|getOmDbDir (Configuration conf)
specifier|public
specifier|static
name|File
name|getOmDbDir
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|dbDirs
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbDirs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad configuration setting "
operator|+
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
operator|+
literal|". OM does not support multiple metadata dirs currently."
argument_list|)
throw|;
block|}
if|if
condition|(
name|dbDirs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|File
name|dbDirPath
init|=
operator|new
name|File
argument_list|(
name|dbDirs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dbDirPath
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dbDirPath
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to create directory "
operator|+
name|dbDirPath
operator|+
literal|" specified in configuration setting "
operator|+
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
argument_list|)
throw|;
block|}
return|return
name|dbDirPath
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} is not configured. We recommend adding this setting. "
operator|+
literal|"Falling back to {} instead."
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_DB_DIRS
argument_list|,
name|HddsConfigKeys
operator|.
name|OZONE_METADATA_DIRS
argument_list|)
expr_stmt|;
return|return
name|ServerUtils
operator|.
name|getOzoneMetaDirPath
argument_list|(
name|conf
argument_list|)
return|;
block|}
comment|/**    * Checks if the OM request is read only or not.    * @param omRequest OMRequest proto    * @return True if its readOnly, false otherwise.    */
DECL|method|isReadOnly ( OzoneManagerProtocolProtos.OMRequest omRequest)
specifier|public
specifier|static
name|boolean
name|isReadOnly
parameter_list|(
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
name|omRequest
parameter_list|)
block|{
name|OzoneManagerProtocolProtos
operator|.
name|Type
name|cmdType
init|=
name|omRequest
operator|.
name|getCmdType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|cmdType
condition|)
block|{
case|case
name|CheckVolumeAccess
case|:
case|case
name|InfoVolume
case|:
case|case
name|ListVolume
case|:
case|case
name|InfoBucket
case|:
case|case
name|ListBuckets
case|:
case|case
name|LookupKey
case|:
case|case
name|ListKeys
case|:
case|case
name|InfoS3Bucket
case|:
case|case
name|ListS3Buckets
case|:
case|case
name|ServiceList
case|:
return|return
literal|true
return|;
case|case
name|CreateVolume
case|:
case|case
name|SetVolumeProperty
case|:
case|case
name|DeleteVolume
case|:
case|case
name|CreateBucket
case|:
case|case
name|SetBucketProperty
case|:
case|case
name|DeleteBucket
case|:
case|case
name|CreateKey
case|:
case|case
name|RenameKey
case|:
case|case
name|DeleteKey
case|:
case|case
name|CommitKey
case|:
case|case
name|AllocateBlock
case|:
case|case
name|CreateS3Bucket
case|:
case|case
name|DeleteS3Bucket
case|:
case|case
name|InitiateMultiPartUpload
case|:
case|case
name|CommitMultiPartUpload
case|:
case|case
name|CompleteMultiPartUpload
case|:
case|case
name|AbortMultiPartUpload
case|:
case|case
name|GetS3Secret
case|:
case|case
name|GetDelegationToken
case|:
case|case
name|RenewDelegationToken
case|:
case|case
name|CancelDelegationToken
case|:
return|return
literal|false
return|;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"CmdType {} is not categorized as readOnly or not."
argument_list|,
name|cmdType
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|getMD5Digest (String input)
specifier|public
specifier|static
name|byte
index|[]
name|getMD5Digest
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|MD5_HASH
argument_list|)
decl_stmt|;
return|return
name|md
operator|.
name|digest
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error creating an instance of MD5 digest.\n"
operator|+
literal|"This could possibly indicate a faulty JRE"
argument_list|)
throw|;
block|}
block|}
DECL|method|getSHADigest ()
specifier|public
specifier|static
name|byte
index|[]
name|getSHADigest
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|MessageDigest
name|sha
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|OzoneConsts
operator|.
name|FILE_HASH
argument_list|)
decl_stmt|;
return|return
name|sha
operator|.
name|digest
argument_list|(
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|32
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error creating an instance of SHA-256 digest.\n"
operator|+
literal|"This could possibly indicate a faulty JRE"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

