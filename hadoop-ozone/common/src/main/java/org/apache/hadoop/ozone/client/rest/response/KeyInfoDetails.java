begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.client.rest.response
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|client
operator|.
name|rest
operator|.
name|response
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileEncryptionInfo
import|;
end_import

begin_comment
comment|/**  * KeyInfoDetails class is used for parsing json response  * when KeyInfoDetails Call is made.  */
end_comment

begin_class
DECL|class|KeyInfoDetails
specifier|public
class|class
name|KeyInfoDetails
extends|extends
name|KeyInfo
block|{
DECL|field|READER
specifier|private
specifier|static
specifier|final
name|ObjectReader
name|READER
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readerFor
argument_list|(
name|KeyInfoDetails
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * a list of Map which maps localID to ContainerID    * to specify replica locations.    */
DECL|field|keyLocations
specifier|private
name|List
argument_list|<
name|KeyLocation
argument_list|>
name|keyLocations
decl_stmt|;
DECL|field|feInfo
specifier|private
name|FileEncryptionInfo
name|feInfo
decl_stmt|;
comment|/**    * Constructor needed for json serialization.    */
DECL|method|KeyInfoDetails ()
specifier|public
name|KeyInfoDetails
parameter_list|()
block|{   }
comment|/**    * Set details of key location.    *    * @param locations - details of key location    */
DECL|method|setKeyLocation (List<KeyLocation> locations)
specifier|public
name|void
name|setKeyLocation
parameter_list|(
name|List
argument_list|<
name|KeyLocation
argument_list|>
name|locations
parameter_list|)
block|{
name|this
operator|.
name|keyLocations
operator|=
name|locations
expr_stmt|;
block|}
comment|/**    * Returns details of key location.    *    * @return volumeName    */
DECL|method|getKeyLocations ()
specifier|public
name|List
argument_list|<
name|KeyLocation
argument_list|>
name|getKeyLocations
parameter_list|()
block|{
return|return
name|keyLocations
return|;
block|}
DECL|method|setFileEncryptionInfo (FileEncryptionInfo info)
specifier|public
name|void
name|setFileEncryptionInfo
parameter_list|(
name|FileEncryptionInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|feInfo
operator|=
name|info
expr_stmt|;
block|}
DECL|method|getFileEncryptionInfo ()
specifier|public
name|FileEncryptionInfo
name|getFileEncryptionInfo
parameter_list|()
block|{
return|return
name|feInfo
return|;
block|}
comment|/**    * Parse a string to return KeyInfoDetails Object.    *    * @param jsonString Json String    * @return KeyInfoDetails    * @throws IOException    */
DECL|method|parse (String jsonString)
specifier|public
specifier|static
name|KeyInfoDetails
name|parse
parameter_list|(
name|String
name|jsonString
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|READER
operator|.
name|readValue
argument_list|(
name|jsonString
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KeyInfoDetails
name|that
init|=
operator|(
name|KeyInfoDetails
operator|)
name|o
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|getVersion
argument_list|()
argument_list|,
name|that
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|getKeyName
argument_list|()
argument_list|,
name|that
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|keyLocations
argument_list|,
name|that
operator|.
name|keyLocations
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|(
literal|21
argument_list|,
literal|33
argument_list|)
operator|.
name|append
argument_list|(
name|getVersion
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|keyLocations
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

