begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|PrefixInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|OMPBHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Wrapper class for Ozone prefix path info, currently mainly target for ACL but  * can be extended for other OzFS optimizations in future.  */
end_comment

begin_comment
comment|// TODO: support Auditable interface
end_comment

begin_class
DECL|class|OmPrefixInfo
specifier|public
specifier|final
class|class
name|OmPrefixInfo
extends|extends
name|WithMetadata
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|acls
specifier|private
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
decl_stmt|;
DECL|method|OmPrefixInfo (String name, List<OzoneAcl> acls, Map<String, String> metadata)
specifier|public
name|OmPrefixInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|acls
operator|=
name|acls
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
comment|/**    * Returns the ACL's associated with this prefix.    * @return {@literal List<OzoneAcl>}    */
DECL|method|getAcls ()
specifier|public
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|getAcls
parameter_list|()
block|{
return|return
name|acls
return|;
block|}
comment|/**    * Returns the name of the prefix path.    * @return name of the prefix path.    */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Returns new builder class that builds a OmPrefixInfo.    *    * @return Builder    */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|OmPrefixInfo
operator|.
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|OmPrefixInfo
operator|.
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Builder for OmPrefixInfo.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|acls
specifier|private
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
decl_stmt|;
DECL|field|metadata
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{
comment|//Default values
name|this
operator|.
name|acls
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|setAcls (List<OzoneAcl> listOfAcls)
specifier|public
name|Builder
name|setAcls
parameter_list|(
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|listOfAcls
parameter_list|)
block|{
name|this
operator|.
name|acls
operator|=
name|listOfAcls
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setName (String n)
specifier|public
name|Builder
name|setName
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|n
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addMetadata (String key, String value)
specifier|public
name|OmPrefixInfo
operator|.
name|Builder
name|addMetadata
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|metadata
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addAllMetadata ( Map<String, String> additionalMetadata)
specifier|public
name|OmPrefixInfo
operator|.
name|Builder
name|addAllMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|additionalMetadata
parameter_list|)
block|{
if|if
condition|(
name|additionalMetadata
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|putAll
argument_list|(
name|additionalMetadata
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Constructs the OmPrefixInfo.      * @return instance of OmPrefixInfo.      */
DECL|method|build ()
specifier|public
name|OmPrefixInfo
name|build
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|acls
argument_list|)
expr_stmt|;
return|return
operator|new
name|OmPrefixInfo
argument_list|(
name|name
argument_list|,
name|acls
argument_list|,
name|metadata
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates PrefixInfo protobuf from OmPrefixInfo.    */
DECL|method|getProtobuf ()
specifier|public
name|PrefixInfo
name|getProtobuf
parameter_list|()
block|{
name|PrefixInfo
operator|.
name|Builder
name|pib
init|=
name|PrefixInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|name
argument_list|)
operator|.
name|addAllAcls
argument_list|(
name|acls
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OMPBHelper
operator|::
name|convertOzoneAcl
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAllMetadata
argument_list|(
name|KeyValueUtil
operator|.
name|toProtobuf
argument_list|(
name|metadata
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|pib
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Parses PrefixInfo protobuf and creates OmPrefixInfo.    * @param prefixInfo    * @return instance of OmPrefixInfo    */
DECL|method|getFromProtobuf (PrefixInfo prefixInfo)
specifier|public
specifier|static
name|OmPrefixInfo
name|getFromProtobuf
parameter_list|(
name|PrefixInfo
name|prefixInfo
parameter_list|)
block|{
name|OmPrefixInfo
operator|.
name|Builder
name|opib
init|=
name|OmPrefixInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|prefixInfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setAcls
argument_list|(
name|prefixInfo
operator|.
name|getAclsList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OMPBHelper
operator|::
name|convertOzoneAcl
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefixInfo
operator|.
name|getMetadataList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|opib
operator|.
name|addAllMetadata
argument_list|(
name|KeyValueUtil
operator|.
name|getFromProtobuf
argument_list|(
name|prefixInfo
operator|.
name|getMetadataList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|opib
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|OmPrefixInfo
name|that
init|=
operator|(
name|OmPrefixInfo
operator|)
name|o
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|acls
argument_list|,
name|that
operator|.
name|acls
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|metadata
argument_list|,
name|that
operator|.
name|metadata
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

