begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Wrapper class for handling Ozone prefix path lookup of ACL APIs  * with radix tree.  */
end_comment

begin_class
DECL|class|RadixTree
specifier|public
class|class
name|RadixTree
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**    * create a empty radix tree with root only.    */
DECL|method|RadixTree ()
specifier|public
name|RadixTree
parameter_list|()
block|{
name|root
operator|=
operator|new
name|RadixNode
argument_list|<
name|T
argument_list|>
argument_list|(
name|PATH_DELIMITER
argument_list|)
expr_stmt|;
block|}
comment|/**    * If the Radix tree contains root only.    * @return true if the radix tree contains root only.    */
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|root
operator|.
name|hasChildren
argument_list|()
return|;
block|}
comment|/**    * Insert prefix tree node without value, value can be ACL or other metadata    * of the prefix path.    * @param path    */
DECL|method|insert (String path)
specifier|public
name|void
name|insert
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|insert
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert prefix tree node with value, value can be ACL or other metadata    * of the prefix path.    * @param path    * @param val    */
DECL|method|insert (String path, T val)
specifier|public
name|void
name|insert
parameter_list|(
name|String
name|path
parameter_list|,
name|T
name|val
parameter_list|)
block|{
comment|// all prefix path inserted should end with "/"
name|RadixNode
argument_list|<
name|T
argument_list|>
name|n
init|=
name|root
decl_stmt|;
name|Path
name|p
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|level
init|=
literal|0
init|;
name|level
operator|<
name|p
operator|.
name|getNameCount
argument_list|()
condition|;
name|level
operator|++
control|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|RadixNode
argument_list|>
name|child
init|=
name|n
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|String
name|component
init|=
name|p
operator|.
name|getName
argument_list|(
name|level
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|containsKey
argument_list|(
name|component
argument_list|)
condition|)
block|{
name|n
operator|=
name|child
operator|.
name|get
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RadixNode
name|tmp
init|=
operator|new
name|RadixNode
argument_list|(
name|component
argument_list|)
decl_stmt|;
name|child
operator|.
name|put
argument_list|(
name|component
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|n
operator|=
name|tmp
expr_stmt|;
block|}
block|}
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|n
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the last node in the exact prefix path that matches in the tree.    * @param path - prefix path    * @return last node in the prefix tree or null if non exact prefix matchl    */
DECL|method|getLastNodeInPrefixPath (String path)
specifier|public
name|RadixNode
argument_list|<
name|T
argument_list|>
name|getLastNodeInPrefixPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|RadixNode
argument_list|<
name|T
argument_list|>
argument_list|>
name|lpp
init|=
name|getLongestPrefixPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|lpp
operator|.
name|size
argument_list|()
operator|!=
name|p
operator|.
name|getNameCount
argument_list|()
operator|+
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|lpp
operator|.
name|get
argument_list|(
name|p
operator|.
name|getNameCount
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Remove prefix path.    * @param path    */
DECL|method|removePrefixPath (String path)
specifier|public
name|void
name|removePrefixPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Path
name|p
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|removePrefixPathInternal
argument_list|(
name|root
argument_list|,
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Recursively remove non-overlapped part of the prefix path from radix tree.    * @param current current radix tree node.    * @param path prefix path to be removed.    * @param level current recursive level.    * @return true if current radix node can be removed.    *             (not overlapped with other path),    *         false otherwise.    */
DECL|method|removePrefixPathInternal (RadixNode<T> current, Path path, int level)
specifier|private
name|boolean
name|removePrefixPathInternal
parameter_list|(
name|RadixNode
argument_list|<
name|T
argument_list|>
name|current
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|level
parameter_list|)
block|{
comment|// last component is processed
if|if
condition|(
name|level
operator|==
name|path
operator|.
name|getNameCount
argument_list|()
condition|)
block|{
return|return
name|current
operator|.
name|hasChildren
argument_list|()
return|;
block|}
comment|// not last component, recur for next component
name|String
name|name
init|=
name|path
operator|.
name|getName
argument_list|(
name|level
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|RadixNode
argument_list|<
name|T
argument_list|>
name|node
init|=
name|current
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|removePrefixPathInternal
argument_list|(
name|node
argument_list|,
name|path
argument_list|,
name|level
operator|+
literal|1
argument_list|)
condition|)
block|{
name|current
operator|.
name|getChildren
argument_list|()
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|current
operator|.
name|hasChildren
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get the longest prefix path.    * @param path - prefix path.    * @return longest prefix path as list of RadixNode.    */
DECL|method|getLongestPrefixPath (String path)
specifier|public
name|List
argument_list|<
name|RadixNode
argument_list|<
name|T
argument_list|>
argument_list|>
name|getLongestPrefixPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|RadixNode
name|n
init|=
name|root
decl_stmt|;
name|Path
name|p
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|level
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RadixNode
argument_list|<
name|T
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
while|while
condition|(
name|level
operator|<
name|p
operator|.
name|getNameCount
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|RadixNode
argument_list|>
name|children
init|=
name|n
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|String
name|component
init|=
name|p
operator|.
name|getName
argument_list|(
name|level
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|containsKey
argument_list|(
name|component
argument_list|)
condition|)
block|{
name|n
operator|=
name|children
operator|.
name|get
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|level
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|VisibleForTesting
comment|/**    * Convert radix path to string format for output.    * @param path - radix path represented by list of radix nodes.    * @return radix path as string separated by "/".    * Note: the path will always be normalized with and ending "/".    */
DECL|method|radixPathToString (List<RadixNode<Integer>> path)
specifier|public
specifier|static
name|String
name|radixPathToString
parameter_list|(
name|List
argument_list|<
name|RadixNode
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|path
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|RadixNode
name|n
range|:
name|path
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|n
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|n
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|PATH_DELIMITER
argument_list|)
condition|?
literal|""
else|:
name|PATH_DELIMITER
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the longest prefix path.    * @param path - prefix path.    * @return longest prefix path as String separated by "/".    */
DECL|method|getLongestPrefix (String path)
specifier|public
name|String
name|getLongestPrefix
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|RadixNode
argument_list|<
name|T
argument_list|>
name|n
init|=
name|root
decl_stmt|;
name|Path
name|p
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|int
name|level
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|level
operator|<
name|p
operator|.
name|getNameCount
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|RadixNode
argument_list|>
name|children
init|=
name|n
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|String
name|component
init|=
name|p
operator|.
name|getName
argument_list|(
name|level
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|containsKey
argument_list|(
name|component
argument_list|)
condition|)
block|{
name|n
operator|=
name|children
operator|.
name|get
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|level
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|level
operator|>=
literal|1
condition|?
name|Paths
operator|.
name|get
argument_list|(
name|root
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|resolve
argument_list|(
name|p
operator|.
name|subpath
argument_list|(
literal|0
argument_list|,
name|level
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|root
operator|.
name|getName
argument_list|()
return|;
block|}
comment|// root of a radix tree has a name of "/" and may optionally has it value.
DECL|field|root
specifier|private
name|RadixNode
name|root
decl_stmt|;
DECL|field|PATH_DELIMITER
specifier|private
specifier|final
specifier|static
name|String
name|PATH_DELIMITER
init|=
name|OzoneConsts
operator|.
name|OZONE_URI_DELIMITER
decl_stmt|;
block|}
end_class

end_unit

