begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.security.acl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConsts
import|;
end_import

begin_comment
comment|/**  * Public API for Ozone ACLs. Security providers providing support for Ozone  * ACLs should implement this.  */
end_comment

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"Yarn"
block|,
literal|"Ranger"
block|,
literal|"Hive"
block|,
literal|"HBase"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|interface|IAccessAuthorizer
specifier|public
interface|interface
name|IAccessAuthorizer
block|{
comment|/**    * Check access for given ozoneObject.    *    * @param ozoneObject object for which access needs to be checked.    * @param context Context object encapsulating all user related information.    * @throws OzoneAclException    * @return true if user has access else false.    */
DECL|method|checkAccess (IOzoneObj ozoneObject, RequestContext context)
name|boolean
name|checkAccess
parameter_list|(
name|IOzoneObj
name|ozoneObject
parameter_list|,
name|RequestContext
name|context
parameter_list|)
throws|throws
name|OzoneAclException
function_decl|;
comment|/**    * ACL rights.    */
DECL|enum|ACLType
enum|enum
name|ACLType
block|{
DECL|enumConstant|READ
name|READ
block|,
DECL|enumConstant|WRITE
name|WRITE
block|,
DECL|enumConstant|CREATE
name|CREATE
block|,
DECL|enumConstant|LIST
name|LIST
block|,
DECL|enumConstant|DELETE
name|DELETE
block|,
DECL|enumConstant|READ_ACL
name|READ_ACL
block|,
DECL|enumConstant|WRITE_ACL
name|WRITE_ACL
block|,
DECL|enumConstant|ALL
name|ALL
block|,
DECL|enumConstant|NONE
name|NONE
block|;
comment|/**      * Returns the ACL rights based on passed in String.      *      * @param type ACL right string      * @return ACLType      */
DECL|method|getACLRight (String type)
specifier|public
specifier|static
name|ACLType
name|getACLRight
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ACL right cannot be empty"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|OzoneConsts
operator|.
name|OZONE_ACL_READ
case|:
return|return
name|ACLType
operator|.
name|READ
return|;
case|case
name|OzoneConsts
operator|.
name|OZONE_ACL_WRITE
case|:
return|return
name|ACLType
operator|.
name|WRITE
return|;
case|case
name|OzoneConsts
operator|.
name|OZONE_ACL_CREATE
case|:
return|return
name|ACLType
operator|.
name|CREATE
return|;
case|case
name|OzoneConsts
operator|.
name|OZONE_ACL_DELETE
case|:
return|return
name|ACLType
operator|.
name|DELETE
return|;
case|case
name|OzoneConsts
operator|.
name|OZONE_ACL_LIST
case|:
return|return
name|ACLType
operator|.
name|LIST
return|;
case|case
name|OzoneConsts
operator|.
name|OZONE_ACL_READ_ACL
case|:
return|return
name|ACLType
operator|.
name|READ_ACL
return|;
case|case
name|OzoneConsts
operator|.
name|OZONE_ACL_WRITE_ACL
case|:
return|return
name|ACLType
operator|.
name|WRITE_ACL
return|;
case|case
name|OzoneConsts
operator|.
name|OZONE_ACL_ALL
case|:
return|return
name|ACLType
operator|.
name|ALL
return|;
case|case
name|OzoneConsts
operator|.
name|OZONE_ACL_NONE
case|:
return|return
name|ACLType
operator|.
name|NONE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ACL right is not recognized"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns String representation of ACL rights.      *      * @param acl ACLType      * @return String representation of acl      */
DECL|method|getACLRightsString (ACLType acl)
specifier|public
specifier|static
name|String
name|getACLRightsString
parameter_list|(
name|ACLType
name|acl
parameter_list|)
block|{
switch|switch
condition|(
name|acl
condition|)
block|{
case|case
name|READ
case|:
return|return
name|OzoneConsts
operator|.
name|OZONE_ACL_READ
return|;
case|case
name|WRITE
case|:
return|return
name|OzoneConsts
operator|.
name|OZONE_ACL_WRITE
return|;
case|case
name|CREATE
case|:
return|return
name|OzoneConsts
operator|.
name|OZONE_ACL_CREATE
return|;
case|case
name|DELETE
case|:
return|return
name|OzoneConsts
operator|.
name|OZONE_ACL_DELETE
return|;
case|case
name|LIST
case|:
return|return
name|OzoneConsts
operator|.
name|OZONE_ACL_LIST
return|;
case|case
name|READ_ACL
case|:
return|return
name|OzoneConsts
operator|.
name|OZONE_ACL_READ_ACL
return|;
case|case
name|WRITE_ACL
case|:
return|return
name|OzoneConsts
operator|.
name|OZONE_ACL_WRITE_ACL
return|;
case|case
name|ALL
case|:
return|return
name|OzoneConsts
operator|.
name|OZONE_ACL_ALL
return|;
case|case
name|NONE
case|:
return|return
name|OzoneConsts
operator|.
name|OZONE_ACL_NONE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ACL right is not recognized"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Type of acl identity.    */
DECL|enum|ACLIdentityType
enum|enum
name|ACLIdentityType
block|{
DECL|enumConstant|USER
name|USER
parameter_list|(
name|OzoneConsts
operator|.
name|OZONE_ACL_USER_TYPE
parameter_list|)
operator|,
DECL|enumConstant|GROUP
constructor|GROUP(OzoneConsts.OZONE_ACL_GROUP_TYPE
block|)
enum|,
DECL|enumConstant|CLIENT_IP
name|CLIENT_IP
parameter_list|(
name|OzoneConsts
operator|.
name|OZONE_ACL_IP_TYPE
parameter_list|)
operator|,
DECL|enumConstant|WORLD
constructor|WORLD(OzoneConsts.OZONE_ACL_WORLD_TYPE
block|)
empty_stmt|;
end_interface

begin_function
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
end_function

begin_comment
comment|/**      * String value for this Enum.      */
end_comment

begin_decl_stmt
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**      * Init OzoneACLtypes enum.      *      * @param val String type for this enum.      */
end_comment

begin_expr_stmt
DECL|method|ACLIdentityType (String val)
name|ACLIdentityType
argument_list|(
name|String
name|val
argument_list|)
block|{
name|value
operator|=
name|val
block|;     }
end_expr_stmt

unit|}  }
end_unit

