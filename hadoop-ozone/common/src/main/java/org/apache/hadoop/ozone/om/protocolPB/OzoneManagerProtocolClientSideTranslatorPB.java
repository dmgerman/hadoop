begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|ExcludeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|tracing
operator|.
name|TracingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneAcl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|OzoneConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|NotLeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|ha
operator|.
name|OMFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmBucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmKeyLocationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartCommitUploadPartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadCompleteInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmMultipartUploadListParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OmVolumeArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OpenKeySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|S3SecretValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
operator|.
name|OzoneFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|protocol
operator|.
name|OzoneManagerProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|AddAclResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|GetAclRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|GetAclResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneFileStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|LookupFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|LookupFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateFileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ListStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ListStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|AddAclRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateDirectoryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|GetFileStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|GetFileStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|AllocateBlockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|AllocateBlockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|BucketArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|BucketInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CancelDelegationTokenResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CheckVolumeAccessRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CommitKeyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateKeyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateKeyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|CreateVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|DeleteBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|DeleteKeyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|DeleteVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|GetDelegationTokenResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|GetS3SecretRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|GetS3SecretResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|InfoBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|InfoBucketResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|InfoVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|InfoVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|KeyArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ListBucketsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ListBucketsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ListKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ListKeysResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ListVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ListVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|LookupKeyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|LookupKeyResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartCommitUploadPartRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartCommitUploadPartResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartInfoInitiateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartInfoInitiateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartUploadAbortRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartUploadCompleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartUploadCompleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartUploadListPartsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|MultipartUploadListPartsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|OzoneAclInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|RemoveAclRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|RemoveAclResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|RenameKeyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|RenewDelegationTokenResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|S3BucketInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|S3BucketInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|S3CreateBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|S3DeleteBucketRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|S3ListBucketsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|S3ListBucketsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ServiceListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|ServiceListResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|SetAclRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|SetBucketPropertyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|SetVolumePropertyRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocolPB
operator|.
name|OMPBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|OzoneTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|security
operator|.
name|acl
operator|.
name|OzoneObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|proto
operator|.
name|SecurityProtos
operator|.
name|CancelDelegationTokenRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|proto
operator|.
name|SecurityProtos
operator|.
name|GetDelegationTokenRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|proto
operator|.
name|SecurityProtos
operator|.
name|RenewDelegationTokenRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|exceptions
operator|.
name|OMException
operator|.
name|ResultCodes
operator|.
name|TOKEN_ERROR_OTHER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|ACCESS_DENIED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|Status
operator|.
name|OK
import|;
end_import

begin_comment
comment|/**  *  The client side implementation of OzoneManagerProtocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|OzoneManagerProtocolClientSideTranslatorPB
specifier|public
specifier|final
class|class
name|OzoneManagerProtocolClientSideTranslatorPB
implements|implements
name|OzoneManagerProtocol
implements|,
name|ProtocolTranslator
block|{
comment|/**    * RpcController is not used and hence is set to null.    */
DECL|field|NULL_RPC_CONTROLLER
specifier|private
specifier|static
specifier|final
name|RpcController
name|NULL_RPC_CONTROLLER
init|=
literal|null
decl_stmt|;
DECL|field|omFailoverProxyProvider
specifier|private
specifier|final
name|OMFailoverProxyProvider
name|omFailoverProxyProvider
decl_stmt|;
DECL|field|rpcProxy
specifier|private
specifier|final
name|OzoneManagerProtocolPB
name|rpcProxy
decl_stmt|;
DECL|field|clientID
specifier|private
specifier|final
name|String
name|clientID
decl_stmt|;
DECL|field|FAILOVER_PROXY_PROVIDER_LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|FAILOVER_PROXY_PROVIDER_LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OMFailoverProxyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|OzoneManagerProtocolClientSideTranslatorPB ( OzoneManagerProtocolPB proxy, String clientId)
specifier|public
name|OzoneManagerProtocolClientSideTranslatorPB
parameter_list|(
name|OzoneManagerProtocolPB
name|proxy
parameter_list|,
name|String
name|clientId
parameter_list|)
block|{
name|this
operator|.
name|rpcProxy
operator|=
name|proxy
expr_stmt|;
name|this
operator|.
name|clientID
operator|=
name|clientId
expr_stmt|;
name|this
operator|.
name|omFailoverProxyProvider
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Constructor for OM Protocol Client. This creates a {@link RetryProxy}    * over {@link OMFailoverProxyProvider} proxy. OMFailoverProxyProvider has    * one {@link OzoneManagerProtocolPB} proxy pointing to each OM node in the    * cluster.    */
DECL|method|OzoneManagerProtocolClientSideTranslatorPB (OzoneConfiguration conf, String clientId, UserGroupInformation ugi)
specifier|public
name|OzoneManagerProtocolClientSideTranslatorPB
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|clientId
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|omFailoverProxyProvider
operator|=
operator|new
name|OMFailoverProxyProvider
argument_list|(
name|conf
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|int
name|maxRetries
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_RETRY_MAX_ATTEMPTS_KEY
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_RETRY_MAX_ATTEMPTS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|maxFailovers
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_FAILOVER_MAX_ATTEMPTS_KEY
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_FAILOVER_MAX_ATTEMPTS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|sleepBase
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_FAILOVER_SLEEP_BASE_MILLIS_KEY
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_FAILOVER_SLEEP_BASE_MILLIS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|sleepMax
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_FAILOVER_SLEEP_MAX_MILLIS_KEY
argument_list|,
name|OzoneConfigKeys
operator|.
name|OZONE_CLIENT_FAILOVER_SLEEP_MAX_MILLIS_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|rpcProxy
operator|=
name|TracingUtil
operator|.
name|createProxy
argument_list|(
name|createRetryProxy
argument_list|(
name|omFailoverProxyProvider
argument_list|,
name|maxRetries
argument_list|,
name|maxFailovers
argument_list|,
name|sleepBase
argument_list|,
name|sleepMax
argument_list|)
argument_list|,
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientID
operator|=
name|clientId
expr_stmt|;
block|}
comment|/**    * Creates a {@link RetryProxy} encapsulating the    * {@link OMFailoverProxyProvider}. The retry proxy fails over on network    * exception or if the current proxy is not the leader OM.    */
DECL|method|createRetryProxy ( OMFailoverProxyProvider failoverProxyProvider, int maxRetries, int maxFailovers, int delayMillis, int maxDelayBase)
specifier|private
name|OzoneManagerProtocolPB
name|createRetryProxy
parameter_list|(
name|OMFailoverProxyProvider
name|failoverProxyProvider
parameter_list|,
name|int
name|maxRetries
parameter_list|,
name|int
name|maxFailovers
parameter_list|,
name|int
name|delayMillis
parameter_list|,
name|int
name|maxDelayBase
parameter_list|)
block|{
name|RetryPolicy
name|retryPolicyOnNetworkException
init|=
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|maxFailovers
argument_list|,
name|maxRetries
argument_list|,
name|delayMillis
argument_list|,
name|maxDelayBase
argument_list|)
decl_stmt|;
name|RetryPolicy
name|retryPolicy
init|=
operator|new
name|RetryPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RetryAction
name|shouldRetry
parameter_list|(
name|Exception
name|exception
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|failovers
parameter_list|,
name|boolean
name|isIdempotentOrAtMostOnce
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|exception
operator|instanceof
name|ServiceException
condition|)
block|{
name|Throwable
name|cause
init|=
name|exception
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|NotLeaderException
condition|)
block|{
name|NotLeaderException
name|notLeaderException
init|=
operator|(
name|NotLeaderException
operator|)
name|cause
decl_stmt|;
name|omFailoverProxyProvider
operator|.
name|performFailoverIfRequired
argument_list|(
name|notLeaderException
operator|.
name|getSuggestedLeaderNodeId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getRetryAction
argument_list|(
name|RetryAction
operator|.
name|RETRY
argument_list|,
name|retries
argument_list|,
name|failovers
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getRetryAction
argument_list|(
name|RetryAction
operator|.
name|FAILOVER_AND_RETRY
argument_list|,
name|retries
argument_list|,
name|failovers
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|EOFException
condition|)
block|{
return|return
name|getRetryAction
argument_list|(
name|RetryAction
operator|.
name|FAILOVER_AND_RETRY
argument_list|,
name|retries
argument_list|,
name|failovers
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|retryPolicyOnNetworkException
operator|.
name|shouldRetry
argument_list|(
name|exception
argument_list|,
name|retries
argument_list|,
name|failovers
argument_list|,
name|isIdempotentOrAtMostOnce
argument_list|)
return|;
block|}
block|}
specifier|private
name|RetryAction
name|getRetryAction
parameter_list|(
name|RetryAction
name|fallbackAction
parameter_list|,
name|int
name|retries
parameter_list|,
name|int
name|failovers
parameter_list|)
block|{
if|if
condition|(
name|retries
operator|<
name|maxRetries
operator|&&
name|failovers
operator|<
name|maxFailovers
condition|)
block|{
return|return
name|fallbackAction
return|;
block|}
else|else
block|{
name|FAILOVER_PROXY_PROVIDER_LOG
operator|.
name|error
argument_list|(
literal|"Failed to connect to OM. "
operator|+
literal|"Attempted {} retries and {} failovers"
argument_list|,
name|retries
argument_list|,
name|failovers
argument_list|)
expr_stmt|;
return|return
name|RetryAction
operator|.
name|FAIL
return|;
block|}
block|}
block|}
decl_stmt|;
name|OzoneManagerProtocolPB
name|proxy
init|=
operator|(
name|OzoneManagerProtocolPB
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|OzoneManagerProtocolPB
operator|.
name|class
argument_list|,
name|failoverProxyProvider
argument_list|,
name|retryPolicy
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getOMFailoverProxyProvider ()
specifier|public
name|OMFailoverProxyProvider
name|getOMFailoverProxyProvider
parameter_list|()
block|{
return|return
name|omFailoverProxyProvider
return|;
block|}
comment|/**    * Closes this stream and releases any system resources associated    * with it. If the stream is already closed then invoking this    * method has no effect.    *<p>    *<p> As noted in {@link AutoCloseable#close()}, cases where the    * close may fail require careful attention. It is strongly advised    * to relinquish the underlying resources and to internally    *<em>mark</em> the {@code Closeable} as closed, prior to throwing    * the {@code IOException}.    *    * @throws IOException if an I/O error occurs    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{    }
comment|/**    * Return the proxy object underlying this protocol translator.    *    * @return the proxy object underlying this protocol translator.    */
annotation|@
name|Override
DECL|method|getUnderlyingProxyObject ()
specifier|public
name|Object
name|getUnderlyingProxyObject
parameter_list|()
block|{
return|return
name|rpcProxy
return|;
block|}
comment|/**    * Returns a OMRequest builder with specified type.    * @param cmdType type of the request    */
DECL|method|createOMRequest (Type cmdType)
specifier|private
name|OMRequest
operator|.
name|Builder
name|createOMRequest
parameter_list|(
name|Type
name|cmdType
parameter_list|)
block|{
return|return
name|OMRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCmdType
argument_list|(
name|cmdType
argument_list|)
operator|.
name|setClientId
argument_list|(
name|clientID
argument_list|)
return|;
block|}
comment|/**    * Submits client request to OM server.    * @param omRequest client request    * @return response from OM    * @throws IOException thrown if any Protobuf service exception occurs    */
DECL|method|submitRequest (OMRequest omRequest)
specifier|private
name|OMResponse
name|submitRequest
parameter_list|(
name|OMRequest
name|omRequest
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|OMRequest
name|payload
init|=
name|OMRequest
operator|.
name|newBuilder
argument_list|(
name|omRequest
argument_list|)
operator|.
name|setTraceID
argument_list|(
name|TracingUtil
operator|.
name|exportCurrentSpan
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMResponse
name|omResponse
init|=
name|rpcProxy
operator|.
name|submitRequest
argument_list|(
name|NULL_RPC_CONTROLLER
argument_list|,
name|payload
argument_list|)
decl_stmt|;
if|if
condition|(
name|omResponse
operator|.
name|hasLeaderOMNodeId
argument_list|()
operator|&&
name|omFailoverProxyProvider
operator|!=
literal|null
condition|)
block|{
name|String
name|leaderOmId
init|=
name|omResponse
operator|.
name|getLeaderOMNodeId
argument_list|()
decl_stmt|;
comment|// Failover to the OM node returned by OMReponse leaderOMNodeId if
comment|// current proxy is not pointing to that node.
name|omFailoverProxyProvider
operator|.
name|performFailoverIfRequired
argument_list|(
name|leaderOmId
argument_list|)
expr_stmt|;
block|}
return|return
name|omResponse
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates a volume.    *    * @param args - Arguments to create Volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createVolume (OmVolumeArgs args)
specifier|public
name|void
name|createVolume
parameter_list|(
name|OmVolumeArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CreateVolumeRequest
operator|.
name|Builder
name|req
init|=
name|CreateVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|VolumeInfo
name|volumeInfo
init|=
name|args
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeInfo
argument_list|(
name|volumeInfo
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CreateVolume
argument_list|)
operator|.
name|setCreateVolumeRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMResponse
name|omResponse
init|=
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
name|handleError
argument_list|(
name|omResponse
argument_list|)
expr_stmt|;
block|}
comment|/**    * Changes the owner of a volume.    *    * @param volume - Name of the volume.    * @param owner - Name of the owner.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setOwner (String volume, String owner)
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|owner
parameter_list|)
throws|throws
name|IOException
block|{
name|SetVolumePropertyRequest
operator|.
name|Builder
name|req
init|=
name|SetVolumePropertyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setOwnerName
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|SetVolumeProperty
argument_list|)
operator|.
name|setSetVolumePropertyRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMResponse
name|omResponse
init|=
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
name|handleError
argument_list|(
name|omResponse
argument_list|)
expr_stmt|;
block|}
comment|/**    * Changes the Quota on a volume.    *    * @param volume - Name of the volume.    * @param quota - Quota in bytes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setQuota (String volume, long quota)
specifier|public
name|void
name|setQuota
parameter_list|(
name|String
name|volume
parameter_list|,
name|long
name|quota
parameter_list|)
throws|throws
name|IOException
block|{
name|SetVolumePropertyRequest
operator|.
name|Builder
name|req
init|=
name|SetVolumePropertyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setQuotaInBytes
argument_list|(
name|quota
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|SetVolumeProperty
argument_list|)
operator|.
name|setSetVolumePropertyRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMResponse
name|omResponse
init|=
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
name|handleError
argument_list|(
name|omResponse
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if the specified user can access this volume.    *    * @param volume - volume    * @param userAcl - user acls which needs to be checked for access    * @return true if the user has required access for the volume,    *         false otherwise    * @throws IOException    */
annotation|@
name|Override
DECL|method|checkVolumeAccess (String volume, OzoneAclInfo userAcl)
specifier|public
name|boolean
name|checkVolumeAccess
parameter_list|(
name|String
name|volume
parameter_list|,
name|OzoneAclInfo
name|userAcl
parameter_list|)
throws|throws
name|IOException
block|{
name|CheckVolumeAccessRequest
operator|.
name|Builder
name|req
init|=
name|CheckVolumeAccessRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
operator|.
name|setUserAcl
argument_list|(
name|userAcl
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CheckVolumeAccess
argument_list|)
operator|.
name|setCheckVolumeAccessRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMResponse
name|omResponse
init|=
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|omResponse
operator|.
name|getStatus
argument_list|()
operator|==
name|ACCESS_DENIED
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|omResponse
operator|.
name|getStatus
argument_list|()
operator|==
name|OK
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|handleError
argument_list|(
name|omResponse
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Gets the volume information.    *    * @param volume - Volume name.    * @return OmVolumeArgs or exception is thrown.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getVolumeInfo (String volume)
specifier|public
name|OmVolumeArgs
name|getVolumeInfo
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|InfoVolumeRequest
operator|.
name|Builder
name|req
init|=
name|InfoVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|InfoVolume
argument_list|)
operator|.
name|setInfoVolumeRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|InfoVolumeResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getInfoVolumeResponse
argument_list|()
decl_stmt|;
return|return
name|OmVolumeArgs
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getVolumeInfo
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Deletes an existing empty volume.    *    * @param volume - Name of the volume.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteVolume (String volume)
specifier|public
name|void
name|deleteVolume
parameter_list|(
name|String
name|volume
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteVolumeRequest
operator|.
name|Builder
name|req
init|=
name|DeleteVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|DeleteVolume
argument_list|)
operator|.
name|setDeleteVolumeRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Lists volume owned by a specific user.    *    * @param userName - user name    * @param prefix - Filter prefix -- Return only entries that match this.    * @param prevKey - Previous key -- List starts from the next from the    * prevkey    * @param maxKeys - Max number of keys to return.    * @return List of Volumes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|listVolumeByUser (String userName, String prefix, String prevKey, int maxKeys)
specifier|public
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|listVolumeByUser
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|ListVolumeRequest
operator|.
name|Builder
name|builder
init|=
name|ListVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prevKey
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setPrevKey
argument_list|(
name|prevKey
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
name|ListVolumeRequest
operator|.
name|Scope
operator|.
name|VOLUMES_BY_USER
argument_list|)
expr_stmt|;
return|return
name|listVolume
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Lists volume all volumes in the cluster.    *    * @param prefix - Filter prefix -- Return only entries that match this.    * @param prevKey - Previous key -- List starts from the next from the    * prevkey    * @param maxKeys - Max number of keys to return.    * @return List of Volumes.    * @throws IOException    */
annotation|@
name|Override
DECL|method|listAllVolumes (String prefix, String prevKey, int maxKeys)
specifier|public
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|listAllVolumes
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|prevKey
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|ListVolumeRequest
operator|.
name|Builder
name|builder
init|=
name|ListVolumeRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prevKey
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setPrevKey
argument_list|(
name|prevKey
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setScope
argument_list|(
name|ListVolumeRequest
operator|.
name|Scope
operator|.
name|VOLUMES_BY_CLUSTER
argument_list|)
expr_stmt|;
return|return
name|listVolume
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|listVolume (ListVolumeRequest request)
specifier|private
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|listVolume
parameter_list|(
name|ListVolumeRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|ListVolume
argument_list|)
operator|.
name|setListVolumeRequest
argument_list|(
name|request
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ListVolumeResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getListVolumeResponse
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OmVolumeArgs
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|resp
operator|.
name|getVolumeInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VolumeInfo
name|info
range|:
name|resp
operator|.
name|getVolumeInfoList
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|OmVolumeArgs
operator|.
name|getFromProtobuf
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Creates a bucket.    *    * @param bucketInfo - BucketInfo to create bucket.    * @throws IOException    */
annotation|@
name|Override
DECL|method|createBucket (OmBucketInfo bucketInfo)
specifier|public
name|void
name|createBucket
parameter_list|(
name|OmBucketInfo
name|bucketInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|CreateBucketRequest
operator|.
name|Builder
name|req
init|=
name|CreateBucketRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|BucketInfo
name|bucketInfoProtobuf
init|=
name|bucketInfo
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|req
operator|.
name|setBucketInfo
argument_list|(
name|bucketInfoProtobuf
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CreateBucket
argument_list|)
operator|.
name|setCreateBucketRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the bucket information.    *    * @param volume - Volume name.    * @param bucket - Bucket name.    * @return OmBucketInfo or exception is thrown.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getBucketInfo (String volume, String bucket)
specifier|public
name|OmBucketInfo
name|getBucketInfo
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|InfoBucketRequest
operator|.
name|Builder
name|req
init|=
name|InfoBucketRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|req
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|InfoBucket
argument_list|)
operator|.
name|setInfoBucketRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|InfoBucketResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getInfoBucketResponse
argument_list|()
decl_stmt|;
return|return
name|OmBucketInfo
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getBucketInfo
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Sets bucket property from args.    * @param args - BucketArgs.    * @throws IOException    */
annotation|@
name|Override
DECL|method|setBucketProperty (OmBucketArgs args)
specifier|public
name|void
name|setBucketProperty
parameter_list|(
name|OmBucketArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|SetBucketPropertyRequest
operator|.
name|Builder
name|req
init|=
name|SetBucketPropertyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|BucketArgs
name|bucketArgs
init|=
name|args
operator|.
name|getProtobuf
argument_list|()
decl_stmt|;
name|req
operator|.
name|setBucketArgs
argument_list|(
name|bucketArgs
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|SetBucketProperty
argument_list|)
operator|.
name|setSetBucketPropertyRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * List buckets in a volume.    *    * @param volumeName    * @param startKey    * @param prefix    * @param count    * @return    * @throws IOException    */
annotation|@
name|Override
DECL|method|listBuckets (String volumeName, String startKey, String prefix, int count)
specifier|public
name|List
argument_list|<
name|OmBucketInfo
argument_list|>
name|listBuckets
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|prefix
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OmBucketInfo
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ListBucketsRequest
operator|.
name|Builder
name|reqBuilder
init|=
name|ListBucketsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|reqBuilder
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|reqBuilder
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|startKey
operator|!=
literal|null
condition|)
block|{
name|reqBuilder
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|reqBuilder
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|ListBucketsRequest
name|request
init|=
name|reqBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|ListBuckets
argument_list|)
operator|.
name|setListBucketsRequest
argument_list|(
name|request
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ListBucketsResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getListBucketsResponse
argument_list|()
decl_stmt|;
name|buckets
operator|.
name|addAll
argument_list|(
name|resp
operator|.
name|getBucketInfoList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OmBucketInfo
operator|::
name|getFromProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buckets
return|;
block|}
comment|/**    * Create a new open session of the key, then use the returned meta info to    * talk to data node to actually write the key.    * @param args the args for the key to be allocated    * @return a handler to the key, returned client    * @throws IOException    */
annotation|@
name|Override
DECL|method|openKey (OmKeyArgs args)
specifier|public
name|OpenKeySession
name|openKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CreateKeyRequest
operator|.
name|Builder
name|req
init|=
name|CreateKeyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
operator|.
name|Builder
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|getAcls
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keyArgs
operator|.
name|addAllAcls
argument_list|(
name|args
operator|.
name|getAcls
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|distinct
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|OzoneAcl
operator|.
name|toProtobuf
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|getFactor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keyArgs
operator|.
name|setFactor
argument_list|(
name|args
operator|.
name|getFactor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keyArgs
operator|.
name|setType
argument_list|(
name|args
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|keyArgs
operator|.
name|setDataSize
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|getMetadata
argument_list|()
operator|!=
literal|null
operator|&&
name|args
operator|.
name|getMetadata
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|keyArgs
operator|.
name|addAllMetadata
argument_list|(
name|KeyValueUtil
operator|.
name|toProtobuf
argument_list|(
name|args
operator|.
name|getMetadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|getMultipartUploadID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keyArgs
operator|.
name|setMultipartUploadID
argument_list|(
name|args
operator|.
name|getMultipartUploadID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|getMultipartUploadPartNumber
argument_list|()
operator|>
literal|0
condition|)
block|{
name|keyArgs
operator|.
name|setMultipartNumber
argument_list|(
name|args
operator|.
name|getMultipartUploadPartNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keyArgs
operator|.
name|setIsMultipartKey
argument_list|(
name|args
operator|.
name|getIsMultipartKey
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CreateKey
argument_list|)
operator|.
name|setCreateKeyRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CreateKeyResponse
name|keyResponse
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getCreateKeyResponse
argument_list|()
decl_stmt|;
return|return
operator|new
name|OpenKeySession
argument_list|(
name|keyResponse
operator|.
name|getID
argument_list|()
argument_list|,
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|keyResponse
operator|.
name|getKeyInfo
argument_list|()
argument_list|)
argument_list|,
name|keyResponse
operator|.
name|getOpenVersion
argument_list|()
argument_list|)
return|;
block|}
DECL|method|handleError (OMResponse resp)
specifier|private
name|OMResponse
name|handleError
parameter_list|(
name|OMResponse
name|resp
parameter_list|)
throws|throws
name|OMException
block|{
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|!=
name|OK
condition|)
block|{
throw|throw
operator|new
name|OMException
argument_list|(
name|resp
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ResultCodes
operator|.
name|values
argument_list|()
index|[
name|resp
operator|.
name|getStatus
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
throw|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Override
DECL|method|allocateBlock (OmKeyArgs args, long clientId, ExcludeList excludeList)
specifier|public
name|OmKeyLocationInfo
name|allocateBlock
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|long
name|clientId
parameter_list|,
name|ExcludeList
name|excludeList
parameter_list|)
throws|throws
name|IOException
block|{
name|AllocateBlockRequest
operator|.
name|Builder
name|req
init|=
name|AllocateBlockRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
operator|.
name|Builder
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|getFactor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keyArgs
operator|.
name|setFactor
argument_list|(
name|args
operator|.
name|getFactor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keyArgs
operator|.
name|setType
argument_list|(
name|args
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|req
operator|.
name|setClientID
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|req
operator|.
name|setExcludeList
argument_list|(
name|excludeList
operator|.
name|getProtoBuf
argument_list|()
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|AllocateBlock
argument_list|)
operator|.
name|setAllocateBlockRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AllocateBlockResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getAllocateBlockResponse
argument_list|()
decl_stmt|;
return|return
name|OmKeyLocationInfo
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getKeyLocation
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|commitKey (OmKeyArgs args, long clientId)
specifier|public
name|void
name|commitKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|long
name|clientId
parameter_list|)
throws|throws
name|IOException
block|{
name|CommitKeyRequest
operator|.
name|Builder
name|req
init|=
name|CommitKeyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locationInfoList
init|=
name|args
operator|.
name|getLocationInfoList
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|locationInfoList
argument_list|)
expr_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
operator|.
name|addAllKeyLocations
argument_list|(
name|locationInfoList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OmKeyLocationInfo
operator|::
name|getProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|req
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|req
operator|.
name|setClientID
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CommitKey
argument_list|)
operator|.
name|setCommitKeyRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupKey (OmKeyArgs args)
specifier|public
name|OmKeyInfo
name|lookupKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|LookupKeyRequest
operator|.
name|Builder
name|req
init|=
name|LookupKeyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
operator|.
name|setSortDatanodes
argument_list|(
name|args
operator|.
name|getSortDatanodes
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|req
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|LookupKey
argument_list|)
operator|.
name|setLookupKeyRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LookupKeyResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getLookupKeyResponse
argument_list|()
decl_stmt|;
return|return
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getKeyInfo
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renameKey (OmKeyArgs args, String toKeyName)
specifier|public
name|void
name|renameKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|String
name|toKeyName
parameter_list|)
throws|throws
name|IOException
block|{
name|RenameKeyRequest
operator|.
name|Builder
name|req
init|=
name|RenameKeyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|req
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|req
operator|.
name|setToKeyName
argument_list|(
name|toKeyName
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|RenameKey
argument_list|)
operator|.
name|setRenameKeyRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes an existing key.    *    * @param args the args of the key.    * @throws IOException    */
annotation|@
name|Override
DECL|method|deleteKey (OmKeyArgs args)
specifier|public
name|void
name|deleteKey
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteKeyRequest
operator|.
name|Builder
name|req
init|=
name|DeleteKeyRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|req
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|DeleteKey
argument_list|)
operator|.
name|setDeleteKeyRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes an existing empty bucket from volume.    * @param volume - Name of the volume.    * @param bucket - Name of the bucket.    * @throws IOException    */
DECL|method|deleteBucket (String volume, String bucket)
specifier|public
name|void
name|deleteBucket
parameter_list|(
name|String
name|volume
parameter_list|,
name|String
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|DeleteBucketRequest
operator|.
name|Builder
name|req
init|=
name|DeleteBucketRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|setVolumeName
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|req
operator|.
name|setBucketName
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|DeleteBucket
argument_list|)
operator|.
name|setDeleteBucketRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * List keys in a bucket.    */
annotation|@
name|Override
DECL|method|listKeys (String volumeName, String bucketName, String startKey, String prefix, int maxKeys)
specifier|public
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|listKeys
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|prefix
parameter_list|,
name|int
name|maxKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ListKeysRequest
operator|.
name|Builder
name|reqBuilder
init|=
name|ListKeysRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|reqBuilder
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|reqBuilder
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|reqBuilder
operator|.
name|setCount
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|startKey
operator|!=
literal|null
condition|)
block|{
name|reqBuilder
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|reqBuilder
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|ListKeysRequest
name|req
init|=
name|reqBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|ListKeys
argument_list|)
operator|.
name|setListKeysRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ListKeysResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getListKeysResponse
argument_list|()
decl_stmt|;
name|keys
operator|.
name|addAll
argument_list|(
name|resp
operator|.
name|getKeyInfoList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OmKeyInfo
operator|::
name|getFromProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|keys
return|;
block|}
annotation|@
name|Override
DECL|method|createS3Bucket (String userName, String s3BucketName)
specifier|public
name|void
name|createS3Bucket
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|S3CreateBucketRequest
name|req
init|=
name|S3CreateBucketRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|setS3Bucketname
argument_list|(
name|s3BucketName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CreateS3Bucket
argument_list|)
operator|.
name|setCreateS3BucketRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deleteS3Bucket (String s3BucketName)
specifier|public
name|void
name|deleteS3Bucket
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|S3DeleteBucketRequest
name|request
init|=
name|S3DeleteBucketRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setS3BucketName
argument_list|(
name|s3BucketName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|DeleteS3Bucket
argument_list|)
operator|.
name|setDeleteS3BucketRequest
argument_list|(
name|request
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOzoneBucketMapping (String s3BucketName)
specifier|public
name|String
name|getOzoneBucketMapping
parameter_list|(
name|String
name|s3BucketName
parameter_list|)
throws|throws
name|IOException
block|{
name|S3BucketInfoRequest
name|request
init|=
name|S3BucketInfoRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setS3BucketName
argument_list|(
name|s3BucketName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|InfoS3Bucket
argument_list|)
operator|.
name|setInfoS3BucketRequest
argument_list|(
name|request
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|S3BucketInfoResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getInfoS3BucketResponse
argument_list|()
decl_stmt|;
return|return
name|resp
operator|.
name|getOzoneMapping
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listS3Buckets (String userName, String startKey, String prefix, int count)
specifier|public
name|List
argument_list|<
name|OmBucketInfo
argument_list|>
name|listS3Buckets
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|startKey
parameter_list|,
name|String
name|prefix
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OmBucketInfo
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|S3ListBucketsRequest
operator|.
name|Builder
name|reqBuilder
init|=
name|S3ListBucketsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|reqBuilder
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|reqBuilder
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|startKey
operator|!=
literal|null
condition|)
block|{
name|reqBuilder
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|reqBuilder
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|S3ListBucketsRequest
name|request
init|=
name|reqBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|ListS3Buckets
argument_list|)
operator|.
name|setListS3BucketsRequest
argument_list|(
name|request
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|S3ListBucketsResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getListS3BucketsResponse
argument_list|()
decl_stmt|;
name|buckets
operator|.
name|addAll
argument_list|(
name|resp
operator|.
name|getBucketInfoList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OmBucketInfo
operator|::
name|getFromProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buckets
return|;
block|}
annotation|@
name|Override
DECL|method|getS3Secret (String kerberosID)
specifier|public
name|S3SecretValue
name|getS3Secret
parameter_list|(
name|String
name|kerberosID
parameter_list|)
throws|throws
name|IOException
block|{
name|GetS3SecretRequest
name|request
init|=
name|GetS3SecretRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKerberosID
argument_list|(
name|kerberosID
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|GetS3Secret
argument_list|)
operator|.
name|setGetS3SecretRequest
argument_list|(
name|request
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|GetS3SecretResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getGetS3SecretResponse
argument_list|()
decl_stmt|;
return|return
name|S3SecretValue
operator|.
name|fromProtobuf
argument_list|(
name|resp
operator|.
name|getS3Secret
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return the proxy object underlying this protocol translator.    *    * @return the proxy object underlying this protocol translator.    */
annotation|@
name|Override
DECL|method|initiateMultipartUpload (OmKeyArgs omKeyArgs)
specifier|public
name|OmMultipartInfo
name|initiateMultipartUpload
parameter_list|(
name|OmKeyArgs
name|omKeyArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|MultipartInfoInitiateRequest
operator|.
name|Builder
name|multipartInfoInitiateRequest
init|=
name|MultipartInfoInitiateRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
operator|.
name|Builder
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|omKeyArgs
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|omKeyArgs
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|omKeyArgs
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setFactor
argument_list|(
name|omKeyArgs
operator|.
name|getFactor
argument_list|()
argument_list|)
operator|.
name|addAllAcls
argument_list|(
name|omKeyArgs
operator|.
name|getAcls
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|OzoneAcl
operator|.
name|toProtobuf
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|omKeyArgs
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|multipartInfoInitiateRequest
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|InitiateMultiPartUpload
argument_list|)
operator|.
name|setInitiateMultiPartUploadRequest
argument_list|(
name|multipartInfoInitiateRequest
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MultipartInfoInitiateResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getInitiateMultiPartUploadResponse
argument_list|()
decl_stmt|;
return|return
operator|new
name|OmMultipartInfo
argument_list|(
name|resp
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|resp
operator|.
name|getBucketName
argument_list|()
argument_list|,
name|resp
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|resp
operator|.
name|getMultipartUploadID
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|commitMultipartUploadPart ( OmKeyArgs omKeyArgs, long clientId)
specifier|public
name|OmMultipartCommitUploadPartInfo
name|commitMultipartUploadPart
parameter_list|(
name|OmKeyArgs
name|omKeyArgs
parameter_list|,
name|long
name|clientId
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OmKeyLocationInfo
argument_list|>
name|locationInfoList
init|=
name|omKeyArgs
operator|.
name|getLocationInfoList
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|locationInfoList
argument_list|)
expr_stmt|;
name|MultipartCommitUploadPartRequest
operator|.
name|Builder
name|multipartCommitUploadPartRequest
init|=
name|MultipartCommitUploadPartRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
operator|.
name|Builder
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|omKeyArgs
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|omKeyArgs
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|omKeyArgs
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setMultipartUploadID
argument_list|(
name|omKeyArgs
operator|.
name|getMultipartUploadID
argument_list|()
argument_list|)
operator|.
name|setIsMultipartKey
argument_list|(
name|omKeyArgs
operator|.
name|getIsMultipartKey
argument_list|()
argument_list|)
operator|.
name|setMultipartNumber
argument_list|(
name|omKeyArgs
operator|.
name|getMultipartUploadPartNumber
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|omKeyArgs
operator|.
name|getDataSize
argument_list|()
argument_list|)
operator|.
name|addAllKeyLocations
argument_list|(
name|locationInfoList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|OmKeyLocationInfo
operator|::
name|getProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|multipartCommitUploadPartRequest
operator|.
name|setClientID
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|multipartCommitUploadPartRequest
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CommitMultiPartUpload
argument_list|)
operator|.
name|setCommitMultiPartUploadRequest
argument_list|(
name|multipartCommitUploadPartRequest
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MultipartCommitUploadPartResponse
name|response
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getCommitMultiPartUploadResponse
argument_list|()
decl_stmt|;
name|OmMultipartCommitUploadPartInfo
name|info
init|=
operator|new
name|OmMultipartCommitUploadPartInfo
argument_list|(
name|response
operator|.
name|getPartName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
annotation|@
name|Override
DECL|method|completeMultipartUpload ( OmKeyArgs omKeyArgs, OmMultipartUploadList multipartUploadList)
specifier|public
name|OmMultipartUploadCompleteInfo
name|completeMultipartUpload
parameter_list|(
name|OmKeyArgs
name|omKeyArgs
parameter_list|,
name|OmMultipartUploadList
name|multipartUploadList
parameter_list|)
throws|throws
name|IOException
block|{
name|MultipartUploadCompleteRequest
operator|.
name|Builder
name|multipartUploadCompleteRequest
init|=
name|MultipartUploadCompleteRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|KeyArgs
operator|.
name|Builder
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|omKeyArgs
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|omKeyArgs
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|omKeyArgs
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|addAllAcls
argument_list|(
name|omKeyArgs
operator|.
name|getAcls
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|OzoneAcl
operator|.
name|toProtobuf
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMultipartUploadID
argument_list|(
name|omKeyArgs
operator|.
name|getMultipartUploadID
argument_list|()
argument_list|)
decl_stmt|;
name|multipartUploadCompleteRequest
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|multipartUploadCompleteRequest
operator|.
name|addAllPartsList
argument_list|(
name|multipartUploadList
operator|.
name|getPartsList
argument_list|()
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CompleteMultiPartUpload
argument_list|)
operator|.
name|setCompleteMultiPartUploadRequest
argument_list|(
name|multipartUploadCompleteRequest
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MultipartUploadCompleteResponse
name|response
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getCompleteMultiPartUploadResponse
argument_list|()
decl_stmt|;
name|OmMultipartUploadCompleteInfo
name|info
init|=
operator|new
name|OmMultipartUploadCompleteInfo
argument_list|(
name|response
operator|.
name|getVolume
argument_list|()
argument_list|,
name|response
operator|.
name|getBucket
argument_list|()
argument_list|,
name|response
operator|.
name|getKey
argument_list|()
argument_list|,
name|response
operator|.
name|getHash
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
annotation|@
name|Override
DECL|method|abortMultipartUpload (OmKeyArgs omKeyArgs)
specifier|public
name|void
name|abortMultipartUpload
parameter_list|(
name|OmKeyArgs
name|omKeyArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyArgs
operator|.
name|Builder
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|omKeyArgs
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|omKeyArgs
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|omKeyArgs
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setMultipartUploadID
argument_list|(
name|omKeyArgs
operator|.
name|getMultipartUploadID
argument_list|()
argument_list|)
decl_stmt|;
name|MultipartUploadAbortRequest
operator|.
name|Builder
name|multipartUploadAbortRequest
init|=
name|MultipartUploadAbortRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|multipartUploadAbortRequest
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|AbortMultiPartUpload
argument_list|)
operator|.
name|setAbortMultiPartUploadRequest
argument_list|(
name|multipartUploadAbortRequest
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|listParts (String volumeName, String bucketName, String keyName, String uploadID, int partNumberMarker, int maxParts)
specifier|public
name|OmMultipartUploadListParts
name|listParts
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|String
name|bucketName
parameter_list|,
name|String
name|keyName
parameter_list|,
name|String
name|uploadID
parameter_list|,
name|int
name|partNumberMarker
parameter_list|,
name|int
name|maxParts
parameter_list|)
throws|throws
name|IOException
block|{
name|MultipartUploadListPartsRequest
operator|.
name|Builder
name|multipartUploadListPartsRequest
init|=
name|MultipartUploadListPartsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|multipartUploadListPartsRequest
operator|.
name|setVolume
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setBucket
argument_list|(
name|bucketName
argument_list|)
operator|.
name|setKey
argument_list|(
name|keyName
argument_list|)
operator|.
name|setUploadID
argument_list|(
name|uploadID
argument_list|)
operator|.
name|setPartNumbermarker
argument_list|(
name|partNumberMarker
argument_list|)
operator|.
name|setMaxParts
argument_list|(
name|maxParts
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|ListMultiPartUploadParts
argument_list|)
operator|.
name|setListMultipartUploadPartsRequest
argument_list|(
name|multipartUploadListPartsRequest
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MultipartUploadListPartsResponse
name|response
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getListMultipartUploadPartsResponse
argument_list|()
decl_stmt|;
name|OmMultipartUploadListParts
name|omMultipartUploadListParts
init|=
operator|new
name|OmMultipartUploadListParts
argument_list|(
name|response
operator|.
name|getType
argument_list|()
argument_list|,
name|response
operator|.
name|getNextPartNumberMarker
argument_list|()
argument_list|,
name|response
operator|.
name|getIsTruncated
argument_list|()
argument_list|)
decl_stmt|;
name|omMultipartUploadListParts
operator|.
name|addProtoPartList
argument_list|(
name|response
operator|.
name|getPartsListList
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|omMultipartUploadListParts
return|;
block|}
DECL|method|getServiceList ()
specifier|public
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|getServiceList
parameter_list|()
throws|throws
name|IOException
block|{
name|ServiceListRequest
name|req
init|=
name|ServiceListRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|ServiceList
argument_list|)
operator|.
name|setServiceListRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|ServiceListResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getServiceListResponse
argument_list|()
decl_stmt|;
return|return
name|resp
operator|.
name|getServiceInfoList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ServiceInfo
operator|::
name|getFromProtobuf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get a valid Delegation Token.    *    * @param renewer the designated renewer for the token    * @return Token<OzoneDelegationTokenSelector>    * @throws OMException    */
annotation|@
name|Override
DECL|method|getDelegationToken (Text renewer)
specifier|public
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|OMException
block|{
name|GetDelegationTokenRequestProto
name|req
init|=
name|GetDelegationTokenRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setRenewer
argument_list|(
name|renewer
operator|==
literal|null
condition|?
literal|""
else|:
name|renewer
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|GetDelegationToken
argument_list|)
operator|.
name|setGetDelegationTokenRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|GetDelegationTokenResponseProto
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getGetDelegationTokenResponse
argument_list|()
expr_stmt|;
return|return
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|hasToken
argument_list|()
condition|?
name|OMPBHelper
operator|.
name|convertToDelegationToken
argument_list|(
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|OMException
condition|)
block|{
throw|throw
operator|(
name|OMException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Get delegation token failed."
argument_list|,
name|e
argument_list|,
name|TOKEN_ERROR_OTHER
argument_list|)
throw|;
block|}
block|}
comment|/**    * Renew an existing delegation token.    *    * @param token delegation token obtained earlier    * @return the new expiration time    */
annotation|@
name|Override
DECL|method|renewDelegationToken (Token<OzoneTokenIdentifier> token)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|OMException
block|{
name|RenewDelegationTokenRequestProto
name|req
init|=
name|RenewDelegationTokenRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setToken
argument_list|(
name|OMPBHelper
operator|.
name|convertToTokenProto
argument_list|(
name|token
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|RenewDelegationToken
argument_list|)
operator|.
name|setRenewDelegationTokenRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|RenewDelegationTokenResponseProto
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getRenewDelegationTokenResponse
argument_list|()
expr_stmt|;
return|return
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|getNewExpiryTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|OMException
condition|)
block|{
throw|throw
operator|(
name|OMException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Renew delegation token failed."
argument_list|,
name|e
argument_list|,
name|TOKEN_ERROR_OTHER
argument_list|)
throw|;
block|}
block|}
comment|/**    * Cancel an existing delegation token.    *    * @param token delegation token    */
annotation|@
name|Override
DECL|method|cancelDelegationToken (Token<OzoneTokenIdentifier> token)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|OzoneTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|OMException
block|{
name|CancelDelegationTokenRequestProto
name|req
init|=
name|CancelDelegationTokenRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setToken
argument_list|(
name|OMPBHelper
operator|.
name|convertToTokenProto
argument_list|(
name|token
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CancelDelegationToken
argument_list|)
operator|.
name|setCancelDelegationTokenRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|CancelDelegationTokenResponseProto
name|resp
decl_stmt|;
try|try
block|{
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|OMException
condition|)
block|{
throw|throw
operator|(
name|OMException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|OMException
argument_list|(
literal|"Cancel delegation token failed."
argument_list|,
name|e
argument_list|,
name|TOKEN_ERROR_OTHER
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get File Status for an Ozone key.    *    * @param args    * @return OzoneFileStatus for the key.    * @throws IOException    */
DECL|method|getFileStatus (OmKeyArgs args)
specifier|public
name|OzoneFileStatus
name|getFileStatus
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GetFileStatusRequest
name|req
init|=
name|GetFileStatusRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|GetFileStatus
argument_list|)
operator|.
name|setGetFileStatusRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|GetFileStatusResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getGetFileStatusResponse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
name|OzoneFileStatus
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createDirectory (OmKeyArgs args)
specifier|public
name|void
name|createDirectory
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|addAllAcls
argument_list|(
name|args
operator|.
name|getAcls
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|OzoneAcl
operator|.
name|toProtobuf
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CreateDirectoryRequest
name|request
init|=
name|CreateDirectoryRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CreateDirectory
argument_list|)
operator|.
name|setCreateDirectoryRequest
argument_list|(
name|request
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lookupFile (OmKeyArgs args)
specifier|public
name|OmKeyInfo
name|lookupFile
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setSortDatanodes
argument_list|(
name|args
operator|.
name|getSortDatanodes
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LookupFileRequest
name|lookupFileRequest
init|=
name|LookupFileRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|LookupFile
argument_list|)
operator|.
name|setLookupFileRequest
argument_list|(
name|lookupFileRequest
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|LookupFileResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getLookupFileResponse
argument_list|()
decl_stmt|;
return|return
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getKeyInfo
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add acl for Ozone object. Return true if acl is added successfully else    * false.    *    * @param obj Ozone object for which acl should be added.    * @param acl ozone acl top be added.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|addAcl (OzoneObj obj, OzoneAcl acl)
specifier|public
name|boolean
name|addAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|OzoneAcl
name|acl
parameter_list|)
throws|throws
name|IOException
block|{
name|AddAclRequest
name|req
init|=
name|AddAclRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setObj
argument_list|(
name|OzoneObj
operator|.
name|toProtobuf
argument_list|(
name|obj
argument_list|)
argument_list|)
operator|.
name|setAcl
argument_list|(
name|OzoneAcl
operator|.
name|toProtobuf
argument_list|(
name|acl
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|AddAcl
argument_list|)
operator|.
name|setAddAclRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AddAclResponse
name|addAclResponse
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getAddAclResponse
argument_list|()
decl_stmt|;
return|return
name|addAclResponse
operator|.
name|getResponse
argument_list|()
return|;
block|}
comment|/**    * Remove acl for Ozone object. Return true if acl is removed successfully    * else false.    *    * @param obj Ozone object.    * @param acl Ozone acl to be removed.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|removeAcl (OzoneObj obj, OzoneAcl acl)
specifier|public
name|boolean
name|removeAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|OzoneAcl
name|acl
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoveAclRequest
name|req
init|=
name|RemoveAclRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setObj
argument_list|(
name|OzoneObj
operator|.
name|toProtobuf
argument_list|(
name|obj
argument_list|)
argument_list|)
operator|.
name|setAcl
argument_list|(
name|OzoneAcl
operator|.
name|toProtobuf
argument_list|(
name|acl
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|RemoveAcl
argument_list|)
operator|.
name|setRemoveAclRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RemoveAclResponse
name|response
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getRemoveAclResponse
argument_list|()
decl_stmt|;
return|return
name|response
operator|.
name|getResponse
argument_list|()
return|;
block|}
comment|/**    * Acls to be set for given Ozone object. This operations reset ACL for given    * object to list of ACLs provided in argument.    *    * @param obj Ozone object.    * @param acls List of acls.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|setAcl (OzoneObj obj, List<OzoneAcl> acls)
specifier|public
name|boolean
name|setAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|,
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
parameter_list|)
throws|throws
name|IOException
block|{
name|SetAclRequest
operator|.
name|Builder
name|builder
init|=
name|SetAclRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setObj
argument_list|(
name|OzoneObj
operator|.
name|toProtobuf
argument_list|(
name|obj
argument_list|)
argument_list|)
decl_stmt|;
name|acls
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|builder
operator|.
name|addAcl
argument_list|(
name|OzoneAcl
operator|.
name|toProtobuf
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|SetAcl
argument_list|)
operator|.
name|setSetAclRequest
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OzoneManagerProtocolProtos
operator|.
name|SetAclResponse
name|response
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getSetAclResponse
argument_list|()
decl_stmt|;
return|return
name|response
operator|.
name|getResponse
argument_list|()
return|;
block|}
comment|/**    * Returns list of ACLs for given Ozone object.    *    * @param obj Ozone object.    * @throws IOException if there is error.    */
annotation|@
name|Override
DECL|method|getAcl (OzoneObj obj)
specifier|public
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|getAcl
parameter_list|(
name|OzoneObj
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
name|GetAclRequest
name|req
init|=
name|GetAclRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setObj
argument_list|(
name|OzoneObj
operator|.
name|toProtobuf
argument_list|(
name|obj
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|GetAcl
argument_list|)
operator|.
name|setGetAclRequest
argument_list|(
name|req
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|GetAclResponse
name|response
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getGetAclResponse
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OzoneAcl
argument_list|>
name|acls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|response
operator|.
name|getAclsList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|a
lambda|->
name|acls
operator|.
name|add
argument_list|(
name|OzoneAcl
operator|.
name|fromProtobuf
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|acls
return|;
block|}
annotation|@
name|Override
DECL|method|createFile (OmKeyArgs args, boolean overWrite, boolean recursive)
specifier|public
name|OpenKeySession
name|createFile
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|boolean
name|overWrite
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|setDataSize
argument_list|(
name|args
operator|.
name|getDataSize
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|args
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|setFactor
argument_list|(
name|args
operator|.
name|getFactor
argument_list|()
argument_list|)
operator|.
name|addAllAcls
argument_list|(
name|args
operator|.
name|getAcls
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|a
lambda|->
name|OzoneAcl
operator|.
name|toProtobuf
argument_list|(
name|a
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CreateFileRequest
name|createFileRequest
init|=
name|CreateFileRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|setIsOverwrite
argument_list|(
name|overWrite
argument_list|)
operator|.
name|setIsRecursive
argument_list|(
name|recursive
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|CreateFile
argument_list|)
operator|.
name|setCreateFileRequest
argument_list|(
name|createFileRequest
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CreateFileResponse
name|resp
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getCreateFileResponse
argument_list|()
decl_stmt|;
return|return
operator|new
name|OpenKeySession
argument_list|(
name|resp
operator|.
name|getID
argument_list|()
argument_list|,
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|resp
operator|.
name|getKeyInfo
argument_list|()
argument_list|)
argument_list|,
name|resp
operator|.
name|getOpenVersion
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (OmKeyArgs args, boolean recursive, String startKey, long numEntries)
specifier|public
name|List
argument_list|<
name|OzoneFileStatus
argument_list|>
name|listStatus
parameter_list|(
name|OmKeyArgs
name|args
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|String
name|startKey
parameter_list|,
name|long
name|numEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|KeyArgs
name|keyArgs
init|=
name|KeyArgs
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVolumeName
argument_list|(
name|args
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setBucketName
argument_list|(
name|args
operator|.
name|getBucketName
argument_list|()
argument_list|)
operator|.
name|setKeyName
argument_list|(
name|args
operator|.
name|getKeyName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ListStatusRequest
name|listStatusRequest
init|=
name|ListStatusRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKeyArgs
argument_list|(
name|keyArgs
argument_list|)
operator|.
name|setRecursive
argument_list|(
name|recursive
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|startKey
argument_list|)
operator|.
name|setNumEntries
argument_list|(
name|numEntries
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OMRequest
name|omRequest
init|=
name|createOMRequest
argument_list|(
name|Type
operator|.
name|ListStatus
argument_list|)
operator|.
name|setListStatusRequest
argument_list|(
name|listStatusRequest
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ListStatusResponse
name|listStatusResponse
init|=
name|handleError
argument_list|(
name|submitRequest
argument_list|(
name|omRequest
argument_list|)
argument_list|)
operator|.
name|getListStatusResponse
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|OzoneFileStatus
argument_list|>
name|statusList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|listStatusResponse
operator|.
name|getStatusesCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OzoneFileStatusProto
name|fileStatus
range|:
name|listStatusResponse
operator|.
name|getStatusesList
argument_list|()
control|)
block|{
name|statusList
operator|.
name|add
argument_list|(
name|OzoneFileStatus
operator|.
name|getFromProtobuf
argument_list|(
name|fileStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|statusList
return|;
block|}
block|}
end_class

end_unit

