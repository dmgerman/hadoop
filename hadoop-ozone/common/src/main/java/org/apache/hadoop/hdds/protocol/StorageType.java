begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdds.protocol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|StorageTypeProto
import|;
end_import

begin_comment
comment|/**  * Ozone specific storage types.  */
end_comment

begin_enum
DECL|enum|StorageType
specifier|public
enum|enum
name|StorageType
block|{
DECL|enumConstant|RAM_DISK
name|RAM_DISK
block|,
DECL|enumConstant|SSD
name|SSD
block|,
DECL|enumConstant|DISK
name|DISK
block|,
DECL|enumConstant|ARCHIVE
name|ARCHIVE
block|;
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|StorageType
name|DEFAULT
init|=
name|DISK
decl_stmt|;
DECL|method|toProto ()
specifier|public
name|StorageTypeProto
name|toProto
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|DISK
case|:
return|return
name|StorageTypeProto
operator|.
name|DISK
return|;
case|case
name|SSD
case|:
return|return
name|StorageTypeProto
operator|.
name|SSD
return|;
case|case
name|ARCHIVE
case|:
return|return
name|StorageTypeProto
operator|.
name|ARCHIVE
return|;
case|case
name|RAM_DISK
case|:
return|return
name|StorageTypeProto
operator|.
name|RAM_DISK
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"BUG: StorageType not found, type="
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
DECL|method|valueOf (StorageTypeProto type)
specifier|public
specifier|static
name|StorageType
name|valueOf
parameter_list|(
name|StorageTypeProto
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DISK
case|:
return|return
name|DISK
return|;
case|case
name|SSD
case|:
return|return
name|SSD
return|;
case|case
name|ARCHIVE
case|:
return|return
name|ARCHIVE
return|;
case|case
name|RAM_DISK
case|:
return|return
name|RAM_DISK
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"BUG: StorageTypeProto not found, type="
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
end_enum

end_unit

