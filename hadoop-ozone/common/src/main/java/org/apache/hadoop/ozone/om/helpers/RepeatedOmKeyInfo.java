begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.om.helpers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|RepeatedKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|protocol
operator|.
name|proto
operator|.
name|OzoneManagerProtocolProtos
operator|.
name|KeyInfo
import|;
end_import

begin_comment
comment|/**  * Args for deleted keys. This is written to om metadata deletedTable.  * Once a key is deleted, it is moved to om metadata deletedTable. Having a  * {label: List<OMKeyInfo>} ensures that if users create& delete keys with  * exact same uri multiple times, all the delete instances are bundled under  * the same key name. This is useful as part of GDPR compliance where an  * admin wants to confirm if a given key is deleted from deletedTable metadata.  */
end_comment

begin_class
DECL|class|RepeatedOmKeyInfo
specifier|public
class|class
name|RepeatedOmKeyInfo
block|{
DECL|field|omKeyInfoList
specifier|private
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|omKeyInfoList
decl_stmt|;
DECL|method|RepeatedOmKeyInfo (List<OmKeyInfo> omKeyInfos)
specifier|public
name|RepeatedOmKeyInfo
parameter_list|(
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|omKeyInfos
parameter_list|)
block|{
name|this
operator|.
name|omKeyInfoList
operator|=
name|omKeyInfos
expr_stmt|;
block|}
DECL|method|RepeatedOmKeyInfo (OmKeyInfo omKeyInfos)
specifier|public
name|RepeatedOmKeyInfo
parameter_list|(
name|OmKeyInfo
name|omKeyInfos
parameter_list|)
block|{
name|this
operator|.
name|omKeyInfoList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|omKeyInfoList
operator|.
name|add
argument_list|(
name|omKeyInfos
argument_list|)
expr_stmt|;
block|}
DECL|method|addOmKeyInfo (OmKeyInfo info)
specifier|public
name|void
name|addOmKeyInfo
parameter_list|(
name|OmKeyInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|omKeyInfoList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|getOmKeyInfoList ()
specifier|public
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|getOmKeyInfoList
parameter_list|()
block|{
return|return
name|omKeyInfoList
return|;
block|}
DECL|method|getFromProto (RepeatedKeyInfo repeatedKeyInfo)
specifier|public
specifier|static
name|RepeatedOmKeyInfo
name|getFromProto
parameter_list|(
name|RepeatedKeyInfo
name|repeatedKeyInfo
parameter_list|)
block|{
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|KeyInfo
name|k
range|:
name|repeatedKeyInfo
operator|.
name|getKeyInfoList
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|OmKeyInfo
operator|.
name|getFromProtobuf
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RepeatedOmKeyInfo
operator|.
name|Builder
argument_list|()
operator|.
name|setOmKeyInfos
argument_list|(
name|list
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getProto ()
specifier|public
name|RepeatedKeyInfo
name|getProto
parameter_list|()
block|{
name|List
argument_list|<
name|KeyInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|OmKeyInfo
name|k
range|:
name|omKeyInfoList
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|k
operator|.
name|getProtobuf
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RepeatedKeyInfo
operator|.
name|Builder
name|builder
init|=
name|RepeatedKeyInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllKeyInfo
argument_list|(
name|list
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Builder of RepeatedOmKeyInfo.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|omKeyInfos
specifier|private
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|omKeyInfos
decl_stmt|;
DECL|method|Builder ()
specifier|public
name|Builder
parameter_list|()
block|{}
DECL|method|setOmKeyInfos (List<OmKeyInfo> infoList)
specifier|public
name|Builder
name|setOmKeyInfos
parameter_list|(
name|List
argument_list|<
name|OmKeyInfo
argument_list|>
name|infoList
parameter_list|)
block|{
name|this
operator|.
name|omKeyInfos
operator|=
name|infoList
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|RepeatedOmKeyInfo
name|build
parameter_list|()
block|{
return|return
operator|new
name|RepeatedOmKeyInfo
argument_list|(
name|omKeyInfos
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

