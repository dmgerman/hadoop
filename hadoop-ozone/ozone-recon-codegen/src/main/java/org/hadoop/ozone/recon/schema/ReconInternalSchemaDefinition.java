begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.hadoop.ozone.recon.schema
package|package
name|org
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|recon
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|DSL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jooq
operator|.
name|impl
operator|.
name|SQLDataType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_comment
comment|/**  * Class used to create tables that are required for Recon's internal  * management.  */
end_comment

begin_class
DECL|class|ReconInternalSchemaDefinition
specifier|public
class|class
name|ReconInternalSchemaDefinition
implements|implements
name|ReconSchemaDefinition
block|{
DECL|field|RECON_TASK_STATUS_TABLE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|RECON_TASK_STATUS_TABLE_NAME
init|=
literal|"recon_task_status"
decl_stmt|;
DECL|field|dataSource
specifier|private
specifier|final
name|DataSource
name|dataSource
decl_stmt|;
annotation|@
name|Inject
DECL|method|ReconInternalSchemaDefinition (DataSource dataSource)
name|ReconInternalSchemaDefinition
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeSchema ()
specifier|public
name|void
name|initializeSchema
parameter_list|()
throws|throws
name|SQLException
block|{
name|Connection
name|conn
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|createReconTaskStatus
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the Recon Task Status table.    * @param conn connection    */
DECL|method|createReconTaskStatus (Connection conn)
specifier|private
name|void
name|createReconTaskStatus
parameter_list|(
name|Connection
name|conn
parameter_list|)
block|{
name|DSL
operator|.
name|using
argument_list|(
name|conn
argument_list|)
operator|.
name|createTableIfNotExists
argument_list|(
name|RECON_TASK_STATUS_TABLE_NAME
argument_list|)
operator|.
name|column
argument_list|(
literal|"task_name"
argument_list|,
name|SQLDataType
operator|.
name|VARCHAR
argument_list|(
literal|1024
argument_list|)
argument_list|)
operator|.
name|column
argument_list|(
literal|"last_updated_timestamp"
argument_list|,
name|SQLDataType
operator|.
name|BIGINT
argument_list|)
operator|.
name|column
argument_list|(
literal|"last_updated_seq_number"
argument_list|,
name|SQLDataType
operator|.
name|BIGINT
argument_list|)
operator|.
name|constraint
argument_list|(
name|DSL
operator|.
name|constraint
argument_list|(
literal|"pk_task_name"
argument_list|)
operator|.
name|primaryKey
argument_list|(
literal|"task_name"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

