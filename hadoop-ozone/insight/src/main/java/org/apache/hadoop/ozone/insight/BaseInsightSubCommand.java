begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.insight
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|HddsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|ScmConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|Component
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|om
operator|.
name|KeyManagerInsight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|om
operator|.
name|OmProtocolInsight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|scm
operator|.
name|EventQueueInsight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|scm
operator|.
name|NodeManagerInsight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|scm
operator|.
name|ReplicaManagerInsight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|scm
operator|.
name|ScmProtocolBlockLocationInsight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|scm
operator|.
name|ScmProtocolSecurityInsight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|om
operator|.
name|OMConfigKeys
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
import|;
end_import

begin_comment
comment|/**  * Parent class for all the insight subcommands.  */
end_comment

begin_class
DECL|class|BaseInsightSubCommand
specifier|public
class|class
name|BaseInsightSubCommand
block|{
annotation|@
name|CommandLine
operator|.
name|ParentCommand
DECL|field|insightCommand
specifier|private
name|Insight
name|insightCommand
decl_stmt|;
DECL|method|getInsight (OzoneConfiguration configuration, String selection)
specifier|public
name|InsightPoint
name|getInsight
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|,
name|String
name|selection
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|InsightPoint
argument_list|>
name|insights
init|=
name|createInsightPoints
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|insights
operator|.
name|containsKey
argument_list|(
name|selection
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No such component; %s. Available components: %s"
argument_list|,
name|selection
argument_list|,
name|insights
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|insights
operator|.
name|get
argument_list|(
name|selection
argument_list|)
return|;
block|}
comment|/**    * Utility to get the host base on a component.    */
DECL|method|getHost (OzoneConfiguration conf, Component component)
specifier|public
name|String
name|getHost
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
if|if
condition|(
name|component
operator|.
name|getHostname
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|"http://"
operator|+
name|component
operator|.
name|getHostname
argument_list|()
operator|+
literal|":"
operator|+
name|component
operator|.
name|getPort
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|component
operator|.
name|getName
argument_list|()
operator|==
name|Type
operator|.
name|SCM
condition|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|scmHost
init|=
name|HddsUtils
operator|.
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_BLOCK_CLIENT_ADDRESS_KEY
argument_list|,
name|ScmConfigKeys
operator|.
name|OZONE_SCM_CLIENT_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
literal|"http://"
operator|+
name|scmHost
operator|.
name|get
argument_list|()
operator|+
literal|":9876"
return|;
block|}
elseif|else
if|if
condition|(
name|component
operator|.
name|getName
argument_list|()
operator|==
name|Type
operator|.
name|OM
condition|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|omHost
init|=
name|HddsUtils
operator|.
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|OMConfigKeys
operator|.
name|OZONE_OM_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
literal|"http://"
operator|+
name|omHost
operator|.
name|get
argument_list|()
operator|+
literal|":9874"
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Component type is not supported: "
operator|+
name|component
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|createInsightPoints ( OzoneConfiguration configuration)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|InsightPoint
argument_list|>
name|createInsightPoints
parameter_list|(
name|OzoneConfiguration
name|configuration
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|InsightPoint
argument_list|>
name|insights
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|insights
operator|.
name|put
argument_list|(
literal|"scm.node-manager"
argument_list|,
operator|new
name|NodeManagerInsight
argument_list|()
argument_list|)
expr_stmt|;
name|insights
operator|.
name|put
argument_list|(
literal|"scm.replica-manager"
argument_list|,
operator|new
name|ReplicaManagerInsight
argument_list|()
argument_list|)
expr_stmt|;
name|insights
operator|.
name|put
argument_list|(
literal|"scm.event-queue"
argument_list|,
operator|new
name|EventQueueInsight
argument_list|()
argument_list|)
expr_stmt|;
name|insights
operator|.
name|put
argument_list|(
literal|"scm.protocol.block-location"
argument_list|,
operator|new
name|ScmProtocolBlockLocationInsight
argument_list|()
argument_list|)
expr_stmt|;
name|insights
operator|.
name|put
argument_list|(
literal|"scm.protocol.security"
argument_list|,
operator|new
name|ScmProtocolSecurityInsight
argument_list|()
argument_list|)
expr_stmt|;
name|insights
operator|.
name|put
argument_list|(
literal|"om.key-manager"
argument_list|,
operator|new
name|KeyManagerInsight
argument_list|()
argument_list|)
expr_stmt|;
name|insights
operator|.
name|put
argument_list|(
literal|"om.protocol.client"
argument_list|,
operator|new
name|OmProtocolInsight
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|insights
return|;
block|}
DECL|method|getInsightCommand ()
specifier|public
name|Insight
name|getInsightCommand
parameter_list|()
block|{
return|return
name|insightCommand
return|;
block|}
block|}
end_class

end_unit

