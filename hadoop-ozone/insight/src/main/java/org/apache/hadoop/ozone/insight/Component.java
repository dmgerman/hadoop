begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.insight
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Identifier an ozone component.  */
end_comment

begin_class
DECL|class|Component
specifier|public
class|class
name|Component
block|{
comment|/**    * The type of the component (eg. scm, s3g...)    */
DECL|field|name
specifier|private
name|Type
name|name
decl_stmt|;
comment|/**    * Unique identifier of the instance (uuid or index). Can be null for    * non-HA server component.    */
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
comment|/**    * Hostname of the component. Optional, may help to find the right host    * name.    */
DECL|field|hostname
specifier|private
name|String
name|hostname
decl_stmt|;
comment|/**    * HTTP service port. Optional.    */
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|method|Component (Type name)
specifier|public
name|Component
parameter_list|(
name|Type
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|Component (Type name, String id)
specifier|public
name|Component
parameter_list|(
name|Type
name|name
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|Component (Type name, String id, String hostname)
specifier|public
name|Component
parameter_list|(
name|Type
name|name
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|hostname
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
block|}
DECL|method|Component (Type name, String id, String hostname, int port)
specifier|public
name|Component
parameter_list|(
name|Type
name|name
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|Type
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Component
name|that
init|=
operator|(
name|Component
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|that
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|that
operator|.
name|id
argument_list|)
return|;
block|}
DECL|method|prefix ()
specifier|public
name|String
name|prefix
parameter_list|()
block|{
return|return
name|name
operator|+
operator|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"-"
operator|+
name|id
else|:
literal|""
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
return|;
block|}
comment|/**    * Ozone component types.    */
DECL|enum|Type
specifier|public
enum|enum
name|Type
block|{
DECL|enumConstant|SCM
DECL|enumConstant|OM
DECL|enumConstant|DATANODE
DECL|enumConstant|S3G
DECL|enumConstant|RECON
name|SCM
block|,
name|OM
block|,
name|DATANODE
block|,
name|S3G
block|,
name|RECON
block|;   }
block|}
end_class

end_unit

