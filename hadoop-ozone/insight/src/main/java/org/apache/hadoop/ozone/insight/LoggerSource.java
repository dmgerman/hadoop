begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.insight
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|Component
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Definition of a log source.  */
end_comment

begin_class
DECL|class|LoggerSource
specifier|public
class|class
name|LoggerSource
block|{
comment|/**    * Id of the component where the log is generated.    */
DECL|field|component
specifier|private
name|Component
name|component
decl_stmt|;
comment|/**    * Log4j/slf4j logger name.    */
DECL|field|loggerName
specifier|private
name|String
name|loggerName
decl_stmt|;
comment|/**    * Log level.    */
DECL|field|level
specifier|private
name|Level
name|level
decl_stmt|;
DECL|method|LoggerSource (Component component, String loggerName, Level level)
specifier|public
name|LoggerSource
parameter_list|(
name|Component
name|component
parameter_list|,
name|String
name|loggerName
parameter_list|,
name|Level
name|level
parameter_list|)
block|{
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
name|this
operator|.
name|loggerName
operator|=
name|loggerName
expr_stmt|;
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
DECL|method|LoggerSource (Type componentType, Class<?> loggerClass, Level level)
specifier|public
name|LoggerSource
parameter_list|(
name|Type
name|componentType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|loggerClass
parameter_list|,
name|Level
name|level
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|Component
argument_list|(
name|componentType
argument_list|)
argument_list|,
name|loggerClass
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
DECL|method|getComponent ()
specifier|public
name|Component
name|getComponent
parameter_list|()
block|{
return|return
name|component
return|;
block|}
DECL|method|getLoggerName ()
specifier|public
name|String
name|getLoggerName
parameter_list|()
block|{
return|return
name|loggerName
return|;
block|}
DECL|method|getLevel ()
specifier|public
name|Level
name|getLevel
parameter_list|()
block|{
return|return
name|level
return|;
block|}
comment|/**    * Log level definition.    */
DECL|enum|Level
specifier|public
enum|enum
name|Level
block|{
DECL|enumConstant|TRACE
DECL|enumConstant|DEBUG
DECL|enumConstant|INFO
DECL|enumConstant|WARN
DECL|enumConstant|ERROR
name|TRACE
block|,
name|DEBUG
block|,
name|INFO
block|,
name|WARN
block|,
name|ERROR
block|}
block|}
end_class

end_unit

