begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.insight
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|LoggerSource
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
import|;
end_import

begin_comment
comment|/**  * Subcommand to display log.  */
end_comment

begin_class
annotation|@
name|CommandLine
operator|.
name|Command
argument_list|(
name|name
operator|=
literal|"log"
argument_list|,
name|aliases
operator|=
literal|"logs"
argument_list|,
name|description
operator|=
literal|"Show log4j events related to the insight point"
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|)
DECL|class|LogSubcommand
specifier|public
class|class
name|LogSubcommand
extends|extends
name|BaseInsightSubCommand
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
annotation|@
name|CommandLine
operator|.
name|Parameters
argument_list|(
name|description
operator|=
literal|"Name of the insight point (use list "
operator|+
literal|"to check the available options)"
argument_list|)
DECL|field|insightName
specifier|private
name|String
name|insightName
decl_stmt|;
annotation|@
name|CommandLine
operator|.
name|Option
argument_list|(
name|names
operator|=
literal|"-v"
argument_list|,
name|description
operator|=
literal|"Enable verbose mode to "
operator|+
literal|"show more information / detailed message"
argument_list|)
DECL|field|verbose
specifier|private
name|boolean
name|verbose
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
name|getInsightCommand
argument_list|()
operator|.
name|createOzoneConfiguration
argument_list|()
decl_stmt|;
name|InsightPoint
name|insight
init|=
name|getInsight
argument_list|(
name|conf
argument_list|,
name|insightName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LoggerSource
argument_list|>
name|loggers
init|=
name|insight
operator|.
name|getRelatedLoggers
argument_list|(
name|verbose
argument_list|)
decl_stmt|;
for|for
control|(
name|LoggerSource
name|logger
range|:
name|loggers
control|)
block|{
name|setLogLevel
argument_list|(
name|conf
argument_list|,
name|logger
operator|.
name|getLoggerName
argument_list|()
argument_list|,
name|logger
operator|.
name|getComponent
argument_list|()
argument_list|,
name|logger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Component
argument_list|>
name|sources
init|=
name|loggers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|LoggerSource
operator|::
name|getComponent
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|streamLog
argument_list|(
name|conf
argument_list|,
name|sources
argument_list|,
name|loggers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|LoggerSource
name|logger
range|:
name|loggers
control|)
block|{
name|setLogLevel
argument_list|(
name|conf
argument_list|,
name|logger
operator|.
name|getLoggerName
argument_list|()
argument_list|,
name|logger
operator|.
name|getComponent
argument_list|()
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|streamLog (OzoneConfiguration conf, Set<Component> sources, List<LoggerSource> relatedLoggers)
specifier|private
name|void
name|streamLog
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|Set
argument_list|<
name|Component
argument_list|>
name|sources
parameter_list|,
name|List
argument_list|<
name|LoggerSource
argument_list|>
name|relatedLoggers
parameter_list|)
block|{
name|List
argument_list|<
name|Thread
argument_list|>
name|loggers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|sourceComponent
range|:
name|sources
control|)
block|{
name|loggers
operator|.
name|add
argument_list|(
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
name|streamLog
argument_list|(
name|conf
argument_list|,
name|sourceComponent
argument_list|,
name|relatedLoggers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|loggers
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|loggers
control|)
block|{
try|try
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|streamLog (OzoneConfiguration conf, Component logComponent, List<LoggerSource> loggers)
specifier|private
name|void
name|streamLog
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|Component
name|logComponent
parameter_list|,
name|List
argument_list|<
name|LoggerSource
argument_list|>
name|loggers
parameter_list|)
block|{
name|HttpClient
name|client
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|HttpGet
name|get
init|=
operator|new
name|HttpGet
argument_list|(
name|getHost
argument_list|(
name|conf
argument_list|,
name|logComponent
argument_list|)
operator|+
literal|"/logstream"
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpResponse
name|execute
init|=
name|client
operator|.
name|execute
argument_list|(
name|get
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedReader
name|bufferedReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|execute
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|bufferedReader
operator|.
name|lines
argument_list|()
operator|.
name|filter
argument_list|(
name|line
lambda|->
block|{
for|for
control|(
name|LoggerSource
name|logger
range|:
name|loggers
control|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|logger
operator|.
name|getLoggerName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|processLogLine
argument_list|)
operator|.
name|map
argument_list|(
name|l
lambda|->
literal|"["
operator|+
name|logComponent
operator|.
name|prefix
argument_list|()
operator|+
literal|"] "
operator|+
name|l
argument_list|)
operator|.
name|forEach
argument_list|(
name|System
operator|.
name|out
operator|::
name|println
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|processLogLine (String line)
specifier|public
name|String
name|processLogLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<json>(.*)</json>"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|m
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
literal|"\n"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\\\n"
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|appendTail
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|setLogLevel (OzoneConfiguration conf, String name, Component component, LoggerSource.Level level)
specifier|private
name|void
name|setLogLevel
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|String
name|name
parameter_list|,
name|Component
name|component
parameter_list|,
name|LoggerSource
operator|.
name|Level
name|level
parameter_list|)
block|{
name|HttpClient
name|client
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|request
init|=
name|String
operator|.
name|format
argument_list|(
literal|"/logLevel?log=%s&level=%s"
argument_list|,
name|name
argument_list|,
name|level
argument_list|)
decl_stmt|;
name|String
name|hostName
init|=
name|getHost
argument_list|(
name|conf
argument_list|,
name|component
argument_list|)
decl_stmt|;
name|HttpGet
name|get
init|=
operator|new
name|HttpGet
argument_list|(
name|hostName
operator|+
name|request
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpResponse
name|execute
init|=
name|client
operator|.
name|execute
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|execute
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't set the log level: "
operator|+
name|hostName
operator|+
literal|" -> HTTP "
operator|+
name|execute
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

