begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.insight.scm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|scm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|node
operator|.
name|SCMNodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|BaseInsightPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|Component
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|LoggerSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|MetricDisplay
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|MetricGroupDisplay
import|;
end_import

begin_comment
comment|/**  * Insight definition to check node manager / node report events.  */
end_comment

begin_class
DECL|class|NodeManagerInsight
specifier|public
class|class
name|NodeManagerInsight
extends|extends
name|BaseInsightPoint
block|{
annotation|@
name|Override
DECL|method|getRelatedLoggers (boolean verbose)
specifier|public
name|List
argument_list|<
name|LoggerSource
argument_list|>
name|getRelatedLoggers
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|List
argument_list|<
name|LoggerSource
argument_list|>
name|loggers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|loggers
operator|.
name|add
argument_list|(
operator|new
name|LoggerSource
argument_list|(
name|Type
operator|.
name|SCM
argument_list|,
name|SCMNodeManager
operator|.
name|class
argument_list|,
name|defaultLevel
argument_list|(
name|verbose
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|loggers
return|;
block|}
annotation|@
name|Override
DECL|method|getMetrics ()
specifier|public
name|List
argument_list|<
name|MetricGroupDisplay
argument_list|>
name|getMetrics
parameter_list|()
block|{
name|List
argument_list|<
name|MetricGroupDisplay
argument_list|>
name|display
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|MetricGroupDisplay
name|nodes
init|=
operator|new
name|MetricGroupDisplay
argument_list|(
name|Type
operator|.
name|SCM
argument_list|,
literal|"Node counters"
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|addMetrics
argument_list|(
operator|new
name|MetricDisplay
argument_list|(
literal|"Healthy Nodes"
argument_list|,
literal|"scm_node_manager_healthy_nodes"
argument_list|)
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|addMetrics
argument_list|(
operator|new
name|MetricDisplay
argument_list|(
literal|"Dead Nodes"
argument_list|,
literal|"scm_node_manager_dead_nodes"
argument_list|)
argument_list|)
expr_stmt|;
name|display
operator|.
name|add
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|MetricGroupDisplay
name|hb
init|=
operator|new
name|MetricGroupDisplay
argument_list|(
name|Type
operator|.
name|SCM
argument_list|,
literal|"HB processing stats"
argument_list|)
decl_stmt|;
name|hb
operator|.
name|addMetrics
argument_list|(
operator|new
name|MetricDisplay
argument_list|(
literal|"HB processed"
argument_list|,
literal|"scm_node_manager_num_hb_processed"
argument_list|)
argument_list|)
expr_stmt|;
name|hb
operator|.
name|addMetrics
argument_list|(
operator|new
name|MetricDisplay
argument_list|(
literal|"HB processing failed"
argument_list|,
literal|"scm_node_manager_num_hb_processing_failed"
argument_list|)
argument_list|)
expr_stmt|;
name|display
operator|.
name|add
argument_list|(
name|hb
argument_list|)
expr_stmt|;
return|return
name|display
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"SCM Datanode management related information."
return|;
block|}
block|}
end_class

end_unit

