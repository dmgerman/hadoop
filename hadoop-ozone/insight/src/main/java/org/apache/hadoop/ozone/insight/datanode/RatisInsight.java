begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.insight.datanode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|datanode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|protocol
operator|.
name|DatanodeDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|client
operator|.
name|ScmClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|pipeline
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|BaseInsightPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|Component
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|InsightPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|LoggerSource
import|;
end_import

begin_comment
comment|/**  * Insight definition for datanode/pipline metrics.  */
end_comment

begin_class
DECL|class|RatisInsight
specifier|public
class|class
name|RatisInsight
extends|extends
name|BaseInsightPoint
implements|implements
name|InsightPoint
block|{
DECL|field|conf
specifier|private
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|method|RatisInsight (OzoneConfiguration conf)
specifier|public
name|RatisInsight
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRelatedLoggers (boolean verbose)
specifier|public
name|List
argument_list|<
name|LoggerSource
argument_list|>
name|getRelatedLoggers
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|List
argument_list|<
name|LoggerSource
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|ScmClient
name|scmClient
init|=
name|createScmClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Pipeline
name|pipeline
init|=
name|scmClient
operator|.
name|listPipelines
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|d
lambda|->
name|d
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeDetails
name|datanode
range|:
name|pipeline
operator|.
name|getNodes
argument_list|()
control|)
block|{
name|Component
name|dn
init|=
operator|new
name|Component
argument_list|(
name|Type
operator|.
name|DATANODE
argument_list|,
name|datanode
operator|.
name|getUuid
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|datanode
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|9882
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|LoggerSource
argument_list|(
name|dn
argument_list|,
literal|"org.apache.ratis.server.impl"
argument_list|,
name|defaultLevel
argument_list|(
name|verbose
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't enumerate required logs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"More information about one ratis datanode ring."
return|;
block|}
block|}
end_class

end_unit

