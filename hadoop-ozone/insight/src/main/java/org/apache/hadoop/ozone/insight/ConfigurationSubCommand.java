begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.insight
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|ConfigGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
operator|.
name|Component
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * Subcommand to show configuration values/documentation.  */
end_comment

begin_class
annotation|@
name|CommandLine
operator|.
name|Command
argument_list|(
name|name
operator|=
literal|"config"
argument_list|,
name|description
operator|=
literal|"Show configuration for a specific subcomponents"
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|)
DECL|class|ConfigurationSubCommand
specifier|public
class|class
name|ConfigurationSubCommand
extends|extends
name|BaseInsightSubCommand
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
annotation|@
name|CommandLine
operator|.
name|Parameters
argument_list|(
name|description
operator|=
literal|"Name of the insight point (use list "
operator|+
literal|"to check the available options)"
argument_list|)
DECL|field|insightName
specifier|private
name|String
name|insightName
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|InsightPoint
name|insight
init|=
name|getInsight
argument_list|(
name|getInsightCommand
argument_list|()
operator|.
name|createOzoneConfiguration
argument_list|()
argument_list|,
name|insightName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Configuration for `"
operator|+
name|insightName
operator|+
literal|"` ("
operator|+
name|insight
operator|.
name|getDescription
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
for|for
control|(
name|Class
name|clazz
range|:
name|insight
operator|.
name|getConfigurationClasses
argument_list|()
control|)
block|{
name|showConfig
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|showConfig (Class clazz)
specifier|private
name|void
name|showConfig
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|OzoneConfiguration
name|conf
init|=
operator|new
name|OzoneConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|getHost
argument_list|(
name|conf
argument_list|,
operator|new
name|Component
argument_list|(
name|Type
operator|.
name|SCM
argument_list|)
argument_list|)
operator|+
literal|"/conf"
argument_list|)
expr_stmt|;
name|ConfigGroup
name|configGroup
init|=
operator|(
name|ConfigGroup
operator|)
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ConfigGroup
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|configGroup
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|prefix
init|=
name|configGroup
operator|.
name|prefix
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|Config
operator|.
name|class
argument_list|)
condition|)
block|{
name|Config
name|config
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Config
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|prefix
operator|+
literal|"."
operator|+
name|config
operator|.
name|key
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> "
operator|+
name|key
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"       default: "
operator|+
name|config
operator|.
name|defaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"       current: "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|config
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

