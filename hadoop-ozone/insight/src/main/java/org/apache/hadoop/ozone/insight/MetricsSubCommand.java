begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ozone.insight
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ozone
operator|.
name|insight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|cli
operator|.
name|HddsVersionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|picocli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Command line interface to show metrics for a specific component.  */
end_comment

begin_class
annotation|@
name|CommandLine
operator|.
name|Command
argument_list|(
name|name
operator|=
literal|"metrics"
argument_list|,
name|aliases
operator|=
literal|"metric"
argument_list|,
name|description
operator|=
literal|"Show available metrics."
argument_list|,
name|mixinStandardHelpOptions
operator|=
literal|true
argument_list|,
name|versionProvider
operator|=
name|HddsVersionProvider
operator|.
name|class
argument_list|)
DECL|class|MetricsSubCommand
specifier|public
class|class
name|MetricsSubCommand
extends|extends
name|BaseInsightSubCommand
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
annotation|@
name|CommandLine
operator|.
name|Parameters
argument_list|(
name|description
operator|=
literal|"Name of the insight point (use list "
operator|+
literal|"to check the available options)"
argument_list|)
DECL|field|insightName
specifier|private
name|String
name|insightName
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|OzoneConfiguration
name|conf
init|=
name|getInsightCommand
argument_list|()
operator|.
name|createOzoneConfiguration
argument_list|()
decl_stmt|;
name|InsightPoint
name|insight
init|=
name|getInsight
argument_list|(
name|conf
argument_list|,
name|insightName
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Component
argument_list|>
name|sources
init|=
name|insight
operator|.
name|getMetrics
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MetricGroupDisplay
operator|::
name|getComponent
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Component
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|metrics
init|=
name|getMetrics
argument_list|(
name|conf
argument_list|,
name|sources
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Metrics for `"
operator|+
name|insightName
operator|+
literal|"` ("
operator|+
name|insight
operator|.
name|getDescription
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
for|for
control|(
name|MetricGroupDisplay
name|group
range|:
name|insight
operator|.
name|getMetrics
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|group
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
for|for
control|(
name|MetricDisplay
name|display
range|:
name|group
operator|.
name|getMetrics
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|display
operator|.
name|getDescription
argument_list|()
operator|+
literal|": "
operator|+
name|selectValue
argument_list|(
name|metrics
operator|.
name|get
argument_list|(
name|group
operator|.
name|getComponent
argument_list|()
argument_list|)
argument_list|,
name|display
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getMetrics (OzoneConfiguration conf, Collection<Component> sources)
specifier|private
name|Map
argument_list|<
name|Component
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getMetrics
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|Collection
argument_list|<
name|Component
argument_list|>
name|sources
parameter_list|)
block|{
name|Map
argument_list|<
name|Component
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|source
range|:
name|sources
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|source
argument_list|,
name|getMetrics
argument_list|(
name|conf
argument_list|,
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|selectValue (List<String> metrics, MetricDisplay metricDisplay)
specifier|private
name|String
name|selectValue
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|metrics
parameter_list|,
name|MetricDisplay
name|metricDisplay
parameter_list|)
block|{
for|for
control|(
name|String
name|line
range|:
name|metrics
control|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|metricDisplay
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|filtered
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filter
range|:
name|metricDisplay
operator|.
name|getFilter
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|contains
argument_list|(
name|filter
operator|.
name|getKey
argument_list|()
operator|+
literal|"=\""
operator|+
name|filter
operator|.
name|getValue
argument_list|()
operator|+
literal|"\""
argument_list|)
condition|)
block|{
name|filtered
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|filtered
condition|)
block|{
return|return
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|1
index|]
return|;
block|}
block|}
block|}
return|return
literal|"???"
return|;
block|}
DECL|method|getMetrics (OzoneConfiguration conf, Component component)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getMetrics
parameter_list|(
name|OzoneConfiguration
name|conf
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|HttpClient
name|client
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|HttpGet
name|get
init|=
operator|new
name|HttpGet
argument_list|(
name|getHost
argument_list|(
name|conf
argument_list|,
name|component
argument_list|)
operator|+
literal|"/prom"
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpResponse
name|execute
init|=
name|client
operator|.
name|execute
argument_list|(
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|execute
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't read prometheus metrics endpoint"
operator|+
name|execute
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
throw|;
block|}
try|try
init|(
name|BufferedReader
name|bufferedReader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|execute
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
return|return
name|bufferedReader
operator|.
name|lines
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

