begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cli
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cli
operator|.
name|util
operator|.
name|CommandExecutor
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|HadoopArchives
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|tools
operator|.
name|MRAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|HadoopPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
DECL|class|TestMRCLI
specifier|public
class|class
name|TestMRCLI
extends|extends
name|TestHDFSCLI
block|{
DECL|field|mrCluster
specifier|protected
name|MiniMRCluster
name|mrCluster
init|=
literal|null
decl_stmt|;
DECL|field|jobtracker
specifier|protected
name|String
name|jobtracker
init|=
literal|null
decl_stmt|;
DECL|field|mrConf
specifier|private
name|JobConf
name|mrConf
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|PolicyProvider
operator|.
name|POLICY_PROVIDER_CONFIG
argument_list|,
name|HadoopPolicyProvider
operator|.
name|class
argument_list|,
name|PolicyProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|mrConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mrConf
argument_list|)
expr_stmt|;
name|jobtracker
operator|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConfigParser ()
specifier|protected
name|TestConfigFileParser
name|getConfigParser
parameter_list|()
block|{
return|return
operator|new
name|TestConfigFileParserMR
argument_list|()
return|;
block|}
DECL|method|getTestFile ()
specifier|protected
name|String
name|getTestFile
parameter_list|()
block|{
return|return
literal|"testMRConf.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|expandCommand (final String cmd)
specifier|protected
name|String
name|expandCommand
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
block|{
name|String
name|expCmd
init|=
name|cmd
decl_stmt|;
name|expCmd
operator|=
name|expCmd
operator|.
name|replaceAll
argument_list|(
literal|"JOBTRACKER"
argument_list|,
name|jobtracker
argument_list|)
expr_stmt|;
name|expCmd
operator|=
name|super
operator|.
name|expandCommand
argument_list|(
name|expCmd
argument_list|)
expr_stmt|;
return|return
name|expCmd
return|;
block|}
annotation|@
name|Override
DECL|method|execute (CLICommand cmd)
specifier|protected
name|Result
name|execute
parameter_list|(
name|CLICommand
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|cmd
operator|.
name|getType
argument_list|()
operator|instanceof
name|CLICommandMRAdmin
condition|)
return|return
operator|new
name|TestMRCLI
operator|.
name|MRCmdExecutor
argument_list|(
name|jobtracker
argument_list|)
operator|.
name|executeCommand
argument_list|(
name|cmd
operator|.
name|getCmd
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|cmd
operator|.
name|getType
argument_list|()
operator|instanceof
name|CLICommandArchive
condition|)
return|return
operator|new
name|TestMRCLI
operator|.
name|ArchiveCmdExecutor
argument_list|(
name|namenode
argument_list|,
name|mrConf
argument_list|)
operator|.
name|executeCommand
argument_list|(
name|cmd
operator|.
name|getCmd
argument_list|()
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|execute
argument_list|(
name|cmd
argument_list|)
return|;
block|}
DECL|class|MRCmdExecutor
specifier|public
specifier|static
class|class
name|MRCmdExecutor
extends|extends
name|CommandExecutor
block|{
DECL|field|jobtracker
specifier|private
name|String
name|jobtracker
init|=
literal|null
decl_stmt|;
DECL|method|MRCmdExecutor (String jobtracker)
specifier|public
name|MRCmdExecutor
parameter_list|(
name|String
name|jobtracker
parameter_list|)
block|{
name|this
operator|.
name|jobtracker
operator|=
name|jobtracker
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (final String cmd)
specifier|protected
name|void
name|execute
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
name|MRAdmin
name|mradmin
init|=
operator|new
name|MRAdmin
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
name|getCommandAsArgs
argument_list|(
name|cmd
argument_list|,
literal|"JOBTRACKER"
argument_list|,
name|jobtracker
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|mradmin
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ArchiveCmdExecutor
specifier|public
specifier|static
class|class
name|ArchiveCmdExecutor
extends|extends
name|CommandExecutor
block|{
DECL|field|namenode
specifier|private
name|String
name|namenode
init|=
literal|null
decl_stmt|;
DECL|field|jobConf
specifier|private
name|JobConf
name|jobConf
init|=
literal|null
decl_stmt|;
DECL|method|ArchiveCmdExecutor (String namenode, JobConf jobConf)
specifier|public
name|ArchiveCmdExecutor
parameter_list|(
name|String
name|namenode
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
block|{
name|this
operator|.
name|namenode
operator|=
name|namenode
expr_stmt|;
name|this
operator|.
name|jobConf
operator|=
name|jobConf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (final String cmd)
specifier|protected
name|void
name|execute
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
name|HadoopArchives
name|archive
init|=
operator|new
name|HadoopArchives
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
name|getCommandAsArgs
argument_list|(
name|cmd
argument_list|,
literal|"NAMENODE"
argument_list|,
name|namenode
argument_list|)
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|archive
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Override
DECL|method|testAll ()
specifier|public
name|void
name|testAll
parameter_list|()
block|{
name|super
operator|.
name|testAll
argument_list|()
expr_stmt|;
block|}
DECL|class|TestConfigFileParserMR
class|class
name|TestConfigFileParserMR
extends|extends
name|CLITestHelper
operator|.
name|TestConfigFileParser
block|{
annotation|@
name|Override
DECL|method|endElement (String uri, String localName, String qName)
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|qName
operator|.
name|equals
argument_list|(
literal|"mr-admin-command"
argument_list|)
condition|)
block|{
if|if
condition|(
name|testCommands
operator|!=
literal|null
condition|)
block|{
name|testCommands
operator|.
name|add
argument_list|(
operator|new
name|CLITestCmdMR
argument_list|(
name|charString
argument_list|,
operator|new
name|CLICommandMRAdmin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cleanupCommands
operator|!=
literal|null
condition|)
block|{
name|cleanupCommands
operator|.
name|add
argument_list|(
operator|new
name|CLITestCmdMR
argument_list|(
name|charString
argument_list|,
operator|new
name|CLICommandMRAdmin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|qName
operator|.
name|equals
argument_list|(
literal|"archive-command"
argument_list|)
condition|)
block|{
if|if
condition|(
name|testCommands
operator|!=
literal|null
condition|)
block|{
name|testCommands
operator|.
name|add
argument_list|(
operator|new
name|CLITestCmdMR
argument_list|(
name|charString
argument_list|,
operator|new
name|CLICommandArchive
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cleanupCommands
operator|!=
literal|null
condition|)
block|{
name|cleanupCommands
operator|.
name|add
argument_list|(
operator|new
name|CLITestCmdMR
argument_list|(
name|charString
argument_list|,
operator|new
name|CLICommandArchive
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

