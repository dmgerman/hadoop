begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authorize
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HDFSPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|NameNodeAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|tools
operator|.
name|DFSAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TestMiniMRWithDFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestServiceLevelAuthorization
specifier|public
class|class
name|TestServiceLevelAuthorization
extends|extends
name|TestCase
block|{
DECL|method|testServiceLevelAuthorization ()
specifier|public
name|void
name|testServiceLevelAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|slaves
init|=
literal|4
decl_stmt|;
comment|// Turn on service-level authorization
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|PolicyProvider
operator|.
name|POLICY_PROVIDER_CONFIG
argument_list|,
name|HadoopPolicyProvider
operator|.
name|class
argument_list|,
name|PolicyProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ServiceAuthorizationManager
operator|.
name|SERVICE_AUTHORIZATION_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Start the mini clusters
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|slaves
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Ensure that the protocols authorized on the name node are only the HDFS protocols.
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|protocolsWithAcls
init|=
name|NameNodeAdapter
operator|.
name|getRpcServer
argument_list|(
name|dfs
operator|.
name|getNameNode
argument_list|()
argument_list|)
operator|.
name|getServiceAuthorizationManager
argument_list|()
operator|.
name|getProtocolsWithAcls
argument_list|()
decl_stmt|;
name|Service
index|[]
name|hdfsServices
init|=
operator|new
name|HDFSPolicyProvider
argument_list|()
operator|.
name|getServices
argument_list|()
decl_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|hdfsServices
control|)
block|{
if|if
condition|(
operator|!
name|protocolsWithAcls
operator|.
name|contains
argument_list|(
name|service
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
name|fail
argument_list|(
literal|"service authorization manager has no entry for protocol "
operator|+
name|service
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hdfsServices
operator|.
name|length
operator|!=
name|protocolsWithAcls
operator|.
name|size
argument_list|()
condition|)
name|fail
argument_list|(
literal|"there should be an entry for every HDFS service in the protocols with ACLs map"
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|JobConf
name|mrConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|slaves
argument_list|,
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mrConf
argument_list|)
expr_stmt|;
comment|// Ensure that the protocols configured for the name node did not change
comment|// when the MR cluster was started.
name|protocolsWithAcls
operator|=
name|NameNodeAdapter
operator|.
name|getRpcServer
argument_list|(
name|dfs
operator|.
name|getNameNode
argument_list|()
argument_list|)
operator|.
name|getServiceAuthorizationManager
argument_list|()
operator|.
name|getProtocolsWithAcls
argument_list|()
expr_stmt|;
name|hdfsServices
operator|=
operator|new
name|HDFSPolicyProvider
argument_list|()
operator|.
name|getServices
argument_list|()
expr_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|hdfsServices
control|)
block|{
if|if
condition|(
operator|!
name|protocolsWithAcls
operator|.
name|contains
argument_list|(
name|service
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
name|fail
argument_list|(
literal|"service authorization manager has no entry for protocol "
operator|+
name|service
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hdfsServices
operator|.
name|length
operator|!=
name|protocolsWithAcls
operator|.
name|size
argument_list|()
condition|)
name|fail
argument_list|(
literal|"there should be an entry for every HDFS service in the protocols with ACLs map"
argument_list|)
expr_stmt|;
comment|// make cleanup inline sothat validation of existence of these directories
comment|// can be done
name|mr
operator|.
name|setInlineCleanupThreads
argument_list|()
expr_stmt|;
comment|// Run examples
name|TestMiniMRWithDFS
operator|.
name|runPI
argument_list|(
name|mr
argument_list|,
name|mr
operator|.
name|createJobConf
argument_list|(
name|mrConf
argument_list|)
argument_list|)
expr_stmt|;
name|TestMiniMRWithDFS
operator|.
name|runWordCount
argument_list|(
name|mr
argument_list|,
name|mr
operator|.
name|createJobConf
argument_list|(
name|mrConf
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|DUMMY_ACL
specifier|private
specifier|static
specifier|final
name|String
name|DUMMY_ACL
init|=
literal|"nouser nogroup"
decl_stmt|;
DECL|field|UNKNOWN_USER
specifier|private
specifier|static
specifier|final
name|String
name|UNKNOWN_USER
init|=
literal|"dev,null"
decl_stmt|;
DECL|method|rewriteHadoopPolicyFile (File policyFile)
specifier|private
name|void
name|rewriteHadoopPolicyFile
parameter_list|(
name|File
name|policyFile
parameter_list|)
throws|throws
name|IOException
block|{
name|FileWriter
name|fos
init|=
operator|new
name|FileWriter
argument_list|(
name|policyFile
argument_list|)
decl_stmt|;
name|PolicyProvider
name|policyProvider
init|=
operator|new
name|HDFSPolicyProvider
argument_list|()
decl_stmt|;
name|fos
operator|.
name|write
argument_list|(
literal|"<configuration>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|policyProvider
operator|.
name|getServices
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|service
operator|.
name|getServiceKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
literal|"*"
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"security.refresh.policy.protocol.acl"
argument_list|)
condition|)
block|{
name|value
operator|=
name|DUMMY_ACL
expr_stmt|;
block|}
name|fos
operator|.
name|write
argument_list|(
literal|"<property><name>"
operator|+
name|key
operator|+
literal|"</name><value>"
operator|+
name|value
operator|+
literal|"</value></property>\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"<property><name>"
operator|+
name|key
operator|+
literal|"</name><value>"
operator|+
name|value
operator|+
literal|"</value></property>\n"
argument_list|)
expr_stmt|;
block|}
name|fos
operator|.
name|write
argument_list|(
literal|"</configuration>\n"
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|refreshPolicy (Configuration conf)
specifier|private
name|void
name|refreshPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|DFSAdmin
name|dfsAdmin
init|=
operator|new
name|DFSAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|dfsAdmin
operator|.
name|refreshServiceAcl
argument_list|()
expr_stmt|;
block|}
DECL|method|testRefresh ()
specifier|public
name|void
name|testRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|slaves
init|=
literal|4
decl_stmt|;
comment|// Turn on service-level authorization
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|PolicyProvider
operator|.
name|POLICY_PROVIDER_CONFIG
argument_list|,
name|HDFSPolicyProvider
operator|.
name|class
argument_list|,
name|PolicyProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ServiceAuthorizationManager
operator|.
name|SERVICE_AUTHORIZATION_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Start the mini dfs cluster
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|slaves
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Refresh the service level authorization policy
name|refreshPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Simulate an 'edit' of hadoop-policy.xml
name|String
name|confDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.extraconf"
argument_list|,
literal|"build/test/extraconf"
argument_list|)
decl_stmt|;
name|String
name|HADOOP_POLICY_FILE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.policy.file"
argument_list|)
decl_stmt|;
name|File
name|policyFile
init|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|HADOOP_POLICY_FILE
argument_list|)
decl_stmt|;
name|String
name|policyFileCopy
init|=
name|HADOOP_POLICY_FILE
operator|+
literal|".orig"
decl_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|policyFile
argument_list|,
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
argument_list|,
comment|// first save original
operator|new
name|Path
argument_list|(
name|confDir
argument_list|,
name|policyFileCopy
argument_list|)
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rewriteHadoopPolicyFile
argument_list|(
comment|// rewrite the file
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|HADOOP_POLICY_FILE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Refresh the service level authorization policy
name|refreshPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Refresh the service level authorization policy once again,
comment|// this time it should fail!
try|try
block|{
comment|// Note: hadoop-policy.xml for tests has
comment|// security.refresh.policy.protocol.acl = ${user.name}
name|UserGroupInformation
name|unknownUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
name|unknownUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|refreshPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Refresh of NameNode's policy file cannot be successful!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|re
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Good, refresh worked... refresh failed with: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|re
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Reset to original hadoop-policy.xml
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|HADOOP_POLICY_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|replaceFile
argument_list|(
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|policyFileCopy
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|HADOOP_POLICY_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

