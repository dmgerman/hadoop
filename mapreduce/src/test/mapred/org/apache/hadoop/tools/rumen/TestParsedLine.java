begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestParsedLine
specifier|public
class|class
name|TestParsedLine
block|{
DECL|field|CHARS_TO_ESCAPE
specifier|static
specifier|final
name|char
index|[]
name|CHARS_TO_ESCAPE
init|=
operator|new
name|char
index|[]
block|{
literal|'='
block|,
literal|'"'
block|,
literal|'.'
block|}
decl_stmt|;
DECL|method|buildLine (String type, String[] kvseq)
name|String
name|buildLine
parameter_list|(
name|String
name|type
parameter_list|,
name|String
index|[]
name|kvseq
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kvseq
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|kvseq
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|kvseq
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|kvseq
index|[
name|i
index|]
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|i
operator|==
name|kvseq
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Incorrect input, expecting value."
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|kvseq
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|kvseq
index|[
name|i
index|]
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
name|CHARS_TO_ESCAPE
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testOneLine (String type, String... kvseq)
name|void
name|testOneLine
parameter_list|(
name|String
name|type
parameter_list|,
name|String
modifier|...
name|kvseq
parameter_list|)
block|{
name|String
name|line
init|=
name|buildLine
argument_list|(
name|type
argument_list|,
name|kvseq
argument_list|)
decl_stmt|;
name|ParsedLine
name|pl
init|=
operator|new
name|ParsedLine
argument_list|(
name|line
argument_list|,
name|Hadoop20JHParser
operator|.
name|internalVersion
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatching type"
argument_list|,
name|type
argument_list|,
name|pl
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kvseq
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|kvseq
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|kvseq
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertEquals
argument_list|(
literal|"Key mismatching for "
operator|+
name|kvseq
index|[
name|i
index|]
argument_list|,
name|kvseq
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|pl
operator|.
name|get
argument_list|(
name|kvseq
index|[
name|i
index|]
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
name|CHARS_TO_ESCAPE
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEscapedQuote ()
specifier|public
name|void
name|testEscapedQuote
parameter_list|()
block|{
name|testOneLine
argument_list|(
literal|"REC"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abc\"de"
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC"
argument_list|,
literal|"B"
argument_list|,
literal|"abcde\""
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"\"abcde"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEqualSign ()
specifier|public
name|void
name|testEqualSign
parameter_list|()
block|{
name|testOneLine
argument_list|(
literal|"REC1"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abc=de"
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC2"
argument_list|,
literal|"B"
argument_list|,
literal|"=abcde"
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC3"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abcde="
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpace ()
specifier|public
name|void
name|testSpace
parameter_list|()
block|{
name|testOneLine
argument_list|(
literal|"REC1"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abc de"
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC2"
argument_list|,
literal|"B"
argument_list|,
literal|" ab c de"
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC3"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abc\t  de  "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBackSlash ()
specifier|public
name|void
name|testBackSlash
parameter_list|()
block|{
name|testOneLine
argument_list|(
literal|"REC1"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abc\\de"
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC2"
argument_list|,
literal|"B"
argument_list|,
literal|"\\ab\\c\\de"
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC3"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abc\\\\de\\"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC4"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abc\\\"de\\\""
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLineDelimiter ()
specifier|public
name|void
name|testLineDelimiter
parameter_list|()
block|{
name|testOneLine
argument_list|(
literal|"REC1"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abc.de"
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC2"
argument_list|,
literal|"B"
argument_list|,
literal|".ab.de"
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC3"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abc.de."
argument_list|)
expr_stmt|;
name|testOneLine
argument_list|(
literal|"REC4"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"B"
argument_list|,
literal|"abc.de"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleLines ()
specifier|public
name|void
name|testMultipleLines
parameter_list|()
block|{
name|testOneLine
argument_list|(
literal|"REC1"
argument_list|,
literal|"A"
argument_list|,
literal|"x"
argument_list|,
literal|"\n"
argument_list|,
literal|"B"
argument_list|,
literal|"abc.de"
argument_list|,
literal|"\n"
argument_list|,
literal|"C"
argument_list|,
literal|"f"
argument_list|,
literal|"\n"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

