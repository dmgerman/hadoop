begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_class
DECL|class|ConcatenatedInputFilesDemuxer
specifier|public
class|class
name|ConcatenatedInputFilesDemuxer
implements|implements
name|InputDemuxer
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|input
specifier|private
name|DelimitedInputStream
name|input
decl_stmt|;
DECL|field|knownNextFileName
specifier|private
name|String
name|knownNextFileName
init|=
literal|null
decl_stmt|;
DECL|field|MAXIMUM_HEADER_LINE_LENGTH
specifier|static
specifier|private
name|int
name|MAXIMUM_HEADER_LINE_LENGTH
init|=
literal|500
decl_stmt|;
annotation|@
name|Override
DECL|method|bindTo (Path path, Configuration conf)
specifier|public
name|void
name|bindTo
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|underlyingInput
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
comment|// re-binding before the previous one was consumed.
name|close
argument_list|()
expr_stmt|;
block|}
name|name
operator|=
name|path
operator|.
name|getName
argument_list|()
expr_stmt|;
name|underlyingInput
operator|=
operator|new
name|PossiblyDecompressedInputStream
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|input
operator|=
operator|new
name|DelimitedInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|underlyingInput
argument_list|)
argument_list|,
literal|"\f!!FILE="
argument_list|,
literal|"!!\n"
argument_list|)
expr_stmt|;
name|knownNextFileName
operator|=
name|input
operator|.
name|nextFileName
argument_list|()
expr_stmt|;
if|if
condition|(
name|knownNextFileName
operator|==
literal|null
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
comment|/*      * We handle files in specialized formats by trying their demuxers first,      * not by failing here.      */
return|return;
block|}
annotation|@
name|Override
DECL|method|getNext ()
specifier|public
name|Pair
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
name|getNext
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|knownNextFileName
operator|!=
literal|null
condition|)
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
name|result
init|=
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
argument_list|(
name|knownNextFileName
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|knownNextFileName
operator|=
literal|null
expr_stmt|;
return|return
name|result
return|;
block|}
name|String
name|nextFileName
init|=
name|input
operator|.
name|nextFileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextFileName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
argument_list|(
name|nextFileName
argument_list|,
name|input
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A simple wrapper class to make any input stream delimited. It has an extra    * method, getName.    *     * The input stream should have lines that look like    *<marker><filename><endmarker> . The text<marker> should not occur    * elsewhere in the file. The text<endmarker> should not occur in a file    * name.    */
DECL|class|DelimitedInputStream
specifier|static
class|class
name|DelimitedInputStream
extends|extends
name|InputStream
block|{
DECL|field|input
specifier|private
name|InputStream
name|input
decl_stmt|;
DECL|field|endSeen
specifier|private
name|boolean
name|endSeen
init|=
literal|false
decl_stmt|;
DECL|field|fileMarker
specifier|private
specifier|final
name|String
name|fileMarker
decl_stmt|;
DECL|field|markerBytes
specifier|private
specifier|final
name|byte
index|[]
name|markerBytes
decl_stmt|;
DECL|field|fileMarkerBuffer
specifier|private
specifier|final
name|byte
index|[]
name|fileMarkerBuffer
decl_stmt|;
DECL|field|fileEndMarker
specifier|private
specifier|final
name|String
name|fileEndMarker
decl_stmt|;
DECL|field|endMarkerBytes
specifier|private
specifier|final
name|byte
index|[]
name|endMarkerBytes
decl_stmt|;
DECL|field|fileEndMarkerBuffer
specifier|private
specifier|final
name|byte
index|[]
name|fileEndMarkerBuffer
decl_stmt|;
comment|/**      * Constructor.      *       * @param input      */
DECL|method|DelimitedInputStream (InputStream input, String fileMarker, String fileEndMarker)
specifier|public
name|DelimitedInputStream
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|fileMarker
parameter_list|,
name|String
name|fileEndMarker
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|input
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|this
operator|.
name|input
operator|.
name|mark
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileMarker
operator|=
name|fileMarker
expr_stmt|;
name|this
operator|.
name|markerBytes
operator|=
name|this
operator|.
name|fileMarker
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileMarkerBuffer
operator|=
operator|new
name|byte
index|[
name|this
operator|.
name|markerBytes
operator|.
name|length
index|]
expr_stmt|;
name|this
operator|.
name|fileEndMarker
operator|=
name|fileEndMarker
expr_stmt|;
name|this
operator|.
name|endMarkerBytes
operator|=
name|this
operator|.
name|fileEndMarker
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileEndMarkerBuffer
operator|=
operator|new
name|byte
index|[
name|this
operator|.
name|endMarkerBytes
operator|.
name|length
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|endSeen
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|input
operator|.
name|mark
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|endSeen
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
if|if
condition|(
name|result
operator|==
name|markerBytes
index|[
literal|0
index|]
condition|)
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// this might be a marker line
name|int
name|markerReadResult
init|=
name|input
operator|.
name|read
argument_list|(
name|fileMarkerBuffer
argument_list|,
literal|0
argument_list|,
name|fileMarkerBuffer
operator|.
name|length
argument_list|)
decl_stmt|;
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|markerReadResult
operator|<
name|fileMarkerBuffer
operator|.
name|length
operator|||
operator|!
name|fileMarker
operator|.
name|equals
argument_list|(
operator|new
name|String
argument_list|(
name|fileMarkerBuffer
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|input
operator|.
name|read
argument_list|()
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.io.InputStream#read(byte[], int, int)      *       * This does SLIGHTLY THE WRONG THING.      *       * If we run off the end of the segment then the input buffer will be      * dirtied beyond the point where we claim to have read. If this turns out      * to be a problem, save that data somewhere and restore it if needed.      */
annotation|@
name|Override
DECL|method|read (byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|endSeen
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|input
operator|.
name|mark
argument_list|(
name|length
operator|+
name|markerBytes
operator|.
name|length
operator|+
literal|10
argument_list|)
expr_stmt|;
name|int
name|dataSeen
init|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
name|extraReadBuffer
init|=
literal|null
decl_stmt|;
name|int
name|extraActualRead
init|=
operator|-
literal|1
decl_stmt|;
comment|// search for an instance of a file marker
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|offset
operator|+
name|dataSeen
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|==
name|markerBytes
index|[
literal|0
index|]
condition|)
block|{
name|boolean
name|mismatch
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|Math
operator|.
name|min
argument_list|(
name|markerBytes
operator|.
name|length
argument_list|,
name|offset
operator|+
name|dataSeen
operator|-
name|i
argument_list|)
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|i
operator|+
name|j
index|]
operator|!=
name|markerBytes
index|[
name|j
index|]
condition|)
block|{
name|mismatch
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|mismatch
condition|)
block|{
comment|// see if we have only a prefix of the markerBytes
name|int
name|uncheckedMarkerCharCount
init|=
name|markerBytes
operator|.
name|length
operator|-
operator|(
name|offset
operator|+
name|dataSeen
operator|-
name|i
operator|)
decl_stmt|;
if|if
condition|(
name|uncheckedMarkerCharCount
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|extraReadBuffer
operator|==
literal|null
condition|)
block|{
name|extraReadBuffer
operator|=
operator|new
name|byte
index|[
name|markerBytes
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
name|extraActualRead
operator|=
name|input
operator|.
name|read
argument_list|(
name|extraReadBuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extraActualRead
operator|<
name|uncheckedMarkerCharCount
condition|)
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|uncheckedMarkerCharCount
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|extraReadBuffer
index|[
name|j
index|]
operator|!=
name|markerBytes
index|[
name|markerBytes
operator|.
name|length
operator|-
name|uncheckedMarkerCharCount
operator|+
name|j
index|]
condition|)
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
block|}
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|offset
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|result
init|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|i
operator|-
name|offset
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
return|return
name|dataSeen
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buffer)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|endSeen
condition|)
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|nextFileName ()
name|String
name|nextFileName
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|nextFileName
argument_list|(
name|MAXIMUM_HEADER_LINE_LENGTH
argument_list|)
return|;
block|}
DECL|method|nextFileName (int bufferSize)
specifier|private
name|String
name|nextFileName
parameter_list|(
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the line can't contain a newline and must contain a form feed
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|input
operator|.
name|mark
argument_list|(
name|bufferSize
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|actualRead
init|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|int
name|mostRecentRead
init|=
name|actualRead
decl_stmt|;
while|while
condition|(
name|actualRead
argument_list|<
name|bufferSize
operator|&&
name|mostRecentRead
argument_list|>
literal|0
condition|)
block|{
name|mostRecentRead
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|actualRead
argument_list|,
name|bufferSize
operator|-
name|actualRead
argument_list|)
expr_stmt|;
if|if
condition|(
name|mostRecentRead
operator|>
literal|0
condition|)
block|{
name|actualRead
operator|+=
name|mostRecentRead
expr_stmt|;
block|}
block|}
if|if
condition|(
name|actualRead
operator|<
name|markerBytes
operator|.
name|length
condition|)
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|markerBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|markerBytes
index|[
name|i
index|]
operator|!=
name|buffer
index|[
name|i
index|]
condition|)
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|markerBytes
operator|.
name|length
init|;
name|i
operator|<
name|actualRead
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|==
name|endMarkerBytes
index|[
literal|0
index|]
condition|)
block|{
comment|// gather the file name
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// burn the marker
if|if
condition|(
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|markerBytes
operator|.
name|length
argument_list|)
operator|<
name|markerBytes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't reread bytes I've read before."
argument_list|)
throw|;
block|}
comment|// get the file name
if|if
condition|(
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|i
operator|-
name|markerBytes
operator|.
name|length
argument_list|)
operator|<
name|i
operator|-
name|markerBytes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't reread bytes I've read before."
argument_list|)
throw|;
block|}
comment|// burn the two exclamation points and the newline
if|if
condition|(
name|input
operator|.
name|read
argument_list|(
name|fileEndMarkerBuffer
argument_list|)
operator|<
name|fileEndMarkerBuffer
operator|.
name|length
condition|)
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|endMarkerBytes
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|endMarkerBytes
index|[
name|j
index|]
operator|!=
name|fileEndMarkerBuffer
index|[
name|j
index|]
condition|)
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|i
operator|-
name|markerBytes
operator|.
name|length
argument_list|)
return|;
block|}
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|==
literal|'\n'
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// we ran off the end. Was the buffer too short, or is this all there was?
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|actualRead
operator|<
name|bufferSize
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|nextFileName
argument_list|(
name|bufferSize
operator|*
literal|2
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

