begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestConcurrentRead
specifier|public
class|class
name|TestConcurrentRead
block|{
DECL|field|cachedTrace
specifier|static
specifier|final
name|List
argument_list|<
name|LoggedJob
argument_list|>
name|cachedTrace
init|=
operator|new
name|ArrayList
argument_list|<
name|LoggedJob
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|traceFile
specifier|static
specifier|final
name|String
name|traceFile
init|=
literal|"rumen/small-trace-test/job-tracker-logs-trace-output.gz"
decl_stmt|;
DECL|field|conf
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|lfs
specifier|static
name|FileSystem
name|lfs
decl_stmt|;
DECL|field|path
specifier|static
name|Path
name|path
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|globalSetUp ()
specifier|static
specifier|public
name|void
name|globalSetUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|lfs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
name|traceFile
argument_list|)
expr_stmt|;
name|JobTraceReader
name|reader
init|=
operator|new
name|JobTraceReader
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|LoggedJob
name|job
decl_stmt|;
while|while
condition|(
operator|(
name|job
operator|=
name|reader
operator|.
name|getNext
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|cachedTrace
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readAndCompare ()
name|void
name|readAndCompare
parameter_list|()
throws|throws
name|IOException
block|{
name|JobTraceReader
name|reader
init|=
operator|new
name|JobTraceReader
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|LoggedJob
argument_list|>
name|it
init|=
name|cachedTrace
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|LoggedJob
name|jobExpected
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LoggedJob
name|jobRead
init|=
name|reader
operator|.
name|getNext
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|jobRead
argument_list|)
expr_stmt|;
try|try
block|{
name|jobRead
operator|.
name|deepCompare
argument_list|(
name|jobExpected
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeepInequalityException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNull
argument_list|(
name|reader
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|TestThread
class|class
name|TestThread
extends|extends
name|Thread
block|{
DECL|field|repeat
specifier|final
name|int
name|repeat
decl_stmt|;
DECL|field|startSignal
DECL|field|doneSignal
specifier|final
name|CountDownLatch
name|startSignal
decl_stmt|,
name|doneSignal
decl_stmt|;
DECL|field|errors
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|errors
decl_stmt|;
DECL|method|TestThread (int id, int repeat, CountDownLatch startSignal, CountDownLatch doneSignal, Map<String, Throwable> errors)
name|TestThread
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|repeat
parameter_list|,
name|CountDownLatch
name|startSignal
parameter_list|,
name|CountDownLatch
name|doneSignal
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|errors
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"TestThread-%d"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|repeat
operator|=
name|repeat
expr_stmt|;
name|this
operator|.
name|startSignal
operator|=
name|startSignal
expr_stmt|;
name|this
operator|.
name|doneSignal
operator|=
name|doneSignal
expr_stmt|;
name|this
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeat
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|readAndCompare
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|errors
operator|.
name|put
argument_list|(
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testConcurrentRead ()
specifier|public
name|void
name|testConcurrentRead
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|nThr
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.rumen.concurrent-read.threads"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|repeat
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.rumen.concurrent-read.repeat"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|doneSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nThr
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|errors
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nThr
condition|;
operator|++
name|i
control|)
block|{
operator|new
name|TestThread
argument_list|(
name|i
argument_list|,
name|repeat
argument_list|,
name|startSignal
argument_list|,
name|doneSignal
argument_list|,
name|errors
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|startSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|doneSignal
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|e
range|:
name|errors
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:\n%s\n"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

