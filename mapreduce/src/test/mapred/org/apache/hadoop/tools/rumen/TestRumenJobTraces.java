begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TestNoJobSetupCleanup
operator|.
name|MyOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|HistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TraceBuilder
operator|.
name|MyOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestRumenJobTraces
specifier|public
class|class
name|TestRumenJobTraces
block|{
annotation|@
name|Test
DECL|method|testSmallTrace ()
specifier|public
name|void
name|testSmallTrace
parameter_list|()
throws|throws
name|Exception
block|{
name|performSingleTest
argument_list|(
literal|"sample-job-tracker-logs.gz"
argument_list|,
literal|"job-tracker-logs-topology-output"
argument_list|,
literal|"job-tracker-logs-trace-output.gz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTruncatedTask ()
specifier|public
name|void
name|testTruncatedTask
parameter_list|()
throws|throws
name|Exception
block|{
name|performSingleTest
argument_list|(
literal|"truncated-job-tracker-log"
argument_list|,
literal|"truncated-topology-output"
argument_list|,
literal|"truncated-trace-output"
argument_list|)
expr_stmt|;
block|}
DECL|method|performSingleTest (String jtLogName, String goldTopology, String goldTrace)
specifier|private
name|void
name|performSingleTest
parameter_list|(
name|String
name|jtLogName
parameter_list|,
name|String
name|goldTopology
parameter_list|,
name|String
name|goldTrace
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"rumen/small-trace-test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestRumenJobTraces"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|topologyFile
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
name|jtLogName
operator|+
literal|"-topology.json"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|traceFile
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
name|jtLogName
operator|+
literal|"-trace.json"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|inputFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputFile
argument_list|,
name|jtLogName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"topology result file = "
operator|+
name|topologyFile
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"trace result file = "
operator|+
name|traceFile
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|6
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-v1"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"-write-topology"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
name|topologyFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
literal|"-write-job-trace"
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
name|traceFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
name|inputFile
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|topologyGoldFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputFile
argument_list|,
name|goldTopology
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|traceGoldFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputFile
argument_list|,
name|goldTrace
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|HadoopLogsAnalyzer
name|analyzer
init|=
operator|new
name|HadoopLogsAnalyzer
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|analyzer
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Non-zero exit"
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|TestRumenJobTraces
operator|.
expr|<
name|LoggedNetworkTopology
operator|>
name|jsonFileMatchesGold
argument_list|(
name|conf
argument_list|,
name|topologyFile
argument_list|,
name|topologyGoldFile
argument_list|,
name|LoggedNetworkTopology
operator|.
name|class
argument_list|,
literal|"topology"
argument_list|)
expr_stmt|;
name|TestRumenJobTraces
operator|.
expr|<
name|LoggedJob
operator|>
name|jsonFileMatchesGold
argument_list|(
name|conf
argument_list|,
name|traceFile
argument_list|,
name|traceGoldFile
argument_list|,
name|LoggedJob
operator|.
name|class
argument_list|,
literal|"trace"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRumenViaDispatch ()
specifier|public
name|void
name|testRumenViaDispatch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputPath
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"rumen/small-trace-test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestRumenViaDispatch"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|topologyPath
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"dispatch-topology.json"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tracePath
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"dispatch-trace.json"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|rootInputPath
argument_list|,
literal|"dispatch-sample-v20-jt-log.gz"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"topology result file = "
operator|+
name|topologyPath
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testRumenViaDispatch() trace result file = "
operator|+
name|tracePath
argument_list|)
expr_stmt|;
name|String
name|demuxerClassName
init|=
name|ConcatenatedInputFilesDemuxer
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-demuxer"
block|,
name|demuxerClassName
block|,
name|tracePath
operator|.
name|toString
argument_list|()
block|,
name|topologyPath
operator|.
name|toString
argument_list|()
block|,
name|inputPath
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
specifier|final
name|Path
name|topologyGoldFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputPath
argument_list|,
literal|"dispatch-topology-output.json.gz"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|traceGoldFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputPath
argument_list|,
literal|"dispatch-trace-output.json.gz"
argument_list|)
decl_stmt|;
name|Tool
name|analyzer
init|=
operator|new
name|TraceBuilder
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|analyzer
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Non-zero exit"
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|TestRumenJobTraces
operator|.
expr|<
name|LoggedNetworkTopology
operator|>
name|jsonFileMatchesGold
argument_list|(
name|conf
argument_list|,
name|topologyPath
argument_list|,
name|topologyGoldFile
argument_list|,
name|LoggedNetworkTopology
operator|.
name|class
argument_list|,
literal|"topology"
argument_list|)
expr_stmt|;
name|TestRumenJobTraces
operator|.
expr|<
name|LoggedJob
operator|>
name|jsonFileMatchesGold
argument_list|(
name|conf
argument_list|,
name|tracePath
argument_list|,
name|traceGoldFile
argument_list|,
name|LoggedJob
operator|.
name|class
argument_list|,
literal|"trace"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBracketedCounters ()
specifier|public
name|void
name|testBracketedCounters
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputPath
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"rumen/small-trace-test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestBracketedCounters"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|topologyPath
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"dispatch-topology.json"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tracePath
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"dispatch-trace.json"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|rootInputPath
argument_list|,
literal|"counters-format-test-logs"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"topology result file = "
operator|+
name|topologyPath
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testBracketedCounters() trace result file = "
operator|+
name|tracePath
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|goldPath
init|=
operator|new
name|Path
argument_list|(
name|rootInputPath
argument_list|,
literal|"counters-test-trace.json.gz"
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|tracePath
operator|.
name|toString
argument_list|()
block|,
name|topologyPath
operator|.
name|toString
argument_list|()
block|,
name|inputPath
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|Tool
name|analyzer
init|=
operator|new
name|TraceBuilder
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|analyzer
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Non-zero exit"
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|TestRumenJobTraces
operator|.
expr|<
name|LoggedJob
operator|>
name|jsonFileMatchesGold
argument_list|(
name|conf
argument_list|,
name|tracePath
argument_list|,
name|goldPath
argument_list|,
name|LoggedJob
operator|.
name|class
argument_list|,
literal|"trace"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHadoop20JHParser ()
specifier|public
name|void
name|testHadoop20JHParser
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputPath
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"rumen/small-trace-test"
argument_list|)
decl_stmt|;
comment|// history file to be parsed to get events
specifier|final
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|rootInputPath
argument_list|,
literal|"v20-single-input-log.gz"
argument_list|)
decl_stmt|;
name|RewindableInputStream
name|ris
init|=
name|getRewindableInputStream
argument_list|(
name|inputPath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ris
argument_list|)
expr_stmt|;
name|Hadoop20JHParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|"Hadoop20JHParser can't parse the test file "
operator|+
name|inputPath
argument_list|,
literal|true
argument_list|,
name|Hadoop20JHParser
operator|.
name|canParse
argument_list|(
name|ris
argument_list|)
argument_list|)
expr_stmt|;
name|ris
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|parser
operator|=
operator|new
name|Hadoop20JHParser
argument_list|(
name|ris
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|seenEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|150
argument_list|)
decl_stmt|;
name|getHistoryEvents
argument_list|(
name|parser
argument_list|,
name|seenEvents
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// get events into seenEvents
comment|// Validate the events seen by history parser from
comment|// history file v20-single-input-log.gz
name|validateSeenHistoryEvents
argument_list|(
name|seenEvents
argument_list|,
name|goldLines
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|ris
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests if {@link TraceBuilder} can correctly identify and parse jobhistory    * filenames. The testcase checks if {@link TraceBuilder}    *   - correctly identifies a jobhistory filename without suffix    *   - correctly parses a jobhistory filename without suffix to extract out     *     the jobid    *   - correctly identifies a jobhistory filename with suffix    *   - correctly parses a jobhistory filename with suffix to extract out the     *     jobid    *   - correctly identifies a job-configuration filename stored along with the     *     jobhistory files    */
annotation|@
name|Test
DECL|method|testJobHistoryFilenameParsing ()
specifier|public
name|void
name|testJobHistoryFilenameParsing
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"test"
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
name|jid
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if jobhistory filename are detected properly
name|Path
name|jhFilename
init|=
name|JobHistory
operator|.
name|getJobHistoryFile
argument_list|(
name|rootInputDir
argument_list|,
name|jid
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|JobID
name|extractedJID
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|TraceBuilder
operator|.
name|extractJobID
argument_list|(
name|jhFilename
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TraceBuilder failed to parse the current JH filename"
argument_list|,
name|jid
argument_list|,
name|extractedJID
argument_list|)
expr_stmt|;
comment|// test jobhistory filename with old/stale file suffix
name|jhFilename
operator|=
name|jhFilename
operator|.
name|suffix
argument_list|(
name|JobHistory
operator|.
name|getOldFileSuffix
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|extractedJID
operator|=
name|JobID
operator|.
name|forName
argument_list|(
name|TraceBuilder
operator|.
name|extractJobID
argument_list|(
name|jhFilename
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TraceBuilder failed to parse the current JH filename"
operator|+
literal|"(old-suffix)"
argument_list|,
name|jid
argument_list|,
name|extractedJID
argument_list|)
expr_stmt|;
comment|// Check if the conf filename in jobhistory are detected properly
name|Path
name|jhConfFilename
init|=
name|JobHistory
operator|.
name|getConfFile
argument_list|(
name|rootInputDir
argument_list|,
name|jid
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"TraceBuilder failed to parse the current JH conf filename"
argument_list|,
name|TraceBuilder
operator|.
name|isJobConfXml
argument_list|(
name|jhConfFilename
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// test jobhistory conf filename with old/stale file suffix
name|jhConfFilename
operator|=
name|jhConfFilename
operator|.
name|suffix
argument_list|(
name|JobHistory
operator|.
name|getOldFileSuffix
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"TraceBuilder failed to parse the current JH conf filename"
operator|+
literal|" (old suffix)"
argument_list|,
name|TraceBuilder
operator|.
name|isJobConfXml
argument_list|(
name|jhConfFilename
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if processing of input arguments is as expected by passing globbed    * input path    *<li> without -recursive option and    *<li> with -recursive option.    */
annotation|@
name|Test
DECL|method|testProcessInputArgument ()
specifier|public
name|void
name|testProcessInputArgument
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// define the test's root temporary directory
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
comment|// define the test's root input directory
name|Path
name|testRootInputDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestProcessInputArgument"
argument_list|)
decl_stmt|;
comment|// define the nested input directory
name|Path
name|nestedInputDir
init|=
operator|new
name|Path
argument_list|(
name|testRootInputDir
argument_list|,
literal|"1/2/3/4"
argument_list|)
decl_stmt|;
comment|// define the globbed version of the nested input directory
name|Path
name|globbedInputNestedDir
init|=
name|lfs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootInputDir
argument_list|,
literal|"*/*/*/*/*"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|nestedInputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|recursiveInputPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nonRecursiveInputPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Create input files under the given path with multiple levels of
comment|// sub directories
name|createHistoryLogsHierarchy
argument_list|(
name|nestedInputDir
argument_list|,
name|lfs
argument_list|,
name|recursiveInputPaths
argument_list|,
name|nonRecursiveInputPaths
argument_list|)
expr_stmt|;
comment|// Check the case of globbed input path and without -recursive option
name|List
argument_list|<
name|Path
argument_list|>
name|inputs
init|=
name|MyOptions
operator|.
name|processInputArgument
argument_list|(
name|globbedInputNestedDir
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|validateHistoryLogPaths
argument_list|(
name|inputs
argument_list|,
name|nonRecursiveInputPaths
argument_list|)
expr_stmt|;
comment|// Check the case of globbed input path and with -recursive option
name|inputs
operator|=
name|MyOptions
operator|.
name|processInputArgument
argument_list|(
name|globbedInputNestedDir
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validateHistoryLogPaths
argument_list|(
name|inputs
argument_list|,
name|recursiveInputPaths
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|testRootInputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate if the input history log paths are as expected.    * @param inputs  the resultant input paths to be validated    * @param expectedHistoryFileNames  the expected input history logs    * @throws IOException    */
DECL|method|validateHistoryLogPaths (List<Path> inputs, List<String> expectedHistoryFileNames)
specifier|private
name|void
name|validateHistoryLogPaths
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|inputs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|expectedHistoryFileNames
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nExpected history files are:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|historyFile
range|:
name|expectedHistoryFileNames
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|historyFile
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nResultant history files are:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|historyLogs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|inputs
control|)
block|{
name|historyLogs
operator|.
name|add
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of history logs found is different from the expected."
argument_list|,
name|expectedHistoryFileNames
operator|.
name|size
argument_list|()
argument_list|,
name|inputs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify if all the history logs are expected ones and they are in the
comment|// expected order
name|assertTrue
argument_list|(
literal|"Some of the history log files do not match the expected."
argument_list|,
name|historyLogs
operator|.
name|equals
argument_list|(
name|expectedHistoryFileNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create history logs under the given path with multiple levels of    * sub directories as shown below.    *<br>    * Create a file, an empty subdirectory and a nonempty subdirectory    *&lt;historyDir&gt; under the given input path.    *<br>    * The subdirectory&lt;historyDir&gt; contains the following dir structure:    *<br>    *<br>&lt;historyDir&gt;/historyFile1.txt    *<br>&lt;historyDir&gt;/historyFile1.gz    *<br>&lt;historyDir&gt;/subDir1/historyFile2.txt    *<br>&lt;historyDir&gt;/subDir1/historyFile2.gz    *<br>&lt;historyDir&gt;/subDir2/historyFile3.txt    *<br>&lt;historyDir&gt;/subDir2/historyFile3.gz    *<br>&lt;historyDir&gt;/subDir1/subDir11/historyFile4.txt    *<br>&lt;historyDir&gt;/subDir1/subDir11/historyFile4.gz    *<br>&lt;historyDir&gt;/subDir2/subDir21/    *<br>    * Create the lists of input paths that should be processed by TraceBuilder    * for recursive case and non-recursive case.    * @param nestedInputDir the input history logs directory where history files    *                       with nested subdirectories are created    * @param fs         FileSystem of the input paths    * @param recursiveInputPaths input paths for recursive case    * @param nonRecursiveInputPaths input paths for non-recursive case    * @throws IOException    */
DECL|method|createHistoryLogsHierarchy (Path nestedInputDir, FileSystem fs, List<String> recursiveInputPaths, List<String> nonRecursiveInputPaths)
specifier|private
name|void
name|createHistoryLogsHierarchy
parameter_list|(
name|Path
name|nestedInputDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|recursiveInputPaths
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nonRecursiveInputPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
comment|// define a file in the nested test input directory
name|Path
name|inputPath1
init|=
operator|new
name|Path
argument_list|(
name|nestedInputDir
argument_list|,
literal|"historyFile.txt"
argument_list|)
decl_stmt|;
comment|// define an empty sub-folder in the nested test input directory
name|Path
name|emptyDir
init|=
operator|new
name|Path
argument_list|(
name|nestedInputDir
argument_list|,
literal|"emptyDir"
argument_list|)
decl_stmt|;
comment|// define a nonempty sub-folder in the nested test input directory
name|Path
name|historyDir
init|=
operator|new
name|Path
argument_list|(
name|nestedInputDir
argument_list|,
literal|"historyDir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|nestedInputDir
argument_list|)
expr_stmt|;
comment|// Create an empty input file
name|fs
operator|.
name|createNewFile
argument_list|(
name|inputPath1
argument_list|)
expr_stmt|;
comment|// Create empty subdir
name|fs
operator|.
name|mkdirs
argument_list|(
name|emptyDir
argument_list|)
expr_stmt|;
comment|// let us not create any files under this dir
name|fs
operator|.
name|mkdirs
argument_list|(
name|historyDir
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|historyDir
argument_list|)
expr_stmt|;
name|Path
name|subDir1
init|=
operator|new
name|Path
argument_list|(
name|historyDir
argument_list|,
literal|"subDir1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subDir1
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|subDir1
argument_list|)
expr_stmt|;
name|Path
name|subDir2
init|=
operator|new
name|Path
argument_list|(
name|historyDir
argument_list|,
literal|"subDir2"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subDir2
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|subDir2
argument_list|)
expr_stmt|;
name|Path
name|subDir11
init|=
operator|new
name|Path
argument_list|(
name|subDir1
argument_list|,
literal|"subDir11"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subDir11
argument_list|)
expr_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|subDir11
argument_list|)
expr_stmt|;
name|Path
name|subDir21
init|=
operator|new
name|Path
argument_list|(
name|subDir2
argument_list|,
literal|"subDir21"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subDir21
argument_list|)
expr_stmt|;
comment|// let us not create any files under this dir
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|dir
range|:
name|dirs
control|)
block|{
name|i
operator|++
expr_stmt|;
name|Path
name|gzPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"historyFile"
operator|+
name|i
operator|+
literal|".gz"
argument_list|)
decl_stmt|;
name|Path
name|txtPath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"historyFile"
operator|+
name|i
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|txtPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|gzPath
argument_list|)
expr_stmt|;
name|recursiveInputPaths
operator|.
name|add
argument_list|(
name|gzPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|recursiveInputPaths
operator|.
name|add
argument_list|(
name|txtPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|nonRecursiveInputPaths
operator|.
name|add
argument_list|(
name|gzPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|nonRecursiveInputPaths
operator|.
name|add
argument_list|(
name|txtPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|recursiveInputPaths
operator|.
name|add
argument_list|(
name|inputPath1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|nonRecursiveInputPaths
operator|.
name|add
argument_list|(
name|inputPath1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if {@link CurrentJHParser} can read events from current JH files.    */
annotation|@
name|Test
DECL|method|testCurrentJHParser ()
specifier|public
name|void
name|testCurrentJHParser
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestCurrentJHParser"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Run a MR job
comment|// create a MR cluster
name|conf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_MAP_SLOTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_REDUCE_SLOTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniMRCluster
name|mrCluster
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
comment|// run a job
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"output"
argument_list|)
decl_stmt|;
name|JobHistoryParser
name|parser
init|=
literal|null
decl_stmt|;
name|RewindableInputStream
name|ris
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|seenEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|15
argument_list|)
decl_stmt|;
try|try
block|{
name|JobConf
name|jConf
init|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
comment|// construct a job with 1 map and 1 reduce task.
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|jConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// disable setup/cleanup
name|job
operator|.
name|setJobSetupCleanupNeeded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// set the output format to take care of the _temporary folder
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|MyOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// wait for the job to complete
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|JobID
name|id
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|jConf
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|jc
operator|.
name|getAllJobs
argument_list|()
index|[
literal|0
index|]
operator|.
name|getUsername
argument_list|()
decl_stmt|;
comment|// get the jobhistory filepath
name|Path
name|jhPath
init|=
operator|new
name|Path
argument_list|(
name|mrCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJobHistoryDir
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|inputPath
init|=
name|JobHistory
operator|.
name|getJobHistoryFile
argument_list|(
name|jhPath
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// wait for 10 secs for the jobhistory file to move into the done folder
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|lfs
operator|.
name|exists
argument_list|(
name|inputPath
argument_list|)
condition|)
block|{
break|break;
block|}
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Missing job history file"
argument_list|,
name|lfs
operator|.
name|exists
argument_list|(
name|inputPath
argument_list|)
argument_list|)
expr_stmt|;
name|ris
operator|=
name|getRewindableInputStream
argument_list|(
name|inputPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Test if the JobHistoryParserFactory can detect the parser correctly
name|parser
operator|=
name|JobHistoryParserFactory
operator|.
name|getParser
argument_list|(
name|ris
argument_list|)
expr_stmt|;
comment|// create a job builder
name|JobBuilder
name|builder
init|=
operator|new
name|JobBuilder
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// get events into seenEvents and also process them using builder
name|getHistoryEvents
argument_list|(
name|parser
argument_list|,
name|seenEvents
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// Check against the gold standard
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCurrentJHParser validating using gold std "
argument_list|)
expr_stmt|;
comment|// The list of history events expected when parsing the above job's
comment|// history log file
name|String
index|[]
name|goldLinesExpected
init|=
operator|new
name|String
index|[]
block|{
name|JSE
block|,
name|JPCE
block|,
name|JIE
block|,
name|JSCE
block|,
name|TSE
block|,
name|ASE
block|,
name|MFE
block|,
name|TFE
block|,
name|TSE
block|,
name|ASE
block|,
name|RFE
block|,
name|TFE
block|,
name|JFE
block|}
decl_stmt|;
name|validateSeenHistoryEvents
argument_list|(
name|seenEvents
argument_list|,
name|goldLinesExpected
argument_list|)
expr_stmt|;
comment|// validate resource usage metrics
comment|//  get the job counters
name|Counters
name|counters
init|=
name|job
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
index|[
literal|0
index|]
operator|.
name|getTaskCounters
argument_list|()
decl_stmt|;
comment|//  get the logged job
name|LoggedJob
name|loggedJob
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//  get the logged attempts
name|LoggedTaskAttempt
name|attempt
init|=
name|loggedJob
operator|.
name|getMapTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttempts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//  get the resource usage metrics
name|ResourceUsageMetrics
name|metrics
init|=
name|attempt
operator|.
name|getResourceUsageMetrics
argument_list|()
decl_stmt|;
comment|//  check with the actual values
name|testResourceUsageMetricViaDeepCompare
argument_list|(
name|metrics
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|CPU_MILLISECONDS
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|VIRTUAL_MEMORY_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|PHYSICAL_MEMORY_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|COMMITTED_HEAP_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// stop the MR cluster
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|ris
operator|!=
literal|null
condition|)
block|{
name|ris
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// cleanup the filesystem
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobConfigurationParser ()
specifier|public
name|void
name|testJobConfigurationParser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Validate parser with old mapred config properties from
comment|// sample-conf-file.xml
name|String
index|[]
name|oldProps1
init|=
block|{
literal|"mapred.job.queue.name"
block|,
literal|"mapred.job.name"
block|,
literal|"mapred.child.java.opts"
block|}
decl_stmt|;
name|validateJobConfParser
argument_list|(
literal|"sample-conf.file.xml"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateJobConfParser
argument_list|(
literal|"sample-conf.file.new.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|validateJobConfParser (String confFile, boolean newConfig)
specifier|private
name|void
name|validateJobConfParser
parameter_list|(
name|String
name|confFile
parameter_list|,
name|boolean
name|newConfig
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputPath
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"rumen/small-trace-test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
name|rootInputPath
argument_list|,
name|confFile
argument_list|)
decl_stmt|;
name|InputStream
name|inputConfStream
init|=
operator|new
name|PossiblyDecompressedInputStream
argument_list|(
name|inputPath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Properties
name|props
init|=
name|JobConfigurationParser
operator|.
name|parse
argument_list|(
name|inputConfStream
argument_list|)
decl_stmt|;
name|inputConfStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|oldOrNew
init|=
name|newConfig
condition|?
literal|"New"
else|:
literal|"Old"
decl_stmt|;
name|assertEquals
argument_list|(
name|oldOrNew
operator|+
literal|" config property for job queue name is not "
operator|+
literal|" extracted properly."
argument_list|,
literal|"TheQueue"
argument_list|,
name|JobBuilder
operator|.
name|extract
argument_list|(
name|props
argument_list|,
name|JobConfPropertyNames
operator|.
name|QUEUE_NAMES
operator|.
name|getCandidates
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldOrNew
operator|+
literal|" config property for job name is not "
operator|+
literal|" extracted properly."
argument_list|,
literal|"MyMRJob"
argument_list|,
name|JobBuilder
operator|.
name|extract
argument_list|(
name|props
argument_list|,
name|JobConfPropertyNames
operator|.
name|JOB_NAMES
operator|.
name|getCandidates
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|validateChildJavaOpts
argument_list|(
name|newConfig
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|inputConfStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Validate child java opts in properties.
comment|// newConfigProperties: boolean that specifies if the config properties to be
comment|// validated are new OR old.
DECL|method|validateChildJavaOpts (boolean newConfigProperties, Properties props)
specifier|private
name|void
name|validateChildJavaOpts
parameter_list|(
name|boolean
name|newConfigProperties
parameter_list|,
name|Properties
name|props
parameter_list|)
block|{
if|if
condition|(
name|newConfigProperties
condition|)
block|{
name|assertEquals
argument_list|(
literal|"New config property "
operator|+
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
operator|+
literal|" is not extracted properly."
argument_list|,
literal|"-server -Xmx640m -Djava.net.preferIPv4Stack=true"
argument_list|,
name|JobBuilder
operator|.
name|extract
argument_list|(
name|props
argument_list|,
name|JobConfPropertyNames
operator|.
name|MAP_JAVA_OPTS_S
operator|.
name|getCandidates
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New config property "
operator|+
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
operator|+
literal|" is not extracted properly."
argument_list|,
literal|"-server -Xmx650m -Djava.net.preferIPv4Stack=true"
argument_list|,
name|JobBuilder
operator|.
name|extract
argument_list|(
name|props
argument_list|,
name|JobConfPropertyNames
operator|.
name|REDUCE_JAVA_OPTS_S
operator|.
name|getCandidates
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if old property mapred.child.java.opts is set, then extraction of all
comment|// the following 3 properties should give that value.
name|assertEquals
argument_list|(
literal|"mapred.child.java.opts is not extracted properly."
argument_list|,
literal|"-server -Xmx640m -Djava.net.preferIPv4Stack=true"
argument_list|,
name|JobBuilder
operator|.
name|extract
argument_list|(
name|props
argument_list|,
name|JobConfPropertyNames
operator|.
name|TASK_JAVA_OPTS_S
operator|.
name|getCandidates
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New config property "
operator|+
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
operator|+
literal|" is not extracted properly when the old config property "
operator|+
literal|"mapred.child.java.opts is set."
argument_list|,
literal|"-server -Xmx640m -Djava.net.preferIPv4Stack=true"
argument_list|,
name|JobBuilder
operator|.
name|extract
argument_list|(
name|props
argument_list|,
name|JobConfPropertyNames
operator|.
name|MAP_JAVA_OPTS_S
operator|.
name|getCandidates
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New config property "
operator|+
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
operator|+
literal|" is not extracted properly when the old config property "
operator|+
literal|"mapred.child.java.opts is set."
argument_list|,
literal|"-server -Xmx640m -Djava.net.preferIPv4Stack=true"
argument_list|,
name|JobBuilder
operator|.
name|extract
argument_list|(
name|props
argument_list|,
name|JobConfPropertyNames
operator|.
name|REDUCE_JAVA_OPTS_S
operator|.
name|getCandidates
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test if the {@link JobConfigurationParser} can correctly extract out       * key-value pairs from the job configuration.      */
annotation|@
name|Test
DECL|method|testJobConfigurationParsing ()
specifier|public
name|void
name|testJobConfigurationParsing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestJobConfigurationParser"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add some configuration parameters to the conf
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|key
init|=
literal|"test.data"
decl_stmt|;
name|String
name|value
init|=
literal|"hello world"
decl_stmt|;
name|jConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// create the job conf file
name|Path
name|jobConfPath
init|=
operator|new
name|Path
argument_list|(
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"job.xml"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|jobConfPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DataOutputStream
name|jobConfStream
init|=
name|lfs
operator|.
name|create
argument_list|(
name|jobConfPath
argument_list|)
decl_stmt|;
name|jConf
operator|.
name|writeXml
argument_list|(
name|jobConfStream
argument_list|)
expr_stmt|;
name|jobConfStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now read the job conf file using the job configuration parser
name|Properties
name|properties
init|=
name|JobConfigurationParser
operator|.
name|parse
argument_list|(
name|lfs
operator|.
name|open
argument_list|(
name|jobConfPath
argument_list|)
argument_list|)
decl_stmt|;
comment|// check if the required parameter is loaded
name|assertEquals
argument_list|(
literal|"Total number of extracted properties ("
operator|+
name|properties
operator|.
name|size
argument_list|()
operator|+
literal|") doesn't match the expected size of 1 ["
operator|+
literal|"JobConfigurationParser]"
argument_list|,
literal|1
argument_list|,
name|properties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the key is present in the extracted configuration
name|assertTrue
argument_list|(
literal|"Key "
operator|+
name|key
operator|+
literal|" is missing in the configuration extracted "
operator|+
literal|"[JobConfigurationParser]"
argument_list|,
name|properties
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the desired property has the correct value
name|assertEquals
argument_list|(
literal|"JobConfigurationParser couldn't recover the parameters"
operator|+
literal|" correctly"
argument_list|,
name|value
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test ZombieJob
name|LoggedJob
name|job
init|=
operator|new
name|LoggedJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setJobProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|ZombieJob
name|zjob
init|=
operator|new
name|ZombieJob
argument_list|(
name|job
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Configuration
name|zconf
init|=
name|zjob
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
comment|// check if the required parameter is loaded
name|assertEquals
argument_list|(
literal|"ZombieJob couldn't recover the parameters correctly"
argument_list|,
name|value
argument_list|,
name|zconf
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link ResourceUsageMetrics}.    */
annotation|@
name|Test
DECL|method|testResourceUsageMetrics ()
specifier|public
name|void
name|testResourceUsageMetrics
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|cpuUsage
init|=
literal|100
decl_stmt|;
specifier|final
name|long
name|pMemUsage
init|=
literal|200
decl_stmt|;
specifier|final
name|long
name|vMemUsage
init|=
literal|300
decl_stmt|;
specifier|final
name|long
name|heapUsage
init|=
literal|400
decl_stmt|;
comment|// test ResourceUsageMetrics's setters
name|ResourceUsageMetrics
name|metrics
init|=
operator|new
name|ResourceUsageMetrics
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|setCumulativeCpuUsage
argument_list|(
name|cpuUsage
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setPhysicalMemoryUsage
argument_list|(
name|pMemUsage
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setVirtualMemoryUsage
argument_list|(
name|vMemUsage
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setHeapUsage
argument_list|(
name|heapUsage
argument_list|)
expr_stmt|;
comment|// test cpu usage value
name|assertEquals
argument_list|(
literal|"Cpu usage values mismatch via set"
argument_list|,
name|cpuUsage
argument_list|,
name|metrics
operator|.
name|getCumulativeCpuUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// test pMem usage value
name|assertEquals
argument_list|(
literal|"Physical memory usage values mismatch via set"
argument_list|,
name|pMemUsage
argument_list|,
name|metrics
operator|.
name|getPhysicalMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// test vMem usage value
name|assertEquals
argument_list|(
literal|"Virtual memory usage values mismatch via set"
argument_list|,
name|vMemUsage
argument_list|,
name|metrics
operator|.
name|getVirtualMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// test heap usage value
name|assertEquals
argument_list|(
literal|"Heap usage values mismatch via set"
argument_list|,
name|heapUsage
argument_list|,
name|metrics
operator|.
name|getHeapUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// test deepCompare() (pass case)
name|testResourceUsageMetricViaDeepCompare
argument_list|(
name|metrics
argument_list|,
name|cpuUsage
argument_list|,
name|vMemUsage
argument_list|,
name|pMemUsage
argument_list|,
name|heapUsage
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test deepCompare (fail case)
comment|// test cpu usage mismatch
name|testResourceUsageMetricViaDeepCompare
argument_list|(
name|metrics
argument_list|,
literal|0
argument_list|,
name|vMemUsage
argument_list|,
name|pMemUsage
argument_list|,
name|heapUsage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// test pMem usage mismatch
name|testResourceUsageMetricViaDeepCompare
argument_list|(
name|metrics
argument_list|,
name|cpuUsage
argument_list|,
name|vMemUsage
argument_list|,
literal|0
argument_list|,
name|heapUsage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// test vMem usage mismatch
name|testResourceUsageMetricViaDeepCompare
argument_list|(
name|metrics
argument_list|,
name|cpuUsage
argument_list|,
literal|0
argument_list|,
name|pMemUsage
argument_list|,
name|heapUsage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// test heap usage mismatch
name|testResourceUsageMetricViaDeepCompare
argument_list|(
name|metrics
argument_list|,
name|cpuUsage
argument_list|,
name|vMemUsage
argument_list|,
name|pMemUsage
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// define a metric with a fixed value of size()
name|ResourceUsageMetrics
name|metrics2
init|=
operator|new
name|ResourceUsageMetrics
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
name|metrics2
operator|.
name|setCumulativeCpuUsage
argument_list|(
name|cpuUsage
argument_list|)
expr_stmt|;
name|metrics2
operator|.
name|setPhysicalMemoryUsage
argument_list|(
name|pMemUsage
argument_list|)
expr_stmt|;
name|metrics2
operator|.
name|setVirtualMemoryUsage
argument_list|(
name|vMemUsage
argument_list|)
expr_stmt|;
name|metrics2
operator|.
name|setHeapUsage
argument_list|(
name|heapUsage
argument_list|)
expr_stmt|;
comment|// test with size mismatch
name|testResourceUsageMetricViaDeepCompare
argument_list|(
name|metrics2
argument_list|,
name|cpuUsage
argument_list|,
name|vMemUsage
argument_list|,
name|pMemUsage
argument_list|,
name|heapUsage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// test ResourceUsageMetric's deepCompare() method
DECL|method|testResourceUsageMetricViaDeepCompare ( ResourceUsageMetrics metrics, long cpuUsage, long vMemUsage, long pMemUsage, long heapUsage, boolean shouldPass)
specifier|private
specifier|static
name|void
name|testResourceUsageMetricViaDeepCompare
parameter_list|(
name|ResourceUsageMetrics
name|metrics
parameter_list|,
name|long
name|cpuUsage
parameter_list|,
name|long
name|vMemUsage
parameter_list|,
name|long
name|pMemUsage
parameter_list|,
name|long
name|heapUsage
parameter_list|,
name|boolean
name|shouldPass
parameter_list|)
block|{
name|ResourceUsageMetrics
name|testMetrics
init|=
operator|new
name|ResourceUsageMetrics
argument_list|()
decl_stmt|;
name|testMetrics
operator|.
name|setCumulativeCpuUsage
argument_list|(
name|cpuUsage
argument_list|)
expr_stmt|;
name|testMetrics
operator|.
name|setPhysicalMemoryUsage
argument_list|(
name|pMemUsage
argument_list|)
expr_stmt|;
name|testMetrics
operator|.
name|setVirtualMemoryUsage
argument_list|(
name|vMemUsage
argument_list|)
expr_stmt|;
name|testMetrics
operator|.
name|setHeapUsage
argument_list|(
name|heapUsage
argument_list|)
expr_stmt|;
name|Boolean
name|passed
init|=
literal|null
decl_stmt|;
try|try
block|{
name|metrics
operator|.
name|deepCompare
argument_list|(
name|testMetrics
argument_list|,
operator|new
name|TreePath
argument_list|(
literal|null
argument_list|,
literal|"<root>"
argument_list|)
argument_list|)
expr_stmt|;
name|passed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeepInequalityException
name|die
parameter_list|)
block|{
name|passed
operator|=
literal|false
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"ResourceUsageMetrics deepCompare() failed!"
argument_list|,
name|shouldPass
argument_list|,
name|passed
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing {@link ResourceUsageMetrics} using {@link HadoopLogsAnalyzer}.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testResourceUsageMetricsWithHadoopLogsAnalyzer ()
specifier|public
name|void
name|testResourceUsageMetricsWithHadoopLogsAnalyzer
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// get the input trace file
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|rootInputSubFolder
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"rumen/small-trace-test"
argument_list|)
decl_stmt|;
name|Path
name|traceFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputSubFolder
argument_list|,
literal|"v20-resource-usage-log.gz"
argument_list|)
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// define the root test directory
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
comment|// define output directory
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testResourceUsageMetricsWithHadoopLogsAnalyzer"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|outputDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|deleteOnExit
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
comment|// run HadoopLogsAnalyzer
name|HadoopLogsAnalyzer
name|analyzer
init|=
operator|new
name|HadoopLogsAnalyzer
argument_list|()
decl_stmt|;
name|analyzer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|traceOutput
init|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|,
literal|"trace.json"
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-write-job-trace"
block|,
name|traceOutput
operator|.
name|toString
argument_list|()
block|,
literal|"-v1"
block|,
name|traceFile
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
comment|// test HadoopLogsAnalyzer's output w.r.t ResourceUsageMetrics
comment|//  get the logged job
name|JsonObjectMapperParser
argument_list|<
name|LoggedJob
argument_list|>
name|traceParser
init|=
operator|new
name|JsonObjectMapperParser
argument_list|<
name|LoggedJob
argument_list|>
argument_list|(
name|traceOutput
argument_list|,
name|LoggedJob
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|//  get the logged job from the output trace file
name|LoggedJob
name|job
init|=
name|traceParser
operator|.
name|getNext
argument_list|()
decl_stmt|;
name|LoggedTaskAttempt
name|attempt
init|=
name|job
operator|.
name|getMapTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttempts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceUsageMetrics
name|metrics
init|=
name|attempt
operator|.
name|getResourceUsageMetrics
argument_list|()
decl_stmt|;
comment|//  test via deepCompare()
name|testResourceUsageMetricViaDeepCompare
argument_list|(
name|metrics
argument_list|,
literal|200
argument_list|,
literal|100
argument_list|,
literal|75
argument_list|,
literal|50
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTopologyBuilder ()
specifier|public
name|void
name|testTopologyBuilder
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TopologyBuilder
name|subject
init|=
operator|new
name|TopologyBuilder
argument_list|()
decl_stmt|;
comment|// currently we extract no host names from the Properties
name|subject
operator|.
name|process
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|subject
operator|.
name|process
argument_list|(
operator|new
name|TaskAttemptFinishedEvent
argument_list|(
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_200904211745_0003_m_000004_0"
argument_list|)
argument_list|,
name|TaskType
operator|.
name|valueOf
argument_list|(
literal|"MAP"
argument_list|)
argument_list|,
literal|"STATUS"
argument_list|,
literal|1234567890L
argument_list|,
literal|"/194\\.6\\.134\\.64/cluster50261\\.secondleveldomain\\.com"
argument_list|,
literal|"SUCCESS"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|subject
operator|.
name|process
argument_list|(
operator|new
name|TaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_200904211745_0003_m_000004_1"
argument_list|)
argument_list|,
name|TaskType
operator|.
name|valueOf
argument_list|(
literal|"MAP"
argument_list|)
argument_list|,
literal|"STATUS"
argument_list|,
literal|1234567890L
argument_list|,
literal|"/194\\.6\\.134\\.80/cluster50262\\.secondleveldomain\\.com"
argument_list|,
literal|"MACHINE_EXPLODED"
argument_list|)
argument_list|)
expr_stmt|;
name|subject
operator|.
name|process
argument_list|(
operator|new
name|TaskAttemptUnsuccessfulCompletionEvent
argument_list|(
name|TaskAttemptID
operator|.
name|forName
argument_list|(
literal|"attempt_200904211745_0003_m_000004_2"
argument_list|)
argument_list|,
name|TaskType
operator|.
name|valueOf
argument_list|(
literal|"MAP"
argument_list|)
argument_list|,
literal|"STATUS"
argument_list|,
literal|1234567890L
argument_list|,
literal|"/194\\.6\\.134\\.80/cluster50263\\.secondleveldomain\\.com"
argument_list|,
literal|"MACHINE_EXPLODED"
argument_list|)
argument_list|)
expr_stmt|;
name|subject
operator|.
name|process
argument_list|(
operator|new
name|TaskStartedEvent
argument_list|(
name|TaskID
operator|.
name|forName
argument_list|(
literal|"task_200904211745_0003_m_000004"
argument_list|)
argument_list|,
literal|1234567890L
argument_list|,
name|TaskType
operator|.
name|valueOf
argument_list|(
literal|"MAP"
argument_list|)
argument_list|,
literal|"/194\\.6\\.134\\.80/cluster50263\\.secondleveldomain\\.com"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|LoggedNetworkTopology
name|topology
init|=
name|subject
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LoggedNetworkTopology
argument_list|>
name|racks
init|=
name|topology
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of racks"
argument_list|,
literal|2
argument_list|,
name|racks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|sawSingleton
init|=
literal|false
decl_stmt|;
name|boolean
name|sawDoubleton
init|=
literal|false
decl_stmt|;
for|for
control|(
name|LoggedNetworkTopology
name|rack
range|:
name|racks
control|)
block|{
name|List
argument_list|<
name|LoggedNetworkTopology
argument_list|>
name|nodes
init|=
name|rack
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|rack
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".64"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"The singleton rack has the wrong number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sawSingleton
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rack
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".80"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"The doubleton rack has the wrong number of elements"
argument_list|,
literal|2
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sawDoubleton
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Unrecognized rack name"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not see singleton rack"
argument_list|,
name|sawSingleton
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not see doubleton rack"
argument_list|,
name|sawDoubleton
argument_list|)
expr_stmt|;
block|}
DECL|method|jsonFileMatchesGold ( Configuration conf, Path result, Path gold, Class<? extends T> clazz, String fileDescription)
specifier|static
specifier|private
parameter_list|<
name|T
extends|extends
name|DeepCompare
parameter_list|>
name|void
name|jsonFileMatchesGold
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|result
parameter_list|,
name|Path
name|gold
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|fileDescription
parameter_list|)
throws|throws
name|IOException
block|{
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
name|goldParser
init|=
operator|new
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
argument_list|(
name|gold
argument_list|,
name|clazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
name|resultParser
init|=
operator|new
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
argument_list|(
name|result
argument_list|,
name|clazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|DeepCompare
name|goldJob
init|=
name|goldParser
operator|.
name|getNext
argument_list|()
decl_stmt|;
name|DeepCompare
name|resultJob
init|=
name|resultParser
operator|.
name|getNext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|goldJob
operator|==
literal|null
operator|)
operator|||
operator|(
name|resultJob
operator|==
literal|null
operator|)
condition|)
block|{
name|assertTrue
argument_list|(
name|goldJob
operator|==
name|resultJob
argument_list|)
expr_stmt|;
break|break;
block|}
try|try
block|{
name|resultJob
operator|.
name|deepCompare
argument_list|(
name|goldJob
argument_list|,
operator|new
name|TreePath
argument_list|(
literal|null
argument_list|,
literal|"<root>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeepInequalityException
name|e
parameter_list|)
block|{
name|String
name|error
init|=
name|e
operator|.
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|fileDescription
operator|+
literal|" mismatches: "
operator|+
name|error
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|goldParser
argument_list|,
name|resultParser
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates {@link RewindableInputStream} for the given file path.    * @param inputPath the input file path    * @param conf configuration    * @return {@link RewindableInputStream}    * @throws IOException    */
DECL|method|getRewindableInputStream (Path inputPath, Configuration conf)
specifier|private
name|RewindableInputStream
name|getRewindableInputStream
parameter_list|(
name|Path
name|inputPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|PossiblyDecompressedInputStream
name|in
init|=
operator|new
name|PossiblyDecompressedInputStream
argument_list|(
name|inputPath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|RewindableInputStream
argument_list|(
name|in
argument_list|,
name|BUFSIZE
argument_list|)
return|;
block|}
comment|/**    * Allows given history parser to parse the history events and places in    * the given list    * @param parser the job history parser    * @param events the job history events seen while parsing    * @throws IOException    */
DECL|method|getHistoryEvents (JobHistoryParser parser, ArrayList<String> events, JobBuilder builder)
specifier|private
name|void
name|getHistoryEvents
parameter_list|(
name|JobHistoryParser
name|parser
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|events
parameter_list|,
name|JobBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryEvent
name|e
decl_stmt|;
while|while
condition|(
operator|(
name|e
operator|=
name|parser
operator|.
name|nextEvent
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
name|eventString
init|=
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|eventString
argument_list|)
expr_stmt|;
name|events
operator|.
name|add
argument_list|(
name|eventString
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|process
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Validate if history events seen are as expected    * @param seenEvents the list of history events seen    * @param goldLinesExpected  the expected history events    */
DECL|method|validateSeenHistoryEvents (ArrayList<String> seenEvents, String[] goldLinesExpected)
specifier|private
name|void
name|validateSeenHistoryEvents
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|seenEvents
parameter_list|,
name|String
index|[]
name|goldLinesExpected
parameter_list|)
block|{
comment|// Check the output with gold std
name|assertEquals
argument_list|(
literal|"Number of events expected is different from the events seen"
operator|+
literal|" by the history parser."
argument_list|,
name|goldLinesExpected
operator|.
name|length
argument_list|,
name|seenEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|goldLine
range|:
name|goldLinesExpected
control|)
block|{
name|assertEquals
argument_list|(
literal|"History Event mismatch at line "
operator|+
operator|(
name|index
operator|+
literal|1
operator|)
argument_list|,
name|goldLine
argument_list|,
name|seenEvents
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
DECL|field|BUFSIZE
specifier|final
specifier|static
name|int
name|BUFSIZE
init|=
literal|8192
decl_stmt|;
comment|// 8K
comment|// Any Map Reduce Job History Event should be 1 of the following 16
DECL|field|JSE
specifier|final
specifier|static
name|String
name|JSE
init|=
literal|"JobSubmittedEvent"
decl_stmt|;
DECL|field|JPCE
specifier|final
specifier|static
name|String
name|JPCE
init|=
literal|"JobPriorityChangeEvent"
decl_stmt|;
DECL|field|JSCE
specifier|final
specifier|static
name|String
name|JSCE
init|=
literal|"JobStatusChangedEvent"
decl_stmt|;
DECL|field|JIE
specifier|final
specifier|static
name|String
name|JIE
init|=
literal|"JobInitedEvent"
decl_stmt|;
DECL|field|JICE
specifier|final
specifier|static
name|String
name|JICE
init|=
literal|"JobInfoChangeEvent"
decl_stmt|;
DECL|field|TSE
specifier|static
name|String
name|TSE
init|=
literal|"TaskStartedEvent"
decl_stmt|;
DECL|field|ASE
specifier|static
name|String
name|ASE
init|=
literal|"TaskAttemptStartedEvent"
decl_stmt|;
DECL|field|AFE
specifier|static
name|String
name|AFE
init|=
literal|"TaskAttemptFinishedEvent"
decl_stmt|;
DECL|field|MFE
specifier|static
name|String
name|MFE
init|=
literal|"MapAttemptFinishedEvent"
decl_stmt|;
DECL|field|TUE
specifier|static
name|String
name|TUE
init|=
literal|"TaskUpdatedEvent"
decl_stmt|;
DECL|field|TFE
specifier|static
name|String
name|TFE
init|=
literal|"TaskFinishedEvent"
decl_stmt|;
DECL|field|JUCE
specifier|static
name|String
name|JUCE
init|=
literal|"JobUnsuccessfulCompletionEvent"
decl_stmt|;
DECL|field|RFE
specifier|static
name|String
name|RFE
init|=
literal|"ReduceAttemptFinishedEvent"
decl_stmt|;
DECL|field|AUCE
specifier|static
name|String
name|AUCE
init|=
literal|"TaskAttemptUnsuccessfulCompletionEvent"
decl_stmt|;
DECL|field|TFLE
specifier|static
name|String
name|TFLE
init|=
literal|"TaskFailedEvent"
decl_stmt|;
DECL|field|JFE
specifier|static
name|String
name|JFE
init|=
literal|"JobFinishedEvent"
decl_stmt|;
comment|// The expected job history events(in order) when parsing
comment|// the job history file v20-single-input-log.gz
DECL|field|goldLines
specifier|final
specifier|static
name|String
index|[]
name|goldLines
init|=
operator|new
name|String
index|[]
block|{
name|JSE
block|,
name|JPCE
block|,
name|JSCE
block|,
name|JIE
block|,
name|JICE
block|,
name|TSE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|JSCE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|TSE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|TSE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AUCE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|ASE
block|,
name|AFE
block|,
name|RFE
block|,
name|TUE
block|,
name|TFE
block|,
name|TSE
block|,
name|ASE
block|,
name|AFE
block|,
name|MFE
block|,
name|TUE
block|,
name|TFE
block|,
name|JSCE
block|,
name|JFE
block|}
decl_stmt|;
block|}
end_class

end_unit

