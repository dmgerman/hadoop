begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|DeprecatedQueueConfigurationParser
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManager
operator|.
name|toFullPropertyName
import|;
end_import

begin_class
DECL|class|TestQueueManagerWithDeprecatedConf
specifier|public
class|class
name|TestQueueManagerWithDeprecatedConf
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQueueManagerWithDeprecatedConf
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|submitAcl
name|String
name|submitAcl
init|=
name|QueueACL
operator|.
name|SUBMIT_JOB
operator|.
name|getAclName
argument_list|()
decl_stmt|;
DECL|field|adminAcl
name|String
name|adminAcl
init|=
name|QueueACL
operator|.
name|ADMINISTER_JOBS
operator|.
name|getAclName
argument_list|()
decl_stmt|;
DECL|method|testMultipleQueues ()
specifier|public
name|void
name|testMultipleQueues
parameter_list|()
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DeprecatedQueueConfigurationParser
operator|.
name|MAPRED_QUEUE_NAMES_KEY
argument_list|,
literal|"q1,q2,Q3"
argument_list|)
expr_stmt|;
name|QueueManager
name|qMgr
init|=
operator|new
name|QueueManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expQueues
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expQueues
operator|.
name|add
argument_list|(
literal|"q1"
argument_list|)
expr_stmt|;
name|expQueues
operator|.
name|add
argument_list|(
literal|"q2"
argument_list|)
expr_stmt|;
name|expQueues
operator|.
name|add
argument_list|(
literal|"Q3"
argument_list|)
expr_stmt|;
name|verifyQueues
argument_list|(
name|expQueues
argument_list|,
name|qMgr
operator|.
name|getLeafQueueNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSchedulerInfo ()
specifier|public
name|void
name|testSchedulerInfo
parameter_list|()
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DeprecatedQueueConfigurationParser
operator|.
name|MAPRED_QUEUE_NAMES_KEY
argument_list|,
literal|"qq1,qq2"
argument_list|)
expr_stmt|;
name|QueueManager
name|qMgr
init|=
operator|new
name|QueueManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|qMgr
operator|.
name|setSchedulerInfo
argument_list|(
literal|"qq1"
argument_list|,
literal|"queueInfoForqq1"
argument_list|)
expr_stmt|;
name|qMgr
operator|.
name|setSchedulerInfo
argument_list|(
literal|"qq2"
argument_list|,
literal|"queueInfoForqq2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qMgr
operator|.
name|getSchedulerInfo
argument_list|(
literal|"qq2"
argument_list|)
argument_list|,
literal|"queueInfoForqq2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qMgr
operator|.
name|getSchedulerInfo
argument_list|(
literal|"qq1"
argument_list|)
argument_list|,
literal|"queueInfoForqq1"
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueueManagerWithDeprecatedConf ()
specifier|public
name|void
name|testQueueManagerWithDeprecatedConf
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|queueConfigPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.extraconf"
argument_list|,
literal|"build/test/extraconf"
argument_list|)
decl_stmt|;
name|File
name|hadoopConfigFile
init|=
operator|new
name|File
argument_list|(
name|queueConfigPath
argument_list|,
literal|"mapred-site.xml"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// queue properties with which the cluster is started.
name|Properties
name|hadoopConfProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|hadoopConfProps
operator|.
name|put
argument_list|(
name|DeprecatedQueueConfigurationParser
operator|.
name|MAPRED_QUEUE_NAMES_KEY
argument_list|,
literal|"default,q1,q2"
argument_list|)
expr_stmt|;
name|hadoopConfProps
operator|.
name|put
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"unknownUser"
argument_list|)
decl_stmt|;
name|hadoopConfProps
operator|.
name|put
argument_list|(
name|toFullPropertyName
argument_list|(
literal|"default"
argument_list|,
name|submitAcl
argument_list|)
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|hadoopConfProps
operator|.
name|put
argument_list|(
name|toFullPropertyName
argument_list|(
literal|"q1"
argument_list|,
name|submitAcl
argument_list|)
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
name|hadoopConfProps
operator|.
name|put
argument_list|(
name|toFullPropertyName
argument_list|(
literal|"q2"
argument_list|,
name|submitAcl
argument_list|)
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|hadoopConfProps
operator|.
name|put
argument_list|(
name|toFullPropertyName
argument_list|(
literal|"default"
argument_list|,
name|adminAcl
argument_list|)
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|hadoopConfProps
operator|.
name|put
argument_list|(
name|toFullPropertyName
argument_list|(
literal|"q1"
argument_list|,
name|adminAcl
argument_list|)
argument_list|,
literal|"u2"
argument_list|)
expr_stmt|;
name|hadoopConfProps
operator|.
name|put
argument_list|(
name|toFullPropertyName
argument_list|(
literal|"q2"
argument_list|,
name|adminAcl
argument_list|)
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|setUpConfigFile
argument_list|(
name|hadoopConfProps
argument_list|,
name|hadoopConfigFile
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
operator|new
name|QueueManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//Testing job submission access to queues.
name|assertTrue
argument_list|(
literal|"User Job Submission failed."
argument_list|,
name|queueManager
operator|.
name|hasAccess
argument_list|(
literal|"default"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_JOB
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"User Job Submission failed."
argument_list|,
name|queueManager
operator|.
name|hasAccess
argument_list|(
literal|"q1"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_JOB
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"User Job Submission failed."
argument_list|,
name|queueManager
operator|.
name|hasAccess
argument_list|(
literal|"q2"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_JOB
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
comment|//Testing the administer-jobs acls
name|assertTrue
argument_list|(
literal|"User Job Submission failed."
argument_list|,
name|queueManager
operator|.
name|hasAccess
argument_list|(
literal|"default"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"User Job Submission failed."
argument_list|,
name|queueManager
operator|.
name|hasAccess
argument_list|(
literal|"q1"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"User Job Submission failed."
argument_list|,
name|queueManager
operator|.
name|hasAccess
argument_list|(
literal|"q2"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//Cleanup the configuration files in all cases
if|if
condition|(
name|hadoopConfigFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|hadoopConfigFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyQueues (Set<String> expectedQueues, Set<String> actualQueues)
specifier|private
name|void
name|verifyQueues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|expectedQueues
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|actualQueues
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedQueues
operator|.
name|size
argument_list|()
argument_list|,
name|actualQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|expectedQueues
control|)
block|{
name|assertTrue
argument_list|(
name|actualQueues
operator|.
name|contains
argument_list|(
name|queue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

