begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_comment
comment|/**  * check for the job submission  options of   * -libjars -files -archives  */
end_comment

begin_class
DECL|class|TestCommandLineJobSubmission
specifier|public
class|class
name|TestCommandLineJobSubmission
extends|extends
name|TestCase
block|{
comment|// Input output paths for this..
comment|// these are all dummy and does not test
comment|// much in map reduce except for the command line
comment|// params
DECL|field|input
specifier|static
specifier|final
name|Path
name|input
init|=
operator|new
name|Path
argument_list|(
literal|"/test/input/"
argument_list|)
decl_stmt|;
DECL|field|output
specifier|static
specifier|final
name|Path
name|output
init|=
operator|new
name|Path
argument_list|(
literal|"/test/output"
argument_list|)
decl_stmt|;
DECL|field|buildDir
name|File
name|buildDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|testJobShell ()
specifier|public
name|void
name|testJobShell
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|Path
name|testFile
init|=
operator|new
name|Path
argument_list|(
name|input
argument_list|,
literal|"testfile"
argument_list|)
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|//start the mini mr and dfs cluster.
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
literal|"teststring"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|File
name|thisbuildDir
init|=
operator|new
name|File
argument_list|(
name|buildDir
argument_list|,
literal|"jobCommand"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"create build dir"
argument_list|,
name|thisbuildDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|thisbuildDir
argument_list|,
literal|"files_tmp"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fstream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|fstream
operator|.
name|write
argument_list|(
literal|"somestrings"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fstream
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|f1
init|=
operator|new
name|File
argument_list|(
name|thisbuildDir
argument_list|,
literal|"files_tmp1"
argument_list|)
decl_stmt|;
name|fstream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|fstream
operator|.
name|write
argument_list|(
literal|"somestrings"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fstream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// copy files to dfs
name|Path
name|cachePath
init|=
operator|new
name|Path
argument_list|(
literal|"/cacheDir"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|cachePath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|cachePath
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|localCachePath
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.cache.data"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|txtPath
init|=
operator|new
name|Path
argument_list|(
name|localCachePath
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|jarPath
init|=
operator|new
name|Path
argument_list|(
name|localCachePath
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test.jar"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|zipPath
init|=
operator|new
name|Path
argument_list|(
name|localCachePath
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test.zip"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tarPath
init|=
operator|new
name|Path
argument_list|(
name|localCachePath
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test.tar"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tgzPath
init|=
operator|new
name|Path
argument_list|(
name|localCachePath
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test.tgz"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|txtPath
argument_list|,
name|cachePath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|jarPath
argument_list|,
name|cachePath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|zipPath
argument_list|,
name|cachePath
argument_list|)
expr_stmt|;
comment|// construct options for -files
name|String
index|[]
name|files
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|files
index|[
literal|0
index|]
operator|=
name|f
operator|.
name|toString
argument_list|()
expr_stmt|;
name|files
index|[
literal|1
index|]
operator|=
name|f1
operator|.
name|toString
argument_list|()
operator|+
literal|"#localfilelink"
expr_stmt|;
name|files
index|[
literal|2
index|]
operator|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|resolve
argument_list|(
name|cachePath
operator|+
literal|"/test.txt#dfsfilelink"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// construct options for -libjars
name|String
index|[]
name|libjars
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|libjars
index|[
literal|0
index|]
operator|=
literal|"build/test/mapred/testjar/testjob.jar"
expr_stmt|;
name|libjars
index|[
literal|1
index|]
operator|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|resolve
argument_list|(
name|cachePath
operator|+
literal|"/test.jar"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// construct options for archives
name|String
index|[]
name|archives
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|archives
index|[
literal|0
index|]
operator|=
name|tgzPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|archives
index|[
literal|1
index|]
operator|=
name|tarPath
operator|+
literal|"#tarlink"
expr_stmt|;
name|archives
index|[
literal|2
index|]
operator|=
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|resolve
argument_list|(
name|cachePath
operator|+
literal|"/test.zip#ziplink"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|10
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-files"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"-libjars"
expr_stmt|;
comment|// the testjob.jar as a temporary jar file
comment|// rather than creating its own
name|args
index|[
literal|3
index|]
operator|=
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|libjars
argument_list|)
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
literal|"-archives"
expr_stmt|;
name|args
index|[
literal|5
index|]
operator|=
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|archives
argument_list|)
expr_stmt|;
name|args
index|[
literal|6
index|]
operator|=
literal|"-D"
expr_stmt|;
name|args
index|[
literal|7
index|]
operator|=
literal|"mapred.output.committer.class=testjar.CustomOutputCommitter"
expr_stmt|;
name|args
index|[
literal|8
index|]
operator|=
name|input
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|9
index|]
operator|=
name|output
operator|.
name|toString
argument_list|()
expr_stmt|;
name|JobConf
name|jobConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
comment|//before running the job, verify that libjar is not in client classpath
name|assertTrue
argument_list|(
literal|"libjar not in client classpath"
argument_list|,
name|loadLibJar
argument_list|(
name|jobConf
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|jobConf
argument_list|,
operator|new
name|testshell
operator|.
name|ExternalMapReduce
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
comment|//after running the job, verify that libjar is in the client classpath
name|assertTrue
argument_list|(
literal|"libjar added to client classpath"
argument_list|,
name|loadLibJar
argument_list|(
name|jobConf
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not failed "
argument_list|,
name|ret
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
name|thisbuildDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|loadLibJar (JobConf jobConf)
specifier|private
name|Class
name|loadLibJar
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
block|{
try|try
block|{
return|return
name|jobConf
operator|.
name|getClassByName
argument_list|(
literal|"testjar.ClassWordCount"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

