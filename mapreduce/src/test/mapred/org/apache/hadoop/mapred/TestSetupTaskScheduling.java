begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeTaskInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestSetupTaskScheduling
specifier|public
class|class
name|TestSetupTaskScheduling
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSetupTaskScheduling
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|trackers
specifier|static
name|String
index|[]
name|trackers
init|=
operator|new
name|String
index|[]
block|{
literal|"tracker_tracker1:1000"
block|,
literal|"tracker_tracker2:1000"
block|,
literal|"tracker_tracker3:1000"
block|}
decl_stmt|;
DECL|field|jobTracker
specifier|private
specifier|static
name|FakeJobTracker
name|jobTracker
decl_stmt|;
comment|/**    * Fake JobInProgress that can return a hardcoded setup or    * cleanup task depending on the slot type passed in.    */
DECL|class|FakeJobWithSetupTask
specifier|static
class|class
name|FakeJobWithSetupTask
extends|extends
name|FakeObjectUtilities
operator|.
name|FakeJobInProgress
block|{
DECL|method|FakeJobWithSetupTask (JobConf jobConf, JobTracker tracker)
name|FakeJobWithSetupTask
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|JobTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|jobConf
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialize tasks, including setup.       */
annotation|@
name|Override
DECL|method|initTasks ()
specifier|public
specifier|synchronized
name|void
name|initTasks
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|JobSplit
operator|.
name|TaskSplitMetaInfo
name|emptySplit
init|=
operator|new
name|JobSplit
operator|.
name|TaskSplitMetaInfo
argument_list|()
decl_stmt|;
name|setup
operator|=
operator|new
name|TaskInProgress
index|[
literal|2
index|]
expr_stmt|;
name|setup
index|[
literal|0
index|]
operator|=
operator|new
name|TaskInProgress
argument_list|(
name|getJobID
argument_list|()
argument_list|,
literal|"test"
argument_list|,
name|emptySplit
argument_list|,
name|jobtracker
argument_list|,
name|getJobConf
argument_list|()
argument_list|,
name|this
argument_list|,
name|numMapTasks
operator|+
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setup
index|[
literal|1
index|]
operator|=
operator|new
name|TaskInProgress
argument_list|(
name|getJobID
argument_list|()
argument_list|,
literal|"test"
argument_list|,
name|numMapTasks
argument_list|,
name|numReduceTasks
operator|+
literal|1
argument_list|,
name|jobtracker
argument_list|,
name|getJobConf
argument_list|()
argument_list|,
name|this
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Obtain a setup task on a map slot or reduce slot      * depending on what is free.      *       * Every call to this will return either a map or reduce      * setup task. No check is done to see if the task is already      * returned      */
annotation|@
name|Override
DECL|method|obtainJobSetupTask (TaskTrackerStatus tts, int clusterSize, int numUniqueHosts, boolean isMapSlot)
specifier|public
name|Task
name|obtainJobSetupTask
parameter_list|(
name|TaskTrackerStatus
name|tts
parameter_list|,
name|int
name|clusterSize
parameter_list|,
name|int
name|numUniqueHosts
parameter_list|,
name|boolean
name|isMapSlot
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskInProgress
name|tip
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isMapSlot
condition|)
block|{
name|tip
operator|=
name|setup
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|tip
operator|=
name|setup
index|[
literal|1
index|]
expr_stmt|;
block|}
name|Task
name|t
init|=
name|tip
operator|.
name|getTaskToRun
argument_list|(
name|tts
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setJobSetupTask
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
DECL|class|FakeJobWithTaskCleanupTask
specifier|static
class|class
name|FakeJobWithTaskCleanupTask
extends|extends
name|FakeObjectUtilities
operator|.
name|FakeJobInProgress
block|{
DECL|method|FakeJobWithTaskCleanupTask (JobConf jobConf, JobTracker tracker)
name|FakeJobWithTaskCleanupTask
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|JobTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|jobConf
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialize tasks(1 map and 1 reduce task each needs 2 slots, similar to      * tasks of a high RAM job).       */
annotation|@
name|Override
DECL|method|initTasks ()
specifier|public
specifier|synchronized
name|void
name|initTasks
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|initTasks
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numSlotsPerTask
init|=
literal|2
decl_stmt|;
name|maps
operator|=
operator|new
name|TaskInProgress
index|[
literal|1
index|]
expr_stmt|;
name|reduces
operator|=
operator|new
name|TaskInProgress
index|[
literal|1
index|]
expr_stmt|;
name|maps
index|[
literal|0
index|]
operator|=
operator|new
name|FakeTaskInProgress
argument_list|(
name|getJobID
argument_list|()
argument_list|,
literal|"test"
argument_list|,
name|JobSplit
operator|.
name|EMPTY_TASK_SPLIT
argument_list|,
name|jobtracker
argument_list|,
name|getJobConf
argument_list|()
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
name|numSlotsPerTask
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|attemptId
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|maps
index|[
literal|0
index|]
operator|.
name|getTIPId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// make this task a taskCleanup task of a map task
name|mapCleanupTasks
operator|.
name|add
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|TaskStatus
name|stat
init|=
operator|new
name|MapTaskStatus
argument_list|(
name|attemptId
argument_list|,
literal|0.01f
argument_list|,
literal|2
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED_UNCLEAN
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|MAP
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
decl_stmt|;
name|maps
index|[
literal|0
index|]
operator|.
name|updateStatus
argument_list|(
name|stat
argument_list|)
expr_stmt|;
comment|//similarly for reduce task's taskCleanup task
name|reduces
index|[
literal|0
index|]
operator|=
operator|new
name|FakeTaskInProgress
argument_list|(
name|getJobID
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|jobtracker
argument_list|,
name|getJobConf
argument_list|()
argument_list|,
name|this
argument_list|,
name|numSlotsPerTask
argument_list|)
expr_stmt|;
name|attemptId
operator|=
operator|new
name|TaskAttemptID
argument_list|(
name|reduces
index|[
literal|0
index|]
operator|.
name|getTIPId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// make this task a taskCleanup task of a reduce task
name|reduceCleanupTasks
operator|.
name|add
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|stat
operator|=
operator|new
name|ReduceTaskStatus
argument_list|(
name|attemptId
argument_list|,
literal|0.01f
argument_list|,
literal|2
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED_UNCLEAN
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|REDUCE
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
name|reduces
index|[
literal|0
index|]
operator|.
name|updateStatus
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|jobTracker
operator|=
operator|new
name|FakeJobTracker
argument_list|(
name|conf
argument_list|,
operator|new
name|Clock
argument_list|()
argument_list|,
name|trackers
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|trackers
control|)
block|{
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create a job for testing setup tasks and reservations
DECL|method|createJob (TaskType taskType)
name|FakeJobInProgress
name|createJob
parameter_list|(
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|REDUCE_FAILURES_MAXPERCENT
argument_list|,
literal|".70"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|MAP_FAILURES_MAX_PERCENT
argument_list|,
literal|".70"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
literal|null
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|JobContext
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|job
operator|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|JOB_SETUP
condition|)
block|{
name|job
operator|=
operator|new
name|FakeJobWithSetupTask
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|TASK_CLEANUP
condition|)
block|{
name|job
operator|=
operator|new
name|FakeJobWithTaskCleanupTask
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|setClusterSize
argument_list|(
name|trackers
operator|.
name|length
argument_list|)
expr_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
return|return
name|job
return|;
block|}
comment|// create a new TaskStatus and add to a list of status objects.
comment|// useMapSlot param is needed only when taskType is TASK_CLEANUP.
DECL|method|addNewTaskStatus (FakeJobInProgress job, TaskType taskType, boolean useMapSlot, String tracker, List<TaskStatus> reports)
name|void
name|addNewTaskStatus
parameter_list|(
name|FakeJobInProgress
name|job
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|boolean
name|useMapSlot
parameter_list|,
name|String
name|tracker
parameter_list|,
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|reports
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskAttemptID
name|task
init|=
literal|null
decl_stmt|;
name|TaskStatus
name|status
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|task
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|status
operator|=
operator|new
name|MapTaskStatus
argument_list|(
name|task
argument_list|,
literal|0.01f
argument_list|,
literal|2
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|tracker
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|MAP
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|TASK_CLEANUP
condition|)
block|{
if|if
condition|(
name|useMapSlot
condition|)
block|{
name|status
operator|=
name|job
operator|.
name|maps
index|[
literal|0
index|]
operator|.
name|taskStatuses
operator|.
name|get
argument_list|(
operator|new
name|TaskAttemptID
argument_list|(
name|job
operator|.
name|maps
index|[
literal|0
index|]
operator|.
name|getTIPId
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
name|job
operator|.
name|reduces
index|[
literal|0
index|]
operator|.
name|taskStatuses
operator|.
name|get
argument_list|(
operator|new
name|TaskAttemptID
argument_list|(
name|job
operator|.
name|reduces
index|[
literal|0
index|]
operator|.
name|getTIPId
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|task
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|status
operator|=
operator|new
name|ReduceTaskStatus
argument_list|(
name|task
argument_list|,
literal|0.01f
argument_list|,
literal|2
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|tracker
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|REDUCE
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reports
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
comment|// create a TaskTrackerStatus
DECL|method|createTaskTrackerStatus (String tracker, List<TaskStatus> reports)
name|TaskTrackerStatus
name|createTaskTrackerStatus
parameter_list|(
name|String
name|tracker
parameter_list|,
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|reports
parameter_list|)
block|{
name|TaskTrackerStatus
name|ttStatus
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|tracker
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|tracker
argument_list|)
argument_list|,
literal|0
argument_list|,
name|reports
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
return|return
name|ttStatus
return|;
block|}
comment|/**    * Test that a setup task can be run against a map slot    * if it is free.    * @throws IOException    */
DECL|method|testSetupTaskReturnedForFreeMapSlots ()
specifier|public
name|void
name|testSetupTaskReturnedForFreeMapSlots
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create a job with a setup task.
name|FakeJobInProgress
name|job
init|=
name|createJob
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
decl_stmt|;
name|jobTracker
operator|.
name|jobs
operator|.
name|put
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// create a status simulating a free tasktracker
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
decl_stmt|;
name|TaskTrackerStatus
name|ttStatus
init|=
name|createTaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|,
name|reports
argument_list|)
decl_stmt|;
comment|// verify that a setup task can be assigned to a map slot.
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|jobTracker
operator|.
name|getSetupAndCleanupTasks
argument_list|(
name|ttStatus
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isJobSetupTask
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isMapTask
argument_list|()
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|jobs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test to check that map slots are counted when returning    * a setup task.    * @throws IOException    */
DECL|method|testMapSlotsCountedForSetup ()
specifier|public
name|void
name|testMapSlotsCountedForSetup
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create a job with a setup task.
name|FakeJobInProgress
name|job
init|=
name|createJob
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
decl_stmt|;
name|jobTracker
operator|.
name|jobs
operator|.
name|put
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// create another job for reservation
name|FakeJobInProgress
name|job1
init|=
name|createJob
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|jobTracker
operator|.
name|jobs
operator|.
name|put
argument_list|(
name|job1
operator|.
name|getJobID
argument_list|()
argument_list|,
name|job1
argument_list|)
expr_stmt|;
comment|// create TT status for testing getSetupAndCleanupTasks
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|taskStatuses
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
decl_stmt|;
name|addNewTaskStatus
argument_list|(
name|job
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|true
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|,
name|taskStatuses
argument_list|)
expr_stmt|;
name|TaskTrackerStatus
name|ttStatus
init|=
name|createTaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|,
name|taskStatuses
argument_list|)
decl_stmt|;
comment|// test that there should be no map setup task returned.
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|jobTracker
operator|.
name|getSetupAndCleanupTasks
argument_list|(
name|ttStatus
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isJobSetupTask
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isMapTask
argument_list|()
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|jobs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test to check that reduce slots are also counted when returning    * a setup task.    * @throws IOException    */
DECL|method|testReduceSlotsCountedForSetup ()
specifier|public
name|void
name|testReduceSlotsCountedForSetup
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create a job with a setup task.
name|FakeJobInProgress
name|job
init|=
name|createJob
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
decl_stmt|;
name|jobTracker
operator|.
name|jobs
operator|.
name|put
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// create another job for reservation
name|FakeJobInProgress
name|job1
init|=
name|createJob
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|jobTracker
operator|.
name|jobs
operator|.
name|put
argument_list|(
name|job1
operator|.
name|getJobID
argument_list|()
argument_list|,
name|job1
argument_list|)
expr_stmt|;
comment|// create TT status for testing getSetupAndCleanupTasks
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
decl_stmt|;
comment|// because free map slots are checked first in code,
comment|// we fill up map slots also.
name|addNewTaskStatus
argument_list|(
name|job1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|true
argument_list|,
name|trackers
index|[
literal|1
index|]
argument_list|,
name|reports
argument_list|)
expr_stmt|;
name|addNewTaskStatus
argument_list|(
name|job1
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|false
argument_list|,
name|trackers
index|[
literal|1
index|]
argument_list|,
name|reports
argument_list|)
expr_stmt|;
name|TaskTrackerStatus
name|ttStatus
init|=
name|createTaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|,
name|reports
argument_list|)
decl_stmt|;
comment|// test that there should be no setup task returned,
comment|// as both map and reduce slots are occupied.
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|jobTracker
operator|.
name|getSetupAndCleanupTasks
argument_list|(
name|ttStatus
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|jobs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|validateNumSlotsUsedForTaskCleanup (TaskTrackerStatus ttStatus)
name|void
name|validateNumSlotsUsedForTaskCleanup
parameter_list|(
name|TaskTrackerStatus
name|ttStatus
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|jobTracker
operator|.
name|getSetupAndCleanupTasks
argument_list|(
name|ttStatus
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Actual number of taskCleanup tasks is not same as expected"
argument_list|,
literal|1
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"taskCleanup task is "
operator|+
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
expr_stmt|;
comment|// slots needed for taskCleanup task should be 1(even for high RAM jobs)
name|assertEquals
argument_list|(
literal|"TaskCleanup task should not need more than 1 slot."
argument_list|,
literal|1
argument_list|,
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumSlotsRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to check that map slots are counted when returning    * a taskCleanup task.    * @throws IOException    */
DECL|method|testNumSlotsUsedForTaskCleanup ()
specifier|public
name|void
name|testNumSlotsUsedForTaskCleanup
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create a high RAM job with a map task's cleanup task and a reduce task's
comment|// cleanup task. Make this Fake job a high RAM job by setting the slots
comment|// required for map/reduce task to 2.
name|FakeJobInProgress
name|job
init|=
name|createJob
argument_list|(
name|TaskType
operator|.
name|TASK_CLEANUP
argument_list|)
decl_stmt|;
name|jobTracker
operator|.
name|jobs
operator|.
name|put
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// create TT status for testing getSetupAndCleanupTasks
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|taskStatuses
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
decl_stmt|;
name|TaskTrackerStatus
name|ttStatus
init|=
name|createTaskTrackerStatus
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|,
name|taskStatuses
argument_list|)
decl_stmt|;
comment|//create dummy status
comment|// validate mapTaskCleanup task
name|validateNumSlotsUsedForTaskCleanup
argument_list|(
name|ttStatus
argument_list|)
expr_stmt|;
comment|// validate reduceTaskCleanup task
name|validateNumSlotsUsedForTaskCleanup
argument_list|(
name|ttStatus
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|jobs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

