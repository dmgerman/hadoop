begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobTracker
operator|.
name|RecoveryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
operator|.
name|JobTrackerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|createQueuesConfigFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManager
operator|.
name|toFullPropertyName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Test whether the {@link RecoveryManager} is able to tolerate job-recovery   * failures and the jobtracker is able to tolerate {@link RecoveryManager}  * failure.  */
end_comment

begin_class
DECL|class|TestRecoveryManager
specifier|public
class|class
name|TestRecoveryManager
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRecoveryManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"test-recovery-manager"
argument_list|)
decl_stmt|;
comment|/**    * Tests the {@link JobTracker} against the exceptions thrown in     * {@link JobTracker.RecoveryManager}. It does the following :    *  - submits 3 jobs    *  - kills the jobtracker    *  - Garble job.xml for one job causing it to fail in constructor     *    and job.split for another causing it to fail in init.    *  - delete the job temp/submit dir    *  - restarts the jobtracker    *  - checks if the jobtraker starts normally    */
DECL|method|testJobTracker ()
specifier|public
name|void
name|testJobTracker
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing jobtracker restart with faulty job"
argument_list|)
expr_stmt|;
name|String
name|signalFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"signal"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// cleanup
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_BLOCK_SIZE
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|MiniMRCluster
name|mr
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|JobConf
name|job1
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|UtilsForTests
operator|.
name|configureWaitingJobConf
argument_list|(
name|job1
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"input"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"output1"
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|"test-recovery-manager"
argument_list|,
name|signalFile
argument_list|,
name|signalFile
argument_list|)
expr_stmt|;
comment|// submit the faulty job
name|RunningJob
name|rJob1
init|=
operator|(
operator|new
name|JobClient
argument_list|(
name|job1
argument_list|)
operator|)
operator|.
name|submitJob
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitted job "
operator|+
name|rJob1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|rJob1
operator|.
name|mapProgress
argument_list|()
operator|<
literal|0.5f
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for job "
operator|+
name|rJob1
operator|.
name|getID
argument_list|()
operator|+
literal|" to be 50% done"
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|JobConf
name|job2
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|UtilsForTests
operator|.
name|configureWaitingJobConf
argument_list|(
name|job2
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"input"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"output2"
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|"test-recovery-manager"
argument_list|,
name|signalFile
argument_list|,
name|signalFile
argument_list|)
expr_stmt|;
comment|// submit the faulty job
name|RunningJob
name|rJob2
init|=
operator|(
operator|new
name|JobClient
argument_list|(
name|job2
argument_list|)
operator|)
operator|.
name|submitJob
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitted job "
operator|+
name|rJob2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|rJob2
operator|.
name|mapProgress
argument_list|()
operator|<
literal|0.5f
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for job "
operator|+
name|rJob2
operator|.
name|getID
argument_list|()
operator|+
literal|" to be 50% done"
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// kill the jobtracker
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping jobtracker"
argument_list|)
expr_stmt|;
name|String
name|sysDir
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getSystemDir
argument_list|()
decl_stmt|;
name|mr
operator|.
name|stopJobTracker
argument_list|()
expr_stmt|;
comment|// delete the job.xml of job #1 causing the job to fail in submit Job
comment|//while recovery itself
name|Path
name|jobFile
init|=
operator|new
name|Path
argument_list|(
name|sysDir
argument_list|,
name|rJob1
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|JobTracker
operator|.
name|JOB_INFO_FILE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting job token file : "
operator|+
name|jobFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|jobFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// delete the job.xml file
comment|// create the job token file with 1 byte
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|jobFile
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure that the jobtracker is in recovery mode
name|mr
operator|.
name|getJobTrackerConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|JTConfig
operator|.
name|JT_RESTART_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// start the jobtracker
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting jobtracker"
argument_list|)
expr_stmt|;
name|mr
operator|.
name|startJobTracker
argument_list|()
expr_stmt|;
name|ClusterStatus
name|status
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getClusterStatus
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// check if the jobtracker came up or not
name|assertEquals
argument_list|(
literal|"JobTracker crashed!"
argument_list|,
name|JobTrackerStatus
operator|.
name|RUNNING
argument_list|,
name|status
operator|.
name|getJobTrackerStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert the no of recovered jobs
name|assertEquals
argument_list|(
literal|"No of recovered jobs not correct"
argument_list|,
literal|1
argument_list|,
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|recoveryManager
operator|.
name|getRecovered
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the {@link JobTracker.RecoveryManager} against the exceptions thrown     * during recovery. It does the following :    *  - submits a job with HIGH priority and x tasks    *  - allows it to complete 50%    *  - submits another job with normal priority and y tasks    *  - kills the jobtracker    *  - restarts the jobtracker with max-tasks-per-job such that     *        y< max-tasks-per-job< x    *  - checks if the jobtraker starts normally and job#2 is recovered while     *    job#1 is failed.    */
DECL|method|testRecoveryManager ()
specifier|public
name|void
name|testRecoveryManager
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing recovery-manager"
argument_list|)
expr_stmt|;
name|String
name|signalFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"signal"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// clean up
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_BLOCK_SIZE
argument_list|,
literal|"1024"
argument_list|)
expr_stmt|;
name|MiniMRCluster
name|mr
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|JobTracker
name|jobtracker
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobConf
name|job1
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
comment|//  set the high priority
name|job1
operator|.
name|setJobPriority
argument_list|(
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|configureWaitingJobConf
argument_list|(
name|job1
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"input"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"output3"
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|"test-recovery-manager"
argument_list|,
name|signalFile
argument_list|,
name|signalFile
argument_list|)
expr_stmt|;
comment|// submit the faulty job
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|RunningJob
name|rJob1
init|=
name|jc
operator|.
name|submitJob
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitted first job "
operator|+
name|rJob1
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|rJob1
operator|.
name|mapProgress
argument_list|()
operator|<
literal|0.5f
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for job "
operator|+
name|rJob1
operator|.
name|getID
argument_list|()
operator|+
literal|" to be 50% done"
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// now submit job2
name|JobConf
name|job2
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|String
name|signalFile1
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"signal1"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|UtilsForTests
operator|.
name|configureWaitingJobConf
argument_list|(
name|job2
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"input"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"output4"
argument_list|)
argument_list|,
literal|20
argument_list|,
literal|0
argument_list|,
literal|"test-recovery-manager"
argument_list|,
name|signalFile1
argument_list|,
name|signalFile1
argument_list|)
expr_stmt|;
comment|// submit the job
name|RunningJob
name|rJob2
init|=
operator|(
operator|new
name|JobClient
argument_list|(
name|job2
argument_list|)
operator|)
operator|.
name|submitJob
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitted job "
operator|+
name|rJob2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for it to init
name|JobInProgress
name|jip
init|=
name|jobtracker
operator|.
name|getJob
argument_list|(
name|rJob2
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|jip
operator|.
name|inited
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for job "
operator|+
name|jip
operator|.
name|getJobID
argument_list|()
operator|+
literal|" to be inited"
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// now submit job3 with inappropriate acls
specifier|final
name|JobConf
name|job3
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi3
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"abc"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"users"
block|}
argument_list|)
decl_stmt|;
name|UtilsForTests
operator|.
name|configureWaitingJobConf
argument_list|(
name|job3
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"input"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"output5"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"test-recovery-manager"
argument_list|,
name|signalFile
argument_list|,
name|signalFile
argument_list|)
expr_stmt|;
comment|// submit the job
name|RunningJob
name|rJob3
init|=
name|ugi3
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|RunningJob
argument_list|>
argument_list|()
block|{
specifier|public
name|RunningJob
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
operator|new
name|JobClient
argument_list|(
name|job3
argument_list|)
operator|)
operator|.
name|submitJob
argument_list|(
name|job3
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitted job "
operator|+
name|rJob3
operator|.
name|getID
argument_list|()
operator|+
literal|" with different user"
argument_list|)
expr_stmt|;
name|jip
operator|=
name|jobtracker
operator|.
name|getJob
argument_list|(
name|rJob3
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Restart count is not correct"
argument_list|,
literal|0
argument_list|,
name|jip
operator|.
name|getNumRestarts
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|jip
operator|.
name|inited
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for job "
operator|+
name|jip
operator|.
name|getJobID
argument_list|()
operator|+
literal|" to be inited"
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// kill the jobtracker
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping jobtracker"
argument_list|)
expr_stmt|;
name|mr
operator|.
name|stopJobTracker
argument_list|()
expr_stmt|;
comment|// make sure that the jobtracker is in recovery mode
name|mr
operator|.
name|getJobTrackerConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|JTConfig
operator|.
name|JT_RESTART_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mr
operator|.
name|getJobTrackerConf
argument_list|()
operator|.
name|setInt
argument_list|(
name|JTConfig
operator|.
name|JT_TASKS_PER_JOB
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|mr
operator|.
name|getJobTrackerConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|mr
operator|.
name|getJobTrackerConf
argument_list|()
operator|.
name|set
argument_list|(
name|toFullPropertyName
argument_list|(
literal|"default"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_JOB
operator|.
name|getAclName
argument_list|()
argument_list|)
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
comment|// start the jobtracker
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting jobtracker"
argument_list|)
expr_stmt|;
name|mr
operator|.
name|startJobTracker
argument_list|()
expr_stmt|;
name|UtilsForTests
operator|.
name|waitForJobTracker
argument_list|(
name|jc
argument_list|)
expr_stmt|;
name|jobtracker
operator|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
expr_stmt|;
comment|// assert that job2 is recovered by the jobtracker as job1 would fail
name|assertEquals
argument_list|(
literal|"Recovery manager failed to tolerate job failures"
argument_list|,
literal|2
argument_list|,
name|jobtracker
operator|.
name|getAllJobs
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// assert the no of recovered jobs
name|assertEquals
argument_list|(
literal|"No of recovered jobs not correct"
argument_list|,
literal|2
argument_list|,
name|jobtracker
operator|.
name|recoveryManager
operator|.
name|getRecovered
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Restart count is not correct"
argument_list|,
literal|1
argument_list|,
name|jobtracker
operator|.
name|getJob
argument_list|(
name|rJob2
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|getNumRestarts
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the job#1 has failed
name|JobStatus
name|status
init|=
name|jobtracker
operator|.
name|getJobStatus
argument_list|(
name|rJob1
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Faulty job not failed"
argument_list|,
name|JobStatus
operator|.
name|FAILED
argument_list|,
name|status
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
name|jip
operator|=
name|jobtracker
operator|.
name|getJob
argument_list|(
name|rJob2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Job should be running"
argument_list|,
name|jip
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|=
name|jobtracker
operator|.
name|getJobStatus
argument_list|(
name|rJob3
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Job should be missing"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test if the jobtracker waits for the info file to be created before     * starting.    */
DECL|method|testJobTrackerInfoCreation ()
specifier|public
name|void
name|testJobTrackerInfoCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing jobtracker.info file"
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|dfs
init|=
operator|new
name|MiniDFSCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|namenode
init|=
operator|(
name|dfs
operator|.
name|getFileSystem
argument_list|()
operator|)
operator|.
name|getUri
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
operator|(
name|dfs
operator|.
name|getFileSystem
argument_list|()
operator|)
operator|.
name|getUri
argument_list|()
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// shut down the data nodes
name|dfs
operator|.
name|shutdownDataNodes
argument_list|()
expr_stmt|;
comment|// start the jobtracker
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|JobTracker
name|jobtracker
init|=
operator|new
name|JobTracker
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// now check if the update restart count works fine or not
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|jobtracker
operator|.
name|recoveryManager
operator|.
name|updateRestartCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"JobTracker created info files without datanodes!!!"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
name|Path
name|restartFile
init|=
name|jobtracker
operator|.
name|recoveryManager
operator|.
name|getRestartCountFile
argument_list|()
decl_stmt|;
name|Path
name|tmpRestartFile
init|=
name|jobtracker
operator|.
name|recoveryManager
operator|.
name|getTempRestartCountFile
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Info file exists after update failure"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|restartFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Temporary restart-file exists after update failure"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|restartFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// start 1 data node
name|dfs
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|jobtracker
operator|.
name|recoveryManager
operator|.
name|updateRestartCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"JobTracker failed to create info files with datanodes!!!"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

