begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test Kill Job& Fail Job functionality with local file  * system.  */
end_comment

begin_class
DECL|class|TestJobKillAndFail
specifier|public
class|class
name|TestJobKillAndFail
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJobKillAndFail
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
comment|/**    * TaskController instance that just sets a flag when a stack dump    * is performed in a child thread.    */
DECL|class|MockStackDumpTaskController
specifier|static
class|class
name|MockStackDumpTaskController
extends|extends
name|DefaultTaskController
block|{
DECL|field|numStackDumps
specifier|static
specifier|volatile
name|int
name|numStackDumps
init|=
literal|0
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJobKillAndFail
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MockStackDumpTaskController ()
specifier|public
name|MockStackDumpTaskController
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Instantiated MockStackDumpTC"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|dumpTaskStack (TaskControllerContext context)
name|void
name|dumpTaskStack
parameter_list|(
name|TaskControllerContext
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got stack-dump request in TaskController"
argument_list|)
expr_stmt|;
name|MockStackDumpTaskController
operator|.
name|numStackDumps
operator|++
expr_stmt|;
name|super
operator|.
name|dumpTaskStack
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** If a task was killed, then dumpTaskStack() should have been     * called. Test whether or not the counter was incremented     * and succeed/fail based on this. */
DECL|method|checkForStackDump (boolean expectDump, int lastNumDumps)
specifier|private
name|void
name|checkForStackDump
parameter_list|(
name|boolean
name|expectDump
parameter_list|,
name|int
name|lastNumDumps
parameter_list|)
block|{
name|int
name|curNumDumps
init|=
name|MockStackDumpTaskController
operator|.
name|numStackDumps
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"curNumDumps="
operator|+
name|curNumDumps
operator|+
literal|"; lastNumDumps="
operator|+
name|lastNumDumps
operator|+
literal|"; expect="
operator|+
name|expectDump
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectDump
condition|)
block|{
name|assertTrue
argument_list|(
literal|"No stack dump recorded!"
argument_list|,
name|lastNumDumps
operator|<
name|curNumDumps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Stack dump happened anyway!"
argument_list|,
name|lastNumDumps
operator|==
name|curNumDumps
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testJobFailAndKill ()
specifier|public
name|void
name|testJobFailAndKill
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JobConf
name|jtConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jtConf
operator|.
name|set
argument_list|(
literal|"mapred.jobtracker.instrumentation"
argument_list|,
name|JTInstrumentation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|set
argument_list|(
literal|"mapreduce.tasktracker.taskcontroller"
argument_list|,
name|MockStackDumpTaskController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jtConf
argument_list|)
expr_stmt|;
name|JTInstrumentation
name|instr
init|=
operator|(
name|JTInstrumentation
operator|)
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getInstrumentation
argument_list|()
decl_stmt|;
comment|// run the TCs
name|JobConf
name|conf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Job
operator|.
name|COMPLETION_POLL_INTERVAL_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/failkilljob/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/failkilljob/output"
argument_list|)
decl_stmt|;
name|RunningJob
name|runningJob
init|=
name|UtilsForTests
operator|.
name|runJobFail
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
comment|// Checking that the Job got failed
name|assertEquals
argument_list|(
name|runningJob
operator|.
name|getJobState
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instr
operator|.
name|verifyJob
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instr
operator|.
name|failed
argument_list|)
expr_stmt|;
name|instr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|prevNumDumps
init|=
name|MockStackDumpTaskController
operator|.
name|numStackDumps
decl_stmt|;
name|runningJob
operator|=
name|UtilsForTests
operator|.
name|runJobKill
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
comment|// Checking that the Job got killed
name|assertTrue
argument_list|(
name|runningJob
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|runningJob
operator|.
name|getJobState
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instr
operator|.
name|verifyJob
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instr
operator|.
name|killed
argument_list|)
expr_stmt|;
comment|// check that job kill does not put a stacktrace in task logs.
name|checkForStackDump
argument_list|(
literal|false
argument_list|,
name|prevNumDumps
argument_list|)
expr_stmt|;
comment|// Test that a task that times out does have a stack trace
name|conf
operator|=
name|mr
operator|.
name|createJobConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|TASK_TIMEOUT
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|Job
operator|.
name|COMPLETION_POLL_INTERVAL_KEY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|30000
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|job
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|prevNumDumps
operator|=
name|MockStackDumpTaskController
operator|.
name|numStackDumps
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkForStackDump
argument_list|(
literal|true
argument_list|,
name|prevNumDumps
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|JTInstrumentation
specifier|static
class|class
name|JTInstrumentation
extends|extends
name|JobTrackerInstrumentation
block|{
DECL|field|failed
specifier|volatile
name|int
name|failed
decl_stmt|;
DECL|field|killed
specifier|volatile
name|int
name|killed
decl_stmt|;
DECL|field|addPrep
specifier|volatile
name|int
name|addPrep
decl_stmt|;
DECL|field|decPrep
specifier|volatile
name|int
name|decPrep
decl_stmt|;
DECL|field|addRunning
specifier|volatile
name|int
name|addRunning
decl_stmt|;
DECL|field|decRunning
specifier|volatile
name|int
name|decRunning
decl_stmt|;
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
name|failed
operator|=
literal|0
expr_stmt|;
name|killed
operator|=
literal|0
expr_stmt|;
name|addPrep
operator|=
literal|0
expr_stmt|;
name|decPrep
operator|=
literal|0
expr_stmt|;
name|addRunning
operator|=
literal|0
expr_stmt|;
name|decRunning
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|verifyJob ()
name|boolean
name|verifyJob
parameter_list|()
block|{
return|return
name|addPrep
operator|==
literal|1
operator|&&
name|decPrep
operator|==
literal|1
operator|&&
name|addRunning
operator|==
literal|1
operator|&&
name|decRunning
operator|==
literal|1
return|;
block|}
DECL|method|JTInstrumentation (JobTracker jt, JobConf conf)
specifier|public
name|JTInstrumentation
parameter_list|(
name|JobTracker
name|jt
parameter_list|,
name|JobConf
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|jt
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|addPrepJob (JobConf conf, JobID id)
specifier|public
specifier|synchronized
name|void
name|addPrepJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|JobID
name|id
parameter_list|)
block|{
name|addPrep
operator|++
expr_stmt|;
block|}
DECL|method|decPrepJob (JobConf conf, JobID id)
specifier|public
specifier|synchronized
name|void
name|decPrepJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|JobID
name|id
parameter_list|)
block|{
name|decPrep
operator|++
expr_stmt|;
block|}
DECL|method|addRunningJob (JobConf conf, JobID id)
specifier|public
specifier|synchronized
name|void
name|addRunningJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|JobID
name|id
parameter_list|)
block|{
name|addRunning
operator|++
expr_stmt|;
block|}
DECL|method|decRunningJob (JobConf conf, JobID id)
specifier|public
specifier|synchronized
name|void
name|decRunningJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|JobID
name|id
parameter_list|)
block|{
name|decRunning
operator|++
expr_stmt|;
block|}
DECL|method|failedJob (JobConf conf, JobID id)
specifier|public
specifier|synchronized
name|void
name|failedJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|JobID
name|id
parameter_list|)
block|{
name|failed
operator|++
expr_stmt|;
block|}
DECL|method|killedJob (JobConf conf, JobID id)
specifier|public
specifier|synchronized
name|void
name|killedJob
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|JobID
name|id
parameter_list|)
block|{
name|killed
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

