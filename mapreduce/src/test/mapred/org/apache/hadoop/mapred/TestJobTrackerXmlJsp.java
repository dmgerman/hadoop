begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|TestJobTrackerXmlJsp
specifier|public
class|class
name|TestJobTrackerXmlJsp
extends|extends
name|ClusterMapReduceTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJobTrackerXmlJsp
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Read the jobtracker.jspx status page and validate that the XML is well formed.    */
DECL|method|testXmlWellFormed ()
specifier|public
name|void
name|testXmlWellFormed
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
name|MiniMRCluster
name|cluster
init|=
name|getMRCluster
argument_list|()
decl_stmt|;
name|int
name|infoPort
init|=
name|cluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTrackerInfoPort
argument_list|()
decl_stmt|;
name|String
name|xmlJspUrl
init|=
literal|"http://localhost:"
operator|+
name|infoPort
operator|+
literal|"/jobtracker.jspx"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrieving XML from URL: "
operator|+
name|xmlJspUrl
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|parser
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|parser
operator|.
name|parse
argument_list|(
name|xmlJspUrl
argument_list|)
decl_stmt|;
comment|// If we get here, then the document was successfully parsed by SAX and is well-formed.
name|LOG
operator|.
name|info
argument_list|(
literal|"Document received and parsed."
argument_list|)
expr_stmt|;
comment|// Make sure it has a<cluster> element as top-level.
name|NodeList
name|clusterNodes
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be exactly 1<cluster> element"
argument_list|,
literal|1
argument_list|,
name|clusterNodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

