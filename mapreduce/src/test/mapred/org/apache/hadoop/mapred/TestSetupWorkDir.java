begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|DistributedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|TrackerDistributedCacheManager
import|;
end_import

begin_comment
comment|/**  * Verifies if TaskRunner.SetupWorkDir() is cleaning up files/dirs pointed  * to by symlinks under work dir.  */
end_comment

begin_class
DECL|class|TestSetupWorkDir
specifier|public
class|class
name|TestSetupWorkDir
extends|extends
name|TestCase
block|{
comment|/**    * Creates 1 subdirectory and 1 file under dir2. Creates 1 subdir, 1 file,    * 1 symlink to a dir and a symlink to a file under dir1.    * Creates dir1/subDir, dir1/file, dir2/subDir, dir2/file,    * dir1/symlinkSubDir->dir2/subDir, dir1/symlinkFile->dir2/file.    */
DECL|method|createSubDirsAndSymLinks (JobConf jobConf, Path dir1, Path dir2)
specifier|static
name|void
name|createSubDirsAndSymLinks
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Path
name|dir1
parameter_list|,
name|Path
name|dir2
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|createSubDirAndFile
argument_list|(
name|fs
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
name|createSubDirAndFile
argument_list|(
name|fs
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|// now create symlinks under dir1 that point to file/dir under dir2
name|FileUtil
operator|.
name|symLink
argument_list|(
name|dir2
operator|+
literal|"/subDir"
argument_list|,
name|dir1
operator|+
literal|"/symlinkSubDir"
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|symLink
argument_list|(
name|dir2
operator|+
literal|"/file"
argument_list|,
name|dir1
operator|+
literal|"/symlinkFile"
argument_list|)
expr_stmt|;
block|}
DECL|method|createSubDirAndFile (FileSystem fs, Path dir)
specifier|static
name|void
name|createSubDirAndFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|subDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"subDir"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subDir
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
literal|"file"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a file     *     * @param fs filesystem    * @param dir directory location of the file    * @param fileName filename    * @throws IOException    */
DECL|method|createFile (FileSystem fs, Path dir, String fileName)
specifier|static
name|void
name|createFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"dummy input"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createEmptyDir (FileSystem fs, Path dir)
name|void
name|createEmptyDir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create directory "
operator|+
name|dir
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates if TaskRunner.setupWorkDir() is properly cleaning up the    * contents of workDir and creating tmp dir under it (even though workDir    * contains symlinks to files/directories).    */
DECL|method|testSetupWorkDir ()
specifier|public
name|void
name|testSetupWorkDir
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"testSetupWorkDir"
argument_list|)
decl_stmt|;
name|Path
name|myWorkDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"./work"
argument_list|)
decl_stmt|;
name|Path
name|myTargetDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"./tmp"
argument_list|)
decl_stmt|;
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jConf
argument_list|)
decl_stmt|;
name|createEmptyDir
argument_list|(
name|fs
argument_list|,
name|myWorkDir
argument_list|)
expr_stmt|;
name|createEmptyDir
argument_list|(
name|fs
argument_list|,
name|myTargetDir
argument_list|)
expr_stmt|;
comment|// create subDirs and symlinks under work dir
name|createSubDirsAndSymLinks
argument_list|(
name|jConf
argument_list|,
name|myWorkDir
argument_list|,
name|myTargetDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not create symlinks/files/dirs properly. Check "
operator|+
name|myWorkDir
operator|+
literal|" and "
operator|+
name|myTargetDir
argument_list|,
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|myWorkDir
argument_list|)
operator|.
name|length
operator|==
literal|4
operator|)
operator|&&
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|myTargetDir
argument_list|)
operator|.
name|length
operator|==
literal|2
operator|)
argument_list|)
expr_stmt|;
comment|// let us disable creation of symlinks in setupWorkDir()
name|jConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_SYMLINK
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
comment|// Deletion of myWorkDir should not affect contents of myTargetDir.
comment|// myTargetDir is like $user/jobcache/distcache
name|TaskRunner
operator|.
name|setupWorkDir
argument_list|(
name|jConf
argument_list|,
operator|new
name|File
argument_list|(
name|myWorkDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Contents of myWorkDir should be cleaned up and a tmp dir should be
comment|// created under myWorkDir
name|assertTrue
argument_list|(
name|myWorkDir
operator|+
literal|" is not cleaned up properly."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|myWorkDir
argument_list|)
operator|&&
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|myWorkDir
argument_list|)
operator|.
name|length
operator|==
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// Make sure that the dir under myWorkDir is tmp
name|assertTrue
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|myWorkDir
argument_list|)
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|myWorkDir
operator|.
name|toString
argument_list|()
operator|+
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that myTargetDir is not changed/deleted
name|assertTrue
argument_list|(
literal|"Dir "
operator|+
name|myTargetDir
operator|+
literal|" seem to be modified."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|myTargetDir
argument_list|)
operator|&&
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|myTargetDir
argument_list|)
operator|.
name|length
operator|==
literal|2
operator|)
argument_list|)
expr_stmt|;
comment|// cleanup
name|fs
operator|.
name|delete
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates distributed cache symlink getting created fine    *     * @throws IOException, URISyntaxException     */
DECL|method|testSetupWorkDirDistCacheSymlinkValid ()
specifier|public
name|void
name|testSetupWorkDirDistCacheSymlinkValid
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jConf
argument_list|)
decl_stmt|;
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"testSetupWorkDirSymlinkFailure"
argument_list|)
decl_stmt|;
comment|// create file for DistributedCache and set it
name|Path
name|myTargetDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"./tmp"
argument_list|)
decl_stmt|;
name|createEmptyDir
argument_list|(
name|fs
argument_list|,
name|myTargetDir
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|myTargetDir
argument_list|,
literal|"cacheFile.txt"
argument_list|)
expr_stmt|;
name|TrackerDistributedCacheManager
operator|.
name|setLocalFiles
argument_list|(
name|jConf
argument_list|,
operator|(
name|myTargetDir
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"cacheFile.txt"
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not create cache file in "
operator|+
name|myTargetDir
argument_list|,
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|myTargetDir
argument_list|)
operator|.
name|length
operator|==
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// let us enable creation of symlinks in setupWorkDir()
name|jConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_SYMLINK
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
comment|// add a valid symlink
name|Path
name|myWorkDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"./work"
argument_list|)
decl_stmt|;
name|createEmptyDir
argument_list|(
name|fs
argument_list|,
name|myWorkDir
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheFile
argument_list|(
operator|new
name|URI
argument_list|(
name|myWorkDir
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"file.txt#valid"
argument_list|)
argument_list|,
name|jConf
argument_list|)
expr_stmt|;
comment|// setupWorkDir should create symlinks
name|TaskRunner
operator|.
name|setupWorkDir
argument_list|(
name|jConf
argument_list|,
operator|new
name|File
argument_list|(
name|myWorkDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// myWorkDir should have 2 entries, a tmp dir and the symlink valid
name|assertTrue
argument_list|(
name|myWorkDir
operator|+
literal|" does not have cache symlink."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|myWorkDir
argument_list|)
operator|&&
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|myWorkDir
argument_list|)
operator|.
name|length
operator|==
literal|2
operator|)
argument_list|)
expr_stmt|;
comment|// make sure work dir has symlink valid
name|boolean
name|foundValid
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FileStatus
name|fstat
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|myWorkDir
argument_list|)
control|)
block|{
if|if
condition|(
name|fstat
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|!=
literal|null
operator|&&
name|fstat
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|myWorkDir
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"valid"
argument_list|)
condition|)
block|{
name|foundValid
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Valid symlink not created"
argument_list|,
name|foundValid
argument_list|)
expr_stmt|;
comment|// cleanup
name|fs
operator|.
name|delete
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invalid distributed cache files errors out with IOException    *     * @throws IOException, URISyntaxException     */
DECL|method|testSetupWorkDirDistCacheSymlinkInvalid ()
specifier|public
name|void
name|testSetupWorkDirDistCacheSymlinkInvalid
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jConf
argument_list|)
decl_stmt|;
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"testSetupWorkDirSymlinkFailure"
argument_list|)
decl_stmt|;
comment|// create file for DistributedCache and set it
name|Path
name|myTargetDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"./tmp"
argument_list|)
decl_stmt|;
name|createEmptyDir
argument_list|(
name|fs
argument_list|,
name|myTargetDir
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|fs
argument_list|,
name|myTargetDir
argument_list|,
literal|"cacheFile.txt"
argument_list|)
expr_stmt|;
name|TrackerDistributedCacheManager
operator|.
name|setLocalFiles
argument_list|(
name|jConf
argument_list|,
operator|(
name|myTargetDir
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"cacheFile.txt"
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not create cache file in "
operator|+
name|myTargetDir
argument_list|,
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|myTargetDir
argument_list|)
operator|.
name|length
operator|==
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// let us enable creation of symlinks in setupWorkDir()
name|jConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_SYMLINK
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
comment|// add an invalid symlink
name|Path
name|myWorkDir
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"./work"
argument_list|)
decl_stmt|;
name|createEmptyDir
argument_list|(
name|fs
argument_list|,
name|myWorkDir
argument_list|)
expr_stmt|;
name|DistributedCache
operator|.
name|addCacheFile
argument_list|(
operator|new
name|URI
argument_list|(
name|myWorkDir
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"file.txt#invalid/abc"
argument_list|)
argument_list|,
name|jConf
argument_list|)
expr_stmt|;
comment|// setupWorkDir should throw exception
try|try
block|{
name|TaskRunner
operator|.
name|setupWorkDir
argument_list|(
name|jConf
argument_list|,
operator|new
name|File
argument_list|(
name|myWorkDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"TaskRunner.setupWorkDir() did not throw exception when"
operator|+
literal|" given invalid cache file"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// this is correct behavior
name|assertTrue
argument_list|(
name|myWorkDir
operator|+
literal|" does not have cache symlink."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|myWorkDir
argument_list|)
operator|&&
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|myWorkDir
argument_list|)
operator|.
name|length
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// cleanup
name|fs
operator|.
name|delete
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

