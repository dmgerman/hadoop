begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|FakeClock
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test {@link JobTracker} w.r.t config parameters.  */
end_comment

begin_class
DECL|class|TestJobTrackerStart
specifier|public
class|class
name|TestJobTrackerStart
extends|extends
name|TestCase
block|{
DECL|method|testJobTrackerStartConfig ()
specifier|public
name|void
name|testJobTrackerStartConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|=
name|MiniMRCluster
operator|.
name|configureJobConf
argument_list|(
name|conf
argument_list|,
literal|"file:///"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// test JobTracker's default clock
name|Clock
name|c
init|=
name|JobTracker
operator|.
name|getClock
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|JobTracker
operator|.
name|DEFAULT_CLOCK
argument_list|)
expr_stmt|;
comment|// test with default values
name|JobTracker
name|jt
init|=
name|JobTracker
operator|.
name|startTracker
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|c
operator|=
name|JobTracker
operator|.
name|getClock
argument_list|()
expr_stmt|;
comment|// test clock
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|JobTracker
operator|.
name|DEFAULT_CLOCK
argument_list|)
expr_stmt|;
comment|// test identifier
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|jt
operator|.
name|getTrackerIdentifier
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// correct upto mins
name|jt
operator|.
name|stopTracker
argument_list|()
expr_stmt|;
comment|// test with special clock
name|FakeClock
name|myClock
init|=
operator|new
name|FakeClock
argument_list|()
decl_stmt|;
name|jt
operator|=
name|JobTracker
operator|.
name|startTracker
argument_list|(
name|conf
argument_list|,
name|myClock
argument_list|)
expr_stmt|;
name|c
operator|=
name|JobTracker
operator|.
name|getClock
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|myClock
argument_list|)
expr_stmt|;
name|jt
operator|.
name|stopTracker
argument_list|()
expr_stmt|;
comment|// test with special identifier
name|String
name|identifier
init|=
literal|"test-identifier"
decl_stmt|;
name|jt
operator|=
name|JobTracker
operator|.
name|startTracker
argument_list|(
name|conf
argument_list|,
name|JobTracker
operator|.
name|DEFAULT_CLOCK
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|identifier
argument_list|,
name|jt
operator|.
name|getTrackerIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|jt
operator|.
name|stopTracker
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

