begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|extensions
operator|.
name|TestSetup
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobTrackerMetricsInst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|FakeClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_class
DECL|class|TestSpeculativeExecution
specifier|public
class|class
name|TestSpeculativeExecution
extends|extends
name|TestCase
block|{
DECL|field|job
name|FakeJobInProgress
name|job
decl_stmt|;
DECL|field|jobTracker
specifier|static
name|FakeJobTracker
name|jobTracker
decl_stmt|;
DECL|class|SpecFakeClock
specifier|static
class|class
name|SpecFakeClock
extends|extends
name|FakeClock
block|{
DECL|field|SPECULATIVE_LAG
name|long
name|SPECULATIVE_LAG
init|=
name|TaskInProgress
operator|.
name|SPECULATIVE_LAG
decl_stmt|;
DECL|method|advanceBySpeculativeLag ()
specifier|public
name|void
name|advanceBySpeculativeLag
parameter_list|()
block|{
name|time
operator|+=
name|SPECULATIVE_LAG
expr_stmt|;
block|}
block|}
empty_stmt|;
DECL|field|clock
specifier|static
name|SpecFakeClock
name|clock
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSpeculativeExecution
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fakeInst
specifier|private
specifier|static
name|FakeJobTrackerMetricsInst
name|fakeInst
decl_stmt|;
DECL|field|trackers
specifier|static
name|String
name|trackers
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"tracker_tracker1:1000"
block|,
literal|"tracker_tracker2:1000"
block|,
literal|"tracker_tracker3:1000"
block|,
literal|"tracker_tracker4:1000"
block|,
literal|"tracker_tracker5:1000"
block|}
decl_stmt|;
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSetup
name|setup
init|=
operator|new
name|TestSetup
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestSpeculativeExecution
operator|.
name|class
argument_list|)
argument_list|)
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_INSTRUMENTATION
argument_list|,
name|FakeJobTrackerMetricsInst
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jobTracker
operator|=
operator|new
name|FakeJobTracker
argument_list|(
name|conf
argument_list|,
operator|(
name|clock
operator|=
operator|new
name|SpecFakeClock
argument_list|()
operator|)
argument_list|,
name|trackers
argument_list|)
expr_stmt|;
name|fakeInst
operator|=
operator|(
name|FakeJobTrackerMetricsInst
operator|)
name|jobTracker
operator|.
name|getInstrumentation
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|trackers
control|)
block|{
name|FakeObjectUtilities
operator|.
name|establishFirstContact
argument_list|(
name|jobTracker
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|//delete the build/test/logs/ dir
block|}
block|}
decl_stmt|;
return|return
name|setup
return|;
block|}
DECL|method|testRunningTaskCountWithSpeculation ()
specifier|public
name|void
name|testRunningTaskCountWithSpeculation
parameter_list|()
throws|throws
name|IOException
block|{
name|TaskAttemptID
index|[]
name|taskAttemptID
init|=
operator|new
name|TaskAttemptID
index|[
literal|8
index|]
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|JobContext
operator|.
name|SPECULATIVE_SLOWTASK_THRESHOLD
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
comment|//Check for runningMap counts first
comment|//schedule maps
name|taskAttemptID
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|1
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|2
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advanceBySpeculativeLag
argument_list|()
expr_stmt|;
comment|//we should get a speculative task now
name|taskAttemptID
index|[
literal|3
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|int
name|oldRunningMap
init|=
name|job
operator|.
name|runningMaps
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"No of running maps before fail was "
operator|+
name|oldRunningMap
argument_list|)
expr_stmt|;
name|job
operator|.
name|failTask
argument_list|(
name|taskAttemptID
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Running maps count should be updated from "
operator|+
name|oldRunningMap
operator|+
literal|" to "
operator|+
operator|(
name|oldRunningMap
operator|-
literal|1
operator|)
argument_list|,
name|job
operator|.
name|runningMaps
argument_list|()
argument_list|,
name|oldRunningMap
operator|-
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Job running maps after fail "
operator|+
name|job
operator|.
name|runningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|//check for runningReduce count.
name|taskAttemptID
index|[
literal|4
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|5
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|6
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advanceBySpeculativeLag
argument_list|()
expr_stmt|;
name|taskAttemptID
index|[
literal|7
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|int
name|oldRunningReduces
init|=
name|job
operator|.
name|runningReduces
argument_list|()
decl_stmt|;
name|job
operator|.
name|failTask
argument_list|(
name|taskAttemptID
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" No of running Reduces before fail "
operator|+
name|oldRunningReduces
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" No of runing reduces after fail "
operator|+
name|job
operator|.
name|runningReduces
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Running reduces count should be updated from "
operator|+
name|oldRunningReduces
operator|+
literal|" to "
operator|+
operator|(
name|oldRunningReduces
operator|-
literal|1
operator|)
argument_list|,
name|job
operator|.
name|runningReduces
argument_list|()
argument_list|,
name|oldRunningReduces
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Verify total speculative tasks by jobtracker instrumentation
name|assertEquals
argument_list|(
literal|"Total speculative maps"
argument_list|,
literal|1
argument_list|,
name|fakeInst
operator|.
name|numSpeculativeMaps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Total speculative reduces"
argument_list|,
literal|1
argument_list|,
name|fakeInst
operator|.
name|numSpeculativeReduces
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total speculative maps = "
operator|+
name|fakeInst
operator|.
name|numSpeculativeMaps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total speculative reduces = "
operator|+
name|fakeInst
operator|.
name|numSpeculativeReduces
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsSlowTracker ()
specifier|public
name|void
name|testIsSlowTracker
parameter_list|()
throws|throws
name|IOException
block|{
name|TaskAttemptID
index|[]
name|taskAttemptID
init|=
operator|new
name|TaskAttemptID
index|[
literal|20
index|]
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
comment|//schedule some tasks
name|taskAttemptID
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|1
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|2
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|3
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|4
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|5
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|6
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|7
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|8
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//Some tasks finish in 1 second (on trackers[0])
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//Some tasks finish in 2 second (on trackers[1])
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker "
operator|+
name|trackers
index|[
literal|0
index|]
operator|+
literal|" expected to be not slow "
argument_list|,
name|job
operator|.
name|isSlowTracker
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
comment|//After a long time, some tasks finished on trackers[2]
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker "
operator|+
name|trackers
index|[
literal|2
index|]
operator|+
literal|" expected to be slow "
argument_list|,
name|job
operator|.
name|isSlowTracker
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Verify total speculative tasks by jobtracker instrumentation
name|assertEquals
argument_list|(
literal|"Total speculative maps"
argument_list|,
literal|1
argument_list|,
name|fakeInst
operator|.
name|numSpeculativeMaps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Total speculative reduces"
argument_list|,
literal|1
argument_list|,
name|fakeInst
operator|.
name|numSpeculativeReduces
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total speculative maps = "
operator|+
name|fakeInst
operator|.
name|numSpeculativeMaps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total speculative reduces = "
operator|+
name|fakeInst
operator|.
name|numSpeculativeReduces
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskToSpeculate ()
specifier|public
name|void
name|testTaskToSpeculate
parameter_list|()
throws|throws
name|IOException
block|{
name|TaskAttemptID
index|[]
name|taskAttemptID
init|=
operator|new
name|TaskAttemptID
index|[
literal|6
index|]
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|JobContext
operator|.
name|SPECULATIVE_SLOWTASK_THRESHOLD
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
comment|//schedule maps
name|taskAttemptID
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|1
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|2
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|3
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|4
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advanceBySpeculativeLag
argument_list|()
expr_stmt|;
comment|//we should get a speculative task now
name|taskAttemptID
index|[
literal|5
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|taskAttemptID
index|[
literal|5
index|]
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|5
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|taskAttemptID
index|[
literal|5
index|]
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Verify total speculative tasks by jobtracker instrumentation
name|assertEquals
argument_list|(
literal|"Total speculative maps"
argument_list|,
literal|1
argument_list|,
name|fakeInst
operator|.
name|numSpeculativeMaps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Total speculative reduces"
argument_list|,
literal|3
argument_list|,
name|fakeInst
operator|.
name|numSpeculativeReduces
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total speculative maps = "
operator|+
name|fakeInst
operator|.
name|numSpeculativeMaps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total speculative reduces = "
operator|+
name|fakeInst
operator|.
name|numSpeculativeReduces
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests the fact that we choose tasks with lesser progress    * among the possible candidates for speculation    */
DECL|method|testTaskLATEScheduling ()
specifier|public
name|void
name|testTaskLATEScheduling
parameter_list|()
throws|throws
name|IOException
block|{
name|TaskAttemptID
index|[]
name|taskAttemptID
init|=
operator|new
name|TaskAttemptID
index|[
literal|20
index|]
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|JobContext
operator|.
name|SPECULATIVE_SLOWTASK_THRESHOLD
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|taskAttemptID
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|1
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|2
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|3
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|250000
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|4
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advanceBySpeculativeLag
argument_list|()
expr_stmt|;
comment|//by doing the above clock adjustments, we bring the progress rate of
comment|//taskID 3 lower than 4. For taskID 3, the rate is 85/317000
comment|//and for taskID 4, the rate is 20/65000. But when we ask for a spec task
comment|//now, we should get back taskID 4 (since that is expected to complete
comment|//later than taskID 3).
name|job
operator|.
name|progressMade
argument_list|(
name|taskAttemptID
index|[
literal|3
index|]
argument_list|,
literal|0.85f
argument_list|)
expr_stmt|;
name|job
operator|.
name|progressMade
argument_list|(
name|taskAttemptID
index|[
literal|4
index|]
argument_list|,
literal|0.20f
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|5
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|taskAttemptID
index|[
literal|5
index|]
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Verify total speculative tasks by jobtracker instrumentation
name|assertEquals
argument_list|(
literal|"Total speculative maps"
argument_list|,
literal|2
argument_list|,
name|fakeInst
operator|.
name|numSpeculativeMaps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Total speculative reduces"
argument_list|,
literal|3
argument_list|,
name|fakeInst
operator|.
name|numSpeculativeReduces
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total speculative maps = "
operator|+
name|fakeInst
operator|.
name|numSpeculativeMaps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total speculative reduces = "
operator|+
name|fakeInst
operator|.
name|numSpeculativeReduces
argument_list|)
expr_stmt|;
block|}
comment|/*    * Tests the fact that we only launch a limited number of speculative tasks,    * even though we have a lot of tasks in RUNNING state    */
DECL|method|testAtSpeculativeCap ()
specifier|public
name|void
name|testAtSpeculativeCap
parameter_list|()
throws|throws
name|IOException
block|{
comment|//The expr which is evaluated for determining whether
comment|//atSpeculativeCap should
comment|//return true or false is
comment|//(#speculative-tasks< max (10, 0.01*#slots, 0.1*#running-tasks)
comment|//Tests the fact that the max tasks launched is 0.1 * #running-tasks
name|assertEquals
argument_list|(
name|speculativeCap
argument_list|(
literal|1200
argument_list|,
literal|800
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|40
argument_list|)
expr_stmt|;
comment|//Tests the fact that the max tasks launched is 10
name|assertEquals
argument_list|(
name|speculativeCap
argument_list|(
literal|1200
argument_list|,
literal|1150
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|//Tests the fact that the max tasks launched is 0.01 * #slots
name|assertEquals
argument_list|(
name|speculativeCap
argument_list|(
literal|1200
argument_list|,
literal|1150
argument_list|,
literal|4000
argument_list|)
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// Verify total speculative tasks by jobtracker instrumentation
name|assertEquals
argument_list|(
literal|"Total speculative maps"
argument_list|,
literal|72
argument_list|,
name|fakeInst
operator|.
name|numSpeculativeMaps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Total speculative reduces"
argument_list|,
literal|3
argument_list|,
name|fakeInst
operator|.
name|numSpeculativeReduces
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total speculative maps = "
operator|+
name|fakeInst
operator|.
name|numSpeculativeMaps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total speculative reduces = "
operator|+
name|fakeInst
operator|.
name|numSpeculativeReduces
argument_list|)
expr_stmt|;
block|}
DECL|method|speculativeCap (int totalTasks, int numEarlyComplete, int slots)
specifier|private
name|int
name|speculativeCap
parameter_list|(
name|int
name|totalTasks
parameter_list|,
name|int
name|numEarlyComplete
parameter_list|,
name|int
name|slots
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskAttemptID
index|[]
name|taskAttemptID
init|=
operator|new
name|TaskAttemptID
index|[
literal|1500
index|]
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
name|totalTasks
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|setNumSlots
argument_list|(
name|slots
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|totalTasks
condition|;
name|i
operator|++
control|)
block|{
name|taskAttemptID
index|[
name|i
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|clock
operator|.
name|advance
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numEarlyComplete
condition|;
name|i
operator|++
control|)
block|{
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|clock
operator|.
name|advanceBySpeculativeLag
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
name|numEarlyComplete
init|;
name|i
operator|<
name|totalTasks
condition|;
name|i
operator|++
control|)
block|{
name|job
operator|.
name|progressMade
argument_list|(
name|taskAttemptID
index|[
name|i
index|]
argument_list|,
literal|0.85f
argument_list|)
expr_stmt|;
block|}
name|clock
operator|.
name|advance
argument_list|(
literal|50000
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|totalTasks
operator|-
name|numEarlyComplete
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|taskAttemptID
index|[
name|i
index|]
operator|=
name|job
operator|.
name|findMapTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|clock
operator|.
name|advance
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskAttemptID
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
comment|//add some good progress constantly for the different
comment|//task-attempts so that
comment|//the tasktracker doesn't get into the slow trackers category
name|job
operator|.
name|progressMade
argument_list|(
name|taskAttemptID
index|[
name|i
index|]
argument_list|,
literal|0.99f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|i
return|;
block|}
block|}
end_class

end_unit

