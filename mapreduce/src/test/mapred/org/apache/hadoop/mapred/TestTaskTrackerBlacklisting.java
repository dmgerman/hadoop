begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|extensions
operator|.
name|TestSetup
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterStatus
operator|.
name|BlackListInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobTracker
operator|.
name|ReasonForBlackListing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTrackerStatus
operator|.
name|TaskTrackerHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_class
DECL|class|TestTaskTrackerBlacklisting
specifier|public
class|class
name|TestTaskTrackerBlacklisting
extends|extends
name|TestCase
block|{
DECL|field|trackers
specifier|static
name|String
name|trackers
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"tracker_tracker1:1000"
block|,
literal|"tracker_tracker2:1000"
block|,
literal|"tracker_tracker3:1000"
block|}
decl_stmt|;
DECL|field|hosts
specifier|static
name|String
name|hosts
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"tracker1"
block|,
literal|"tracker2"
block|,
literal|"tracker3"
block|}
decl_stmt|;
DECL|field|jobTracker
specifier|private
specifier|static
name|FakeJobTracker
name|jobTracker
decl_stmt|;
DECL|field|clock
specifier|private
specifier|static
name|FakeJobTrackerClock
name|clock
decl_stmt|;
DECL|field|responseId
specifier|private
specifier|static
name|short
name|responseId
decl_stmt|;
DECL|field|nodeUnHealthyReasonSet
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|ReasonForBlackListing
argument_list|>
name|nodeUnHealthyReasonSet
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|ReasonForBlackListing
operator|.
name|NODE_UNHEALTHY
argument_list|)
decl_stmt|;
DECL|field|exceedsFailuresReasonSet
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|ReasonForBlackListing
argument_list|>
name|exceedsFailuresReasonSet
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|ReasonForBlackListing
operator|.
name|EXCEEDING_FAILURES
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|ReasonForBlackListing
argument_list|>
DECL|field|unhealthyAndExceedsFailure
name|unhealthyAndExceedsFailure
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|ReasonForBlackListing
operator|.
name|NODE_UNHEALTHY
argument_list|,
name|ReasonForBlackListing
operator|.
name|EXCEEDING_FAILURES
argument_list|)
decl_stmt|;
comment|// Add extra millisecond where timer granularity is too coarse
DECL|field|aDay
specifier|private
specifier|static
specifier|final
name|long
name|aDay
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|+
literal|1
decl_stmt|;
DECL|class|FakeJobTrackerClock
specifier|private
specifier|static
class|class
name|FakeJobTrackerClock
extends|extends
name|Clock
block|{
DECL|field|jumpADay
name|boolean
name|jumpADay
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|getTime ()
name|long
name|getTime
parameter_list|()
block|{
if|if
condition|(
operator|!
name|jumpADay
condition|)
block|{
return|return
name|super
operator|.
name|getTime
argument_list|()
return|;
block|}
else|else
block|{
name|long
name|now
init|=
name|super
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
name|now
operator|+
name|aDay
return|;
block|}
block|}
block|}
DECL|class|FakeJobTracker
specifier|static
class|class
name|FakeJobTracker
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobTracker
block|{
DECL|method|FakeJobTracker (JobConf conf, Clock clock, String[] tts)
name|FakeJobTracker
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Clock
name|clock
parameter_list|,
name|String
index|[]
name|tts
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|LoginException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|clock
argument_list|,
name|tts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finalizeJob (JobInProgress job)
specifier|synchronized
name|void
name|finalizeJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|blackListedTrackers
init|=
name|job
operator|.
name|getBlackListedTrackers
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|blackListedTrackers
control|)
block|{
name|incrementFaults
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|FakeJobInProgress
specifier|static
class|class
name|FakeJobInProgress
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobInProgress
block|{
DECL|field|trackerToFailureMap
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|trackerToFailureMap
decl_stmt|;
DECL|method|FakeJobInProgress (JobConf jobConf, JobTracker tracker)
name|FakeJobInProgress
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|JobTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|jobConf
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
comment|// initObjects(tracker, numMaps, numReduces);
name|trackerToFailureMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|failTask (TaskAttemptID taskId)
specifier|public
name|void
name|failTask
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|)
block|{
name|super
operator|.
name|failTask
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|TaskInProgress
name|tip
init|=
name|jobtracker
operator|.
name|taskidToTIPMap
operator|.
name|get
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|addFailuresToTrackers
argument_list|(
name|tip
operator|.
name|machineWhereTaskRan
argument_list|(
name|taskId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addFailuresToTrackers (String trackerName)
specifier|public
name|void
name|addFailuresToTrackers
parameter_list|(
name|String
name|trackerName
parameter_list|)
block|{
name|Integer
name|numOfFailures
init|=
name|trackerToFailureMap
operator|.
name|get
argument_list|(
name|trackerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|numOfFailures
operator|==
literal|null
condition|)
block|{
name|numOfFailures
operator|=
literal|0
expr_stmt|;
block|}
name|trackerToFailureMap
operator|.
name|put
argument_list|(
name|trackerName
argument_list|,
name|numOfFailures
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlackListedTrackers ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBlackListedTrackers
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|blackListedTrackers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|trackerToFailureMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|failures
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|tracker
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|failures
operator|.
name|intValue
argument_list|()
operator|>=
name|this
operator|.
name|getJobConf
argument_list|()
operator|.
name|getMaxTaskFailuresPerTracker
argument_list|()
condition|)
block|{
name|blackListedTrackers
operator|.
name|add
argument_list|(
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|blackListedTrackers
return|;
block|}
block|}
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSetup
name|setup
init|=
operator|new
name|TestSetup
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestTaskTrackerBlacklisting
operator|.
name|class
argument_list|)
argument_list|)
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_TRACKER_BLACKLISTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|jobTracker
operator|=
operator|new
name|FakeJobTracker
argument_list|(
name|conf
argument_list|,
operator|(
name|clock
operator|=
operator|new
name|FakeJobTrackerClock
argument_list|()
operator|)
argument_list|,
name|trackers
argument_list|)
expr_stmt|;
name|sendHeartBeat
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|//delete the build/test/logs/ dir
block|}
block|}
decl_stmt|;
return|return
name|setup
return|;
block|}
DECL|method|sendHeartBeat (TaskTrackerHealthStatus status, boolean initialContact)
specifier|private
specifier|static
name|void
name|sendHeartBeat
parameter_list|(
name|TaskTrackerHealthStatus
name|status
parameter_list|,
name|boolean
name|initialContact
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|tracker
range|:
name|trackers
control|)
block|{
name|TaskTrackerStatus
name|tts
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|tracker
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|tracker
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|TaskTrackerHealthStatus
name|healthStatus
init|=
name|tts
operator|.
name|getHealthStatus
argument_list|()
decl_stmt|;
name|healthStatus
operator|.
name|setNodeHealthy
argument_list|(
name|status
operator|.
name|isNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|healthStatus
operator|.
name|setHealthReport
argument_list|(
name|status
operator|.
name|getHealthReport
argument_list|()
argument_list|)
expr_stmt|;
name|healthStatus
operator|.
name|setLastReported
argument_list|(
name|status
operator|.
name|getLastReported
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jobTracker
operator|.
name|heartbeat
argument_list|(
name|tts
argument_list|,
literal|false
argument_list|,
name|initialContact
argument_list|,
literal|false
argument_list|,
name|responseId
argument_list|)
expr_stmt|;
block|}
name|responseId
operator|++
expr_stmt|;
block|}
DECL|method|testTrackerBlacklistingForJobFailures ()
specifier|public
name|void
name|testTrackerBlacklistingForJobFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|runBlackListingJob
argument_list|(
name|jobTracker
argument_list|,
name|trackers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 1 not blacklisted"
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|,
name|exceedsFailuresReasonSet
argument_list|)
expr_stmt|;
name|clock
operator|.
name|jumpADay
operator|=
literal|true
expr_stmt|;
name|sendHeartBeat
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 1 still blacklisted after a day"
argument_list|,
literal|0
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Cleanup the blacklisted trackers.
comment|//Tracker is black listed due to failure count, so clock has to be
comment|//forwarded by a day.
name|clock
operator|.
name|jumpADay
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|testNodeHealthBlackListing ()
specifier|public
name|void
name|testNodeHealthBlackListing
parameter_list|()
throws|throws
name|Exception
block|{
name|TaskTrackerHealthStatus
name|status
init|=
name|getUnhealthyNodeStatus
argument_list|(
literal|"ERROR"
argument_list|)
decl_stmt|;
comment|//Blacklist tracker due to node health failures.
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|checkReasonForBlackListing
argument_list|(
name|host
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
block|}
name|status
operator|.
name|setNodeHealthy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|status
operator|.
name|setLastReported
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setHealthReport
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|//white list tracker so the further test cases can be
comment|//using trackers.
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Trackers still blacklisted after healthy report"
argument_list|,
literal|0
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case to check if the task tracker node health failure statistics    * is populated correctly.    *     * We check the since start property and assume that other properties would    * be populated in a correct manner.    */
DECL|method|testTaskTrackerNodeHealthFailureStatistics ()
specifier|public
name|void
name|testTaskTrackerNodeHealthFailureStatistics
parameter_list|()
throws|throws
name|Exception
block|{
comment|//populate previous failure count, as the job tracker is bought up only
comment|//once in setup of test cases to run all node health blacklist stuff.
name|int
name|failureCount
init|=
name|getFailureCountSinceStart
argument_list|(
name|jobTracker
argument_list|,
name|trackers
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|sendHeartBeat
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|trackers
control|)
block|{
name|assertEquals
argument_list|(
literal|"Failure count updated wrongly for tracker : "
operator|+
name|tracker
argument_list|,
name|failureCount
argument_list|,
name|getFailureCountSinceStart
argument_list|(
name|jobTracker
argument_list|,
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TaskTrackerHealthStatus
name|status
init|=
name|getUnhealthyNodeStatus
argument_list|(
literal|"ERROR"
argument_list|)
decl_stmt|;
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//When the node fails due to health check, the statistics is
comment|//incremented.
name|failureCount
operator|++
expr_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|trackers
control|)
block|{
name|assertEquals
argument_list|(
literal|"Failure count updated wrongly for tracker : "
operator|+
name|tracker
argument_list|,
name|failureCount
argument_list|,
name|getFailureCountSinceStart
argument_list|(
name|jobTracker
argument_list|,
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//even if the node reports unhealthy in next status update we dont
comment|//increment it. We increment the statistics if the node goes back to
comment|//healthy and then becomes unhealthy.
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|trackers
control|)
block|{
name|assertEquals
argument_list|(
literal|"Failure count updated wrongly for tracker : "
operator|+
name|tracker
argument_list|,
name|failureCount
argument_list|,
name|getFailureCountSinceStart
argument_list|(
name|jobTracker
argument_list|,
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//make nodes all healthy, but the failure statistics should be
comment|//carried forward.
name|sendHeartBeat
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tracker
range|:
name|trackers
control|)
block|{
name|assertEquals
argument_list|(
literal|"Failure count updated wrongly for tracker : "
operator|+
name|tracker
argument_list|,
name|failureCount
argument_list|,
name|getFailureCountSinceStart
argument_list|(
name|jobTracker
argument_list|,
name|tracker
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFailureCountSinceStart (JobTracker jt, String tracker)
specifier|private
name|int
name|getFailureCountSinceStart
parameter_list|(
name|JobTracker
name|jt
parameter_list|,
name|String
name|tracker
parameter_list|)
block|{
name|JobTrackerStatistics
name|jtStats
init|=
name|jt
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|StatisticsCollector
name|collector
init|=
name|jtStats
operator|.
name|collector
decl_stmt|;
name|collector
operator|.
name|update
argument_list|()
expr_stmt|;
return|return
name|jtStats
operator|.
name|getTaskTrackerStat
argument_list|(
name|tracker
argument_list|)
operator|.
name|healthCheckFailedStat
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|StatisticsCollector
operator|.
name|SINCE_START
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|testBlackListingWithFailuresAndHealthStatus ()
specifier|public
name|void
name|testBlackListingWithFailuresAndHealthStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|runBlackListingJob
argument_list|(
name|jobTracker
argument_list|,
name|trackers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 1 not blacklisted"
argument_list|,
literal|1
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|,
name|exceedsFailuresReasonSet
argument_list|)
expr_stmt|;
name|TaskTrackerHealthStatus
name|status
init|=
name|getUnhealthyNodeStatus
argument_list|(
literal|"ERROR"
argument_list|)
decl_stmt|;
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All trackers not blacklisted"
argument_list|,
literal|3
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|,
name|unhealthyAndExceedsFailure
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|1
index|]
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|2
index|]
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
name|clock
operator|.
name|jumpADay
operator|=
literal|true
expr_stmt|;
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All trackers not blacklisted"
argument_list|,
literal|3
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|checkReasonForBlackListing
argument_list|(
name|host
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
block|}
comment|//clear blacklisted trackers due to node health reasons.
name|sendHeartBeat
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All trackers not white listed"
argument_list|,
literal|0
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Clear the blacklisted trackers due to failures.
name|clock
operator|.
name|jumpADay
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|testBlacklistingReasonString ()
specifier|public
name|void
name|testBlacklistingReasonString
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|error
init|=
literal|"ERROR"
decl_stmt|;
name|String
name|error1
init|=
literal|"ERROR1"
decl_stmt|;
name|TaskTrackerHealthStatus
name|status
init|=
name|getUnhealthyNodeStatus
argument_list|(
name|error
argument_list|)
decl_stmt|;
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All trackers not blacklisted"
argument_list|,
literal|3
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|1
index|]
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|2
index|]
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//Replace new line as we are adding new line
comment|//in getFaultReport
name|assertEquals
argument_list|(
literal|"Blacklisting reason string not correct for host "
operator|+
name|i
argument_list|,
name|error
argument_list|,
name|jobTracker
operator|.
name|getFaultReport
argument_list|(
name|hosts
index|[
name|i
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|status
operator|.
name|setNodeHealthy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|status
operator|.
name|setLastReported
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setHealthReport
argument_list|(
name|error1
argument_list|)
expr_stmt|;
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|1
index|]
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|2
index|]
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//Replace new line as we are adding new line
comment|//in getFaultReport
name|assertEquals
argument_list|(
literal|"Blacklisting reason string not correct for host "
operator|+
name|i
argument_list|,
name|error1
argument_list|,
name|jobTracker
operator|.
name|getFaultReport
argument_list|(
name|hosts
index|[
name|i
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//clear the blacklisted trackers with node health reasons.
name|sendHeartBeat
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getUnhealthyNodeStatus (String error)
specifier|private
name|TaskTrackerHealthStatus
name|getUnhealthyNodeStatus
parameter_list|(
name|String
name|error
parameter_list|)
block|{
name|TaskTrackerHealthStatus
name|status
init|=
operator|new
name|TaskTrackerHealthStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setNodeHealthy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|status
operator|.
name|setLastReported
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setHealthReport
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
DECL|method|testBlackListingWithTrackerReservation ()
specifier|public
name|void
name|testBlackListingWithTrackerReservation
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|TaskTracker
name|tt1
init|=
name|jobTracker
operator|.
name|getTaskTracker
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|TaskTracker
name|tt2
init|=
name|jobTracker
operator|.
name|getTaskTracker
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|tt1
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|job
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tt1
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|job
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tt2
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|job
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tt2
operator|.
name|reserveSlots
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|job
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 1 not reserved for the job 1"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 1 not reserved for the job 1"
argument_list|,
literal|2
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForReduces
argument_list|()
argument_list|)
expr_stmt|;
name|runBlackListingJob
argument_list|(
name|jobTracker
argument_list|,
name|trackers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 1 not unreserved for the job 1"
argument_list|,
literal|1
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 1 not unreserved for the job 1"
argument_list|,
literal|1
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForReduces
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 1 not blacklisted"
argument_list|,
literal|1
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|,
name|exceedsFailuresReasonSet
argument_list|)
expr_stmt|;
name|TaskTrackerHealthStatus
name|status
init|=
name|getUnhealthyNodeStatus
argument_list|(
literal|"ERROR"
argument_list|)
decl_stmt|;
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All trackers not blacklisted"
argument_list|,
literal|3
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|,
name|unhealthyAndExceedsFailure
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|1
index|]
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
name|checkReasonForBlackListing
argument_list|(
name|hosts
index|[
literal|2
index|]
argument_list|,
name|nodeUnHealthyReasonSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 1 not unreserved for the job 1"
argument_list|,
literal|0
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracker 1 not unreserved for the job 1"
argument_list|,
literal|0
argument_list|,
name|job
operator|.
name|getNumReservedTaskTrackersForReduces
argument_list|()
argument_list|)
expr_stmt|;
comment|//white list all trackers for health reasons and failure counts
name|clock
operator|.
name|jumpADay
operator|=
literal|true
expr_stmt|;
name|sendHeartBeat
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case to test if the cluster status is populated with the right    * blacklist information, which would be used by the {@link JobClient} to    * display information on the Command Line interface.    *     */
DECL|method|testClusterStatusBlacklistedReason ()
specifier|public
name|void
name|testClusterStatusBlacklistedReason
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|error
init|=
literal|"ERROR"
decl_stmt|;
name|String
name|errorWithNewLines
init|=
literal|"ERROR\nERROR"
decl_stmt|;
name|String
name|expectedErrorReport
init|=
literal|"ERROR:ERROR"
decl_stmt|;
comment|// Create an unhealthy tracker health status.
name|Collection
argument_list|<
name|BlackListInfo
argument_list|>
name|blackListedTrackerInfo
init|=
name|jobTracker
operator|.
name|getBlackListedTrackers
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The blacklisted tracker nodes is not empty."
argument_list|,
name|blackListedTrackerInfo
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|TaskTrackerHealthStatus
name|status
init|=
name|getUnhealthyNodeStatus
argument_list|(
name|errorWithNewLines
argument_list|)
decl_stmt|;
comment|// make all tracker unhealthy
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"All trackers not blacklisted"
argument_list|,
literal|3
argument_list|,
name|jobTracker
operator|.
name|getBlacklistedTrackerCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify the new method .getBlackListedTracker() which is
comment|// used by the ClusterStatus to set the list of blacklisted
comment|// tracker.
name|blackListedTrackerInfo
operator|=
name|jobTracker
operator|.
name|getBlackListedTrackers
argument_list|()
expr_stmt|;
comment|// Check if all the black listed tracker information is obtained
comment|// in new method.
name|assertEquals
argument_list|(
literal|"Blacklist tracker info does not contain all trackers"
argument_list|,
literal|3
argument_list|,
name|blackListedTrackerInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify all the trackers are blacklisted for health reasons.
comment|// Also check the health report.
for|for
control|(
name|BlackListInfo
name|bi
range|:
name|blackListedTrackerInfo
control|)
block|{
name|assertEquals
argument_list|(
literal|"Tracker not blacklisted for health reason"
argument_list|,
name|ReasonForBlackListing
operator|.
name|NODE_UNHEALTHY
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|bi
operator|.
name|getReasonForBlackListing
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Tracker blacklist report does not match"
argument_list|,
name|bi
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|expectedErrorReport
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// reset the tracker health status back to normal.
name|sendHeartBeat
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runBlackListingJob
argument_list|(
name|jobTracker
argument_list|,
name|trackers
argument_list|)
expr_stmt|;
name|sendHeartBeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|blackListedTrackerInfo
operator|=
name|jobTracker
operator|.
name|getBlackListedTrackers
argument_list|()
expr_stmt|;
for|for
control|(
name|BlackListInfo
name|bi
range|:
name|blackListedTrackerInfo
control|)
block|{
if|if
condition|(
name|bi
operator|.
name|getTrackerName
argument_list|()
operator|.
name|equals
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Reason for blacklisting of tracker 1 does not contain Unhealthy reasons"
argument_list|,
name|bi
operator|.
name|getReasonForBlackListing
argument_list|()
operator|.
name|contains
argument_list|(
name|ReasonForBlackListing
operator|.
name|NODE_UNHEALTHY
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Reason for blacklisting of tracker 1 does not contain Unhealthy reasons"
argument_list|,
name|bi
operator|.
name|getReasonForBlackListing
argument_list|()
operator|.
name|contains
argument_list|(
name|ReasonForBlackListing
operator|.
name|EXCEEDING_FAILURES
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Blacklist failure does not contain failure report string"
argument_list|,
name|bi
operator|.
name|getBlackListReport
argument_list|()
operator|.
name|contains
argument_list|(
literal|"failures on the tracker"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Tracker not blacklisted for health reason"
argument_list|,
name|ReasonForBlackListing
operator|.
name|NODE_UNHEALTHY
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|bi
operator|.
name|getReasonForBlackListing
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Tracker blacklist report does not match"
argument_list|,
name|bi
operator|.
name|getBlackListReport
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|contains
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|clock
operator|.
name|jumpADay
operator|=
literal|true
expr_stmt|;
name|sendHeartBeat
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs a job which blacklists the first of the tracker    * which is passed to the method.    *     * @param jobTracker JobTracker instance    * @param trackers array of trackers, the method would blacklist    * first element of the array    * @return A job in progress object.    * @throws Exception    */
DECL|method|runBlackListingJob (JobTracker jobTracker, String[] trackers)
specifier|static
name|FakeJobInProgress
name|runBlackListingJob
parameter_list|(
name|JobTracker
name|jobTracker
parameter_list|,
name|String
index|[]
name|trackers
parameter_list|)
throws|throws
name|Exception
block|{
name|TaskAttemptID
index|[]
name|taskAttemptID
init|=
operator|new
name|TaskAttemptID
index|[
literal|3
index|]
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|REDUCE_FAILURES_MAXPERCENT
argument_list|,
literal|".70"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|JobContext
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaxTaskFailuresPerTracker
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|conf
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
name|job
operator|.
name|setClusterSize
argument_list|(
name|trackers
operator|.
name|length
argument_list|)
expr_stmt|;
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|taskAttemptID
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|1
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|2
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|failTask
argument_list|(
name|taskAttemptID
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|failTask
argument_list|(
name|taskAttemptID
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|0
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|taskAttemptID
index|[
literal|1
index|]
operator|=
name|job
operator|.
name|findReduceTask
argument_list|(
name|trackers
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|job
operator|.
name|finishTask
argument_list|(
name|taskAttemptID
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|finalizeJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|checkReasonForBlackListing (String host, Set<ReasonForBlackListing> reasonsForBlackListing)
specifier|private
name|void
name|checkReasonForBlackListing
parameter_list|(
name|String
name|host
parameter_list|,
name|Set
argument_list|<
name|ReasonForBlackListing
argument_list|>
name|reasonsForBlackListing
parameter_list|)
block|{
name|Set
argument_list|<
name|ReasonForBlackListing
argument_list|>
name|rfbs
init|=
name|jobTracker
operator|.
name|getReasonForBlackList
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Reasons for blacklisting of "
operator|+
name|host
operator|+
literal|" does not match"
argument_list|,
name|reasonsForBlackListing
argument_list|,
name|rfbs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

