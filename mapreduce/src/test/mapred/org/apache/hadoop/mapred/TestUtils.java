begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestUtils
specifier|public
class|class
name|TestUtils
block|{
DECL|field|LOG_PATHS
specifier|private
specifier|static
specifier|final
name|Path
index|[]
name|LOG_PATHS
init|=
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
literal|"file:///foo/_logs"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"file:///foo/_logs/"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"_logs/"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"_logs"
argument_list|)
block|}
decl_stmt|;
DECL|field|SUCCEEDED_PATHS
specifier|private
specifier|static
specifier|final
name|Path
index|[]
name|SUCCEEDED_PATHS
init|=
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
literal|"file:///blah/"
operator|+
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
argument_list|)
block|}
decl_stmt|;
DECL|field|PASS_PATHS
specifier|private
specifier|static
specifier|final
name|Path
index|[]
name|PASS_PATHS
init|=
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
literal|"file:///my_logs/blah"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"file:///a/b/c"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"file:///foo/_logs/blah"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"_logs/foo"
argument_list|)
block|,
operator|new
name|Path
argument_list|(
literal|"file:///blah/"
operator|+
name|FileOutputCommitter
operator|.
name|SUCCEEDED_FILE_NAME
operator|+
literal|"/bar"
argument_list|)
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testOutputFilesFilter ()
specifier|public
name|void
name|testOutputFilesFilter
parameter_list|()
block|{
name|PathFilter
name|filter
init|=
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|LOG_PATHS
control|)
block|{
name|assertFalse
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Path
name|p
range|:
name|SUCCEEDED_PATHS
control|)
block|{
name|assertFalse
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Path
name|p
range|:
name|PASS_PATHS
control|)
block|{
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLogFilter ()
specifier|public
name|void
name|testLogFilter
parameter_list|()
block|{
name|PathFilter
name|filter
init|=
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputLogFilter
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|LOG_PATHS
control|)
block|{
name|assertFalse
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Path
name|p
range|:
name|SUCCEEDED_PATHS
control|)
block|{
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Path
name|p
range|:
name|PASS_PATHS
control|)
block|{
name|assertTrue
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

