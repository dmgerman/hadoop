begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|Localizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|MRAsyncDiskService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManager
operator|.
name|toFullPropertyName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JvmManager
operator|.
name|JvmEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskController
operator|.
name|JobInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskController
operator|.
name|TaskControllerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
operator|.
name|RunningJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
operator|.
name|TaskInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|InlineCleanupQueue
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test to verify localization of a job and localization of a task on a  * TaskTracker.  *   */
end_comment

begin_class
DECL|class|TestTaskTrackerLocalization
specifier|public
class|class
name|TestTaskTrackerLocalization
extends|extends
name|TestCase
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|File
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|ROOT_MAPRED_LOCAL_DIR
specifier|private
name|File
name|ROOT_MAPRED_LOCAL_DIR
decl_stmt|;
DECL|field|HADOOP_LOG_DIR
specifier|private
name|File
name|HADOOP_LOG_DIR
decl_stmt|;
DECL|field|PERMISSION_SCRIPT_DIR
specifier|private
specifier|static
name|File
name|PERMISSION_SCRIPT_DIR
decl_stmt|;
DECL|field|PERMISSION_SCRIPT_FILE
specifier|private
specifier|static
name|File
name|PERMISSION_SCRIPT_FILE
decl_stmt|;
DECL|field|PERMISSION_SCRIPT_CONTENT
specifier|private
specifier|static
specifier|final
name|String
name|PERMISSION_SCRIPT_CONTENT
init|=
literal|"ls -l -d $1 | "
operator|+
literal|"awk '{print $1\":\"$3\":\"$4}'"
decl_stmt|;
DECL|field|numLocalDirs
specifier|private
name|int
name|numLocalDirs
init|=
literal|6
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTaskTrackerLocalization
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tracker
specifier|protected
name|TaskTracker
name|tracker
decl_stmt|;
DECL|field|taskTrackerUGI
specifier|protected
name|UserGroupInformation
name|taskTrackerUGI
decl_stmt|;
DECL|field|taskController
specifier|protected
name|TaskController
name|taskController
decl_stmt|;
DECL|field|trackerFConf
specifier|protected
name|JobConf
name|trackerFConf
decl_stmt|;
DECL|field|localizedJobConf
specifier|private
name|JobConf
name|localizedJobConf
decl_stmt|;
DECL|field|jobId
specifier|protected
name|JobID
name|jobId
decl_stmt|;
DECL|field|taskId
specifier|protected
name|TaskAttemptID
name|taskId
decl_stmt|;
DECL|field|task
specifier|protected
name|Task
name|task
decl_stmt|;
DECL|field|localDirs
specifier|protected
name|String
index|[]
name|localDirs
decl_stmt|;
DECL|field|lDirAlloc
specifier|protected
specifier|static
name|LocalDirAllocator
name|lDirAlloc
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
decl_stmt|;
DECL|field|attemptWorkDir
specifier|protected
name|Path
name|attemptWorkDir
decl_stmt|;
DECL|field|attemptLogFiles
specifier|protected
name|File
index|[]
name|attemptLogFiles
decl_stmt|;
DECL|field|localizedTaskConf
specifier|protected
name|JobConf
name|localizedTaskConf
decl_stmt|;
DECL|field|tip
specifier|private
name|TaskInProgress
name|tip
decl_stmt|;
DECL|field|jobConf
specifier|private
name|JobConf
name|jobConf
decl_stmt|;
DECL|field|jobConfFile
specifier|private
name|File
name|jobConfFile
decl_stmt|;
comment|/**    * Dummy method in this base class. Only derived classes will define this    * method for checking if a test can be run.    */
DECL|method|canRun ()
specifier|protected
name|boolean
name|canRun
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|TEST_ROOT_DIR
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|TEST_ROOT_DIR
operator|.
name|exists
argument_list|()
condition|)
block|{
name|TEST_ROOT_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|ROOT_MAPRED_LOCAL_DIR
operator|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"mapred/local"
argument_list|)
expr_stmt|;
name|ROOT_MAPRED_LOCAL_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|HADOOP_LOG_DIR
operator|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"logs"
argument_list|)
expr_stmt|;
name|HADOOP_LOG_DIR
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
name|HADOOP_LOG_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|trackerFConf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|trackerFConf
operator|.
name|set
argument_list|(
name|FileSystem
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|localDirs
operator|=
operator|new
name|String
index|[
name|numLocalDirs
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLocalDirs
condition|;
name|i
operator|++
control|)
block|{
name|localDirs
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|ROOT_MAPRED_LOCAL_DIR
argument_list|,
literal|"0_"
operator|+
name|i
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
name|trackerFConf
operator|.
name|setStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|,
name|localDirs
argument_list|)
expr_stmt|;
name|trackerFConf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Create the job configuration file. Same as trackerConf in this test.
name|jobConf
operator|=
operator|new
name|JobConf
argument_list|(
name|trackerFConf
argument_list|)
expr_stmt|;
comment|// Set job view ACLs in conf sothat validation of contents of jobACLsFile
comment|// can be done against this value. Have both users and groups
name|String
name|jobViewACLs
init|=
literal|"user1,user2, group1,group2"
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
name|jobViewACLs
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|USER_LOG_RETAIN_HOURS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setUser
argument_list|(
name|getJobOwner
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
literal|"default"
decl_stmt|;
comment|// set job queue name in job conf
name|jobConf
operator|.
name|setQueueName
argument_list|(
name|queue
argument_list|)
expr_stmt|;
comment|// Set queue admins acl in job conf similar to what JobClient does so that
comment|// it goes into job conf also.
name|jobConf
operator|.
name|set
argument_list|(
name|toFullPropertyName
argument_list|(
name|queue
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_JOBS
operator|.
name|getAclName
argument_list|()
argument_list|)
argument_list|,
literal|"qAdmin1,qAdmin2 qAdminsGroup1,qAdminsGroup2"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|String
name|jtIdentifier
init|=
literal|"200907202331"
decl_stmt|;
name|jobId
operator|=
operator|new
name|JobID
argument_list|(
name|jtIdentifier
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// JobClient uploads the job jar to the file system and sets it in the
comment|// jobConf.
name|uploadJobJar
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// JobClient uploads the jobConf to the file system.
name|jobConfFile
operator|=
name|uploadJobConf
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// create jobTokens file
name|uploadJobTokensFile
argument_list|()
expr_stmt|;
name|taskTrackerUGI
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|startTracker
argument_list|()
expr_stmt|;
comment|// Set up the task to be localized
name|taskId
operator|=
operator|new
name|TaskAttemptID
argument_list|(
name|jtIdentifier
argument_list|,
name|jobId
operator|.
name|getId
argument_list|()
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|createTask
argument_list|()
expr_stmt|;
comment|// mimic register task
comment|// create the tip
name|tip
operator|=
name|tracker
operator|.
expr|new
name|TaskInProgress
argument_list|(
name|task
argument_list|,
name|trackerFConf
argument_list|)
expr_stmt|;
block|}
DECL|method|startTracker ()
specifier|private
name|void
name|startTracker
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Set up the TaskTracker
name|tracker
operator|=
operator|new
name|TaskTracker
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|setConf
argument_list|(
name|trackerFConf
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|setTaskLogCleanupThread
argument_list|(
operator|new
name|UserLogCleaner
argument_list|(
name|trackerFConf
argument_list|)
argument_list|)
expr_stmt|;
name|initializeTracker
argument_list|()
expr_stmt|;
block|}
DECL|method|initializeTracker ()
specifier|private
name|void
name|initializeTracker
parameter_list|()
throws|throws
name|IOException
block|{
name|tracker
operator|.
name|setIndexCache
argument_list|(
operator|new
name|IndexCache
argument_list|(
name|trackerFConf
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|setTaskMemoryManagerEnabledFlag
argument_list|()
expr_stmt|;
comment|// for test case system FS is the local FS
name|tracker
operator|.
name|systemFS
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|trackerFConf
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|setLocalFileSystem
argument_list|(
name|tracker
operator|.
name|systemFS
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|systemDirectory
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|runningTasks
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|runningJobs
operator|=
operator|new
name|TreeMap
argument_list|<
name|JobID
argument_list|,
name|RunningJob
argument_list|>
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|setAsyncDiskService
argument_list|(
operator|new
name|MRAsyncDiskService
argument_list|(
name|trackerFConf
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|getAsyncDiskService
argument_list|()
operator|.
name|cleanupAllVolumes
argument_list|()
expr_stmt|;
comment|// Set up TaskTracker instrumentation
name|tracker
operator|.
name|setTaskTrackerInstrumentation
argument_list|(
name|TaskTracker
operator|.
name|createInstrumentation
argument_list|(
name|tracker
argument_list|,
name|trackerFConf
argument_list|)
argument_list|)
expr_stmt|;
comment|// setup task controller
name|taskController
operator|=
name|createTaskController
argument_list|()
expr_stmt|;
name|taskController
operator|.
name|setConf
argument_list|(
name|trackerFConf
argument_list|)
expr_stmt|;
name|taskController
operator|.
name|setup
argument_list|()
expr_stmt|;
name|tracker
operator|.
name|setTaskController
argument_list|(
name|taskController
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|setLocalizer
argument_list|(
operator|new
name|Localizer
argument_list|(
name|tracker
operator|.
name|getLocalFileSystem
argument_list|()
argument_list|,
name|localDirs
argument_list|,
name|taskController
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createTaskController ()
specifier|protected
name|TaskController
name|createTaskController
parameter_list|()
block|{
return|return
operator|new
name|DefaultTaskController
argument_list|()
return|;
block|}
DECL|method|createTask ()
specifier|private
name|void
name|createTask
parameter_list|()
throws|throws
name|IOException
block|{
name|task
operator|=
operator|new
name|MapTask
argument_list|(
name|jobConfFile
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|taskId
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|task
operator|.
name|setConf
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
comment|// Set conf. Set user name in particular.
name|task
operator|.
name|setUser
argument_list|(
name|jobConf
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobOwner ()
specifier|protected
name|UserGroupInformation
name|getJobOwner
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
return|;
block|}
comment|/**    * static block setting up the permission script which would be used by the     * checkFilePermissions    */
static|static
block|{
name|PERMISSION_SCRIPT_DIR
operator|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"permission_script_dir"
argument_list|)
expr_stmt|;
name|PERMISSION_SCRIPT_FILE
operator|=
operator|new
name|File
argument_list|(
name|PERMISSION_SCRIPT_DIR
argument_list|,
literal|"getperms.sh"
argument_list|)
expr_stmt|;
if|if
condition|(
name|PERMISSION_SCRIPT_FILE
operator|.
name|exists
argument_list|()
condition|)
block|{
name|PERMISSION_SCRIPT_FILE
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|PERMISSION_SCRIPT_DIR
operator|.
name|exists
argument_list|()
condition|)
block|{
name|PERMISSION_SCRIPT_DIR
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|PERMISSION_SCRIPT_DIR
operator|.
name|mkdir
argument_list|()
expr_stmt|;
try|try
block|{
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|PERMISSION_SCRIPT_FILE
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|PERMISSION_SCRIPT_CONTENT
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fe
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|PERMISSION_SCRIPT_FILE
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param job    * @throws IOException    * @throws FileNotFoundException    */
DECL|method|uploadJobJar (Job job)
specifier|private
name|void
name|uploadJobJar
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
name|File
name|jobJarFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"jobjar-on-dfs.jar"
argument_list|)
decl_stmt|;
name|JarOutputStream
name|jstream
init|=
operator|new
name|JarOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|jobJarFile
argument_list|)
argument_list|)
decl_stmt|;
name|ZipEntry
name|ze
init|=
operator|new
name|ZipEntry
argument_list|(
literal|"lib/lib1.jar"
argument_list|)
decl_stmt|;
name|jstream
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|jstream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|ze
operator|=
operator|new
name|ZipEntry
argument_list|(
literal|"lib/lib2.jar"
argument_list|)
expr_stmt|;
name|jstream
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|jstream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jstream
operator|.
name|finish
argument_list|()
expr_stmt|;
name|jstream
operator|.
name|close
argument_list|()
expr_stmt|;
name|job
operator|.
name|setJar
argument_list|(
name|jobJarFile
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param conf    * @return    * @throws FileNotFoundException    * @throws IOException    */
DECL|method|uploadJobConf (Configuration conf)
specifier|protected
name|File
name|uploadJobConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|File
name|jobConfFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"jobconf-on-dfs.xml"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|jobConfFile
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|jobConfFile
return|;
block|}
comment|/**    * create fake JobTokens file    * @return    * @throws IOException    */
DECL|method|uploadJobTokensFile ()
specifier|protected
name|void
name|uploadJobTokensFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|assertTrue
argument_list|(
literal|"faild to create dir="
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|dir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
comment|// writing empty file, we don't need the keys for this test
operator|new
name|Credentials
argument_list|()
operator|.
name|writeTokenStorageFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"file:///"
operator|+
name|dir
argument_list|,
name|TokenCache
operator|.
name|JOB_TOKEN_HDFS_FILE
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|getFilePermissionAttrs (String path)
specifier|protected
specifier|static
name|String
index|[]
name|getFilePermissionAttrs
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|command
init|=
block|{
literal|"bash"
block|,
name|PERMISSION_SCRIPT_FILE
operator|.
name|getAbsolutePath
argument_list|()
block|,
name|path
block|}
decl_stmt|;
name|String
name|output
init|=
name|Shell
operator|.
name|execCommand
argument_list|(
name|command
argument_list|)
decl_stmt|;
return|return
name|output
operator|.
name|split
argument_list|(
literal|":|\n"
argument_list|)
return|;
block|}
comment|/**    * Utility method to check permission of a given path. Requires the permission    * script directory to be setup in order to call.    *     *     * @param path    * @param expectedPermissions    * @param expectedOwnerUser    * @param expectedOwnerGroup    * @throws IOException    */
DECL|method|checkFilePermissions (String path, String expectedPermissions, String expectedOwnerUser, String expectedOwnerGroup)
specifier|static
name|void
name|checkFilePermissions
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|expectedPermissions
parameter_list|,
name|String
name|expectedOwnerUser
parameter_list|,
name|String
name|expectedOwnerGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|attrs
init|=
name|getFilePermissionAttrs
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File attrs length is not 3 but "
operator|+
name|attrs
operator|.
name|length
argument_list|,
name|attrs
operator|.
name|length
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Path "
operator|+
name|path
operator|+
literal|" has the permissions "
operator|+
name|attrs
index|[
literal|0
index|]
operator|+
literal|" instead of the expected "
operator|+
name|expectedPermissions
argument_list|,
name|attrs
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|expectedPermissions
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Path "
operator|+
name|path
operator|+
literal|" is user owned not by "
operator|+
name|expectedOwnerUser
operator|+
literal|" but by "
operator|+
name|attrs
index|[
literal|1
index|]
argument_list|,
name|attrs
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|expectedOwnerUser
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Path "
operator|+
name|path
operator|+
literal|" is group owned not by "
operator|+
name|expectedOwnerGroup
operator|+
literal|" but by "
operator|+
name|attrs
index|[
literal|2
index|]
argument_list|,
name|attrs
index|[
literal|2
index|]
operator|.
name|equals
argument_list|(
name|expectedOwnerGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the task-controller's setup functionality    *     * @throws IOException    */
DECL|method|testTaskControllerSetup ()
specifier|public
name|void
name|testTaskControllerSetup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Task-controller is already set up in the test's setup method. Now verify.
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
comment|// Verify the local-dir itself.
name|File
name|lDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"localDir "
operator|+
name|lDir
operator|+
literal|" doesn't exists!"
argument_list|,
name|lDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|checkFilePermissions
argument_list|(
name|lDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"drwxr-xr-x"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|taskTrackerUGI
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Verify the pemissions on the userlogs dir
name|File
name|taskLog
init|=
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
decl_stmt|;
name|checkFilePermissions
argument_list|(
name|taskLog
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"drwxr-xr-x"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|taskTrackerUGI
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the localization of a user on the TT.    *     * @throws IOException    */
DECL|method|testUserLocalization ()
specifier|public
name|void
name|testUserLocalization
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// /////////// The main method being tested
name|tracker
operator|.
name|getLocalizer
argument_list|()
operator|.
name|initializeUserDirs
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
comment|// ///////////
comment|// Check the directory structure and permissions
name|checkUserLocalization
argument_list|()
expr_stmt|;
comment|// For the sake of testing re-entrancy of initializeUserDirs(), we remove
comment|// the user directories now and make sure that further calls of the method
comment|// don't create directories any more.
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|TaskTracker
operator|.
name|getUserDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|userDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Uanble to delete "
operator|+
name|userDir
argument_list|)
throw|;
block|}
block|}
comment|// Now call the method again.
name|tracker
operator|.
name|getLocalizer
argument_list|()
operator|.
name|initializeUserDirs
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
comment|// Files should not be created now and so shouldn't be there anymore.
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|TaskTracker
operator|.
name|getUserDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpectedly, user-dir "
operator|+
name|userDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" exists!"
argument_list|,
name|userDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkUserLocalization ()
specifier|protected
name|void
name|checkUserLocalization
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|File
name|localDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
operator|+
name|localDir
operator|+
literal|" isn'task created!"
argument_list|,
name|localDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|taskTrackerSubDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|SUBDIR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"taskTracker sub-dir in the local-dir "
operator|+
name|localDir
operator|+
literal|"is not created!"
argument_list|,
name|taskTrackerSubDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|taskTrackerSubDir
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"user-dir in taskTrackerSubdir "
operator|+
name|taskTrackerSubDir
operator|+
literal|"is not created!"
argument_list|,
name|userDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|checkFilePermissions
argument_list|(
name|userDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"drwx------"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|taskTrackerUGI
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|File
name|jobCache
init|=
operator|new
name|File
argument_list|(
name|userDir
argument_list|,
name|TaskTracker
operator|.
name|JOBCACHE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"jobcache in the userDir "
operator|+
name|userDir
operator|+
literal|" isn't created!"
argument_list|,
name|jobCache
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|checkFilePermissions
argument_list|(
name|jobCache
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"drwx------"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|taskTrackerUGI
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Verify the distributed cache dir.
name|File
name|distributedCacheDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"distributed cache dir "
operator|+
name|distributedCacheDir
operator|+
literal|" doesn't exists!"
argument_list|,
name|distributedCacheDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|checkFilePermissions
argument_list|(
name|distributedCacheDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"drwx------"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|taskTrackerUGI
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test job localization on a TT. Tests localization of job.xml, job.jar and    * corresponding setting of configuration. Also test    * {@link TaskController#initializeJob(JobInitializationContext)}    *     * @throws IOException    */
DECL|method|testJobLocalization ()
specifier|public
name|void
name|testJobLocalization
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|TaskTracker
operator|.
name|RunningJob
name|rjob
init|=
name|tracker
operator|.
name|localizeJob
argument_list|(
name|tip
argument_list|)
decl_stmt|;
name|localizedJobConf
operator|=
name|rjob
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
name|checkJobLocalization
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that, if the job log dir can't be created, the job will fail    * during localization rather than at the time when the task itself    * tries to write into it.    */
DECL|method|testJobLocalizationFailsIfLogDirUnwritable ()
specifier|public
name|void
name|testJobLocalizationFailsIfLogDirUnwritable
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|File
name|logDir
init|=
name|TaskLog
operator|.
name|getJobDir
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|File
name|logDirParent
init|=
name|logDir
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|logDirParent
operator|.
name|mkdirs
argument_list|()
operator|||
name|logDirParent
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|logDirParent
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"000"
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|localizeJob
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"No exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Could not create job user log"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Put it back just to be safe
name|FileUtil
operator|.
name|chmod
argument_list|(
name|logDirParent
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"755"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkJobLocalization ()
specifier|protected
name|void
name|checkJobLocalization
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Check the directory structure
for|for
control|(
name|String
name|dir
range|:
name|localDirs
control|)
block|{
name|File
name|localDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|File
name|taskTrackerSubDir
init|=
operator|new
name|File
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|SUBDIR
argument_list|)
decl_stmt|;
name|File
name|userDir
init|=
operator|new
name|File
argument_list|(
name|taskTrackerSubDir
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|jobCache
init|=
operator|new
name|File
argument_list|(
name|userDir
argument_list|,
name|TaskTracker
operator|.
name|JOBCACHE
argument_list|)
decl_stmt|;
name|File
name|jobDir
init|=
operator|new
name|File
argument_list|(
name|jobCache
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"job-dir in "
operator|+
name|jobCache
operator|+
literal|" isn't created!"
argument_list|,
name|jobDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the private permissions on the job directory
name|checkFilePermissions
argument_list|(
name|jobDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"drwx------"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|taskTrackerUGI
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// check the localization of job.xml
name|assertTrue
argument_list|(
literal|"job.xml is not localized on this TaskTracker!!"
argument_list|,
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getLocalJobConfFile
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// check the localization of job.jar
name|Path
name|jarFileLocalized
init|=
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getJobJarFile
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"job.jar is not localized on this TaskTracker!!"
argument_list|,
name|jarFileLocalized
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"lib/lib1.jar is not unjarred on this TaskTracker!!"
argument_list|,
operator|new
name|File
argument_list|(
name|jarFileLocalized
operator|.
name|getParent
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"lib/lib1.jar"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"lib/lib2.jar is not unjarred on this TaskTracker!!"
argument_list|,
operator|new
name|File
argument_list|(
name|jarFileLocalized
operator|.
name|getParent
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"lib/lib2.jar"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the creation of job work directory
name|assertTrue
argument_list|(
literal|"job-work dir is not created on this TaskTracker!!"
argument_list|,
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getJobWorkDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Check the setting of mapreduce.job.local.dir and job.jar which will eventually be
comment|// used by the user's task
name|boolean
name|jobLocalDirFlag
init|=
literal|false
decl_stmt|,
name|mapredJarFlag
init|=
literal|false
decl_stmt|;
name|String
name|localizedJobLocalDir
init|=
name|localizedJobConf
operator|.
name|get
argument_list|(
name|TaskTracker
operator|.
name|JOB_LOCAL_DIR
argument_list|)
decl_stmt|;
name|String
name|localizedJobJar
init|=
name|localizedJobConf
operator|.
name|getJar
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localizedJobConf
operator|.
name|getStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
control|)
block|{
if|if
condition|(
name|localizedJobLocalDir
operator|.
name|equals
argument_list|(
name|localDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|TaskTracker
operator|.
name|getJobWorkDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|jobLocalDirFlag
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|localizedJobJar
operator|.
name|equals
argument_list|(
name|localDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|TaskTracker
operator|.
name|getJobJarFile
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|mapredJarFlag
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|TaskTracker
operator|.
name|JOB_LOCAL_DIR
operator|+
literal|" is not set properly to the target users directory : "
operator|+
name|localizedJobLocalDir
argument_list|,
name|jobLocalDirFlag
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"mapreduce.job.jar is not set properly to the target users directory : "
operator|+
name|localizedJobJar
argument_list|,
name|mapredJarFlag
argument_list|)
expr_stmt|;
comment|// check job user-log directory permissions
name|File
name|jobLogDir
init|=
name|TaskLog
operator|.
name|getJobDir
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"job log directory "
operator|+
name|jobLogDir
operator|+
literal|" does not exist!"
argument_list|,
name|jobLogDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|checkFilePermissions
argument_list|(
name|jobLogDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"drwx------"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|taskTrackerUGI
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Make sure that the job ACLs file job-acls.xml exists in job userlog dir
name|File
name|jobACLsFile
init|=
operator|new
name|File
argument_list|(
name|jobLogDir
argument_list|,
name|TaskTracker
operator|.
name|jobACLsFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"JobACLsFile is missing in the job userlog dir "
operator|+
name|jobLogDir
argument_list|,
name|jobACLsFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// With default task controller, the job-acls.xml file is owned by TT and
comment|// permissions are 700
name|checkFilePermissions
argument_list|(
name|jobACLsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"-rw-------"
argument_list|,
name|taskTrackerUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|taskTrackerUGI
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|validateJobACLsFileContent
argument_list|()
expr_stmt|;
block|}
comment|// Validate the contents of jobACLsFile ( i.e. user name, job-view-acl, queue
comment|// name and queue-admins-acl ).
DECL|method|validateJobACLsFileContent ()
specifier|protected
name|void
name|validateJobACLsFileContent
parameter_list|()
block|{
name|JobConf
name|jobACLsConf
init|=
name|TaskLogServlet
operator|.
name|getConfFromJobACLsFile
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobACLsConf
operator|.
name|get
argument_list|(
literal|"user.name"
argument_list|)
operator|.
name|equals
argument_list|(
name|localizedJobConf
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobACLsConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|)
operator|.
name|equals
argument_list|(
name|localizedJobConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
name|localizedJobConf
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|equalsIgnoreCase
argument_list|(
name|jobACLsConf
operator|.
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|qACLName
init|=
name|toFullPropertyName
argument_list|(
name|queue
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_JOBS
operator|.
name|getAclName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|jobACLsConf
operator|.
name|get
argument_list|(
name|qACLName
argument_list|)
operator|.
name|equals
argument_list|(
name|localizedJobConf
operator|.
name|get
argument_list|(
name|qACLName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test task localization on a TT.    *     * @throws IOException    */
DECL|method|testTaskLocalization ()
specifier|public
name|void
name|testTaskLocalization
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|TaskTracker
operator|.
name|RunningJob
name|rjob
init|=
name|tracker
operator|.
name|localizeJob
argument_list|(
name|tip
argument_list|)
decl_stmt|;
name|localizedJobConf
operator|=
name|rjob
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
name|initializeTask
argument_list|()
expr_stmt|;
name|checkTaskLocalization
argument_list|()
expr_stmt|;
block|}
DECL|method|initializeTask ()
specifier|private
name|void
name|initializeTask
parameter_list|()
throws|throws
name|IOException
block|{
name|tip
operator|.
name|setJobConf
argument_list|(
name|localizedJobConf
argument_list|)
expr_stmt|;
comment|// ////////// The central method being tested
name|tip
operator|.
name|localizeTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
comment|// //////////
comment|// check the functionality of localizeTask
for|for
control|(
name|String
name|dir
range|:
name|trackerFConf
operator|.
name|getStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
control|)
block|{
name|File
name|attemptDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|TaskTracker
operator|.
name|getLocalTaskDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|taskId
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"attempt-dir "
operator|+
name|attemptDir
operator|+
literal|" in localDir "
operator|+
name|dir
operator|+
literal|" is not created!!"
argument_list|,
name|attemptDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|attemptWorkDir
operator|=
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getTaskWorkDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|task
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"atttempt work dir for "
operator|+
name|taskId
operator|.
name|toString
argument_list|()
operator|+
literal|" is not created in any of the configured dirs!!"
argument_list|,
name|attemptWorkDir
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|TaskRunner
name|runner
init|=
name|task
operator|.
name|createRunner
argument_list|(
name|tracker
argument_list|,
name|tip
argument_list|)
decl_stmt|;
name|tip
operator|.
name|setTaskRunner
argument_list|(
name|runner
argument_list|)
expr_stmt|;
comment|// /////// Few more methods being tested
name|runner
operator|.
name|setupChildTaskConfiguration
argument_list|(
name|lDirAlloc
argument_list|)
expr_stmt|;
name|TaskRunner
operator|.
name|createChildTmpDir
argument_list|(
operator|new
name|File
argument_list|(
name|attemptWorkDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|localizedJobConf
argument_list|)
expr_stmt|;
name|attemptLogFiles
operator|=
name|runner
operator|.
name|prepareLogFiles
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the task-conf file is created
name|Path
name|localTaskFile
init|=
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getTaskConfFile
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|task
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
argument_list|,
name|trackerFConf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Task conf file "
operator|+
name|localTaskFile
operator|.
name|toString
argument_list|()
operator|+
literal|" is not created!!"
argument_list|,
operator|new
name|File
argument_list|(
name|localTaskFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// /////// One more method being tested. This happens in child space.
name|localizedTaskConf
operator|=
operator|new
name|JobConf
argument_list|(
name|localTaskFile
argument_list|)
expr_stmt|;
name|TaskRunner
operator|.
name|setupChildMapredLocalDirs
argument_list|(
name|task
argument_list|,
name|localizedTaskConf
argument_list|)
expr_stmt|;
comment|// ///////
comment|// Initialize task via TaskController
name|TaskControllerContext
name|taskContext
init|=
operator|new
name|TaskController
operator|.
name|TaskControllerContext
argument_list|()
decl_stmt|;
name|taskContext
operator|.
name|env
operator|=
operator|new
name|JvmEnv
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|File
argument_list|(
name|localizedJobConf
operator|.
name|get
argument_list|(
name|TaskTracker
operator|.
name|JOB_LOCAL_DIR
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|localizedJobConf
argument_list|)
expr_stmt|;
name|taskContext
operator|.
name|task
operator|=
name|task
expr_stmt|;
comment|// /////////// The method being tested
name|taskController
operator|.
name|initializeTask
argument_list|(
name|taskContext
argument_list|)
expr_stmt|;
comment|// ///////////
block|}
DECL|method|checkTaskLocalization ()
specifier|protected
name|void
name|checkTaskLocalization
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Make sure that the mapreduce.cluster.local.dir is sandboxed
for|for
control|(
name|String
name|childMapredLocalDir
range|:
name|localizedTaskConf
operator|.
name|getStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
literal|"Local dir "
operator|+
name|childMapredLocalDir
operator|+
literal|" is not sandboxed !!"
argument_list|,
name|childMapredLocalDir
operator|.
name|endsWith
argument_list|(
name|TaskTracker
operator|.
name|getLocalTaskDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|taskId
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sure task task.getJobFile is changed and pointed correctly.
name|assertTrue
argument_list|(
name|task
operator|.
name|getJobFile
argument_list|()
operator|.
name|endsWith
argument_list|(
name|TaskTracker
operator|.
name|getTaskConfFile
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|taskId
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that the tmp directories are created
name|assertTrue
argument_list|(
literal|"tmp dir is not created in workDir "
operator|+
name|attemptWorkDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|attemptWorkDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"tmp"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that the logs are setup properly
name|File
name|logDir
init|=
name|TaskLog
operator|.
name|getAttemptDir
argument_list|(
name|taskId
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"task's log dir "
operator|+
name|logDir
operator|.
name|toString
argument_list|()
operator|+
literal|" doesn't exist!"
argument_list|,
name|logDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|checkFilePermissions
argument_list|(
name|logDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"drwx------"
argument_list|,
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|taskTrackerUGI
operator|.
name|getGroupNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|File
name|expectedStdout
init|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDOUT
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"stdout log file is improper. Expected : "
operator|+
name|expectedStdout
operator|.
name|toString
argument_list|()
operator|+
literal|" Observed : "
operator|+
name|attemptLogFiles
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedStdout
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|attemptLogFiles
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|expectedStderr
init|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|Path
operator|.
name|SEPARATOR
operator|+
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"stderr log file is improper. Expected : "
operator|+
name|expectedStderr
operator|.
name|toString
argument_list|()
operator|+
literal|" Observed : "
operator|+
name|attemptLogFiles
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedStderr
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|attemptLogFiles
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a file in the given dir and set permissions r_xr_xr_x sothat no one    * can delete it directly(without doing chmod).    * Creates dir/subDir and dir/subDir/file    */
DECL|method|createFileAndSetPermissions (JobConf jobConf, Path dir)
specifier|static
name|void
name|createFileAndSetPermissions
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|subDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"subDir"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|subDir
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|subDir
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|java
operator|.
name|io
operator|.
name|DataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"dummy input"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// no write permission for subDir and subDir/file
try|try
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|FileUtil
operator|.
name|chmod
argument_list|(
name|subDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"a=rx"
argument_list|,
literal|true
argument_list|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"chmod failed for "
operator|+
name|subDir
operator|+
literal|";retVal="
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while doing chmod for "
operator|+
name|subDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the removal of $taskid and $tasid/work under mapred-local-dir    * in cases where those directories cannot be deleted without adding    * write permission to the newly created directories under $taskid and    * $taskid/work    * Also see createFileAndSetPermissions for details    */
DECL|method|validateRemoveTaskFiles (boolean needCleanup, boolean jvmReuse, TaskInProgress tip)
name|void
name|validateRemoveTaskFiles
parameter_list|(
name|boolean
name|needCleanup
parameter_list|,
name|boolean
name|jvmReuse
parameter_list|,
name|TaskInProgress
name|tip
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create files and set permissions 555. Verify if task controller sets
comment|// the permissions for TT to delete the taskDir or workDir
name|String
name|dir
init|=
operator|(
operator|!
name|needCleanup
operator|||
name|jvmReuse
operator|)
condition|?
name|TaskTracker
operator|.
name|getTaskWorkDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|task
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|taskId
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
else|:
name|TaskTracker
operator|.
name|getLocalTaskDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|task
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|taskId
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|isTaskCleanupTask
argument_list|()
argument_list|)
decl_stmt|;
name|Path
index|[]
name|paths
init|=
name|tracker
operator|.
name|getLocalFiles
argument_list|(
name|localizedJobConf
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No paths found"
argument_list|,
name|paths
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
if|if
condition|(
name|tracker
operator|.
name|getLocalFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|createFileAndSetPermissions
argument_list|(
name|localizedJobConf
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|InlineCleanupQueue
name|cleanupQueue
init|=
operator|new
name|InlineCleanupQueue
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|setCleanupThread
argument_list|(
name|cleanupQueue
argument_list|)
expr_stmt|;
name|tip
operator|.
name|removeTaskFiles
argument_list|(
name|needCleanup
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
if|if
condition|(
name|jvmReuse
condition|)
block|{
comment|// work dir should still exist and cleanup queue should be empty
name|assertTrue
argument_list|(
literal|"cleanup queue is not empty after removeTaskFiles() in case "
operator|+
literal|"of jvm reuse."
argument_list|,
name|cleanupQueue
operator|.
name|isQueueEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|workDirExists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
if|if
condition|(
name|tracker
operator|.
name|getLocalFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|workDirExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"work dir does not exist in case of jvm reuse"
argument_list|,
name|workDirExists
argument_list|)
expr_stmt|;
comment|// now try to delete the work dir and verify that there are no stale paths
name|JvmManager
operator|.
name|deleteWorkDir
argument_list|(
name|tracker
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Some task files are not deleted!! Number of stale paths is "
operator|+
name|cleanupQueue
operator|.
name|stalePaths
operator|.
name|size
argument_list|()
argument_list|,
name|cleanupQueue
operator|.
name|stalePaths
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates if task cleanup is done properly for a succeeded task    * @throws IOException    */
DECL|method|testTaskFilesRemoval ()
specifier|public
name|void
name|testTaskFilesRemoval
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|testTaskFilesRemoval
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// no needCleanup; no jvmReuse
block|}
comment|/**    * Validates if task cleanup is done properly for a task that is not succeeded    * @throws IOException    */
DECL|method|testFailedTaskFilesRemoval ()
specifier|public
name|void
name|testFailedTaskFilesRemoval
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|testTaskFilesRemoval
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// needCleanup; no jvmReuse
comment|// initialize a cleanupAttempt for the task.
name|task
operator|.
name|setTaskCleanupTask
argument_list|()
expr_stmt|;
comment|// localize task cleanup attempt
name|initializeTask
argument_list|()
expr_stmt|;
name|checkTaskLocalization
argument_list|()
expr_stmt|;
comment|// verify the cleanup of cleanup attempt.
name|testTaskFilesRemoval
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// needCleanup; no jvmReuse
block|}
comment|/**    * Validates if task cleanup is done properly for a succeeded task    * @throws IOException    */
DECL|method|testTaskFilesRemovalWithJvmUse ()
specifier|public
name|void
name|testTaskFilesRemovalWithJvmUse
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|testTaskFilesRemoval
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// no needCleanup; jvmReuse
block|}
comment|/**    * Validates if task cleanup is done properly    */
DECL|method|testTaskFilesRemoval (boolean needCleanup, boolean jvmReuse)
specifier|private
name|void
name|testTaskFilesRemoval
parameter_list|(
name|boolean
name|needCleanup
parameter_list|,
name|boolean
name|jvmReuse
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Localize job and localize task.
name|TaskTracker
operator|.
name|RunningJob
name|rjob
init|=
name|tracker
operator|.
name|localizeJob
argument_list|(
name|tip
argument_list|)
decl_stmt|;
name|localizedJobConf
operator|=
name|rjob
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
if|if
condition|(
name|jvmReuse
condition|)
block|{
name|localizedJobConf
operator|.
name|setNumTasksToExecutePerJvm
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|initializeTask
argument_list|()
expr_stmt|;
comment|// TODO: Let the task run and create files.
comment|// create files and set permissions 555. Verify if task controller sets
comment|// the permissions for TT to delete the task dir or work dir properly
name|validateRemoveTaskFiles
argument_list|(
name|needCleanup
argument_list|,
name|jvmReuse
argument_list|,
name|tip
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test userlogs cleanup.    *     * @throws IOException    */
DECL|method|verifyUserLogsRemoval ()
specifier|private
name|void
name|verifyUserLogsRemoval
parameter_list|()
throws|throws
name|IOException
block|{
comment|// verify user logs cleanup
name|File
name|jobUserLogDir
init|=
name|TaskLog
operator|.
name|getJobDir
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
comment|// Logs should be there before cleanup.
name|assertTrue
argument_list|(
literal|"Userlogs dir "
operator|+
name|jobUserLogDir
operator|+
literal|" is not present as expected!!"
argument_list|,
name|jobUserLogDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|purgeJob
argument_list|(
operator|new
name|KillJobAction
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|getTaskLogCleanupThread
argument_list|()
operator|.
name|processCompletedJobs
argument_list|()
expr_stmt|;
comment|// Logs should be gone after cleanup.
name|assertFalse
argument_list|(
literal|"Userlogs dir "
operator|+
name|jobUserLogDir
operator|+
literal|" is not deleted as expected!!"
argument_list|,
name|jobUserLogDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test job cleanup by doing the following    *   - create files with no write permissions to TT under job-work-dir    *   - create files with no write permissions to TT under task-work-dir    */
DECL|method|testJobFilesRemoval ()
specifier|public
name|void
name|testJobFilesRemoval
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testJobCleanup()"
argument_list|)
expr_stmt|;
comment|// Localize job and localize task.
name|TaskTracker
operator|.
name|RunningJob
name|rjob
init|=
name|tracker
operator|.
name|localizeJob
argument_list|(
name|tip
argument_list|)
decl_stmt|;
name|localizedJobConf
operator|=
name|rjob
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
comment|// Set an inline cleanup queue
name|InlineCleanupQueue
name|cleanupQueue
init|=
operator|new
name|InlineCleanupQueue
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|setCleanupThread
argument_list|(
name|cleanupQueue
argument_list|)
expr_stmt|;
comment|// Create a file in job's work-dir with 555
name|String
name|jobWorkDir
init|=
name|TaskTracker
operator|.
name|getJobWorkDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|task
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
index|[]
name|jPaths
init|=
name|tracker
operator|.
name|getLocalFiles
argument_list|(
name|localizedJobConf
argument_list|,
name|jobWorkDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No paths found for job"
argument_list|,
name|jPaths
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|jPaths
control|)
block|{
if|if
condition|(
name|tracker
operator|.
name|getLocalFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|createFileAndSetPermissions
argument_list|(
name|localizedJobConf
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Initialize task dirs
name|tip
operator|.
name|setJobConf
argument_list|(
name|localizedJobConf
argument_list|)
expr_stmt|;
name|tip
operator|.
name|localizeTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
comment|// Create a file in task local dir with 555
comment|// this is to simply test the case where the jvm reuse is enabled and some
comment|// files in task-attempt-local-dir are left behind to be cleaned up when the
comment|// job finishes.
name|String
name|taskLocalDir
init|=
name|TaskTracker
operator|.
name|getLocalTaskDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|task
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
index|[]
name|tPaths
init|=
name|tracker
operator|.
name|getLocalFiles
argument_list|(
name|localizedJobConf
argument_list|,
name|taskLocalDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No paths found for task"
argument_list|,
name|tPaths
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|tPaths
control|)
block|{
if|if
condition|(
name|tracker
operator|.
name|getLocalFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|createFileAndSetPermissions
argument_list|(
name|localizedJobConf
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove the job work dir
name|tracker
operator|.
name|removeJobFiles
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|,
name|task
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the task-local-dir
name|boolean
name|tLocalDirExists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|tPaths
control|)
block|{
if|if
condition|(
name|tracker
operator|.
name|getLocalFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|tLocalDirExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"Task "
operator|+
name|task
operator|.
name|getTaskID
argument_list|()
operator|+
literal|" local dir exists after cleanup"
argument_list|,
name|tLocalDirExists
argument_list|)
expr_stmt|;
comment|// Verify that the TaskTracker (via the task-controller) cleans up the dirs.
comment|// check the job-work-dir
name|boolean
name|jWorkDirExists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|jPaths
control|)
block|{
if|if
condition|(
name|tracker
operator|.
name|getLocalFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|jWorkDirExists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"Job "
operator|+
name|task
operator|.
name|getJobID
argument_list|()
operator|+
literal|" work dir exists after cleanup"
argument_list|,
name|jWorkDirExists
argument_list|)
expr_stmt|;
comment|// Test userlogs cleanup.
name|verifyUserLogsRemoval
argument_list|()
expr_stmt|;
comment|// Check that the empty $mapred.local.dir/taskTracker/$user dirs are still
comment|// there.
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getUserDir
argument_list|(
name|task
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"User directory "
operator|+
name|userDir
operator|+
literal|" is not present!!"
argument_list|,
name|tracker
operator|.
name|getLocalFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|userDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests TaskTracker restart after the localization.    *     * This tests the following steps:    *     * Localize Job, initialize a task.    * Then restart the Tracker.    * launch a cleanup attempt for the task.    *     * @throws IOException    * @throws InterruptedException    */
DECL|method|testTrackerRestart ()
specifier|public
name|void
name|testTrackerRestart
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Localize job and localize task.
name|TaskTracker
operator|.
name|RunningJob
name|rjob
init|=
name|tracker
operator|.
name|localizeJob
argument_list|(
name|tip
argument_list|)
decl_stmt|;
name|localizedJobConf
operator|=
name|rjob
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
name|initializeTask
argument_list|()
expr_stmt|;
comment|// imitate tracker restart
name|startTracker
argument_list|()
expr_stmt|;
comment|// create a task cleanup attempt
name|createTask
argument_list|()
expr_stmt|;
name|task
operator|.
name|setTaskCleanupTask
argument_list|()
expr_stmt|;
comment|// register task
name|tip
operator|=
name|tracker
operator|.
expr|new
name|TaskInProgress
argument_list|(
name|task
argument_list|,
name|trackerFConf
argument_list|)
expr_stmt|;
comment|// localize the job again.
name|rjob
operator|=
name|tracker
operator|.
name|localizeJob
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|localizedJobConf
operator|=
name|rjob
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
name|checkJobLocalization
argument_list|()
expr_stmt|;
comment|// localize task cleanup attempt
name|initializeTask
argument_list|()
expr_stmt|;
name|checkTaskLocalization
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests TaskTracker re-init after the localization.    *     * This tests the following steps:    *     * Localize Job, initialize a task.    * Then reinit the Tracker.    * launch a cleanup attempt for the task.    *     * @throws IOException    * @throws InterruptedException    */
DECL|method|testTrackerReinit ()
specifier|public
name|void
name|testTrackerReinit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Localize job and localize task.
name|TaskTracker
operator|.
name|RunningJob
name|rjob
init|=
name|tracker
operator|.
name|localizeJob
argument_list|(
name|tip
argument_list|)
decl_stmt|;
name|localizedJobConf
operator|=
name|rjob
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
name|initializeTask
argument_list|()
expr_stmt|;
comment|// imitate tracker reinit
name|initializeTracker
argument_list|()
expr_stmt|;
comment|// create a task cleanup attempt
name|createTask
argument_list|()
expr_stmt|;
name|task
operator|.
name|setTaskCleanupTask
argument_list|()
expr_stmt|;
comment|// register task
name|tip
operator|=
name|tracker
operator|.
expr|new
name|TaskInProgress
argument_list|(
name|task
argument_list|,
name|trackerFConf
argument_list|)
expr_stmt|;
comment|// localize the job again.
name|rjob
operator|=
name|tracker
operator|.
name|localizeJob
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|localizedJobConf
operator|=
name|rjob
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
name|checkJobLocalization
argument_list|()
expr_stmt|;
comment|// localize task cleanup attempt
name|initializeTask
argument_list|()
expr_stmt|;
name|checkTaskLocalization
argument_list|()
expr_stmt|;
block|}
comment|/**    * Localizes a cleanup task and validates permissions.    *     * @throws InterruptedException     * @throws IOException     */
DECL|method|testCleanupTaskLocalization ()
specifier|public
name|void
name|testCleanupTaskLocalization
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|canRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|task
operator|.
name|setTaskCleanupTask
argument_list|()
expr_stmt|;
comment|// register task
name|tip
operator|=
name|tracker
operator|.
expr|new
name|TaskInProgress
argument_list|(
name|task
argument_list|,
name|trackerFConf
argument_list|)
expr_stmt|;
comment|// localize the job.
name|RunningJob
name|rjob
init|=
name|tracker
operator|.
name|localizeJob
argument_list|(
name|tip
argument_list|)
decl_stmt|;
name|localizedJobConf
operator|=
name|rjob
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
name|checkJobLocalization
argument_list|()
expr_stmt|;
comment|// localize task cleanup attempt
name|initializeTask
argument_list|()
expr_stmt|;
name|checkTaskLocalization
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

