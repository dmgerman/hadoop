begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test if JobTracker is resilient to garbage in {@link JTConfig#JT_SYSTEM_DIR}  */
end_comment

begin_class
DECL|class|TestMapredSystemDir
specifier|public
class|class
name|TestMapredSystemDir
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMapredSystemDir
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// dfs ugi
DECL|field|DFS_UGI
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|DFS_UGI
init|=
name|TestMiniMRWithDFSWithDistinctUsers
operator|.
name|createUGI
argument_list|(
literal|"dfs"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// mapred ugi
DECL|field|MR_UGI
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|MR_UGI
init|=
name|TestMiniMRWithDFSWithDistinctUsers
operator|.
name|createUGI
argument_list|(
literal|"mr"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|SYSTEM_DIR_PARENT_PERMISSION
specifier|private
specifier|static
specifier|final
name|FsPermission
name|SYSTEM_DIR_PARENT_PERMISSION
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
decl_stmt|;
comment|// rwxr-xr-x
DECL|field|SYSTEM_DIR_PERMISSION
specifier|private
specifier|static
specifier|final
name|FsPermission
name|SYSTEM_DIR_PERMISSION
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
decl_stmt|;
comment|// rwx------
DECL|method|testGarbledMapredSystemDir ()
specifier|public
name|void
name|testGarbledMapredSystemDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|MiniDFSCluster
name|dfs
init|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start dfs
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.permissions.supergroup"
argument_list|,
literal|"supergroup"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|DFS_UGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// create Configs.SYSTEM_DIR's parent with restrictive permissions.
comment|// So long as the JT has access to the system dir itself it should
comment|// be able to start.
name|Path
name|mapredSysDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_SYSTEM_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|parentDir
init|=
name|mapredSysDir
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|parentDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|SYSTEM_DIR_PARENT_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|mapredSysDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|mapredSysDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|SYSTEM_DIR_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|mapredSysDir
argument_list|,
literal|"mr"
argument_list|,
literal|"mrgroup"
argument_list|)
expr_stmt|;
comment|// start mr (i.e jobtracker)
name|Configuration
name|mrConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|dfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MR_UGI
argument_list|,
operator|new
name|JobConf
argument_list|(
name|mrConf
argument_list|)
argument_list|)
expr_stmt|;
name|JobTracker
name|jobtracker
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
comment|// add garbage to Configs.SYSTEM_DIR
name|Path
name|garbage
init|=
operator|new
name|Path
argument_list|(
name|jobtracker
operator|.
name|getSystemDir
argument_list|()
argument_list|,
literal|"garbage"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|garbage
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|garbage
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|SYSTEM_DIR_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setOwner
argument_list|(
name|garbage
argument_list|,
literal|"test"
argument_list|,
literal|"test-group"
argument_list|)
expr_stmt|;
comment|// stop the jobtracker
name|mr
operator|.
name|stopJobTracker
argument_list|()
expr_stmt|;
name|mr
operator|.
name|getJobTrackerConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|JTConfig
operator|.
name|JT_RESTART_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// start jobtracker but dont wait for it to be up
name|mr
operator|.
name|startJobTracker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// check 5 times .. each time wait for 2 secs to check if the jobtracker
comment|// has crashed or not.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Check #"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|isActive
argument_list|()
condition|)
block|{
return|return;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"JobTracker did not bail out (waited for 10 secs)"
argument_list|,
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

