begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Unit test class to test queue acls  *  */
end_comment

begin_class
DECL|class|TestQueueAclsForCurrentUser
specifier|public
class|class
name|TestQueueAclsForCurrentUser
extends|extends
name|TestCase
block|{
DECL|field|queueManager
specifier|private
name|QueueManager
name|queueManager
decl_stmt|;
DECL|field|conf
specifier|private
name|JobConf
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|currentUGI
name|UserGroupInformation
name|currentUGI
init|=
literal|null
decl_stmt|;
DECL|field|submitAcl
name|String
name|submitAcl
init|=
name|QueueACL
operator|.
name|SUBMIT_JOB
operator|.
name|getAclName
argument_list|()
decl_stmt|;
DECL|field|adminAcl
name|String
name|adminAcl
init|=
name|QueueACL
operator|.
name|ADMINISTER_JOBS
operator|.
name|getAclName
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
block|}
comment|// No access for queues for the user currentUGI
DECL|method|setupConfForNoAccess ()
specifier|private
name|void
name|setupConfForNoAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|currentUGI
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
name|String
name|userName
init|=
name|currentUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|String
index|[]
name|queueNames
init|=
block|{
literal|"qu1"
block|,
literal|"qu2"
block|}
decl_stmt|;
comment|// Only user u1 has access for queue qu1
comment|// Only group g2 has acls for the queue qu2
name|createQueuesConfigFile
argument_list|(
name|queueNames
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"u1"
block|,
literal|" g2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"u1"
block|,
literal|" g2"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|queueManager
operator|=
operator|new
name|QueueManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    *  sets up configuration for acls test.    * @return    */
DECL|method|setupConf (boolean aclSwitch)
specifier|private
name|void
name|setupConf
parameter_list|(
name|boolean
name|aclSwitch
parameter_list|)
throws|throws
name|Exception
block|{
name|currentUGI
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
expr_stmt|;
name|String
name|userName
init|=
name|currentUGI
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|StringBuilder
name|groupNames
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|String
index|[]
name|ugiGroupNames
init|=
name|currentUGI
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
name|int
name|max
init|=
name|ugiGroupNames
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ugiGroupNames
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|groupNames
operator|.
name|append
argument_list|(
name|ugiGroupNames
index|[
name|j
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|<
name|max
condition|)
block|{
name|groupNames
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|groupsAcl
init|=
literal|" "
operator|+
name|groupNames
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//q1 Has acls for all the users, supports both submit and administer
comment|//q2 only u2 has acls for the queues
comment|//q3  Only u2 has submit operation access rest all have administer access
comment|//q4 Only u2 has administer access , anyone can do submit
comment|//qu5 only current user's groups has access
comment|//qu6 only current user has submit access
comment|//qu7 only current user has administrator access
name|String
index|[]
name|queueNames
init|=
block|{
literal|"qu1"
block|,
literal|"qu2"
block|,
literal|"qu3"
block|,
literal|"qu4"
block|,
literal|"qu5"
block|,
literal|"qu6"
block|,
literal|"qu7"
block|}
decl_stmt|;
name|String
index|[]
name|submitAcls
init|=
block|{
literal|"*"
block|,
literal|"u2"
block|,
literal|"u2"
block|,
literal|"*"
block|,
name|groupsAcl
block|,
name|userName
block|,
literal|"u2"
block|}
decl_stmt|;
name|String
index|[]
name|adminsAcls
init|=
block|{
literal|"*"
block|,
literal|"u2"
block|,
literal|"*"
block|,
literal|"u2"
block|,
name|groupsAcl
block|,
literal|"u2"
block|,
name|userName
block|}
decl_stmt|;
name|createQueuesConfigFile
argument_list|(
name|queueNames
argument_list|,
name|submitAcls
argument_list|,
name|adminsAcls
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
name|aclSwitch
argument_list|)
expr_stmt|;
name|queueManager
operator|=
operator|new
name|QueueManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueueAclsForCurrentuser ()
specifier|public
name|void
name|testQueueAclsForCurrentuser
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConf
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QueueAclsInfo
index|[]
name|queueAclsInfoList
init|=
name|queueManager
operator|.
name|getQueueAcls
argument_list|(
name|currentUGI
argument_list|)
decl_stmt|;
name|checkQueueAclsInfo
argument_list|(
name|queueAclsInfoList
argument_list|)
expr_stmt|;
block|}
comment|// Acls are disabled on the mapreduce cluster
DECL|method|testQueueAclsForCurrentUserAclsDisabled ()
specifier|public
name|void
name|testQueueAclsForCurrentUserAclsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConf
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//fetch the acls info for current user.
name|QueueAclsInfo
index|[]
name|queueAclsInfoList
init|=
name|queueManager
operator|.
name|getQueueAcls
argument_list|(
name|currentUGI
argument_list|)
decl_stmt|;
name|checkQueueAclsInfo
argument_list|(
name|queueAclsInfoList
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueueAclsForNoAccess ()
specifier|public
name|void
name|testQueueAclsForNoAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConfForNoAccess
argument_list|()
expr_stmt|;
name|QueueAclsInfo
index|[]
name|queueAclsInfoList
init|=
name|queueManager
operator|.
name|getQueueAcls
argument_list|(
name|currentUGI
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|queueAclsInfoList
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQueueAclsInfo (QueueAclsInfo[] queueAclsInfoList)
specifier|private
name|void
name|checkQueueAclsInfo
parameter_list|(
name|QueueAclsInfo
index|[]
name|queueAclsInfoList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queueAclsInfoList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|QueueAclsInfo
name|acls
init|=
name|queueAclsInfoList
index|[
name|i
index|]
decl_stmt|;
name|String
name|queueName
init|=
name|acls
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|queueName
operator|.
name|contains
argument_list|(
literal|"qu2"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
literal|"qu1"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkAll
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
literal|"qu3"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|adminAcl
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
literal|"qu4"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|submitAcl
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
literal|"qu5"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkAll
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
literal|"qu6"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|submitAcl
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
literal|"qu7"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|adminAcl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queueAclsInfoList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|QueueAclsInfo
name|acls
init|=
name|queueAclsInfoList
index|[
name|i
index|]
decl_stmt|;
name|String
name|queueName
init|=
name|acls
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|checkAll
argument_list|(
name|acls
operator|.
name|getOperations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkAll (String[] operations)
specifier|private
name|boolean
name|checkAll
parameter_list|(
name|String
index|[]
name|operations
parameter_list|)
block|{
name|boolean
name|submit
init|=
literal|false
decl_stmt|;
name|boolean
name|admin
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|operations
control|)
block|{
if|if
condition|(
name|val
operator|.
name|equalsIgnoreCase
argument_list|(
name|submitAcl
argument_list|)
condition|)
name|submit
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|val
operator|.
name|equalsIgnoreCase
argument_list|(
name|adminAcl
argument_list|)
condition|)
name|admin
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|submit
operator|&&
name|admin
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

