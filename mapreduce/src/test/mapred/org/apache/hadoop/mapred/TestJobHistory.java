begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobSubmittedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_comment
comment|/**  *  * testJobHistoryFile  * Run a job that will be succeeded and validate its history file format and  * content.  *  * testJobHistoryJobStatus  * Run jobs that will be (1) succeeded (2) failed (3) killed.  *   Validate job status read from history file in each case.  *  */
end_comment

begin_class
DECL|class|TestJobHistory
specifier|public
class|class
name|TestJobHistory
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJobHistory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
DECL|field|LOG_DIR
specifier|private
specifier|static
specifier|final
name|String
name|LOG_DIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
decl_stmt|;
DECL|field|LOCAL_LOG_DIR_URI
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_LOG_DIR_URI
init|=
operator|new
name|File
argument_list|(
name|LOG_DIR
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
operator|+
literal|"/history"
decl_stmt|;
DECL|field|DIGITS
specifier|private
specifier|static
specifier|final
name|String
name|DIGITS
init|=
literal|"[0-9]+"
decl_stmt|;
comment|// hostname like   /default-rack/host1.foo.com OR host1.foo.com
DECL|field|hostNamePattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|hostNamePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(/(([\\w\\-\\.]+)/)+)?([\\w\\-\\.]+)"
argument_list|)
decl_stmt|;
DECL|field|IP_ADDR
specifier|private
specifier|static
specifier|final
name|String
name|IP_ADDR
init|=
literal|"\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?\\.\\d\\d?\\d?"
decl_stmt|;
DECL|field|trackerNamePattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|trackerNamePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"tracker_"
operator|+
name|hostNamePattern
operator|+
literal|":([\\w\\-\\.]+)/"
operator|+
name|IP_ADDR
operator|+
literal|":"
operator|+
name|DIGITS
argument_list|)
decl_stmt|;
DECL|field|splitsPattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|splitsPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|hostNamePattern
operator|+
literal|"(,"
operator|+
name|hostNamePattern
operator|+
literal|")*"
argument_list|)
decl_stmt|;
DECL|field|taskIDsToAttemptIDs
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|taskIDsToAttemptIDs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//Each Task End seen from history file is added here
DECL|field|taskEnds
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|taskEnds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Validate Format of Job Level Keys, Values read from history file
DECL|method|validateJobLevelKeyValuesFormat (JobInfo jobInfo, String status)
specifier|private
specifier|static
name|void
name|validateJobLevelKeyValuesFormat
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|,
name|String
name|status
parameter_list|)
block|{
name|long
name|submitTime
init|=
name|jobInfo
operator|.
name|getSubmitTime
argument_list|()
decl_stmt|;
name|long
name|launchTime
init|=
name|jobInfo
operator|.
name|getLaunchTime
argument_list|()
decl_stmt|;
name|long
name|finishTime
init|=
name|jobInfo
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid submit time"
argument_list|,
name|submitTime
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"SubmitTime> LaunchTime"
argument_list|,
name|submitTime
operator|<=
name|launchTime
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"LaunchTime> FinishTime"
argument_list|,
name|launchTime
operator|<=
name|finishTime
argument_list|)
expr_stmt|;
name|String
name|stat
init|=
name|jobInfo
operator|.
name|getJobStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected JOB_STATUS \""
operator|+
name|stat
operator|+
literal|"\" is seen in"
operator|+
literal|" history file"
argument_list|,
operator|(
name|status
operator|.
name|equals
argument_list|(
name|stat
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|String
name|priority
init|=
name|jobInfo
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unknown priority for the job in history file"
argument_list|,
operator|(
name|priority
operator|.
name|equals
argument_list|(
literal|"HIGH"
argument_list|)
operator|||
name|priority
operator|.
name|equals
argument_list|(
literal|"LOW"
argument_list|)
operator|||
name|priority
operator|.
name|equals
argument_list|(
literal|"NORMAL"
argument_list|)
operator|||
name|priority
operator|.
name|equals
argument_list|(
literal|"VERY_HIGH"
argument_list|)
operator|||
name|priority
operator|.
name|equals
argument_list|(
literal|"VERY_LOW"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Validate Format of Task Level Keys, Values read from history file
DECL|method|validateTaskLevelKeyValuesFormat (JobInfo job, boolean splitsCanBeEmpty)
specifier|private
specifier|static
name|void
name|validateTaskLevelKeyValuesFormat
parameter_list|(
name|JobInfo
name|job
parameter_list|,
name|boolean
name|splitsCanBeEmpty
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
comment|// validate info of each task
for|for
control|(
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskID
name|tid
init|=
name|task
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|task
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid Start time"
argument_list|,
name|startTime
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|finishTime
init|=
name|task
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Task FINISH_TIME is< START_TIME in history file"
argument_list|,
name|startTime
operator|<
name|finishTime
argument_list|)
expr_stmt|;
comment|// Make sure that the Task type exists and it is valid
name|TaskType
name|type
init|=
name|task
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unknown Task type \""
operator|+
name|type
operator|+
literal|"\" is seen in "
operator|+
literal|"history file for task "
operator|+
name|tid
argument_list|,
operator|(
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|String
name|splits
init|=
name|task
operator|.
name|getSplitLocations
argument_list|()
decl_stmt|;
comment|//order in the condition OR check is important here
if|if
condition|(
operator|!
name|splitsCanBeEmpty
operator|||
name|splits
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Matcher
name|m
init|=
name|splitsPattern
operator|.
name|matcher
argument_list|(
name|splits
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected format of SPLITS \""
operator|+
name|splits
operator|+
literal|"\" is seen"
operator|+
literal|" in history file for task "
operator|+
name|tid
argument_list|,
name|m
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Validate task status
name|String
name|status
init|=
name|task
operator|.
name|getTaskStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected TASK_STATUS \""
operator|+
name|status
operator|+
literal|"\" is seen in"
operator|+
literal|" history file for task "
operator|+
name|tid
argument_list|,
operator|(
name|status
operator|.
name|equals
argument_list|(
literal|"SUCCEEDED"
argument_list|)
operator|||
name|status
operator|.
name|equals
argument_list|(
literal|"FAILED"
argument_list|)
operator|||
name|status
operator|.
name|equals
argument_list|(
literal|"KILLED"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Validate foramt of Task Attempt Level Keys, Values read from history file
DECL|method|validateTaskAttemptLevelKeyValuesFormat (JobInfo job)
specifier|private
specifier|static
name|void
name|validateTaskAttemptLevelKeyValuesFormat
parameter_list|(
name|JobInfo
name|job
parameter_list|)
block|{
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|tasks
init|=
name|job
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
comment|// For each task
for|for
control|(
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
comment|// validate info of each attempt
for|for
control|(
name|TaskAttemptInfo
name|attempt
range|:
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskAttemptID
name|id
init|=
name|attempt
operator|.
name|getAttemptId
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|attempt
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid Start time"
argument_list|,
name|startTime
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|finishTime
init|=
name|attempt
operator|.
name|getFinishTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Task FINISH_TIME is< START_TIME in history file"
argument_list|,
name|startTime
operator|<
name|finishTime
argument_list|)
expr_stmt|;
comment|// Make sure that the Task type exists and it is valid
name|TaskType
name|type
init|=
name|attempt
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unknown Task type \""
operator|+
name|type
operator|+
literal|"\" is seen in "
operator|+
literal|"history file for task attempt "
operator|+
name|id
argument_list|,
operator|(
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
operator|)
argument_list|)
expr_stmt|;
comment|// Validate task status
name|String
name|status
init|=
name|attempt
operator|.
name|getTaskStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected TASK_STATUS \""
operator|+
name|status
operator|+
literal|"\" is seen in"
operator|+
literal|" history file for task attempt "
operator|+
name|id
argument_list|,
operator|(
name|status
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|status
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
name|status
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
comment|// Successful Reduce Task Attempts should have valid SHUFFLE_FINISHED
comment|// time and SORT_FINISHED time
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
operator|&&
name|status
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|shuffleFinishTime
init|=
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|startTime
operator|<
name|shuffleFinishTime
argument_list|)
expr_stmt|;
name|long
name|sortFinishTime
init|=
name|attempt
operator|.
name|getSortFinishTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|shuffleFinishTime
operator|<
name|sortFinishTime
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|&&
name|status
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// Successful MAP Task Attempts should have valid MAP_FINISHED time
name|long
name|mapFinishTime
init|=
name|attempt
operator|.
name|getMapFinishTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|startTime
operator|<
name|mapFinishTime
argument_list|)
expr_stmt|;
block|}
comment|// check if hostname is valid
name|String
name|hostname
init|=
name|attempt
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|Matcher
name|m
init|=
name|hostNamePattern
operator|.
name|matcher
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected Host name of task attempt "
operator|+
name|id
argument_list|,
name|m
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if trackername is valid
name|String
name|trackerName
init|=
name|attempt
operator|.
name|getTrackerName
argument_list|()
decl_stmt|;
name|m
operator|=
name|trackerNamePattern
operator|.
name|matcher
argument_list|(
name|trackerName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected tracker name of task attempt "
operator|+
name|id
argument_list|,
name|m
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|equals
argument_list|(
literal|"KILLED"
argument_list|)
condition|)
block|{
comment|// check if http port is valid
name|int
name|httpPort
init|=
name|attempt
operator|.
name|getHttpPort
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|httpPort
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// check if counters are parsable
name|Counters
name|counters
init|=
name|attempt
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns the conf file name in the same    * @param path path of the jobhistory file    * @param running whether the job is running or completed    */
DECL|method|getPathForConf (Path path, Path dir)
specifier|private
specifier|static
name|Path
name|getPathForConf
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|dir
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|path
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
comment|//TODO this is a hack :(
comment|// jobtracker-hostname_jobtracker-identifier_
name|String
name|id
init|=
name|parts
index|[
literal|0
index|]
operator|+
literal|"_"
operator|+
name|parts
index|[
literal|1
index|]
operator|+
literal|"_"
operator|+
name|parts
index|[
literal|2
index|]
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|id
operator|+
literal|"_conf.xml"
argument_list|)
return|;
block|}
comment|/**    *  Validates the format of contents of history file    *  (1) history file exists and in correct location    *  (2) Verify if the history file is parsable    *  (3) Validate the contents of history file    *     (a) Format of all TIMEs are checked against a regex    *     (b) validate legality/format of job level key, values    *     (c) validate legality/format of task level key, values    *     (d) validate legality/format of attempt level key, values    *     (e) check if all the TaskAttempts, Tasks started are finished.    *         Check finish of each TaskAttemptID against its start to make sure    *         that all TaskAttempts, Tasks started are indeed finished and the    *         history log lines are in the proper order.    *         We want to catch ordering of history lines like    *            Task START    *            Attempt START    *            Task FINISH    *            Attempt FINISH    *         (speculative execution is turned off for this).    * @param id job id    * @param conf job conf    */
DECL|method|validateJobHistoryFileFormat (JobHistory jobHistory, JobID id, JobConf conf, String status, boolean splitsCanBeEmpty)
specifier|public
specifier|static
name|void
name|validateJobHistoryFileFormat
parameter_list|(
name|JobHistory
name|jobHistory
parameter_list|,
name|JobID
name|id
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|String
name|status
parameter_list|,
name|boolean
name|splitsCanBeEmpty
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the history file name
name|Path
name|dir
init|=
name|jobHistory
operator|.
name|getCompletedJobHistoryLocation
argument_list|()
decl_stmt|;
name|String
name|logFileName
init|=
name|getDoneFile
argument_list|(
name|jobHistory
argument_list|,
name|conf
argument_list|,
name|id
argument_list|,
name|dir
argument_list|)
decl_stmt|;
comment|// Framework history log file location
name|Path
name|logFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|logFileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|logFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Check if the history file exists
name|assertTrue
argument_list|(
literal|"History file does not exist"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|logFile
argument_list|)
argument_list|)
expr_stmt|;
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|fileSys
argument_list|,
name|logFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|JobHistoryParser
operator|.
name|JobInfo
name|jobInfo
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
comment|// validate format of job level key, values
name|validateJobLevelKeyValuesFormat
argument_list|(
name|jobInfo
argument_list|,
name|status
argument_list|)
expr_stmt|;
comment|// validate format of task level key, values
name|validateTaskLevelKeyValuesFormat
argument_list|(
name|jobInfo
argument_list|,
name|splitsCanBeEmpty
argument_list|)
expr_stmt|;
comment|// validate format of attempt level key, values
name|validateTaskAttemptLevelKeyValuesFormat
argument_list|(
name|jobInfo
argument_list|)
expr_stmt|;
comment|// check if all the TaskAttempts, Tasks started are finished for
comment|// successful jobs
if|if
condition|(
name|status
operator|.
name|equals
argument_list|(
literal|"SUCCEEDED"
argument_list|)
condition|)
block|{
comment|// Make sure that the lists in taskIDsToAttemptIDs are empty.
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|taskIDsToAttemptIDs
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|taskid
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There are some Tasks which are not finished in history "
operator|+
literal|"file."
argument_list|,
name|taskEnds
operator|.
name|contains
argument_list|(
name|taskid
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|attemptIDs
init|=
name|taskIDsToAttemptIDs
operator|.
name|get
argument_list|(
name|taskid
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptIDs
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Unexpected. TaskID "
operator|+
name|taskid
operator|+
literal|" has task attempt(s)"
operator|+
literal|" that are not finished."
argument_list|,
operator|(
name|attemptIDs
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Validate Job Level Keys, Values read from history file by
comment|// comparing them with the actual values from JT.
DECL|method|validateJobLevelKeyValues (MiniMRCluster mr, RunningJob job, JobInfo jobInfo, JobConf conf)
specifier|private
specifier|static
name|void
name|validateJobLevelKeyValues
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|,
name|RunningJob
name|job
parameter_list|,
name|JobInfo
name|jobInfo
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobInProgress
name|jip
init|=
name|jt
operator|.
name|getJob
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"SUBMIT_TIME of job obtained from history file did not "
operator|+
literal|"match the expected value"
argument_list|,
name|jip
operator|.
name|getStartTime
argument_list|()
operator|==
name|jobInfo
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"LAUNCH_TIME of job obtained from history file did not "
operator|+
literal|"match the expected value"
argument_list|,
name|jip
operator|.
name|getLaunchTime
argument_list|()
operator|==
name|jobInfo
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"FINISH_TIME of job obtained from history file did not "
operator|+
literal|"match the expected value"
argument_list|,
name|jip
operator|.
name|getFinishTime
argument_list|()
operator|==
name|jobInfo
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job Status of job obtained from history file did not "
operator|+
literal|"match the expected value"
argument_list|,
name|jobInfo
operator|.
name|getJobStatus
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SUCCEEDED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job Priority of job obtained from history file did not "
operator|+
literal|"match the expected value"
argument_list|,
name|jip
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|jobInfo
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job Name of job obtained from history file did not "
operator|+
literal|"match the expected value"
argument_list|,
name|conf
operator|.
name|getJobName
argument_list|()
operator|.
name|equals
argument_list|(
name|jobInfo
operator|.
name|getJobname
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"User Name of job obtained from history file did not "
operator|+
literal|"match the expected value"
argument_list|,
name|user
operator|.
name|equals
argument_list|(
name|jobInfo
operator|.
name|getUsername
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate job counters
name|Counters
name|c
init|=
operator|new
name|Counters
argument_list|(
name|jip
operator|.
name|getCounters
argument_list|()
argument_list|)
decl_stmt|;
name|Counters
name|jiCounters
init|=
name|jobInfo
operator|.
name|getTotalCounters
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Counters of job obtained from history file did not "
operator|+
literal|"match the expected value"
argument_list|,
name|c
operator|.
name|equals
argument_list|(
name|jiCounters
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate number of total maps, total reduces, finished maps,
comment|// finished reduces, failed maps, failed recudes
name|assertTrue
argument_list|(
literal|"Unexpected number of total maps in history file"
argument_list|,
name|jobInfo
operator|.
name|getTotalMaps
argument_list|()
operator|==
name|jip
operator|.
name|desiredMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected number of total reduces in history file"
argument_list|,
name|jobInfo
operator|.
name|getTotalReduces
argument_list|()
operator|==
name|jip
operator|.
name|desiredReduces
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected number of finished maps in history file"
argument_list|,
name|jobInfo
operator|.
name|getFinishedMaps
argument_list|()
operator|==
name|jip
operator|.
name|finishedMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected number of finished reduces in history file"
argument_list|,
name|jobInfo
operator|.
name|getFinishedReduces
argument_list|()
operator|==
name|jip
operator|.
name|finishedReduces
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected number of failed maps in history file"
argument_list|,
name|jobInfo
operator|.
name|getFailedMaps
argument_list|()
operator|==
name|jip
operator|.
name|failedMapTasks
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected number of failed reduces in history file"
argument_list|,
name|jobInfo
operator|.
name|getFailedReduces
argument_list|()
operator|==
name|jip
operator|.
name|failedReduceTasks
argument_list|)
expr_stmt|;
block|}
comment|// Validate Task Level Keys, Values read from history file by
comment|// comparing them with the actual values from JT.
DECL|method|validateTaskLevelKeyValues (MiniMRCluster mr, RunningJob job, JobInfo jobInfo)
specifier|private
specifier|static
name|void
name|validateTaskLevelKeyValues
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|,
name|RunningJob
name|job
parameter_list|,
name|JobInfo
name|jobInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobInProgress
name|jip
init|=
name|jt
operator|.
name|getJob
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get the 1st map, 1st reduce, cleanup& setup taskIDs and
comment|// validate their history info
name|TaskID
name|mapTaskId
init|=
operator|new
name|TaskID
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskID
name|reduceTaskId
init|=
operator|new
name|TaskID
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskInProgress
name|cleanups
index|[]
init|=
name|jip
operator|.
name|cleanup
decl_stmt|;
name|TaskID
name|cleanupTaskId
decl_stmt|;
if|if
condition|(
name|cleanups
index|[
literal|0
index|]
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|cleanupTaskId
operator|=
name|cleanups
index|[
literal|0
index|]
operator|.
name|getTIPId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cleanupTaskId
operator|=
name|cleanups
index|[
literal|1
index|]
operator|.
name|getTIPId
argument_list|()
expr_stmt|;
block|}
name|TaskInProgress
name|setups
index|[]
init|=
name|jip
operator|.
name|setup
decl_stmt|;
name|TaskID
name|setupTaskId
decl_stmt|;
if|if
condition|(
name|setups
index|[
literal|0
index|]
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|setupTaskId
operator|=
name|setups
index|[
literal|0
index|]
operator|.
name|getTIPId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setupTaskId
operator|=
name|setups
index|[
literal|1
index|]
operator|.
name|getTIPId
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|tasks
init|=
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
comment|// validate info of the 4 tasks(cleanup, setup, 1st map, 1st reduce)
for|for
control|(
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskID
name|tid
init|=
name|task
operator|.
name|getTaskId
argument_list|()
decl_stmt|;
if|if
condition|(
name|tid
operator|.
name|equals
argument_list|(
name|mapTaskId
argument_list|)
operator|||
name|tid
operator|.
name|equals
argument_list|(
name|reduceTaskId
argument_list|)
operator|||
name|tid
operator|.
name|equals
argument_list|(
name|cleanupTaskId
argument_list|)
operator|||
name|tid
operator|.
name|equals
argument_list|(
name|setupTaskId
argument_list|)
condition|)
block|{
name|TaskInProgress
name|tip
init|=
name|jip
operator|.
name|getTaskInProgress
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskID
operator|.
name|downgrade
argument_list|(
name|tid
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"START_TIME of Task "
operator|+
name|tid
operator|+
literal|" obtained from history "
operator|+
literal|"file did not match the expected value"
argument_list|,
name|tip
operator|.
name|getExecStartTime
argument_list|()
operator|==
name|task
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"FINISH_TIME of Task "
operator|+
name|tid
operator|+
literal|" obtained from history "
operator|+
literal|"file did not match the expected value"
argument_list|,
name|tip
operator|.
name|getExecFinishTime
argument_list|()
operator|==
name|task
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tid
operator|==
name|mapTaskId
condition|)
block|{
comment|//check splits only for map task
name|assertTrue
argument_list|(
literal|"Splits of Task "
operator|+
name|tid
operator|+
literal|" obtained from history file "
operator|+
literal|" did not match the expected value"
argument_list|,
name|tip
operator|.
name|getSplitNodes
argument_list|()
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getSplitLocations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TaskAttemptID
name|attemptId
init|=
name|tip
operator|.
name|getSuccessfulTaskid
argument_list|()
decl_stmt|;
name|TaskStatus
name|ts
init|=
name|tip
operator|.
name|getTaskStatus
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
operator|.
name|downgrade
argument_list|(
name|attemptId
argument_list|)
argument_list|)
decl_stmt|;
comment|// Validate task counters
name|Counters
name|c
init|=
operator|new
name|Counters
argument_list|(
name|ts
operator|.
name|getCounters
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Counters of Task "
operator|+
name|tid
operator|+
literal|" obtained from history file "
operator|+
literal|" did not match the expected value"
argument_list|,
name|c
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Validate Task Attempt Level Keys, Values read from history file by
comment|// comparing them with the actual values from JT.
DECL|method|validateTaskAttemptLevelKeyValues (MiniMRCluster mr, RunningJob job, JobInfo jobInfo)
specifier|private
specifier|static
name|void
name|validateTaskAttemptLevelKeyValues
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|,
name|RunningJob
name|job
parameter_list|,
name|JobInfo
name|jobInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobInProgress
name|jip
init|=
name|jt
operator|.
name|getJob
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|tasks
init|=
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
decl_stmt|;
comment|// For each task
for|for
control|(
name|TaskInfo
name|task
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
comment|// validate info of each attempt
for|for
control|(
name|TaskAttemptInfo
name|attempt
range|:
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|TaskAttemptID
name|attemptId
init|=
name|attempt
operator|.
name|getAttemptId
argument_list|()
decl_stmt|;
name|TaskID
name|tid
init|=
name|attemptId
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|TaskInProgress
name|tip
init|=
name|jip
operator|.
name|getTaskInProgress
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskID
operator|.
name|downgrade
argument_list|(
name|tid
argument_list|)
argument_list|)
decl_stmt|;
name|TaskStatus
name|ts
init|=
name|tip
operator|.
name|getTaskStatus
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
operator|.
name|downgrade
argument_list|(
name|attemptId
argument_list|)
argument_list|)
decl_stmt|;
comment|// Validate task attempt start time
name|assertTrue
argument_list|(
literal|"START_TIME of Task attempt "
operator|+
name|attemptId
operator|+
literal|" obtained from "
operator|+
literal|"history file did not match the expected value"
argument_list|,
name|ts
operator|.
name|getStartTime
argument_list|()
operator|==
name|attempt
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate task attempt finish time
name|assertTrue
argument_list|(
literal|"FINISH_TIME of Task attempt "
operator|+
name|attemptId
operator|+
literal|" obtained from "
operator|+
literal|"history file "
operator|+
name|ts
operator|.
name|getFinishTime
argument_list|()
operator|+
literal|" did not match the expected value, "
operator|+
name|attempt
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|ts
operator|.
name|getFinishTime
argument_list|()
operator|==
name|attempt
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|TaskTrackerStatus
name|ttStatus
init|=
name|jt
operator|.
name|getTaskTrackerStatus
argument_list|(
name|ts
operator|.
name|getTaskTracker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttStatus
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"http port of task attempt "
operator|+
name|attemptId
operator|+
literal|" obtained from "
operator|+
literal|"history file did not match the expected value"
argument_list|,
name|ttStatus
operator|.
name|getHttpPort
argument_list|()
operator|==
name|attempt
operator|.
name|getHttpPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SUCCEEDED"
argument_list|)
condition|)
block|{
name|String
name|ttHostname
init|=
name|jt
operator|.
name|getNode
argument_list|(
name|ttStatus
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// check if hostname is valid
name|assertTrue
argument_list|(
literal|"Host name of task attempt "
operator|+
name|attemptId
operator|+
literal|" obtained from"
operator|+
literal|" history file did not match the expected value"
argument_list|,
name|ttHostname
operator|.
name|equals
argument_list|(
name|attempt
operator|.
name|getHostname
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SUCCEEDED"
argument_list|)
condition|)
block|{
comment|// Validate SHUFFLE_FINISHED time and SORT_FINISHED time of
comment|// Reduce Task Attempts
if|if
condition|(
name|attempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"REDUCE"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"SHUFFLE_FINISHED time of task attempt "
operator|+
name|attemptId
operator|+
literal|" obtained from history file did not match the expected"
operator|+
literal|" value"
argument_list|,
name|ts
operator|.
name|getShuffleFinishTime
argument_list|()
operator|==
name|attempt
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"SORT_FINISHED time of task attempt "
operator|+
name|attemptId
operator|+
literal|" obtained from history file did not match the expected"
operator|+
literal|" value"
argument_list|,
name|ts
operator|.
name|getSortFinishTime
argument_list|()
operator|==
name|attempt
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Validate task counters
name|Counters
name|c
init|=
operator|new
name|Counters
argument_list|(
name|ts
operator|.
name|getCounters
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Counters of Task Attempt "
operator|+
name|attemptId
operator|+
literal|" obtained from "
operator|+
literal|"history file did not match the expected value"
argument_list|,
name|c
operator|.
name|equals
argument_list|(
name|attempt
operator|.
name|getCounters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check if tracker name is valid
name|assertTrue
argument_list|(
literal|"Tracker name of task attempt "
operator|+
name|attemptId
operator|+
literal|" obtained from "
operator|+
literal|"history file did not match the expected value"
argument_list|,
name|ts
operator|.
name|getTaskTracker
argument_list|()
operator|.
name|equals
argument_list|(
name|attempt
operator|.
name|getTrackerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Checks if the history file content is as expected comparing with the    * actual values obtained from JT.    * Job Level, Task Level and Task Attempt Level Keys, Values are validated.    * @param job RunningJob object of the job whose history is to be validated    * @param conf job conf    */
DECL|method|validateJobHistoryFileContent (MiniMRCluster mr, RunningJob job, JobConf conf)
specifier|public
specifier|static
name|void
name|validateJobHistoryFileContent
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|,
name|RunningJob
name|job
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|JobID
name|id
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobHistory
name|jobHistory
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJobHistory
argument_list|()
decl_stmt|;
name|Path
name|doneDir
init|=
name|jobHistory
operator|.
name|getCompletedJobHistoryLocation
argument_list|()
decl_stmt|;
comment|// Get the history file name
name|String
name|logFileName
init|=
name|getDoneFile
argument_list|(
name|jobHistory
argument_list|,
name|conf
argument_list|,
name|id
argument_list|,
name|doneDir
argument_list|)
decl_stmt|;
comment|// Framework history log file location
name|Path
name|logFile
init|=
operator|new
name|Path
argument_list|(
name|doneDir
argument_list|,
name|logFileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|logFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Check if the history file exists
name|assertTrue
argument_list|(
literal|"History file does not exist"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|logFile
argument_list|)
argument_list|)
expr_stmt|;
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|fileSys
argument_list|,
name|logFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|JobHistoryParser
operator|.
name|JobInfo
name|jobInfo
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
comment|// Now the history file contents are available in jobInfo. Let us compare
comment|// them with the actual values from JT.
name|validateJobLevelKeyValues
argument_list|(
name|mr
argument_list|,
name|job
argument_list|,
name|jobInfo
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|validateTaskLevelKeyValues
argument_list|(
name|mr
argument_list|,
name|job
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
name|validateTaskAttemptLevelKeyValues
argument_list|(
name|mr
argument_list|,
name|job
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
comment|// Also JobACLs should be correct
if|if
condition|(
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|areACLsEnabled
argument_list|()
condition|)
block|{
name|AccessControlList
name|acl
init|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
operator|.
name|getAclName
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"VIEW_JOB ACL is not properly logged to history file."
argument_list|,
name|acl
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|jobInfo
operator|.
name|getJobACLs
argument_list|()
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|MODIFY_JOB
operator|.
name|getAclName
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"MODIFY_JOB ACL is not properly logged to history file."
argument_list|,
name|acl
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|jobInfo
operator|.
name|getJobACLs
argument_list|()
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|MODIFY_JOB
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Validate the job queue name
name|assertTrue
argument_list|(
name|jobInfo
operator|.
name|getJobQueueName
argument_list|()
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Tests the case where the log directory is on local disk, the done folder is on HDFS,     * and the default FS is local.    */
DECL|method|testDoneFolderOnHDFS ()
specifier|public
name|void
name|testDoneFolderOnHDFS
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|runDoneFolderTest
argument_list|(
literal|"history_done"
argument_list|,
name|LOCAL_LOG_DIR_URI
argument_list|)
expr_stmt|;
block|}
comment|/**     * Tests the case where the log directory and done folder is on local disk      * and the default FS is local.    */
DECL|method|testDoneFolderNotOnDefaultFileSystem ()
specifier|public
name|void
name|testDoneFolderNotOnDefaultFileSystem
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|runDoneFolderTest
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/history_done"
argument_list|,
name|LOCAL_LOG_DIR_URI
argument_list|)
expr_stmt|;
block|}
comment|/**     * Tests the case where the log directory is on HDFS and done folder is on local disk     * and the default FS is local.    */
DECL|method|testHistoryFolderOnHDFS ()
specifier|public
name|void
name|testHistoryFolderOnHDFS
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|logDir
init|=
literal|"hdfs://localhost:%d/history"
decl_stmt|;
name|runDoneFolderTest
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/done"
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
block|}
DECL|method|runDoneFolderTest (String doneFolder, String historyFolder)
specifier|private
name|void
name|runDoneFolderTest
parameter_list|(
name|String
name|doneFolder
parameter_list|,
name|String
name|historyFolder
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// keep for less time
name|conf
operator|.
name|setLong
argument_list|(
literal|"mapred.jobtracker.retirejob.check"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"mapred.jobtracker.retirejob.interval"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|//set the done folder location
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_COMPLETED_LOCATION
argument_list|,
name|doneFolder
argument_list|)
expr_stmt|;
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|logDir
init|=
name|String
operator|.
name|format
argument_list|(
name|historyFolder
argument_list|,
name|dfsCluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
decl_stmt|;
comment|//set the history folder location
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_LOCATION
argument_list|,
name|logDir
argument_list|)
expr_stmt|;
name|Path
name|logDirPath
init|=
operator|new
name|Path
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|FileSystem
name|logDirFs
init|=
name|logDirPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//there may be some stale files, clean them
if|if
condition|(
name|logDirFs
operator|.
name|exists
argument_list|(
name|logDirPath
argument_list|)
condition|)
block|{
name|boolean
name|deleted
init|=
name|logDirFs
operator|.
name|delete
argument_list|(
name|logDirPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|logDirPath
operator|+
literal|" deleted "
operator|+
name|deleted
argument_list|)
expr_stmt|;
block|}
name|logDirFs
operator|.
name|mkdirs
argument_list|(
name|logDirPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No of file in logDir not correct"
argument_list|,
literal|0
argument_list|,
name|logDirFs
operator|.
name|listStatus
argument_list|(
name|logDirPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|logDirFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|logDirPath
argument_list|,
literal|"f1"
argument_list|)
argument_list|)
expr_stmt|;
name|logDirFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|logDirPath
argument_list|,
literal|"f2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No of file in logDir not correct"
argument_list|,
literal|2
argument_list|,
name|logDirFs
operator|.
name|listStatus
argument_list|(
name|logDirPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Files in logDir did not move to DONE folder"
argument_list|,
literal|0
argument_list|,
name|logDirFs
operator|.
name|listStatus
argument_list|(
name|logDirPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|JobHistory
name|jobHistory
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJobHistory
argument_list|()
decl_stmt|;
name|Path
name|doneDir
init|=
name|jobHistory
operator|.
name|getCompletedJobHistoryLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Files in DONE dir not correct"
argument_list|,
literal|2
argument_list|,
name|doneDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|listStatus
argument_list|(
name|doneDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// run the TCs
name|conf
operator|=
name|mr
operator|.
name|createJobConf
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// clean up
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
literal|"succeed"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"succeed/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"succeed/output"
argument_list|)
decl_stmt|;
comment|//Disable speculative execution
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure that the job is not removed from memory until we do finish
comment|// the validation of history file content
name|conf
operator|.
name|setInt
argument_list|(
literal|"mapred.jobtracker.completeuserjobs.maximum"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Run a job that will be succeeded and validate its history file
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"History DONE folder not correct"
argument_list|,
operator|new
name|Path
argument_list|(
name|doneFolder
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|doneDir
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|JobID
name|id
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|String
name|logFileName
init|=
name|getDoneFile
argument_list|(
name|jobHistory
argument_list|,
name|conf
argument_list|,
name|id
argument_list|,
name|doneDir
argument_list|)
decl_stmt|;
comment|// Framework history log file location
name|Path
name|logFile
init|=
operator|new
name|Path
argument_list|(
name|doneDir
argument_list|,
name|logFileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|logFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Client returned wrong history url"
argument_list|,
name|logFile
operator|.
name|toString
argument_list|()
argument_list|,
name|cluster
operator|.
name|getJobHistoryUrl
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check if the history file exists
name|assertTrue
argument_list|(
literal|"History file does not exist"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|logFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the corresponding conf file exists
name|Path
name|confFile
init|=
name|getPathForConf
argument_list|(
name|logFile
argument_list|,
name|doneDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Config for completed jobs doesnt exist"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|confFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the file exists in a done folder
name|assertTrue
argument_list|(
literal|"Completed job config doesnt exist in the done folder"
argument_list|,
name|doneDir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|confFile
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the file exists in a done folder
name|assertTrue
argument_list|(
literal|"Completed jobs doesnt exist in the done folder"
argument_list|,
name|doneDir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|logFile
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the job file is removed from the history location
name|Path
name|runningJobsHistoryFolder
init|=
name|logFile
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|runningJobHistoryFilename
init|=
operator|new
name|Path
argument_list|(
name|runningJobsHistoryFolder
argument_list|,
name|logFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|runningJobConfFilename
init|=
operator|new
name|Path
argument_list|(
name|runningJobsHistoryFolder
argument_list|,
name|confFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"History file not deleted from the running folder"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|runningJobHistoryFilename
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Config for completed jobs not deleted from running folder"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|runningJobConfFilename
argument_list|)
argument_list|)
expr_stmt|;
name|validateJobHistoryFileFormat
argument_list|(
name|jobHistory
argument_list|,
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|"SUCCEEDED"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateJobHistoryFileContent
argument_list|(
name|mr
argument_list|,
name|job
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// get the job conf filename
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|cleanupLocalFiles
argument_list|(
name|mr
argument_list|)
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Run a job that will be succeeded and validate its history file format    *  and its content.    */
DECL|method|testJobHistoryFile ()
specifier|public
name|void
name|testJobHistoryFile
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// keep for less time
name|conf
operator|.
name|setLong
argument_list|(
literal|"mapred.jobtracker.retirejob.check"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"mapred.jobtracker.retirejob.interval"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|//set the done folder location
name|String
name|doneFolder
init|=
name|TEST_ROOT_DIR
operator|+
literal|"history_done"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_COMPLETED_LOCATION
argument_list|,
name|doneFolder
argument_list|)
expr_stmt|;
comment|// Enable ACLs so that they are logged to history
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// run the TCs
name|conf
operator|=
name|mr
operator|.
name|createJobConf
argument_list|()
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// clean up
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/succeed"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/succeed/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/succeed/output"
argument_list|)
decl_stmt|;
comment|//Disable speculative execution
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// set the job acls
name|conf
operator|.
name|set
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
operator|.
name|getAclName
argument_list|()
argument_list|,
literal|"user1,user2 group1,group2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobACL
operator|.
name|MODIFY_JOB
operator|.
name|getAclName
argument_list|()
argument_list|,
literal|"user3,user4 group3,group4"
argument_list|)
expr_stmt|;
comment|// Make sure that the job is not removed from memory until we do finish
comment|// the validation of history file content
name|conf
operator|.
name|setInt
argument_list|(
literal|"mapred.jobtracker.completeuserjobs.maximum"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Run a job that will be succeeded and validate its history file
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|JobHistory
name|jobHistory
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJobHistory
argument_list|()
decl_stmt|;
name|Path
name|doneDir
init|=
name|jobHistory
operator|.
name|getCompletedJobHistoryLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"History DONE folder not correct"
argument_list|,
name|doneFolder
argument_list|,
name|doneDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JobID
name|id
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|String
name|logFileName
init|=
name|getDoneFile
argument_list|(
name|jobHistory
argument_list|,
name|conf
argument_list|,
name|id
argument_list|,
name|doneDir
argument_list|)
decl_stmt|;
comment|// Framework history log file location
name|Path
name|logFile
init|=
operator|new
name|Path
argument_list|(
name|doneDir
argument_list|,
name|logFileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|logFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Check if the history file exists
name|assertTrue
argument_list|(
literal|"History file does not exist"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|logFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the corresponding conf file exists
name|Path
name|confFile
init|=
name|getPathForConf
argument_list|(
name|logFile
argument_list|,
name|doneDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Config for completed jobs doesnt exist"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|confFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the conf file exists in a done folder
name|assertTrue
argument_list|(
literal|"Completed job config doesnt exist in the done folder"
argument_list|,
name|doneDir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|confFile
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the file exists in a done folder
name|assertTrue
argument_list|(
literal|"Completed jobs doesnt exist in the done folder"
argument_list|,
name|doneDir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|logFile
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the job file is removed from the history location
name|Path
name|runningJobsHistoryFolder
init|=
name|logFile
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Path
name|runningJobHistoryFilename
init|=
operator|new
name|Path
argument_list|(
name|runningJobsHistoryFolder
argument_list|,
name|logFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|runningJobConfFilename
init|=
operator|new
name|Path
argument_list|(
name|runningJobsHistoryFolder
argument_list|,
name|confFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"History file not deleted from the running folder"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|runningJobHistoryFilename
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Config for completed jobs not deleted from running folder"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|runningJobConfFilename
argument_list|)
argument_list|)
expr_stmt|;
name|validateJobHistoryFileFormat
argument_list|(
name|jobHistory
argument_list|,
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|"SUCCEEDED"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateJobHistoryFileContent
argument_list|(
name|mr
argument_list|,
name|job
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// get the job conf filename
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jt
operator|.
name|getLocalJobFilePath
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// check if the file get deleted
while|while
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for "
operator|+
name|file
operator|+
literal|" to be deleted"
argument_list|)
expr_stmt|;
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|cleanupLocalFiles
argument_list|(
name|mr
argument_list|)
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//Returns the file in the done folder
comment|//Waits for sometime to get the file moved to done
DECL|method|getDoneFile (JobHistory jobHistory, JobConf conf, JobID id, Path doneDir)
specifier|private
specifier|static
name|String
name|getDoneFile
parameter_list|(
name|JobHistory
name|jobHistory
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|JobID
name|id
parameter_list|,
name|Path
name|doneDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|name
operator|==
literal|null
operator|&&
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|path
init|=
name|JobHistory
operator|.
name|getJobHistoryFile
argument_list|(
name|jobHistory
operator|.
name|getCompletedJobHistoryLocation
argument_list|()
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|name
operator|=
name|path
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Job history file not created"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
DECL|method|cleanupLocalFiles (MiniMRCluster mr)
specifier|private
name|void
name|cleanupLocalFiles
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|Path
name|sysDir
init|=
operator|new
name|Path
argument_list|(
name|jt
operator|.
name|getSystemDir
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|sysDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|sysDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|jobHistoryDir
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJobHistory
argument_list|()
operator|.
name|getJobHistoryLocation
argument_list|()
decl_stmt|;
name|fs
operator|=
name|jobHistoryDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|jobHistoryDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if the history file has expected job status    * @param id job id    * @param conf job conf    */
DECL|method|validateJobHistoryJobStatus (JobHistory jobHistory, JobID id, JobConf conf, String status)
specifier|private
specifier|static
name|void
name|validateJobHistoryJobStatus
parameter_list|(
name|JobHistory
name|jobHistory
parameter_list|,
name|JobID
name|id
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|String
name|status
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the history file name
name|Path
name|doneDir
init|=
name|jobHistory
operator|.
name|getCompletedJobHistoryLocation
argument_list|()
decl_stmt|;
name|String
name|logFileName
init|=
name|getDoneFile
argument_list|(
name|jobHistory
argument_list|,
name|conf
argument_list|,
name|id
argument_list|,
name|doneDir
argument_list|)
decl_stmt|;
comment|// Framework history log file location
name|Path
name|logFile
init|=
operator|new
name|Path
argument_list|(
name|doneDir
argument_list|,
name|logFileName
argument_list|)
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|logFile
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Check if the history file exists
name|assertTrue
argument_list|(
literal|"History file does not exist"
argument_list|,
name|fileSys
operator|.
name|exists
argument_list|(
name|logFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// check history file permission
name|assertTrue
argument_list|(
literal|"History file permissions does not match"
argument_list|,
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|logFile
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|FsPermission
argument_list|(
name|JobHistory
operator|.
name|HISTORY_FILE_PERMISSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|fileSys
argument_list|,
name|logFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|JobHistoryParser
operator|.
name|JobInfo
name|jobInfo
init|=
name|parser
operator|.
name|parse
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Job Status read from job history file is not the expected"
operator|+
literal|" status"
argument_list|,
name|status
operator|.
name|equals
argument_list|(
name|jobInfo
operator|.
name|getJobStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// run jobs that will be (1) succeeded (2) failed (3) killed
comment|// and validate job status read from history file in each case
DECL|method|testJobHistoryJobStatus ()
specifier|public
name|void
name|testJobHistoryJobStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// run the TCs
name|JobConf
name|conf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// clean up
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/succeedfailkilljob"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/succeedfailkilljob/input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/succeedfailkilljob/output"
argument_list|)
decl_stmt|;
comment|// Run a job that will be succeeded and validate its job status
comment|// existing in history file
name|RunningJob
name|job
init|=
name|UtilsForTests
operator|.
name|runJobSucceed
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
decl_stmt|;
name|JobHistory
name|jobHistory
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJobHistory
argument_list|()
decl_stmt|;
name|validateJobHistoryJobStatus
argument_list|(
name|jobHistory
argument_list|,
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|conf
argument_list|,
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run a job that will be failed and validate its job status
comment|// existing in history file
name|job
operator|=
name|UtilsForTests
operator|.
name|runJobFail
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|validateJobHistoryJobStatus
argument_list|(
name|jobHistory
argument_list|,
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|conf
argument_list|,
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|JobStatus
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run a job that will be killed and validate its job status
comment|// existing in history file
name|job
operator|=
name|UtilsForTests
operator|.
name|runJobKill
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|validateJobHistoryJobStatus
argument_list|(
name|jobHistory
argument_list|,
name|job
operator|.
name|getID
argument_list|()
argument_list|,
name|conf
argument_list|,
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|JobStatus
operator|.
name|KILLED
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|cleanupLocalFiles
argument_list|(
name|mr
argument_list|)
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testHistoryInitWithCorruptFiles ()
specifier|public
name|void
name|testHistoryInitWithCorruptFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Path
name|historyDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|,
literal|"history"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_LOCATION
argument_list|,
name|historyDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUser
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//there may be some stale files, clean them
if|if
condition|(
name|localFs
operator|.
name|exists
argument_list|(
name|historyDir
argument_list|)
condition|)
block|{
name|boolean
name|deleted
init|=
name|localFs
operator|.
name|delete
argument_list|(
name|historyDir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|historyDir
operator|+
literal|" deleted "
operator|+
name|deleted
argument_list|)
expr_stmt|;
block|}
comment|// Start the cluster, create a history file
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobHistory
name|jh
init|=
name|jt
operator|.
name|getJobHistory
argument_list|()
decl_stmt|;
specifier|final
name|JobID
name|jobId
init|=
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_200809171136_0001"
argument_list|)
decl_stmt|;
name|jh
operator|.
name|setupEventWriter
argument_list|(
name|jobId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
init|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
name|JobSubmittedEvent
name|jse
init|=
operator|new
name|JobSubmittedEvent
argument_list|(
name|jobId
argument_list|,
literal|"job"
argument_list|,
literal|"user"
argument_list|,
literal|12345
argument_list|,
literal|"path"
argument_list|,
name|jobACLs
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|jh
operator|.
name|logEvent
argument_list|(
name|jse
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|jh
operator|.
name|closeWriter
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
comment|// Corrupt the history file. User RawLocalFileSystem so that we
comment|// do keep the original CRC file intact.
name|String
name|historyFileName
init|=
name|jobId
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
literal|"user"
decl_stmt|;
name|Path
name|historyFilePath
init|=
operator|new
name|Path
argument_list|(
name|historyDir
operator|.
name|toString
argument_list|()
argument_list|,
name|historyFileName
argument_list|)
decl_stmt|;
name|RawLocalFileSystem
name|fs
init|=
operator|(
name|RawLocalFileSystem
operator|)
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|historyFilePath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|corruptData
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|corruptData
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|corruptData
argument_list|,
literal|0
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Stop and start the tracker. The tracker should come up nicely
name|mr
operator|.
name|stopJobTracker
argument_list|()
expr_stmt|;
name|mr
operator|.
name|startJobTracker
argument_list|()
expr_stmt|;
name|jt
operator|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"JobTracker did not come up"
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|jh
operator|=
name|jt
operator|.
name|getJobHistory
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"JobHistory did not get initialized correctly"
argument_list|,
name|jh
argument_list|)
expr_stmt|;
comment|// Only the done folder should remain in the history directory
name|assertEquals
argument_list|(
literal|"Files in logDir did not move to DONE folder"
argument_list|,
literal|1
argument_list|,
name|historyDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|listStatus
argument_list|(
name|historyDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|cleanupLocalFiles
argument_list|(
name|mr
argument_list|)
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

