begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_class
DECL|class|TestTaskTrackerInstrumentation
specifier|public
class|class
name|TestTaskTrackerInstrumentation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTaskTrackerInstrumentation
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testCreateInstrumentationWithSingleClass ()
specifier|public
name|void
name|testCreateInstrumentationWithSingleClass
parameter_list|()
block|{
comment|// Check that if only a single instrumentation class is given,
comment|// that class is used directly
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_INSTRUMENTATION
argument_list|,
name|DummyTaskTrackerInstrumentation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TaskTracker
name|tracker
init|=
operator|new
name|TaskTracker
argument_list|()
decl_stmt|;
name|TaskTrackerInstrumentation
name|inst
init|=
name|TaskTracker
operator|.
name|createInstrumentation
argument_list|(
name|tracker
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DummyTaskTrackerInstrumentation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|inst
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateInstrumentationWithMultipleClasses ()
specifier|public
name|void
name|testCreateInstrumentationWithMultipleClasses
parameter_list|()
block|{
comment|// Set up configuration to create two dummy instrumentation objects
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|String
name|dummyClass
init|=
name|DummyTaskTrackerInstrumentation
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|classList
init|=
name|dummyClass
operator|+
literal|","
operator|+
name|dummyClass
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_INSTRUMENTATION
argument_list|,
name|classList
argument_list|)
expr_stmt|;
name|TaskTracker
name|tracker
init|=
operator|new
name|TaskTracker
argument_list|()
decl_stmt|;
comment|// Check that a composite instrumentation object is created
name|TaskTrackerInstrumentation
name|inst
init|=
name|TaskTracker
operator|.
name|createInstrumentation
argument_list|(
name|tracker
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|CompositeTaskTrackerInstrumentation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|inst
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that each member of the composite is a dummy instrumentation
name|CompositeTaskTrackerInstrumentation
name|comp
init|=
operator|(
name|CompositeTaskTrackerInstrumentation
operator|)
name|inst
decl_stmt|;
name|List
argument_list|<
name|TaskTrackerInstrumentation
argument_list|>
name|insts
init|=
name|comp
operator|.
name|getInstrumentations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|insts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DummyTaskTrackerInstrumentation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|insts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DummyTaskTrackerInstrumentation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|insts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateInstrumentationWithDefaultClass ()
specifier|public
name|void
name|testCreateInstrumentationWithDefaultClass
parameter_list|()
block|{
comment|// Check that if no instrumentation class is given, the default
comment|// class (TaskTrackerMetricsInst) is used.
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|TaskTracker
name|tracker
init|=
operator|new
name|TaskTracker
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Needed to avoid NullPointerExcepton in
comment|// TaskTrackerMetricsInst constructor
name|TaskTrackerInstrumentation
name|inst
init|=
name|TaskTracker
operator|.
name|createInstrumentation
argument_list|(
name|tracker
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TaskTrackerMetricsInst
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|inst
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateInstrumentationWithEmptyParam ()
specifier|public
name|void
name|testCreateInstrumentationWithEmptyParam
parameter_list|()
block|{
comment|// Check that if an empty string is given, the default instrumentation
comment|// class (TaskTrackerMetricsInst) is used. An error message should also
comment|// be written to the log, but we do not capture that.
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_INSTRUMENTATION
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|TaskTracker
name|tracker
init|=
operator|new
name|TaskTracker
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Needed to avoid NullPointerExcepton in
comment|// TaskTrackerMetricsInst constructor
name|TaskTrackerInstrumentation
name|inst
init|=
name|TaskTracker
operator|.
name|createInstrumentation
argument_list|(
name|tracker
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TaskTrackerMetricsInst
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|inst
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateInstrumentationWithInvalidParam ()
specifier|public
name|void
name|testCreateInstrumentationWithInvalidParam
parameter_list|()
block|{
comment|// Check that if an invalid class list is given, the default
comment|// instrumentation class (TaskTrackerMetricsInst) is used. An error
comment|// should also be written to the log, but we do not capture that.
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_INSTRUMENTATION
argument_list|,
literal|"XYZ,ZZY"
argument_list|)
expr_stmt|;
name|TaskTracker
name|tracker
init|=
operator|new
name|TaskTracker
argument_list|()
decl_stmt|;
name|tracker
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Needed to avoid NullPointerExcepton in
comment|// TaskTrackerMetricsInst constructor
name|TaskTrackerInstrumentation
name|inst
init|=
name|TaskTracker
operator|.
name|createInstrumentation
argument_list|(
name|tracker
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TaskTrackerMetricsInst
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|inst
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

