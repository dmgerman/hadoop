begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
DECL|class|TestInputPath
specifier|public
class|class
name|TestInputPath
extends|extends
name|TestCase
block|{
DECL|method|testInputPath ()
specifier|public
name|void
name|testInputPath
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Path
name|workingDir
init|=
name|jobConf
operator|.
name|getWorkingDirectory
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
literal|"xx{y"
operator|+
name|StringUtils
operator|.
name|COMMA_STR
operator|+
literal|"z}"
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|Path
index|[]
name|paths
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|pathStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|pathStr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|paths
operator|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
literal|"xx"
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|)
expr_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|pathStr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|path1
init|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
literal|"yy"
operator|+
name|StringUtils
operator|.
name|COMMA_STR
operator|+
literal|"zz"
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|jobConf
argument_list|,
name|path1
argument_list|)
expr_stmt|;
name|paths
operator|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|path
argument_list|,
name|path1
argument_list|)
expr_stmt|;
name|paths
operator|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
index|[]
name|input
init|=
operator|new
name|Path
index|[]
block|{
name|path
block|,
name|path1
block|}
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|paths
operator|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|str1
init|=
literal|"{a{b,c},de}"
decl_stmt|;
name|String
name|str2
init|=
literal|"xyz"
decl_stmt|;
name|String
name|str3
init|=
literal|"x{y,z}"
decl_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|str1
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|str2
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|str3
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|pathStr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|paths
operator|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|str1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|str2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|str3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|str4
init|=
literal|"abc"
decl_stmt|;
name|String
name|str5
init|=
literal|"pq{r,s}"
decl_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|str4
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA
argument_list|)
expr_stmt|;
name|pathStr
operator|.
name|append
argument_list|(
name|str5
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPaths
argument_list|(
name|jobConf
argument_list|,
name|pathStr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|paths
operator|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|str1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|str2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|str3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|str4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|3
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|str5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|paths
index|[
literal|4
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

