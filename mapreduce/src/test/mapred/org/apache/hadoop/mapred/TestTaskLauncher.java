begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
operator|.
name|TaskInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
operator|.
name|TaskLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests {@link TaskLauncher}  *   */
end_comment

begin_class
DECL|class|TestTaskLauncher
specifier|public
class|class
name|TestTaskLauncher
block|{
DECL|field|expectedLaunchAttemptId
specifier|private
specifier|static
name|int
name|expectedLaunchAttemptId
init|=
literal|1
decl_stmt|;
DECL|class|MyTaskTracker
specifier|private
specifier|static
class|class
name|MyTaskTracker
extends|extends
name|TaskTracker
block|{
comment|// override startNewTask just to set the runState,
comment|// not to launch the task really
annotation|@
name|Override
DECL|method|startNewTask (TaskInProgress tip)
name|void
name|startNewTask
parameter_list|(
name|TaskInProgress
name|tip
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedLaunchAttemptId
argument_list|,
name|tip
operator|.
name|getTask
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|tip
operator|.
name|getStatus
argument_list|()
operator|.
name|setRunState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the case "task waiting to be launched is killed externally".    *     * Launches a task which will wait for ever to get slots. Kill the    * task and see if launcher is able to come out of the wait and pickup a    * another task.    *     * @throws IOException    */
annotation|@
name|Test
DECL|method|testExternalKillForLaunchTask ()
specifier|public
name|void
name|testExternalKillForLaunchTask
parameter_list|()
throws|throws
name|IOException
block|{
comment|// setup a TaskTracker
name|JobConf
name|ttConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|ttConf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_MAP_SLOTS
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|TaskTracker
name|tt
init|=
operator|new
name|MyTaskTracker
argument_list|()
decl_stmt|;
name|tt
operator|.
name|runningTasks
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|tt
operator|.
name|setConf
argument_list|(
name|ttConf
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setIndexCache
argument_list|(
operator|new
name|IndexCache
argument_list|(
name|ttConf
argument_list|)
argument_list|)
expr_stmt|;
name|tt
operator|.
name|setTaskMemoryManagerEnabledFlag
argument_list|()
expr_stmt|;
comment|// Set up TaskTracker instrumentation
name|tt
operator|.
name|setTaskTrackerInstrumentation
argument_list|(
name|TaskTracker
operator|.
name|createInstrumentation
argument_list|(
name|tt
argument_list|,
name|tt
operator|.
name|getJobConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// start map-task launcher with four slots
name|TaskLauncher
name|mapLauncher
init|=
name|tt
operator|.
expr|new
name|TaskLauncher
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|mapLauncher
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// launch a task which requires five slots
name|String
name|jtId
init|=
literal|"test"
decl_stmt|;
name|TaskAttemptID
name|attemptID
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|jtId
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|MapTask
argument_list|(
literal|null
argument_list|,
name|attemptID
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|mapLauncher
operator|.
name|addToTaskQueue
argument_list|(
operator|new
name|LaunchTaskAction
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that task is added to runningTasks
name|TaskInProgress
name|killTip
init|=
name|tt
operator|.
name|runningTasks
operator|.
name|get
argument_list|(
name|attemptID
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|killTip
argument_list|)
expr_stmt|;
comment|// wait for a while for launcher to pick up the task
comment|// this loop waits atmost for 30 seconds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|mapLauncher
operator|.
name|getNumWaitingTasksToLaunch
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Launcher didnt pick up the task "
operator|+
name|attemptID
operator|+
literal|"to launch"
argument_list|,
literal|0
argument_list|,
name|mapLauncher
operator|.
name|getNumWaitingTasksToLaunch
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now, that launcher has picked up the task, it waits until all five slots
comment|// are available. i.e. it waits for-ever
comment|// lets kill the task so that map launcher comes out
name|tt
operator|.
name|processKillTaskAction
argument_list|(
operator|new
name|KillTaskAction
argument_list|(
name|attemptID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|,
name|killTip
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// launch another attempt which requires only one slot
name|TaskAttemptID
name|runningAttemptID
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|jtId
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|,
name|expectedLaunchAttemptId
argument_list|)
decl_stmt|;
name|mapLauncher
operator|.
name|addToTaskQueue
argument_list|(
operator|new
name|LaunchTaskAction
argument_list|(
operator|new
name|MapTask
argument_list|(
literal|null
argument_list|,
name|runningAttemptID
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TaskInProgress
name|runningTip
init|=
name|tt
operator|.
name|runningTasks
operator|.
name|get
argument_list|(
name|runningAttemptID
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|runningTip
argument_list|)
expr_stmt|;
comment|// wait for a while for the task to be launched
comment|// this loop waits at most for 30 seconds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|runningTip
operator|.
name|getRunState
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
condition|)
block|{
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// verify that the task went to running
name|assertEquals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|runningTip
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

