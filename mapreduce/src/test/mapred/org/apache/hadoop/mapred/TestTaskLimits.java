begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test configured task limits.  */
end_comment

begin_class
DECL|class|TestTaskLimits
specifier|public
class|class
name|TestTaskLimits
extends|extends
name|TestCase
block|{
DECL|method|runTest (int maxTasks, int numMaps, int numReds, boolean shouldFail)
specifier|static
name|void
name|runTest
parameter_list|(
name|int
name|maxTasks
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReds
parameter_list|,
name|boolean
name|shouldFail
parameter_list|)
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JTConfig
operator|.
name|JT_TASKS_PER_JOB
argument_list|,
name|maxTasks
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_HANDLER_COUNT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|MiniMRCluster
name|mr
init|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobConf
name|jc
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|jc
operator|.
name|setNumMapTasks
argument_list|(
name|numMaps
argument_list|)
expr_stmt|;
name|jc
operator|.
name|setNumReduceTasks
argument_list|(
name|numReds
argument_list|)
expr_stmt|;
name|JobInProgress
name|jip
init|=
operator|new
name|JobInProgress
argument_list|(
operator|new
name|JobID
argument_list|()
argument_list|,
name|jc
argument_list|,
name|jt
argument_list|)
decl_stmt|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|jip
operator|.
name|checkTaskLimits
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|shouldFail
argument_list|,
name|failed
argument_list|)
expr_stmt|;
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testBeyondLimits ()
specifier|public
name|void
name|testBeyondLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Max tasks is 4, Requested is 8, shouldFail = true
name|runTest
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskWithinLimits ()
specifier|public
name|void
name|testTaskWithinLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Max tasks is 4, requested is 4, shouldFail = false
name|runTest
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskWithoutLimits ()
specifier|public
name|void
name|testTaskWithoutLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// No task limit, requested is 16, shouldFail = false
name|runTest
argument_list|(
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

