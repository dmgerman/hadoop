begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|TestProcfsBasedProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ExitCodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test Kill Job that has tasks with children and checks if the  * children(subprocesses of java task) are also killed when a task is killed.  */
end_comment

begin_class
DECL|class|TestKillSubProcesses
specifier|public
class|class
name|TestKillSubProcesses
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|volatile
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestKillSubProcesses
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BASE_TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|BASE_TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
name|BASE_TEST_ROOT_DIR
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"killSubProcesses"
decl_stmt|;
DECL|field|scriptDir
specifier|private
specifier|static
name|Path
name|scriptDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"script"
argument_list|)
decl_stmt|;
DECL|field|scriptDirName
specifier|private
specifier|static
name|String
name|scriptDirName
init|=
name|scriptDir
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
DECL|field|signalFile
specifier|private
specifier|static
name|Path
name|signalFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/script/signalFile"
argument_list|)
decl_stmt|;
DECL|field|jobClient
specifier|private
specifier|static
name|JobClient
name|jobClient
init|=
literal|null
decl_stmt|;
DECL|field|mr
specifier|static
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
DECL|field|pid
specifier|private
specifier|static
name|String
name|pid
init|=
literal|null
decl_stmt|;
comment|// number of levels in the subtree of subprocesses of map task
DECL|field|numLevelsOfSubProcesses
specifier|private
specifier|static
name|int
name|numLevelsOfSubProcesses
init|=
literal|4
decl_stmt|;
comment|/**    * Runs a job, kills the job and verifies if the map task and its    * subprocesses are also killed properly or not.    */
DECL|method|runKillingJobAndValidate (JobTracker jt, JobConf conf)
specifier|private
specifier|static
name|void
name|runKillingJobAndValidate
parameter_list|(
name|JobTracker
name|jt
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setJobName
argument_list|(
literal|"testkilljobsubprocesses"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|KillingMapperWithChildren
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|runJobAndSetProcessHandle
argument_list|(
name|jt
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// kill the job now
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
while|while
condition|(
name|job
operator|.
name|cleanupProgress
argument_list|()
operator|==
literal|0.0f
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"sleep is interrupted:"
operator|+
name|ie
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|validateKillingSubprocesses
argument_list|(
name|job
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Checking the Job status
name|assertEquals
argument_list|(
name|job
operator|.
name|getJobState
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs a job that will fail and verifies if the subprocesses of failed map    * task are killed properly or not.    */
DECL|method|runFailingJobAndValidate (JobTracker jt, JobConf conf)
specifier|private
specifier|static
name|void
name|runFailingJobAndValidate
parameter_list|(
name|JobTracker
name|jt
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setJobName
argument_list|(
literal|"testfailjobsubprocesses"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|FailingMapperWithChildren
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// We don't want to run the failing map task 4 times. So we run it once and
comment|// check if all the subprocesses are killed properly.
name|conf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|runJobAndSetProcessHandle
argument_list|(
name|jt
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|signalTask
argument_list|(
name|signalFile
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|validateKillingSubprocesses
argument_list|(
name|job
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Checking the Job status
name|assertEquals
argument_list|(
name|job
operator|.
name|getJobState
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs a job that will succeed and verifies if the subprocesses of succeeded    * map task are killed properly or not.    */
DECL|method|runSuccessfulJobAndValidate (JobTracker jt, JobConf conf)
specifier|private
specifier|static
name|void
name|runSuccessfulJobAndValidate
parameter_list|(
name|JobTracker
name|jt
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setJobName
argument_list|(
literal|"testsucceedjobsubprocesses"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|MapperWithChildren
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|job
init|=
name|runJobAndSetProcessHandle
argument_list|(
name|jt
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|signalTask
argument_list|(
name|signalFile
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|validateKillingSubprocesses
argument_list|(
name|job
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Checking the Job status
name|assertEquals
argument_list|(
name|job
operator|.
name|getJobState
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs the given job and saves the pid of map task.    * Also checks if the subprocesses of map task are alive.    */
DECL|method|runJobAndSetProcessHandle (JobTracker jt, JobConf conf)
specifier|private
specifier|static
name|RunningJob
name|runJobAndSetProcessHandle
parameter_list|(
name|JobTracker
name|jt
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|RunningJob
name|job
init|=
name|runJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
name|job
operator|.
name|getJobState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
name|pid
operator|=
literal|null
expr_stmt|;
name|jobClient
operator|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// get the taskAttemptID of the map task and use it to get the pid
comment|// of map task
name|TaskReport
index|[]
name|mapReports
init|=
name|jobClient
operator|.
name|getMapTaskReports
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|JobInProgress
name|jip
init|=
name|jt
operator|.
name|getJob
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskReport
name|tr
range|:
name|mapReports
control|)
block|{
name|TaskInProgress
name|tip
init|=
name|jip
operator|.
name|getTaskInProgress
argument_list|(
name|tr
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
comment|// for this tip, get active tasks of all attempts
while|while
condition|(
name|tip
operator|.
name|getActiveTasks
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//wait till the activeTasks Tree is built
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"sleep is interrupted:"
operator|+
name|ie
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|TaskAttemptID
argument_list|>
name|it
init|=
name|tip
operator|.
name|getActiveTasks
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TaskAttemptID
name|id
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"taskAttemptID of map task is "
operator|+
name|id
argument_list|)
expr_stmt|;
while|while
condition|(
name|pid
operator|==
literal|null
condition|)
block|{
name|pid
operator|=
name|mr
operator|.
name|getTaskTrackerRunner
argument_list|(
literal|0
argument_list|)
operator|.
name|getTaskTracker
argument_list|()
operator|.
name|getPid
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|pid
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"pid of map task is "
operator|+
name|pid
argument_list|)
expr_stmt|;
comment|//Checking if the map task is alive
name|assertTrue
argument_list|(
literal|"Map is no more alive"
argument_list|,
name|isAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The map task is alive before Job completion, as expected."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Checking if the descendant processes of map task are alive
if|if
condition|(
name|ProcessTree
operator|.
name|isSetsidAvailable
condition|)
block|{
name|String
name|childPid
init|=
name|TestProcfsBasedProcessTree
operator|.
name|getPidFromPidFile
argument_list|(
name|scriptDirName
operator|+
literal|"/childPidFile"
operator|+
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|childPid
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|scriptDirName
operator|+
literal|"/childPidFile"
operator|+
literal|0
operator|+
literal|" is null; Sleeping..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"sleep is interrupted:"
operator|+
name|ie
argument_list|)
expr_stmt|;
break|break;
block|}
name|childPid
operator|=
name|TestProcfsBasedProcessTree
operator|.
name|getPidFromPidFile
argument_list|(
name|scriptDirName
operator|+
literal|"/childPidFile"
operator|+
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// As childPidFile0(leaf process in the subtree of processes with
comment|// map task as root) is created, all other child pid files should
comment|// have been created already(See the script for details).
comment|// Now check if the descendants of map task are alive.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|numLevelsOfSubProcesses
condition|;
name|i
operator|++
control|)
block|{
name|childPid
operator|=
name|TestProcfsBasedProcessTree
operator|.
name|getPidFromPidFile
argument_list|(
name|scriptDirName
operator|+
literal|"/childPidFile"
operator|+
name|i
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"pid of the descendant process at level "
operator|+
name|i
operator|+
literal|"in the subtree of processes(with the map task as the root)"
operator|+
literal|" is "
operator|+
name|childPid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected: The subprocess at level "
operator|+
name|i
operator|+
literal|" in the subtree is not alive before Job completion"
argument_list|,
name|isAlive
argument_list|(
name|childPid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|job
return|;
block|}
comment|/**    * Verifies if the subprocesses of the map task are killed properly.    */
DECL|method|validateKillingSubprocesses (RunningJob job, JobConf conf)
specifier|private
specifier|static
name|void
name|validateKillingSubprocesses
parameter_list|(
name|RunningJob
name|job
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// wait till the the job finishes
while|while
condition|(
operator|!
name|job
operator|.
name|isComplete
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
comment|// Checking if the map task got killed or not
name|assertTrue
argument_list|(
operator|!
name|ProcessTree
operator|.
name|isAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The map task is not alive after Job is completed, as expected."
argument_list|)
expr_stmt|;
comment|// Checking if the descendant processes of map task are killed properly
if|if
condition|(
name|ProcessTree
operator|.
name|isSetsidAvailable
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|numLevelsOfSubProcesses
condition|;
name|i
operator|++
control|)
block|{
name|String
name|childPid
init|=
name|TestProcfsBasedProcessTree
operator|.
name|getPidFromPidFile
argument_list|(
name|scriptDirName
operator|+
literal|"/childPidFile"
operator|+
name|i
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"pid of the descendant process at level "
operator|+
name|i
operator|+
literal|"in the subtree of processes(with the map task as the root)"
operator|+
literal|" is "
operator|+
name|childPid
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected: The subprocess at level "
operator|+
name|i
operator|+
literal|" in the subtree is alive after Job completion"
argument_list|,
operator|!
name|isAlive
argument_list|(
name|childPid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|scriptDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|scriptDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runJob (JobConf conf)
specifier|private
specifier|static
name|RunningJob
name|runJob
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|inDir
decl_stmt|;
specifier|final
name|Path
name|outDir
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|tempFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|//Check if test is run with hdfs or local file system.
comment|//if local filesystem then prepend TEST_ROOT_DIR, otherwise
comment|//killjob folder would be created in workspace root.
if|if
condition|(
operator|!
name|tempFs
operator|.
name|getUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
operator|.
name|equals
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
condition|)
block|{
name|inDir
operator|=
operator|new
name|Path
argument_list|(
literal|"killjob/input"
argument_list|)
expr_stmt|;
name|outDir
operator|=
operator|new
name|Path
argument_list|(
literal|"killjob/output"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inDir
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"input"
argument_list|)
expr_stmt|;
name|outDir
operator|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"output"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|scriptDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|scriptDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_JAVA_OPTS
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_MAP_TASK_JAVA_OPTS
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|)
argument_list|)
operator|+
literal|" -Dtest.build.data="
operator|+
name|BASE_TEST_ROOT_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_JAVA_OPTS
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_REDUCE_TASK_JAVA_OPTS
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|)
argument_list|)
operator|+
literal|" -Dtest.build.data="
operator|+
name|BASE_TEST_ROOT_DIR
argument_list|)
expr_stmt|;
return|return
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
return|;
block|}
DECL|method|testJobKillFailAndSucceed ()
specifier|public
name|void
name|testJobKillFailAndSucceed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"setsid doesn't work on WINDOWS as expected. Not testing"
argument_list|)
expr_stmt|;
return|return;
block|}
name|JobConf
name|conf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// run the TCs
name|conf
operator|=
name|mr
operator|.
name|createJobConf
argument_list|()
expr_stmt|;
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|runTests
argument_list|(
name|conf
argument_list|,
name|jt
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|runTests (JobConf conf, JobTracker jt)
name|void
name|runTests
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|JobTracker
name|jt
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|rootDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|setPermission
argument_list|(
name|rootDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|runKillingJobAndValidate
argument_list|(
name|jt
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runFailingJobAndValidate
argument_list|(
name|jt
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|runSuccessfulJobAndValidate
argument_list|(
name|jt
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates signal file    */
DECL|method|signalTask (String signalFile, JobConf conf)
specifier|private
specifier|static
name|void
name|signalTask
parameter_list|(
name|String
name|signalFile
parameter_list|,
name|JobConf
name|conf
parameter_list|)
block|{
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
operator|new
name|Path
argument_list|(
name|signalFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create signal file. "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Runs a recursive shell script to create a chain of subprocesses    */
DECL|method|runChildren (JobConf conf)
specifier|private
specifier|static
name|void
name|runChildren
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ProcessTree
operator|.
name|isSetsidAvailable
condition|)
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|scriptDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|scriptDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Create the directory and set open permissions so that the TT can
comment|// access.
name|fs
operator|.
name|mkdirs
argument_list|(
name|scriptDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|scriptDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
comment|// create shell script
name|Random
name|rm
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
name|scriptDirName
argument_list|,
literal|"_shellScript_"
operator|+
name|rm
operator|.
name|nextInt
argument_list|()
operator|+
literal|".sh"
argument_list|)
decl_stmt|;
name|String
name|shellScript
init|=
name|scriptPath
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Construct the script. Set umask to 0000 so that TT can access all the
comment|// files.
name|String
name|script
init|=
literal|"umask 000\n"
operator|+
literal|"echo $$> "
operator|+
name|scriptDirName
operator|+
literal|"/childPidFile"
operator|+
literal|"$1\n"
operator|+
literal|"echo hello\n"
operator|+
literal|"trap 'echo got SIGTERM' 15 \n"
operator|+
literal|"if [ $1 != 0 ]\nthen\n"
operator|+
literal|" sh "
operator|+
name|shellScript
operator|+
literal|" $(($1-1))\n"
operator|+
literal|"else\n"
operator|+
literal|" while true\n do\n"
operator|+
literal|"  sleep 2\n"
operator|+
literal|" done\n"
operator|+
literal|"fi"
decl_stmt|;
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
name|scriptPath
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Set executable permissions on the script.
operator|new
name|File
argument_list|(
name|scriptPath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling script from map task : "
operator|+
name|shellScript
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|shellScript
operator|+
literal|" "
operator|+
name|numLevelsOfSubProcesses
argument_list|)
expr_stmt|;
name|String
name|childPid
init|=
name|TestProcfsBasedProcessTree
operator|.
name|getPidFromPidFile
argument_list|(
name|scriptDirName
operator|+
literal|"/childPidFile"
operator|+
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|childPid
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|scriptDirName
operator|+
literal|"/childPidFile"
operator|+
literal|0
operator|+
literal|" is null; Sleeping..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"sleep is interrupted:"
operator|+
name|ie
argument_list|)
expr_stmt|;
break|break;
block|}
name|childPid
operator|=
name|TestProcfsBasedProcessTree
operator|.
name|getPidFromPidFile
argument_list|(
name|scriptDirName
operator|+
literal|"/childPidFile"
operator|+
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Mapper that starts children    */
DECL|class|MapperWithChildren
specifier|static
class|class
name|MapperWithChildren
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|field|fs
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runChildren
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in configure: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Mapper waits for the signal(signal is the existence of a file)
DECL|method|map (WritableComparable key, Writable value, OutputCollector<WritableComparable, Writable> out, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|signalFile
argument_list|)
condition|)
block|{
comment|// wait for signal file creation
try|try
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Interrupted while the map was waiting for "
operator|+
literal|" the signal."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Mapper that waits till it gets killed.    */
DECL|class|KillingMapperWithChildren
specifier|static
class|class
name|KillingMapperWithChildren
extends|extends
name|MapperWithChildren
block|{
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|map (WritableComparable key, Writable value, OutputCollector<WritableComparable, Writable> out, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|//just wait till kill happens
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in KillMapperWithChild.map:"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Mapper that fails when receives a signal. Signal is existence of a file.    */
DECL|class|FailingMapperWithChildren
specifier|static
class|class
name|FailingMapperWithChildren
extends|extends
name|MapperWithChildren
block|{
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|map (WritableComparable key, Writable value, OutputCollector<WritableComparable, Writable> out, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|signalFile
argument_list|)
condition|)
block|{
comment|// wait for signal file creation
try|try
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Interrupted while the map was waiting for "
operator|+
literal|" the signal."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failing map"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check for presence of the process with the pid passed is alive or not    * currently.    *     * @param pid pid of the process    * @return if a process is alive or not.    */
DECL|method|isAlive (String pid)
specifier|private
specifier|static
name|boolean
name|isAlive
parameter_list|(
name|String
name|pid
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|commandString
init|=
literal|"ps -o pid,command -e"
decl_stmt|;
name|String
name|args
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
name|commandString
block|}
decl_stmt|;
name|ShellCommandExecutor
name|shExec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|shExec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IOExecption thrown while checking if process is alive"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|String
name|output
init|=
name|shExec
operator|.
name|getOutput
argument_list|()
decl_stmt|;
comment|//Parse the command output and check for pid, ignore the commands
comment|//which has ps or grep in it.
name|StringTokenizer
name|strTok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|output
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|strTok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|StringTokenizer
name|pidToken
init|=
operator|new
name|StringTokenizer
argument_list|(
name|strTok
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|String
name|pidStr
init|=
name|pidToken
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|commandStr
init|=
name|pidToken
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|pid
operator|.
name|equals
argument_list|(
name|pidStr
argument_list|)
operator|&&
operator|!
operator|(
name|commandStr
operator|.
name|contains
argument_list|(
literal|"ps"
argument_list|)
operator|||
name|commandStr
operator|.
name|contains
argument_list|(
literal|"grep"
argument_list|)
operator|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|found
return|;
block|}
block|}
end_class

end_unit

