begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|SecondarySort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|WordCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|SecondarySort
operator|.
name|FirstGroupingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|SecondarySort
operator|.
name|FirstPartitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|SecondarySort
operator|.
name|IntPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MRCaching
operator|.
name|TestResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TestMapReduceLocal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test min map-reduce cluster with local file system.  */
end_comment

begin_class
DECL|class|TestMiniMRLocalFS
specifier|public
class|class
name|TestMiniMRLocalFS
extends|extends
name|TestCase
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
DECL|method|testWithLocal ()
specifier|public
name|void
name|testWithLocal
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// make cleanup inline sothat validation of existence of these directories
comment|// can be done
name|mr
operator|.
name|setInlineCleanupThreads
argument_list|()
expr_stmt|;
name|TestMiniMRWithDFS
operator|.
name|runPI
argument_list|(
name|mr
argument_list|,
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// run the wordcount example with caching
name|JobConf
name|job
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|TestResult
name|ret
init|=
name|MRCaching
operator|.
name|launchMRCache
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/wc/input"
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/wc/output"
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/cachedir"
argument_list|,
name|job
argument_list|,
literal|"The quick brown fox\n"
operator|+
literal|"has many silly\n"
operator|+
literal|"red fox sox\n"
argument_list|)
decl_stmt|;
comment|// assert the number of lines read during caching
name|assertTrue
argument_list|(
literal|"Failed test archives not matching"
argument_list|,
name|ret
operator|.
name|isOutputOk
argument_list|)
expr_stmt|;
comment|// test the task report fetchers
name|JobClient
name|client
init|=
operator|new
name|JobClient
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|JobID
name|jobid
init|=
name|ret
operator|.
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|TaskReport
index|[]
name|reports
decl_stmt|;
name|reports
operator|=
name|client
operator|.
name|getSetupTaskReports
argument_list|(
name|jobid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of setups"
argument_list|,
literal|2
argument_list|,
name|reports
operator|.
name|length
argument_list|)
expr_stmt|;
name|reports
operator|=
name|client
operator|.
name|getMapTaskReports
argument_list|(
name|jobid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of maps"
argument_list|,
literal|1
argument_list|,
name|reports
operator|.
name|length
argument_list|)
expr_stmt|;
name|reports
operator|=
name|client
operator|.
name|getReduceTaskReports
argument_list|(
name|jobid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of reduces"
argument_list|,
literal|1
argument_list|,
name|reports
operator|.
name|length
argument_list|)
expr_stmt|;
name|reports
operator|=
name|client
operator|.
name|getCleanupTaskReports
argument_list|(
name|jobid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of cleanups"
argument_list|,
literal|2
argument_list|,
name|reports
operator|.
name|length
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|ret
operator|.
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of map inputs"
argument_list|,
literal|3
argument_list|,
name|counters
operator|.
name|getCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_INPUT_RECORDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"number of reduce outputs"
argument_list|,
literal|9
argument_list|,
name|counters
operator|.
name|getCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_OUTPUT_RECORDS
argument_list|)
argument_list|)
expr_stmt|;
name|runCustomFormats
argument_list|(
name|mr
argument_list|)
expr_stmt|;
name|runSecondarySort
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|runCustomFormats (MiniMRCluster mr)
specifier|private
name|void
name|runCustomFormats
parameter_list|(
name|MiniMRCluster
name|mr
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/test_mini_mr_local"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testDir= "
operator|+
name|testDir
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|MyInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormat
argument_list|(
name|MyOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|MyMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|MyReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumMapTasks
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// explicitly do not use "normal" job.setOutputPath to make sure
comment|// that it is not hardcoded anywhere in the framework.
name|job
operator|.
name|set
argument_list|(
literal|"non.std.out"
argument_list|,
name|outDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|MapReduceTestUtil
operator|.
name|readOutput
argument_list|(
name|outDir
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
operator|(
literal|"aunt annie\t1\n"
operator|+
literal|"bumble boat\t4\n"
operator|+
literal|"crocodile pants\t0\n"
operator|+
literal|"duck-dog\t5\n"
operator|+
literal|"eggs\t2\n"
operator|+
literal|"finagle the agent\t3\n"
operator|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileSys
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyInputFormat
specifier|private
specifier|static
class|class
name|MyInputFormat
implements|implements
name|InputFormat
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|data
specifier|static
specifier|final
name|String
index|[]
name|data
init|=
operator|new
name|String
index|[]
block|{
literal|"crocodile pants"
block|,
literal|"aunt annie"
block|,
literal|"eggs"
block|,
literal|"finagle the agent"
block|,
literal|"bumble boat"
block|,
literal|"duck-dog"
block|,     }
decl_stmt|;
DECL|class|MySplit
specifier|private
specifier|static
class|class
name|MySplit
implements|implements
name|InputSplit
block|{
DECL|field|first
name|int
name|first
decl_stmt|;
DECL|field|length
name|int
name|length
decl_stmt|;
DECL|method|MySplit ()
specifier|public
name|MySplit
parameter_list|()
block|{ }
DECL|method|MySplit (int first, int length)
specifier|public
name|MySplit
parameter_list|(
name|int
name|first
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|first
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|length
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyRecordReader
specifier|static
class|class
name|MyRecordReader
implements|implements
name|RecordReader
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|index
name|int
name|index
decl_stmt|;
DECL|field|past
name|int
name|past
decl_stmt|;
DECL|field|length
name|int
name|length
decl_stmt|;
DECL|method|MyRecordReader (int index, int length)
name|MyRecordReader
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|past
operator|=
name|index
operator|+
name|length
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
DECL|method|next (IntWritable key, Text value)
specifier|public
name|boolean
name|next
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|<
name|past
condition|)
block|{
name|key
operator|.
name|set
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
name|data
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|index
operator|+=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|createKey ()
specifier|public
name|IntWritable
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|IntWritable
argument_list|()
return|;
block|}
DECL|method|createValue ()
specifier|public
name|Text
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|index
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|1.0f
operator|-
operator|(
name|past
operator|-
name|index
operator|)
operator|/
name|length
return|;
block|}
block|}
DECL|method|getSplits (JobConf job, int numSplits)
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MySplit
index|[]
block|{
operator|new
name|MySplit
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
block|,
operator|new
name|MySplit
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
block|,
operator|new
name|MySplit
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
block|}
return|;
block|}
DECL|method|getRecordReader (InputSplit split, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|MySplit
name|sp
init|=
operator|(
name|MySplit
operator|)
name|split
decl_stmt|;
return|return
operator|new
name|MyRecordReader
argument_list|(
name|sp
operator|.
name|first
argument_list|,
name|sp
operator|.
name|length
argument_list|)
return|;
block|}
block|}
DECL|class|MyMapper
specifier|static
class|class
name|MyMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|method|map (WritableComparable key, Writable value, OutputCollector<WritableComparable, Writable> out, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Writable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|out
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"map: "
operator|+
name|key
operator|+
literal|", "
operator|+
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|collect
argument_list|(
operator|(
name|WritableComparable
operator|)
name|value
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|InputSplit
name|split
init|=
name|reporter
operator|.
name|getInputSplit
argument_list|()
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|getClass
argument_list|()
operator|!=
name|MyInputFormat
operator|.
name|MySplit
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Got wrong split in MyMapper! "
operator|+
name|split
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|MyReducer
specifier|static
class|class
name|MyReducer
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|method|reduce (WritableComparable key, Iterator<Writable> values, OutputCollector<WritableComparable, Writable> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|InputSplit
name|split
init|=
name|reporter
operator|.
name|getInputSplit
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Got an input split of "
operator|+
name|split
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected result
block|}
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Writable
name|value
init|=
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"reduce: "
operator|+
name|key
operator|+
literal|", "
operator|+
name|value
argument_list|)
expr_stmt|;
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MyOutputFormat
specifier|static
class|class
name|MyOutputFormat
implements|implements
name|OutputFormat
block|{
DECL|class|MyRecordWriter
specifier|static
class|class
name|MyRecordWriter
implements|implements
name|RecordWriter
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
DECL|field|out
specifier|private
name|DataOutputStream
name|out
decl_stmt|;
DECL|method|MyRecordWriter (Path outputFile, JobConf job)
specifier|public
name|MyRecordWriter
parameter_list|(
name|Path
name|outputFile
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|=
name|outputFile
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
operator|.
name|create
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
DECL|method|write (Object key, Object value)
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|key
operator|.
name|toString
argument_list|()
operator|+
literal|"\t"
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|close (Reporter reporter)
specifier|public
name|void
name|close
parameter_list|(
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getRecordWriter (FileSystem ignored, JobConf job, String name, Progressable progress )
specifier|public
name|RecordWriter
name|getRecordWriter
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MyRecordWriter
argument_list|(
operator|new
name|Path
argument_list|(
name|job
operator|.
name|get
argument_list|(
literal|"non.std.out"
argument_list|)
argument_list|)
argument_list|,
name|job
argument_list|)
return|;
block|}
DECL|method|checkOutputSpecs (FileSystem ignored, JobConf job)
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
DECL|method|runSecondarySort (Configuration conf)
specifier|private
name|void
name|runSecondarySort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/in"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/out"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestMapReduceLocal
operator|.
name|writeFile
argument_list|(
literal|"in/part1"
argument_list|,
literal|"-1 -4\n-3 23\n5 10\n-1 -2\n-1 300\n-1 10\n4 1\n"
operator|+
literal|"4 2\n4 10\n4 -1\n4 -10\n10 20\n10 30\n10 25\n"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
literal|"word count"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|WordCount
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|SecondarySort
operator|.
name|MapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|SecondarySort
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// group and partition by the first int in the pair
name|job
operator|.
name|setPartitionerClass
argument_list|(
name|FirstPartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setGroupingComparatorClass
argument_list|(
name|FirstGroupingComparator
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// the map output is IntPair, IntWritable
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|IntPair
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// the reduce output is Text, IntWritable
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/in"
argument_list|)
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/out"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|TestMapReduceLocal
operator|.
name|readFile
argument_list|(
literal|"out/part-r-00000"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"------------------------------------------------\n"
operator|+
literal|"4\t-10\n4\t-1\n4\t1\n4\t2\n4\t10\n"
operator|+
literal|"------------------------------------------------\n"
operator|+
literal|"10\t20\n10\t25\n10\t30\n"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
name|TestMapReduceLocal
operator|.
name|readFile
argument_list|(
literal|"out/part-r-00001"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"------------------------------------------------\n"
operator|+
literal|"-3\t23\n"
operator|+
literal|"------------------------------------------------\n"
operator|+
literal|"-1\t-4\n-1\t-2\n-1\t10\n-1\t300\n"
operator|+
literal|"------------------------------------------------\n"
operator|+
literal|"5\t10\n"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

