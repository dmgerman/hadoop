begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|RandomWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test the Map-Reduce framework's sort in presence of   * null intermediate map-outputs, when compression is enabled for intermediate  * map-outputs.   */
end_comment

begin_class
DECL|class|TestCompressedEmptyMapOutputs
specifier|public
class|class
name|TestCompressedEmptyMapOutputs
extends|extends
name|TestCase
block|{
comment|// Input/Output paths for sort
DECL|field|SORT_INPUT_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|SORT_INPUT_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/sort/input"
argument_list|)
decl_stmt|;
DECL|field|SORT_OUTPUT_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|SORT_OUTPUT_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/sort/output"
argument_list|)
decl_stmt|;
comment|// Knobs to control randomwriter; and hence sort
DECL|field|NUM_HADOOP_SLAVES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_HADOOP_SLAVES
init|=
literal|3
decl_stmt|;
DECL|field|RW_BYTES_PER_MAP
specifier|private
specifier|static
specifier|final
name|int
name|RW_BYTES_PER_MAP
init|=
literal|50000
decl_stmt|;
DECL|field|RW_MAPS_PER_HOST
specifier|private
specifier|static
specifier|final
name|int
name|RW_MAPS_PER_HOST
init|=
literal|5
decl_stmt|;
DECL|method|runRandomWriter (JobConf job, Path sortInput)
specifier|private
specifier|static
name|void
name|runRandomWriter
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|Path
name|sortInput
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Scale down the default settings for RandomWriter for the test-case
comment|// Generates NUM_HADOOP_SLAVES * RW_MAPS_PER_HOST * RW_BYTES_PER_MAP -> 1MB
name|job
operator|.
name|setInt
argument_list|(
name|RandomWriter
operator|.
name|BYTES_PER_MAP
argument_list|,
name|RW_BYTES_PER_MAP
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInt
argument_list|(
name|RandomWriter
operator|.
name|MAPS_PER_HOST
argument_list|,
name|RW_MAPS_PER_HOST
argument_list|)
expr_stmt|;
name|String
index|[]
name|rwArgs
init|=
block|{
name|sortInput
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
comment|// Run RandomWriter
name|assertEquals
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|job
argument_list|,
operator|new
name|RandomWriter
argument_list|()
argument_list|,
name|rwArgs
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|class|SinkMapper
specifier|static
class|class
name|SinkMapper
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|map (K key, V val, OutputCollector<K, V> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|val
parameter_list|,
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Don't output anything!
if|if
condition|(
literal|false
condition|)
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runSort (JobConf jobConf, Path sortInput, Path sortOutput)
specifier|private
specifier|static
name|void
name|runSort
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Path
name|sortInput
parameter_list|,
name|Path
name|sortOutput
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Set up the job
name|jobConf
operator|.
name|setJobName
argument_list|(
literal|"null-sorter"
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMapperClass
argument_list|(
name|SinkMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setReducerClass
argument_list|(
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInputFormat
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputFormat
argument_list|(
name|SequenceFileOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputKeyClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputValueClass
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|sortInput
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobConf
argument_list|,
name|sortOutput
argument_list|)
expr_stmt|;
comment|// Compress the intermediate map-outputs!
name|jobConf
operator|.
name|setCompressMapOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Run the job
name|JobClient
operator|.
name|runJob
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
DECL|method|testMapReduceSortWithCompressedEmptyMapOutputs ()
specifier|public
name|void
name|testMapReduceSortWithCompressedEmptyMapOutputs
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Start the mini-MR and mini-DFS clusters
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|NUM_HADOOP_SLAVES
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|NUM_HADOOP_SLAVES
argument_list|,
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Run randomwriter to generate input for 'sort'
name|runRandomWriter
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|,
name|SORT_INPUT_PATH
argument_list|)
expr_stmt|;
comment|// Run sort
name|runSort
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|,
name|SORT_INPUT_PATH
argument_list|,
name|SORT_OUTPUT_PATH
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

