begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the refresh feature of QueueManager.  */
end_comment

begin_class
DECL|class|TestQueueManagerRefresh
specifier|public
class|class
name|TestQueueManagerRefresh
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQueueManagerRefresh
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Remove the configuration file after the test's done.    */
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return a simple hierarchy of JobQueueInfos    */
DECL|method|getSimpleQueueHierarchy ()
specifier|static
name|JobQueueInfo
index|[]
name|getSimpleQueueHierarchy
parameter_list|()
block|{
name|int
name|numQs
init|=
literal|3
decl_stmt|;
name|JobQueueInfo
index|[]
name|queues
init|=
operator|new
name|JobQueueInfo
index|[
name|numQs
index|]
decl_stmt|;
name|queues
index|[
literal|0
index|]
operator|=
name|newJobQueueInfo
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|JobQueueInfo
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"q1"
argument_list|,
name|QueueState
operator|.
name|UNDEFINED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queues
index|[
literal|1
index|]
operator|=
name|newJobQueueInfo
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|JobQueueInfo
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"q1:q2"
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queues
index|[
literal|2
index|]
operator|=
name|newJobQueueInfo
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|JobQueueInfo
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"q1:q3"
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queues
index|[
literal|0
index|]
operator|.
name|addChild
argument_list|(
name|queues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|queues
index|[
literal|0
index|]
operator|.
name|addChild
argument_list|(
name|queues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
name|queues
return|;
block|}
comment|/**    * Test to verify that the refresh of queue properties fails if a new queue is    * added.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testRefreshWithAddedQueues ()
specifier|public
name|void
name|testRefreshWithAddedQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|JobQueueInfo
index|[]
name|queues
init|=
name|getSimpleQueueHierarchy
argument_list|()
decl_stmt|;
comment|// write the configuration file
name|writeQueueConfigurationFile
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|QueueManager
name|qManager
init|=
operator|new
name|QueueManager
argument_list|()
decl_stmt|;
name|JobQueueInfo
name|newQueue
init|=
name|newJobQueueInfo
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|JobQueueInfo
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|"q4"
argument_list|,
name|QueueState
operator|.
name|UNDEFINED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|queues
index|[
literal|0
index|]
operator|.
name|addChild
argument_list|(
name|newQueue
argument_list|)
expr_stmt|;
comment|// Rewrite the configuration file
name|writeQueueConfigurationFile
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|testRefreshFailureWithChangeOfHierarchy
argument_list|(
name|qManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify that the refresh of queue properties fails if queues are    * removed.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testRefreshWithRemovedQueues ()
specifier|public
name|void
name|testRefreshWithRemovedQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|JobQueueInfo
index|[]
name|queues
init|=
name|getSimpleQueueHierarchy
argument_list|()
decl_stmt|;
comment|// write the configuration file
name|writeQueueConfigurationFile
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|QueueManager
name|qManager
init|=
operator|new
name|QueueManager
argument_list|()
decl_stmt|;
comment|// Remove queue[2]
name|JobQueueInfo
name|q2
init|=
name|queues
index|[
literal|2
index|]
decl_stmt|;
name|queues
index|[
literal|0
index|]
operator|.
name|removeChild
argument_list|(
name|q2
argument_list|)
expr_stmt|;
comment|// Rewrite the configuration file
name|writeQueueConfigurationFile
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|testRefreshFailureWithChangeOfHierarchy
argument_list|(
name|qManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param originalQManager    * @throws Exception    */
DECL|method|testRefreshFailureWithChangeOfHierarchy ( QueueManager originalQManager)
specifier|private
name|void
name|testRefreshFailureWithChangeOfHierarchy
parameter_list|(
name|QueueManager
name|originalQManager
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure that isHierarchySame returns false.
name|QueueManager
name|modifiedQueueManager
init|=
operator|new
name|QueueManager
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Hierarchy changed after refresh!"
argument_list|,
name|originalQManager
operator|.
name|getRoot
argument_list|()
operator|.
name|isHierarchySameAs
argument_list|(
name|modifiedQueueManager
operator|.
name|getRoot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Refresh the QueueManager and make sure it fails.
try|try
block|{
name|originalQManager
operator|.
name|refreshQueues
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Queue-refresh should have failed!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Refresh failed as expected. Check the error message.
name|assertTrue
argument_list|(
literal|"Exception message should point to a change in queue hierarchy!"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|QueueManager
operator|.
name|MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that the old configuration is retained.
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|rootQueues
init|=
name|originalQManager
operator|.
name|getRoot
argument_list|()
operator|.
name|getJobQueueInfo
argument_list|()
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rootQueues
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify that the refresh of queue properties fails if scheduler    * fails to reload itself.    *     * @throws Exception    */
comment|// @Test
DECL|method|testRefreshWithSchedulerFailure ()
specifier|public
name|void
name|testRefreshWithSchedulerFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|JobQueueInfo
index|[]
name|queues
init|=
name|getSimpleQueueHierarchy
argument_list|()
decl_stmt|;
comment|// write the configuration file
name|writeQueueConfigurationFile
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|QueueManager
name|qManager
init|=
operator|new
name|QueueManager
argument_list|()
decl_stmt|;
comment|// No change in configuration. Just Refresh the QueueManager and make sure
comment|// it fails.
try|try
block|{
name|qManager
operator|.
name|refreshQueues
argument_list|(
literal|null
argument_list|,
operator|new
name|MyTaskScheduler
argument_list|()
operator|.
operator|new
name|MyFailingQueueRefresher
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Queue-refresh should have failed!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Refresh failed as expected. Check the error message.
name|assertTrue
argument_list|(
literal|"Exception message should point to a refresh-failure in scheduler!"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|QueueManager
operator|.
name|MSG_REFRESH_FAILURE_WITH_SCHEDULER_FAILURE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify that the refresh of scheduler properties passes smoothly.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testRefreshOfSchedulerProperties ()
specifier|public
name|void
name|testRefreshOfSchedulerProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|JobQueueInfo
index|[]
name|queues
init|=
name|getSimpleQueueHierarchy
argument_list|()
decl_stmt|;
comment|// Set some scheduler properties
for|for
control|(
name|JobQueueInfo
name|jqi
range|:
name|queues
control|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"testing.property"
argument_list|,
literal|"testing.value."
operator|+
name|jqi
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|jqi
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
comment|// write the configuration file
name|writeQueueConfigurationFile
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|QueueManager
name|qManager
init|=
operator|new
name|QueueManager
argument_list|()
decl_stmt|;
name|MyTaskScheduler
name|myScheduler
init|=
operator|new
name|MyTaskScheduler
argument_list|()
decl_stmt|;
name|qManager
operator|.
name|refreshQueues
argument_list|(
literal|null
argument_list|,
name|myScheduler
operator|.
expr|new
name|MyQueueRefresher
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the scheduler props are set correctly by scheduler-refresh.
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|schedProps
init|=
name|myScheduler
operator|.
name|getSchedulerProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|JobQueueInfo
name|jqi
range|:
name|queues
control|)
block|{
name|String
name|expectedVal
init|=
literal|"testing.value."
operator|+
name|jqi
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|Properties
name|qProperties
init|=
name|schedProps
operator|.
name|get
argument_list|(
name|jqi
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Properties should not be null for the SchedulerQueue "
operator|+
name|jqi
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|qProperties
argument_list|)
expr_stmt|;
name|String
name|observedVal
init|=
name|qProperties
operator|.
name|getProperty
argument_list|(
literal|"testing.property"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Properties for the SchedulerQueue "
operator|+
name|jqi
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" are not reloaded properly!"
argument_list|,
name|expectedVal
argument_list|,
name|observedVal
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify that the scheduling information per queue in the    * {@link QueueManager} is retained across queue-refresh.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testSchedulingInfoAfterRefresh ()
specifier|public
name|void
name|testSchedulingInfoAfterRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|JobQueueInfo
index|[]
name|queues
init|=
name|getSimpleQueueHierarchy
argument_list|()
decl_stmt|;
comment|// write the configuration file
name|writeQueueConfigurationFile
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|QueueManager
name|qManager
init|=
operator|new
name|QueueManager
argument_list|()
decl_stmt|;
comment|// Set some scheduling information for the queues in the QueueManager.
for|for
control|(
name|String
name|qName
range|:
name|qManager
operator|.
name|getLeafQueueNames
argument_list|()
control|)
block|{
name|qManager
operator|.
name|setSchedulerInfo
argument_list|(
name|qName
argument_list|,
operator|new
name|String
argument_list|(
literal|"scheduling-information-for-queue-"
operator|+
name|qName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|qManager
operator|.
name|refreshQueues
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Verify that the scheduling information is retained across refresh.
for|for
control|(
name|String
name|qName
range|:
name|qManager
operator|.
name|getLeafQueueNames
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"scheduling-information-for-queue-"
operator|+
name|qName
argument_list|,
name|qManager
operator|.
name|getSchedulerInfo
argument_list|(
name|qName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyTaskScheduler
specifier|static
class|class
name|MyTaskScheduler
extends|extends
name|TaskScheduler
block|{
DECL|field|schedulerPropsMap
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|schedulerPropsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getSchedulerProperties ()
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|getSchedulerProperties
parameter_list|()
block|{
return|return
name|schedulerPropsMap
return|;
block|}
DECL|class|MyQueueRefresher
class|class
name|MyQueueRefresher
extends|extends
name|QueueRefresher
block|{
DECL|method|updateSchedulerProps (JobQueueInfo jqi)
specifier|private
name|void
name|updateSchedulerProps
parameter_list|(
name|JobQueueInfo
name|jqi
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating properties for SchedulerQueue "
operator|+
name|jqi
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Putting "
operator|+
name|jqi
operator|.
name|getProperties
argument_list|()
operator|+
literal|" in "
operator|+
name|jqi
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|schedulerPropsMap
operator|.
name|put
argument_list|(
name|jqi
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|jqi
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JobQueueInfo
name|child
range|:
name|jqi
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|updateSchedulerProps
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|refreshQueues (List<JobQueueInfo> newRootQueues)
name|void
name|refreshQueues
parameter_list|(
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|newRootQueues
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Refreshing scheduler's properties"
argument_list|)
expr_stmt|;
for|for
control|(
name|JobQueueInfo
name|jqi
range|:
name|newRootQueues
control|)
block|{
name|updateSchedulerProps
argument_list|(
name|jqi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MyFailingQueueRefresher
class|class
name|MyFailingQueueRefresher
extends|extends
name|QueueRefresher
block|{
annotation|@
name|Override
DECL|method|refreshQueues (List<JobQueueInfo> newRootQueues)
name|void
name|refreshQueues
parameter_list|(
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|newRootQueues
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Scheduler cannot refresh the queues!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|assignTasks (TaskTracker taskTracker)
specifier|public
name|List
argument_list|<
name|Task
argument_list|>
name|assignTasks
parameter_list|(
name|TaskTracker
name|taskTracker
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getJobs (String queueName)
specifier|public
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|getJobs
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|newJobQueueInfo (List<JobQueueInfo> children, Properties props, String queueName, QueueState state, String schedulingInfo)
specifier|static
name|JobQueueInfo
name|newJobQueueInfo
parameter_list|(
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|children
parameter_list|,
name|Properties
name|props
parameter_list|,
name|String
name|queueName
parameter_list|,
name|QueueState
name|state
parameter_list|,
name|String
name|schedulingInfo
parameter_list|)
block|{
name|JobQueueInfo
name|jqi
init|=
operator|new
name|JobQueueInfo
argument_list|()
decl_stmt|;
name|jqi
operator|.
name|setChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
name|jqi
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
name|jqi
operator|.
name|setQueueName
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|jqi
operator|.
name|setQueueState
argument_list|(
name|state
operator|.
name|getStateName
argument_list|()
argument_list|)
expr_stmt|;
name|jqi
operator|.
name|setSchedulingInfo
argument_list|(
name|schedulingInfo
argument_list|)
expr_stmt|;
return|return
name|jqi
return|;
block|}
block|}
end_class

end_unit

