begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
DECL|class|TestBadRecords
specifier|public
class|class
name|TestBadRecords
extends|extends
name|ClusterMapReduceTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBadRecords
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAPPER_BAD_RECORDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|MAPPER_BAD_RECORDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hello01"
argument_list|,
literal|"hello04"
argument_list|,
literal|"hello05"
argument_list|)
decl_stmt|;
DECL|field|REDUCER_BAD_RECORDS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|REDUCER_BAD_RECORDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hello08"
argument_list|,
literal|"hello10"
argument_list|)
decl_stmt|;
DECL|field|input
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|input
decl_stmt|;
DECL|method|TestBadRecords ()
specifier|public
name|TestBadRecords
parameter_list|()
block|{
name|input
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|str
init|=
literal|""
operator|+
name|i
decl_stmt|;
name|int
name|zerosToPrepend
init|=
literal|2
operator|-
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|zerosToPrepend
condition|;
name|j
operator|++
control|)
block|{
name|str
operator|=
literal|"0"
operator|+
name|str
expr_stmt|;
block|}
name|input
operator|.
name|add
argument_list|(
literal|"hello"
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runMapReduce (JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords)
specifier|private
name|void
name|runMapReduce
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|mapperBadRecords
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|redBadRecords
parameter_list|)
throws|throws
name|Exception
block|{
name|createInput
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setJobName
argument_list|(
literal|"mr"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|TASK_TIMEOUT
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|SkipBadRecords
operator|.
name|setMapperMaxSkipRecords
argument_list|(
name|conf
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|SkipBadRecords
operator|.
name|setReducerMaxSkipGroups
argument_list|(
name|conf
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|SkipBadRecords
operator|.
name|setAttemptsToStartSkipping
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//the no of attempts to successfully complete the task depends
comment|//on the no of bad records.
name|conf
operator|.
name|setMaxMapAttempts
argument_list|(
name|SkipBadRecords
operator|.
name|getAttemptsToStartSkipping
argument_list|(
name|conf
argument_list|)
operator|+
literal|1
operator|+
name|mapperBadRecords
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaxReduceAttempts
argument_list|(
name|SkipBadRecords
operator|.
name|getAttemptsToStartSkipping
argument_list|(
name|conf
argument_list|)
operator|+
literal|1
operator|+
name|redBadRecords
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|getOutputDir
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputFormat
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|RunningJob
name|runningJob
init|=
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|validateOutput
argument_list|(
name|conf
argument_list|,
name|runningJob
argument_list|,
name|mapperBadRecords
argument_list|,
name|redBadRecords
argument_list|)
expr_stmt|;
block|}
DECL|method|createInput ()
specifier|private
name|void
name|createInput
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|os
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|getInputDir
argument_list|()
argument_list|,
literal|"text.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
name|wr
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|inp
range|:
name|input
control|)
block|{
name|wr
operator|.
name|write
argument_list|(
name|inp
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|wr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|validateOutput (JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords)
specifier|private
name|void
name|validateOutput
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|RunningJob
name|runningJob
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|mapperBadRecords
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|redBadRecords
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|runningJob
operator|.
name|getCounters
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runningJob
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
comment|//validate counters
name|Counters
name|counters
init|=
name|runningJob
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_SKIPPED_RECORDS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|,
name|mapperBadRecords
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|mapRecs
init|=
name|input
operator|.
name|size
argument_list|()
operator|-
name|mapperBadRecords
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_INPUT_RECORDS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|,
name|mapRecs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|MAP_OUTPUT_RECORDS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|,
name|mapRecs
argument_list|)
expr_stmt|;
name|int
name|redRecs
init|=
name|mapRecs
operator|-
name|redBadRecords
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_SKIPPED_RECORDS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|,
name|redBadRecords
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_SKIPPED_GROUPS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|,
name|redBadRecords
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_INPUT_GROUPS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|,
name|redRecs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_INPUT_RECORDS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|,
name|redRecs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counters
operator|.
name|findCounter
argument_list|(
name|TaskCounter
operator|.
name|REDUCE_OUTPUT_RECORDS
argument_list|)
operator|.
name|getCounter
argument_list|()
argument_list|,
name|redRecs
argument_list|)
expr_stmt|;
comment|//validate skipped records
name|Path
name|skipDir
init|=
name|SkipBadRecords
operator|.
name|getSkipOutputPath
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|skipDir
argument_list|)
expr_stmt|;
name|Path
index|[]
name|skips
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|skipDir
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mapSkipped
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|redSkipped
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|skipPath
range|:
name|skips
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"skipPath: "
operator|+
name|skipPath
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|getFileSystem
argument_list|()
argument_list|,
name|skipPath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|reader
operator|.
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|key
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
while|while
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|reader
operator|.
name|getCurrentValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"key:"
operator|+
name|key
operator|+
literal|" value:"
operator|+
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipPath
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"_r_"
argument_list|)
condition|)
block|{
name|redSkipped
operator|.
name|add
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mapSkipped
operator|.
name|add
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|mapSkipped
operator|.
name|containsAll
argument_list|(
name|mapperBadRecords
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|redSkipped
operator|.
name|containsAll
argument_list|(
name|redBadRecords
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|outputFiles
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|getFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|getOutputDir
argument_list|()
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mapperOutput
init|=
name|getProcessed
argument_list|(
name|input
argument_list|,
name|mapperBadRecords
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"mapperOutput "
operator|+
name|mapperOutput
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|reducerOutput
init|=
name|getProcessed
argument_list|(
name|mapperOutput
argument_list|,
name|redBadRecords
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"reducerOutput "
operator|+
name|reducerOutput
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputFiles
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|InputStream
name|is
init|=
name|getFileSystem
argument_list|()
operator|.
name|open
argument_list|(
name|outputFiles
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|counter
operator|++
expr_stmt|;
name|StringTokenizer
name|tokeniz
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
literal|"\t"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|tokeniz
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|tokeniz
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Output: key:"
operator|+
name|key
operator|+
literal|"  value:"
operator|+
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|.
name|contains
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reducerOutput
operator|.
name|contains
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|reducerOutput
operator|.
name|size
argument_list|()
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getProcessed (List<String> inputs, List<String> badRecs)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getProcessed
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|inputs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|badRecs
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|processed
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|input
range|:
name|inputs
control|)
block|{
if|if
condition|(
operator|!
name|badRecs
operator|.
name|contains
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|processed
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|processed
return|;
block|}
DECL|method|testBadMapRed ()
specifier|public
name|void
name|testBadMapRed
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|BadMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|BadReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|runMapReduce
argument_list|(
name|conf
argument_list|,
name|MAPPER_BAD_RECORDS
argument_list|,
name|REDUCER_BAD_RECORDS
argument_list|)
expr_stmt|;
block|}
DECL|class|BadMapper
specifier|static
class|class
name|BadMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|map (LongWritable key, Text val, OutputCollector<LongWritable, Text> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|val
parameter_list|,
name|OutputCollector
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|str
init|=
name|val
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"MAP key:"
operator|+
name|key
operator|+
literal|"  value:"
operator|+
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|MAPPER_BAD_RECORDS
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|str
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"MAP Encountered BAD record"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MAPPER_BAD_RECORDS
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|str
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"MAP Encountered BAD record"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad record "
operator|+
name|str
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|MAPPER_BAD_RECORDS
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|str
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"MAP Encountered BAD record"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|15
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BadReducer
specifier|static
class|class
name|BadReducer
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|method|reduce (LongWritable key, Iterator<Text> values, OutputCollector<LongWritable, Text> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Text
argument_list|>
name|values
parameter_list|,
name|OutputCollector
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Text
name|value
init|=
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"REDUCE key:"
operator|+
name|key
operator|+
literal|"  value:"
operator|+
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|REDUCER_BAD_RECORDS
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"REDUCE Encountered BAD record"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|REDUCER_BAD_RECORDS
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"REDUCE Encountered BAD record"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|15
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

