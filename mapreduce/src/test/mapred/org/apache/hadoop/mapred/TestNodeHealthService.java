begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTrackerStatus
operator|.
name|TaskTrackerHealthStatus
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestNodeHealthService
specifier|public
class|class
name|TestNodeHealthService
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|volatile
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestNodeHealthService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodeHealthConfigPath
specifier|private
specifier|static
specifier|final
name|String
name|nodeHealthConfigPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.extraconf"
argument_list|,
literal|"build/test/extraconf"
argument_list|)
decl_stmt|;
DECL|field|nodeHealthConfigFile
specifier|final
specifier|static
name|File
name|nodeHealthConfigFile
init|=
operator|new
name|File
argument_list|(
name|nodeHealthConfigPath
argument_list|,
literal|"mapred-site.xml"
argument_list|)
decl_stmt|;
DECL|field|testRootDir
specifier|private
name|String
name|testRootDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|nodeHealthscriptFile
specifier|private
name|File
name|nodeHealthscriptFile
init|=
operator|new
name|File
argument_list|(
name|testRootDir
argument_list|,
literal|"failingscript.sh"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|nodeHealthConfigFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|nodeHealthConfigFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nodeHealthscriptFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|nodeHealthscriptFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|getConfForNodeHealthScript ()
specifier|private
name|Configuration
name|getConfForNodeHealthScript
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|NodeHealthCheckerService
operator|.
name|HEALTH_CHECK_SCRIPT_PROPERTY
argument_list|,
name|nodeHealthscriptFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|NodeHealthCheckerService
operator|.
name|HEALTH_CHECK_INTERVAL_PROPERTY
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|NodeHealthCheckerService
operator|.
name|HEALTH_CHECK_FAILURE_INTERVAL_PROPERTY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|writeNodeHealthScriptFile (String scriptStr, boolean setExecutable)
specifier|private
name|void
name|writeNodeHealthScriptFile
parameter_list|(
name|String
name|scriptStr
parameter_list|,
name|boolean
name|setExecutable
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|nodeHealthscriptFile
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|scriptStr
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodeHealthscriptFile
operator|.
name|setExecutable
argument_list|(
name|setExecutable
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeHealthScriptShouldRun ()
specifier|public
name|void
name|testNodeHealthScriptShouldRun
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Node health script should not start if there is no property called
comment|// node health script path.
name|assertFalse
argument_list|(
literal|"Health checker should not have started"
argument_list|,
name|NodeHealthCheckerService
operator|.
name|shouldRun
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConfForNodeHealthScript
argument_list|()
decl_stmt|;
comment|// Node health script should not start if the node health script does not
comment|// exists
name|assertFalse
argument_list|(
literal|"Node health script should start"
argument_list|,
name|NodeHealthCheckerService
operator|.
name|shouldRun
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create script path.
name|conf
operator|.
name|writeXml
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|nodeHealthConfigFile
argument_list|)
argument_list|)
expr_stmt|;
name|writeNodeHealthScriptFile
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Node health script should not start if the node health script is not
comment|// executable.
name|assertFalse
argument_list|(
literal|"Node health script should start"
argument_list|,
name|NodeHealthCheckerService
operator|.
name|shouldRun
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|writeNodeHealthScriptFile
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node health script should start"
argument_list|,
name|NodeHealthCheckerService
operator|.
name|shouldRun
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeHealthScript ()
specifier|public
name|void
name|testNodeHealthScript
parameter_list|()
throws|throws
name|Exception
block|{
name|TaskTrackerHealthStatus
name|healthStatus
init|=
operator|new
name|TaskTrackerHealthStatus
argument_list|()
decl_stmt|;
name|String
name|errorScript
init|=
literal|"echo ERROR\n echo \"Tracker not healthy\""
decl_stmt|;
name|String
name|normalScript
init|=
literal|"echo \"I am all fine\""
decl_stmt|;
name|String
name|timeOutScript
init|=
literal|"sleep 4\n echo\"I am fine\""
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfForNodeHealthScript
argument_list|()
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|nodeHealthConfigFile
argument_list|)
argument_list|)
expr_stmt|;
name|NodeHealthCheckerService
name|nodeHealthChecker
init|=
operator|new
name|NodeHealthCheckerService
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TimerTask
name|timer
init|=
name|nodeHealthChecker
operator|.
name|getTimer
argument_list|()
decl_stmt|;
name|writeNodeHealthScriptFile
argument_list|(
name|normalScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|run
argument_list|()
expr_stmt|;
name|nodeHealthChecker
operator|.
name|setHealthStatus
argument_list|(
name|healthStatus
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking initial healthy condition"
argument_list|)
expr_stmt|;
comment|// Check proper report conditions.
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|healthStatus
operator|.
name|isNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|healthStatus
operator|.
name|getHealthReport
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// write out error file.
comment|// Healthy to unhealthy transition
name|writeNodeHealthScriptFile
argument_list|(
name|errorScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Run timer
name|timer
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// update health status
name|nodeHealthChecker
operator|.
name|setHealthStatus
argument_list|(
name|healthStatus
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking Healthy--->Unhealthy"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node health status reported healthy"
argument_list|,
name|healthStatus
operator|.
name|isNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node health status reported healthy"
argument_list|,
name|healthStatus
operator|.
name|getHealthReport
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check unhealthy to healthy transitions.
name|writeNodeHealthScriptFile
argument_list|(
name|normalScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|run
argument_list|()
expr_stmt|;
name|nodeHealthChecker
operator|.
name|setHealthStatus
argument_list|(
name|healthStatus
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking UnHealthy--->healthy"
argument_list|)
expr_stmt|;
comment|// Check proper report conditions.
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|healthStatus
operator|.
name|isNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node health status reported unhealthy"
argument_list|,
name|healthStatus
operator|.
name|getHealthReport
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Healthy to timeout transition.
name|writeNodeHealthScriptFile
argument_list|(
name|timeOutScript
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|run
argument_list|()
expr_stmt|;
name|nodeHealthChecker
operator|.
name|setHealthStatus
argument_list|(
name|healthStatus
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking Healthy--->timeout"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node health status reported healthy even after timeout"
argument_list|,
name|healthStatus
operator|.
name|isNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Node time out message not propogated"
argument_list|,
name|healthStatus
operator|.
name|getHealthReport
argument_list|()
argument_list|,
name|NodeHealthCheckerService
operator|.
name|NODE_HEALTH_SCRIPT_TIMED_OUT_MSG
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

