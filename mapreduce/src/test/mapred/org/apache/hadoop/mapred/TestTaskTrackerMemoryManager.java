begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|LinuxResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|ProcfsBasedProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|TestProcfsBasedProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test class to verify memory management of tasks.  */
end_comment

begin_class
DECL|class|TestTaskTrackerMemoryManager
specifier|public
class|class
name|TestTaskTrackerMemoryManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTaskTrackerMemoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
DECL|field|miniMRCluster
specifier|private
name|MiniMRCluster
name|miniMRCluster
decl_stmt|;
DECL|field|taskOverLimitPatternString
specifier|private
name|String
name|taskOverLimitPatternString
init|=
literal|"TaskTree \\[pid=[0-9]*,tipID=.*\\] is running beyond.*memory-limits. "
operator|+
literal|"Current usage : [0-9]*bytes. Limit : %sbytes. Killing task."
decl_stmt|;
DECL|method|startCluster (JobConf conf)
specifier|private
name|void
name|startCluster
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_HANDLER_COUNT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_MAP_SLOTS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_REDUCE_SLOTS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_SLEEP_TIME_BEFORE_SIG_KILL
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|miniMRCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|miniMRCluster
operator|!=
literal|null
condition|)
block|{
name|miniMRCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|runSleepJob (JobConf conf)
specifier|private
name|int
name|runSleepJob
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-m"
block|,
literal|"3"
block|,
literal|"-r"
block|,
literal|"1"
block|,
literal|"-mt"
block|,
literal|"3000"
block|,
literal|"-rt"
block|,
literal|"1000"
block|}
decl_stmt|;
return|return
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|SleepJob
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
DECL|method|runAndCheckSuccessfulJob (JobConf conf)
specifier|private
name|void
name|runAndCheckSuccessfulJob
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Pattern
name|taskOverLimitPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|taskOverLimitPatternString
argument_list|,
literal|"[0-9]*"
argument_list|)
argument_list|)
decl_stmt|;
name|Matcher
name|mat
init|=
literal|null
decl_stmt|;
comment|// Start the job.
name|int
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|runSleepJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ret
operator|=
literal|1
expr_stmt|;
block|}
comment|// Job has to succeed
name|assertTrue
argument_list|(
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
name|JobClient
name|jClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JobStatus
index|[]
name|jStatus
init|=
name|jClient
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|JobStatus
name|js
init|=
name|jStatus
index|[
literal|0
index|]
decl_stmt|;
comment|// Our only job
name|RunningJob
name|rj
init|=
name|jClient
operator|.
name|getJob
argument_list|(
name|js
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
comment|// All events
name|TaskCompletionEvent
index|[]
name|taskComplEvents
init|=
name|rj
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|tce
range|:
name|taskComplEvents
control|)
block|{
name|String
index|[]
name|diagnostics
init|=
name|rj
operator|.
name|getTaskDiagnostics
argument_list|(
name|tce
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|diagnostics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|str
range|:
name|diagnostics
control|)
block|{
name|mat
operator|=
name|taskOverLimitPattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
comment|// The error pattern shouldn't be there in any TIP's diagnostics
name|assertFalse
argument_list|(
name|mat
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|isProcfsBasedTreeAvailable ()
specifier|private
name|boolean
name|isProcfsBasedTreeAvailable
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|ProcfsBasedProcessTree
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Currently ProcessTree has only one implementation "
operator|+
literal|"ProcfsBasedProcessTree, which is not available on this "
operator|+
literal|"system. Not testing"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Test for verifying that nothing is killed when memory management is    * disabled on the TT, even when the tasks run over their limits.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testTTLimitsDisabled ()
specifier|public
name|void
name|testTTLimitsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run the test only if memory management is enabled
if|if
condition|(
operator|!
name|isProcfsBasedTreeAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Task-memory management disabled by default.
name|startCluster
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|PER_TASK_LIMIT
init|=
literal|1L
decl_stmt|;
comment|// Doesn't matter how low.
name|JobConf
name|conf
init|=
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setMemoryForMapTask
argument_list|(
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMemoryForReduceTask
argument_list|(
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
name|runAndCheckSuccessfulJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for verifying that tasks within limits, with the cumulative usage also    * under TT's limits succeed.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testTasksWithinLimits ()
specifier|public
name|void
name|testTasksWithinLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run the test only if memory management is enabled
if|if
condition|(
operator|!
name|isProcfsBasedTreeAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Large so that sleepjob goes through and fits total TT usage
name|long
name|PER_TASK_LIMIT
init|=
literal|2
operator|*
literal|1024L
decl_stmt|;
comment|// Start cluster with proper configuration.
name|JobConf
name|fConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|fConf
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|fConf
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|)
expr_stmt|;
comment|// Reserve only 1 mb of the memory on TaskTrackers
name|fConf
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_RESERVED_PHYSCIALMEMORY_MB
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMemoryForMapTask
argument_list|(
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMemoryForReduceTask
argument_list|(
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
comment|// Set task physical memory limits
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MEMORY_PHYSICAL_MB
argument_list|,
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MEMORY_PHYSICAL_MB
argument_list|,
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
name|runAndCheckSuccessfulJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for verifying that tasks that go beyond limits get killed.    *     * @throws Exception    */
annotation|@
name|Ignore
argument_list|(
literal|"Intermittent, unexpected task success causes test to fail."
argument_list|)
annotation|@
name|Test
DECL|method|testTasksBeyondLimits ()
specifier|public
name|void
name|testTasksBeyondLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run the test only if memory management is enabled
if|if
condition|(
operator|!
name|isProcfsBasedTreeAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Start cluster with proper configuration.
name|JobConf
name|fConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// very small value, so that no task escapes to successful completion.
name|fConf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_MEMORY_MANAGER_MONITORING_INTERVAL
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|fConf
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|fConf
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|fConf
argument_list|)
expr_stmt|;
name|runJobExceedingMemoryLimit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for verifying that tasks that go beyond physical limits get killed.    *     * @throws Exception    */
annotation|@
name|Ignore
argument_list|(
literal|"Intermittent, unexpected task success causes test to fail."
argument_list|)
annotation|@
name|Test
DECL|method|testTasksBeyondPhysicalLimits ()
specifier|public
name|void
name|testTasksBeyondPhysicalLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run the test only if memory management is enabled
if|if
condition|(
operator|!
name|isProcfsBasedTreeAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Start cluster with proper configuration.
name|JobConf
name|fConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// very small value, so that no task escapes to successful completion.
name|fConf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_MEMORY_MANAGER_MONITORING_INTERVAL
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Reserve only 1 mb of the memory on TaskTrackers
name|fConf
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_RESERVED_PHYSCIALMEMORY_MB
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|fConf
argument_list|)
expr_stmt|;
name|runJobExceedingMemoryLimit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs tests with tasks beyond limit and using old configuration values for    * the TaskTracker.    *     * @throws Exception    */
annotation|@
name|Ignore
argument_list|(
literal|"Intermittent, unexpected task success causes test to fail."
argument_list|)
annotation|@
name|Test
DECL|method|testTaskMemoryMonitoringWithDeprecatedConfiguration ()
specifier|public
name|void
name|testTaskMemoryMonitoringWithDeprecatedConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run the test only if memory management is enabled
if|if
condition|(
operator|!
name|isProcfsBasedTreeAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Start cluster with proper configuration.
name|JobConf
name|fConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// very small value, so that no task escapes to successful completion.
name|fConf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_MEMORY_MANAGER_MONITORING_INTERVAL
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//set old values, max vm property per task and upper limit on the tasks
comment|//vm
comment|//setting the default maximum vmem property to 2 GB
name|fConf
operator|.
name|setLong
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_DEFAULT_MAXVMEM_PROPERTY
argument_list|,
operator|(
literal|2L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|)
argument_list|)
expr_stmt|;
name|fConf
operator|.
name|setLong
argument_list|(
name|JobConf
operator|.
name|UPPER_LIMIT_ON_TASK_VMEM_PROPERTY
argument_list|,
operator|(
literal|3L
operator|*
literal|1024L
operator|*
literal|1024L
operator|*
literal|1024L
operator|)
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|fConf
argument_list|)
expr_stmt|;
name|runJobExceedingMemoryLimit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs a job which should fail the when run by the memory monitor.    *     * @param doPhysicalMemory If it is true, use physical memory limit.    *                         Otherwise use virtual memory limit.    * @throws IOException    */
DECL|method|runJobExceedingMemoryLimit (boolean doPhysicalMemory)
specifier|private
name|void
name|runJobExceedingMemoryLimit
parameter_list|(
name|boolean
name|doPhysicalMemory
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|PER_TASK_LIMIT
init|=
literal|1L
decl_stmt|;
comment|// Low enough to kill off sleepJob tasks.
name|Pattern
name|taskOverLimitPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|taskOverLimitPatternString
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|PER_TASK_LIMIT
operator|*
literal|1024
operator|*
literal|1024L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Matcher
name|mat
init|=
literal|null
decl_stmt|;
comment|// Set up job.
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doPhysicalMemory
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MEMORY_PHYSICAL_MB
argument_list|,
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MEMORY_PHYSICAL_MB
argument_list|,
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|setMemoryForMapTask
argument_list|(
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMemoryForReduceTask
argument_list|(
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Start the job.
name|int
name|ret
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|runSleepJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ret
operator|=
literal|1
expr_stmt|;
block|}
comment|// Job has to fail
name|assertTrue
argument_list|(
name|ret
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|JobClient
name|jClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JobStatus
index|[]
name|jStatus
init|=
name|jClient
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|JobStatus
name|js
init|=
name|jStatus
index|[
literal|0
index|]
decl_stmt|;
comment|// Our only job
name|RunningJob
name|rj
init|=
name|jClient
operator|.
name|getJob
argument_list|(
name|js
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
comment|// All events
name|TaskCompletionEvent
index|[]
name|taskComplEvents
init|=
name|rj
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|tce
range|:
name|taskComplEvents
control|)
block|{
comment|// Every task HAS to fail
name|assertTrue
argument_list|(
literal|"Failure expected, task: "
operator|+
name|tce
operator|.
name|getTaskStatus
argument_list|()
argument_list|,
name|tce
operator|.
name|getTaskStatus
argument_list|()
operator|==
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|TIPFAILED
operator|||
name|tce
operator|.
name|getTaskStatus
argument_list|()
operator|==
name|TaskCompletionEvent
operator|.
name|Status
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|String
index|[]
name|diagnostics
init|=
name|rj
operator|.
name|getTaskDiagnostics
argument_list|(
name|tce
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Every task HAS to spit out the out-of-memory errors
name|assertNotNull
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|str
range|:
name|diagnostics
control|)
block|{
name|mat
operator|=
name|taskOverLimitPattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
comment|// Every task HAS to spit out the out-of-memory errors in the same
comment|// format. And these are the only diagnostic messages.
name|assertTrue
argument_list|(
name|mat
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test for verifying that tasks causing cumulative usage to go beyond TT's    * limit get killed even though they all are under individual limits. Memory    * management for tasks with disabled task-limits also traverses the same    * code-path, so we don't need a separate testTaskLimitsDisabled.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testTasksCumulativelyExceedingTTLimits ()
specifier|public
name|void
name|testTasksCumulativelyExceedingTTLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run the test only if memory management is enabled
if|if
condition|(
operator|!
name|isProcfsBasedTreeAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Large enough for SleepJob Tasks.
name|long
name|PER_TASK_LIMIT
init|=
literal|100
operator|*
literal|1024L
decl_stmt|;
comment|// Start cluster with proper configuration.
name|JobConf
name|fConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|fConf
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|fConf
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
comment|// Because of the above, the total tt limit is 2mb
name|long
name|TASK_TRACKER_LIMIT
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
comment|// very small value, so that no task escapes to successful completion.
name|fConf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_MEMORY_MANAGER_MONITORING_INTERVAL
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|fConf
argument_list|)
expr_stmt|;
name|Pattern
name|taskOverLimitPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|taskOverLimitPatternString
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|PER_TASK_LIMIT
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Pattern
name|trackerOverLimitPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Killing one of the least progress tasks - .*, as "
operator|+
literal|"the cumulative memory usage of all the tasks on the TaskTracker"
operator|+
literal|" exceeds virtual memory limit "
operator|+
name|TASK_TRACKER_LIMIT
operator|+
literal|"."
argument_list|)
decl_stmt|;
name|Matcher
name|mat
init|=
literal|null
decl_stmt|;
comment|// Set up job.
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setMemoryForMapTask
argument_list|(
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMemoryForReduceTask
argument_list|(
name|PER_TASK_LIMIT
argument_list|)
expr_stmt|;
name|JobClient
name|jClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Start the job
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|5000
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|boolean
name|TTOverFlowMsgPresent
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|TaskReport
argument_list|>
name|allTaskReports
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskReport
argument_list|>
argument_list|()
decl_stmt|;
name|allTaskReports
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|jClient
operator|.
name|getSetupTaskReports
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allTaskReports
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|jClient
operator|.
name|getMapTaskReports
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskReport
name|tr
range|:
name|allTaskReports
control|)
block|{
name|String
index|[]
name|diag
init|=
name|tr
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|diag
control|)
block|{
name|mat
operator|=
name|taskOverLimitPattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mat
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|mat
operator|=
name|trackerOverLimitPattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
name|TTOverFlowMsgPresent
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|TTOverFlowMsgPresent
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// nothing
block|}
block|}
comment|// If it comes here without a test-timeout, it means there was a task that
comment|// was killed because of crossing cumulative TT limit.
comment|// Test succeeded, kill the job.
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test to verify the check for whether a process tree is over limit or not.    * @throws IOException if there was a problem setting up the    *                      fake procfs directories or files.    */
annotation|@
name|Test
DECL|method|testProcessTreeLimits ()
specifier|public
name|void
name|testProcessTreeLimits
parameter_list|()
throws|throws
name|IOException
block|{
comment|// set up a dummy proc file system
name|File
name|procfsRootDir
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"proc"
argument_list|)
decl_stmt|;
name|String
index|[]
name|pids
init|=
block|{
literal|"100"
block|,
literal|"200"
block|,
literal|"300"
block|,
literal|"400"
block|,
literal|"500"
block|,
literal|"600"
block|,
literal|"700"
block|}
decl_stmt|;
try|try
block|{
name|TestProcfsBasedProcessTree
operator|.
name|setupProcfsRootDir
argument_list|(
name|procfsRootDir
argument_list|)
expr_stmt|;
comment|// create pid dirs.
name|TestProcfsBasedProcessTree
operator|.
name|setupPidDirs
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
argument_list|)
expr_stmt|;
comment|// create process infos.
name|TestProcfsBasedProcessTree
operator|.
name|ProcessStatInfo
index|[]
name|procs
init|=
operator|new
name|TestProcfsBasedProcessTree
operator|.
name|ProcessStatInfo
index|[
literal|7
index|]
decl_stmt|;
comment|// assume pids 100, 500 are in 1 tree
comment|// 200,300,400 are in another
comment|// 600,700 are in a third
name|procs
index|[
literal|0
index|]
operator|=
operator|new
name|TestProcfsBasedProcessTree
operator|.
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"100"
block|,
literal|"proc1"
block|,
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100000"
block|}
argument_list|)
expr_stmt|;
name|procs
index|[
literal|1
index|]
operator|=
operator|new
name|TestProcfsBasedProcessTree
operator|.
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"200"
block|,
literal|"proc2"
block|,
literal|"1"
block|,
literal|"200"
block|,
literal|"200"
block|,
literal|"200000"
block|}
argument_list|)
expr_stmt|;
name|procs
index|[
literal|2
index|]
operator|=
operator|new
name|TestProcfsBasedProcessTree
operator|.
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"300"
block|,
literal|"proc3"
block|,
literal|"200"
block|,
literal|"200"
block|,
literal|"200"
block|,
literal|"300000"
block|}
argument_list|)
expr_stmt|;
name|procs
index|[
literal|3
index|]
operator|=
operator|new
name|TestProcfsBasedProcessTree
operator|.
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"400"
block|,
literal|"proc4"
block|,
literal|"200"
block|,
literal|"200"
block|,
literal|"200"
block|,
literal|"400000"
block|}
argument_list|)
expr_stmt|;
name|procs
index|[
literal|4
index|]
operator|=
operator|new
name|TestProcfsBasedProcessTree
operator|.
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"500"
block|,
literal|"proc5"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"1500000"
block|}
argument_list|)
expr_stmt|;
name|procs
index|[
literal|5
index|]
operator|=
operator|new
name|TestProcfsBasedProcessTree
operator|.
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"600"
block|,
literal|"proc6"
block|,
literal|"1"
block|,
literal|"600"
block|,
literal|"600"
block|,
literal|"100000"
block|}
argument_list|)
expr_stmt|;
name|procs
index|[
literal|6
index|]
operator|=
operator|new
name|TestProcfsBasedProcessTree
operator|.
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"700"
block|,
literal|"proc7"
block|,
literal|"600"
block|,
literal|"600"
block|,
literal|"600"
block|,
literal|"100000"
block|}
argument_list|)
expr_stmt|;
comment|// write stat files.
name|TestProcfsBasedProcessTree
operator|.
name|writeStatFiles
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
argument_list|,
name|procs
argument_list|)
expr_stmt|;
comment|// vmem limit
name|long
name|limit
init|=
literal|700000
decl_stmt|;
comment|// Create TaskMemoryMonitorThread
name|TaskMemoryManagerThread
name|test
init|=
operator|new
name|TaskMemoryManagerThread
argument_list|(
literal|1000000L
argument_list|,
literal|5000L
argument_list|)
decl_stmt|;
comment|// create process trees
comment|// tree rooted at 100 is over limit immediately, as it is
comment|// twice over the mem limit.
name|ProcfsBasedProcessTree
name|pTree
init|=
operator|new
name|ProcfsBasedProcessTree
argument_list|(
literal|"100"
argument_list|,
literal|true
argument_list|,
literal|100L
argument_list|,
name|procfsRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|pTree
operator|.
name|getProcessTree
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tree rooted at 100 should be over limit "
operator|+
literal|"after first iteration."
argument_list|,
name|test
operator|.
name|isProcessTreeOverLimit
argument_list|(
name|pTree
argument_list|,
literal|"dummyId"
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
comment|// the tree rooted at 200 is initially below limit.
name|pTree
operator|=
operator|new
name|ProcfsBasedProcessTree
argument_list|(
literal|"200"
argument_list|,
literal|true
argument_list|,
literal|100L
argument_list|,
name|procfsRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pTree
operator|.
name|getProcessTree
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"tree rooted at 200 shouldn't be over limit "
operator|+
literal|"after one iteration."
argument_list|,
name|test
operator|.
name|isProcessTreeOverLimit
argument_list|(
name|pTree
argument_list|,
literal|"dummyId"
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
comment|// second iteration - now the tree has been over limit twice,
comment|// hence it should be declared over limit.
name|pTree
operator|.
name|getProcessTree
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tree rooted at 200 should be over limit after 2 iterations"
argument_list|,
name|test
operator|.
name|isProcessTreeOverLimit
argument_list|(
name|pTree
argument_list|,
literal|"dummyId"
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
comment|// the tree rooted at 600 is never over limit.
name|pTree
operator|=
operator|new
name|ProcfsBasedProcessTree
argument_list|(
literal|"600"
argument_list|,
literal|true
argument_list|,
literal|100L
argument_list|,
name|procfsRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|pTree
operator|.
name|getProcessTree
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"tree rooted at 600 should never be over limit."
argument_list|,
name|test
operator|.
name|isProcessTreeOverLimit
argument_list|(
name|pTree
argument_list|,
literal|"dummyId"
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
comment|// another iteration does not make any difference.
name|pTree
operator|.
name|getProcessTree
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"tree rooted at 600 should never be over limit."
argument_list|,
name|test
operator|.
name|isProcessTreeOverLimit
argument_list|(
name|pTree
argument_list|,
literal|"dummyId"
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|procfsRootDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test for verifying that tasks causing cumulative usage of physical memory    * to go beyond TT's limit get killed.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testTasksCumulativelyExceedingTTPhysicalLimits ()
specifier|public
name|void
name|testTasksCumulativelyExceedingTTPhysicalLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run the test only if memory management is enabled
if|if
condition|(
operator|!
name|isProcfsBasedTreeAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Start cluster with proper configuration.
name|JobConf
name|fConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// very small value, so that no task escapes to successful completion.
name|fConf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_MEMORY_MANAGER_MONITORING_INTERVAL
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// reserve all memory on TT so that the job will exceed memory limits
name|LinuxResourceCalculatorPlugin
name|memoryCalculatorPlugin
init|=
operator|new
name|LinuxResourceCalculatorPlugin
argument_list|()
decl_stmt|;
name|long
name|totalPhysicalMemory
init|=
name|memoryCalculatorPlugin
operator|.
name|getPhysicalMemorySize
argument_list|()
decl_stmt|;
name|long
name|reservedPhysicalMemory
init|=
name|totalPhysicalMemory
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|+
literal|1
decl_stmt|;
name|fConf
operator|.
name|setLong
argument_list|(
name|TTConfig
operator|.
name|TT_RESERVED_PHYSCIALMEMORY_MB
argument_list|,
name|reservedPhysicalMemory
argument_list|)
expr_stmt|;
name|long
name|maxRssMemoryAllowedForAllTasks
init|=
name|totalPhysicalMemory
operator|-
name|reservedPhysicalMemory
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
name|Pattern
name|physicalMemoryOverLimitPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Killing one of the memory-consuming tasks - .*"
operator|+
literal|", as the cumulative RSS memory usage of all the tasks on "
operator|+
literal|"the TaskTracker exceeds physical memory limit "
operator|+
name|maxRssMemoryAllowedForAllTasks
operator|+
literal|"."
argument_list|)
decl_stmt|;
name|startCluster
argument_list|(
name|fConf
argument_list|)
expr_stmt|;
name|Matcher
name|mat
init|=
literal|null
decl_stmt|;
comment|// Set up job.
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|miniMRCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set per task physical memory limits to be a higher value
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MEMORY_PHYSICAL_MB
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_MEMORY_PHYSICAL_MB
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|JobClient
name|jClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Start the job
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|boolean
name|TTOverFlowMsgPresent
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|TaskReport
argument_list|>
name|allTaskReports
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskReport
argument_list|>
argument_list|()
decl_stmt|;
name|allTaskReports
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|jClient
operator|.
name|getSetupTaskReports
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allTaskReports
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|jClient
operator|.
name|getMapTaskReports
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskReport
name|tr
range|:
name|allTaskReports
control|)
block|{
name|String
index|[]
name|diag
init|=
name|tr
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|diag
control|)
block|{
name|mat
operator|=
name|physicalMemoryOverLimitPattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
name|TTOverFlowMsgPresent
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|TTOverFlowMsgPresent
condition|)
block|{
break|break;
block|}
name|assertFalse
argument_list|(
literal|"Job should not finish successfully"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// nothing
block|}
block|}
comment|// If it comes here without a test-timeout, it means there was a task that
comment|// was killed because of crossing cumulative TT limit.
comment|// Test succeeded, kill the job.
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

