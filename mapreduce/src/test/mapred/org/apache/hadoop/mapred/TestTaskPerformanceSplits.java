begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestTaskPerformanceSplits
specifier|public
class|class
name|TestTaskPerformanceSplits
block|{
annotation|@
name|Test
DECL|method|testPeriodStatsets ()
specifier|public
name|void
name|testPeriodStatsets
parameter_list|()
block|{
name|PeriodicStatsAccumulator
name|cumulative
init|=
operator|new
name|CumulativePeriodicStats
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|PeriodicStatsAccumulator
name|status
init|=
operator|new
name|StatePeriodicStats
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|cumulative
operator|.
name|extend
argument_list|(
literal|0.0D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cumulative
operator|.
name|extend
argument_list|(
literal|0.4375D
argument_list|,
literal|700
argument_list|)
expr_stmt|;
comment|// 200 per octant
name|cumulative
operator|.
name|extend
argument_list|(
literal|0.5625D
argument_list|,
literal|1100
argument_list|)
expr_stmt|;
comment|// 0.5 = 900
name|cumulative
operator|.
name|extend
argument_list|(
literal|0.625D
argument_list|,
literal|1300
argument_list|)
expr_stmt|;
name|cumulative
operator|.
name|extend
argument_list|(
literal|1.0D
argument_list|,
literal|7901
argument_list|)
expr_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|results
init|=
name|cumulative
operator|.
name|getValues
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"segment i = "
operator|+
name|results
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Bad interpolation in cumulative segment 0"
argument_list|,
literal|200
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in cumulative segment 1"
argument_list|,
literal|200
argument_list|,
name|results
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in cumulative segment 2"
argument_list|,
literal|200
argument_list|,
name|results
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in cumulative segment 3"
argument_list|,
literal|300
argument_list|,
name|results
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in cumulative segment 4"
argument_list|,
literal|400
argument_list|,
name|results
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in cumulative segment 5"
argument_list|,
literal|2200
argument_list|,
name|results
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// these are rounded down
name|assertEquals
argument_list|(
literal|"Bad interpolation in cumulative segment 6"
argument_list|,
literal|2200
argument_list|,
name|results
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in cumulative segment 7"
argument_list|,
literal|2201
argument_list|,
name|results
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|status
operator|.
name|extend
argument_list|(
literal|0.0D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|status
operator|.
name|extend
argument_list|(
literal|1.0D
operator|/
literal|16.0D
argument_list|,
literal|300
argument_list|)
expr_stmt|;
comment|// + 75 for bucket 0
name|status
operator|.
name|extend
argument_list|(
literal|3.0D
operator|/
literal|16.0D
argument_list|,
literal|700
argument_list|)
expr_stmt|;
comment|// + 200 for 0, +300 for 1
name|status
operator|.
name|extend
argument_list|(
literal|7.0D
operator|/
literal|16.0D
argument_list|,
literal|2300
argument_list|)
expr_stmt|;
comment|// + 450 for 1, + 1500 for 2, + 1050 for 3
name|status
operator|.
name|extend
argument_list|(
literal|1.0D
argument_list|,
literal|1400
argument_list|)
expr_stmt|;
comment|// +1125 for 3, +2100 for 4, +1900 for 5,
empty_stmt|;
comment|// +1700 for 6, +1500 for 7
name|results
operator|=
name|status
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in status segment 0"
argument_list|,
literal|275
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in status segment 1"
argument_list|,
literal|750
argument_list|,
name|results
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in status segment 2"
argument_list|,
literal|1500
argument_list|,
name|results
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in status segment 3"
argument_list|,
literal|2175
argument_list|,
name|results
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in status segment 4"
argument_list|,
literal|2100
argument_list|,
name|results
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in status segment 5"
argument_list|,
literal|1900
argument_list|,
name|results
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in status segment 6"
argument_list|,
literal|1700
argument_list|,
name|results
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bad interpolation in status segment 7"
argument_list|,
literal|1500
argument_list|,
name|results
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

