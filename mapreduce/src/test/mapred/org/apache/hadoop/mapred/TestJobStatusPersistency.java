begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_class
DECL|class|TestJobStatusPersistency
specifier|public
class|class
name|TestJobStatusPersistency
extends|extends
name|ClusterMapReduceTestCase
block|{
DECL|field|TEST_DIR
specifier|static
specifier|final
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"job-status-persistence"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Don't start anything by default
block|}
DECL|method|runJob ()
specifier|private
name|JobID
name|runJob
parameter_list|()
throws|throws
name|Exception
block|{
name|OutputStream
name|os
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|getInputDir
argument_list|()
argument_list|,
literal|"text.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
name|wr
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|wr
operator|.
name|write
argument_list|(
literal|"hello1\n"
argument_list|)
expr_stmt|;
name|wr
operator|.
name|write
argument_list|(
literal|"hello2\n"
argument_list|)
expr_stmt|;
name|wr
operator|.
name|write
argument_list|(
literal|"hello3\n"
argument_list|)
expr_stmt|;
name|wr
operator|.
name|write
argument_list|(
literal|"hello4\n"
argument_list|)
expr_stmt|;
name|wr
operator|.
name|close
argument_list|()
expr_stmt|;
name|JobConf
name|conf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setJobName
argument_list|(
literal|"mr"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputFormat
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|getInputDir
argument_list|()
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|getOutputDir
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
operator|.
name|getID
argument_list|()
return|;
block|}
DECL|method|testNonPersistency ()
specifier|public
name|void
name|testNonPersistency
parameter_list|()
throws|throws
name|Exception
block|{
name|startCluster
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|JobID
name|jobId
init|=
name|runJob
argument_list|()
decl_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|RunningJob
name|rj
init|=
name|jc
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rj
argument_list|)
expr_stmt|;
name|stopCluster
argument_list|()
expr_stmt|;
name|startCluster
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|jc
operator|=
operator|new
name|JobClient
argument_list|(
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
name|rj
operator|=
name|jc
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rj
argument_list|)
expr_stmt|;
block|}
DECL|method|testPersistency ()
specifier|public
name|void
name|testPersistency
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|config
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS_HOURS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|true
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|JobID
name|jobId
init|=
name|runJob
argument_list|()
decl_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|RunningJob
name|rj0
init|=
name|jc
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rj0
argument_list|)
expr_stmt|;
name|boolean
name|sucessfull0
init|=
name|rj0
operator|.
name|isSuccessful
argument_list|()
decl_stmt|;
name|String
name|jobName0
init|=
name|rj0
operator|.
name|getJobName
argument_list|()
decl_stmt|;
name|Counters
name|counters0
init|=
name|rj0
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|TaskCompletionEvent
index|[]
name|events0
init|=
name|rj0
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|stopCluster
argument_list|()
expr_stmt|;
name|startCluster
argument_list|(
literal|false
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|jc
operator|=
operator|new
name|JobClient
argument_list|(
name|createJobConf
argument_list|()
argument_list|)
expr_stmt|;
name|RunningJob
name|rj1
init|=
name|jc
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rj1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sucessfull0
argument_list|,
name|rj1
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jobName0
argument_list|,
name|rj0
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|counters0
operator|.
name|size
argument_list|()
argument_list|,
name|rj1
operator|.
name|getCounters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TaskCompletionEvent
index|[]
name|events1
init|=
name|rj1
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|events0
operator|.
name|length
argument_list|,
name|events1
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|events0
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|events0
index|[
name|i
index|]
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|,
name|events1
index|[
name|i
index|]
operator|.
name|getTaskAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|events0
index|[
name|i
index|]
operator|.
name|getTaskStatus
argument_list|()
argument_list|,
name|events1
index|[
name|i
index|]
operator|.
name|getTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test if the completed job status is persisted to localfs.    */
DECL|method|testLocalPersistency ()
specifier|public
name|void
name|testLocalPersistency
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Properties
name|config
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS_HOURS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS_DIR
argument_list|,
name|fs
operator|.
name|makeQualified
argument_list|(
name|TEST_DIR
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|true
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|JobID
name|jobId
init|=
name|runJob
argument_list|()
decl_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|RunningJob
name|rj
init|=
name|jc
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rj
argument_list|)
expr_stmt|;
comment|// check if the local fs has the data
name|Path
name|jobInfo
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|rj
operator|.
name|getID
argument_list|()
operator|+
literal|".info"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Missing job info from the local fs"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|jobInfo
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that completed-job store is inactive if the jobinfo path is not    * writable.    *     * @throws Exception    */
DECL|method|testJobStoreDisablingWithInvalidPath ()
specifier|public
name|void
name|testJobStoreDisablingWithInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|TEST_DIR
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Cannot delete TEST_DIR!"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_DIR
argument_list|,
name|parent
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|parent
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setWritable
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Cannot chmod parent!"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Cannot create parent dir!"
argument_list|)
expr_stmt|;
block|}
name|JobConf
name|config
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS_HOURS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS_DIR
argument_list|,
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|started
init|=
literal|true
decl_stmt|;
name|JobConf
name|conf
init|=
name|MiniMRCluster
operator|.
name|configureJobConf
argument_list|(
name|config
argument_list|,
literal|"file:///"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|JobTracker
name|jt
init|=
name|JobTracker
operator|.
name|startTracker
argument_list|(
name|conf
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|started
operator|=
literal|false
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|started
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
name|parent
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|setWritable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

