begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|SecureShuffleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestShuffleJobToken
specifier|public
class|class
name|TestShuffleJobToken
block|{
DECL|field|server
specifier|private
specifier|static
name|HttpServer
name|server
decl_stmt|;
DECL|field|baseUrl
specifier|private
specifier|static
name|URL
name|baseUrl
decl_stmt|;
DECL|field|dir
specifier|private
specifier|static
name|File
name|dir
decl_stmt|;
DECL|field|JOB_ID
specifier|private
specifier|static
specifier|final
name|String
name|JOB_ID
init|=
literal|"job_20091117075357176_0001"
decl_stmt|;
DECL|field|BAD_JOB_ID
specifier|private
specifier|static
specifier|final
name|String
name|BAD_JOB_ID
init|=
literal|"job_20091117075357176_0002"
decl_stmt|;
comment|// create fake url
DECL|method|getMapOutputURL (String host)
specifier|private
name|URL
name|getMapOutputURL
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|MalformedURLException
block|{
comment|// Get the base url
name|StringBuffer
name|url
init|=
operator|new
name|StringBuffer
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"mapOutput?"
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"job="
operator|+
name|JOB_ID
operator|+
literal|"&"
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"reduce=0&"
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
literal|"map=attempt"
argument_list|)
expr_stmt|;
return|return
operator|new
name|URL
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|dir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"build.webapps"
argument_list|,
literal|"build/webapps"
argument_list|)
operator|+
literal|"/test"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"dir="
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|dir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|server
operator|=
operator|new
name|HttpServer
argument_list|(
literal|"test"
argument_list|,
literal|"0.0.0.0"
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|server
operator|.
name|addServlet
argument_list|(
literal|"shuffle"
argument_list|,
literal|"/mapOutput"
argument_list|,
name|TaskTracker
operator|.
name|MapOutputServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|port
init|=
name|server
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|baseUrl
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * try positive and negative case with invalid urlHash    */
annotation|@
name|Test
DECL|method|testInvalidJobToken ()
specifier|public
name|void
name|testInvalidJobToken
parameter_list|()
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|URL
name|url
init|=
name|getMapOutputURL
argument_list|(
name|baseUrl
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|enc_str
init|=
name|SecureShuffleUtils
operator|.
name|buildMsgFrom
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|URLConnection
name|connectionGood
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|TaskTracker
name|tt
init|=
operator|new
name|TaskTracker
argument_list|()
decl_stmt|;
name|JobTokenSecretManager
name|jtSecretManager
init|=
operator|new
name|JobTokenSecretManager
argument_list|()
decl_stmt|;
comment|// create fake TaskTracker - needed for keys storage
name|JobTokenIdentifier
name|identifier
init|=
operator|new
name|JobTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|JOB_ID
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jt
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
name|identifier
argument_list|,
name|jtSecretManager
argument_list|)
decl_stmt|;
name|SecretKey
name|tokenSecret
init|=
name|JobTokenSecretManager
operator|.
name|createSecretKey
argument_list|(
name|jt
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|addJobToken
argument_list|(
name|tt
argument_list|,
name|JOB_ID
argument_list|,
name|jt
argument_list|)
expr_stmt|;
comment|// fake id
name|server
operator|.
name|setAttribute
argument_list|(
literal|"task.tracker"
argument_list|,
name|tt
argument_list|)
expr_stmt|;
comment|// encode the url
name|String
name|urlHashGood
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|enc_str
operator|.
name|getBytes
argument_list|()
argument_list|,
name|tokenSecret
argument_list|)
decl_stmt|;
comment|// valid hash
comment|// another the key
name|JobTokenIdentifier
name|badIdentifier
init|=
operator|new
name|JobTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|BAD_JOB_ID
argument_list|)
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|badToken
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|(
name|badIdentifier
argument_list|,
name|jtSecretManager
argument_list|)
decl_stmt|;
name|SecretKey
name|badSecret
init|=
name|JobTokenSecretManager
operator|.
name|createSecretKey
argument_list|(
name|badToken
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|urlHashBad
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|enc_str
operator|.
name|getBytes
argument_list|()
argument_list|,
name|badSecret
argument_list|)
decl_stmt|;
comment|// invalid hash
comment|// put url hash into http header
name|connectionGood
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|urlHashGood
argument_list|)
expr_stmt|;
comment|// valid url hash should not fail with security error
try|try
block|{
name|connectionGood
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|String
name|msg
init|=
name|ie
operator|.
name|getLocalizedMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|contains
argument_list|(
literal|"Server returned HTTP response code: 401 for URL:"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"securtity failure with valid urlHash:"
operator|+
name|ie
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"valid urlhash passed validation"
argument_list|)
expr_stmt|;
block|}
comment|// invalid url hash
name|URLConnection
name|connectionBad
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connectionBad
operator|.
name|addRequestProperty
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|,
name|urlHashBad
argument_list|)
expr_stmt|;
try|try
block|{
name|connectionBad
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Connection should've failed because of invalid urlHash"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|String
name|msg
init|=
name|ie
operator|.
name|getLocalizedMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|msg
operator|.
name|contains
argument_list|(
literal|"Server returned HTTP response code: 401 for URL:"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"connection failed with other then validation error:"
operator|+
name|ie
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"validation worked, failed with:"
operator|+
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*Note that this method is there for a unit testcase (TestShuffleJobToken)*/
DECL|method|addJobToken (TaskTracker tt, String jobIdStr, Token<JobTokenIdentifier> token)
name|void
name|addJobToken
parameter_list|(
name|TaskTracker
name|tt
parameter_list|,
name|String
name|jobIdStr
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
name|JobID
name|jobId
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobIdStr
argument_list|)
decl_stmt|;
name|TaskTracker
operator|.
name|RunningJob
name|rJob
init|=
operator|new
name|TaskTracker
operator|.
name|RunningJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|tt
operator|.
name|runningJobs
init|)
block|{
name|tt
operator|.
name|runningJobs
operator|.
name|put
argument_list|(
name|jobId
argument_list|,
name|rJob
argument_list|)
expr_stmt|;
block|}
name|tt
operator|.
name|getJobTokenSecretManager
argument_list|()
operator|.
name|addTokenForJob
argument_list|(
name|jobIdStr
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

