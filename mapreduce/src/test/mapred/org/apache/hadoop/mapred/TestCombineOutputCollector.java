begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|IFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
operator|.
name|CombineOutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Task
operator|.
name|TaskReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCombineOutputCollector
specifier|public
class|class
name|TestCombineOutputCollector
block|{
DECL|field|coc
specifier|private
name|CombineOutputCollector
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|coc
decl_stmt|;
annotation|@
name|Test
DECL|method|testCustomCollect ()
specifier|public
name|void
name|testCustomCollect
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//mock creation
name|TaskReporter
name|mockTaskReporter
init|=
name|mock
argument_list|(
name|TaskReporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Counters
operator|.
name|Counter
name|outCounter
init|=
operator|new
name|Counters
operator|.
name|Counter
argument_list|()
decl_stmt|;
name|Writer
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mockWriter
init|=
name|mock
argument_list|(
name|Writer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.combine.recordsBeforeProgress"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|coc
operator|=
operator|new
name|CombineOutputCollector
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|outCounter
argument_list|,
name|mockTaskReporter
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|coc
operator|.
name|setWriter
argument_list|(
name|mockWriter
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTaskReporter
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|progress
argument_list|()
expr_stmt|;
name|coc
operator|.
name|collect
argument_list|(
literal|"dummy"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTaskReporter
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|progress
argument_list|()
expr_stmt|;
name|coc
operator|.
name|collect
argument_list|(
literal|"dummy"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTaskReporter
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultCollect ()
specifier|public
name|void
name|testDefaultCollect
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//mock creation
name|TaskReporter
name|mockTaskReporter
init|=
name|mock
argument_list|(
name|TaskReporter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Counters
operator|.
name|Counter
name|outCounter
init|=
operator|new
name|Counters
operator|.
name|Counter
argument_list|()
decl_stmt|;
name|Writer
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mockWriter
init|=
name|mock
argument_list|(
name|Writer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|coc
operator|=
operator|new
name|CombineOutputCollector
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|outCounter
argument_list|,
name|mockTaskReporter
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|coc
operator|.
name|setWriter
argument_list|(
name|mockWriter
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockTaskReporter
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|progress
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Task
operator|.
name|DEFAULT_COMBINE_RECORDS_BEFORE_PROGRESS
condition|;
name|i
operator|++
control|)
block|{
name|coc
operator|.
name|collect
argument_list|(
literal|"dummy"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|mockTaskReporter
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|progress
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Task
operator|.
name|DEFAULT_COMBINE_RECORDS_BEFORE_PROGRESS
condition|;
name|i
operator|++
control|)
block|{
name|coc
operator|.
name|collect
argument_list|(
literal|"dummy"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|mockTaskReporter
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

