begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**   * Re-runs a map task using the IsolationRunner.   *  * The task included here is an identity mapper that touches  * a file in a side-effect directory.  This is used  * to verify that the task in fact ran.  */
end_comment

begin_class
DECL|class|TestIsolationRunner
specifier|public
class|class
name|TestIsolationRunner
extends|extends
name|TestCase
block|{
DECL|field|SIDE_EFFECT_DIR_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|SIDE_EFFECT_DIR_PROPERTY
init|=
literal|"test.isolationrunner.sideeffectdir"
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
comment|/** Identity mapper that also creates a side effect file. */
DECL|class|SideEffectMapper
specifier|static
class|class
name|SideEffectMapper
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|IdentityMapper
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|conf
specifier|private
name|JobConf
name|conf
decl_stmt|;
annotation|@
name|Override
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|writeSideEffectFile
argument_list|(
name|conf
argument_list|,
literal|"map"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SideEffectReducer
specifier|static
class|class
name|SideEffectReducer
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|IdentityReducer
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|conf
specifier|private
name|JobConf
name|conf
decl_stmt|;
annotation|@
name|Override
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|writeSideEffectFile
argument_list|(
name|conf
argument_list|,
literal|"reduce"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteSideEffectFiles (JobConf conf)
specifier|private
specifier|static
name|void
name|deleteSideEffectFiles
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|SIDE_EFFECT_DIR_PROPERTY
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countSideEffectFiles
argument_list|(
name|conf
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSideEffectFile (JobConf conf, String prefix)
specifier|private
specifier|static
name|void
name|writeSideEffectFile
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|sideEffectFile
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|SIDE_EFFECT_DIR_PROPERTY
argument_list|)
argument_list|,
name|prefix
operator|+
literal|"-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|create
argument_list|(
name|sideEffectFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|countSideEffectFiles (JobConf conf, final String prefix)
specifier|private
specifier|static
name|int
name|countSideEffectFiles
parameter_list|(
name|JobConf
name|conf
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|files
init|=
name|localFs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|SIDE_EFFECT_DIR_PROPERTY
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
operator|+
literal|"-"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|files
operator|.
name|length
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|method|getAttemptJobXml (JobConf conf, JobID jobId, TaskType taskType)
specifier|private
name|Path
name|getAttemptJobXml
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|JobID
name|jobId
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
throws|throws
name|IOException
throws|,
name|LoginException
block|{
name|String
name|taskid
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|taskType
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|LocalDirAllocator
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getTaskConfFile
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|taskid
argument_list|,
literal|false
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|testIsolationRunOfMapTask ()
specifier|public
name|void
name|testIsolationRunOfMapTask
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
throws|,
name|LoginException
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Run a job succesfully; keep task files.
name|JobConf
name|conf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setKeepTaskFilesPattern
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SIDE_EFFECT_DIR_PROPERTY
argument_list|,
name|TEST_ROOT_DIR
operator|+
literal|"/isolationrunnerjob/sideeffect"
argument_list|)
expr_stmt|;
comment|// Delete previous runs' data.
name|deleteSideEffectFiles
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|JobID
name|jobId
init|=
name|runJobNormally
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countSideEffectFiles
argument_list|(
name|conf
argument_list|,
literal|"map"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countSideEffectFiles
argument_list|(
name|conf
argument_list|,
literal|"reduce"
argument_list|)
argument_list|)
expr_stmt|;
name|deleteSideEffectFiles
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Retrieve succesful job's configuration and
comment|// run IsolationRunner against the map task.
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|mapJobXml
init|=
name|getAttemptJobXml
argument_list|(
name|mr
operator|.
name|getTaskTrackerRunner
argument_list|(
literal|0
argument_list|)
operator|.
name|getTaskTracker
argument_list|()
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|jobId
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|localFs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|exists
argument_list|(
name|mapJobXml
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|IsolationRunner
argument_list|()
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
operator|new
name|File
argument_list|(
name|mapJobXml
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countSideEffectFiles
argument_list|(
name|conf
argument_list|,
literal|"map"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countSideEffectFiles
argument_list|(
name|conf
argument_list|,
literal|"reduce"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clean up
name|deleteSideEffectFiles
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|runJobNormally (JobConf conf)
specifier|static
name|JobID
name|runJobNormally
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/isolationrunnerjob/input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/isolationrunnerjob/output"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
expr_stmt|;
block|}
name|String
name|input
init|=
literal|"The quick brown fox jumps over lazy dog\n"
decl_stmt|;
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"file"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|SideEffectMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|SideEffectReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|JobClient
name|jobClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RunningJob
name|job
init|=
name|jobClient
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
return|return
name|job
operator|.
name|getID
argument_list|()
return|;
block|}
block|}
end_class

end_unit

