begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|KeyValueTextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_comment
comment|/**  * @see TestDelegatingInputFormat  */
end_comment

begin_class
DECL|class|TestMultipleInputs
specifier|public
class|class
name|TestMultipleInputs
extends|extends
name|TestCase
block|{
DECL|method|testAddInputPathWithFormat ()
specifier|public
name|void
name|testAddInputPathWithFormat
parameter_list|()
block|{
specifier|final
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|MultipleInputs
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|MultipleInputs
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|,
name|KeyValueTextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|InputFormat
argument_list|>
name|inputs
init|=
name|MultipleInputs
operator|.
name|getInputFormatMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|KeyValueTextInputFormat
operator|.
name|class
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddInputPathWithMapper ()
specifier|public
name|void
name|testAddInputPathWithMapper
parameter_list|()
block|{
specifier|final
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|MultipleInputs
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|MapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|MultipleInputs
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|,
name|KeyValueTextInputFormat
operator|.
name|class
argument_list|,
name|MapClass2
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|InputFormat
argument_list|>
name|inputs
init|=
name|MultipleInputs
operator|.
name|getInputFormatMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Mapper
argument_list|>
argument_list|>
name|maps
init|=
name|MultipleInputs
operator|.
name|getMapperTypeMap
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|KeyValueTextInputFormat
operator|.
name|class
argument_list|,
name|inputs
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MapClass
operator|.
name|class
argument_list|,
name|maps
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MapClass2
operator|.
name|class
argument_list|,
name|maps
operator|.
name|get
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MapClass
specifier|static
class|class
name|MapClass
implements|implements
name|Mapper
argument_list|<
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|,
name|String
argument_list|>
block|{
DECL|method|map (String key, String value, OutputCollector<String, String> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{     }
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{     }
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
DECL|class|MapClass2
specifier|static
class|class
name|MapClass2
extends|extends
name|MapClass
block|{   }
block|}
end_class

end_unit

