begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|IdentityReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test Map-Reduce empty jobs.  */
end_comment

begin_class
DECL|class|TestEmptyJob
specifier|public
class|class
name|TestEmptyJob
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestEmptyJob
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
DECL|field|mr
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
comment|/** Committer with commit waiting on a signal    */
DECL|class|CommitterWithDelayCommit
specifier|static
class|class
name|CommitterWithDelayCommit
extends|extends
name|FileOutputCommitter
block|{
annotation|@
name|Override
DECL|method|commitJob (JobContext context)
specifier|public
name|void
name|commitJob
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|share
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"share"
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|share
argument_list|)
condition|)
block|{
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|commitJob
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Simple method running a MapReduce job with no input data. Used to test that    * such a job is successful.    *     * @param fileSys    * @param numMaps    * @param numReduces    * @return true if the MR job is successful, otherwise false    * @throws IOException    */
DECL|method|launchEmptyJob (URI fileSys, int numMaps, int numReduces)
specifier|private
name|boolean
name|launchEmptyJob
parameter_list|(
name|URI
name|fileSys
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReduces
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create an empty input dir
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testing/empty/input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testing/empty/output"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|inDir2
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testing/dummy/input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir2
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"testing/dummy/output"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|share
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"share"
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|fileSys
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't create "
operator|+
name|inDir
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// use WordCount example
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|fileSys
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setJobName
argument_list|(
literal|"empty"
argument_list|)
expr_stmt|;
comment|// use an InputFormat which returns no split
name|conf
operator|.
name|setInputFormat
argument_list|(
name|EmptyInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputCommitter
argument_list|(
name|CommitterWithDelayCommit
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|IdentityMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|IdentityReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
name|numMaps
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
name|numReduces
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"share"
argument_list|,
name|share
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// run job and wait for completion
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RunningJob
name|runningJob
init|=
name|jc
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JobInProgress
name|job
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJob
argument_list|(
name|runningJob
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|InetAddress
name|ip
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|ip
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|job
operator|.
name|getJobSubmitHostAddress
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|ip
operator|.
name|getHostAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|getJobSubmitHostName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|ip
operator|.
name|getHostName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|job
operator|.
name|isCleanupLaunched
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for cleanup to be launched for job "
operator|+
name|runningJob
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// submit another job so that the map load increases and scheduling happens
name|LOG
operator|.
name|info
argument_list|(
literal|"Launching dummy job "
argument_list|)
expr_stmt|;
name|RunningJob
name|dJob
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JobConf
name|dConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|dConf
operator|.
name|setOutputCommitter
argument_list|(
name|FileOutputCommitter
operator|.
name|class
argument_list|)
expr_stmt|;
name|dJob
operator|=
name|UtilsForTests
operator|.
name|runJob
argument_list|(
name|dConf
argument_list|,
name|inDir2
argument_list|,
name|outDir2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for job "
operator|+
name|dJob
operator|.
name|getID
argument_list|()
operator|+
literal|" to complete"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
if|if
condition|(
name|dJob
operator|.
name|isComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
comment|// check if the second job is successful
name|assertTrue
argument_list|(
name|dJob
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
comment|// signal the cleanup
name|fs
operator|.
name|create
argument_list|(
name|share
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for job "
operator|+
name|runningJob
operator|.
name|getID
argument_list|()
operator|+
literal|" to complete"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
if|if
condition|(
name|runningJob
operator|.
name|isComplete
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|runningJob
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runningJob
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|JobID
name|jobID
init|=
name|runningJob
operator|.
name|getID
argument_list|()
decl_stmt|;
name|TaskReport
index|[]
name|jobSetupTasks
init|=
name|jc
operator|.
name|getSetupTaskReports
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Number of job-setup tips is not 2!"
argument_list|,
name|jobSetupTasks
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Setup progress is "
operator|+
name|runningJob
operator|.
name|setupProgress
argument_list|()
operator|+
literal|" and not 1.0"
argument_list|,
name|runningJob
operator|.
name|setupProgress
argument_list|()
operator|==
literal|1.0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Setup task is not finished!"
argument_list|,
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJob
argument_list|(
name|jobID
argument_list|)
operator|.
name|isSetupFinished
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Number of maps is not zero!"
argument_list|,
name|jc
operator|.
name|getMapTaskReports
argument_list|(
name|runningJob
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Map progress is "
operator|+
name|runningJob
operator|.
name|mapProgress
argument_list|()
operator|+
literal|" and not 1.0!"
argument_list|,
name|runningJob
operator|.
name|mapProgress
argument_list|()
operator|==
literal|1.0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Reduce progress is "
operator|+
name|runningJob
operator|.
name|reduceProgress
argument_list|()
operator|+
literal|" and not 1.0!"
argument_list|,
name|runningJob
operator|.
name|reduceProgress
argument_list|()
operator|==
literal|1.0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Number of reduces is not "
operator|+
name|numReduces
argument_list|,
name|jc
operator|.
name|getReduceTaskReports
argument_list|(
name|runningJob
operator|.
name|getID
argument_list|()
argument_list|)
operator|.
name|length
operator|==
name|numReduces
argument_list|)
expr_stmt|;
name|TaskReport
index|[]
name|jobCleanupTasks
init|=
name|jc
operator|.
name|getCleanupTaskReports
argument_list|(
name|jobID
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Number of job-cleanup tips is not 2!"
argument_list|,
name|jobCleanupTasks
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cleanup progress is "
operator|+
name|runningJob
operator|.
name|cleanupProgress
argument_list|()
operator|+
literal|" and not 1.0"
argument_list|,
name|runningJob
operator|.
name|cleanupProgress
argument_list|()
operator|==
literal|1.0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job output directory doesn't exit!"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|outDir
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|list
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|outDir
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Number of part-files is "
operator|+
name|list
operator|.
name|length
operator|+
literal|" and not "
operator|+
name|numReduces
argument_list|,
name|list
operator|.
name|length
operator|==
name|numReduces
argument_list|)
expr_stmt|;
comment|// cleanup
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// return job result
name|LOG
operator|.
name|info
argument_list|(
literal|"job is complete: "
operator|+
name|runningJob
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|runningJob
operator|.
name|isSuccessful
argument_list|()
operator|)
return|;
block|}
comment|/**    * Test that a job with no input data (and thus with no input split and no map    * task to execute) is successful.    *     * @throws IOException    */
DECL|method|testEmptyJob ()
specifier|public
name|void
name|testEmptyJob
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|taskTrackers
init|=
literal|2
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|fileSys
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_HANDLER_COUNT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TTConfig
operator|.
name|TT_HTTP_ADDRESS
argument_list|,
literal|"127.0.0.1:0"
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|launchEmptyJob
argument_list|(
name|fileSys
operator|.
name|getUri
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|launchEmptyJob
argument_list|(
name|fileSys
operator|.
name|getUri
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

