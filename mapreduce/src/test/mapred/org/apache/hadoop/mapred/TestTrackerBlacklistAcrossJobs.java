begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_class
DECL|class|TestTrackerBlacklistAcrossJobs
specifier|public
class|class
name|TestTrackerBlacklistAcrossJobs
extends|extends
name|TestCase
block|{
DECL|field|hosts
specifier|private
specifier|static
specifier|final
name|String
name|hosts
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"host1.rack.com"
block|,
literal|"host2.rack.com"
block|,
literal|"host3.rack.com"
block|}
decl_stmt|;
DECL|class|FailOnHostMapper
specifier|public
specifier|static
class|class
name|FailOnHostMapper
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|hostname
name|String
name|hostname
init|=
literal|""
decl_stmt|;
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|job
operator|.
name|get
argument_list|(
name|TTConfig
operator|.
name|TT_HOST_NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|map (NullWritable key, NullWritable value, OutputCollector<NullWritable, NullWritable> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|NullWritable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|hostname
operator|.
name|equals
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// fail here
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failing on host: "
operator|+
name|hosts
index|[
literal|0
index|]
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|testBlacklistAcrossJobs ()
specifier|public
name|void
name|testBlacklistAcrossJobs
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|fileSys
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start mr cluster
name|JobConf
name|jtConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jtConf
operator|.
name|setInt
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_TRACKER_BLACKLISTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|3
argument_list|,
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|hosts
argument_list|,
name|jtConf
argument_list|)
expr_stmt|;
comment|// setup job configuration
name|JobConf
name|mrConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|mrConf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setInt
argument_list|(
name|JobContext
operator|.
name|MAX_TASK_FAILURES_PER_TRACKER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumMapTasks
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|FailOnHostMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormat
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormat
argument_list|(
name|TestReduceFetchFromPartialMem
operator|.
name|FakeIF
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// run the job
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|mrConf
argument_list|)
decl_stmt|;
name|RunningJob
name|running
init|=
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Job failed"
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|running
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Did not blacklist the host"
argument_list|,
literal|1
argument_list|,
name|jc
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getBlacklistedTrackers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fault count should be 1"
argument_list|,
literal|1
argument_list|,
name|mr
operator|.
name|getFaultCount
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// run the same job once again
comment|// there should be no change in blacklist count
name|running
operator|=
name|JobClient
operator|.
name|runJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job failed"
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|running
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Didn't blacklist the host"
argument_list|,
literal|1
argument_list|,
name|jc
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getBlacklistedTrackers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fault count should be 1"
argument_list|,
literal|1
argument_list|,
name|mr
operator|.
name|getFaultCount
argument_list|(
name|hosts
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileSys
operator|!=
literal|null
condition|)
block|{
name|fileSys
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

