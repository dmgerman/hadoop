begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueConfigurationParser
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManager
operator|.
name|toFullPropertyName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|TestQueueManager
specifier|public
class|class
name|TestQueueManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQueueManager
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
block|}
comment|// create UGI with the given user name and the fixed group name "myGroup"
DECL|method|createUGI (String userName)
specifier|private
name|UserGroupInformation
name|createUGI
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
return|return
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|userName
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"myGroup"
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testDefault ()
specifier|public
name|void
name|testDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|QueueManager
name|qm
init|=
operator|new
name|QueueManager
argument_list|()
decl_stmt|;
name|Queue
name|root
init|=
name|qm
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXMLParsing ()
specifier|public
name|void
name|testXMLParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|QueueManager
name|qm
init|=
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Queue
argument_list|>
name|rootQueues
init|=
name|qm
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Queue
name|q
range|:
name|rootQueues
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|q
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Size of root.
name|assertEquals
argument_list|(
name|rootQueues
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//check root level queues
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"q1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|contains
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//check for leaf names
name|Set
argument_list|<
name|String
argument_list|>
name|leafNames
init|=
name|qm
operator|.
name|getLeafQueueNames
argument_list|()
decl_stmt|;
name|Queue
name|p
init|=
name|qm
operator|.
name|getQueue
argument_list|(
literal|"p1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Queue
argument_list|>
name|children
init|=
name|p
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|//check leaf level queues
name|assertTrue
argument_list|(
name|leafNames
operator|.
name|contains
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|leafNames
operator|.
name|contains
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p12"
argument_list|)
argument_list|)
expr_stmt|;
name|Queue
name|q
init|=
name|qm
operator|.
name|getQueue
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p12"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getAcls
argument_list|()
operator|.
name|get
argument_list|(
name|toFullPropertyName
argument_list|(
name|q
operator|.
name|getName
argument_list|()
argument_list|,
name|ACL_SUBMIT_JOB_TAG
argument_list|)
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|createUGI
argument_list|(
literal|"u1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getAcls
argument_list|()
operator|.
name|get
argument_list|(
name|toFullPropertyName
argument_list|(
name|q
operator|.
name|getName
argument_list|()
argument_list|,
name|ACL_ADMINISTER_JOB_TAG
argument_list|)
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|createUGI
argument_list|(
literal|"u2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testhasAccess ()
specifier|public
name|void
name|testhasAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocumentWithAcls
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|QueueManager
name|qm
init|=
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
decl_stmt|;
comment|// test for acls access when acls are set with *
name|ugi
operator|=
name|createUGI
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qm
operator|.
name|hasAccess
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p12"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_JOB
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|createUGI
argument_list|(
literal|"u2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qm
operator|.
name|hasAccess
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p12"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
comment|// test for acls access when acls are not set with *
name|ugi
operator|=
name|createUGI
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qm
operator|.
name|hasAccess
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_JOB
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|createUGI
argument_list|(
literal|"u2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qm
operator|.
name|hasAccess
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test for acls access when acls are not specified but acls are enabled.
comment|// By default, the queue acls for any queue are empty.
name|ugi
operator|=
name|createUGI
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qm
operator|.
name|hasAccess
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p13"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_JOB
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|createUGI
argument_list|(
literal|"u2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qm
operator|.
name|hasAccess
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p13"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_JOBS
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qm
operator|.
name|isRunning
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p13"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueView ()
specifier|public
name|void
name|testQueueView
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|QueueManager
name|qm
init|=
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Queue
name|queue
range|:
name|qm
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|checkHierarchy
argument_list|(
name|queue
argument_list|,
name|qm
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkHierarchy (Queue queue, QueueManager queueManager)
specifier|private
name|void
name|checkHierarchy
parameter_list|(
name|Queue
name|queue
parameter_list|,
name|QueueManager
name|queueManager
parameter_list|)
block|{
name|JobQueueInfo
name|jobQueueInfo
init|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|,
name|jobQueueInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queue
operator|.
name|getState
argument_list|()
argument_list|,
name|jobQueueInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
operator|&&
name|queue
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Queue
name|childQueue
range|:
name|queue
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|checkHierarchy
argument_list|(
name|childQueue
argument_list|,
name|queueManager
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testhasAccessForParent ()
specifier|public
name|void
name|testhasAccessForParent
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|QueueManager
name|qm
init|=
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|createUGI
argument_list|(
literal|"u1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|qm
operator|.
name|hasAccess
argument_list|(
literal|"p1"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_JOB
argument_list|,
name|ugi
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidation ()
specifier|public
name|void
name|testValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|queues
init|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Element
name|q1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"q1"
argument_list|)
decl_stmt|;
name|q1
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
literal|"acl-submit-job"
argument_list|,
literal|"u1"
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|.
name|appendChild
argument_list|(
name|createAcls
argument_list|(
name|doc
argument_list|,
literal|"acl-administer-jobs"
argument_list|,
literal|"u2"
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|.
name|appendChild
argument_list|(
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p15"
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|.
name|appendChild
argument_list|(
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"p16"
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw an exception as configuration is wrong "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidName ()
specifier|public
name|void
name|testInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|queues
init|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Element
name|q1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw an exception as configuration is wrong "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|re
parameter_list|)
block|{
name|re
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|doc
operator|=
name|createDocument
argument_list|()
expr_stmt|;
name|queues
operator|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|q1
operator|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"queue"
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw an exception as configuration is wrong "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
name|re
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMissingConfigFile ()
specifier|public
name|void
name|testMissingConfigFile
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
comment|// deletes file
try|try
block|{
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw an exception for missing file when "
operator|+
literal|"explicitly passed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{     }
comment|// If we just want to pick up the queues from the class loader
comment|// it should fall through to the default. The class loader is set to
comment|// load CONFIG for the "mapred-queues.xml" resource, but it's missing
comment|// so should fall through to mapred-queues-default.xml
name|QueueManager
name|qm
init|=
operator|new
name|QueueManager
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|rootQueues
init|=
name|qm
operator|.
name|getRoot
argument_list|()
operator|.
name|getJobQueueInfo
argument_list|()
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rootQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|rootQueues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyProperties ()
specifier|public
name|void
name|testEmptyProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|queues
init|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Element
name|q1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|"q1"
argument_list|)
decl_stmt|;
name|Element
name|p
init|=
name|createProperties
argument_list|(
name|doc
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|q1
operator|.
name|appendChild
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|q1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyFile ()
specifier|public
name|void
name|testEmptyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw an exception as configuration is wrong "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|re
parameter_list|)
block|{
name|re
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testJobQueueInfoGeneration ()
specifier|public
name|void
name|testJobQueueInfoGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|QueueManager
name|qm
init|=
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|rootQueues
init|=
name|qm
operator|.
name|getRoot
argument_list|()
operator|.
name|getJobQueueInfo
argument_list|()
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rootQueues
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JobQueueInfo
name|q
range|:
name|rootQueues
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|q
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"q1"
argument_list|)
condition|)
block|{
name|Properties
name|p
init|=
name|q
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"capacity"
argument_list|)
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"maxCapacity"
argument_list|)
argument_list|,
literal|"35"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|getChildren
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"p1"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|children
init|=
name|q
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|JobQueueInfo
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p12"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|child
operator|.
name|getQueueState
argument_list|()
argument_list|,
name|QueueState
operator|.
name|STOPPED
operator|.
name|getStateName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p11"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|child
operator|.
name|getQueueState
argument_list|()
argument_list|,
name|QueueState
operator|.
name|RUNNING
operator|.
name|getStateName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Only 2 children"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Only 2 queues with q1 and p1 "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test the refresh of queues.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testRefresh ()
specifier|public
name|void
name|testRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|QueueManager
name|qm
init|=
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Queue
name|beforeRefreshRoot
init|=
name|qm
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|//remove the file and create new one.
name|Set
argument_list|<
name|Queue
argument_list|>
name|rootQueues
init|=
name|beforeRefreshRoot
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|Queue
name|qs
range|:
name|rootQueues
control|)
block|{
if|if
condition|(
name|qs
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"q1"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|qs
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"capacity"
argument_list|)
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qs
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"maxCapacity"
argument_list|)
argument_list|,
literal|"35"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qs
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"p1"
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Queue
argument_list|>
name|children
init|=
name|qs
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|Queue
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p12"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|child
operator|.
name|getAcls
argument_list|()
operator|.
name|get
argument_list|(
name|toFullPropertyName
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|ACL_SUBMIT_JOB_TAG
argument_list|)
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|createUGI
argument_list|(
literal|"u1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|child
operator|.
name|getAcls
argument_list|()
operator|.
name|get
argument_list|(
name|toFullPropertyName
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|ACL_ADMINISTER_JOB_TAG
argument_list|)
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|createUGI
argument_list|(
literal|"u2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|child
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|child
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|doc
operator|=
name|createDocument
argument_list|()
expr_stmt|;
name|refreshSimpleDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|QueueConfigurationParser
name|cp
init|=
operator|new
name|QueueConfigurationParser
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|qm
operator|.
name|getRoot
argument_list|()
operator|.
name|isHierarchySameAs
argument_list|(
name|cp
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|qm
operator|.
name|setQueues
argument_list|(
name|cp
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Queue
index|[
name|cp
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Queue
name|afterRefreshRoot
init|=
name|qm
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|//remove the file and create new one.
name|rootQueues
operator|=
name|afterRefreshRoot
operator|.
name|getChildren
argument_list|()
expr_stmt|;
for|for
control|(
name|Queue
name|qs
range|:
name|rootQueues
control|)
block|{
if|if
condition|(
name|qs
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"q1"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|qs
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"capacity"
argument_list|)
argument_list|,
literal|"70"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|qs
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"maxCapacity"
argument_list|)
argument_list|,
literal|"35"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qs
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"p1"
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Queue
argument_list|>
name|children
init|=
name|qs
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|Queue
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"p1"
operator|+
name|NAME_SEPARATOR
operator|+
literal|"p12"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|child
operator|.
name|getAcls
argument_list|()
operator|.
name|get
argument_list|(
name|toFullPropertyName
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|ACL_SUBMIT_JOB_TAG
argument_list|)
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|createUGI
argument_list|(
literal|"u3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|child
operator|.
name|getAcls
argument_list|()
operator|.
name|get
argument_list|(
name|toFullPropertyName
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|ACL_ADMINISTER_JOB_TAG
argument_list|)
argument_list|)
operator|.
name|isUserAllowed
argument_list|(
name|createUGI
argument_list|(
literal|"u4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|child
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|child
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testRefreshWithInvalidFile ()
specifier|public
name|void
name|testRefreshWithInvalidFile
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|QueueManager
name|qm
init|=
operator|new
name|QueueManager
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|doc
operator|=
name|createDocument
argument_list|()
expr_stmt|;
name|Element
name|queues
init|=
name|createQueuesNode
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Element
name|q1
init|=
name|createQueue
argument_list|(
name|doc
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|queues
operator|.
name|appendChild
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
try|try
block|{
name|QueueConfigurationParser
name|cp
init|=
operator|new
name|QueueConfigurationParser
argument_list|(
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Should throw an exception as configuration is wrong "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|re
parameter_list|)
block|{
name|re
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Class to store the array of queues retrieved by parsing the string     * that is dumped in Json format    */
DECL|class|JsonQueueTree
specifier|static
class|class
name|JsonQueueTree
block|{
DECL|field|acls_enabled
name|boolean
name|acls_enabled
decl_stmt|;
DECL|field|queues
name|JsonQueue
index|[]
name|queues
decl_stmt|;
DECL|method|getQueues ()
specifier|public
name|JsonQueue
index|[]
name|getQueues
parameter_list|()
block|{
return|return
name|queues
return|;
block|}
DECL|method|setQueues (JsonQueue[] queues)
specifier|public
name|void
name|setQueues
parameter_list|(
name|JsonQueue
index|[]
name|queues
parameter_list|)
block|{
name|this
operator|.
name|queues
operator|=
name|queues
expr_stmt|;
block|}
DECL|method|isAcls_enabled ()
specifier|public
name|boolean
name|isAcls_enabled
parameter_list|()
block|{
return|return
name|acls_enabled
return|;
block|}
DECL|method|setAcls_enabled (boolean aclsEnabled)
specifier|public
name|void
name|setAcls_enabled
parameter_list|(
name|boolean
name|aclsEnabled
parameter_list|)
block|{
name|acls_enabled
operator|=
name|aclsEnabled
expr_stmt|;
block|}
block|}
comment|/**    * Class to store the contents of each queue that is dumped in JSON format.    */
DECL|class|JsonQueue
specifier|static
class|class
name|JsonQueue
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|state
name|String
name|state
decl_stmt|;
DECL|field|acl_submit_job
name|String
name|acl_submit_job
decl_stmt|;
DECL|field|acl_administer_jobs
name|String
name|acl_administer_jobs
decl_stmt|;
DECL|field|properties
name|JsonProperty
index|[]
name|properties
decl_stmt|;
DECL|field|children
name|JsonQueue
index|[]
name|children
decl_stmt|;
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getState ()
specifier|public
name|String
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|getProperties ()
specifier|public
name|JsonProperty
index|[]
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|getChildren ()
specifier|public
name|JsonQueue
index|[]
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|setState (String state)
specifier|public
name|void
name|setState
parameter_list|(
name|String
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
DECL|method|setProperties (JsonProperty[] properties)
specifier|public
name|void
name|setProperties
parameter_list|(
name|JsonProperty
index|[]
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
DECL|method|setChildren (JsonQueue[] children)
specifier|public
name|void
name|setChildren
parameter_list|(
name|JsonQueue
index|[]
name|children
parameter_list|)
block|{
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
block|}
DECL|method|getAcl_submit_job ()
specifier|public
name|String
name|getAcl_submit_job
parameter_list|()
block|{
return|return
name|acl_submit_job
return|;
block|}
DECL|method|setAcl_submit_job (String aclSubmitJob)
specifier|public
name|void
name|setAcl_submit_job
parameter_list|(
name|String
name|aclSubmitJob
parameter_list|)
block|{
name|acl_submit_job
operator|=
name|aclSubmitJob
expr_stmt|;
block|}
DECL|method|getAcl_administer_jobs ()
specifier|public
name|String
name|getAcl_administer_jobs
parameter_list|()
block|{
return|return
name|acl_administer_jobs
return|;
block|}
DECL|method|setAcl_administer_jobs (String aclAdministerJobs)
specifier|public
name|void
name|setAcl_administer_jobs
parameter_list|(
name|String
name|aclAdministerJobs
parameter_list|)
block|{
name|acl_administer_jobs
operator|=
name|aclAdministerJobs
expr_stmt|;
block|}
block|}
comment|/**    * Class to store the contents of attribute "properties" in Json dump    */
DECL|class|JsonProperty
specifier|static
class|class
name|JsonProperty
block|{
DECL|field|key
name|String
name|key
decl_stmt|;
DECL|field|value
name|String
name|value
decl_stmt|;
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|setKey (String key)
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|setValue (String value)
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
comment|/**    * checks the format of the dump in JSON format when     * QueueManager.dumpConfiguration(Writer) is called.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testDumpConfiguration ()
specifier|public
name|void
name|testDumpConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
name|createSimpleDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writeToFile
argument_list|(
name|doc
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|)
expr_stmt|;
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueueManager
operator|.
name|dumpConfiguration
argument_list|(
name|out
argument_list|,
name|QUEUES_CONFIG_FILE_PATH
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
comment|// parse the Json dump
name|JsonQueueTree
name|queueTree
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|JsonQueueTree
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// check for the number of top-level queues
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queueTree
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonQueue
argument_list|>
name|topQueues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonQueue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonQueue
name|topQueue
range|:
name|queueTree
operator|.
name|getQueues
argument_list|()
control|)
block|{
name|topQueues
operator|.
name|put
argument_list|(
name|topQueue
operator|.
name|getName
argument_list|()
argument_list|,
name|topQueue
argument_list|)
expr_stmt|;
block|}
comment|// check for consistency in number of children
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topQueues
operator|.
name|get
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonQueue
argument_list|>
name|childQueues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonQueue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonQueue
name|child
range|:
name|topQueues
operator|.
name|get
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|childQueues
operator|.
name|put
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
comment|// check for consistency in state
name|assertEquals
argument_list|(
literal|"stopped"
argument_list|,
name|childQueues
operator|.
name|get
argument_list|(
literal|"p1:p12"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for consistency in properties
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
name|q1_properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JsonProperty
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonProperty
name|prop
range|:
name|topQueues
operator|.
name|get
argument_list|(
literal|"q1"
argument_list|)
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|q1_properties
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|q1_properties
operator|.
name|get
argument_list|(
literal|"capacity"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"35"
argument_list|,
name|q1_properties
operator|.
name|get
argument_list|(
literal|"maxCapacity"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for acls
name|assertEquals
argument_list|(
literal|"u1 "
argument_list|,
name|childQueues
operator|.
name|get
argument_list|(
literal|"p1:p12"
argument_list|)
operator|.
name|getAcl_submit_job
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"u2 "
argument_list|,
name|childQueues
operator|.
name|get
argument_list|(
literal|"p1:p12"
argument_list|)
operator|.
name|getAcl_administer_jobs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

