begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestTaskStatus
specifier|public
class|class
name|TestTaskStatus
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTaskStatus
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testMapTaskStatusStartAndFinishTimes ()
specifier|public
name|void
name|testMapTaskStatusStartAndFinishTimes
parameter_list|()
block|{
name|checkTaskStatues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReduceTaskStatusStartAndFinishTimes ()
specifier|public
name|void
name|testReduceTaskStatusStartAndFinishTimes
parameter_list|()
block|{
name|checkTaskStatues
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Private utility method which ensures uniform testing of newly created    * TaskStatus object.    *     * @param isMap    *          true to test map task status, false for reduce.    */
DECL|method|checkTaskStatues (boolean isMap)
specifier|private
name|void
name|checkTaskStatues
parameter_list|(
name|boolean
name|isMap
parameter_list|)
block|{
name|TaskStatus
name|status
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isMap
condition|)
block|{
name|status
operator|=
operator|new
name|MapTaskStatus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
operator|new
name|ReduceTaskStatus
argument_list|()
expr_stmt|;
block|}
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// first try to set the finish time before
comment|// start time is set.
name|status
operator|.
name|setFinishTime
argument_list|(
name|currentTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finish time of the task status set without start time"
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now set the start time to right time.
name|status
operator|.
name|setStartTime
argument_list|(
name|currentTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Start time of the task status not set correctly."
argument_list|,
name|currentTime
argument_list|,
name|status
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// try setting wrong start time to task status.
name|long
name|wrongTime
init|=
operator|-
literal|1
decl_stmt|;
name|status
operator|.
name|setStartTime
argument_list|(
name|wrongTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Start time of the task status is set to wrong negative value"
argument_list|,
name|currentTime
argument_list|,
name|status
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// finally try setting wrong finish time i.e. negative value.
name|status
operator|.
name|setFinishTime
argument_list|(
name|wrongTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finish time of task status is set to wrong negative value"
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setFinishTime
argument_list|(
name|currentTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finish time of the task status not set correctly."
argument_list|,
name|currentTime
argument_list|,
name|status
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with null task-diagnostics
name|TaskStatus
name|ts
init|=
operator|(
operator|(
name|TaskStatus
operator|)
name|status
operator|.
name|clone
argument_list|()
operator|)
decl_stmt|;
name|ts
operator|.
name|setDiagnosticInfo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ts
operator|.
name|setDiagnosticInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ts
operator|.
name|setStateString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ts
operator|.
name|setStateString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TaskStatus
operator|)
name|status
operator|.
name|clone
argument_list|()
operator|)
operator|.
name|statusUpdate
argument_list|(
name|ts
argument_list|)
expr_stmt|;
comment|// test with null state-string
operator|(
operator|(
name|TaskStatus
operator|)
name|status
operator|.
name|clone
argument_list|()
operator|)
operator|.
name|statusUpdate
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TaskStatus
operator|)
name|status
operator|.
name|clone
argument_list|()
operator|)
operator|.
name|statusUpdate
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TaskStatus
operator|)
name|status
operator|.
name|clone
argument_list|()
operator|)
operator|.
name|statusUpdate
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the {@link TaskStatus} against large sized task-diagnostic-info and     * state-string. Does the following    *  - create Map/Reduce TaskStatus such that the task-diagnostic-info and     *    state-string are small strings and check their contents    *  - append them with small string and check their contents    *  - append them with large string and check their size    *  - update the status using statusUpdate() calls and check the size/contents    *  - create Map/Reduce TaskStatus with large string and check their size    */
annotation|@
name|Test
DECL|method|testTaskDiagnosticsAndStateString ()
specifier|public
name|void
name|testTaskDiagnosticsAndStateString
parameter_list|()
block|{
comment|// check the default case
name|String
name|test
init|=
literal|"hi"
decl_stmt|;
specifier|final
name|int
name|maxSize
init|=
literal|16
decl_stmt|;
name|TaskStatus
name|status
init|=
operator|new
name|TaskStatus
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|test
argument_list|,
name|test
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|int
name|getMaxStringSize
parameter_list|()
block|{
return|return
name|maxSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addFetchFailedMap
parameter_list|(
name|TaskAttemptID
name|mapTaskId
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|boolean
name|getIsMap
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Small diagnostic info test failed"
argument_list|,
name|status
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Small state string test failed"
argument_list|,
name|status
operator|.
name|getStateString
argument_list|()
argument_list|,
name|test
argument_list|)
expr_stmt|;
comment|// now append some small string and check
name|String
name|newDInfo
init|=
name|test
operator|.
name|concat
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|status
operator|.
name|setDiagnosticInfo
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStateString
argument_list|(
name|newDInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Small diagnostic info append failed"
argument_list|,
name|newDInfo
argument_list|,
name|status
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Small state-string append failed"
argument_list|,
name|newDInfo
argument_list|,
name|status
operator|.
name|getStateString
argument_list|()
argument_list|)
expr_stmt|;
comment|// update the status with small state strings
name|TaskStatus
name|newStatus
init|=
operator|(
name|TaskStatus
operator|)
name|status
operator|.
name|clone
argument_list|()
decl_stmt|;
name|String
name|newSInfo
init|=
literal|"hi1"
decl_stmt|;
name|newStatus
operator|.
name|setStateString
argument_list|(
name|newSInfo
argument_list|)
expr_stmt|;
name|status
operator|.
name|statusUpdate
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|newDInfo
operator|=
name|newDInfo
operator|.
name|concat
argument_list|(
name|newStatus
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status-update on diagnostic-info failed"
argument_list|,
name|newDInfo
argument_list|,
name|status
operator|.
name|getDiagnosticInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status-update on state-string failed"
argument_list|,
name|newSInfo
argument_list|,
name|status
operator|.
name|getStateString
argument_list|()
argument_list|)
expr_stmt|;
name|newSInfo
operator|=
literal|"hi2"
expr_stmt|;
name|status
operator|.
name|statusUpdate
argument_list|(
literal|0
argument_list|,
name|newSInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status-update on state-string failed"
argument_list|,
name|newSInfo
argument_list|,
name|status
operator|.
name|getStateString
argument_list|()
argument_list|)
expr_stmt|;
name|newSInfo
operator|=
literal|"hi3"
expr_stmt|;
name|status
operator|.
name|statusUpdate
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
name|newSInfo
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status-update on state-string failed"
argument_list|,
name|newSInfo
argument_list|,
name|status
operator|.
name|getStateString
argument_list|()
argument_list|)
expr_stmt|;
comment|// now append each with large string
name|String
name|large
init|=
literal|"hihihihihihihihihihi"
decl_stmt|;
comment|// 20 chars
name|status
operator|.
name|setDiagnosticInfo
argument_list|(
name|large
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStateString
argument_list|(
name|large
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Large diagnostic info append test failed"
argument_list|,
name|maxSize
argument_list|,
name|status
operator|.
name|getDiagnosticInfo
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Large state-string append test failed"
argument_list|,
name|maxSize
argument_list|,
name|status
operator|.
name|getStateString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// update a large status with large strings
name|newStatus
operator|.
name|setDiagnosticInfo
argument_list|(
name|large
operator|+
literal|"0"
argument_list|)
expr_stmt|;
name|newStatus
operator|.
name|setStateString
argument_list|(
name|large
operator|+
literal|"1"
argument_list|)
expr_stmt|;
name|status
operator|.
name|statusUpdate
argument_list|(
name|newStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status-update on diagnostic info failed"
argument_list|,
name|maxSize
argument_list|,
name|status
operator|.
name|getDiagnosticInfo
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status-update on state-string failed"
argument_list|,
name|maxSize
argument_list|,
name|status
operator|.
name|getStateString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|statusUpdate
argument_list|(
literal|0
argument_list|,
name|large
operator|+
literal|"2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status-update on state-string failed"
argument_list|,
name|maxSize
argument_list|,
name|status
operator|.
name|getStateString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|statusUpdate
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
name|large
operator|+
literal|"3"
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Status-update on state-string failed"
argument_list|,
name|maxSize
argument_list|,
name|status
operator|.
name|getStateString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// test passing large string in constructor
name|status
operator|=
operator|new
name|TaskStatus
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|large
argument_list|,
name|large
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|int
name|getMaxStringSize
parameter_list|()
block|{
return|return
name|maxSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addFetchFailedMap
parameter_list|(
name|TaskAttemptID
name|mapTaskId
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|boolean
name|getIsMap
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Large diagnostic info test failed"
argument_list|,
name|maxSize
argument_list|,
name|status
operator|.
name|getDiagnosticInfo
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Large state-string test failed"
argument_list|,
name|maxSize
argument_list|,
name|status
operator|.
name|getStateString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

