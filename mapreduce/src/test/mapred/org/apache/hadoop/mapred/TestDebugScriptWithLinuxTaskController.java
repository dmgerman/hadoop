begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestDebugScriptWithLinuxTaskController
specifier|public
class|class
name|TestDebugScriptWithLinuxTaskController
extends|extends
name|ClusterWithLinuxTaskController
block|{
annotation|@
name|Test
DECL|method|testDebugScriptExecutionAsDifferentUser ()
specifier|public
name|void
name|testDebugScriptExecutionAsDifferentUser
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|shouldRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|startCluster
argument_list|()
expr_stmt|;
name|TestDebugScript
operator|.
name|setupDebugScriptDirs
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"output"
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
name|super
operator|.
name|getClusterConf
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|inDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
expr_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"1.txt"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|splits
index|[]
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ClusterWithLinuxTaskController
operator|.
name|TASKCONTROLLER_UGI
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|JobID
name|jobId
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[]
block|{
name|splits
index|[
literal|1
index|]
block|}
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|JobID
argument_list|>
argument_list|()
block|{
specifier|public
name|JobID
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|TestDebugScript
operator|.
name|runFailingMapJob
argument_list|(
name|TestDebugScriptWithLinuxTaskController
operator|.
name|this
operator|.
name|getClusterConf
argument_list|()
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// construct the task id of first map task of failmap
name|TaskAttemptID
name|taskId
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TestDebugScript
operator|.
name|verifyDebugScriptOutput
argument_list|(
name|taskId
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|,
name|taskTrackerSpecialGroup
argument_list|,
literal|"-rw-rw----"
argument_list|)
expr_stmt|;
name|TestDebugScript
operator|.
name|cleanupDebugScriptDirs
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

