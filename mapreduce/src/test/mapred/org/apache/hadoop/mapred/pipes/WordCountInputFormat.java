begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.pipes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|pipes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This is a support class to test Hadoop Pipes when using C++ RecordReaders.  * It defines an InputFormat with InputSplits that are just strings. The  * RecordReaders are not implemented in Java, naturally...  */
end_comment

begin_class
DECL|class|WordCountInputFormat
specifier|public
class|class
name|WordCountInputFormat
extends|extends
name|FileInputFormat
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
block|{
DECL|class|WordCountInputSplit
specifier|static
class|class
name|WordCountInputSplit
implements|implements
name|InputSplit
block|{
DECL|field|filename
specifier|private
name|String
name|filename
decl_stmt|;
DECL|method|WordCountInputSplit ()
name|WordCountInputSplit
parameter_list|()
block|{ }
DECL|method|WordCountInputSplit (Path filename)
name|WordCountInputSplit
parameter_list|(
name|Path
name|filename
parameter_list|)
block|{
name|this
operator|.
name|filename
operator|=
name|filename
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|filename
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
DECL|method|getSplits (JobConf conf, int numSplits)
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
name|FileSystem
name|local
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|dir
range|:
name|getInputPaths
argument_list|(
name|conf
argument_list|)
control|)
block|{
for|for
control|(
name|FileStatus
name|file
range|:
name|local
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|WordCountInputSplit
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|InputSplit
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|getRecordReader (InputSplit split, JobConf conf, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
block|{
return|return
operator|new
name|RecordReader
argument_list|<
name|IntWritable
argument_list|,
name|Text
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|next
parameter_list|(
name|IntWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|IntWritable
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|IntWritable
argument_list|()
return|;
block|}
specifier|public
name|Text
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
specifier|public
name|long
name|getPos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{ }
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0.0f
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

