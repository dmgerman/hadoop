begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ControlledMapReduceJob
operator|.
name|ControlledMapReduceJobRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_comment
comment|/**  * Test to verify the controlled behavior of a ControlledMapReduceJob.  *   */
end_comment

begin_class
DECL|class|TestControlledMapReduceJob
specifier|public
class|class
name|TestControlledMapReduceJob
extends|extends
name|ClusterMapReduceTestCase
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestControlledMapReduceJob
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Starts a job with 5 maps and 5 reduces. Then controls the finishing of    * tasks. Signals finishing tasks in batches and then verifies their    * completion.    *     * @throws Exception    */
DECL|method|testControlledMapReduceJob ()
specifier|public
name|void
name|testControlledMapReduceJob
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|TTConfig
operator|.
name|TT_MAP_SLOTS
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|TTConfig
operator|.
name|TT_REDUCE_SLOTS
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|true
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started the cluster"
argument_list|)
expr_stmt|;
name|ControlledMapReduceJobRunner
name|jobRunner
init|=
name|ControlledMapReduceJobRunner
operator|.
name|getControlledMapReduceJobRunner
argument_list|(
name|createJobConf
argument_list|()
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|jobRunner
operator|.
name|start
argument_list|()
expr_stmt|;
name|ControlledMapReduceJob
name|controlledJob
init|=
name|jobRunner
operator|.
name|getJob
argument_list|()
decl_stmt|;
name|JobInProgress
name|jip
init|=
name|getMRCluster
argument_list|()
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJob
argument_list|(
name|jobRunner
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|ControlledMapReduceJob
operator|.
name|waitTillNTasksStartRunning
argument_list|(
name|jip
argument_list|,
literal|true
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finishing 3 maps"
argument_list|)
expr_stmt|;
name|controlledJob
operator|.
name|finishNTasks
argument_list|(
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ControlledMapReduceJob
operator|.
name|waitTillNTotalTasksFinish
argument_list|(
name|jip
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ControlledMapReduceJob
operator|.
name|waitTillNTasksStartRunning
argument_list|(
name|jip
argument_list|,
literal|true
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finishing 4 more maps"
argument_list|)
expr_stmt|;
name|controlledJob
operator|.
name|finishNTasks
argument_list|(
literal|true
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ControlledMapReduceJob
operator|.
name|waitTillNTotalTasksFinish
argument_list|(
name|jip
argument_list|,
literal|true
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|ControlledMapReduceJob
operator|.
name|waitTillNTasksStartRunning
argument_list|(
name|jip
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finishing 2 reduces"
argument_list|)
expr_stmt|;
name|controlledJob
operator|.
name|finishNTasks
argument_list|(
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ControlledMapReduceJob
operator|.
name|waitTillNTotalTasksFinish
argument_list|(
name|jip
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ControlledMapReduceJob
operator|.
name|waitTillNTasksStartRunning
argument_list|(
name|jip
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finishing 4 more reduces"
argument_list|)
expr_stmt|;
name|controlledJob
operator|.
name|finishNTasks
argument_list|(
literal|false
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ControlledMapReduceJob
operator|.
name|waitTillNTotalTasksFinish
argument_list|(
name|jip
argument_list|,
literal|false
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|jobRunner
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

