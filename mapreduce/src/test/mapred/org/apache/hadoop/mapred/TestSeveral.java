begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|extensions
operator|.
name|TestSetup
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TestJobInProgressListener
operator|.
name|MyListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|FailMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|KillMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|NullOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**   * This is a test case that tests several miscellaneous functionality.   * This is intended for a fast test and encompasses the following:  * TestJobName  * TestJobClient  * TestJobDirCleanup  * TestJobKillAndFail  * TestUserDefinedCounters  * TestJobInProgressListener  * TestJobHistory  * TestMiniMRClassPath  * TestMiniMRWithDFSWithDistinctUsers  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|TestSeveral
specifier|public
class|class
name|TestSeveral
extends|extends
name|TestCase
block|{
DECL|field|DFS_UGI
specifier|static
specifier|final
name|UserGroupInformation
name|DFS_UGI
init|=
name|TestMiniMRWithDFSWithDistinctUsers
operator|.
name|createUGI
argument_list|(
literal|"dfs"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|TEST1_UGI
specifier|static
specifier|final
name|UserGroupInformation
name|TEST1_UGI
init|=
name|TestMiniMRWithDFSWithDistinctUsers
operator|.
name|createUGI
argument_list|(
literal|"pi"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|TEST2_UGI
specifier|static
specifier|final
name|UserGroupInformation
name|TEST2_UGI
init|=
name|TestMiniMRWithDFSWithDistinctUsers
operator|.
name|createUGI
argument_list|(
literal|"wc"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|mrCluster
specifier|private
specifier|static
name|MiniMRCluster
name|mrCluster
init|=
literal|null
decl_stmt|;
DECL|field|dfs
specifier|private
specifier|static
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|myListener
specifier|private
specifier|static
name|MyListener
name|myListener
init|=
literal|null
decl_stmt|;
DECL|field|numReduces
specifier|private
name|int
name|numReduces
init|=
literal|5
decl_stmt|;
DECL|field|numTT
specifier|private
specifier|static
specifier|final
name|int
name|numTT
init|=
literal|5
decl_stmt|;
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSetup
name|setup
init|=
operator|new
name|TestSetup
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestSeveral
operator|.
name|class
argument_list|)
argument_list|)
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"dfs.replication"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|numTT
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|DFS_UGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dfs
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TestMiniMRWithDFSWithDistinctUsers
operator|.
name|mkdir
argument_list|(
name|fs
argument_list|,
literal|"/user"
argument_list|,
literal|"mapred"
argument_list|,
literal|"mapred"
argument_list|,
operator|(
name|short
operator|)
literal|01777
argument_list|)
expr_stmt|;
name|TestMiniMRWithDFSWithDistinctUsers
operator|.
name|mkdir
argument_list|(
name|fs
argument_list|,
literal|"/mapred"
argument_list|,
literal|"mapred"
argument_list|,
literal|"mapred"
argument_list|,
operator|(
name|short
operator|)
literal|01777
argument_list|)
expr_stmt|;
name|TestMiniMRWithDFSWithDistinctUsers
operator|.
name|mkdir
argument_list|(
name|fs
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_STAGING_AREA_ROOT
argument_list|)
argument_list|,
literal|"mapred"
argument_list|,
literal|"mapred"
argument_list|,
operator|(
name|short
operator|)
literal|01777
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|MR_UGI
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
comment|// Create a TestJobInProgressListener.MyListener and associate
comment|// it with the MiniMRCluster
name|myListener
operator|=
operator|new
name|MyListener
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_HANDLER_COUNT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|numTT
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MR_UGI
argument_list|,
operator|new
name|JobConf
argument_list|()
argument_list|)
expr_stmt|;
comment|// make cleanup inline sothat validation of existence of these directories
comment|// can be done
name|mrCluster
operator|.
name|setInlineCleanupThreads
argument_list|()
expr_stmt|;
name|mrCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|addJobInProgressListener
argument_list|(
name|myListener
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|setup
return|;
block|}
comment|/**     * Utility class to create input for the jobs    * @param inDir    * @param conf    * @throws IOException    */
DECL|method|makeInput (Path inDir, JobConf conf)
specifier|private
name|void
name|makeInput
parameter_list|(
name|Path
name|inDir
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|inFs
init|=
name|inDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|inFs
operator|.
name|exists
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
name|inFs
operator|.
name|delete
argument_list|(
name|inDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|inFs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
expr_stmt|;
name|Path
name|inFile
init|=
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-0"
argument_list|)
decl_stmt|;
name|DataOutputStream
name|file
init|=
name|inFs
operator|.
name|create
argument_list|(
name|inFile
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReduces
condition|;
name|i
operator|++
control|)
block|{
name|file
operator|.
name|writeBytes
argument_list|(
literal|"b a\n"
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Clean the Output directories before running a Job    * @param fs    * @param outDir    */
DECL|method|clean (FileSystem fs, Path outDir)
specifier|private
name|void
name|clean
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|outDir
parameter_list|)
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
DECL|method|verifyOutput (FileSystem fs, Path outDir)
specifier|private
name|void
name|verifyOutput
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|outDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
index|[]
name|outputFiles
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|outDir
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numReduces
argument_list|,
name|outputFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|outputFiles
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|reader
operator|.
name|readLine
argument_list|()
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b a"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|DoNothingReducer
specifier|static
class|class
name|DoNothingReducer
extends|extends
name|MapReduceBase
implements|implements
name|Reducer
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|,
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
block|{
DECL|method|reduce (WritableComparable key, Iterator<Writable> val, OutputCollector<WritableComparable, Writable> output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|WritableComparable
name|key
parameter_list|,
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|val
parameter_list|,
name|OutputCollector
argument_list|<
name|WritableComparable
argument_list|,
name|Writable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing
block|}
block|}
comment|/**    * Submit a job with a complex name (TestJobName.testComplexName)    * Check the status of the job as successful (TestJobKillAndFail)    * Check that the task tracker directory is cleaned up (TestJobDirCleanup)    * Create some user defined counters and check them (TestUserDefinedCounters)    * Job uses a reducer from an External Jar (TestMiniMRClassPath)    * Check task directories (TestMiniMRWithDFS)    * Check if the listener notifications are received(TestJobInProgressListener)    * Verify if priority changes to the job are reflected (TestJobClient)    * Validate JobHistory file format, content, userlog location (TestJobHistory)    *     * @throws Exception    */
DECL|method|testSuccessfulJob ()
specifier|public
name|void
name|testSuccessfulJob
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JobConf
name|conf
init|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
comment|// Set a complex Job name (TestJobName)
name|conf
operator|.
name|setJobName
argument_list|(
literal|"[name][some other value that gets"
operator|+
literal|" truncated internally that this test attempts to aggravate]"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputFormat
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCompressMapOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Set the Mapper class to a Counting Mapper that defines user
comment|// defined counters
name|conf
operator|.
name|setMapperClass
argument_list|(
name|TestUserDefinedCounters
operator|.
name|CountingMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.reducer.class"
argument_list|,
literal|"testjar.ExternalIdentityReducer"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|SPLIT_MINSIZE
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
name|numReduces
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setJobPriority
argument_list|(
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setJar
argument_list|(
literal|"build/test/mapred/testjar/testjob.jar"
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
name|TaskAttemptID
operator|.
name|getTaskAttemptIDsPattern
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setKeepTaskFilesPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"./test/input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"./test/output"
argument_list|)
decl_stmt|;
name|TEST1_UGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|clean
argument_list|(
name|fs
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
specifier|final
name|RunningJob
name|job
init|=
name|TEST1_UGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|RunningJob
argument_list|>
argument_list|()
block|{
specifier|public
name|RunningJob
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|makeInput
argument_list|(
name|inDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|JobClient
name|jobClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|jobClient
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|JobID
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
while|while
condition|(
name|job
operator|.
name|getJobState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
comment|// Check for JobInProgress Listener notification
name|assertFalse
argument_list|(
literal|"Missing event notification for a running job"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|jobId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the job success was notified
name|assertFalse
argument_list|(
literal|"Missing event notification for a successful job"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|jobId
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check Task directories
name|TaskAttemptID
name|taskid
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TestMiniMRWithDFS
operator|.
name|checkTaskDirectories
argument_list|(
name|mrCluster
argument_list|,
name|TEST1_UGI
operator|.
name|getUserName
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|jobId
operator|.
name|toString
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|taskid
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|exitCode
init|=
name|TestJobClient
operator|.
name|runTool
argument_list|(
name|conf
argument_list|,
operator|new
name|JobClient
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-counter"
block|,
name|jobId
operator|.
name|toString
argument_list|()
block|,
literal|"org.apache.hadoop.mapred.Task$Counter"
block|,
literal|"MAP_INPUT_RECORDS"
block|}
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numReduces
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|out
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify if user defined counters have been updated properly
name|TestUserDefinedCounters
operator|.
name|verifyCounters
argument_list|(
name|job
argument_list|,
name|numTT
argument_list|)
expr_stmt|;
comment|// Verify job priority change (TestJobClient)
name|TestJobClient
operator|.
name|verifyJobPriority
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
literal|"HIGH"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Basic check if the job did run fine
name|TEST1_UGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|verifyOutput
argument_list|(
name|outDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
comment|//TestJobHistory
name|TestJobHistory
operator|.
name|validateJobHistoryFileFormat
argument_list|(
name|mrCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJobHistory
argument_list|()
argument_list|,
name|jobId
argument_list|,
name|conf
argument_list|,
literal|"SUCCEEDED"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TestJobHistory
operator|.
name|validateJobHistoryFileContent
argument_list|(
name|mrCluster
argument_list|,
name|job
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Since we keep setKeepTaskFilesPattern, these files should still be
comment|// present and will not be cleaned up.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTT
condition|;
operator|++
name|i
control|)
block|{
name|Path
name|jobDirPath
init|=
operator|new
name|Path
argument_list|(
name|mrCluster
operator|.
name|getTaskTrackerLocalDir
argument_list|(
name|i
argument_list|)
argument_list|,
name|TaskTracker
operator|.
name|getJobCacheSubdir
argument_list|(
name|TEST1_UGI
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|b
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|jobDirPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit a job with BackSlashed name (TestJobName) that will fail    * Test JobHistory User Location to none (TetsJobHistory)    * Verify directory up for the Failed Job (TestJobDirCleanup)    * Verify Event is generated for the failed job (TestJobInProgressListener)    *     * @throws Exception    */
DECL|method|testFailedJob ()
specifier|public
name|void
name|testFailedJob
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
comment|// Name with regex
name|conf
operator|.
name|setJobName
argument_list|(
literal|"name \\Evalue]"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|FailMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputFormat
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setJobPriority
argument_list|(
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|JobContext
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"./wc/input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"./wc/output"
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|clean
argument_list|(
name|fs
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|makeInput
argument_list|(
name|inDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|JobClient
name|jobClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RunningJob
name|job
init|=
name|jobClient
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JobID
name|jobId
init|=
name|job
operator|.
name|getID
argument_list|()
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|FAILED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the job failure was notified
name|assertFalse
argument_list|(
literal|"Missing event notification on failing a running job"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|TestJobDirCleanup
operator|.
name|verifyJobDirCleanup
argument_list|(
name|mrCluster
argument_list|,
name|numTT
argument_list|,
name|job
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit a job that will get Killed with a Regex Name (TestJobName)    * Verify Job Directory Cleanup (TestJobDirCleanup)    * Verify Even is generated for Killed Job (TestJobInProgressListener)    *     * @throws Exception    */
DECL|method|testKilledJob ()
specifier|public
name|void
name|testKilledJob
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
comment|// Name with regex
name|conf
operator|.
name|setJobName
argument_list|(
literal|"name * abc + Evalue]"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|KillMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setOutputFormat
argument_list|(
name|NullOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|JobContext
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"./wc/input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"./wc/output"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|histDir
init|=
operator|new
name|Path
argument_list|(
literal|"./wc/history"
argument_list|)
decl_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|clean
argument_list|(
name|fs
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|makeInput
argument_list|(
name|inDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|JobClient
name|jobClient
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RunningJob
name|job
init|=
name|jobClient
operator|.
name|submitJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
name|job
operator|.
name|getJobState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|isComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobStatus
operator|.
name|KILLED
argument_list|,
name|job
operator|.
name|getJobState
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the job failure was notified
name|assertFalse
argument_list|(
literal|"Missing event notification on killing a running job"
argument_list|,
name|myListener
operator|.
name|contains
argument_list|(
name|job
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TestJobDirCleanup
operator|.
name|verifyJobDirCleanup
argument_list|(
name|mrCluster
argument_list|,
name|numTT
argument_list|,
name|job
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

