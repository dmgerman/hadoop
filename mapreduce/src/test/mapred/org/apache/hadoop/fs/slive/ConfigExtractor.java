begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|Constants
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Simple access layer onto of a configuration object that extracts the slive  * specific configuration values needed for slive running  */
end_comment

begin_class
DECL|class|ConfigExtractor
class|class
name|ConfigExtractor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ConfigExtractor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|method|ConfigExtractor (Configuration cfg)
name|ConfigExtractor
parameter_list|(
name|Configuration
name|cfg
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|cfg
expr_stmt|;
block|}
comment|/**    * @return the wrapped configuration that this extractor will use    */
DECL|method|getConfig ()
name|Configuration
name|getConfig
parameter_list|()
block|{
return|return
name|this
operator|.
name|config
return|;
block|}
comment|/**    * @return the location of where data should be written to    */
DECL|method|getDataPath ()
name|Path
name|getDataPath
parameter_list|()
block|{
name|Path
name|base
init|=
name|getBaseDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|base
argument_list|,
name|Constants
operator|.
name|DATA_DIR
argument_list|)
return|;
block|}
comment|/**    * @return the location of where the reducer should write its data to    */
DECL|method|getOutputPath ()
name|Path
name|getOutputPath
parameter_list|()
block|{
name|Path
name|base
init|=
name|getBaseDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|base
argument_list|,
name|Constants
operator|.
name|OUTPUT_DIR
argument_list|)
return|;
block|}
comment|/**    * @param primary    *          primary the initial string to be used for the value of this    *          configuration option (if not provided then config and then the    *          default are used)    *     * @return the base directory where output& data should be stored using    *         primary,config,default (in that order)    */
DECL|method|getBaseDirectory (String primary)
name|Path
name|getBaseDirectory
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
name|String
name|path
init|=
name|primary
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|config
operator|.
name|get
argument_list|(
name|ConfigOption
operator|.
name|BASE_DIR
operator|.
name|getCfgOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|ConfigOption
operator|.
name|BASE_DIR
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**    * @return the base directory using only config and default values    */
DECL|method|getBaseDirectory ()
name|Path
name|getBaseDirectory
parameter_list|()
block|{
return|return
name|getBaseDirectory
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @return whether the mapper or reducer should exit when they get there first    *         error using only config and default values    */
DECL|method|shouldExitOnFirstError ()
name|boolean
name|shouldExitOnFirstError
parameter_list|()
block|{
return|return
name|shouldExitOnFirstError
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @param primary    *          primary the initial string to be used for the value of this    *          configuration option (if not provided then config and then the    *          default are used)    *     * @return the boolean of whether the mapper/reducer should exit when they    *         first error from primary,config,default (in that order)    */
DECL|method|shouldExitOnFirstError (String primary)
name|boolean
name|shouldExitOnFirstError
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
name|String
name|val
init|=
name|primary
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|config
operator|.
name|get
argument_list|(
name|ConfigOption
operator|.
name|EXIT_ON_ERROR
operator|.
name|getCfgOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
name|ConfigOption
operator|.
name|EXIT_ON_ERROR
operator|.
name|getDefault
argument_list|()
return|;
block|}
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|val
argument_list|)
return|;
block|}
comment|/**    * @return the number of reducers to use    */
DECL|method|getReducerAmount ()
name|Integer
name|getReducerAmount
parameter_list|()
block|{
comment|// should be slive.reduces
return|return
name|getInteger
argument_list|(
literal|null
argument_list|,
name|ConfigOption
operator|.
name|REDUCES
argument_list|)
return|;
block|}
comment|/**    * @return the number of mappers to use using config and default values for    *         lookup    */
DECL|method|getMapAmount ()
name|Integer
name|getMapAmount
parameter_list|()
block|{
return|return
name|getMapAmount
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @param primary    *          primary the initial string to be used for the value of this    *          configuration option (if not provided then config and then the    *          default are used)    * @return the reducer amount to use    */
DECL|method|getMapAmount (String primary)
name|Integer
name|getMapAmount
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getInteger
argument_list|(
name|primary
argument_list|,
name|ConfigOption
operator|.
name|MAPS
argument_list|)
return|;
block|}
comment|/**    * @return the duration in seconds (or null or Integer.MAX for no limit) using    *         the configuration and default as lookup    */
DECL|method|getDuration ()
name|Integer
name|getDuration
parameter_list|()
block|{
return|return
name|getDuration
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @return the duration in milliseconds or null if no limit using config and    *         default as lookup    */
DECL|method|getDurationMilliseconds ()
name|Integer
name|getDurationMilliseconds
parameter_list|()
block|{
name|Integer
name|seconds
init|=
name|getDuration
argument_list|()
decl_stmt|;
if|if
condition|(
name|seconds
operator|==
literal|null
operator|||
name|seconds
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
name|int
name|milliseconds
init|=
operator|(
name|seconds
operator|*
literal|1000
operator|)
decl_stmt|;
if|if
condition|(
name|milliseconds
operator|<
literal|0
condition|)
block|{
name|milliseconds
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|milliseconds
return|;
block|}
comment|/**    * @param primary    *          primary the initial string to be used for the value of this    *          configuration option (if not provided then config and then the    *          default are used)    * @return the duration in seconds (or null or Integer.MAX for no limit)    */
DECL|method|getDuration (String primary)
name|Integer
name|getDuration
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getInteger
argument_list|(
name|primary
argument_list|,
name|ConfigOption
operator|.
name|DURATION
argument_list|)
return|;
block|}
comment|/**    * @return the total number of operations to run using config and default as    *         lookup    */
DECL|method|getOpCount ()
name|Integer
name|getOpCount
parameter_list|()
block|{
return|return
name|getOpCount
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @param primary    *          primary the initial string to be used for the value of this    *          configuration option (if not provided then config and then the    *          default are used)    * @return the total number of operations to run    */
DECL|method|getOpCount (String primary)
name|Integer
name|getOpCount
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getInteger
argument_list|(
name|primary
argument_list|,
name|ConfigOption
operator|.
name|OPS
argument_list|)
return|;
block|}
comment|/**    * @return the total number of files per directory using config and default as    *         lookup    */
DECL|method|getDirSize ()
name|Integer
name|getDirSize
parameter_list|()
block|{
return|return
name|getDirSize
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @param primary    *          primary the initial string to be used for the value of this    *          configuration option (if not provided then config and then the    *          default are used)    * @return the total number of files per directory    */
DECL|method|getDirSize (String primary)
name|Integer
name|getDirSize
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getInteger
argument_list|(
name|primary
argument_list|,
name|ConfigOption
operator|.
name|DIR_SIZE
argument_list|)
return|;
block|}
comment|/**    * @param primary    *          the primary string to attempt to convert into a integer    * @param opt    *          the option to use as secondary + default if no primary given    * @return a parsed integer    */
DECL|method|getInteger (String primary, ConfigOption<Integer> opt)
specifier|private
name|Integer
name|getInteger
parameter_list|(
name|String
name|primary
parameter_list|,
name|ConfigOption
argument_list|<
name|Integer
argument_list|>
name|opt
parameter_list|)
block|{
name|String
name|value
init|=
name|primary
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|config
operator|.
name|get
argument_list|(
name|opt
operator|.
name|getCfgOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|opt
operator|.
name|getDefault
argument_list|()
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * @return the total number of files allowed using configuration and default    *         for lookup    */
DECL|method|getTotalFiles ()
name|Integer
name|getTotalFiles
parameter_list|()
block|{
return|return
name|getTotalFiles
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @param primary    *          primary the initial string to be used for the value of this    *          configuration option (if not provided then config and then the    *          default are used)    * @return the total number of files allowed    */
DECL|method|getTotalFiles (String primary)
name|Integer
name|getTotalFiles
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getInteger
argument_list|(
name|primary
argument_list|,
name|ConfigOption
operator|.
name|FILES
argument_list|)
return|;
block|}
comment|/**    * @param primary    *          primary the initial string to be used for the value of this    *          configuration option (if not provided then config and then the    *          default are used)    * @return the random seed start point or null if none    */
DECL|method|getRandomSeed (String primary)
name|Long
name|getRandomSeed
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
name|String
name|seed
init|=
name|primary
decl_stmt|;
if|if
condition|(
name|seed
operator|==
literal|null
condition|)
block|{
name|seed
operator|=
name|config
operator|.
name|get
argument_list|(
name|ConfigOption
operator|.
name|RANDOM_SEED
operator|.
name|getCfgOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|seed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|seed
argument_list|)
return|;
block|}
comment|/**    * @return the random seed start point or null if none using config and then    *         default as lookup    */
DECL|method|getRandomSeed ()
name|Long
name|getRandomSeed
parameter_list|()
block|{
return|return
name|getRandomSeed
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @return the result file location or null if none using config and then    *         default as lookup    */
DECL|method|getResultFile ()
name|String
name|getResultFile
parameter_list|()
block|{
return|return
name|getResultFile
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Gets the grid queue name to run on using config and default only    *     * @return String    */
DECL|method|getQueueName ()
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|getQueueName
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Gets the grid queue name to run on using the primary string or config or    * default    *     * @param primary    *     * @return String    */
DECL|method|getQueueName (String primary)
name|String
name|getQueueName
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
name|String
name|q
init|=
name|primary
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
name|q
operator|=
name|config
operator|.
name|get
argument_list|(
name|ConfigOption
operator|.
name|QUEUE_NAME
operator|.
name|getCfgOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
name|q
operator|=
name|ConfigOption
operator|.
name|QUEUE_NAME
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
return|return
name|q
return|;
block|}
comment|/**    * @param primary    *          primary the initial string to be used for the value of this    *          configuration option (if not provided then config and then the    *          default are used)    * @return the result file location    */
DECL|method|getResultFile (String primary)
name|String
name|getResultFile
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
name|String
name|fn
init|=
name|primary
decl_stmt|;
if|if
condition|(
name|fn
operator|==
literal|null
condition|)
block|{
name|fn
operator|=
name|config
operator|.
name|get
argument_list|(
name|ConfigOption
operator|.
name|RESULT_FILE
operator|.
name|getCfgOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fn
operator|==
literal|null
condition|)
block|{
name|fn
operator|=
name|ConfigOption
operator|.
name|RESULT_FILE
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
return|return
name|fn
return|;
block|}
comment|/**    * @param primary    *          primary the initial string to be used for the value of this    *          configuration option (if not provided then config and then the    *          default are used)    * @return the integer range allowed for the block size    */
DECL|method|getBlockSize (String primary)
name|Range
argument_list|<
name|Long
argument_list|>
name|getBlockSize
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getMinMaxBytes
argument_list|(
name|ConfigOption
operator|.
name|BLOCK_SIZE
argument_list|,
name|primary
argument_list|)
return|;
block|}
comment|/**    * @return the integer range allowed for the block size using config and    *         default for lookup    */
DECL|method|getBlockSize ()
name|Range
argument_list|<
name|Long
argument_list|>
name|getBlockSize
parameter_list|()
block|{
return|return
name|getBlockSize
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @param cfgopt    *          the configuration option to use for config and default lookup    * @param primary    *          the initial string to be used for the value of this configuration    *          option (if not provided then config and then the default are used)    * @return the parsed short range from primary, config, default    */
DECL|method|getMinMaxShort (ConfigOption<Short> cfgopt, String primary)
specifier|private
name|Range
argument_list|<
name|Short
argument_list|>
name|getMinMaxShort
parameter_list|(
name|ConfigOption
argument_list|<
name|Short
argument_list|>
name|cfgopt
parameter_list|,
name|String
name|primary
parameter_list|)
block|{
name|String
name|sval
init|=
name|primary
decl_stmt|;
if|if
condition|(
name|sval
operator|==
literal|null
condition|)
block|{
name|sval
operator|=
name|config
operator|.
name|get
argument_list|(
name|cfgopt
operator|.
name|getCfgOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Range
argument_list|<
name|Short
argument_list|>
name|range
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sval
operator|!=
literal|null
condition|)
block|{
name|String
name|pieces
index|[]
init|=
name|Helper
operator|.
name|getTrimmedStrings
argument_list|(
name|sval
argument_list|)
decl_stmt|;
if|if
condition|(
name|pieces
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|min
init|=
name|pieces
index|[
literal|0
index|]
decl_stmt|;
name|String
name|max
init|=
name|pieces
index|[
literal|1
index|]
decl_stmt|;
name|short
name|minVal
init|=
name|Short
operator|.
name|parseShort
argument_list|(
name|min
argument_list|)
decl_stmt|;
name|short
name|maxVal
init|=
name|Short
operator|.
name|parseShort
argument_list|(
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|minVal
operator|>
name|maxVal
condition|)
block|{
name|short
name|tmp
init|=
name|minVal
decl_stmt|;
name|minVal
operator|=
name|maxVal
expr_stmt|;
name|maxVal
operator|=
name|tmp
expr_stmt|;
block|}
name|range
operator|=
operator|new
name|Range
argument_list|<
name|Short
argument_list|>
argument_list|(
name|minVal
argument_list|,
name|maxVal
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
name|Short
name|def
init|=
name|cfgopt
operator|.
name|getDefault
argument_list|()
decl_stmt|;
if|if
condition|(
name|def
operator|!=
literal|null
condition|)
block|{
name|range
operator|=
operator|new
name|Range
argument_list|<
name|Short
argument_list|>
argument_list|(
name|def
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|range
return|;
block|}
comment|/**    * @param cfgopt    *          the configuration option to use for config and default lookup    * @param primary    *          the initial string to be used for the value of this configuration    *          option (if not provided then config and then the default are used)    * @return the parsed long range from primary, config, default    */
DECL|method|getMinMaxLong (ConfigOption<Long> cfgopt, String primary)
specifier|private
name|Range
argument_list|<
name|Long
argument_list|>
name|getMinMaxLong
parameter_list|(
name|ConfigOption
argument_list|<
name|Long
argument_list|>
name|cfgopt
parameter_list|,
name|String
name|primary
parameter_list|)
block|{
name|String
name|sval
init|=
name|primary
decl_stmt|;
if|if
condition|(
name|sval
operator|==
literal|null
condition|)
block|{
name|sval
operator|=
name|config
operator|.
name|get
argument_list|(
name|cfgopt
operator|.
name|getCfgOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Range
argument_list|<
name|Long
argument_list|>
name|range
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sval
operator|!=
literal|null
condition|)
block|{
name|String
name|pieces
index|[]
init|=
name|Helper
operator|.
name|getTrimmedStrings
argument_list|(
name|sval
argument_list|)
decl_stmt|;
if|if
condition|(
name|pieces
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|min
init|=
name|pieces
index|[
literal|0
index|]
decl_stmt|;
name|String
name|max
init|=
name|pieces
index|[
literal|1
index|]
decl_stmt|;
name|long
name|minVal
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|min
argument_list|)
decl_stmt|;
name|long
name|maxVal
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|minVal
operator|>
name|maxVal
condition|)
block|{
name|long
name|tmp
init|=
name|minVal
decl_stmt|;
name|minVal
operator|=
name|maxVal
expr_stmt|;
name|maxVal
operator|=
name|tmp
expr_stmt|;
block|}
name|range
operator|=
operator|new
name|Range
argument_list|<
name|Long
argument_list|>
argument_list|(
name|minVal
argument_list|,
name|maxVal
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
name|Long
name|def
init|=
name|cfgopt
operator|.
name|getDefault
argument_list|()
decl_stmt|;
if|if
condition|(
name|def
operator|!=
literal|null
condition|)
block|{
name|range
operator|=
operator|new
name|Range
argument_list|<
name|Long
argument_list|>
argument_list|(
name|def
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|range
return|;
block|}
comment|/**    * @param cfgopt    *          the configuration option to use for config and default lookup    * @param primary    *          the initial string to be used for the value of this configuration    *          option (if not provided then config and then the default are used)    * @return the parsed integer byte range from primary, config, default    */
DECL|method|getMinMaxBytes (ConfigOption<Long> cfgopt, String primary)
specifier|private
name|Range
argument_list|<
name|Long
argument_list|>
name|getMinMaxBytes
parameter_list|(
name|ConfigOption
argument_list|<
name|Long
argument_list|>
name|cfgopt
parameter_list|,
name|String
name|primary
parameter_list|)
block|{
name|String
name|sval
init|=
name|primary
decl_stmt|;
if|if
condition|(
name|sval
operator|==
literal|null
condition|)
block|{
name|sval
operator|=
name|config
operator|.
name|get
argument_list|(
name|cfgopt
operator|.
name|getCfgOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Range
argument_list|<
name|Long
argument_list|>
name|range
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sval
operator|!=
literal|null
condition|)
block|{
name|String
name|pieces
index|[]
init|=
name|Helper
operator|.
name|getTrimmedStrings
argument_list|(
name|sval
argument_list|)
decl_stmt|;
if|if
condition|(
name|pieces
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|min
init|=
name|pieces
index|[
literal|0
index|]
decl_stmt|;
name|String
name|max
init|=
name|pieces
index|[
literal|1
index|]
decl_stmt|;
name|long
name|tMin
init|=
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|min
argument_list|)
decl_stmt|;
name|long
name|tMax
init|=
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|tMin
operator|>
name|tMax
condition|)
block|{
name|long
name|tmp
init|=
name|tMin
decl_stmt|;
name|tMin
operator|=
name|tMax
expr_stmt|;
name|tMax
operator|=
name|tmp
expr_stmt|;
block|}
name|range
operator|=
operator|new
name|Range
argument_list|<
name|Long
argument_list|>
argument_list|(
name|tMin
argument_list|,
name|tMax
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
name|Long
name|def
init|=
name|cfgopt
operator|.
name|getDefault
argument_list|()
decl_stmt|;
if|if
condition|(
name|def
operator|!=
literal|null
condition|)
block|{
name|range
operator|=
operator|new
name|Range
argument_list|<
name|Long
argument_list|>
argument_list|(
name|def
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|range
return|;
block|}
comment|/**    * @param primary    *          the initial string to be used for the value of this configuration    *          option (if not provided then config and then the default are used)    * @return the replication range    */
DECL|method|getReplication (String primary)
name|Range
argument_list|<
name|Short
argument_list|>
name|getReplication
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getMinMaxShort
argument_list|(
name|ConfigOption
operator|.
name|REPLICATION_AM
argument_list|,
name|primary
argument_list|)
return|;
block|}
comment|/**    * @return the replication range using config and default for lookup    */
DECL|method|getReplication ()
name|Range
argument_list|<
name|Short
argument_list|>
name|getReplication
parameter_list|()
block|{
return|return
name|getReplication
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @return the map of operations to perform using config (percent may be null    *         if unspecified)    */
DECL|method|getOperations ()
name|Map
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
name|getOperations
parameter_list|()
block|{
name|Map
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
name|operations
init|=
operator|new
name|HashMap
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationType
name|type
range|:
name|OperationType
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|opname
init|=
name|type
operator|.
name|lowerName
argument_list|()
decl_stmt|;
name|String
name|keyname
init|=
name|String
operator|.
name|format
argument_list|(
name|Constants
operator|.
name|OP
argument_list|,
name|opname
argument_list|)
decl_stmt|;
name|String
name|kval
init|=
name|config
operator|.
name|get
argument_list|(
name|keyname
argument_list|)
decl_stmt|;
if|if
condition|(
name|kval
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|operations
operator|.
name|put
argument_list|(
name|type
argument_list|,
operator|new
name|OperationData
argument_list|(
name|kval
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|operations
return|;
block|}
comment|/**    * @param primary    *          the initial string to be used for the value of this configuration    *          option (if not provided then config and then the default are used)    * @return the append byte size range (or null if none)    */
DECL|method|getAppendSize (String primary)
name|Range
argument_list|<
name|Long
argument_list|>
name|getAppendSize
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getMinMaxBytes
argument_list|(
name|ConfigOption
operator|.
name|APPEND_SIZE
argument_list|,
name|primary
argument_list|)
return|;
block|}
comment|/**    * @return the append byte size range (or null if none) using config and    *         default for lookup    */
DECL|method|getAppendSize ()
name|Range
argument_list|<
name|Long
argument_list|>
name|getAppendSize
parameter_list|()
block|{
return|return
name|getAppendSize
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @param primary    *          the initial string to be used for the value of this configuration    *          option (if not provided then config and then the default are used)    * @return the sleep range (or null if none)    */
DECL|method|getSleepRange (String primary)
name|Range
argument_list|<
name|Long
argument_list|>
name|getSleepRange
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getMinMaxLong
argument_list|(
name|ConfigOption
operator|.
name|SLEEP_TIME
argument_list|,
name|primary
argument_list|)
return|;
block|}
comment|/**    * @return the sleep range (or null if none) using config and default for    *         lookup    */
DECL|method|getSleepRange ()
name|Range
argument_list|<
name|Long
argument_list|>
name|getSleepRange
parameter_list|()
block|{
return|return
name|getSleepRange
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * @param primary    *          the initial string to be used for the value of this configuration    *          option (if not provided then config and then the default are used)    * @return the write byte size range (or null if none)    */
DECL|method|getWriteSize (String primary)
name|Range
argument_list|<
name|Long
argument_list|>
name|getWriteSize
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getMinMaxBytes
argument_list|(
name|ConfigOption
operator|.
name|WRITE_SIZE
argument_list|,
name|primary
argument_list|)
return|;
block|}
comment|/**    * @return the write byte size range (or null if none) using config and    *         default for lookup    */
DECL|method|getWriteSize ()
name|Range
argument_list|<
name|Long
argument_list|>
name|getWriteSize
parameter_list|()
block|{
return|return
name|getWriteSize
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns whether the write range should use the block size range    *     * @return true|false    */
DECL|method|shouldWriteUseBlockSize ()
name|boolean
name|shouldWriteUseBlockSize
parameter_list|()
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|writeRange
init|=
name|getWriteSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|writeRange
operator|==
literal|null
operator|||
operator|(
name|writeRange
operator|.
name|getLower
argument_list|()
operator|==
name|writeRange
operator|.
name|getUpper
argument_list|()
operator|&&
operator|(
name|writeRange
operator|.
name|getUpper
argument_list|()
operator|==
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns whether the append range should use the block size range    *     * @return true|false    */
DECL|method|shouldAppendUseBlockSize ()
name|boolean
name|shouldAppendUseBlockSize
parameter_list|()
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|appendRange
init|=
name|getAppendSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|appendRange
operator|==
literal|null
operator|||
operator|(
name|appendRange
operator|.
name|getLower
argument_list|()
operator|==
name|appendRange
operator|.
name|getUpper
argument_list|()
operator|&&
operator|(
name|appendRange
operator|.
name|getUpper
argument_list|()
operator|==
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns whether the read range should use the entire file    *     * @return true|false    */
DECL|method|shouldReadFullFile ()
name|boolean
name|shouldReadFullFile
parameter_list|()
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|readRange
init|=
name|getReadSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|readRange
operator|==
literal|null
operator|||
operator|(
name|readRange
operator|.
name|getLower
argument_list|()
operator|==
name|readRange
operator|.
name|getUpper
argument_list|()
operator|&&
operator|(
name|readRange
operator|.
name|getUpper
argument_list|()
operator|==
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @param primary    *          the initial string to be used for the value of this configuration    *          option (if not provided then config and then the default are used)    * @return the read byte size range (or null if none)    */
DECL|method|getReadSize (String primary)
name|Range
argument_list|<
name|Long
argument_list|>
name|getReadSize
parameter_list|(
name|String
name|primary
parameter_list|)
block|{
return|return
name|getMinMaxBytes
argument_list|(
name|ConfigOption
operator|.
name|READ_SIZE
argument_list|,
name|primary
argument_list|)
return|;
block|}
comment|/**    * Gets the bytes per checksum (if it exists or null if not)    *     * @return Long     */
DECL|method|getByteCheckSum ()
name|Long
name|getByteCheckSum
parameter_list|()
block|{
name|String
name|val
init|=
name|config
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BYTES_PER_CHECKSUM
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|val
argument_list|)
return|;
block|}
comment|/**    * @return the read byte size range (or null if none) using config and default    *         for lookup    */
DECL|method|getReadSize ()
name|Range
argument_list|<
name|Long
argument_list|>
name|getReadSize
parameter_list|()
block|{
return|return
name|getReadSize
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Dumps out the given options for the given config extractor    *     * @param cfg    *          the config to write to the log    */
DECL|method|dumpOptions (ConfigExtractor cfg)
specifier|static
name|void
name|dumpOptions
parameter_list|(
name|ConfigExtractor
name|cfg
parameter_list|)
block|{
if|if
condition|(
name|cfg
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Base directory = "
operator|+
name|cfg
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Data directory = "
operator|+
name|cfg
operator|.
name|getDataPath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Output directory = "
operator|+
name|cfg
operator|.
name|getOutputPath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Result file = "
operator|+
name|cfg
operator|.
name|getResultFile
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Grid queue = "
operator|+
name|cfg
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Should exit on first error = "
operator|+
name|cfg
operator|.
name|shouldExitOnFirstError
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|String
name|duration
init|=
literal|"Duration = "
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getDurationMilliseconds
argument_list|()
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|duration
operator|+=
literal|"unlimited"
expr_stmt|;
block|}
else|else
block|{
name|duration
operator|+=
name|cfg
operator|.
name|getDurationMilliseconds
argument_list|()
operator|+
literal|" milliseconds"
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|duration
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Map amount = "
operator|+
name|cfg
operator|.
name|getMapAmount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reducer amount = "
operator|+
name|cfg
operator|.
name|getReducerAmount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Operation amount = "
operator|+
name|cfg
operator|.
name|getOpCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total file limit = "
operator|+
name|cfg
operator|.
name|getTotalFiles
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total dir file limit = "
operator|+
name|cfg
operator|.
name|getDirSize
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|String
name|read
init|=
literal|"Read size = "
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|shouldReadFullFile
argument_list|()
condition|)
block|{
name|read
operator|+=
literal|"entire file"
expr_stmt|;
block|}
else|else
block|{
name|read
operator|+=
name|cfg
operator|.
name|getReadSize
argument_list|()
operator|+
literal|" bytes"
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|read
argument_list|)
expr_stmt|;
block|}
block|{
name|String
name|write
init|=
literal|"Write size = "
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|shouldWriteUseBlockSize
argument_list|()
condition|)
block|{
name|write
operator|+=
literal|"blocksize"
expr_stmt|;
block|}
else|else
block|{
name|write
operator|+=
name|cfg
operator|.
name|getWriteSize
argument_list|()
operator|+
literal|" bytes"
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|write
argument_list|)
expr_stmt|;
block|}
block|{
name|String
name|append
init|=
literal|"Append size = "
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|shouldAppendUseBlockSize
argument_list|()
condition|)
block|{
name|append
operator|+=
literal|"blocksize"
expr_stmt|;
block|}
else|else
block|{
name|append
operator|+=
name|cfg
operator|.
name|getAppendSize
argument_list|()
operator|+
literal|" bytes"
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|append
argument_list|)
expr_stmt|;
block|}
block|{
name|String
name|bsize
init|=
literal|"Block size = "
decl_stmt|;
name|bsize
operator|+=
name|cfg
operator|.
name|getBlockSize
argument_list|()
operator|+
literal|" bytes"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|bsize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cfg
operator|.
name|getRandomSeed
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Random seed = "
operator|+
name|cfg
operator|.
name|getRandomSeed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cfg
operator|.
name|getSleepRange
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleep range = "
operator|+
name|cfg
operator|.
name|getSleepRange
argument_list|()
operator|+
literal|" milliseconds"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Replication amount = "
operator|+
name|cfg
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Operations are:"
argument_list|)
expr_stmt|;
name|NumberFormat
name|percFormatter
init|=
name|Formatter
operator|.
name|getPercentFormatter
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|OperationType
argument_list|,
name|OperationData
argument_list|>
name|operations
init|=
name|cfg
operator|.
name|getOperations
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationType
name|type
range|:
name|operations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|type
operator|.
name|name
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|OperationData
name|opInfo
init|=
name|operations
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" "
operator|+
name|opInfo
operator|.
name|getDistribution
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|opInfo
operator|.
name|getPercent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|" "
operator|+
name|percFormatter
operator|.
name|format
argument_list|(
name|opInfo
operator|.
name|getPercent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|" ???"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

