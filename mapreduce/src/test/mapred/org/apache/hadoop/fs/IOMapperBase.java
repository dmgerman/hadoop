begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Base mapper class for IO operations.  *<p>  * Two abstract method {@link #doIO(Reporter, String, long)} and   * {@link #collectStats(OutputCollector,String,long,Object)} should be  * overloaded in derived classes to define the IO operation and the  * statistics data to be collected by subsequent reducers.  *   */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|IOMapperBase
specifier|public
specifier|abstract
class|class
name|IOMapperBase
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Configured
implements|implements
name|Mapper
argument_list|<
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|buffer
specifier|protected
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|bufferSize
specifier|protected
name|int
name|bufferSize
decl_stmt|;
DECL|field|fs
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
DECL|field|hostName
specifier|protected
name|String
name|hostName
decl_stmt|;
DECL|method|IOMapperBase ()
specifier|public
name|IOMapperBase
parameter_list|()
block|{    }
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot create file system."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|bufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"test.io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
name|bufferSize
index|]
expr_stmt|;
try|try
block|{
name|hostName
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|hostName
operator|=
literal|"localhost"
expr_stmt|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{   }
comment|/**    * Perform io operation, usually read or write.    *     * @param reporter    * @param name file name    * @param value offset within the file    * @return object that is passed as a parameter to     *          {@link #collectStats(OutputCollector,String,long,Object)}    * @throws IOException    */
DECL|method|doIO (Reporter reporter, String name, long value)
specifier|abstract
name|T
name|doIO
parameter_list|(
name|Reporter
name|reporter
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Collect stat data to be combined by a subsequent reducer.    *     * @param output    * @param name file name    * @param execTime IO execution time    * @param doIOReturnValue value returned by {@link #doIO(Reporter,String,long)}    * @throws IOException    */
DECL|method|collectStats (OutputCollector<Text, Text> output, String name, long execTime, T doIOReturnValue)
specifier|abstract
name|void
name|collectStats
parameter_list|(
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|execTime
parameter_list|,
name|T
name|doIOReturnValue
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Map file name and offset into statistical data.    *<p>    * The map task is to get the     *<tt>key</tt>, which contains the file name, and the     *<tt>value</tt>, which is the offset within the file.    *     * The parameters are passed to the abstract method     * {@link #doIO(Reporter,String,long)}, which performs the io operation,     * usually read or write data, and then     * {@link #collectStats(OutputCollector,String,long,Object)}     * is called to prepare stat data for a subsequent reducer.    */
DECL|method|map (Text key, LongWritable value, OutputCollector<Text, Text> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|Text
name|key
parameter_list|,
name|LongWritable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|longValue
init|=
name|value
operator|.
name|get
argument_list|()
decl_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"starting "
operator|+
name|name
operator|+
literal|" ::host = "
operator|+
name|hostName
argument_list|)
expr_stmt|;
name|long
name|tStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|T
name|statValue
init|=
name|doIO
argument_list|(
name|reporter
argument_list|,
name|name
argument_list|,
name|longValue
argument_list|)
decl_stmt|;
name|long
name|tEnd
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|execTime
init|=
name|tEnd
operator|-
name|tStart
decl_stmt|;
name|collectStats
argument_list|(
name|output
argument_list|,
name|name
argument_list|,
name|execTime
argument_list|,
name|statValue
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
literal|"finished "
operator|+
name|name
operator|+
literal|" ::host = "
operator|+
name|hostName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

