begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|OperationOutput
operator|.
name|OutputType
import|;
end_import

begin_comment
comment|/**  * Operation which sleeps for a given number of milliseconds according to the  * config given, and reports on the sleep time overall  */
end_comment

begin_class
DECL|class|SleepOp
class|class
name|SleepOp
extends|extends
name|Operation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SleepOp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SleepOp (ConfigExtractor cfg, Random rnd)
name|SleepOp
parameter_list|(
name|ConfigExtractor
name|cfg
parameter_list|,
name|Random
name|rnd
parameter_list|)
block|{
name|super
argument_list|(
name|SleepOp
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|cfg
argument_list|,
name|rnd
argument_list|)
expr_stmt|;
block|}
DECL|method|getSleepTime (Range<Long> sleepTime)
specifier|protected
name|long
name|getSleepTime
parameter_list|(
name|Range
argument_list|<
name|Long
argument_list|>
name|sleepTime
parameter_list|)
block|{
name|long
name|sleepMs
init|=
name|Range
operator|.
name|betweenPositive
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|sleepTime
argument_list|)
decl_stmt|;
return|return
name|sleepMs
return|;
block|}
comment|/**    * Sleep for a random amount of time between a given positive range    *     * @param sleepTime    *          positive long range for times to choose    *     * @return output data on operation    */
DECL|method|run (Range<Long> sleepTime)
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|run
parameter_list|(
name|Range
argument_list|<
name|Long
argument_list|>
name|sleepTime
parameter_list|)
block|{
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|out
init|=
name|super
operator|.
name|run
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sleepTime
operator|!=
literal|null
condition|)
block|{
name|long
name|sleepMs
init|=
name|getSleepTime
argument_list|(
name|sleepTime
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|Timer
operator|.
name|now
argument_list|()
decl_stmt|;
name|sleep
argument_list|(
name|sleepMs
argument_list|)
expr_stmt|;
name|long
name|elapsedTime
init|=
name|Timer
operator|.
name|elapsed
argument_list|(
name|startTime
argument_list|)
decl_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|OK_TIME_TAKEN
argument_list|,
name|elapsedTime
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|SUCCESSES
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|out
operator|.
name|add
argument_list|(
operator|new
name|OperationOutput
argument_list|(
name|OutputType
operator|.
name|LONG
argument_list|,
name|getType
argument_list|()
argument_list|,
name|ReportWriter
operator|.
name|FAILURES
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error with sleeping"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
annotation|@
name|Override
comment|// Operation
DECL|method|run (FileSystem fs)
name|List
argument_list|<
name|OperationOutput
argument_list|>
name|run
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|Range
argument_list|<
name|Long
argument_list|>
name|sleepTime
init|=
name|getConfig
argument_list|()
operator|.
name|getSleepRange
argument_list|()
decl_stmt|;
return|return
name|run
argument_list|(
name|sleepTime
argument_list|)
return|;
block|}
comment|/**    * Sleeps the current thread for X milliseconds    *     * @param ms    *          milliseconds to sleep for    *     * @throws InterruptedException    */
DECL|method|sleep (long ms)
specifier|private
name|void
name|sleep
parameter_list|(
name|long
name|ms
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|ms
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|ms
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

