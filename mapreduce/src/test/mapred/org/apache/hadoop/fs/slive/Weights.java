begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
operator|.
name|WeightSelector
operator|.
name|Weightable
import|;
end_import

begin_comment
comment|/**  * Class to isolate the various weight algorithms we use.  */
end_comment

begin_class
DECL|class|Weights
class|class
name|Weights
block|{
DECL|method|Weights ()
specifier|private
name|Weights
parameter_list|()
block|{    }
comment|/**    * A weight which always returns the same weight (1/3). Which will have an    * overall area of (1/3) unless otherwise provided.    */
DECL|class|UniformWeight
specifier|static
class|class
name|UniformWeight
implements|implements
name|Weightable
block|{
DECL|field|DEFAULT_WEIGHT
specifier|private
specifier|static
name|Double
name|DEFAULT_WEIGHT
init|=
operator|(
literal|1.0d
operator|/
literal|3.0d
operator|)
decl_stmt|;
DECL|field|weight
specifier|private
name|Double
name|weight
decl_stmt|;
DECL|method|UniformWeight (double w)
name|UniformWeight
parameter_list|(
name|double
name|w
parameter_list|)
block|{
name|weight
operator|=
name|w
expr_stmt|;
block|}
DECL|method|UniformWeight ()
name|UniformWeight
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_WEIGHT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// Weightable
DECL|method|weight (int elapsed, int duration)
specifier|public
name|Double
name|weight
parameter_list|(
name|int
name|elapsed
parameter_list|,
name|int
name|duration
parameter_list|)
block|{
return|return
name|weight
return|;
block|}
block|}
comment|/**    * A weight which normalized the elapsed time and the duration to a value    * between 0 and 1 and applies the algorithm to form an output using the    * function (-2 * (x-0.5)^2) + 0.5 which initially (close to 0) has a value    * close to 0 and near input being 1 has a value close to 0 and near 0.5 has a    * value close to 0.5 (with overall area 0.3).    */
DECL|class|MidWeight
specifier|static
class|class
name|MidWeight
implements|implements
name|Weightable
block|{
annotation|@
name|Override
comment|// Weightable
DECL|method|weight (int elapsed, int duration)
specifier|public
name|Double
name|weight
parameter_list|(
name|int
name|elapsed
parameter_list|,
name|int
name|duration
parameter_list|)
block|{
name|double
name|normalized
init|=
operator|(
name|double
operator|)
name|elapsed
operator|/
operator|(
name|double
operator|)
name|duration
decl_stmt|;
name|double
name|result
init|=
operator|(
operator|-
literal|2.0d
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|normalized
operator|-
literal|0.5
argument_list|,
literal|2
argument_list|)
operator|)
operator|+
literal|0.5d
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|>
literal|1
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * A weight which normalized the elapsed time and the duration to a value    * between 0 and 1 and applies the algorithm to form an output using the    * function (x)^2 which initially (close to 0) has a value close to 0 and near    * input being 1 has a value close to 1 (with overall area 1/3).    */
DECL|class|EndWeight
specifier|static
class|class
name|EndWeight
implements|implements
name|Weightable
block|{
annotation|@
name|Override
comment|// Weightable
DECL|method|weight (int elapsed, int duration)
specifier|public
name|Double
name|weight
parameter_list|(
name|int
name|elapsed
parameter_list|,
name|int
name|duration
parameter_list|)
block|{
name|double
name|normalized
init|=
operator|(
name|double
operator|)
name|elapsed
operator|/
operator|(
name|double
operator|)
name|duration
decl_stmt|;
name|double
name|result
init|=
name|Math
operator|.
name|pow
argument_list|(
name|normalized
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|>
literal|1
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * A weight which normalized the elapsed time and the duration to a value    * between 0 and 1 and applies the algorithm to form an output using the    * function (x-1)^2 which initially (close to 0) has a value close to 1 and    * near input being 1 has a value close to 0 (with overall area 1/3).    */
DECL|class|BeginWeight
specifier|static
class|class
name|BeginWeight
implements|implements
name|Weightable
block|{
annotation|@
name|Override
comment|// Weightable
DECL|method|weight (int elapsed, int duration)
specifier|public
name|Double
name|weight
parameter_list|(
name|int
name|elapsed
parameter_list|,
name|int
name|duration
parameter_list|)
block|{
name|double
name|normalized
init|=
operator|(
name|double
operator|)
name|elapsed
operator|/
operator|(
name|double
operator|)
name|duration
decl_stmt|;
name|double
name|result
init|=
name|Math
operator|.
name|pow
argument_list|(
operator|(
name|normalized
operator|-
literal|1
operator|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|>
literal|1
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

