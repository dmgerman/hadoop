begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * A selection object which simulates a roulette wheel whereby all operation  * have a weight and the total value of the wheel is the combined weight and  * during selection a random number (0, total weight) is selected and then the  * operation that is at that value will be selected. So for a set of operations  * with uniform weight they will all have the same probability of being  * selected. Operations which choose to have higher weights will have higher  * likelihood of being selected (and the same goes for lower weights).  */
end_comment

begin_class
DECL|class|RouletteSelector
class|class
name|RouletteSelector
block|{
DECL|field|picker
specifier|private
name|Random
name|picker
decl_stmt|;
DECL|method|RouletteSelector (Random rnd)
name|RouletteSelector
parameter_list|(
name|Random
name|rnd
parameter_list|)
block|{
name|picker
operator|=
name|rnd
expr_stmt|;
block|}
DECL|method|select (List<OperationWeight> ops)
name|Operation
name|select
parameter_list|(
name|List
argument_list|<
name|OperationWeight
argument_list|>
name|ops
parameter_list|)
block|{
if|if
condition|(
name|ops
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|double
name|totalWeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|OperationWeight
name|w
range|:
name|ops
control|)
block|{
if|if
condition|(
name|w
operator|.
name|getWeight
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Negative weights not allowed"
argument_list|)
throw|;
block|}
name|totalWeight
operator|+=
name|w
operator|.
name|getWeight
argument_list|()
expr_stmt|;
block|}
comment|// roulette wheel selection
name|double
name|sAm
init|=
name|picker
operator|.
name|nextDouble
argument_list|()
operator|*
name|totalWeight
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ops
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sAm
operator|-=
name|ops
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getWeight
argument_list|()
expr_stmt|;
if|if
condition|(
name|sAm
operator|<=
literal|0
condition|)
block|{
name|index
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ops
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getOperation
argument_list|()
return|;
block|}
block|}
end_class

end_unit

