begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|MapContextImpl
import|;
end_import

begin_class
DECL|class|TestNLineInputFormat
specifier|public
class|class
name|TestNLineInputFormat
extends|extends
name|TestCase
block|{
DECL|field|MAX_LENGTH
specifier|private
specifier|static
name|int
name|MAX_LENGTH
init|=
literal|200
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
init|=
literal|null
decl_stmt|;
static|static
block|{
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"init failure"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|field|workDir
specifier|private
specifier|static
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|"TestNLineInputFormat"
argument_list|)
decl_stmt|;
DECL|method|testFormat ()
specifier|public
name|void
name|testFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"test.txt"
argument_list|)
decl_stmt|;
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|workDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|workDir
argument_list|)
expr_stmt|;
name|int
name|numLinesPerMap
init|=
literal|5
decl_stmt|;
name|NLineInputFormat
operator|.
name|setNumLinesPerSplit
argument_list|(
name|job
argument_list|,
name|numLinesPerMap
argument_list|)
expr_stmt|;
comment|// for a variety of lengths
for|for
control|(
name|int
name|length
init|=
literal|0
init|;
name|length
operator|<
name|MAX_LENGTH
condition|;
name|length
operator|+=
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_LENGTH
operator|/
literal|10
argument_list|)
operator|+
literal|1
control|)
block|{
comment|// create a file with length entries
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|localFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|checkFormat
argument_list|(
name|job
argument_list|,
name|numLinesPerMap
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkFormat (Job job, int expectedN)
name|void
name|checkFormat
parameter_list|(
name|Job
name|job
parameter_list|,
name|int
name|expectedN
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|NLineInputFormat
name|format
init|=
operator|new
name|NLineInputFormat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|)
decl_stmt|;
comment|// check all splits except last one
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"There are no split locations"
argument_list|,
literal|0
argument_list|,
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLocations
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|TaskAttemptContext
name|context
init|=
name|MapReduceTestUtil
operator|.
name|createDummyMapTaskAttemptContext
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|reader
init|=
name|format
operator|.
name|createRecordReader
argument_list|(
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|reader
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"reader class is LineRecordReader."
argument_list|,
name|LineRecordReader
operator|.
name|class
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|MapContext
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|mcontext
init|=
operator|new
name|MapContextImpl
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|Text
argument_list|>
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|context
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MapReduceTestUtil
operator|.
name|createDummyReporter
argument_list|()
argument_list|,
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
try|try
block|{
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"number of lines in split is "
operator|+
name|expectedN
argument_list|,
name|expectedN
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TestNLineInputFormat
argument_list|()
operator|.
name|testFormat
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

