begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * TestCounters checks the sanity and recoverability of {@code Counters}  */
end_comment

begin_class
DECL|class|TestCounters
specifier|public
class|class
name|TestCounters
block|{
comment|/**    * Verify counter value works    */
annotation|@
name|Test
DECL|method|testCounterValue ()
specifier|public
name|void
name|testCounterValue
parameter_list|()
block|{
specifier|final
name|int
name|NUMBER_TESTS
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|NUMBER_INC
init|=
literal|10
decl_stmt|;
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_TESTS
condition|;
name|i
operator|++
control|)
block|{
name|long
name|initValue
init|=
name|rand
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|long
name|expectedValue
init|=
name|initValue
decl_stmt|;
name|Counter
name|counter
init|=
operator|new
name|Counter
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|expectedValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Counter value is not initialized correctly"
argument_list|,
name|expectedValue
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUMBER_INC
condition|;
name|j
operator|++
control|)
block|{
name|int
name|incValue
init|=
name|rand
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|counter
operator|.
name|increment
argument_list|(
name|incValue
argument_list|)
expr_stmt|;
name|expectedValue
operator|+=
name|incValue
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counter value is not incremented correctly"
argument_list|,
name|expectedValue
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expectedValue
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|counter
operator|.
name|setValue
argument_list|(
name|expectedValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counter value is not set correctly"
argument_list|,
name|expectedValue
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

