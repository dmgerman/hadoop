begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.partition
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|partition
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_class
DECL|class|TestInputSampler
specifier|public
class|class
name|TestInputSampler
block|{
DECL|class|SequentialSplit
specifier|static
class|class
name|SequentialSplit
extends|extends
name|InputSplit
block|{
DECL|field|i
specifier|private
name|int
name|i
decl_stmt|;
DECL|method|SequentialSplit (int i)
name|SequentialSplit
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|this
operator|.
name|i
operator|=
name|i
expr_stmt|;
block|}
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
DECL|method|getInit ()
specifier|public
name|int
name|getInit
parameter_list|()
block|{
return|return
name|i
return|;
block|}
block|}
DECL|class|TestInputSamplerIF
specifier|static
class|class
name|TestInputSamplerIF
extends|extends
name|InputFormat
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|maxDepth
specifier|final
name|int
name|maxDepth
decl_stmt|;
DECL|field|splits
specifier|final
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|TestInputSamplerIF (int maxDepth, int numSplits, int... splitInit)
name|TestInputSamplerIF
parameter_list|(
name|int
name|maxDepth
parameter_list|,
name|int
name|numSplits
parameter_list|,
name|int
modifier|...
name|splitInit
parameter_list|)
block|{
name|this
operator|.
name|maxDepth
operator|=
name|maxDepth
expr_stmt|;
assert|assert
name|splitInit
operator|.
name|length
operator|==
name|numSplits
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
operator|++
name|i
control|)
block|{
name|splits
operator|.
name|add
argument_list|(
operator|new
name|SequentialSplit
argument_list|(
name|splitInit
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSplits (JobContext context)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|splits
return|;
block|}
DECL|method|createRecordReader ( final InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
name|createRecordReader
parameter_list|(
specifier|final
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
operator|new
name|RecordReader
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|maxVal
decl_stmt|;
specifier|private
specifier|final
name|IntWritable
name|i
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|i
operator|.
name|set
argument_list|(
operator|(
operator|(
name|SequentialSplit
operator|)
name|split
operator|)
operator|.
name|getInit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|maxVal
operator|=
name|i
operator|.
name|get
argument_list|()
operator|+
name|maxDepth
operator|+
literal|1
expr_stmt|;
block|}
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
block|{
name|i
operator|.
name|set
argument_list|(
name|i
operator|.
name|get
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|i
operator|.
name|get
argument_list|()
operator|<
name|maxVal
return|;
block|}
specifier|public
name|IntWritable
name|getCurrentKey
parameter_list|()
block|{
return|return
name|i
return|;
block|}
specifier|public
name|NullWritable
name|getCurrentValue
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|1.0f
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{ }
block|}
return|;
block|}
block|}
comment|/**    * Verify SplitSampler contract, that an equal number of records are taken    * from the first splits.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// IntWritable comparator not typesafe
DECL|method|testSplitSampler ()
specifier|public
name|void
name|testSplitSampler
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|TOT_SPLITS
init|=
literal|15
decl_stmt|;
specifier|final
name|int
name|NUM_SPLITS
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|STEP_SAMPLE
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|NUM_SAMPLES
init|=
name|NUM_SPLITS
operator|*
name|STEP_SAMPLE
decl_stmt|;
name|InputSampler
operator|.
name|Sampler
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
name|sampler
init|=
operator|new
name|InputSampler
operator|.
name|SplitSampler
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
argument_list|(
name|NUM_SAMPLES
argument_list|,
name|NUM_SPLITS
argument_list|)
decl_stmt|;
name|int
name|inits
index|[]
init|=
operator|new
name|int
index|[
name|TOT_SPLITS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TOT_SPLITS
condition|;
operator|++
name|i
control|)
block|{
name|inits
index|[
name|i
index|]
operator|=
name|i
operator|*
name|STEP_SAMPLE
expr_stmt|;
block|}
name|Job
name|ignored
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Object
index|[]
name|samples
init|=
name|sampler
operator|.
name|getSample
argument_list|(
operator|new
name|TestInputSamplerIF
argument_list|(
literal|100000
argument_list|,
name|TOT_SPLITS
argument_list|,
name|inits
argument_list|)
argument_list|,
name|ignored
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_SAMPLES
argument_list|,
name|samples
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|samples
argument_list|,
operator|new
name|IntWritable
operator|.
name|Comparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_SAMPLES
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|samples
index|[
name|i
index|]
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify IntervalSampler contract, that samples are taken at regular    * intervals from the given splits.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// IntWritable comparator not typesafe
DECL|method|testIntervalSampler ()
specifier|public
name|void
name|testIntervalSampler
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|TOT_SPLITS
init|=
literal|16
decl_stmt|;
specifier|final
name|int
name|PER_SPLIT_SAMPLE
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|NUM_SAMPLES
init|=
name|TOT_SPLITS
operator|*
name|PER_SPLIT_SAMPLE
decl_stmt|;
specifier|final
name|double
name|FREQ
init|=
literal|1.0
operator|/
name|TOT_SPLITS
decl_stmt|;
name|InputSampler
operator|.
name|Sampler
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
name|sampler
init|=
operator|new
name|InputSampler
operator|.
name|IntervalSampler
argument_list|<
name|IntWritable
argument_list|,
name|NullWritable
argument_list|>
argument_list|(
name|FREQ
argument_list|,
name|NUM_SAMPLES
argument_list|)
decl_stmt|;
name|int
name|inits
index|[]
init|=
operator|new
name|int
index|[
name|TOT_SPLITS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TOT_SPLITS
condition|;
operator|++
name|i
control|)
block|{
name|inits
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
name|Job
name|ignored
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Object
index|[]
name|samples
init|=
name|sampler
operator|.
name|getSample
argument_list|(
operator|new
name|TestInputSamplerIF
argument_list|(
name|NUM_SAMPLES
argument_list|,
name|TOT_SPLITS
argument_list|,
name|inits
argument_list|)
argument_list|,
name|ignored
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_SAMPLES
argument_list|,
name|samples
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|samples
argument_list|,
operator|new
name|IntWritable
operator|.
name|Comparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_SAMPLES
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|samples
index|[
name|i
index|]
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

