begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Operation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManagerTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Verify the job-ACLs  *   */
end_comment

begin_class
DECL|class|TestJobACLs
specifier|public
class|class
name|TestJobACLs
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestJobACLs
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mr
specifier|private
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
name|TestJobACLs
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"completed-job-store"
argument_list|)
decl_stmt|;
DECL|field|jobSubmitter
specifier|private
name|String
name|jobSubmitter
init|=
literal|"jobSubmitter"
decl_stmt|;
DECL|field|viewColleague
specifier|private
name|String
name|viewColleague
init|=
literal|"viewColleague"
decl_stmt|;
DECL|field|modifyColleague
specifier|private
name|String
name|modifyColleague
init|=
literal|"modifyColleague"
decl_stmt|;
DECL|field|qAdmin
specifier|private
name|String
name|qAdmin
init|=
literal|"qAdmin"
decl_stmt|;
comment|/**    * Start the cluster before running the actual test.    *     * @throws IOException    */
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start the cluster
name|startCluster
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|startCluster (boolean reStart)
specifier|private
name|void
name|startCluster
parameter_list|(
name|boolean
name|reStart
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Configure job queues
name|String
index|[]
name|queueNames
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|createQueuesConfigFile
argument_list|(
name|queueNames
argument_list|,
operator|new
name|String
index|[]
block|{
name|jobSubmitter
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|qAdmin
block|}
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// Enable queue and job level authorization
name|conf
operator|.
name|setBoolean
argument_list|(
name|MRConfig
operator|.
name|MR_ACLS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Enable CompletedJobStore
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reStart
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|TEST_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS_DIR
argument_list|,
name|fs
operator|.
name|makeQualified
argument_list|(
name|TEST_DIR
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS_HOURS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|MR_UGI
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MR_UGI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Kill the cluster after the test is done.    */
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|deleteQueuesConfigFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test view-job-acl, modify-job-acl and acl persistence to the    * completed-jobs-store.    *     * @throws IOException    * @throws InterruptedException    * @throws ClassNotFoundException    */
annotation|@
name|Test
DECL|method|testACLS ()
specifier|public
name|void
name|testACLS
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyACLViewJob
argument_list|()
expr_stmt|;
name|verifyACLModifyJob
argument_list|(
name|modifyColleague
argument_list|)
expr_stmt|;
name|verifyACLModifyJob
argument_list|(
name|qAdmin
argument_list|)
expr_stmt|;
name|verifyACLPersistence
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify JobContext.JOB_ACL_VIEW_JOB    *     * @throws IOException    * @throws InterruptedException    */
DECL|method|verifyACLViewJob ()
specifier|private
name|void
name|verifyACLViewJob
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Set the job up.
specifier|final
name|Configuration
name|myConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|myConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
name|viewColleague
argument_list|)
expr_stmt|;
comment|// Submit the job as user1
name|Job
name|job
init|=
name|submitJobAsUser
argument_list|(
name|myConf
argument_list|,
name|jobSubmitter
argument_list|)
decl_stmt|;
specifier|final
name|JobID
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
comment|// Try operations as an unauthorized user.
name|verifyViewJobAsUnauthorizedUser
argument_list|(
name|myConf
argument_list|,
name|jobId
argument_list|,
name|modifyColleague
argument_list|)
expr_stmt|;
comment|// Try operations as an authorized user, who is part of view-job-acl.
name|verifyViewJobAsAuthorizedUser
argument_list|(
name|myConf
argument_list|,
name|jobId
argument_list|,
name|viewColleague
argument_list|)
expr_stmt|;
comment|// Try operations as an authorized user, who is a queue administrator.
name|verifyViewJobAsAuthorizedUser
argument_list|(
name|myConf
argument_list|,
name|jobId
argument_list|,
name|qAdmin
argument_list|)
expr_stmt|;
comment|// Clean up the job
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
block|}
comment|/**    * Submits a sleep job with 1 map task that runs for a long time(60 sec) and    * wait for the job to go into RUNNING state.    * @param clusterConf    * @param user the jobOwner    * @return Job that is started    * @throws IOException    * @throws InterruptedException    */
DECL|method|submitJobAsUser (final Configuration clusterConf, String user)
specifier|private
name|Job
name|submitJobAsUser
parameter_list|(
specifier|final
name|Configuration
name|clusterConf
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|user
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
operator|(
name|Job
operator|)
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|clusterConf
argument_list|)
expr_stmt|;
comment|// Disable setup/cleanup tasks at the job level
name|sleepJob
operator|.
name|getConf
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Job
name|myJob
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|60000
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|myJob
operator|.
name|submit
argument_list|()
expr_stmt|;
return|return
name|myJob
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Make the job go into RUNNING state by forceful initialization.
name|JobTracker
name|jt
init|=
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|JobInProgress
name|jip
init|=
name|jt
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|jt
operator|.
name|initJob
argument_list|(
name|jip
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|verifyViewJobAsAuthorizedUser (final Configuration myConf, final JobID jobId, String authorizedUser)
specifier|private
name|void
name|verifyViewJobAsAuthorizedUser
parameter_list|(
specifier|final
name|Configuration
name|myConf
parameter_list|,
specifier|final
name|JobID
name|jobId
parameter_list|,
name|String
name|authorizedUser
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|authorizedUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|authorizedUser
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|authorizedUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"null"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|myJob
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|myJob
operator|=
name|cluster
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception .."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" is not known to the JobTracker!"
argument_list|,
name|myJob
argument_list|)
expr_stmt|;
comment|// Tests authorization with getCounters
try|try
block|{
name|myJob
operator|.
name|getCounters
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected.. exception.. "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Tests authorization  with getTaskReports
try|try
block|{
name|myJob
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected.. exception.. "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyViewJobAsUnauthorizedUser (final Configuration myConf, final JobID jobId, String unauthorizedUser)
specifier|private
name|void
name|verifyViewJobAsUnauthorizedUser
parameter_list|(
specifier|final
name|Configuration
name|myConf
parameter_list|,
specifier|final
name|JobID
name|jobId
parameter_list|,
name|String
name|unauthorizedUser
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|unauthorizedUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|unauthorizedUser
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|unauthorizedUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"null"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|Job
name|myJob
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|myJob
operator|=
name|cluster
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception .."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" is not known to the JobTracker!"
argument_list|,
name|myJob
argument_list|)
expr_stmt|;
comment|// Tests authorization failure with getCounters
try|try
block|{
name|myJob
operator|.
name|getCounters
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlException expected.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|" cannot perform operation "
operator|+
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception .. interrupted.."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Tests authorization failure with getTaskReports
try|try
block|{
name|myJob
operator|.
name|getTaskReports
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlException expected.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|" cannot perform operation "
operator|+
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception .. interrupted.."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify MRConfig.Job_ACL_MODIFY_JOB    *     * @throws IOException    * @throws InterruptedException    * @throws ClassNotFoundException    */
DECL|method|verifyACLModifyJob (String authorizedUser)
specifier|private
name|void
name|verifyACLModifyJob
parameter_list|(
name|String
name|authorizedUser
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
comment|// Set the job up.
specifier|final
name|Configuration
name|myConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|myConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_MODIFY_JOB
argument_list|,
name|modifyColleague
argument_list|)
expr_stmt|;
comment|// Submit the job as user1
name|Job
name|job
init|=
name|submitJobAsUser
argument_list|(
name|myConf
argument_list|,
name|jobSubmitter
argument_list|)
decl_stmt|;
specifier|final
name|JobID
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
comment|// Try operations as an unauthorized user.
name|verifyModifyJobAsUnauthorizedUser
argument_list|(
name|myConf
argument_list|,
name|jobId
argument_list|,
name|viewColleague
argument_list|)
expr_stmt|;
comment|// Try operations as an authorized user.
name|verifyModifyJobAsAuthorizedUser
argument_list|(
name|myConf
argument_list|,
name|jobId
argument_list|,
name|authorizedUser
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyModifyJobAsAuthorizedUser ( final Configuration clusterConf, final JobID jobId, String authorizedUser)
specifier|private
name|void
name|verifyModifyJobAsAuthorizedUser
parameter_list|(
specifier|final
name|Configuration
name|clusterConf
parameter_list|,
specifier|final
name|JobID
name|jobId
parameter_list|,
name|String
name|authorizedUser
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|authorizedUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|authorizedUser
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|authorizedUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"null"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|myJob
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|clusterConf
argument_list|)
decl_stmt|;
name|myJob
operator|=
name|cluster
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception .."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" is not known to the JobTracker!"
argument_list|,
name|myJob
argument_list|)
expr_stmt|;
comment|// Test authorization success with setJobPriority
try|try
block|{
name|myJob
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|myJob
operator|.
name|getPriority
argument_list|()
argument_list|,
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected.. exception.. "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
comment|// Test authorization success with killJob
try|try
block|{
name|myJob
operator|.
name|killJob
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected.. exception.. "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyModifyJobAsUnauthorizedUser ( final Configuration clusterConf, final JobID jobId, String unauthorizedUser)
specifier|private
name|void
name|verifyModifyJobAsUnauthorizedUser
parameter_list|(
specifier|final
name|Configuration
name|clusterConf
parameter_list|,
specifier|final
name|JobID
name|jobId
parameter_list|,
name|String
name|unauthorizedUser
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|unauthorizedUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|unauthorizedUser
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|unauthorizedUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"null"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|Job
name|myJob
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|clusterConf
argument_list|)
decl_stmt|;
name|myJob
operator|=
name|cluster
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception .."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" is not known to the JobTracker!"
argument_list|,
name|myJob
argument_list|)
expr_stmt|;
comment|// Tests authorization failure with killJob
try|try
block|{
name|myJob
operator|.
name|killJob
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlException expected.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|" cannot perform operation "
operator|+
name|Operation
operator|.
name|KILL_JOB
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception .. interrupted.."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Tests authorization failure with setJobPriority
try|try
block|{
name|myJob
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlException expected.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|" cannot perform operation "
operator|+
name|Operation
operator|.
name|SET_JOB_PRIORITY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception .. interrupted.."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyACLPersistence ()
specifier|private
name|void
name|verifyACLPersistence
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set the job up.
specifier|final
name|Configuration
name|myConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|myConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|JOB_ACL_VIEW_JOB
argument_list|,
name|viewColleague
operator|+
literal|" group2"
argument_list|)
expr_stmt|;
comment|// Submit the job as user1
name|Job
name|job
init|=
name|submitJobAsUser
argument_list|(
name|myConf
argument_list|,
name|jobSubmitter
argument_list|)
decl_stmt|;
specifier|final
name|JobID
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
comment|// Kill the job and wait till it is actually killed so that it is written to
comment|// CompletedJobStore
name|job
operator|.
name|killJob
argument_list|()
expr_stmt|;
while|while
condition|(
name|job
operator|.
name|getJobState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|State
operator|.
name|KILLED
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the job to be killed successfully.."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|// Now kill the cluster, so that the job is 'forgotten'
name|tearDown
argument_list|()
expr_stmt|;
comment|// Re-start the cluster
name|startCluster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|myNewJobConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
comment|// Now verify view-job works off CompletedJobStore
name|verifyViewJobAsAuthorizedUser
argument_list|(
name|myNewJobConf
argument_list|,
name|jobId
argument_list|,
name|viewColleague
argument_list|)
expr_stmt|;
name|verifyViewJobAsAuthorizedUser
argument_list|(
name|myNewJobConf
argument_list|,
name|jobId
argument_list|,
name|qAdmin
argument_list|)
expr_stmt|;
comment|// Only JobCounters is persisted on the JobStore. So test counters only.
name|UserGroupInformation
name|unauthorizedUGI
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|modifyColleague
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|unauthorizedUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"null"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|Job
name|myJob
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|myNewJobConf
argument_list|)
decl_stmt|;
name|myJob
operator|=
name|cluster
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception .."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" is not known to the JobTracker!"
argument_list|,
name|myJob
argument_list|)
expr_stmt|;
comment|// Tests authorization failure with getCounters
try|try
block|{
name|myJob
operator|.
name|getCounters
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlException expected.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|" cannot perform operation "
operator|+
name|Operation
operator|.
name|VIEW_JOB_COUNTERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception .. interrupted.."
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

