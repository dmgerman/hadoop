begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|MultiFileWordCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|WordCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|WordCount
operator|.
name|IntSumReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|WordCount
operator|.
name|TokenizerMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|LineRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test min map-reduce cluster with local file system.  */
end_comment

begin_class
DECL|class|TestMapReduceLocal
specifier|public
class|class
name|TestMapReduceLocal
extends|extends
name|TestCase
block|{
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|Path
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|static
name|FileSystem
name|localFs
decl_stmt|;
static|static
block|{
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem getting local fs"
argument_list|,
name|io
argument_list|)
throw|;
block|}
block|}
DECL|method|writeFile (String name, String data)
specifier|public
specifier|static
name|Path
name|writeFile
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
name|name
argument_list|)
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DataOutputStream
name|f
init|=
name|localFs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|f
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
DECL|method|readFile (String name)
specifier|public
specifier|static
name|String
name|readFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|f
init|=
name|localFs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|b
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|b
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|line
operator|=
name|b
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testWithLocal ()
specifier|public
name|void
name|testWithLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
literal|"file:///"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|runWordCount
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|runMultiFileWordCount
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|TrackingTextInputFormat
specifier|public
specifier|static
class|class
name|TrackingTextInputFormat
extends|extends
name|TextInputFormat
block|{
DECL|class|MonoProgressRecordReader
specifier|public
specifier|static
class|class
name|MonoProgressRecordReader
extends|extends
name|LineRecordReader
block|{
DECL|field|last
specifier|private
name|float
name|last
init|=
literal|0.0f
decl_stmt|;
DECL|field|progressCalled
specifier|private
name|boolean
name|progressCalled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
name|progressCalled
operator|=
literal|true
expr_stmt|;
specifier|final
name|float
name|ret
init|=
name|super
operator|.
name|getProgress
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"getProgress decreased"
argument_list|,
name|ret
operator|>=
name|last
argument_list|)
expr_stmt|;
name|last
operator|=
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"getProgress never called"
argument_list|,
name|progressCalled
argument_list|)
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRecordReader ( InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|MonoProgressRecordReader
argument_list|()
return|;
block|}
block|}
DECL|method|runWordCount (Configuration conf )
specifier|private
name|void
name|runWordCount
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
specifier|final
name|String
name|COUNTER_GROUP
init|=
literal|"org.apache.hadoop.mapreduce.TaskCounter"
decl_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/in"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/out"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
literal|"in/part1"
argument_list|,
literal|"this is a test\nof word count test\ntest\n"
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
literal|"in/part2"
argument_list|,
literal|"more test"
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|,
literal|"word count"
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|WordCount
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|TokenizerMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setCombinerClass
argument_list|(
name|IntSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|IntSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|TrackingTextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/in"
argument_list|)
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/out"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|readFile
argument_list|(
literal|"out/part-r-00000"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a\t1\ncount\t1\nis\t1\nmore\t1\nof\t1\ntest\t4\nthis\t1\nword\t1\n"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|Counters
name|ctrs
init|=
name|job
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Counters: "
operator|+
name|ctrs
argument_list|)
expr_stmt|;
name|long
name|mapIn
init|=
name|ctrs
operator|.
name|findCounter
argument_list|(
name|FileInputFormat
operator|.
name|COUNTER_GROUP
argument_list|,
name|FileInputFormat
operator|.
name|BYTES_READ
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mapIn
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|long
name|combineIn
init|=
name|ctrs
operator|.
name|findCounter
argument_list|(
name|COUNTER_GROUP
argument_list|,
literal|"COMBINE_INPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|combineOut
init|=
name|ctrs
operator|.
name|findCounter
argument_list|(
name|COUNTER_GROUP
argument_list|,
literal|"COMBINE_OUTPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|reduceIn
init|=
name|ctrs
operator|.
name|findCounter
argument_list|(
name|COUNTER_GROUP
argument_list|,
literal|"REDUCE_INPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|mapOut
init|=
name|ctrs
operator|.
name|findCounter
argument_list|(
name|COUNTER_GROUP
argument_list|,
literal|"MAP_OUTPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|reduceOut
init|=
name|ctrs
operator|.
name|findCounter
argument_list|(
name|COUNTER_GROUP
argument_list|,
literal|"REDUCE_OUTPUT_RECORDS"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|reduceGrps
init|=
name|ctrs
operator|.
name|findCounter
argument_list|(
name|COUNTER_GROUP
argument_list|,
literal|"REDUCE_INPUT_GROUPS"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|mergedMapOutputs
init|=
name|ctrs
operator|.
name|findCounter
argument_list|(
name|COUNTER_GROUP
argument_list|,
literal|"MERGED_MAP_OUTPUTS"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|shuffledMaps
init|=
name|ctrs
operator|.
name|findCounter
argument_list|(
name|COUNTER_GROUP
argument_list|,
literal|"SHUFFLED_MAPS"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"map out = combine in"
argument_list|,
name|mapOut
argument_list|,
name|combineIn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"combine out = reduce in"
argument_list|,
name|combineOut
argument_list|,
name|reduceIn
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"combine in> combine out"
argument_list|,
name|combineIn
operator|>
name|combineOut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reduce groups = reduce out"
argument_list|,
name|reduceGrps
argument_list|,
name|reduceOut
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in mergedMapOutputs"
argument_list|,
name|mergedMapOutputs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in shuffledMaps"
argument_list|,
name|shuffledMaps
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|group
init|=
literal|"Random Group"
decl_stmt|;
name|CounterGroup
name|ctrGrp
init|=
name|ctrs
operator|.
name|getGroup
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ctrGrp
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|runMultiFileWordCount (Configuration conf)
specifier|public
name|void
name|runMultiFileWordCount
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|localFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/in"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/out"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
literal|"in/part1"
argument_list|,
literal|"this is a test\nof "
operator|+
literal|"multi file word count test\ntest\n"
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
literal|"in/part2"
argument_list|,
literal|"more test"
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|MultiFileWordCount
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|TEST_ROOT_DIR
operator|+
literal|"/in"
block|,
name|TEST_ROOT_DIR
operator|+
literal|"/out"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"MultiFileWordCount failed"
argument_list|,
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|readFile
argument_list|(
literal|"out/part-r-00000"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a\t1\ncount\t1\nfile\t1\nis\t1\n"
operator|+
literal|"more\t1\nmulti\t1\nof\t1\ntest\t4\nthis\t1\nword\t1\n"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

