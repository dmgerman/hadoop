begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|RandomWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|MRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * A System test to test the Map-Reduce framework's sort   * with a real Map-Reduce Cluster.  */
end_comment

begin_class
DECL|class|TestSortValidate
specifier|public
class|class
name|TestSortValidate
block|{
comment|// Input/Output paths for sort
DECL|field|SORT_INPUT_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|SORT_INPUT_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"inputDirectory"
argument_list|)
decl_stmt|;
DECL|field|SORT_OUTPUT_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|SORT_OUTPUT_PATH
init|=
operator|new
name|Path
argument_list|(
literal|"outputDirectory"
argument_list|)
decl_stmt|;
comment|// make it big enough to cause a spill in the map
DECL|field|RW_BYTES_PER_MAP
specifier|private
specifier|static
specifier|final
name|int
name|RW_BYTES_PER_MAP
init|=
literal|3
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|RW_MAPS_PER_HOST
specifier|private
specifier|static
specifier|final
name|int
name|RW_MAPS_PER_HOST
init|=
literal|2
decl_stmt|;
DECL|field|cluster
specifier|private
name|MRCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|dfs
specifier|private
name|FileSystem
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|client
specifier|private
name|JobClient
name|client
init|=
literal|null
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSortValidate
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TestSortValidate ()
specifier|public
name|TestSortValidate
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|MRCluster
operator|.
name|createCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|cluster
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|client
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|dfs
operator|=
name|client
operator|.
name|getFs
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|SORT_INPUT_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|SORT_OUTPUT_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|SORT_INPUT_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|delete
argument_list|(
name|SORT_OUTPUT_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|runRandomWriter (Configuration job, Path sortInput)
specifier|public
name|void
name|runRandomWriter
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Path
name|sortInput
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Scale down the default settings for RandomWriter for the test-case
comment|// Generates NUM_HADOOP_SLAVES * RW_MAPS_PER_HOST * RW_BYTES_PER_MAP
name|job
operator|.
name|setInt
argument_list|(
literal|"test.randomwrite.bytes_per_map"
argument_list|,
name|RW_BYTES_PER_MAP
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInt
argument_list|(
literal|"test.randomwriter.maps_per_host"
argument_list|,
name|RW_MAPS_PER_HOST
argument_list|)
expr_stmt|;
name|String
index|[]
name|rwArgs
init|=
block|{
name|sortInput
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runAndVerify
argument_list|(
name|job
argument_list|,
operator|new
name|RandomWriter
argument_list|()
argument_list|,
name|rwArgs
argument_list|)
expr_stmt|;
block|}
DECL|method|runAndVerify (Configuration job, Tool tool, String[] args)
specifier|private
name|void
name|runAndVerify
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Tool
name|tool
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
comment|// This calculates the previous number fo jobs submitted before a new
comment|// job gets submitted.
name|int
name|prevJobsNum
init|=
literal|0
decl_stmt|;
comment|// JTProtocol wovenClient
name|JTProtocol
name|wovenClient
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
decl_stmt|;
comment|// JobStatus
name|JobStatus
index|[]
name|jobStatus
init|=
literal|null
decl_stmt|;
comment|// JobID
name|JobID
name|id
init|=
literal|null
decl_stmt|;
comment|// RunningJob rJob;
name|RunningJob
name|rJob
init|=
literal|null
decl_stmt|;
comment|// JobInfo jInfo;
name|JobInfo
name|jInfo
init|=
literal|null
decl_stmt|;
comment|//Getting the previous job numbers that are submitted.
name|jobStatus
operator|=
name|client
operator|.
name|getAllJobs
argument_list|()
expr_stmt|;
name|prevJobsNum
operator|=
name|jobStatus
operator|.
name|length
expr_stmt|;
comment|// Run RandomWriter
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|job
argument_list|,
name|tool
argument_list|,
name|args
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Waiting for the job to appear in the jobstatus
name|jobStatus
operator|=
name|client
operator|.
name|getAllJobs
argument_list|()
expr_stmt|;
while|while
condition|(
name|jobStatus
operator|.
name|length
operator|-
name|prevJobsNum
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the job to appear in the jobStatus"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|jobStatus
operator|=
name|client
operator|.
name|getAllJobs
argument_list|()
expr_stmt|;
block|}
comment|//Getting the jobId of the just submitted job
comment|//The just submitted job is always added in the first slot of jobstatus
name|id
operator|=
name|jobStatus
index|[
literal|0
index|]
operator|.
name|getJobID
argument_list|()
expr_stmt|;
name|rJob
operator|=
name|client
operator|.
name|getJob
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|//Making sure that the job is complete.
while|while
condition|(
name|jInfo
operator|!=
literal|null
operator|&&
operator|!
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|isJobComplete
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|verifyCompletedJob
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|runSort (Configuration job, Path sortInput, Path sortOutput)
specifier|private
name|void
name|runSort
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Path
name|sortInput
parameter_list|,
name|Path
name|sortOutput
parameter_list|)
throws|throws
name|Exception
block|{
name|job
operator|.
name|setInt
argument_list|(
literal|"io.sort.mb"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Setup command-line arguments to 'sort'
name|String
index|[]
name|sortArgs
init|=
block|{
name|sortInput
operator|.
name|toString
argument_list|()
block|,
name|sortOutput
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runAndVerify
argument_list|(
name|job
argument_list|,
operator|new
name|Sort
argument_list|()
argument_list|,
name|sortArgs
argument_list|)
expr_stmt|;
block|}
DECL|method|runSortValidator (Configuration job, Path sortInput, Path sortOutput)
specifier|private
name|void
name|runSortValidator
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Path
name|sortInput
parameter_list|,
name|Path
name|sortOutput
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|svArgs
init|=
block|{
literal|"-sortInput"
block|,
name|sortInput
operator|.
name|toString
argument_list|()
block|,
literal|"-sortOutput"
block|,
name|sortOutput
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|runAndVerify
argument_list|(
name|job
argument_list|,
operator|new
name|SortValidator
argument_list|()
argument_list|,
name|svArgs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMapReduceSort ()
specifier|public
name|void
name|testMapReduceSort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run randomwriter to generate input for 'sort'
name|runRandomWriter
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|,
name|SORT_INPUT_PATH
argument_list|)
expr_stmt|;
comment|// Run sort
name|runSort
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|,
name|SORT_INPUT_PATH
argument_list|,
name|SORT_OUTPUT_PATH
argument_list|)
expr_stmt|;
comment|// Run sort-validator to check if sort worked correctly
name|runSortValidator
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|,
name|SORT_INPUT_PATH
argument_list|,
name|SORT_OUTPUT_PATH
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

