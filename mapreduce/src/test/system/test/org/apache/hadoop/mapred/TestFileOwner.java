begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|FinishTaskControlAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|MRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TTClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TTInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TTTaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFileOwner
specifier|public
class|class
name|TestFileOwner
block|{
DECL|field|cluster
specifier|public
specifier|static
name|MRCluster
name|cluster
decl_stmt|;
DECL|field|jobIdDir
specifier|private
name|StringBuffer
name|jobIdDir
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
DECL|field|wovenClient
specifier|private
name|JTProtocol
name|wovenClient
init|=
literal|null
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFileOwner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|taskController
specifier|private
name|String
name|taskController
init|=
literal|null
decl_stmt|;
DECL|field|PERM_777
specifier|private
specifier|final
name|FsPermission
name|PERM_777
init|=
operator|new
name|FsPermission
argument_list|(
literal|"777"
argument_list|)
decl_stmt|;
DECL|field|PERM_755
specifier|private
specifier|final
name|FsPermission
name|PERM_755
init|=
operator|new
name|FsPermission
argument_list|(
literal|"755"
argument_list|)
decl_stmt|;
DECL|field|PERM_644
specifier|private
specifier|final
name|FsPermission
name|PERM_644
init|=
operator|new
name|FsPermission
argument_list|(
literal|"644"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|cluster
operator|=
name|MRCluster
operator|.
name|createCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/*    * The test is used to check the file permission of local files in    * mapred.local.dir. The job control is used which will make the tasks wait    * for completion until it is signaled    *     * @throws Exception in case of test errors    */
annotation|@
name|Test
DECL|method|testFilePermission ()
specifier|public
name|void
name|testFilePermission
parameter_list|()
throws|throws
name|Exception
block|{
name|wovenClient
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FinishTaskControlAction
operator|.
name|configureControlActionForJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SleepJob
name|job
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|slpJob
init|=
name|job
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|JobConf
name|jconf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|slpJob
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RunningJob
name|rJob
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|slpJob
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|taskController
operator|=
name|conf
operator|.
name|get
argument_list|(
name|TTConfig
operator|.
name|TT_TASK_CONTROLLER
argument_list|)
expr_stmt|;
comment|// get the job info so we can get the env variables from the daemon.
comment|// Now wait for the task to be in the running state, only then the
comment|// directories will be created
name|JobInfo
name|info
init|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"JobInfo is null"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|JobID
name|id
init|=
name|rJob
operator|.
name|getID
argument_list|()
decl_stmt|;
while|while
condition|(
name|info
operator|.
name|runningMaps
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|info
operator|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|TaskInfo
index|[]
name|myTaskInfos
init|=
name|wovenClient
operator|.
name|getTaskInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskInfo
name|tInfo
range|:
name|myTaskInfos
control|)
block|{
if|if
condition|(
operator|!
name|tInfo
operator|.
name|isSetupOrCleanup
argument_list|()
condition|)
block|{
name|String
index|[]
name|taskTrackers
init|=
name|tInfo
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|taskTracker
range|:
name|taskTrackers
control|)
block|{
name|TTInfo
name|ttInfo
init|=
name|wovenClient
operator|.
name|getTTInfo
argument_list|(
name|taskTracker
argument_list|)
decl_stmt|;
name|TTClient
name|ttCli
init|=
name|cluster
operator|.
name|getTTClient
argument_list|(
name|ttInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"TTClient instance is null"
argument_list|,
name|ttCli
argument_list|)
expr_stmt|;
name|TTTaskInfo
name|ttTaskInfo
init|=
name|ttCli
operator|.
name|getProxy
argument_list|()
operator|.
name|getTask
argument_list|(
name|tInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"TTTaskInfo is null"
argument_list|,
name|ttTaskInfo
argument_list|)
expr_stmt|;
while|while
condition|(
name|ttTaskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|!=
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ttTaskInfo
operator|=
name|ttCli
operator|.
name|getProxy
argument_list|()
operator|.
name|getTask
argument_list|(
name|tInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|testPermissionWithTaskController
argument_list|(
name|ttCli
argument_list|,
name|conf
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|FinishTaskControlAction
name|action
init|=
operator|new
name|FinishTaskControlAction
argument_list|(
name|TaskID
operator|.
name|downgrade
argument_list|(
name|tInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|TTClient
name|cli
range|:
name|cluster
operator|.
name|getTTClients
argument_list|()
control|)
block|{
name|cli
operator|.
name|getProxy
argument_list|()
operator|.
name|sendAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|JobInfo
name|jInfo
init|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|jInfo
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|isJobComplete
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPermissionWithTaskController ( TTClient tClient, Configuration conf, JobInfo info)
specifier|private
name|void
name|testPermissionWithTaskController
parameter_list|(
name|TTClient
name|tClient
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|JobInfo
name|info
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"TTclient is null"
argument_list|,
name|tClient
argument_list|)
expr_stmt|;
name|FsPermission
name|fsPerm
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|pathInfo
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathInfo
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// First verify the jobid directory exists
name|jobIdDir
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|String
name|userName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JobStatus
index|[]
name|jobStatus
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|userName
operator|=
name|jobStatus
index|[
literal|0
index|]
operator|.
name|getUsername
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get user name"
argument_list|)
expr_stmt|;
name|boolean
name|status
init|=
literal|false
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failed to get the userName"
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
name|jobIdDir
operator|.
name|append
argument_list|(
name|pathInfo
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
name|jobIdDir
operator|.
name|append
argument_list|(
name|TaskTracker
operator|.
name|getLocalJobDir
argument_list|(
name|userName
argument_list|,
name|info
operator|.
name|getID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|tClient
operator|.
name|listStatus
argument_list|(
name|jobIdDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get the jobIdDir files "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Filestatus length is zero"
argument_list|,
name|fs
operator|.
name|length
operator|!=
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|fs
control|)
block|{
try|try
block|{
name|String
name|filename
init|=
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|equals
argument_list|(
name|TaskTracker
operator|.
name|JOBFILE
argument_list|)
condition|)
block|{
if|if
condition|(
name|taskController
operator|==
name|DefaultTaskController
operator|.
name|class
operator|.
name|getName
argument_list|()
condition|)
block|{
name|fsPerm
operator|=
name|file
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"FilePermission failed for "
operator|+
name|filename
argument_list|,
name|fsPerm
operator|.
name|equals
argument_list|(
name|PERM_777
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
literal|"attempt"
argument_list|)
condition|)
block|{
name|StringBuffer
name|attemptDir
init|=
operator|new
name|StringBuffer
argument_list|(
name|jobIdDir
argument_list|)
decl_stmt|;
name|attemptDir
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|filename
argument_list|)
expr_stmt|;
if|if
condition|(
name|tClient
operator|.
name|getFileStatus
argument_list|(
name|attemptDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|FileStatus
index|[]
name|attemptFs
init|=
name|tClient
operator|.
name|listStatus
argument_list|(
name|attemptDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|attemptfz
range|:
name|attemptFs
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"FileStatus is null"
argument_list|,
name|attemptfz
argument_list|)
expr_stmt|;
name|fsPerm
operator|=
name|attemptfz
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"FsPermission is null"
argument_list|,
name|fsPerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskController
operator|==
name|DefaultTaskController
operator|.
name|class
operator|.
name|getName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|attemptfz
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"FilePermission failed for "
operator|+
name|filename
argument_list|,
name|fsPerm
operator|.
name|equals
argument_list|(
name|PERM_777
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"FilePermission failed for "
operator|+
name|filename
argument_list|,
name|fsPerm
operator|.
name|equals
argument_list|(
name|PERM_755
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|filename
operator|.
name|equals
argument_list|(
name|TaskTracker
operator|.
name|TASKJARDIR
argument_list|)
condition|)
block|{
name|StringBuffer
name|jarsDir
init|=
operator|new
name|StringBuffer
argument_list|(
name|jobIdDir
argument_list|)
decl_stmt|;
name|jarsDir
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|jarsFs
init|=
name|tClient
operator|.
name|listStatus
argument_list|(
name|jarsDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|jarsfz
range|:
name|jarsFs
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"FileStatus is null"
argument_list|,
name|jarsfz
argument_list|)
expr_stmt|;
name|fsPerm
operator|=
name|jarsfz
operator|.
name|getPermission
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"File permission is null"
argument_list|,
name|fsPerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskController
operator|==
name|DefaultTaskController
operator|.
name|class
operator|.
name|getName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|jarsfz
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
name|jarsfz
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"job.jar"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"FilePermission failed for "
operator|+
name|filename
argument_list|,
name|fsPerm
operator|.
name|equals
argument_list|(
name|PERM_777
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"FilePermission failed for "
operator|+
name|filename
argument_list|,
name|fsPerm
operator|.
name|equals
argument_list|(
name|PERM_644
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"FilePermission failed for "
operator|+
name|filename
argument_list|,
name|fsPerm
operator|.
name|equals
argument_list|(
name|PERM_755
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The exception occurred while searching for nonexsistent"
operator|+
literal|"file, ignoring and continuing. "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for loop ends
block|}
comment|// for loop ends
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|cluster
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

