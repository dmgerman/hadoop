begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|MRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TTClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|FinishTaskControlAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
operator|.
name|NetworkedJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_comment
comment|/**  * A System test for verifying the status after killing the tasks at different  * conditions.  */
end_comment

begin_class
DECL|class|TestTaskKilling
specifier|public
class|class
name|TestTaskKilling
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTaskKilling
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|private
specifier|static
name|MRCluster
name|cluster
decl_stmt|;
DECL|field|jobClient
specifier|private
specifier|static
name|JobClient
name|jobClient
init|=
literal|null
decl_stmt|;
DECL|field|remoteJTClient
specifier|private
specifier|static
name|JTProtocol
name|remoteJTClient
init|=
literal|null
decl_stmt|;
DECL|method|TestTaskKilling ()
specifier|public
name|TestTaskKilling
parameter_list|()
block|{   }
annotation|@
name|BeforeClass
DECL|method|before ()
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cluster
operator|=
name|MRCluster
operator|.
name|createCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|jobClient
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getClient
argument_list|()
expr_stmt|;
name|remoteJTClient
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after ()
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verifying the running job status whether it succeeds or not after failing    * some of its tasks.    *     * @throws ClassNotFoundException    */
annotation|@
name|Test
DECL|method|testFailedTaskJobStatus ()
specifier|public
name|void
name|testFailedTaskJobStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|TaskInfo
name|taskInfo
init|=
literal|null
decl_stmt|;
name|SleepJob
name|job
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|slpJob
init|=
name|job
operator|.
name|createJob
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|4000
argument_list|,
literal|4000
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|slpJob
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RunningJob
name|runJob
init|=
name|jobClient
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|slpJob
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|runJob
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobInfo
name|jInfo
init|=
name|remoteJTClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|counter
operator|<
literal|60
condition|)
block|{
if|if
condition|(
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
break|break;
block|}
else|else
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|remoteJTClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job has not been started for 1 min."
argument_list|,
name|counter
operator|!=
literal|60
argument_list|)
expr_stmt|;
name|TaskInfo
index|[]
name|taskInfos
init|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskInfo
name|taskinfo
range|:
name|taskInfos
control|)
block|{
if|if
condition|(
operator|!
name|taskinfo
operator|.
name|isSetupOrCleanup
argument_list|()
condition|)
block|{
name|taskInfo
operator|=
name|taskinfo
expr_stmt|;
block|}
block|}
name|counter
operator|=
literal|0
expr_stmt|;
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|taskInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|counter
operator|<
literal|60
condition|)
block|{
if|if
condition|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRunState
argument_list|()
operator|==
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
break|break;
block|}
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|taskInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Task has not been started for 1 min."
argument_list|,
name|counter
operator|!=
literal|60
argument_list|)
expr_stmt|;
name|NetworkedJob
name|networkJob
init|=
operator|new
name|JobClient
operator|.
name|NetworkedJob
argument_list|(
name|jInfo
operator|.
name|getStatus
argument_list|()
argument_list|,
name|jobClient
operator|.
name|cluster
argument_list|)
decl_stmt|;
name|TaskID
name|tID
init|=
name|TaskID
operator|.
name|downgrade
argument_list|(
name|taskInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptID
name|taskAttID
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|tID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|networkJob
operator|.
name|killTask
argument_list|(
name|taskAttID
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting till the job is completed..."
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|isJobComplete
argument_list|()
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|remoteJTClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"JobStatus"
argument_list|,
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verifying whether task temporary output directory is cleaned up or not    * after killing the task.    */
annotation|@
name|Test
DECL|method|testDirCleanupAfterTaskKilled ()
specifier|public
name|void
name|testDirCleanupAfterTaskKilled
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TaskInfo
name|taskInfo
init|=
literal|null
decl_stmt|;
name|boolean
name|isTempFolderExists
init|=
literal|false
decl_stmt|;
name|String
name|localTaskDir
init|=
literal|null
decl_stmt|;
name|TTClient
name|ttClient
init|=
literal|null
decl_stmt|;
name|TaskID
name|tID
init|=
literal|null
decl_stmt|;
name|FileStatus
name|filesStatus
index|[]
init|=
literal|null
decl_stmt|;
name|Path
name|inputDir
init|=
operator|new
name|Path
argument_list|(
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
literal|"output"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|JobConf
name|jconf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jconf
operator|.
name|setJobName
argument_list|(
literal|"Word Count"
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setJarByClass
argument_list|(
name|WordCount
operator|.
name|class
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setMapperClass
argument_list|(
name|WordCount
operator|.
name|MapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setCombinerClass
argument_list|(
name|WordCount
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setReducerClass
argument_list|(
name|WordCount
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setMaxReduceAttempts
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|cleanup
argument_list|(
name|inputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cleanup
argument_list|(
name|outputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|createInput
argument_list|(
name|inputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jconf
argument_list|,
name|inputDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jconf
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|RunningJob
name|runJob
init|=
name|jobClient
operator|.
name|submitJob
argument_list|(
name|jconf
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|runJob
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobInfo
name|jInfo
init|=
name|remoteJTClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|counter
operator|<
literal|60
condition|)
block|{
if|if
condition|(
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
break|break;
block|}
else|else
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|remoteJTClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job has not been started for 1 min."
argument_list|,
name|counter
operator|!=
literal|60
argument_list|)
expr_stmt|;
name|JobStatus
index|[]
name|jobStatus
init|=
name|jobClient
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
name|jobStatus
index|[
literal|0
index|]
operator|.
name|getUsername
argument_list|()
decl_stmt|;
name|TaskInfo
index|[]
name|taskInfos
init|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskInfo
name|taskinfo
range|:
name|taskInfos
control|)
block|{
if|if
condition|(
operator|!
name|taskinfo
operator|.
name|isSetupOrCleanup
argument_list|()
condition|)
block|{
name|taskInfo
operator|=
name|taskinfo
expr_stmt|;
break|break;
block|}
block|}
name|counter
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|counter
operator|<
literal|30
condition|)
block|{
if|if
condition|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRunState
argument_list|()
operator|==
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
break|break;
block|}
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|taskInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Task has not been started for 30 sec."
argument_list|,
name|counter
operator|!=
literal|30
argument_list|)
expr_stmt|;
name|tID
operator|=
name|TaskID
operator|.
name|downgrade
argument_list|(
name|taskInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|FinishTaskControlAction
name|action
init|=
operator|new
name|FinishTaskControlAction
argument_list|(
name|tID
argument_list|)
decl_stmt|;
name|String
index|[]
name|taskTrackers
init|=
name|taskInfo
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|counter
operator|<
literal|30
condition|)
block|{
if|if
condition|(
name|taskTrackers
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|taskTrackers
operator|=
name|taskInfo
operator|.
name|getTaskTrackers
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|String
name|hostName
init|=
name|taskTrackers
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|hostName
operator|=
name|hostName
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|ttClient
operator|=
name|cluster
operator|.
name|getTTClient
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|ttClient
operator|.
name|getProxy
argument_list|()
operator|.
name|sendAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|String
name|localDirs
index|[]
init|=
name|ttClient
operator|.
name|getMapredLocalDirs
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|taskAttID
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|tID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|localTaskDir
operator|=
name|localDir
operator|+
literal|"/"
operator|+
name|TaskTracker
operator|.
name|getLocalTaskDir
argument_list|(
name|userName
argument_list|,
name|id
operator|.
name|toString
argument_list|()
argument_list|,
name|taskAttID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|filesStatus
operator|=
name|ttClient
operator|.
name|listStatus
argument_list|(
name|localTaskDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|filesStatus
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|isTempFolderExists
operator|=
literal|true
expr_stmt|;
name|NetworkedJob
name|networkJob
init|=
operator|new
name|JobClient
operator|.
name|NetworkedJob
argument_list|(
name|jInfo
operator|.
name|getStatus
argument_list|()
argument_list|,
name|jobClient
operator|.
name|cluster
argument_list|)
decl_stmt|;
name|networkJob
operator|.
name|killTask
argument_list|(
name|taskAttID
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Task Attempt directory "
operator|+
name|taskAttID
operator|+
literal|" has not been found while task was running."
argument_list|,
name|isTempFolderExists
argument_list|)
expr_stmt|;
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|tID
argument_list|)
expr_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|counter
operator|<
literal|60
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|tID
argument_list|)
expr_stmt|;
name|filesStatus
operator|=
name|ttClient
operator|.
name|listStatus
argument_list|(
name|localTaskDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|filesStatus
operator|.
name|length
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|counter
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Task attempt temporary folder has not been cleaned."
argument_list|,
name|isTempFolderExists
operator|&&
name|filesStatus
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|counter
operator|<
literal|30
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|tID
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|tID
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task status has not been changed to KILLED."
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|,
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanup (Path dir, Configuration conf)
specifier|private
name|void
name|cleanup
parameter_list|(
name|Path
name|dir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|dir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createInput (Path inDir, Configuration conf)
specifier|private
name|void
name|createInput
parameter_list|(
name|Path
name|inDir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|input
init|=
literal|"Hadoop is framework for data intensive distributed "
operator|+
literal|"applications.\n"
operator|+
literal|"Hadoop enables applications to work with thousands of nodes."
decl_stmt|;
name|FileSystem
name|fs
init|=
name|inDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create the input directory:"
operator|+
name|inDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|fs
operator|.
name|setPermission
argument_list|(
name|inDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|,
name|FsAction
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"data.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
literal|1000
operator|*
literal|3000
condition|)
block|{
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verifying whether task temporary output directory is cleaned up or not    * after failing the task.    */
annotation|@
name|Test
DECL|method|testDirCleanupAfterTaskFailed ()
specifier|public
name|void
name|testDirCleanupAfterTaskFailed
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TTClient
name|ttClient
init|=
literal|null
decl_stmt|;
name|FileStatus
name|filesStatus
index|[]
init|=
literal|null
decl_stmt|;
name|String
name|localTaskDir
init|=
literal|null
decl_stmt|;
name|TaskInfo
name|taskInfo
init|=
literal|null
decl_stmt|;
name|TaskID
name|tID
init|=
literal|null
decl_stmt|;
name|boolean
name|isTempFolderExists
init|=
literal|false
decl_stmt|;
name|Path
name|inputDir
init|=
operator|new
name|Path
argument_list|(
literal|"input"
argument_list|)
decl_stmt|;
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
literal|"output"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|JobConf
name|jconf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jconf
operator|.
name|setJobName
argument_list|(
literal|"Task Failed job"
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setJarByClass
argument_list|(
name|UtilsForTests
operator|.
name|class
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setMapperClass
argument_list|(
name|FailedMapperClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|setMaxMapAttempts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cleanup
argument_list|(
name|inputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cleanup
argument_list|(
name|outputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|createInput
argument_list|(
name|inputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jconf
argument_list|,
name|inputDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jconf
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
name|RunningJob
name|runJob
init|=
name|jobClient
operator|.
name|submitJob
argument_list|(
name|jconf
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|runJob
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobInfo
name|jInfo
init|=
name|remoteJTClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|counter
operator|<
literal|60
condition|)
block|{
if|if
condition|(
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
break|break;
block|}
else|else
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|remoteJTClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job has not been started for 1 min."
argument_list|,
name|counter
operator|!=
literal|60
argument_list|)
expr_stmt|;
name|JobStatus
index|[]
name|jobStatus
init|=
name|jobClient
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
name|jobStatus
index|[
literal|0
index|]
operator|.
name|getUsername
argument_list|()
decl_stmt|;
name|TaskInfo
index|[]
name|taskInfos
init|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskInfo
name|taskinfo
range|:
name|taskInfos
control|)
block|{
if|if
condition|(
operator|!
name|taskinfo
operator|.
name|isSetupOrCleanup
argument_list|()
condition|)
block|{
name|taskInfo
operator|=
name|taskinfo
expr_stmt|;
break|break;
block|}
block|}
name|tID
operator|=
name|TaskID
operator|.
name|downgrade
argument_list|(
name|taskInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|FinishTaskControlAction
name|action
init|=
operator|new
name|FinishTaskControlAction
argument_list|(
name|tID
argument_list|)
decl_stmt|;
name|String
index|[]
name|taskTrackers
init|=
name|taskInfo
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|counter
operator|<
literal|30
condition|)
block|{
if|if
condition|(
name|taskTrackers
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|taskInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|taskTrackers
operator|=
name|taskInfo
operator|.
name|getTaskTrackers
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Task tracker not found."
argument_list|,
name|taskTrackers
operator|.
name|length
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|String
name|hostName
init|=
name|taskTrackers
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|hostName
operator|=
name|hostName
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|ttClient
operator|=
name|cluster
operator|.
name|getTTClient
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|ttClient
operator|.
name|getProxy
argument_list|()
operator|.
name|sendAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|counter
operator|<
literal|60
condition|)
block|{
if|if
condition|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRunState
argument_list|()
operator|==
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
break|break;
block|}
block|}
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|taskInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Task has not been started for 1 min."
argument_list|,
name|counter
operator|!=
literal|60
argument_list|)
expr_stmt|;
name|String
name|localDirs
index|[]
init|=
name|ttClient
operator|.
name|getMapredLocalDirs
argument_list|()
decl_stmt|;
name|TaskAttemptID
name|taskAttID
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|tID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|localTaskDir
operator|=
name|localDir
operator|+
literal|"/"
operator|+
name|TaskTracker
operator|.
name|getLocalTaskDir
argument_list|(
name|userName
argument_list|,
name|id
operator|.
name|toString
argument_list|()
argument_list|,
name|taskAttID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|filesStatus
operator|=
name|ttClient
operator|.
name|listStatus
argument_list|(
name|localTaskDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|filesStatus
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|isTempFolderExists
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|taskInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Task Attempt directory "
operator|+
name|taskAttID
operator|+
literal|" has not been found while task was running."
argument_list|,
name|isTempFolderExists
argument_list|)
expr_stmt|;
name|counter
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|counter
operator|<
literal|30
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|taskInfo
operator|=
name|remoteJTClient
operator|.
name|getTaskInfo
argument_list|(
name|tID
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Task status has not been changed to FAILED."
argument_list|,
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
index|[
literal|0
index|]
operator|.
name|getRunState
argument_list|()
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|filesStatus
operator|=
name|ttClient
operator|.
name|listStatus
argument_list|(
name|localTaskDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Temporary folder has not been cleanup."
argument_list|,
name|filesStatus
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|class|FailedMapperClass
specifier|public
specifier|static
class|class
name|FailedMapperClass
implements|implements
name|Mapper
argument_list|<
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{     }
DECL|method|map ( NullWritable key, NullWritable value, OutputCollector<NullWritable, NullWritable> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|NullWritable
name|key
parameter_list|,
name|NullWritable
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|NullWritable
argument_list|,
name|NullWritable
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|counter
operator|<
literal|240
condition|)
block|{
name|UtilsForTests
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|==
literal|240
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
annotation|@
name|Test
comment|/**    * This tests verification of job killing by killing of all task     * attempts of a particular task    * @param none    * @return void    */
DECL|method|testAllTaskAttemptKill ()
specifier|public
name|void
name|testAllTaskAttemptKill
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|JobStatus
index|[]
name|jobStatus
init|=
literal|null
decl_stmt|;
name|SleepJob
name|job
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|slpJob
init|=
name|job
operator|.
name|createJob
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|40000
argument_list|,
literal|1000
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|JobConf
name|jconf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Submitting the job
name|slpJob
operator|.
name|submit
argument_list|()
expr_stmt|;
name|RunningJob
name|rJob
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getClient
argument_list|()
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|slpJob
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|MAX_MAP_TASK_ATTEMPTS
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|jconf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_MAX_ATTEMPTS
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MAX_MAP_TASK_ATTEMPTS is : "
operator|+
name|MAX_MAP_TASK_ATTEMPTS
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|MAX_MAP_TASK_ATTEMPTS
operator|>
literal|0
argument_list|)
expr_stmt|;
name|TTClient
name|tClient
init|=
literal|null
decl_stmt|;
name|TTClient
index|[]
name|ttClients
init|=
literal|null
decl_stmt|;
name|JobInfo
name|jInfo
init|=
name|remoteJTClient
operator|.
name|getJobInfo
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Assert if jobInfo is null
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the job to start running.
while|while
condition|(
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
empty_stmt|;
name|jInfo
operator|=
name|remoteJTClient
operator|.
name|getJobInfo
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Temporarily store the jobid to use it later for comparision.
name|JobID
name|jobidStore
init|=
name|rJob
operator|.
name|getID
argument_list|()
decl_stmt|;
name|jobidStore
operator|=
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobidStore
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"job id is :"
operator|+
name|jobidStore
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TaskInfo
index|[]
name|taskInfos
init|=
literal|null
decl_stmt|;
comment|// After making sure that the job is running,
comment|// the test execution has to make sure that
comment|// at least one task has started running before continuing.
name|boolean
name|runningCount
init|=
literal|false
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
name|taskInfos
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
operator|.
name|getTaskInfo
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|runningCount
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|taskInfos
control|)
block|{
name|TaskStatus
index|[]
name|taskStatuses
init|=
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|taskStatuses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"taskStatuses[0].getRunState() is :"
operator|+
name|taskStatuses
index|[
literal|0
index|]
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskStatuses
index|[
literal|0
index|]
operator|.
name|getRunState
argument_list|()
operator|==
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
name|runningCount
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping 5 seconds"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|count
operator|++
expr_stmt|;
comment|// If the count goes beyond a point, then break; This is to avoid
comment|// infinite loop under unforeseen circumstances. Testcase will anyway
comment|// fail later.
if|if
condition|(
name|count
operator|>
literal|10
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Since the sleep count has reached beyond a point"
operator|+
literal|"failing at this point"
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|runningCount
condition|)
do|;
comment|// This whole module is about getting the task Attempt id
comment|// of one task and killing it MAX_MAP_TASK_ATTEMPTS times,
comment|// whenever it re-attempts to run.
name|String
name|taskIdKilled
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_MAP_TASK_ATTEMPTS
condition|;
name|i
operator|++
control|)
block|{
name|taskInfos
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
operator|.
name|getTaskInfo
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|taskInfos
control|)
block|{
name|TaskAttemptID
name|taskAttemptID
decl_stmt|;
if|if
condition|(
operator|!
name|taskInfo
operator|.
name|isSetupOrCleanup
argument_list|()
condition|)
block|{
comment|// This is the task which is going to be killed continously in
comment|// all its task attempts.The first task is getting picked up.
name|TaskID
name|taskid
init|=
name|TaskID
operator|.
name|downgrade
argument_list|(
name|taskInfo
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"taskid is :"
operator|+
name|taskid
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|taskIdKilled
operator|=
name|taskid
operator|.
name|toString
argument_list|()
expr_stmt|;
name|taskAttemptID
operator|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskid
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"taskAttemptid going to be killed is : "
operator|+
name|taskAttemptID
argument_list|)
expr_stmt|;
operator|(
operator|new
name|JobClient
operator|.
name|NetworkedJob
argument_list|(
name|jInfo
operator|.
name|getStatus
argument_list|()
argument_list|,
name|jobClient
operator|.
name|cluster
argument_list|)
operator|)
operator|.
name|killTask
argument_list|(
name|taskAttemptID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkTaskCompletionEvent
argument_list|(
name|taskAttemptID
argument_list|,
name|jInfo
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
if|if
condition|(
name|taskIdKilled
operator|.
name|equals
argument_list|(
name|taskid
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|taskAttemptID
operator|=
operator|new
name|TaskAttemptID
argument_list|(
name|taskid
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"taskAttemptid going to be killed is : "
operator|+
name|taskAttemptID
argument_list|)
expr_stmt|;
operator|(
operator|new
name|JobClient
operator|.
name|NetworkedJob
argument_list|(
name|jInfo
operator|.
name|getStatus
argument_list|()
argument_list|,
name|jobClient
operator|.
name|cluster
argument_list|)
operator|)
operator|.
name|killTask
argument_list|(
name|taskAttemptID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkTaskCompletionEvent
argument_list|(
name|taskAttemptID
argument_list|,
name|jInfo
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
comment|// Making sure that the job is complete.
while|while
condition|(
name|jInfo
operator|!=
literal|null
operator|&&
operator|!
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|isJobComplete
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|remoteJTClient
operator|.
name|getJobInfo
argument_list|(
name|rJob
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Making sure that the correct jobstatus is got from all the jobs
name|jobStatus
operator|=
name|jobClient
operator|.
name|getAllJobs
argument_list|()
expr_stmt|;
name|JobStatus
name|jobStatusFound
init|=
literal|null
decl_stmt|;
for|for
control|(
name|JobStatus
name|jobStatusTmp
range|:
name|jobStatus
control|)
block|{
if|if
condition|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobStatusTmp
operator|.
name|getJobID
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|jobidStore
argument_list|)
condition|)
block|{
name|jobStatusFound
operator|=
name|jobStatusTmp
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"jobStatus found is :"
operator|+
name|jobStatusFound
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Making sure that the job has FAILED
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The job should have failed at this stage"
argument_list|,
name|JobStatus
operator|.
name|FAILED
argument_list|,
name|jobStatusFound
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// This method checks if task Attemptid occurs in the list
comment|// of tasks that are completed (killed) for a job.This is
comment|// required because after issuing a kill comamnd, the task
comment|// has to be killed and appear in the taskCompletion event.
comment|// After this a new task attempt will start running in a
comment|// matter of few seconds.
DECL|method|checkTaskCompletionEvent ( TaskAttemptID taskAttemptID, JobInfo jInfo)
specifier|public
name|void
name|checkTaskCompletionEvent
parameter_list|(
name|TaskAttemptID
name|taskAttemptID
parameter_list|,
name|JobInfo
name|jInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|match
condition|)
block|{
name|TaskCompletionEvent
index|[]
name|taskCompletionEvents
init|=
operator|new
name|JobClient
operator|.
name|NetworkedJob
argument_list|(
name|jInfo
operator|.
name|getStatus
argument_list|()
argument_list|,
name|jobClient
operator|.
name|cluster
argument_list|)
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|taskCompletionEvent
range|:
name|taskCompletionEvents
control|)
block|{
if|if
condition|(
operator|(
name|taskCompletionEvent
operator|.
name|getTaskAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|taskAttemptID
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
comment|// Sleeping for 10 seconds giving time for the next task
comment|// attempt to run
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread is sleeping for 10 seconds"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
comment|// If the count goes beyond a point, then break; This is to avoid
comment|// infinite loop under unforeseen circumstances.Testcase will anyway
comment|// fail later.
if|if
condition|(
name|count
operator|>
literal|10
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Since the task attemptid is not appearing in the"
operator|+
literal|"TaskCompletionEvent, it seems this task attempt was not killed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

