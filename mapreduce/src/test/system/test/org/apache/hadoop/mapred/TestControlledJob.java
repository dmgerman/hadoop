begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|FinishTaskControlAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|MRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TTClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestControlledJob
specifier|public
class|class
name|TestControlledJob
block|{
DECL|field|cluster
specifier|private
name|MRCluster
name|cluster
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestControlledJob
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TestControlledJob ()
specifier|public
name|TestControlledJob
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|MRCluster
operator|.
name|createCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testControlledJob ()
specifier|public
name|void
name|testControlledJob
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|cluster
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|JTProtocol
name|wovenClient
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|FinishTaskControlAction
operator|.
name|configureControlActionForJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SleepJob
name|job
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|slpJob
init|=
name|job
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|slpJob
operator|.
name|submit
argument_list|()
expr_stmt|;
name|JobClient
name|client
init|=
name|cluster
operator|.
name|getJTClient
argument_list|()
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|RunningJob
name|rJob
init|=
name|client
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|slpJob
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JobID
name|id
init|=
name|rJob
operator|.
name|getID
argument_list|()
decl_stmt|;
name|JobInfo
name|jInfo
init|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
while|while
condition|(
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting till job starts running one map"
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|jInfo
operator|.
name|runningMaps
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for another cycle to "
operator|+
literal|"check if the maps dont finish off"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|jInfo
operator|.
name|runningMaps
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TaskInfo
index|[]
name|taskInfos
init|=
name|wovenClient
operator|.
name|getTaskInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|TaskInfo
name|info
range|:
name|taskInfos
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"constructing control action to signal task to finish"
argument_list|)
expr_stmt|;
name|FinishTaskControlAction
name|action
init|=
operator|new
name|FinishTaskControlAction
argument_list|(
name|TaskID
operator|.
name|downgrade
argument_list|(
name|info
operator|.
name|getTaskID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|TTClient
name|cli
range|:
name|cluster
operator|.
name|getTTClients
argument_list|()
control|)
block|{
name|cli
operator|.
name|getProxy
argument_list|()
operator|.
name|sendAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
name|jInfo
operator|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|jInfo
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
operator|!
name|jInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|isJobComplete
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|jInfo
operator|=
name|wovenClient
operator|.
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|jInfo
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|i
operator|>
literal|40
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Controlled Job with ID : "
operator|+
name|jInfo
operator|.
name|getID
argument_list|()
operator|+
literal|" has not completed in 40 seconds after signalling."
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Job sucessfully completed after signalling!!!!"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

