begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TaskInfo
import|;
end_import

begin_comment
comment|/**  * Concrete class to expose out the task related information to the Clients from  * the JobTracker. Look at {@link TaskInfo} for further details.  */
end_comment

begin_class
DECL|class|TaskInfoImpl
class|class
name|TaskInfoImpl
implements|implements
name|TaskInfo
block|{
DECL|field|progress
specifier|private
name|double
name|progress
decl_stmt|;
DECL|field|taskID
specifier|private
name|TaskID
name|taskID
decl_stmt|;
DECL|field|killedAttempts
specifier|private
name|int
name|killedAttempts
decl_stmt|;
DECL|field|failedAttempts
specifier|private
name|int
name|failedAttempts
decl_stmt|;
DECL|field|runningAttempts
specifier|private
name|int
name|runningAttempts
decl_stmt|;
DECL|field|taskStatus
specifier|private
name|TaskStatus
index|[]
name|taskStatus
decl_stmt|;
DECL|field|setupOrCleanup
specifier|private
name|boolean
name|setupOrCleanup
decl_stmt|;
DECL|field|taskTrackers
specifier|private
name|String
index|[]
name|taskTrackers
decl_stmt|;
DECL|method|TaskInfoImpl ()
specifier|public
name|TaskInfoImpl
parameter_list|()
block|{
name|taskID
operator|=
operator|new
name|TaskID
argument_list|()
expr_stmt|;
block|}
DECL|method|TaskInfoImpl ( TaskID taskID, double progress, int runningAttempts, int killedAttempts, int failedAttempts, TaskStatus[] taskStatus, boolean setupOrCleanup, String[] taskTrackers)
specifier|public
name|TaskInfoImpl
parameter_list|(
name|TaskID
name|taskID
parameter_list|,
name|double
name|progress
parameter_list|,
name|int
name|runningAttempts
parameter_list|,
name|int
name|killedAttempts
parameter_list|,
name|int
name|failedAttempts
parameter_list|,
name|TaskStatus
index|[]
name|taskStatus
parameter_list|,
name|boolean
name|setupOrCleanup
parameter_list|,
name|String
index|[]
name|taskTrackers
parameter_list|)
block|{
name|this
operator|.
name|progress
operator|=
name|progress
expr_stmt|;
name|this
operator|.
name|taskID
operator|=
name|taskID
expr_stmt|;
name|this
operator|.
name|killedAttempts
operator|=
name|killedAttempts
expr_stmt|;
name|this
operator|.
name|failedAttempts
operator|=
name|failedAttempts
expr_stmt|;
name|this
operator|.
name|runningAttempts
operator|=
name|runningAttempts
expr_stmt|;
if|if
condition|(
name|taskStatus
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|taskStatus
operator|=
name|taskStatus
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|taskID
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|this
operator|.
name|taskStatus
operator|=
operator|new
name|MapTaskStatus
index|[]
block|{}
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|taskStatus
operator|=
operator|new
name|ReduceTaskStatus
index|[]
block|{}
expr_stmt|;
block|}
block|}
name|this
operator|.
name|setupOrCleanup
operator|=
name|setupOrCleanup
expr_stmt|;
name|this
operator|.
name|taskTrackers
operator|=
name|taskTrackers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|double
name|getProgress
parameter_list|()
block|{
return|return
name|progress
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskID ()
specifier|public
name|TaskID
name|getTaskID
parameter_list|()
block|{
return|return
name|taskID
return|;
block|}
annotation|@
name|Override
DECL|method|numKilledAttempts ()
specifier|public
name|int
name|numKilledAttempts
parameter_list|()
block|{
return|return
name|killedAttempts
return|;
block|}
annotation|@
name|Override
DECL|method|numFailedAttempts ()
specifier|public
name|int
name|numFailedAttempts
parameter_list|()
block|{
return|return
name|failedAttempts
return|;
block|}
annotation|@
name|Override
DECL|method|numRunningAttempts ()
specifier|public
name|int
name|numRunningAttempts
parameter_list|()
block|{
return|return
name|runningAttempts
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|taskID
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|progress
operator|=
name|in
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|runningAttempts
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|killedAttempts
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|failedAttempts
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|taskID
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|taskStatus
operator|=
operator|new
name|MapTaskStatus
index|[
name|size
index|]
expr_stmt|;
block|}
else|else
block|{
name|taskStatus
operator|=
operator|new
name|ReduceTaskStatus
index|[
name|size
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|taskID
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|taskStatus
index|[
name|i
index|]
operator|=
operator|new
name|MapTaskStatus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|taskStatus
index|[
name|i
index|]
operator|=
operator|new
name|ReduceTaskStatus
argument_list|()
expr_stmt|;
block|}
name|taskStatus
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|taskStatus
index|[
name|i
index|]
operator|.
name|setTaskTracker
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setupOrCleanup
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|size
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|taskTrackers
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|taskTrackers
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|taskID
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|runningAttempts
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|killedAttempts
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|failedAttempts
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|taskStatus
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskStatus
name|t
range|:
name|taskStatus
control|)
block|{
name|t
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|t
operator|.
name|getTaskTracker
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|setupOrCleanup
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|taskTrackers
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tt
range|:
name|taskTrackers
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|tt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getTaskStatus ()
specifier|public
name|TaskStatus
index|[]
name|getTaskStatus
parameter_list|()
block|{
return|return
name|taskStatus
return|;
block|}
annotation|@
name|Override
DECL|method|isSetupOrCleanup ()
specifier|public
name|boolean
name|isSetupOrCleanup
parameter_list|()
block|{
return|return
name|setupOrCleanup
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskTrackers ()
specifier|public
name|String
index|[]
name|getTaskTrackers
parameter_list|()
block|{
return|return
name|taskTrackers
return|;
block|}
block|}
end_class

end_unit

