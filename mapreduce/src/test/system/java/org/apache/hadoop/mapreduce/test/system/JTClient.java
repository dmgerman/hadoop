begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.test.system
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RunningJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|RemoteProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * JobTracker client for system tests.  */
end_comment

begin_class
DECL|class|JTClient
specifier|public
class|class
name|JTClient
extends|extends
name|MRDaemonClient
argument_list|<
name|JTProtocol
argument_list|>
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JTClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
name|JobClient
name|client
decl_stmt|;
DECL|field|HADOOP_JT_OPTS_ENV
specifier|private
specifier|static
specifier|final
name|String
name|HADOOP_JT_OPTS_ENV
init|=
literal|"HADOOP_JOBTRACKER_OPTS"
decl_stmt|;
comment|/**    * Create JobTracker client to talk to {@link JobTracker} specified in the    * configuration.<br/>    *     * @param conf    *          configuration used to create a client.    * @param daemon    *          the process management instance for the {@link JobTracker}    * @throws IOException    */
DECL|method|JTClient (Configuration conf, RemoteProcess daemon)
specifier|public
name|JTClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RemoteProcess
name|daemon
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|daemon
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|connect ()
specifier|public
specifier|synchronized
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isConnected
argument_list|()
condition|)
block|{
return|return;
block|}
name|client
operator|=
operator|new
name|JobClient
argument_list|(
operator|new
name|JobConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setConnected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|disconnect ()
specifier|public
specifier|synchronized
name|void
name|disconnect
parameter_list|()
throws|throws
name|IOException
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProxy ()
specifier|public
specifier|synchronized
name|JTProtocol
name|getProxy
parameter_list|()
block|{
return|return
operator|(
name|JTProtocol
operator|)
name|client
operator|.
name|getProtocol
argument_list|()
return|;
block|}
comment|/**    * Gets the {@link JobClient} which can be used for job submission. JobClient    * which is returned would not contain the decorated API's. To be used for    * submitting of the job.    *     * @return client handle to the JobTracker    */
DECL|method|getClient ()
specifier|public
name|JobClient
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
comment|/**    * Gets the configuration which the JobTracker is currently running.<br/>    *     * @return configuration of JobTracker.    *     * @throws IOException    */
DECL|method|getJobTrackerConfig ()
specifier|public
name|Configuration
name|getJobTrackerConfig
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|()
operator|.
name|getDaemonConf
argument_list|()
return|;
block|}
comment|/**    * Kills the job.<br/>    *     * @param id    *          of the job to be killed.    * @throws IOException    */
DECL|method|killJob (JobID id)
specifier|public
name|void
name|killJob
parameter_list|(
name|JobID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|getClient
argument_list|()
operator|.
name|killJob
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Verification API to check running jobs and running job states. users have    * to ensure that their jobs remain running state while verification is    * called.<br/>    *     * @param jobId    *          of the job to be verified.    *     * @throws Exception    */
DECL|method|verifyRunningJob (JobID jobId)
specifier|public
name|void
name|verifyRunningJob
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|Exception
block|{   }
DECL|method|getJobInfo (JobID jobId)
specifier|private
name|JobInfo
name|getJobInfo
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|JobInfo
name|info
init|=
name|getProxy
argument_list|()
operator|.
name|getJobInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|&&
operator|!
name|getProxy
argument_list|()
operator|.
name|isJobRetired
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Job id : "
operator|+
name|jobId
operator|+
literal|" has never been submitted to JT"
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
comment|/**    * Verification API to wait till job retires and verify all the retired state    * is correct.<br/>    *     * @param job    *          of the job used for completion    * @return job handle    * @throws Exception    */
DECL|method|submitAndVerifyJob (Job job)
specifier|public
name|Job
name|submitAndVerifyJob
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|Exception
block|{
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|JobID
name|jobId
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|verifyRunningJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|verifyCompletedJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
comment|/**    * Verification API to check if the job completion state is correct.<br/>    *     * @param id    *          id of the job to be verified.    */
DECL|method|verifyCompletedJob (JobID id)
specifier|public
name|void
name|verifyCompletedJob
parameter_list|(
name|JobID
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|RunningJob
name|rJob
init|=
name|getClient
argument_list|()
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|rJob
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for job :"
operator|+
name|id
operator|+
literal|" to retire"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|rJob
operator|=
name|getClient
argument_list|()
operator|.
name|getJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verifyJobDetails
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|JobInfo
name|jobInfo
init|=
name|getJobInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobInfo
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
operator|!
name|jobInfo
operator|.
name|isHistoryFileCopied
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|id
operator|+
literal|" waiting for history file to copied"
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
name|getJobInfo
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobInfo
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
name|verifyJobHistory
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verification API to check if the job details are semantically correct.<br/>    *     * @param jobId    *          jobID of the job    * @return true if all the job verifications are verified to be true    * @throws Exception    */
DECL|method|verifyJobDetails (JobID jobId)
specifier|public
name|void
name|verifyJobDetails
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|Exception
block|{
comment|// wait till the setup is launched and finished.
name|JobInfo
name|jobInfo
init|=
name|getJobInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for the setup to be finished"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|jobInfo
operator|.
name|isSetupFinished
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
name|getJobInfo
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobInfo
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
comment|// verify job id.
name|assertTrue
argument_list|(
name|jobId
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"job_"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verified job id and is : "
operator|+
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify the number of map/reduce tasks.
name|verifyNumTasks
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
comment|// should verify job progress.
name|verifyJobProgress
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
name|getJobInfo
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|jobInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|SUCCEEDED
condition|)
block|{
comment|// verify if map/reduce progress reached 1.
name|jobInfo
operator|=
name|getJobInfo
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|jobInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|mapProgress
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|jobInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|reduceProgress
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
comment|// verify successful finish of tasks.
name|verifyAllTasksSuccess
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jobInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|isJobComplete
argument_list|()
condition|)
block|{
comment|// verify if the cleanup is launched.
name|jobInfo
operator|=
name|getJobInfo
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|assertTrue
argument_list|(
name|jobInfo
operator|.
name|isCleanupLaunched
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verified launching of cleanup"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyAllTasksSuccess (JobID jobId)
specifier|public
name|void
name|verifyAllTasksSuccess
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|JobInfo
name|jobInfo
init|=
name|getJobInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TaskInfo
index|[]
name|taskInfos
init|=
name|getProxy
argument_list|()
operator|.
name|getTaskInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskInfos
operator|.
name|length
operator|==
literal|0
operator|&&
name|getProxy
argument_list|()
operator|.
name|isJobRetired
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job has been retired from JT memory : "
operator|+
name|jobId
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|TaskInfo
name|taskInfo
range|:
name|taskInfos
control|)
block|{
name|TaskStatus
index|[]
name|taskStatus
init|=
name|taskInfo
operator|.
name|getTaskStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|taskStatus
operator|!=
literal|null
operator|&&
name|taskStatus
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|taskStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|equals
argument_list|(
name|taskStatus
index|[
name|i
index|]
operator|.
name|getRunState
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|assertFalse
argument_list|(
name|i
operator|==
name|taskStatus
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"verified that none of the tasks failed."
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyJobProgress (JobID jobId)
specifier|public
name|void
name|verifyJobProgress
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|JobInfo
name|jobInfo
decl_stmt|;
name|jobInfo
operator|=
name|getJobInfo
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|assertTrue
argument_list|(
name|jobInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|mapProgress
argument_list|()
operator|>=
literal|0
operator|&&
name|jobInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|mapProgress
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verified map progress and is "
operator|+
name|jobInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|mapProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|jobInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|reduceProgress
argument_list|()
operator|>=
literal|0
operator|&&
name|jobInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|reduceProgress
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verified reduce progress and is "
operator|+
name|jobInfo
operator|.
name|getStatus
argument_list|()
operator|.
name|reduceProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNumTasks (JobID jobId)
specifier|public
name|void
name|verifyNumTasks
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|JobInfo
name|jobInfo
decl_stmt|;
name|jobInfo
operator|=
name|getJobInfo
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|assertEquals
argument_list|(
name|jobInfo
operator|.
name|numMaps
argument_list|()
argument_list|,
operator|(
name|jobInfo
operator|.
name|runningMaps
argument_list|()
operator|+
name|jobInfo
operator|.
name|waitingMaps
argument_list|()
operator|+
name|jobInfo
operator|.
name|finishedMaps
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verified number of map tasks and is "
operator|+
name|jobInfo
operator|.
name|numMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|jobInfo
operator|.
name|numReduces
argument_list|()
argument_list|,
operator|(
name|jobInfo
operator|.
name|runningReduces
argument_list|()
operator|+
name|jobInfo
operator|.
name|waitingReduces
argument_list|()
operator|+
name|jobInfo
operator|.
name|finishedReduces
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"verified number of reduce tasks and is "
operator|+
name|jobInfo
operator|.
name|numReduces
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verification API to check if the job history file is semantically correct.<br/>    *     *     * @param jobId    *          of the job to be verified.    * @throws IOException    */
DECL|method|verifyJobHistory (JobID jobId)
specifier|public
name|void
name|verifyJobHistory
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|JobInfo
name|info
init|=
name|getJobInfo
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|String
name|url
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job has been retired from JT memory : "
operator|+
name|jobId
argument_list|)
expr_stmt|;
name|url
operator|=
name|getProxy
argument_list|()
operator|.
name|getJobHistoryLocationForRetiredJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
name|info
operator|.
name|getHistoryUrl
argument_list|()
expr_stmt|;
block|}
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file:/"
argument_list|)
condition|)
block|{
name|FileStatus
name|st
init|=
name|getFileStatus
argument_list|(
name|url
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Job History file for "
operator|+
name|jobId
operator|+
literal|" not present "
operator|+
literal|"when job is completed"
argument_list|,
name|st
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileStatus
name|st
init|=
name|getFileStatus
argument_list|(
name|url
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Job History file for "
operator|+
name|jobId
operator|+
literal|" not present "
operator|+
literal|"when job is completed"
argument_list|,
name|st
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Verified the job history for the jobId : "
operator|+
name|jobId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHadoopOptsEnvName ()
specifier|public
name|String
name|getHadoopOptsEnvName
parameter_list|()
block|{
return|return
name|HADOOP_JT_OPTS_ENV
return|;
block|}
comment|/**    * Concrete implementation of abstract super class method    *    * @param attributeName name of the attribute to be retrieved    * @return Object value of the given attribute    * @throws IOException is thrown in case of communication errors    */
annotation|@
name|Override
DECL|method|getDaemonAttribute (String attributeName)
specifier|public
name|Object
name|getDaemonAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getJmxAttribute
argument_list|(
literal|"JobTracker"
argument_list|,
literal|"JobTrackerInfo"
argument_list|,
name|attributeName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

