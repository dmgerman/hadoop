begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServicePlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestJobTrackerPlugins
specifier|public
class|class
name|TestJobTrackerPlugins
extends|extends
name|TestCase
block|{
DECL|class|FakeServicePlugin
specifier|static
class|class
name|FakeServicePlugin
implements|implements
name|ServicePlugin
block|{
DECL|field|instance
specifier|private
specifier|static
name|FakeServicePlugin
name|instance
decl_stmt|;
DECL|method|getInstance ()
specifier|public
specifier|static
name|FakeServicePlugin
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
DECL|field|service
specifier|private
name|Object
name|service
decl_stmt|;
DECL|field|stopped
specifier|private
name|boolean
name|stopped
decl_stmt|;
DECL|method|getService ()
specifier|public
name|Object
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
DECL|method|isStopped ()
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stopped
return|;
block|}
DECL|method|FakeServicePlugin ()
specifier|public
name|FakeServicePlugin
parameter_list|()
block|{
comment|// store static reference to instance so we can retrieve it in the test
name|instance
operator|=
name|this
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start (Object service)
specifier|public
name|void
name|start
parameter_list|(
name|Object
name|service
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|JTConfig
operator|.
name|JT_PLUGINS
argument_list|,
name|FakeServicePlugin
operator|.
name|class
argument_list|,
name|ServicePlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Plugin not created"
argument_list|,
name|FakeServicePlugin
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|JobTracker
name|jobTracker
init|=
name|JobTracker
operator|.
name|startTracker
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Plugin created"
argument_list|,
name|FakeServicePlugin
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Service is jobTracker"
argument_list|,
name|FakeServicePlugin
operator|.
name|getInstance
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|,
name|jobTracker
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Plugin not stopped"
argument_list|,
name|FakeServicePlugin
operator|.
name|getInstance
argument_list|()
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Plugin stopped"
argument_list|,
name|FakeServicePlugin
operator|.
name|getInstance
argument_list|()
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

