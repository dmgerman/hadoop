begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_comment
comment|/**  * {@link SimulatorEventQueue} maintains a priority queue of events scheduled in the  * future in virtual time. Events happen in virtual time order. The  * {@link SimulatorEventQueue} has the notion of "currentTime" which is defined as time  * stamp of the last event already handled. An event can be inserted into the  * {@link SimulatorEventQueue}, and its time stamp must be later than "currentTime".  */
end_comment

begin_class
DECL|class|SimulatorEventQueue
specifier|public
class|class
name|SimulatorEventQueue
block|{
DECL|field|EMPTY_EVENTS
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|EMPTY_EVENTS
init|=
operator|new
name|ArrayList
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|lastEvent
specifier|private
name|SimulatorEvent
name|lastEvent
init|=
literal|null
decl_stmt|;
DECL|field|eventCount
specifier|private
name|long
name|eventCount
init|=
literal|0
decl_stmt|;
DECL|field|events
specifier|private
specifier|final
name|PriorityQueue
argument_list|<
name|SimulatorEvent
argument_list|>
name|events
init|=
operator|new
name|PriorityQueue
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|(
literal|1
argument_list|,
operator|new
name|Comparator
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SimulatorEvent
name|o1
parameter_list|,
name|SimulatorEvent
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|getTimeStamp
argument_list|()
operator|<
name|o2
operator|.
name|getTimeStamp
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|getTimeStamp
argument_list|()
operator|>
name|o2
operator|.
name|getTimeStamp
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|getInternalCount
argument_list|()
operator|<
name|o2
operator|.
name|getInternalCount
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|getInternalCount
argument_list|()
operator|>
name|o2
operator|.
name|getInternalCount
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|/**    * Get the next earliest {@link SimulatorEvent} to be handled. This {@link SimulatorEvent} has    * the smallest time stamp among all {@link SimulatorEvent}s currently scheduled in the    * {@link SimulatorEventQueue}.    *     * @return the next {@link SimulatorEvent} to be handled. Or null if no more events.    */
DECL|method|get ()
specifier|public
name|SimulatorEvent
name|get
parameter_list|()
block|{
name|lastEvent
operator|=
name|events
operator|.
name|poll
argument_list|()
expr_stmt|;
return|return
name|lastEvent
return|;
block|}
comment|/**    * Add a single {@link SimulatorEvent} to the {@link SimulatorEventQueue}.    *     * @param event    *          the {@link SimulatorEvent}    * @return true if the event is added to the queue (to follow the same    *         convention as Collection.add()).    */
DECL|method|add (SimulatorEvent event)
specifier|public
name|boolean
name|add
parameter_list|(
name|SimulatorEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|lastEvent
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getTimeStamp
argument_list|()
operator|<
name|lastEvent
operator|.
name|getTimeStamp
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Event happens in the past: "
operator|+
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
name|event
operator|.
name|setInternalCount
argument_list|(
name|eventCount
operator|++
argument_list|)
expr_stmt|;
return|return
name|events
operator|.
name|add
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|/**    * Adding all {@link SimulatorEvent}s.    *     * @param events    *          The container contains all the events to be added.    * @return true if the queue is changed as a result of the call (to follow the    *         same convention as Collection.addAll()).    */
DECL|method|addAll (Collection<? extends SimulatorEvent> events)
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|SimulatorEvent
argument_list|>
name|events
parameter_list|)
block|{
name|long
name|lastTimeStamp
init|=
operator|(
name|lastEvent
operator|==
literal|null
operator|)
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|lastEvent
operator|.
name|getTimeStamp
argument_list|()
decl_stmt|;
for|for
control|(
name|SimulatorEvent
name|e
range|:
name|events
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getTimeStamp
argument_list|()
operator|<
name|lastTimeStamp
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Event happens in the past: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|+
literal|"("
operator|+
name|e
operator|.
name|getTimeStamp
argument_list|()
operator|+
literal|"<"
operator|+
name|lastTimeStamp
argument_list|)
throw|;
block|}
name|e
operator|.
name|setInternalCount
argument_list|(
name|eventCount
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|events
operator|.
name|addAll
argument_list|(
name|events
argument_list|)
return|;
block|}
comment|/**    * Get the current time in the queue. It is defined by time stamp of the last    * event handled.    *     * @return the current time in the queue    */
DECL|method|getCurrentTime ()
specifier|public
name|long
name|getCurrentTime
parameter_list|()
block|{
if|if
condition|(
name|lastEvent
operator|!=
literal|null
condition|)
return|return
name|lastEvent
operator|.
name|getTimeStamp
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
comment|/**    * Get the size of currently scheduled events. Number of events in the system    * is the major scaling factor of the simulator.    *     * @return the size of currently scheduled events    */
DECL|method|getSize ()
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|events
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Get the total number of events handled in a simulation. This is an    * indicator of how large a particular simulation run is.    *     * @return the total number of events handled in a simulation    */
DECL|method|getEventCount ()
specifier|public
name|long
name|getEventCount
parameter_list|()
block|{
return|return
name|eventCount
return|;
block|}
block|}
end_class

end_unit

