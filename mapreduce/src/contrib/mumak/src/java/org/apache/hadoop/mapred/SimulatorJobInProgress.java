begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Pre21JobHistoryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ReduceTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_class
DECL|class|SimulatorJobInProgress
specifier|public
class|class
name|SimulatorJobInProgress
extends|extends
name|JobInProgress
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SimulatorJobInProgress
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// JobStory that contains all information that should be read from the
comment|// cache
DECL|field|jobStory
specifier|private
specifier|final
name|JobStory
name|jobStory
decl_stmt|;
DECL|field|taskSplitMetaInfo
name|TaskSplitMetaInfo
index|[]
name|taskSplitMetaInfo
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|SimulatorJobInProgress (JobID jobid, String jobSubmitDir, JobTracker jobtracker, JobConf default_conf, JobStory jobStory)
specifier|public
name|SimulatorJobInProgress
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|String
name|jobSubmitDir
parameter_list|,
name|JobTracker
name|jobtracker
parameter_list|,
name|JobConf
name|default_conf
parameter_list|,
name|JobStory
name|jobStory
parameter_list|)
block|{
name|super
argument_list|(
name|default_conf
argument_list|)
expr_stmt|;
comment|// jobSetupCleanupNeeded set to false in parent cstr, though
comment|// default is true
name|this
operator|.
name|jobId
operator|=
name|jobid
expr_stmt|;
name|String
name|url
init|=
literal|"http://"
operator|+
name|jobtracker
operator|.
name|getJobTrackerMachine
argument_list|()
operator|+
literal|":"
operator|+
name|jobtracker
operator|.
name|getInfoPort
argument_list|()
operator|+
literal|"/jobdetails.jsp?jobid="
operator|+
name|jobid
decl_stmt|;
name|this
operator|.
name|jobtracker
operator|=
name|jobtracker
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|jobStory
operator|.
name|getJobConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|conf
operator|.
name|getJobPriority
argument_list|()
expr_stmt|;
name|Path
name|jobDir
init|=
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|)
decl_stmt|;
name|this
operator|.
name|jobFile
operator|=
operator|new
name|Path
argument_list|(
name|jobDir
argument_list|,
literal|"job.xml"
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|=
operator|new
name|JobStatus
argument_list|(
name|jobid
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
name|JobStatus
operator|.
name|PREP
argument_list|,
name|priority
argument_list|,
name|conf
operator|.
name|getUser
argument_list|()
argument_list|,
name|conf
operator|.
name|getJobName
argument_list|()
argument_list|,
name|jobFile
operator|.
name|toString
argument_list|()
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|this
operator|.
name|profile
operator|=
operator|new
name|JobProfile
argument_list|(
name|jobStory
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobid
argument_list|,
name|this
operator|.
name|jobFile
operator|.
name|toString
argument_list|()
argument_list|,
name|url
argument_list|,
name|jobStory
operator|.
name|getName
argument_list|()
argument_list|,
name|conf
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|JobTracker
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|status
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|resourceEstimator
operator|=
operator|new
name|ResourceEstimator
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|numMapTasks
operator|=
name|jobStory
operator|.
name|getNumberMaps
argument_list|()
expr_stmt|;
name|this
operator|.
name|numReduceTasks
operator|=
name|jobStory
operator|.
name|getNumberReduces
argument_list|()
expr_stmt|;
name|this
operator|.
name|taskCompletionEvents
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskCompletionEvent
argument_list|>
argument_list|(
name|numMapTasks
operator|+
name|numReduceTasks
operator|+
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapFailuresPercent
operator|=
name|conf
operator|.
name|getMaxMapTaskFailuresPercent
argument_list|()
expr_stmt|;
name|this
operator|.
name|reduceFailuresPercent
operator|=
name|conf
operator|.
name|getMaxReduceTaskFailuresPercent
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxLevel
operator|=
name|jobtracker
operator|.
name|getNumTaskCacheLevels
argument_list|()
expr_stmt|;
name|this
operator|.
name|anyCacheLevel
operator|=
name|this
operator|.
name|maxLevel
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|nonLocalMaps
operator|=
operator|new
name|LinkedList
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nonLocalRunningMaps
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|runningMapCache
operator|=
operator|new
name|IdentityHashMap
argument_list|<
name|Node
argument_list|,
name|Set
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nonRunningReduces
operator|=
operator|new
name|LinkedList
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|runningReduces
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|slowTaskThreshold
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0.0f
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
literal|"mapred.speculative.execution.slowTaskThreshold"
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|speculativeCap
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"mapred.speculative.execution.speculativeCap"
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|this
operator|.
name|slowNodeThreshold
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"mapred.speculative.execution.slowNodeThreshold"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobStory
operator|=
name|jobStory
expr_stmt|;
name|this
operator|.
name|jobHistory
operator|=
name|this
operator|.
name|jobtracker
operator|.
name|getJobHistory
argument_list|()
expr_stmt|;
block|}
comment|// for initTasks, update information from JobStory object
annotation|@
name|Override
DECL|method|initTasks ()
specifier|public
specifier|synchronized
name|void
name|initTasks
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|loggingEnabled
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|loggingEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"(initTasks@SJIP) Starting Initialization for "
operator|+
name|jobId
argument_list|)
expr_stmt|;
block|}
name|numMapTasks
operator|=
name|jobStory
operator|.
name|getNumberMaps
argument_list|()
expr_stmt|;
name|numReduceTasks
operator|=
name|jobStory
operator|.
name|getNumberReduces
argument_list|()
expr_stmt|;
name|logSubmissionToJobHistory
argument_list|()
expr_stmt|;
if|if
condition|(
name|loggingEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"(initTasks@SJIP) Logged to job history for "
operator|+
name|jobId
argument_list|)
expr_stmt|;
block|}
name|checkTaskLimits
argument_list|()
expr_stmt|;
if|if
condition|(
name|loggingEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"(initTasks@SJIP) Checked task limits for "
operator|+
name|jobId
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|jobFile
init|=
literal|"default"
decl_stmt|;
name|taskSplitMetaInfo
operator|=
name|createSplits
argument_list|(
name|jobStory
argument_list|)
expr_stmt|;
if|if
condition|(
name|loggingEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"(initTasks@SJIP) Created splits for job = "
operator|+
name|jobId
operator|+
literal|" number of splits = "
operator|+
name|taskSplitMetaInfo
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|createMapTasks
argument_list|(
name|jobFile
argument_list|,
name|taskSplitMetaInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|numMapTasks
operator|>
literal|0
condition|)
block|{
name|nonRunningMapCache
operator|=
name|createCache
argument_list|(
name|taskSplitMetaInfo
argument_list|,
name|maxLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|loggingEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"initTasks:numMaps="
operator|+
name|numMapTasks
operator|+
literal|" Size of nonRunningMapCache="
operator|+
name|nonRunningMapCache
operator|.
name|size
argument_list|()
operator|+
literal|" for "
operator|+
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the launch time
name|this
operator|.
name|launchTime
operator|=
name|JobTracker
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|createReduceTasks
argument_list|(
name|jobFile
argument_list|)
expr_stmt|;
comment|// Calculate the minimum number of maps to be complete before
comment|// we should start scheduling reduces
name|completedMapsForReduceSlowstart
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|conf
operator|.
name|getFloat
argument_list|(
literal|"mapred.reduce.slowstart."
operator|+
literal|"completed.maps"
argument_list|,
name|DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART
argument_list|)
operator|*
name|numMapTasks
operator|)
argument_list|)
expr_stmt|;
name|tasksInited
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|loggingEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing job, nowstatus = "
operator|+
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setupComplete
argument_list|()
expr_stmt|;
if|if
condition|(
name|loggingEnabled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing job, inited-status = "
operator|+
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createSplits (JobStory story)
name|TaskSplitMetaInfo
index|[]
name|createSplits
parameter_list|(
name|JobStory
name|story
parameter_list|)
throws|throws
name|IOException
block|{
name|InputSplit
index|[]
name|splits
init|=
name|story
operator|.
name|getInputSplits
argument_list|()
decl_stmt|;
if|if
condition|(
name|splits
operator|==
literal|null
operator|||
name|splits
operator|.
name|length
operator|!=
name|numMapTasks
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Input split size mismatch: expected="
operator|+
name|numMapTasks
operator|+
literal|", actual="
operator|+
operator|(
operator|(
name|splits
operator|==
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
name|splits
operator|.
name|length
operator|)
argument_list|)
throw|;
block|}
name|TaskSplitMetaInfo
index|[]
name|splitMetaInfo
init|=
operator|new
name|TaskSplitMetaInfo
index|[
name|story
operator|.
name|getNumberMaps
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
try|try
block|{
name|splitMetaInfo
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|TaskSplitMetaInfo
argument_list|(
name|split
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
return|return
name|splitMetaInfo
return|;
block|}
comment|/**    * Given the map taskAttemptID, returns the TaskAttemptInfo. Deconstructs the    * map's taskAttemptID and looks up the jobStory with the parts taskType, id    * of task, id of task attempt.    *     * @param taskTracker    *          tasktracker    * @param taskAttemptID    *          task-attempt    * @return TaskAttemptInfo for the map task-attempt    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getMapTaskAttemptInfo ( TaskTracker taskTracker, TaskAttemptID taskAttemptID)
specifier|private
specifier|synchronized
name|TaskAttemptInfo
name|getMapTaskAttemptInfo
parameter_list|(
name|TaskTracker
name|taskTracker
parameter_list|,
name|TaskAttemptID
name|taskAttemptID
parameter_list|)
block|{
assert|assert
operator|(
name|taskAttemptID
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
operator|)
assert|;
name|JobID
name|jobid
init|=
operator|(
name|JobID
operator|)
name|taskAttemptID
operator|.
name|getJobID
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|jobid
operator|==
name|getJobID
argument_list|()
operator|)
assert|;
comment|// Get splits for the TaskAttempt
name|TaskSplitMetaInfo
name|split
init|=
name|taskSplitMetaInfo
index|[
name|taskAttemptID
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
index|]
decl_stmt|;
name|int
name|locality
init|=
name|getClosestLocality
argument_list|(
name|taskTracker
argument_list|,
name|split
argument_list|)
decl_stmt|;
name|TaskID
name|taskId
init|=
name|taskAttemptID
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|TaskType
name|taskType
init|=
name|taskAttemptID
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
if|if
condition|(
name|taskId
operator|.
name|getTaskType
argument_list|()
operator|!=
name|TaskType
operator|.
name|MAP
condition|)
block|{
assert|assert
literal|false
operator|:
literal|"Task "
operator|+
name|taskId
operator|+
literal|" is not MAP :"
operator|+
name|taskId
operator|.
name|getTaskType
argument_list|()
assert|;
block|}
name|TaskAttemptInfo
name|taskAttemptInfo
init|=
name|jobStory
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
name|taskId
operator|.
name|getId
argument_list|()
argument_list|,
name|taskAttemptID
operator|.
name|getId
argument_list|()
argument_list|,
name|locality
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get an attempt: "
operator|+
name|taskAttemptID
operator|.
name|toString
argument_list|()
operator|+
literal|", state="
operator|+
name|taskAttemptInfo
operator|.
name|getRunState
argument_list|()
operator|+
literal|", runtime="
operator|+
operator|(
operator|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
operator|)
condition|?
name|taskAttemptInfo
operator|.
name|getRuntime
argument_list|()
else|:
operator|(
operator|(
name|ReduceTaskAttemptInfo
operator|)
name|taskAttemptInfo
operator|)
operator|.
name|getReduceRuntime
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|taskAttemptInfo
return|;
block|}
DECL|method|getClosestLocality (TaskTracker taskTracker, TaskSplitMetaInfo split)
specifier|private
name|int
name|getClosestLocality
parameter_list|(
name|TaskTracker
name|taskTracker
parameter_list|,
name|TaskSplitMetaInfo
name|split
parameter_list|)
block|{
name|int
name|locality
init|=
literal|2
decl_stmt|;
name|Node
name|taskTrackerNode
init|=
name|jobtracker
operator|.
name|getNode
argument_list|(
name|taskTracker
operator|.
name|getStatus
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskTrackerNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot determine network topology node for TaskTracker "
operator|+
name|taskTracker
operator|.
name|getTrackerName
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|location
range|:
name|split
operator|.
name|getLocations
argument_list|()
control|)
block|{
name|Node
name|dataNode
init|=
name|jobtracker
operator|.
name|getNode
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot determine network topology node for split location "
operator|+
name|location
argument_list|)
throw|;
block|}
name|locality
operator|=
name|Math
operator|.
name|min
argument_list|(
name|locality
argument_list|,
name|jobtracker
operator|.
name|clusterMap
operator|.
name|getDistance
argument_list|(
name|taskTrackerNode
argument_list|,
name|dataNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|locality
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getTaskAttemptInfo (TaskTracker taskTracker, TaskAttemptID taskAttemptId)
specifier|public
name|TaskAttemptInfo
name|getTaskAttemptInfo
parameter_list|(
name|TaskTracker
name|taskTracker
parameter_list|,
name|TaskAttemptID
name|taskAttemptId
parameter_list|)
block|{
name|JobID
name|jobid
init|=
operator|(
name|JobID
operator|)
name|taskAttemptId
operator|.
name|getJobID
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|jobid
operator|==
name|getJobID
argument_list|()
operator|)
assert|;
return|return
operator|(
name|taskAttemptId
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|MAP
operator|)
condition|?
name|getMapTaskAttemptInfo
argument_list|(
name|taskTracker
argument_list|,
name|taskAttemptId
argument_list|)
else|:
name|getReduceTaskAttemptInfo
argument_list|(
name|taskTracker
argument_list|,
name|taskAttemptId
argument_list|)
return|;
block|}
comment|/**    * Given the reduce taskAttemptID, returns the TaskAttemptInfo. Deconstructs    * the reduce taskAttemptID and looks up the jobStory with the parts taskType,    * id of task, id of task attempt.    *     * @param taskTracker    *          tasktracker    * @param taskAttemptID    *          task-attempt    * @return TaskAttemptInfo for the reduce task-attempt    */
DECL|method|getReduceTaskAttemptInfo (TaskTracker taskTracker, TaskAttemptID taskAttemptID)
specifier|private
name|TaskAttemptInfo
name|getReduceTaskAttemptInfo
parameter_list|(
name|TaskTracker
name|taskTracker
parameter_list|,
name|TaskAttemptID
name|taskAttemptID
parameter_list|)
block|{
assert|assert
operator|(
name|taskAttemptID
operator|.
name|getTaskType
argument_list|()
operator|==
name|TaskType
operator|.
name|REDUCE
operator|)
assert|;
name|TaskID
name|taskId
init|=
name|taskAttemptID
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|TaskType
name|taskType
init|=
name|taskAttemptID
operator|.
name|getTaskType
argument_list|()
decl_stmt|;
name|TaskAttemptInfo
name|taskAttemptInfo
init|=
name|jobStory
operator|.
name|getTaskAttemptInfo
argument_list|(
name|taskType
argument_list|,
name|taskId
operator|.
name|getId
argument_list|()
argument_list|,
name|taskAttemptID
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get an attempt: "
operator|+
name|taskAttemptID
operator|.
name|toString
argument_list|()
operator|+
literal|", state="
operator|+
name|taskAttemptInfo
operator|.
name|getRunState
argument_list|()
operator|+
literal|", runtime="
operator|+
operator|(
operator|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
operator|)
condition|?
name|taskAttemptInfo
operator|.
name|getRuntime
argument_list|()
else|:
operator|(
operator|(
name|ReduceTaskAttemptInfo
operator|)
name|taskAttemptInfo
operator|)
operator|.
name|getReduceRuntime
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|taskAttemptInfo
return|;
block|}
block|}
end_class

end_unit

