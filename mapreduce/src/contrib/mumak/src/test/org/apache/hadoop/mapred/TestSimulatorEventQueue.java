begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSimulatorEventQueue
specifier|public
class|class
name|TestSimulatorEventQueue
block|{
DECL|field|random
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|class|TestEvent
specifier|public
class|class
name|TestEvent
extends|extends
name|SimulatorEvent
block|{
DECL|method|TestEvent (SimulatorEventListener listener, long timeStamp)
specifier|public
name|TestEvent
parameter_list|(
name|SimulatorEventListener
name|listener
parameter_list|,
name|long
name|timeStamp
parameter_list|)
block|{
name|super
argument_list|(
name|listener
argument_list|,
name|timeStamp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestEventWithCount
specifier|public
class|class
name|TestEventWithCount
extends|extends
name|TestEvent
block|{
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|method|TestEventWithCount (SimulatorEventListener listener, long timeStamp, int count)
specifier|public
name|TestEventWithCount
parameter_list|(
name|SimulatorEventListener
name|listener
parameter_list|,
name|long
name|timeStamp
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|super
argument_list|(
name|listener
argument_list|,
name|timeStamp
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
DECL|method|getCount ()
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
DECL|class|TestListener
specifier|public
specifier|static
class|class
name|TestListener
implements|implements
name|SimulatorEventListener
block|{
annotation|@
name|Override
DECL|method|accept (SimulatorEvent event)
specifier|public
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|accept
parameter_list|(
name|SimulatorEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|TestEvent
condition|)
block|{
return|return
name|SimulatorEventQueue
operator|.
name|EMPTY_EVENTS
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|init (long when)
specifier|public
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|init
parameter_list|(
name|long
name|when
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleGetPut ()
specifier|public
name|void
name|testSimpleGetPut
parameter_list|()
block|{
name|SimulatorEventQueue
name|queue
init|=
operator|new
name|SimulatorEventQueue
argument_list|()
decl_stmt|;
name|SimulatorEventListener
name|listener
init|=
operator|new
name|TestListener
argument_list|()
decl_stmt|;
name|SimulatorEvent
name|event
init|=
operator|new
name|TestEvent
argument_list|(
name|listener
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|SimulatorEvent
name|first
init|=
name|queue
operator|.
name|get
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|first
operator|.
name|getTimeStamp
argument_list|()
argument_list|,
name|event
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|first
operator|.
name|getListener
argument_list|()
argument_list|,
name|event
operator|.
name|getListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListPut ()
specifier|public
name|void
name|testListPut
parameter_list|()
block|{
name|SimulatorEventQueue
name|queue
init|=
operator|new
name|SimulatorEventQueue
argument_list|()
decl_stmt|;
name|SimulatorEventListener
name|listener
init|=
operator|new
name|TestListener
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|listEvent
init|=
operator|new
name|ArrayList
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|()
decl_stmt|;
name|listEvent
operator|.
name|add
argument_list|(
operator|new
name|TestEvent
argument_list|(
name|listener
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|listEvent
operator|.
name|add
argument_list|(
operator|new
name|TestEvent
argument_list|(
name|listener
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|addAll
argument_list|(
name|listEvent
argument_list|)
expr_stmt|;
name|SimulatorEvent
name|first
init|=
name|queue
operator|.
name|get
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|first
operator|.
name|getTimeStamp
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|first
operator|.
name|getListener
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|SimulatorEvent
name|second
init|=
name|queue
operator|.
name|get
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|second
operator|.
name|getTimeStamp
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|first
operator|.
name|getListener
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeepOrder ()
specifier|public
name|void
name|testKeepOrder
parameter_list|()
block|{
name|SimulatorEventQueue
name|queue
init|=
operator|new
name|SimulatorEventQueue
argument_list|()
decl_stmt|;
name|SimulatorEventListener
name|listener
init|=
operator|new
name|TestListener
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|listEvent
init|=
operator|new
name|ArrayList
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|listEvent
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|listEvent
operator|.
name|add
argument_list|(
operator|new
name|TestEventWithCount
argument_list|(
name|listener
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|,
name|count
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|addAll
argument_list|(
name|listEvent
argument_list|)
expr_stmt|;
block|}
name|TestEventWithCount
name|next
decl_stmt|;
comment|//dump(next);
name|TestEventWithCount
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|next
operator|=
operator|(
name|TestEventWithCount
operator|)
name|queue
operator|.
name|get
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|getTimeStamp
argument_list|()
operator|==
name|next
operator|.
name|getTimeStamp
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|last
operator|.
name|getCount
argument_list|()
operator|<
name|next
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//dump(next);
block|}
name|last
operator|=
name|next
expr_stmt|;
block|}
block|}
DECL|method|dump (TestEventWithCount event)
specifier|public
name|void
name|dump
parameter_list|(
name|TestEventWithCount
name|event
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"timestamp: "
operator|+
name|event
operator|.
name|getTimeStamp
argument_list|()
operator|+
literal|", count: "
operator|+
name|event
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInsertEventIntoPast ()
specifier|public
name|void
name|testInsertEventIntoPast
parameter_list|()
block|{
name|SimulatorEventQueue
name|queue
init|=
operator|new
name|SimulatorEventQueue
argument_list|()
decl_stmt|;
name|SimulatorEventListener
name|listener
init|=
operator|new
name|TestListener
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|TestEvent
argument_list|(
name|listener
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|queue
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// current time is 10.
try|try
block|{
comment|// the event to insert happened at 5. It happens in the past because
comment|// current time is 10.
name|queue
operator|.
name|add
argument_list|(
operator|new
name|TestEvent
argument_list|(
name|listener
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Added Event occurred in the past"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

