begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Pre21JobHistoryConstants
import|;
end_import

begin_class
DECL|class|MockSimulatorEngine
specifier|public
class|class
name|MockSimulatorEngine
extends|extends
name|SimulatorEngine
block|{
DECL|field|TRACKERS
name|HashSet
argument_list|<
name|String
argument_list|>
name|TRACKERS
init|=
literal|null
decl_stmt|;
DECL|field|jobs
name|HashMap
argument_list|<
name|JobID
argument_list|,
name|JobStory
argument_list|>
name|jobs
decl_stmt|;
DECL|field|submittedJobs
name|HashSet
argument_list|<
name|JobID
argument_list|>
name|submittedJobs
decl_stmt|;
DECL|field|completedJobs
name|HashSet
argument_list|<
name|JobID
argument_list|>
name|completedJobs
decl_stmt|;
DECL|field|fixedJobs
specifier|private
name|int
name|fixedJobs
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MockSimulatorEngine
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MockSimulatorEngine (int nJobs, int nTrackers)
specifier|public
name|MockSimulatorEngine
parameter_list|(
name|int
name|nJobs
parameter_list|,
name|int
name|nTrackers
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|fixedJobs
operator|=
name|nJobs
expr_stmt|;
name|jobs
operator|=
operator|new
name|HashMap
argument_list|<
name|JobID
argument_list|,
name|JobStory
argument_list|>
argument_list|()
expr_stmt|;
name|submittedJobs
operator|=
operator|new
name|HashSet
argument_list|<
name|JobID
argument_list|>
argument_list|()
expr_stmt|;
name|completedJobs
operator|=
operator|new
name|HashSet
argument_list|<
name|JobID
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|JobConf
name|jobConf
init|=
name|createMumakConf
argument_list|()
decl_stmt|;
comment|// Adding the default queue since the example trace is from queue-less hadoop
name|jobConf
operator|.
name|set
argument_list|(
literal|"mapred.queue.names"
argument_list|,
name|JobConf
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|validateInitialization
argument_list|()
expr_stmt|;
name|SimulatorEvent
name|nextEvent
decl_stmt|;
while|while
condition|(
operator|(
name|nextEvent
operator|=
name|queue
operator|.
name|get
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
name|nextEvent
operator|.
name|getTimeStamp
argument_list|()
operator|<
name|terminateTime
operator|&&
operator|!
name|shutdown
condition|)
block|{
name|currentTime
operator|=
name|nextEvent
operator|.
name|getTimeStamp
argument_list|()
expr_stmt|;
name|SimulatorEventListener
name|listener
init|=
name|nextEvent
operator|.
name|getListener
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextEvent
operator|instanceof
name|JobSubmissionEvent
condition|)
block|{
name|validateJobSubmission
argument_list|(
operator|(
name|JobSubmissionEvent
operator|)
name|nextEvent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextEvent
operator|instanceof
name|JobCompleteEvent
condition|)
block|{
name|validateJobComplete
argument_list|(
operator|(
name|JobCompleteEvent
operator|)
name|nextEvent
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|response
init|=
name|listener
operator|.
name|accept
argument_list|(
name|nextEvent
argument_list|)
decl_stmt|;
name|queue
operator|.
name|addAll
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
name|validateEnd
argument_list|()
expr_stmt|;
name|summary
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|validateEnd ()
specifier|private
name|void
name|validateEnd
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of submitted jobs does not match trace"
argument_list|,
name|submittedJobs
operator|.
name|size
argument_list|()
argument_list|,
name|fixedJobs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of submitted jobs does not match trace"
argument_list|,
name|completedJobs
operator|.
name|size
argument_list|()
argument_list|,
name|fixedJobs
argument_list|)
expr_stmt|;
block|}
DECL|method|convertState (JobStatus status)
specifier|private
name|Pre21JobHistoryConstants
operator|.
name|Values
name|convertState
parameter_list|(
name|JobStatus
name|status
parameter_list|)
block|{
name|int
name|runState
init|=
name|status
operator|.
name|getRunState
argument_list|()
decl_stmt|;
if|if
condition|(
name|runState
operator|==
name|JobStatus
operator|.
name|FAILED
condition|)
block|{
return|return
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|FAILED
return|;
block|}
elseif|else
if|if
condition|(
name|runState
operator|==
name|JobStatus
operator|.
name|SUCCEEDED
condition|)
block|{
return|return
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|SUCCESS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown status "
operator|+
name|status
argument_list|)
throw|;
block|}
block|}
DECL|method|validateJobComplete (JobCompleteEvent completeEvent)
specifier|private
name|void
name|validateJobComplete
parameter_list|(
name|JobCompleteEvent
name|completeEvent
parameter_list|)
block|{
name|JobID
name|jobId
init|=
name|completeEvent
operator|.
name|getJobStatus
argument_list|()
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|JobStatus
name|finalStatus
init|=
name|completeEvent
operator|.
name|getJobStatus
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job completed was not submitted:"
operator|+
name|jobId
argument_list|,
name|submittedJobs
operator|.
name|contains
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Job completed more than once:"
operator|+
name|jobId
argument_list|,
name|completedJobs
operator|.
name|contains
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|completedJobs
operator|.
name|add
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|Pre21JobHistoryConstants
operator|.
name|Values
name|finalValue
init|=
name|jobs
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
operator|.
name|getOutcome
argument_list|()
decl_stmt|;
name|Pre21JobHistoryConstants
operator|.
name|Values
name|obtainedStatus
init|=
name|convertState
argument_list|(
name|finalStatus
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job completion final status mismatch"
argument_list|,
name|obtainedStatus
argument_list|,
name|finalValue
argument_list|)
expr_stmt|;
block|}
DECL|method|validateJobSubmission (JobSubmissionEvent submissionEvent)
specifier|private
name|void
name|validateJobSubmission
parameter_list|(
name|JobSubmissionEvent
name|submissionEvent
parameter_list|)
block|{
name|JobID
name|jobId
init|=
name|submissionEvent
operator|.
name|getJob
argument_list|()
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Job being submitted: "
operator|+
name|jobId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" is already submitted"
argument_list|,
name|submittedJobs
operator|.
name|contains
argument_list|(
name|jobId
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding to submitted Jobs "
operator|+
name|jobId
argument_list|)
expr_stmt|;
name|submittedJobs
operator|.
name|add
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|jobs
operator|.
name|put
argument_list|(
name|jobId
argument_list|,
name|submissionEvent
operator|.
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
name|Pre21JobHistoryConstants
operator|.
name|Values
name|finalValue
init|=
name|submissionEvent
operator|.
name|getJob
argument_list|()
operator|.
name|getOutcome
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Job has final state neither SUCCESS nor FAILED"
argument_list|,
name|finalValue
operator|==
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|FAILED
operator|||
name|finalValue
operator|==
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
DECL|method|validateInitialization ()
specifier|private
name|void
name|validateInitialization
parameter_list|()
block|{
comment|// The JobTracker has been initialized.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"SimulatorJobTracker is null"
argument_list|,
name|jt
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Clock of simulator is behind startTime"
argument_list|,
name|SimulatorJobTracker
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|>=
name|startTime
argument_list|)
expr_stmt|;
comment|// The JobClient has been initialized
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"SimulatorJobClient is null"
argument_list|,
name|jc
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

