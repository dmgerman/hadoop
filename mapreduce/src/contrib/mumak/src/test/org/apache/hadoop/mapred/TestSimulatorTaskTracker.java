begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|//
end_comment

begin_comment
comment|// Test case for SimulatorJobTracker.
end_comment

begin_comment
comment|// We create a table of expected list of new events generated and
end_comment

begin_comment
comment|// another table of expected heartbeat() in parameters and the task actions
end_comment

begin_comment
comment|// to performe for each timestamp t. We then run the task tracker with our
end_comment

begin_comment
comment|// own little event queue and check if exactly those things happen that
end_comment

begin_comment
comment|// are listed in the two tables/
end_comment

begin_comment
comment|//
end_comment

begin_class
DECL|class|TestSimulatorTaskTracker
specifier|public
class|class
name|TestSimulatorTaskTracker
block|{
DECL|field|jobTracker
name|MockSimulatorJobTracker
name|jobTracker
decl_stmt|;
DECL|field|taskTracker
name|SimulatorTaskTracker
name|taskTracker
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSimulatorTaskTracker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Our own little event queue, checks the events against the expected before \
comment|// enqueueing them
DECL|field|eventQueue
name|CheckedEventQueue
name|eventQueue
decl_stmt|;
comment|// Global test parameters
DECL|field|heartbeatInterval
specifier|final
name|int
name|heartbeatInterval
init|=
literal|10
decl_stmt|;
DECL|field|simulationStartTime
specifier|final
name|long
name|simulationStartTime
init|=
literal|100
decl_stmt|;
comment|// specify number of heartbeats since simulation start for mapStarts
DECL|field|mapStarts
specifier|final
name|long
index|[]
name|mapStarts
init|=
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
comment|// specify number of heartbeats since mapStarts[i] for mapKills[i],
comment|// use -1 for no kill
DECL|field|mapKills
specifier|final
name|long
index|[]
name|mapKills
init|=
block|{
literal|1
block|,
operator|-
literal|1
block|,
literal|2
block|}
decl_stmt|;
DECL|field|mapRuntimes
specifier|final
name|long
index|[]
name|mapRuntimes
init|=
block|{
literal|53
block|,
literal|17
block|,
literal|42
block|}
decl_stmt|;
comment|// specify number of heartbeats since start for reduceStarts
DECL|field|reduceStarts
specifier|final
name|long
index|[]
name|reduceStarts
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|6
block|}
decl_stmt|;
comment|// specify number of heartbeats since mapStarts[i] for mapKills[i],
comment|// use -1 for no kill
DECL|field|reduceKills
specifier|final
name|long
index|[]
name|reduceKills
init|=
block|{
literal|1
block|,
operator|-
literal|1
block|,
literal|6
block|}
decl_stmt|;
DECL|field|mapDoneDelays
specifier|final
name|long
index|[]
name|mapDoneDelays
init|=
block|{
literal|11
block|,
literal|0
block|,
literal|33
block|}
decl_stmt|;
DECL|field|reduceRuntimes
specifier|final
name|long
index|[]
name|reduceRuntimes
init|=
block|{
literal|49
block|,
literal|25
block|,
literal|64
block|}
decl_stmt|;
DECL|field|taskAttemptIdPrefix
specifier|final
specifier|static
name|String
name|taskAttemptIdPrefix
init|=
literal|"attempt_200907150128_0007_"
decl_stmt|;
DECL|field|taskTrackerName
specifier|final
name|String
name|taskTrackerName
init|=
literal|"test_task_tracker"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
name|jobTracker
operator|=
operator|new
name|MockSimulatorJobTracker
argument_list|(
name|simulationStartTime
argument_list|,
name|heartbeatInterval
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Couldn't set up the mock job tracker: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|ttConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ttConf
operator|.
name|set
argument_list|(
literal|"mumak.tasktracker.tracker.name"
argument_list|,
name|taskTrackerName
argument_list|)
expr_stmt|;
name|ttConf
operator|.
name|set
argument_list|(
literal|"mumak.tasktracker.host.name"
argument_list|,
literal|"test_host"
argument_list|)
expr_stmt|;
name|ttConf
operator|.
name|setInt
argument_list|(
literal|"mapred.tasktracker.map.tasks.maximum"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ttConf
operator|.
name|setInt
argument_list|(
literal|"mapred.tasktracker.reduce.tasks.maximum"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ttConf
operator|.
name|setInt
argument_list|(
literal|"mumak.tasktracker.heartbeat.fuzz"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|taskTracker
operator|=
operator|new
name|SimulatorTaskTracker
argument_list|(
name|jobTracker
argument_list|,
name|ttConf
argument_list|)
expr_stmt|;
name|eventQueue
operator|=
operator|new
name|CheckedEventQueue
argument_list|(
name|simulationStartTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitAndHeartbeat ()
specifier|public
name|void
name|testInitAndHeartbeat
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing init and hearbeat mechanism"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// All further tests assume that testInitAndHeartbeat passed
annotation|@
name|Test
DECL|method|testSingleMapTask ()
specifier|public
name|void
name|testSingleMapTask
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing with a single map task"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|20
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleReduceTask ()
specifier|public
name|void
name|testSingleReduceTask
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing with a single reduce task"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|20
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleMapTasks ()
specifier|public
name|void
name|testMultipleMapTasks
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing with multiple map tasks"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|20
argument_list|,
name|mapStarts
operator|.
name|length
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleReduceTasks ()
specifier|public
name|void
name|testMultipleReduceTasks
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing with multiple reduce tasks"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|20
argument_list|,
literal|0
argument_list|,
name|reduceStarts
operator|.
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleMapAndReduceTasks ()
specifier|public
name|void
name|testMultipleMapAndReduceTasks
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing with multiple map and reduce tasks"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|20
argument_list|,
name|mapStarts
operator|.
name|length
argument_list|,
name|reduceStarts
operator|.
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillSingleMapTask ()
specifier|public
name|void
name|testKillSingleMapTask
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing killing a single map task"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|20
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillSingleReduceTask ()
specifier|public
name|void
name|testKillSingleReduceTask
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing killing a single reduce task"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|20
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillMultipleMapTasks ()
specifier|public
name|void
name|testKillMultipleMapTasks
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing killing multiple map tasks"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|20
argument_list|,
name|mapStarts
operator|.
name|length
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillMultipleReduceTasks ()
specifier|public
name|void
name|testKillMultipleReduceTasks
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing killing multiple reduce tasks"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|20
argument_list|,
literal|0
argument_list|,
name|reduceStarts
operator|.
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillMultipleMapAndReduceTasks ()
specifier|public
name|void
name|testKillMultipleMapAndReduceTasks
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing killing multiple map and reduce tasks"
argument_list|)
expr_stmt|;
name|genericTest
argument_list|(
literal|20
argument_list|,
name|mapStarts
operator|.
name|length
argument_list|,
name|reduceStarts
operator|.
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|genericTest (int numAccepts, int numMaps, int numReduces, boolean testKill)
specifier|protected
name|void
name|genericTest
parameter_list|(
name|int
name|numAccepts
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReduces
parameter_list|,
name|boolean
name|testKill
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generic test with numAccepts="
operator|+
name|numAccepts
operator|+
literal|", numMaps="
operator|+
name|numMaps
operator|+
literal|", numReduces="
operator|+
name|numReduces
operator|+
literal|", testKill="
operator|+
name|testKill
argument_list|)
expr_stmt|;
name|setUpHeartbeats
argument_list|(
name|numAccepts
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMaps
condition|;
name|i
operator|++
control|)
block|{
name|setUpMapTask
argument_list|(
name|i
argument_list|,
name|testKill
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReduces
condition|;
name|i
operator|++
control|)
block|{
name|setUpReduceTask
argument_list|(
name|i
argument_list|,
name|testKill
argument_list|)
expr_stmt|;
block|}
name|runTaskTracker
argument_list|()
expr_stmt|;
block|}
comment|// numAccepts must be at least 1
DECL|method|setUpHeartbeats (int numAccepts)
specifier|private
name|void
name|setUpHeartbeats
parameter_list|(
name|int
name|numAccepts
parameter_list|)
block|{
name|eventQueue
operator|.
name|expectHeartbeats
argument_list|(
name|taskTracker
argument_list|,
name|numAccepts
argument_list|,
name|heartbeatInterval
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|expectEmptyHeartbeats
argument_list|(
name|taskTrackerName
argument_list|,
name|numAccepts
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpMapTask (TaskAttemptID mapTaskId, long mapStart, long mapRuntime, long mapKill)
specifier|private
name|void
name|setUpMapTask
parameter_list|(
name|TaskAttemptID
name|mapTaskId
parameter_list|,
name|long
name|mapStart
parameter_list|,
name|long
name|mapRuntime
parameter_list|,
name|long
name|mapKill
parameter_list|)
block|{
name|jobTracker
operator|.
name|runMapTask
argument_list|(
name|taskTrackerName
argument_list|,
name|mapTaskId
argument_list|,
name|mapStart
argument_list|,
name|mapRuntime
argument_list|,
name|mapKill
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|expectMapTask
argument_list|(
name|taskTracker
argument_list|,
name|mapTaskId
argument_list|,
name|mapStart
argument_list|,
name|mapRuntime
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpMapTask (int idx, boolean testKill)
specifier|private
name|void
name|setUpMapTask
parameter_list|(
name|int
name|idx
parameter_list|,
name|boolean
name|testKill
parameter_list|)
block|{
name|TaskAttemptID
name|mapTaskId
init|=
name|createTaskAttemptID
argument_list|(
literal|true
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|long
name|mapStart
init|=
name|simulationStartTime
operator|+
name|heartbeatInterval
operator|*
name|mapStarts
index|[
name|idx
index|]
decl_stmt|;
name|long
name|mapKill
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|testKill
operator|&&
literal|0
operator|<=
name|mapKills
index|[
name|idx
index|]
condition|)
block|{
name|mapKill
operator|=
name|mapStart
operator|+
name|heartbeatInterval
operator|*
name|mapKills
index|[
name|idx
index|]
expr_stmt|;
block|}
name|setUpMapTask
argument_list|(
name|mapTaskId
argument_list|,
name|mapStart
argument_list|,
name|mapRuntimes
index|[
name|idx
index|]
argument_list|,
name|mapKill
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpReduceTask (TaskAttemptID reduceTaskId, long reduceStart, long mapDoneDelay, long reduceRuntime, long reduceKill)
specifier|private
name|void
name|setUpReduceTask
parameter_list|(
name|TaskAttemptID
name|reduceTaskId
parameter_list|,
name|long
name|reduceStart
parameter_list|,
name|long
name|mapDoneDelay
parameter_list|,
name|long
name|reduceRuntime
parameter_list|,
name|long
name|reduceKill
parameter_list|)
block|{
name|jobTracker
operator|.
name|runReduceTask
argument_list|(
name|taskTrackerName
argument_list|,
name|reduceTaskId
argument_list|,
name|reduceStart
argument_list|,
name|mapDoneDelay
argument_list|,
name|reduceRuntime
argument_list|,
name|reduceKill
argument_list|)
expr_stmt|;
name|long
name|mapDone
init|=
name|jobTracker
operator|.
name|nextHeartbeat
argument_list|(
name|reduceStart
operator|+
name|mapDoneDelay
argument_list|)
decl_stmt|;
if|if
condition|(
name|reduceKill
operator|<
literal|0
operator|||
name|mapDone
operator|<
name|reduceKill
condition|)
block|{
comment|// it generates completion events iff it survives mapDone
name|eventQueue
operator|.
name|expectReduceTask
argument_list|(
name|taskTracker
argument_list|,
name|reduceTaskId
argument_list|,
name|mapDone
argument_list|,
name|reduceRuntime
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setUpReduceTask (int idx, boolean testKill)
specifier|private
name|void
name|setUpReduceTask
parameter_list|(
name|int
name|idx
parameter_list|,
name|boolean
name|testKill
parameter_list|)
block|{
name|TaskAttemptID
name|reduceTaskId
init|=
name|createTaskAttemptID
argument_list|(
literal|false
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|long
name|reduceStart
init|=
name|simulationStartTime
operator|+
name|heartbeatInterval
operator|*
name|reduceStarts
index|[
name|idx
index|]
decl_stmt|;
name|long
name|reduceKill
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|testKill
operator|&&
literal|0
operator|<=
name|reduceKills
index|[
name|idx
index|]
condition|)
block|{
name|reduceKill
operator|=
name|reduceStart
operator|+
name|heartbeatInterval
operator|*
name|reduceKills
index|[
name|idx
index|]
expr_stmt|;
block|}
name|setUpReduceTask
argument_list|(
name|reduceTaskId
argument_list|,
name|reduceStart
argument_list|,
name|mapDoneDelays
index|[
name|idx
index|]
argument_list|,
name|reduceRuntimes
index|[
name|idx
index|]
argument_list|,
name|reduceKill
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// runs a single task tracker
comment|// checks that generated events conform to expectedEvents
comment|// and the mock jobtracker checks that the heartbeats() sent to it are right
comment|//
DECL|method|runTaskTracker ()
specifier|private
name|void
name|runTaskTracker
parameter_list|()
block|{
name|long
name|runUntil
init|=
name|eventQueue
operator|.
name|getLastCheckTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running task tracker until simulation time="
operator|+
name|runUntil
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|events
init|=
name|taskTracker
operator|.
name|init
argument_list|(
name|simulationStartTime
argument_list|)
decl_stmt|;
name|eventQueue
operator|.
name|addAll
argument_list|(
name|events
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// can't be empty as it must go past runUntil for verifiability
comment|// besides it is never empty because of HeartbeatEvent
name|SimulatorEvent
name|currentEvent
init|=
name|eventQueue
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// copy time, make sure TT does not modify it
name|long
name|now
init|=
name|currentEvent
operator|.
name|getTimeStamp
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of events to deliver="
operator|+
operator|(
name|eventQueue
operator|.
name|getSize
argument_list|()
operator|+
literal|1
operator|)
operator|+
literal|", now="
operator|+
name|now
argument_list|)
expr_stmt|;
if|if
condition|(
name|now
operator|>
name|runUntil
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Calling accept(), event="
operator|+
name|currentEvent
operator|+
literal|", now="
operator|+
name|now
argument_list|)
expr_stmt|;
name|events
operator|=
name|taskTracker
operator|.
name|accept
argument_list|(
name|currentEvent
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Accept() returned "
operator|+
name|events
operator|.
name|size
argument_list|()
operator|+
literal|" new event(s)"
argument_list|)
expr_stmt|;
for|for
control|(
name|SimulatorEvent
name|newEvent
range|:
name|events
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"New event "
operator|+
name|newEvent
argument_list|)
expr_stmt|;
block|}
name|eventQueue
operator|.
name|addAll
argument_list|(
name|events
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done checking and enqueuing new events"
argument_list|)
expr_stmt|;
block|}
comment|// make sure we have seen all expected events, even for the last
comment|// time checked
name|eventQueue
operator|.
name|checkMissingExpected
argument_list|()
expr_stmt|;
comment|// Mock JT should have consumed all entries from its heartbeat table
name|jobTracker
operator|.
name|checkMissingHeartbeats
argument_list|()
expr_stmt|;
block|}
comment|// taskNumber should be< 10
DECL|method|createTaskAttemptID (boolean isMap, int taskNumber)
specifier|static
specifier|private
name|TaskAttemptID
name|createTaskAttemptID
parameter_list|(
name|boolean
name|isMap
parameter_list|,
name|int
name|taskNumber
parameter_list|)
block|{
name|String
name|attempt
init|=
name|taskAttemptIdPrefix
operator|+
operator|(
name|isMap
condition|?
literal|"m"
else|:
literal|"r"
operator|)
operator|+
literal|"_00000"
operator|+
name|taskNumber
operator|+
literal|"_0"
decl_stmt|;
name|TaskAttemptID
name|taskId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|taskId
operator|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid task attempt id string "
operator|+
name|iae
argument_list|)
expr_stmt|;
block|}
return|return
name|taskId
return|;
block|}
block|}
end_class

end_unit

