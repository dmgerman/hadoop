begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ClusterTopologyReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|DeepInequalityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|LoggedNetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRemoveIpsFromLoggedNetworkTopology
specifier|public
class|class
name|TestRemoveIpsFromLoggedNetworkTopology
block|{
annotation|@
name|Test
DECL|method|testIsIPAddress ()
specifier|public
name|void
name|testIsIPAddress
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|positives
init|=
block|{
literal|"123.13.42.255"
block|,
comment|// regular ipv4
literal|"123.01.0.255"
block|,
comment|// padded 0
literal|"000.001.002.020"
block|,
comment|// more padded 0
literal|"123\\.13\\.42\\.255"
block|,
comment|// escaped .
literal|"0.0.0.0"
block|,
comment|// all-zero
literal|"255.255.255.255"
block|,
comment|// all-0xff
literal|"1080:0:0:0:8:800:200C:417A"
block|,
comment|// regular ipv6
literal|"1080:01:020:3:8:0800:200C:417A"
block|,
comment|// padded 0
literal|"1080:01:002:0003:080:0800:0200:417A"
block|,
comment|// more padded 0
literal|"0:0:0:0:0:0:0:0"
block|,
comment|// all-zero
literal|"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
block|,
comment|// all-0xff
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|negatives
init|=
block|{
literal|"node.megatron.com"
block|,
comment|// domain name
literal|"13.42.255"
block|,
comment|// too short
literal|"123.13.42.255.10"
block|,
comment|// too long
literal|"123.256.42.255"
block|,
comment|// too large
literal|"123.13.42.255.weird.com"
block|,
comment|// weird
literal|"1080:0:0:0:8:200C:417A"
block|,
comment|// too short
literal|"1080:0:0:0:1:8:800:200C:417A"
block|,
comment|// too long
literal|"1080A:0:0:0:8:800:200C:417A"
block|,
comment|// too large
literal|"1080:0:0:0:8:800:200G:417A"
block|,
comment|// too large
block|}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|positives
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|s
argument_list|,
name|SimulatorEngine
operator|.
name|isIPAddress
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|s
range|:
name|negatives
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|s
argument_list|,
name|SimulatorEngine
operator|.
name|isIPAddress
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIpRemoval ()
specifier|public
name|void
name|testIpRemoval
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"src.test.data"
argument_list|,
literal|"data"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LoggedNetworkTopology
name|topoWithIps
init|=
operator|new
name|ClusterTopologyReader
argument_list|(
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"topo-with-numeric-ips.json"
argument_list|)
argument_list|,
name|conf
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|LoggedNetworkTopology
name|topoWithoutIps
init|=
operator|new
name|ClusterTopologyReader
argument_list|(
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"topo-without-numeric-ips.json"
argument_list|)
argument_list|,
name|conf
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|topoWithIps
operator|.
name|deepCompare
argument_list|(
name|topoWithoutIps
argument_list|,
operator|new
name|TreePath
argument_list|(
literal|null
argument_list|,
literal|"<root>"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting two topologies to differ"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeepInequalityException
name|e
parameter_list|)
block|{     }
name|SimulatorEngine
operator|.
name|removeIpHosts
argument_list|(
name|topoWithIps
argument_list|)
expr_stmt|;
try|try
block|{
name|topoWithIps
operator|.
name|deepCompare
argument_list|(
name|topoWithoutIps
argument_list|,
operator|new
name|TreePath
argument_list|(
literal|null
argument_list|,
literal|"<root>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeepInequalityException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting two topologies to be equal"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

