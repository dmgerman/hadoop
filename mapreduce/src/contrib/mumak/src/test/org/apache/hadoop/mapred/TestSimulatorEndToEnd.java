begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MockSimulatorEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ZombieCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ZombieJobProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSimulatorEndToEnd
specifier|public
class|class
name|TestSimulatorEndToEnd
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MockSimulatorEngine
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|policy
specifier|protected
name|SimulatorJobSubmissionPolicy
name|policy
init|=
name|SimulatorJobSubmissionPolicy
operator|.
name|REPLAY
decl_stmt|;
annotation|@
name|Test
DECL|method|testMain ()
specifier|public
name|void
name|testMain
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SimulatorJobSubmissionPolicy
operator|.
name|JOB_SUBMISSION_POLICY
argument_list|,
name|policy
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"src.test.data"
argument_list|,
literal|"data"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|traceFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"19-jobs.trace.json.gz"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|topologyFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"19-jobs.topology.json.gz"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"traceFile = "
operator|+
name|traceFile
operator|.
name|toString
argument_list|()
operator|+
literal|" topology = "
operator|+
name|topologyFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numJobs
init|=
name|getNumberJobs
argument_list|(
name|traceFile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|nTrackers
init|=
name|getNumberTaskTrackers
argument_list|(
name|topologyFile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|MockSimulatorEngine
name|mockMumak
init|=
operator|new
name|MockSimulatorEngine
argument_list|(
name|numJobs
argument_list|,
name|nTrackers
argument_list|)
decl_stmt|;
name|Configuration
name|mumakConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|mumakConf
operator|.
name|set
argument_list|(
literal|"mapred.jobtracker.taskScheduler"
argument_list|,
name|JobQueueTaskScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mumakConf
operator|.
name|setBoolean
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|traceFile
operator|.
name|toString
argument_list|()
block|,
name|topologyFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|mumakConf
argument_list|,
name|mockMumak
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumberJobs (Path inputFile, Configuration conf)
specifier|private
name|int
name|getNumberJobs
parameter_list|(
name|Path
name|inputFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|ZombieJobProducer
name|jobProducer
init|=
operator|new
name|ZombieJobProducer
argument_list|(
name|inputFile
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|numJobs
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|jobProducer
operator|.
name|getNextJob
argument_list|()
operator|!=
literal|null
condition|)
block|{
operator|++
name|numJobs
expr_stmt|;
block|}
return|return
name|numJobs
return|;
block|}
finally|finally
block|{
name|jobProducer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNumberTaskTrackers (Path inputFile, Configuration conf)
specifier|private
name|int
name|getNumberTaskTrackers
parameter_list|(
name|Path
name|inputFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ZombieCluster
argument_list|(
name|inputFile
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
operator|.
name|getMachines
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

