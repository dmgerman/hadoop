begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSimulatorDeterministicReplay
specifier|public
class|class
name|TestSimulatorDeterministicReplay
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSimulatorDeterministicReplay
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|policy
specifier|protected
name|SimulatorJobSubmissionPolicy
name|policy
init|=
name|SimulatorJobSubmissionPolicy
operator|.
name|REPLAY
decl_stmt|;
annotation|@
name|Test
DECL|method|testMain ()
specifier|public
name|void
name|testMain
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|hadoopLogDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
argument_list|,
literal|"mumak-replay"
argument_list|)
decl_stmt|;
name|Path
name|hadoopLogDir1
init|=
operator|new
name|Path
argument_list|(
name|hadoopLogDir
argument_list|,
literal|"run1"
argument_list|)
decl_stmt|;
name|Path
name|hadoopLogDir2
init|=
operator|new
name|Path
argument_list|(
name|hadoopLogDir
argument_list|,
literal|"run2"
argument_list|)
decl_stmt|;
name|runMumak
argument_list|(
name|hadoopLogDir1
argument_list|,
literal|50031
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Run1 done"
argument_list|)
expr_stmt|;
name|runMumak
argument_list|(
name|hadoopLogDir2
argument_list|,
literal|50032
argument_list|)
expr_stmt|;
name|compareLogDirs
argument_list|(
name|hadoopLogDir1
operator|.
name|toString
argument_list|()
argument_list|,
name|hadoopLogDir2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|compareLogDirs (String dir1, String dir2)
name|void
name|compareLogDirs
parameter_list|(
name|String
name|dir1
parameter_list|,
name|String
name|dir2
parameter_list|)
block|{
try|try
block|{
try|try
block|{
comment|// If there is no diff available, we skip the test and end up in
comment|// the catch block
comment|// Make sure diff understands the -r option
name|ShellCommandExecutor
name|executor
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"diff"
block|,
literal|"-r"
block|,
literal|"-q"
block|,
literal|"/dev/null"
block|,
literal|"/dev/null"
block|}
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|executor
operator|.
name|getExitCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"diff -r -q is not working, skipping the test"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"diff -r -q is not working, skipping the test"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Run the real comparison
name|ShellCommandExecutor
name|executor
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"diff"
block|,
literal|"-r"
block|,
literal|"-q"
block|,
name|dir1
block|,
name|dir2
block|}
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job history logs differ, diff returned"
argument_list|,
literal|0
argument_list|,
name|executor
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while diffing: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception while diffing %s and %s. Exception - %s"
argument_list|,
name|dir1
argument_list|,
name|dir2
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We need a different http port parameter for each run as the socket
comment|// is not closed properly in hadoop
DECL|method|runMumak (Path hadoopLogDir, int jobTrackerHttpPort)
name|void
name|runMumak
parameter_list|(
name|Path
name|hadoopLogDir
parameter_list|,
name|int
name|jobTrackerHttpPort
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SimulatorJobSubmissionPolicy
operator|.
name|JOB_SUBMISSION_POLICY
argument_list|,
name|policy
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"src.test.data"
argument_list|,
literal|"data"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|traceFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"19-jobs.trace.json.gz"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|topologyFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"19-jobs.topology.json.gz"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"traceFile = "
operator|+
name|traceFile
operator|+
literal|" topology = "
operator|+
name|topologyFile
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"mumak.start.time"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Run 20 minutes of the simulation
name|conf
operator|.
name|setLong
argument_list|(
literal|"mumak.terminate.time"
argument_list|,
literal|10
operator|+
literal|20
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"mumak.random.seed"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
comment|// SimulatorEngine reads conf and the system property too (!)
name|System
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
name|hadoopLogDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.log.dir"
argument_list|,
name|hadoopLogDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker.http.address"
argument_list|,
literal|"0.0.0.0:"
operator|+
name|jobTrackerHttpPort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|traceFile
operator|.
name|toString
argument_list|()
block|,
name|topologyFile
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|SimulatorEngine
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

