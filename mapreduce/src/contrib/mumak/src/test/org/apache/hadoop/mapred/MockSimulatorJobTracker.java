begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueAclsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskTrackerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
operator|.
name|JobTrackerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|MapTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ReduceTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|*
import|;
end_import

begin_comment
comment|//
end_comment

begin_comment
comment|// Mock jobtracker class that check heartbeat() in parameters and
end_comment

begin_comment
comment|// sends responses based on a prepopulated table
end_comment

begin_comment
comment|//
end_comment

begin_class
DECL|class|MockSimulatorJobTracker
specifier|public
class|class
name|MockSimulatorJobTracker
implements|implements
name|InterTrackerProtocol
implements|,
name|ClientProtocol
block|{
DECL|field|simulationStartTime
specifier|private
specifier|final
name|long
name|simulationStartTime
decl_stmt|;
DECL|field|heartbeatInterval
specifier|private
specifier|final
name|int
name|heartbeatInterval
decl_stmt|;
comment|// Helper table, used iff checkHeartbeats == true
comment|// Contains the expected task tracker status report at time t for all task
comment|// trackers identified by their name and the heartbeat response to send
DECL|field|heartbeats
specifier|private
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HeartbeatHelper
argument_list|>
argument_list|>
name|heartbeats
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HeartbeatHelper
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|checkHeartbeats
specifier|private
specifier|final
name|boolean
name|checkHeartbeats
decl_stmt|;
DECL|field|jobId
specifier|private
name|int
name|jobId
init|=
literal|0
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MockSimulatorJobTracker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MockSimulatorJobTracker (long simulationStartTime, int heartbeatInterval, boolean checkHeartbeats)
specifier|public
name|MockSimulatorJobTracker
parameter_list|(
name|long
name|simulationStartTime
parameter_list|,
name|int
name|heartbeatInterval
parameter_list|,
name|boolean
name|checkHeartbeats
parameter_list|)
block|{
name|this
operator|.
name|simulationStartTime
operator|=
name|simulationStartTime
expr_stmt|;
name|this
operator|.
name|heartbeatInterval
operator|=
name|heartbeatInterval
expr_stmt|;
name|this
operator|.
name|checkHeartbeats
operator|=
name|checkHeartbeats
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNewJobID ()
specifier|public
name|JobID
name|getNewJobID
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|JobID
argument_list|(
literal|"mockJT"
argument_list|,
name|jobId
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submitJob ( JobID jobId, String jobSubmitDir, Credentials ts)
specifier|public
name|JobStatus
name|submitJob
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|String
name|jobSubmitDir
parameter_list|,
name|Credentials
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|JobStatus
name|status
init|=
operator|new
name|JobStatus
argument_list|(
name|jobId
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
name|JobStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
name|JobPriority
operator|.
name|NORMAL
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|heartbeat (TaskTrackerStatus status, boolean restarted, boolean initialContact, boolean acceptNewTasks, short responseId)
specifier|public
name|HeartbeatResponse
name|heartbeat
parameter_list|(
name|TaskTrackerStatus
name|status
parameter_list|,
name|boolean
name|restarted
parameter_list|,
name|boolean
name|initialContact
parameter_list|,
name|boolean
name|acceptNewTasks
parameter_list|,
name|short
name|responseId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|status
operator|instanceof
name|SimulatorTaskTrackerStatus
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting SimulatorTaskTrackerStatus, actual status type "
operator|+
name|status
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|SimulatorTaskTrackerStatus
name|trackerStatus
init|=
operator|(
name|SimulatorTaskTrackerStatus
operator|)
name|status
decl_stmt|;
name|long
name|now
init|=
name|trackerStatus
operator|.
name|getCurrentSimulationTime
argument_list|()
decl_stmt|;
name|String
name|trackerName
init|=
name|status
operator|.
name|getTrackerName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received heartbeat() from trackerName="
operator|+
name|trackerName
operator|+
literal|", now="
operator|+
name|now
argument_list|)
expr_stmt|;
name|HeartbeatResponse
name|response
init|=
operator|new
name|HeartbeatResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setHeartbeatInterval
argument_list|(
name|heartbeatInterval
argument_list|)
expr_stmt|;
name|response
operator|.
name|setActions
argument_list|(
operator|new
name|TaskTrackerAction
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkHeartbeats
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"No more heartbeats were expected "
argument_list|,
name|heartbeats
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|nextToCheck
init|=
name|heartbeats
operator|.
name|firstKey
argument_list|()
decl_stmt|;
comment|// Missing heartbeat check
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nextToCheck
operator|<=
name|now
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextToCheck
operator|<
name|now
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Simulation time progressed, last checked heartbeat at="
operator|+
name|nextToCheck
operator|+
literal|", now="
operator|+
name|now
operator|+
literal|". Checking if no "
operator|+
literal|"required heartbeats were missed in the past"
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|HeartbeatHelper
argument_list|>
name|previousHeartbeats
init|=
name|heartbeats
operator|.
name|get
argument_list|(
name|nextToCheck
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|previousHeartbeats
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|previousHeartbeats
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|heartbeats
operator|.
name|remove
argument_list|(
name|nextToCheck
argument_list|)
expr_stmt|;
name|nextToCheck
operator|=
name|heartbeats
operator|.
name|firstKey
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Heartbeat at the wrong time"
argument_list|,
name|nextToCheck
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|HeartbeatHelper
argument_list|>
name|currentHeartbeats
init|=
name|heartbeats
operator|.
name|get
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|HeartbeatHelper
name|currentHeartbeat
init|=
name|currentHeartbeats
operator|.
name|get
argument_list|(
name|trackerName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Unknown task tracker name="
operator|+
name|trackerName
argument_list|,
name|currentHeartbeat
argument_list|)
expr_stmt|;
name|currentHeartbeats
operator|.
name|remove
argument_list|(
name|trackerName
argument_list|)
expr_stmt|;
name|currentHeartbeat
operator|.
name|checkHeartbeatParameters
argument_list|(
name|status
argument_list|,
name|acceptNewTasks
argument_list|)
expr_stmt|;
name|response
operator|.
name|setActions
argument_list|(
name|currentHeartbeat
operator|.
name|getTaskTrackerActions
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
comment|//
comment|// Populates the mock jobtracker's helper& checker table with expected
comment|// empty reports from the task trackers and empty task actions to perform
comment|//
DECL|method|expectEmptyHeartbeats (String taskTrackerName, int numHeartbeats)
specifier|public
name|void
name|expectEmptyHeartbeats
parameter_list|(
name|String
name|taskTrackerName
parameter_list|,
name|int
name|numHeartbeats
parameter_list|)
block|{
name|long
name|simulationTime
init|=
name|simulationStartTime
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numHeartbeats
condition|;
name|i
operator|++
control|)
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HeartbeatHelper
argument_list|>
name|hb
init|=
name|heartbeats
operator|.
name|get
argument_list|(
name|simulationTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|hb
operator|==
literal|null
condition|)
block|{
name|hb
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HeartbeatHelper
argument_list|>
argument_list|()
expr_stmt|;
name|heartbeats
operator|.
name|put
argument_list|(
name|simulationTime
argument_list|,
name|hb
argument_list|)
expr_stmt|;
block|}
name|hb
operator|.
name|put
argument_list|(
name|taskTrackerName
argument_list|,
operator|new
name|HeartbeatHelper
argument_list|()
argument_list|)
expr_stmt|;
name|simulationTime
operator|+=
name|heartbeatInterval
expr_stmt|;
block|}
block|}
comment|// Fills in all the expected and return heartbeat parameters corresponding
comment|// to running a map task on a task tracker.
comment|// Use killTime< 0 if not killed
DECL|method|runMapTask (String taskTrackerName, TaskAttemptID taskId, long mapStart, long mapRuntime, long killHeartbeat)
specifier|public
name|void
name|runMapTask
parameter_list|(
name|String
name|taskTrackerName
parameter_list|,
name|TaskAttemptID
name|taskId
parameter_list|,
name|long
name|mapStart
parameter_list|,
name|long
name|mapRuntime
parameter_list|,
name|long
name|killHeartbeat
parameter_list|)
block|{
name|long
name|mapDone
init|=
name|mapStart
operator|+
name|mapRuntime
decl_stmt|;
name|long
name|mapEndHeartbeat
init|=
name|nextHeartbeat
argument_list|(
name|mapDone
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isKilled
init|=
operator|(
name|killHeartbeat
operator|>=
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|isKilled
condition|)
block|{
name|mapEndHeartbeat
operator|=
name|nextHeartbeat
argument_list|(
name|killHeartbeat
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"mapStart="
operator|+
name|mapStart
operator|+
literal|", mapDone="
operator|+
name|mapDone
operator|+
literal|", mapEndHeartbeat="
operator|+
name|mapEndHeartbeat
operator|+
literal|", killHeartbeat="
operator|+
name|killHeartbeat
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numSlotsRequired
init|=
literal|1
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
name|taskIdOldApi
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
operator|.
name|downgrade
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|MapTask
argument_list|(
literal|"dummyjobfile"
argument_list|,
name|taskIdOldApi
argument_list|,
literal|0
argument_list|,
operator|new
name|TaskSplitIndex
argument_list|()
argument_list|,
name|numSlotsRequired
argument_list|)
decl_stmt|;
comment|// all byte counters are 0
name|TaskInfo
name|taskInfo
init|=
operator|new
name|TaskInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|MapTaskAttemptInfo
name|taskAttemptInfo
init|=
operator|new
name|MapTaskAttemptInfo
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taskInfo
argument_list|,
name|mapRuntime
argument_list|)
decl_stmt|;
name|TaskTrackerAction
name|action
init|=
operator|new
name|SimulatorLaunchTaskAction
argument_list|(
name|task
argument_list|,
name|taskAttemptInfo
argument_list|)
decl_stmt|;
name|heartbeats
operator|.
name|get
argument_list|(
name|mapStart
argument_list|)
operator|.
name|get
argument_list|(
name|taskTrackerName
argument_list|)
operator|.
name|addTaskTrackerAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
if|if
condition|(
name|isKilled
condition|)
block|{
name|action
operator|=
operator|new
name|KillTaskAction
argument_list|(
name|taskIdOldApi
argument_list|)
expr_stmt|;
name|heartbeats
operator|.
name|get
argument_list|(
name|killHeartbeat
argument_list|)
operator|.
name|get
argument_list|(
name|taskTrackerName
argument_list|)
operator|.
name|addTaskTrackerAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|simulationTime
init|=
name|mapStart
operator|+
name|heartbeatInterval
init|;
name|simulationTime
operator|<=
name|mapEndHeartbeat
condition|;
name|simulationTime
operator|+=
name|heartbeatInterval
control|)
block|{
name|State
name|state
init|=
name|simulationTime
operator|<
name|mapEndHeartbeat
condition|?
name|State
operator|.
name|RUNNING
else|:
name|State
operator|.
name|SUCCEEDED
decl_stmt|;
if|if
condition|(
name|simulationTime
operator|==
name|mapEndHeartbeat
operator|&&
name|isKilled
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|KILLED
expr_stmt|;
block|}
name|MapTaskStatus
name|mapStatus
init|=
operator|new
name|MapTaskStatus
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
argument_list|,
literal|0.0f
argument_list|,
literal|0
argument_list|,
name|state
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|Phase
operator|.
name|MAP
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|heartbeats
operator|.
name|get
argument_list|(
name|simulationTime
argument_list|)
operator|.
name|get
argument_list|(
name|taskTrackerName
argument_list|)
operator|.
name|addTaskReport
argument_list|(
name|mapStatus
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Fills in all the expected and return heartbeat parameters corresponding
comment|// to running a reduce task on a task tracker.
comment|// Use killTime<0 if not killed
DECL|method|runReduceTask (String taskTrackerName, TaskAttemptID taskId, long reduceStart, long mapDoneDelay, long reduceRuntime, long killHeartbeat)
specifier|public
name|void
name|runReduceTask
parameter_list|(
name|String
name|taskTrackerName
parameter_list|,
name|TaskAttemptID
name|taskId
parameter_list|,
name|long
name|reduceStart
parameter_list|,
name|long
name|mapDoneDelay
parameter_list|,
name|long
name|reduceRuntime
parameter_list|,
name|long
name|killHeartbeat
parameter_list|)
block|{
name|long
name|mapDone
init|=
name|nextHeartbeat
argument_list|(
name|reduceStart
operator|+
name|mapDoneDelay
argument_list|)
decl_stmt|;
name|long
name|reduceDone
init|=
name|mapDone
operator|+
name|reduceRuntime
decl_stmt|;
name|long
name|reduceEndHeartbeat
init|=
name|nextHeartbeat
argument_list|(
name|reduceDone
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isKilled
init|=
operator|(
name|killHeartbeat
operator|>=
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|isKilled
condition|)
block|{
name|reduceEndHeartbeat
operator|=
name|nextHeartbeat
argument_list|(
name|killHeartbeat
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"reduceStart="
operator|+
name|reduceStart
operator|+
literal|", mapDone="
operator|+
name|mapDone
operator|+
literal|", reduceDone="
operator|+
name|reduceDone
operator|+
literal|", reduceEndHeartbeat="
operator|+
name|reduceEndHeartbeat
operator|+
literal|", killHeartbeat="
operator|+
name|killHeartbeat
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numSlotsRequired
init|=
literal|1
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
name|taskIdOldApi
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskAttemptID
operator|.
name|downgrade
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|ReduceTask
argument_list|(
literal|"dummyjobfile"
argument_list|,
name|taskIdOldApi
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|numSlotsRequired
argument_list|)
decl_stmt|;
comment|// all byte counters are 0
name|TaskInfo
name|taskInfo
init|=
operator|new
name|TaskInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ReduceTaskAttemptInfo
name|taskAttemptInfo
init|=
operator|new
name|ReduceTaskAttemptInfo
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taskInfo
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|reduceRuntime
argument_list|)
decl_stmt|;
name|TaskTrackerAction
name|action
init|=
operator|new
name|SimulatorLaunchTaskAction
argument_list|(
name|task
argument_list|,
name|taskAttemptInfo
argument_list|)
decl_stmt|;
name|heartbeats
operator|.
name|get
argument_list|(
name|reduceStart
argument_list|)
operator|.
name|get
argument_list|(
name|taskTrackerName
argument_list|)
operator|.
name|addTaskTrackerAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isKilled
operator|||
name|mapDone
operator|<
name|killHeartbeat
condition|)
block|{
name|action
operator|=
operator|new
name|AllMapsCompletedTaskAction
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|heartbeats
operator|.
name|get
argument_list|(
name|mapDone
argument_list|)
operator|.
name|get
argument_list|(
name|taskTrackerName
argument_list|)
operator|.
name|addTaskTrackerAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isKilled
condition|)
block|{
name|action
operator|=
operator|new
name|KillTaskAction
argument_list|(
name|taskIdOldApi
argument_list|)
expr_stmt|;
name|heartbeats
operator|.
name|get
argument_list|(
name|killHeartbeat
argument_list|)
operator|.
name|get
argument_list|(
name|taskTrackerName
argument_list|)
operator|.
name|addTaskTrackerAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|simulationTime
init|=
name|reduceStart
operator|+
name|heartbeatInterval
init|;
name|simulationTime
operator|<=
name|reduceEndHeartbeat
condition|;
name|simulationTime
operator|+=
name|heartbeatInterval
control|)
block|{
name|State
name|state
init|=
name|simulationTime
operator|<
name|reduceEndHeartbeat
condition|?
name|State
operator|.
name|RUNNING
else|:
name|State
operator|.
name|SUCCEEDED
decl_stmt|;
if|if
condition|(
name|simulationTime
operator|==
name|reduceEndHeartbeat
operator|&&
name|isKilled
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|KILLED
expr_stmt|;
block|}
comment|// mapDone is when the all maps done event delivered
name|Phase
name|phase
init|=
name|simulationTime
operator|<=
name|mapDone
condition|?
name|Phase
operator|.
name|SHUFFLE
else|:
name|Phase
operator|.
name|REDUCE
decl_stmt|;
name|ReduceTaskStatus
name|reduceStatus
init|=
operator|new
name|ReduceTaskStatus
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
argument_list|,
literal|0.0f
argument_list|,
literal|0
argument_list|,
name|state
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|phase
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|heartbeats
operator|.
name|get
argument_list|(
name|simulationTime
argument_list|)
operator|.
name|get
argument_list|(
name|taskTrackerName
argument_list|)
operator|.
name|addTaskReport
argument_list|(
name|reduceStatus
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Should be called at the end of the simulation: Mock JT should have
comment|// consumed all entries from the heartbeats table by that time
DECL|method|checkMissingHeartbeats ()
specifier|public
name|void
name|checkMissingHeartbeats
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|heartbeats
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|lastHeartbeat
init|=
name|heartbeats
operator|.
name|firstKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Missing heartbeats, last heartbeat="
operator|+
name|lastHeartbeat
argument_list|,
name|heartbeats
operator|.
name|get
argument_list|(
name|lastHeartbeat
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// rounds up to the next heartbeat time
DECL|method|nextHeartbeat (long time)
specifier|public
name|long
name|nextHeartbeat
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|long
name|numHeartbeats
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|time
operator|-
name|simulationStartTime
operator|)
operator|/
operator|(
name|double
operator|)
name|heartbeatInterval
argument_list|)
decl_stmt|;
return|return
name|simulationStartTime
operator|+
name|numHeartbeats
operator|*
name|heartbeatInterval
return|;
block|}
comment|// Rest of InterTrackerProtocol follows, unused in simulation
annotation|@
name|Override
DECL|method|getFilesystemName ()
specifier|public
name|String
name|getFilesystemName
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|reportTaskTrackerError (String taskTracker, String errorClass, String errorMessage)
specifier|public
name|void
name|reportTaskTrackerError
parameter_list|(
name|String
name|taskTracker
parameter_list|,
name|String
name|errorClass
parameter_list|,
name|String
name|errorMessage
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getTaskCompletionEvents (JobID jobid, int fromEventId, int maxEvents)
specifier|public
name|TaskCompletionEvent
index|[]
name|getTaskCompletionEvents
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|int
name|fromEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getSystemDir ()
specifier|public
name|String
name|getSystemDir
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getStagingAreaDir ()
specifier|public
name|String
name|getStagingAreaDir
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getBuildVersion ()
specifier|public
name|String
name|getBuildVersion
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getTaskCompletionEvents ( org.apache.hadoop.mapred.JobID jobid, int fromEventId, int maxEvents)
specifier|public
name|TaskCompletionEvent
index|[]
name|getTaskCompletionEvents
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
name|jobid
parameter_list|,
name|int
name|fromEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getActiveTrackers ()
specifier|public
name|TaskTrackerInfo
index|[]
name|getActiveTrackers
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getAllJobs ()
specifier|public
name|JobStatus
index|[]
name|getAllJobs
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getBlacklistedTrackers ()
specifier|public
name|TaskTrackerInfo
index|[]
name|getBlacklistedTrackers
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getChildQueues (String queueName)
specifier|public
name|QueueInfo
index|[]
name|getChildQueues
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getClusterMetrics ()
specifier|public
name|ClusterMetrics
name|getClusterMetrics
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getJobCounters (JobID jobid)
specifier|public
name|Counters
name|getJobCounters
parameter_list|(
name|JobID
name|jobid
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getJobHistoryDir ()
specifier|public
name|String
name|getJobHistoryDir
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getJobStatus (JobID jobid)
specifier|public
name|JobStatus
name|getJobStatus
parameter_list|(
name|JobID
name|jobid
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getJobTrackerState ()
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|State
name|getJobTrackerState
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getJobTrackerStatus ()
specifier|public
name|JobTrackerStatus
name|getJobTrackerStatus
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getQueue (String queueName)
specifier|public
name|QueueInfo
name|getQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getQueueAclsForCurrentUser ()
specifier|public
name|QueueAclsInfo
index|[]
name|getQueueAclsForCurrentUser
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getQueues ()
specifier|public
name|QueueInfo
index|[]
name|getQueues
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getRootQueues ()
specifier|public
name|QueueInfo
index|[]
name|getRootQueues
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getQueueAdmins (String queueName)
specifier|public
name|AccessControlList
name|getQueueAdmins
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getTaskDiagnostics (TaskAttemptID taskId)
specifier|public
name|String
index|[]
name|getTaskDiagnostics
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getTaskReports (JobID jobid, TaskType type)
specifier|public
name|TaskReport
index|[]
name|getTaskReports
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|TaskType
name|type
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getTaskTrackerExpiryInterval ()
specifier|public
name|long
name|getTaskTrackerExpiryInterval
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|killJob (JobID jobid)
specifier|public
name|void
name|killJob
parameter_list|(
name|JobID
name|jobid
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|killTask (TaskAttemptID taskId, boolean shouldFail)
specifier|public
name|boolean
name|killTask
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|boolean
name|shouldFail
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|setJobPriority (JobID jobid, String priority)
specifier|public
name|void
name|setJobPriority
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|String
name|priority
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> token )
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{   }
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
DECL|method|getDelegationToken (Text renewer)
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> token )
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|this
argument_list|,
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
return|;
block|}
block|}
end_class

end_unit

