begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeJobs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSimulatorJobTracker
specifier|public
class|class
name|TestSimulatorJobTracker
block|{
DECL|field|taskTracker
name|SimulatorTaskTracker
name|taskTracker
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSimulatorJobTracker
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|createJobConf ()
specifier|public
name|JobConf
name|createJobConf
parameter_list|()
block|{
name|JobConf
name|jtConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jtConf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|"localhost:8012"
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|set
argument_list|(
literal|"mapred.jobtracker.job.history.block.size"
argument_list|,
literal|"512"
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|set
argument_list|(
literal|"mapred.jobtracker.job.history.buffer.size"
argument_list|,
literal|"512"
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|setLong
argument_list|(
literal|"mapred.tasktracker.expiry.interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|setInt
argument_list|(
literal|"mapred.reduce.copy.backoff"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|setLong
argument_list|(
literal|"mapred.job.reuse.jvm.num.tasks"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|setUser
argument_list|(
literal|"mumak"
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|set
argument_list|(
literal|"mapred.system.dir"
argument_list|,
name|jtConf
operator|.
name|get
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|,
literal|"/tmp/hadoop-"
operator|+
name|jtConf
operator|.
name|getUser
argument_list|()
argument_list|)
operator|+
literal|"/mapred/system"
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|set
argument_list|(
literal|"mapred.queue.names"
argument_list|,
name|JobConf
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|setBoolean
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created JobConf"
argument_list|)
expr_stmt|;
return|return
name|jtConf
return|;
block|}
DECL|class|FakeJobClient
specifier|public
specifier|static
class|class
name|FakeJobClient
block|{
DECL|field|jobTracker
name|ClientProtocol
name|jobTracker
decl_stmt|;
DECL|field|numMaps
name|int
name|numMaps
decl_stmt|;
DECL|field|numReduces
name|int
name|numReduces
decl_stmt|;
DECL|method|FakeJobClient (ClientProtocol jobTracker, int numMaps, int numReduces)
specifier|public
name|FakeJobClient
parameter_list|(
name|ClientProtocol
name|jobTracker
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReduces
parameter_list|)
block|{
name|this
operator|.
name|jobTracker
operator|=
name|jobTracker
expr_stmt|;
name|this
operator|.
name|numMaps
operator|=
name|numMaps
expr_stmt|;
name|this
operator|.
name|numReduces
operator|=
name|numReduces
expr_stmt|;
block|}
DECL|method|submitNewJob ()
specifier|public
name|void
name|submitNewJob
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobId
init|=
name|jobTracker
operator|.
name|getNewJobID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Obtained from Jobtracker jobid = "
operator|+
name|jobId
argument_list|)
expr_stmt|;
name|FakeJobs
name|job
init|=
operator|new
name|FakeJobs
argument_list|(
literal|"job1"
argument_list|,
literal|0
argument_list|,
name|numMaps
argument_list|,
name|numReduces
argument_list|)
decl_stmt|;
name|SimulatorJobCache
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobId
argument_list|)
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|submitJob
argument_list|(
name|jobId
argument_list|,
literal|"dummy-path"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FakeTaskTracker
specifier|public
specifier|static
class|class
name|FakeTaskTracker
extends|extends
name|SimulatorTaskTracker
block|{
DECL|field|firstHeartbeat
name|boolean
name|firstHeartbeat
init|=
literal|true
decl_stmt|;
DECL|field|responseId
name|short
name|responseId
init|=
literal|0
decl_stmt|;
DECL|field|now
name|int
name|now
init|=
literal|0
decl_stmt|;
DECL|method|FakeTaskTracker (InterTrackerProtocol jobTracker, Configuration conf)
name|FakeTaskTracker
parameter_list|(
name|InterTrackerProtocol
name|jobTracker
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|jobTracker
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FakeTaskTracker constructor, taskTrackerName="
operator|+
name|taskTrackerName
argument_list|)
expr_stmt|;
block|}
DECL|method|collectAndCloneTaskStatuses ()
specifier|private
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|collectAndCloneTaskStatuses
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TaskAttemptID
argument_list|>
name|mark
init|=
operator|new
name|HashSet
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SimulatorTaskInProgress
name|tip
range|:
name|tasks
operator|.
name|values
argument_list|()
control|)
block|{
name|statuses
operator|.
name|add
argument_list|(
operator|(
name|TaskStatus
operator|)
name|tip
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tip
operator|.
name|getFinalRunState
argument_list|()
operator|==
name|State
operator|.
name|SUCCEEDED
condition|)
block|{
name|mark
operator|.
name|add
argument_list|(
name|tip
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TaskAttemptID
name|taskId
range|:
name|mark
control|)
block|{
name|tasks
operator|.
name|remove
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
return|;
block|}
DECL|method|sendFakeHeartbeat (int current)
specifier|public
name|int
name|sendFakeHeartbeat
parameter_list|(
name|int
name|current
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numLaunchTaskActions
init|=
literal|0
decl_stmt|;
name|this
operator|.
name|now
operator|=
name|current
expr_stmt|;
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|taskStatuses
init|=
name|collectAndCloneTaskStatuses
argument_list|()
decl_stmt|;
name|TaskTrackerStatus
name|taskTrackerStatus
init|=
operator|new
name|SimulatorTaskTrackerStatus
argument_list|(
name|taskTrackerName
argument_list|,
name|hostName
argument_list|,
name|httpPort
argument_list|,
name|taskStatuses
argument_list|,
literal|0
argument_list|,
name|maxMapSlots
argument_list|,
name|maxReduceSlots
argument_list|,
name|this
operator|.
name|now
argument_list|)
decl_stmt|;
comment|// Transmit the heartbeat
name|HeartbeatResponse
name|response
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"sending heartbeat at time = "
operator|+
name|this
operator|.
name|now
operator|+
literal|" responseId = "
operator|+
name|responseId
argument_list|)
expr_stmt|;
name|response
operator|=
name|jobTracker
operator|.
name|heartbeat
argument_list|(
name|taskTrackerStatus
argument_list|,
literal|false
argument_list|,
name|firstHeartbeat
argument_list|,
literal|true
argument_list|,
name|responseId
argument_list|)
expr_stmt|;
name|firstHeartbeat
operator|=
literal|false
expr_stmt|;
name|responseId
operator|=
name|response
operator|.
name|getResponseId
argument_list|()
expr_stmt|;
name|numLaunchTaskActions
operator|=
name|findLaunchTaskActions
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return
name|numLaunchTaskActions
return|;
block|}
DECL|method|findLaunchTaskActions (HeartbeatResponse response)
name|int
name|findLaunchTaskActions
parameter_list|(
name|HeartbeatResponse
name|response
parameter_list|)
block|{
name|TaskTrackerAction
index|[]
name|actions
init|=
name|response
operator|.
name|getActions
argument_list|()
decl_stmt|;
name|int
name|numLaunchTaskActions
init|=
literal|0
decl_stmt|;
comment|// HashSet<> numLaunchTaskActions
for|for
control|(
name|TaskTrackerAction
name|action
range|:
name|actions
control|)
block|{
if|if
condition|(
name|action
operator|instanceof
name|SimulatorLaunchTaskAction
condition|)
block|{
name|Task
name|task
init|=
operator|(
operator|(
name|SimulatorLaunchTaskAction
operator|)
name|action
operator|)
operator|.
name|getTask
argument_list|()
decl_stmt|;
name|numLaunchTaskActions
operator|++
expr_stmt|;
name|TaskAttemptID
name|taskId
init|=
name|task
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
if|if
condition|(
name|tasks
operator|.
name|containsKey
argument_list|(
name|taskId
argument_list|)
condition|)
block|{
comment|// already have this task..do not need to generate new status
continue|continue;
block|}
name|TaskStatus
name|status
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
name|status
operator|=
operator|new
name|MapTaskStatus
argument_list|(
name|taskId
argument_list|,
literal|0f
argument_list|,
literal|1
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|taskTrackerName
argument_list|,
name|Phase
operator|.
name|MAP
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
operator|new
name|ReduceTaskStatus
argument_list|(
name|taskId
argument_list|,
literal|0f
argument_list|,
literal|1
argument_list|,
name|State
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|taskTrackerName
argument_list|,
name|Phase
operator|.
name|SHUFFLE
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|status
operator|.
name|setRunState
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStartTime
argument_list|(
name|this
operator|.
name|now
argument_list|)
expr_stmt|;
name|SimulatorTaskInProgress
name|tip
init|=
operator|new
name|SimulatorTaskInProgress
argument_list|(
operator|(
name|SimulatorLaunchTaskAction
operator|)
name|action
argument_list|,
name|status
argument_list|,
name|this
operator|.
name|now
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|put
argument_list|(
name|taskId
argument_list|,
name|tip
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|numLaunchTaskActions
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTrackerInteraction ()
specifier|public
name|void
name|testTrackerInteraction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing Inter Tracker protocols"
argument_list|)
expr_stmt|;
name|int
name|now
init|=
literal|0
decl_stmt|;
name|JobConf
name|jtConf
init|=
name|createJobConf
argument_list|()
decl_stmt|;
name|int
name|NoMaps
init|=
literal|2
decl_stmt|;
name|int
name|NoReduces
init|=
literal|10
decl_stmt|;
comment|// jtConf.set("mapred.jobtracker.taskScheduler",
comment|// DummyTaskScheduler.class.getName());
name|jtConf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
literal|"file:///"
argument_list|)
expr_stmt|;
name|jtConf
operator|.
name|set
argument_list|(
literal|"mapred.jobtracker.taskScheduler"
argument_list|,
name|JobQueueTaskScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SimulatorJobTracker
name|sjobTracker
init|=
name|SimulatorJobTracker
operator|.
name|startTracker
argument_list|(
name|jtConf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created the SimulatorJobTracker successfully"
argument_list|)
expr_stmt|;
name|sjobTracker
operator|.
name|offerService
argument_list|()
expr_stmt|;
name|FakeJobClient
name|jbc
init|=
operator|new
name|FakeJobClient
argument_list|(
name|sjobTracker
argument_list|,
name|NoMaps
argument_list|,
name|NoReduces
argument_list|)
decl_stmt|;
name|int
name|NoJobs
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NoJobs
condition|;
name|i
operator|++
control|)
block|{
name|jbc
operator|.
name|submitNewJob
argument_list|()
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
index|[]
name|allJobs
init|=
name|sjobTracker
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"allJobs queue length is "
operator|+
name|allJobs
operator|.
name|length
argument_list|,
name|allJobs
operator|.
name|length
operator|>=
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
name|js
range|:
name|allJobs
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"From JTQueue: job id = "
operator|+
name|js
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|ttConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ttConf
operator|.
name|set
argument_list|(
literal|"mumak.tasktracker.tracker.name"
argument_list|,
literal|"tracker_host1.foo.com:localhost/127.0.0.1:9010"
argument_list|)
expr_stmt|;
name|ttConf
operator|.
name|set
argument_list|(
literal|"mumak.tasktracker.host.name"
argument_list|,
literal|"host1.foo.com"
argument_list|)
expr_stmt|;
name|ttConf
operator|.
name|setInt
argument_list|(
literal|"mapred.tasktracker.map.tasks.maximum"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|ttConf
operator|.
name|setInt
argument_list|(
literal|"mapred.tasktracker.reduce.tasks.maximum"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|ttConf
operator|.
name|setInt
argument_list|(
literal|"mumak.tasktracker.heartbeat.fuzz"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|FakeTaskTracker
name|fakeTracker
init|=
operator|new
name|FakeTaskTracker
argument_list|(
name|sjobTracker
argument_list|,
name|ttConf
argument_list|)
decl_stmt|;
name|int
name|numLaunchTaskActions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NoMaps
operator|*
literal|2
condition|;
operator|++
name|i
control|)
block|{
comment|// we should be able to assign all
comment|// tasks within 2X of NoMaps
comment|// heartbeats
name|numLaunchTaskActions
operator|+=
name|fakeTracker
operator|.
name|sendFakeHeartbeat
argument_list|(
name|now
argument_list|)
expr_stmt|;
if|if
condition|(
name|numLaunchTaskActions
operator|>=
name|NoMaps
condition|)
block|{
break|break;
block|}
name|now
operator|+=
literal|5
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of MapLaunchTasks="
operator|+
name|numLaunchTaskActions
operator|+
literal|" now = "
operator|+
name|now
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failed to launch all maps: "
operator|+
name|numLaunchTaskActions
argument_list|,
name|numLaunchTaskActions
operator|>=
name|NoMaps
argument_list|)
expr_stmt|;
comment|// sending the completed status
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending task completed status"
argument_list|)
expr_stmt|;
name|numLaunchTaskActions
operator|+=
name|fakeTracker
operator|.
name|sendFakeHeartbeat
argument_list|(
name|now
argument_list|)
expr_stmt|;
comment|// now for the reduce tasks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NoReduces
operator|*
literal|2
condition|;
operator|++
name|i
control|)
block|{
comment|// we should be able to assign all
comment|// tasks within 2X of NoReduces
comment|// heartbeats
if|if
condition|(
name|numLaunchTaskActions
operator|>=
name|NoMaps
operator|+
name|NoReduces
condition|)
block|{
break|break;
block|}
name|numLaunchTaskActions
operator|+=
name|fakeTracker
operator|.
name|sendFakeHeartbeat
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|now
operator|+=
literal|5
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of ReduceLaunchTasks="
operator|+
name|numLaunchTaskActions
operator|+
literal|" now = "
operator|+
name|now
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Failed to launch all reduces: "
operator|+
name|numLaunchTaskActions
argument_list|,
name|numLaunchTaskActions
operator|>=
name|NoMaps
operator|+
name|NoReduces
argument_list|)
expr_stmt|;
comment|// sending the reduce completion
name|numLaunchTaskActions
operator|+=
name|fakeTracker
operator|.
name|sendFakeHeartbeat
argument_list|(
name|now
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

