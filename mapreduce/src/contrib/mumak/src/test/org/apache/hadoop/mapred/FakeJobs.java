begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|MapTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Pre21JobHistoryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ReduceTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskInfo
import|;
end_import

begin_comment
comment|/**  * {@link JobStory} represents the runtime information available for a  * completed Map-Reduce job.  */
end_comment

begin_class
DECL|class|FakeJobs
specifier|public
class|class
name|FakeJobs
implements|implements
name|JobStory
block|{
DECL|field|jobName
name|String
name|jobName
decl_stmt|;
DECL|field|submissionTime
name|long
name|submissionTime
init|=
literal|0
decl_stmt|;
DECL|field|maps
name|int
name|maps
init|=
literal|0
decl_stmt|;
DECL|field|reduces
name|int
name|reduces
init|=
literal|0
decl_stmt|;
DECL|field|random
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|FakeJobs (String name, long submissionTime, int nmaps, int nreduces)
specifier|public
name|FakeJobs
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|submissionTime
parameter_list|,
name|int
name|nmaps
parameter_list|,
name|int
name|nreduces
parameter_list|)
block|{
name|jobName
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|submissionTime
operator|=
name|submissionTime
expr_stmt|;
name|this
operator|.
name|maps
operator|=
name|nmaps
expr_stmt|;
name|this
operator|.
name|reduces
operator|=
name|nreduces
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|jobName
return|;
block|}
DECL|method|getJobID ()
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 * Get the user who ran the job. 	 * @return the user who ran the job 	 */
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
literal|"mumak"
return|;
block|}
comment|/** 	 * Get the job submission time. 	 * @return the job submission time 	 */
DECL|method|getSubmissionTime ()
specifier|public
name|long
name|getSubmissionTime
parameter_list|()
block|{
return|return
name|submissionTime
return|;
block|}
comment|/** 	 * Get the number of maps in the {@link JobStory}. 	 * @return the number of maps in the<code>Job</code> 	 */
DECL|method|getNumberMaps ()
specifier|public
name|int
name|getNumberMaps
parameter_list|()
block|{
return|return
name|maps
return|;
block|}
comment|/** 	 * Get the number of reduce in the {@link JobStory}. 	 * @return the number of reduces in the<code>Job</code> 	 */
DECL|method|getNumberReduces ()
specifier|public
name|int
name|getNumberReduces
parameter_list|()
block|{
return|return
name|reduces
return|;
block|}
comment|/** 	 * Get the input splits for the job. 	 * @return the input splits for the job 	 */
DECL|method|getInputSplits ()
specifier|public
name|InputSplit
index|[]
name|getInputSplits
parameter_list|()
block|{
name|InputSplit
index|[]
name|retval
init|=
operator|new
name|InputSplit
index|[
name|getNumberMaps
argument_list|()
index|]
decl_stmt|;
name|FileSplit
name|tmp
init|=
operator|new
name|FileSplit
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retval
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|retval
index|[
name|i
index|]
operator|=
name|tmp
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/** 	 * Get {@link TaskInfo} for a given task. 	 * @param taskType {@link TaskType} of the task 	 * @param taskNumber Partition number of the task 	 * @return the<code>TaskInfo</code> for the given task 	 */
DECL|method|getTaskInfo (TaskType taskType, int taskNumber)
specifier|public
name|TaskInfo
name|getTaskInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/** 	 * Get {@link TaskAttemptInfo} for a given task-attempt. 	 * @param taskType {@link TaskType} of the task-attempt 	 * @param taskNumber Partition number of the task-attempt 	 * @param taskAttemptNumber Attempt number of the task 	 * @return the<code>TaskAttemptInfo</code> for the given task-attempt 	 */
DECL|method|getTaskAttemptInfo (TaskType taskType, int taskNumber, int taskAttemptNumber)
specifier|public
name|TaskAttemptInfo
name|getTaskAttemptInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|,
name|int
name|taskAttemptNumber
parameter_list|)
block|{
name|int
name|bytesin
init|=
name|random
operator|.
name|nextInt
argument_list|()
operator|%
literal|10000
decl_stmt|;
name|int
name|recsin
init|=
name|bytesin
operator|/
literal|10
decl_stmt|;
name|int
name|bytesout
init|=
call|(
name|int
call|)
argument_list|(
name|bytesin
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|int
name|recsout
init|=
name|bytesout
operator|/
literal|10
decl_stmt|;
name|int
name|maxMem
init|=
literal|1000000
decl_stmt|;
name|long
name|mapRunTime
init|=
literal|5678
decl_stmt|;
name|long
name|reduceShuffleTime
init|=
literal|0
decl_stmt|;
name|long
name|reduceSortTime
init|=
literal|0
decl_stmt|;
name|long
name|reduceRunTime
init|=
literal|1234
decl_stmt|;
name|TaskInfo
name|task
init|=
operator|new
name|TaskInfo
argument_list|(
name|bytesin
argument_list|,
name|recsin
argument_list|,
name|bytesout
argument_list|,
name|recsout
argument_list|,
name|maxMem
argument_list|)
decl_stmt|;
name|TaskAttemptInfo
name|tAInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|tAInfo
operator|=
operator|new
name|MapTaskAttemptInfo
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|task
argument_list|,
name|mapRunTime
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|tAInfo
operator|=
operator|new
name|ReduceTaskAttemptInfo
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|task
argument_list|,
name|reduceShuffleTime
argument_list|,
name|reduceSortTime
argument_list|,
name|reduceRunTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported TaskType "
operator|+
name|taskType
argument_list|)
throw|;
block|}
return|return
name|tAInfo
return|;
block|}
DECL|method|getJobConf ()
specifier|public
name|JobConf
name|getJobConf
parameter_list|()
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|setJobName
argument_list|(
name|jobName
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setUser
argument_list|(
literal|"mumak"
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
name|maps
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
name|reduces
argument_list|)
expr_stmt|;
return|return
name|jobConf
return|;
block|}
annotation|@
name|Override
DECL|method|getMapTaskAttemptInfoAdjusted (int taskNumber, int taskAttemptNumber, int locality)
specifier|public
name|TaskAttemptInfo
name|getMapTaskAttemptInfoAdjusted
parameter_list|(
name|int
name|taskNumber
parameter_list|,
name|int
name|taskAttemptNumber
parameter_list|,
name|int
name|locality
parameter_list|)
block|{
return|return
name|getTaskAttemptInfo
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|taskNumber
argument_list|,
name|taskAttemptNumber
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOutcome ()
specifier|public
name|Pre21JobHistoryConstants
operator|.
name|Values
name|getOutcome
parameter_list|()
block|{
return|return
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|JobConf
operator|.
name|DEFAULT_QUEUE_NAME
return|;
block|}
block|}
end_class

end_unit

