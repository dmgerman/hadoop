begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|BlockPlacementPolicyRaid
operator|.
name|CachedFullPathNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|BlockPlacementPolicyRaid
operator|.
name|CachedLocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|BlockPlacementPolicyRaid
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|RaidNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestBlockPlacementPolicyRaid
specifier|public
class|class
name|TestBlockPlacementPolicyRaid
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
init|=
literal|null
decl_stmt|;
DECL|field|namesystem
specifier|private
name|FSNamesystem
name|namesystem
init|=
literal|null
decl_stmt|;
DECL|field|policy
specifier|private
name|BlockPlacementPolicyRaid
name|policy
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|rack1
name|String
index|[]
name|rack1
init|=
block|{
literal|"/rack1"
block|}
decl_stmt|;
DECL|field|rack2
name|String
index|[]
name|rack2
init|=
block|{
literal|"/rack2"
block|}
decl_stmt|;
DECL|field|host1
name|String
index|[]
name|host1
init|=
block|{
literal|"host1.rack1.com"
block|}
decl_stmt|;
DECL|field|host2
name|String
index|[]
name|host2
init|=
block|{
literal|"host2.rack2.com"
block|}
decl_stmt|;
DECL|field|xorPrefix
name|String
name|xorPrefix
init|=
literal|null
decl_stmt|;
DECL|field|raidTempPrefix
name|String
name|raidTempPrefix
init|=
literal|null
decl_stmt|;
DECL|field|raidrsTempPrefix
name|String
name|raidrsTempPrefix
init|=
literal|null
decl_stmt|;
DECL|field|raidrsHarTempPrefix
name|String
name|raidrsHarTempPrefix
init|=
literal|null
decl_stmt|;
DECL|field|LOG
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBlockPlacementPolicyRaid
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|setupCluster ()
specifier|protected
name|void
name|setupCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCKREPORT_INTERVAL_MSEC_KEY
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.replication.pending.timeout.sec"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_SIZE_KEY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.block.replicator.classname"
argument_list|,
literal|"org.apache.hadoop.hdfs.server.namenode.BlockPlacementPolicyRaid"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RaidNode
operator|.
name|STRIPE_LENGTH_KEY
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RaidNode
operator|.
name|RS_PARITY_LENGTH_KEY
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_BYTES_PER_CHECKSUM_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// start the cluster with one datanode first
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|format
argument_list|(
literal|true
argument_list|)
operator|.
name|racks
argument_list|(
name|rack1
argument_list|)
operator|.
name|hosts
argument_list|(
name|host1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|namesystem
operator|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"BlockPlacementPolicy type is not correct."
argument_list|,
name|namesystem
operator|.
name|blockManager
operator|.
name|replicator
operator|instanceof
name|BlockPlacementPolicyRaid
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|(
name|BlockPlacementPolicyRaid
operator|)
name|namesystem
operator|.
name|blockManager
operator|.
name|replicator
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|xorPrefix
operator|=
name|RaidNode
operator|.
name|xorDestinationPath
argument_list|(
name|conf
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|raidTempPrefix
operator|=
name|RaidNode
operator|.
name|xorTempPrefix
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|raidrsTempPrefix
operator|=
name|RaidNode
operator|.
name|rsTempPrefix
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|raidrsHarTempPrefix
operator|=
name|RaidNode
operator|.
name|rsHarTempPrefix
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that the parity files will be placed at the good locations when we    * create them.    */
annotation|@
name|Test
DECL|method|testChooseTargetForRaidFile ()
specifier|public
name|void
name|testChooseTargetForRaidFile
parameter_list|()
throws|throws
name|IOException
block|{
name|setupCluster
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|src
init|=
literal|"/dir/file"
decl_stmt|;
name|String
name|parity
init|=
name|raidrsTempPrefix
operator|+
name|src
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
literal|4
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|refreshPolicy
argument_list|()
expr_stmt|;
name|setBlockPlacementPolicy
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|)
expr_stmt|;
comment|// start 3 more datanodes
name|String
index|[]
name|racks
init|=
block|{
literal|"/rack2"
block|,
literal|"/rack2"
block|,
literal|"/rack2"
block|,
literal|"/rack2"
block|,
literal|"/rack2"
block|,
literal|"/rack2"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
block|{
literal|"host2.rack2.com"
block|,
literal|"host3.rack2.com"
block|,
literal|"host4.rack2.com"
block|,
literal|"host5.rack2.com"
block|,
literal|"host6.rack2.com"
block|,
literal|"host7.rack2.com"
block|}
decl_stmt|;
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|numBlocks
init|=
literal|6
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|parity
argument_list|)
argument_list|,
name|numBlocks
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|parity
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|FileStatus
name|srcStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|srcLoc
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|srcStat
argument_list|,
literal|0
argument_list|,
name|srcStat
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|parityStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|parity
argument_list|)
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|parityLoc
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|parityStat
argument_list|,
literal|0
argument_list|,
name|parityStat
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|parityLen
init|=
name|RaidNode
operator|.
name|rsParityLength
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
operator|/
name|parityLen
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|srcLoc
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
index|[]
name|names
init|=
name|srcLoc
index|[
name|j
index|]
operator|.
name|getNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|names
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Source block location: "
operator|+
name|names
index|[
name|k
index|]
argument_list|)
expr_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|names
index|[
name|k
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parityLen
condition|;
name|j
operator|++
control|)
block|{
name|String
index|[]
name|names
init|=
name|parityLoc
index|[
name|j
operator|+
name|i
operator|*
name|parityLen
index|]
operator|.
name|getNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|names
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Parity block location: "
operator|+
name|names
index|[
name|k
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|locations
operator|.
name|add
argument_list|(
name|names
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that the har parity files will be placed at the good locations when we    * create them.    */
annotation|@
name|Test
DECL|method|testChooseTargetForHarRaidFile ()
specifier|public
name|void
name|testChooseTargetForHarRaidFile
parameter_list|()
throws|throws
name|IOException
block|{
name|setupCluster
argument_list|()
expr_stmt|;
try|try
block|{
name|String
index|[]
name|racks
init|=
block|{
literal|"/rack2"
block|,
literal|"/rack2"
block|,
literal|"/rack2"
block|,
literal|"/rack2"
block|,
literal|"/rack2"
block|,
literal|"/rack2"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
block|{
literal|"host2.rack2.com"
block|,
literal|"host3.rack2.com"
block|,
literal|"host4.rack2.com"
block|,
literal|"host5.rack2.com"
block|,
literal|"host6.rack2.com"
block|,
literal|"host7.rack2.com"
block|}
decl_stmt|;
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|harParity
init|=
name|raidrsHarTempPrefix
operator|+
literal|"/dir/file"
decl_stmt|;
name|int
name|numBlocks
init|=
literal|11
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|harParity
argument_list|)
argument_list|,
name|numBlocks
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|harParity
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|harParity
argument_list|)
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|loc
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|stat
argument_list|,
literal|0
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|rsParityLength
init|=
name|RaidNode
operator|.
name|rsParityLength
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
operator|-
name|rsParityLength
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rsParityLength
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|loc
index|[
name|i
operator|+
name|j
index|]
operator|.
name|getNames
argument_list|()
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
comment|// verify that every adjacent 4 blocks are on differnt nodes
name|String
name|name
init|=
name|loc
index|[
name|i
operator|+
name|j
index|]
operator|.
name|getNames
argument_list|()
index|[
name|k
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Har Raid block location: "
operator|+
name|name
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|locations
operator|.
name|add
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test BlockPlacementPolicyRaid.CachedLocatedBlocks    * Verify that the results obtained from cache is the same as    * the results obtained directly    */
annotation|@
name|Test
DECL|method|testCachedBlocks ()
specifier|public
name|void
name|testCachedBlocks
parameter_list|()
throws|throws
name|IOException
block|{
name|setupCluster
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|file1
init|=
literal|"/dir/file1"
decl_stmt|;
name|String
name|file2
init|=
literal|"/dir/file2"
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|file1
argument_list|)
argument_list|,
literal|3
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|file2
argument_list|)
argument_list|,
literal|4
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// test blocks cache
name|CachedLocatedBlocks
name|cachedBlocks
init|=
operator|new
name|CachedLocatedBlocks
argument_list|(
name|namesystem
argument_list|)
decl_stmt|;
name|verifyCachedBlocksResult
argument_list|(
name|cachedBlocks
argument_list|,
name|namesystem
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|verifyCachedBlocksResult
argument_list|(
name|cachedBlocks
argument_list|,
name|namesystem
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|verifyCachedBlocksResult
argument_list|(
name|cachedBlocks
argument_list|,
name|namesystem
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|verifyCachedBlocksResult
argument_list|(
name|cachedBlocks
argument_list|,
name|namesystem
argument_list|,
name|file2
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1200L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
name|verifyCachedBlocksResult
argument_list|(
name|cachedBlocks
argument_list|,
name|namesystem
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|verifyCachedBlocksResult
argument_list|(
name|cachedBlocks
argument_list|,
name|namesystem
argument_list|,
name|file1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test BlockPlacementPolicyRaid.CachedFullPathNames    * Verify that the results obtained from cache is the same as    * the results obtained directly    */
annotation|@
name|Test
DECL|method|testCachedPathNames ()
specifier|public
name|void
name|testCachedPathNames
parameter_list|()
throws|throws
name|IOException
block|{
name|setupCluster
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|file1
init|=
literal|"/dir/file1"
decl_stmt|;
name|String
name|file2
init|=
literal|"/dir/file2"
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|file1
argument_list|)
argument_list|,
literal|3
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|file2
argument_list|)
argument_list|,
literal|4
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// test full path cache
name|CachedFullPathNames
name|cachedFullPathNames
init|=
operator|new
name|CachedFullPathNames
argument_list|(
name|namesystem
argument_list|)
decl_stmt|;
name|FSInodeInfo
name|inode1
init|=
literal|null
decl_stmt|;
name|FSInodeInfo
name|inode2
init|=
literal|null
decl_stmt|;
name|namesystem
operator|.
name|dir
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
name|inode1
operator|=
name|namesystem
operator|.
name|dir
operator|.
name|rootDir
operator|.
name|getNode
argument_list|(
name|file1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|inode2
operator|=
name|namesystem
operator|.
name|dir
operator|.
name|rootDir
operator|.
name|getNode
argument_list|(
name|file2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|dir
operator|.
name|readUnlock
argument_list|()
expr_stmt|;
block|}
name|verifyCachedFullPathNameResult
argument_list|(
name|cachedFullPathNames
argument_list|,
name|inode1
argument_list|)
expr_stmt|;
name|verifyCachedFullPathNameResult
argument_list|(
name|cachedFullPathNames
argument_list|,
name|inode1
argument_list|)
expr_stmt|;
name|verifyCachedFullPathNameResult
argument_list|(
name|cachedFullPathNames
argument_list|,
name|inode2
argument_list|)
expr_stmt|;
name|verifyCachedFullPathNameResult
argument_list|(
name|cachedFullPathNames
argument_list|,
name|inode2
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1200L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
name|verifyCachedFullPathNameResult
argument_list|(
name|cachedFullPathNames
argument_list|,
name|inode2
argument_list|)
expr_stmt|;
name|verifyCachedFullPathNameResult
argument_list|(
name|cachedFullPathNames
argument_list|,
name|inode1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test the result of getCompanionBlocks() on the unraided files    */
annotation|@
name|Test
DECL|method|testGetCompanionBLocks ()
specifier|public
name|void
name|testGetCompanionBLocks
parameter_list|()
throws|throws
name|IOException
block|{
name|setupCluster
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|file1
init|=
literal|"/dir/file1"
decl_stmt|;
name|String
name|file2
init|=
literal|"/raid/dir/file2"
decl_stmt|;
name|String
name|file3
init|=
literal|"/raidrs/dir/file3"
decl_stmt|;
comment|// Set the policy to default policy to place the block in the default way
name|setBlockPlacementPolicy
argument_list|(
name|namesystem
argument_list|,
operator|new
name|BlockPlacementPolicyDefault
argument_list|(
name|conf
argument_list|,
name|namesystem
argument_list|,
name|namesystem
operator|.
name|clusterMap
argument_list|)
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|file1
argument_list|)
argument_list|,
literal|3
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|file2
argument_list|)
argument_list|,
literal|4
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|file3
argument_list|)
argument_list|,
literal|8
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|LocatedBlock
argument_list|>
name|companionBlocks
decl_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|getBlocks
argument_list|(
name|namesystem
argument_list|,
name|file1
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|companionBlocks
operator|==
literal|null
operator|||
name|companionBlocks
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|getBlocks
argument_list|(
name|namesystem
argument_list|,
name|file1
argument_list|)
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|companionBlocks
operator|==
literal|null
operator|||
name|companionBlocks
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|getBlocks
argument_list|(
name|namesystem
argument_list|,
name|file2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|companionBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|getBlocks
argument_list|(
name|namesystem
argument_list|,
name|file2
argument_list|)
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|companionBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|rsParityLength
init|=
name|RaidNode
operator|.
name|rsParityLength
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|getBlocks
argument_list|(
name|namesystem
argument_list|,
name|file3
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rsParityLength
argument_list|,
name|companionBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|getBlocks
argument_list|(
name|namesystem
argument_list|,
name|file3
argument_list|)
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rsParityLength
argument_list|,
name|companionBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|getBlocks
argument_list|(
name|namesystem
argument_list|,
name|file3
argument_list|)
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|companionBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setBlockPlacementPolicy ( FSNamesystem namesystem, BlockPlacementPolicy policy)
specifier|static
name|void
name|setBlockPlacementPolicy
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|BlockPlacementPolicy
name|policy
parameter_list|)
block|{
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
name|namesystem
operator|.
name|blockManager
operator|.
name|replicator
operator|=
name|policy
expr_stmt|;
block|}
finally|finally
block|{
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test BlockPlacementPolicyRaid actually deletes the correct replica.    * Start 2 datanodes and create 1 source file and its parity file.    * 1) Start host1, create the parity file with replication 1    * 2) Start host2, create the source file with replication 2    * 3) Set repliation of source file to 1    * Verify that the policy should delete the block with more companion blocks.    */
annotation|@
name|Test
DECL|method|testDeleteReplica ()
specifier|public
name|void
name|testDeleteReplica
parameter_list|()
throws|throws
name|IOException
block|{
name|setupCluster
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Set the policy to default policy to place the block in the default way
name|setBlockPlacementPolicy
argument_list|(
name|namesystem
argument_list|,
operator|new
name|BlockPlacementPolicyDefault
argument_list|(
name|conf
argument_list|,
name|namesystem
argument_list|,
name|namesystem
operator|.
name|clusterMap
argument_list|)
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|datanode1
init|=
name|namesystem
operator|.
name|datanodeMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|source
init|=
literal|"/dir/file"
decl_stmt|;
name|String
name|parity
init|=
name|xorPrefix
operator|+
name|source
decl_stmt|;
specifier|final
name|Path
name|parityPath
init|=
operator|new
name|Path
argument_list|(
name|parity
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|parityPath
argument_list|,
literal|3
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|parityPath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
comment|// start one more datanode
name|cluster
operator|.
name|startDataNodes
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|rack2
argument_list|,
name|host2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|datanode2
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DatanodeDescriptor
name|d
range|:
name|namesystem
operator|.
name|datanodeMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|datanode1
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|datanode2
operator|=
name|d
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|datanode2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
specifier|final
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|sourcePath
argument_list|,
literal|5
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|sourcePath
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|refreshPolicy
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parity
argument_list|,
name|policy
operator|.
name|getParityFile
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|source
argument_list|,
name|policy
operator|.
name|getSourceFile
argument_list|(
name|parity
argument_list|,
name|xorPrefix
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|sourceBlocks
init|=
name|getBlocks
argument_list|(
name|namesystem
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|parityBlocks
init|=
name|getBlocks
argument_list|(
name|namesystem
argument_list|,
name|parity
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|sourceBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parityBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify the result of getCompanionBlocks()
name|Collection
argument_list|<
name|LocatedBlock
argument_list|>
name|companionBlocks
decl_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|sourceBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCompanionBlocks
argument_list|(
name|companionBlocks
argument_list|,
name|sourceBlocks
argument_list|,
name|parityBlocks
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|sourceBlocks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCompanionBlocks
argument_list|(
name|companionBlocks
argument_list|,
name|sourceBlocks
argument_list|,
name|parityBlocks
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|sourceBlocks
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCompanionBlocks
argument_list|(
name|companionBlocks
argument_list|,
name|sourceBlocks
argument_list|,
name|parityBlocks
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|sourceBlocks
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCompanionBlocks
argument_list|(
name|companionBlocks
argument_list|,
name|sourceBlocks
argument_list|,
name|parityBlocks
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|sourceBlocks
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCompanionBlocks
argument_list|(
name|companionBlocks
argument_list|,
name|sourceBlocks
argument_list|,
name|parityBlocks
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|parityBlocks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCompanionBlocks
argument_list|(
name|companionBlocks
argument_list|,
name|sourceBlocks
argument_list|,
name|parityBlocks
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|parityBlocks
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCompanionBlocks
argument_list|(
name|companionBlocks
argument_list|,
name|sourceBlocks
argument_list|,
name|parityBlocks
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
expr_stmt|;
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|parityBlocks
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|verifyCompanionBlocks
argument_list|(
name|companionBlocks
argument_list|,
name|sourceBlocks
argument_list|,
name|parityBlocks
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|)
expr_stmt|;
comment|// Set the policy back to raid policy. We have to create a new object
comment|// here to clear the block location cache
name|refreshPolicy
argument_list|()
expr_stmt|;
name|setBlockPlacementPolicy
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|)
expr_stmt|;
comment|// verify policy deletes the correct blocks. companion blocks should be
comment|// evenly distributed.
name|fs
operator|.
name|setReplication
argument_list|(
name|sourcePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitReplication
argument_list|(
name|fs
argument_list|,
name|sourcePath
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|counters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|refreshPolicy
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parityBlocks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|companionBlocks
operator|=
name|getCompanionBlocks
argument_list|(
name|namesystem
argument_list|,
name|policy
argument_list|,
name|parityBlocks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|counters
operator|=
name|BlockPlacementPolicyRaid
operator|.
name|countCompanionBlocks
argument_list|(
name|companionBlocks
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|counters
operator|.
name|get
argument_list|(
name|datanode1
operator|.
name|getName
argument_list|()
argument_list|)
operator|>=
literal|1
operator|&&
name|counters
operator|.
name|get
argument_list|(
name|datanode1
operator|.
name|getName
argument_list|()
argument_list|)
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|counters
operator|.
name|get
argument_list|(
name|datanode1
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
name|counters
operator|.
name|get
argument_list|(
name|datanode2
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
name|companionBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|counters
operator|=
name|BlockPlacementPolicyRaid
operator|.
name|countCompanionBlocks
argument_list|(
name|companionBlocks
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|counters
operator|.
name|get
argument_list|(
name|datanode1
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|>=
literal|1
operator|&&
name|counters
operator|.
name|get
argument_list|(
name|datanode1
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|counters
operator|.
name|get
argument_list|(
name|datanode1
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
name|counters
operator|.
name|get
argument_list|(
name|datanode2
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
name|companionBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// create a new BlockPlacementPolicyRaid to clear the cache
DECL|method|refreshPolicy ()
specifier|private
name|void
name|refreshPolicy
parameter_list|()
block|{
name|policy
operator|=
operator|new
name|BlockPlacementPolicyRaid
argument_list|()
expr_stmt|;
name|policy
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|namesystem
argument_list|,
name|namesystem
operator|.
name|clusterMap
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyCompanionBlocks (Collection<LocatedBlock> companionBlocks, List<LocatedBlock> sourceBlocks, List<LocatedBlock> parityBlocks, int[] sourceBlockIndexes, int[] parityBlockIndexes)
specifier|private
name|void
name|verifyCompanionBlocks
parameter_list|(
name|Collection
argument_list|<
name|LocatedBlock
argument_list|>
name|companionBlocks
parameter_list|,
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|sourceBlocks
parameter_list|,
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|parityBlocks
parameter_list|,
name|int
index|[]
name|sourceBlockIndexes
parameter_list|,
name|int
index|[]
name|parityBlockIndexes
parameter_list|)
block|{
name|Set
argument_list|<
name|ExtendedBlock
argument_list|>
name|blockSet
init|=
operator|new
name|HashSet
argument_list|<
name|ExtendedBlock
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|b
range|:
name|companionBlocks
control|)
block|{
name|blockSet
operator|.
name|add
argument_list|(
name|b
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sourceBlockIndexes
operator|.
name|length
operator|+
name|parityBlockIndexes
operator|.
name|length
argument_list|,
name|blockSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
range|:
name|sourceBlockIndexes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockSet
operator|.
name|contains
argument_list|(
name|sourceBlocks
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
range|:
name|parityBlockIndexes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|blockSet
operator|.
name|contains
argument_list|(
name|parityBlocks
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyCachedFullPathNameResult ( CachedFullPathNames cachedFullPathNames, FSInodeInfo inode)
specifier|private
name|void
name|verifyCachedFullPathNameResult
parameter_list|(
name|CachedFullPathNames
name|cachedFullPathNames
parameter_list|,
name|FSInodeInfo
name|inode
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|res1
init|=
name|inode
operator|.
name|getFullPathName
argument_list|()
decl_stmt|;
name|String
name|res2
init|=
name|cachedFullPathNames
operator|.
name|get
argument_list|(
name|inode
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual path name: "
operator|+
name|res1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cached path name: "
operator|+
name|res2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cachedFullPathNames
operator|.
name|get
argument_list|(
name|inode
argument_list|)
argument_list|,
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyCachedBlocksResult (CachedLocatedBlocks cachedBlocks, FSNamesystem namesystem, String file)
specifier|private
name|void
name|verifyCachedBlocksResult
parameter_list|(
name|CachedLocatedBlocks
name|cachedBlocks
parameter_list|,
name|FSNamesystem
name|namesystem
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|len
init|=
name|namesystem
operator|.
name|getFileInfo
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|res1
init|=
name|namesystem
operator|.
name|getBlockLocations
argument_list|(
name|file
argument_list|,
literal|0L
argument_list|,
name|len
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|res2
init|=
name|cachedBlocks
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual block: "
operator|+
name|res1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cached block: "
operator|+
name|res2
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|,
name|res2
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCompanionBlocks ( FSNamesystem namesystem, BlockPlacementPolicyRaid policy, ExtendedBlock block)
specifier|private
name|Collection
argument_list|<
name|LocatedBlock
argument_list|>
name|getCompanionBlocks
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|BlockPlacementPolicyRaid
name|policy
parameter_list|,
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|INodeFile
name|inode
init|=
name|namesystem
operator|.
name|blockManager
operator|.
name|blocksMap
operator|.
name|getINode
argument_list|(
name|block
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|FileType
name|type
init|=
name|policy
operator|.
name|getFileType
argument_list|(
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|policy
operator|.
name|getCompanionBlocks
argument_list|(
name|inode
operator|.
name|getFullPathName
argument_list|()
argument_list|,
name|type
argument_list|,
name|block
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getBlocks (FSNamesystem namesystem, String file)
specifier|private
name|List
argument_list|<
name|LocatedBlock
argument_list|>
name|getBlocks
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|len
init|=
name|namesystem
operator|.
name|getFileInfo
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
return|return
name|namesystem
operator|.
name|getBlockLocations
argument_list|(
name|file
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|getLocatedBlocks
argument_list|()
return|;
block|}
block|}
end_class

end_unit

