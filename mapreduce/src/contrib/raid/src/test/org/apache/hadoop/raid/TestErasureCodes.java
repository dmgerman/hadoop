begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestErasureCodes
specifier|public
class|class
name|TestErasureCodes
extends|extends
name|TestCase
block|{
DECL|field|TEST_CODES
specifier|final
name|int
name|TEST_CODES
init|=
literal|100
decl_stmt|;
DECL|field|TEST_TIMES
specifier|final
name|int
name|TEST_TIMES
init|=
literal|1000
decl_stmt|;
DECL|field|RAND
specifier|final
name|Random
name|RAND
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|testEncodeDecode ()
specifier|public
name|void
name|testEncodeDecode
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|TEST_CODES
condition|;
name|n
operator|++
control|)
block|{
name|int
name|stripeSize
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
literal|99
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// 1, 2, 3, ... 100
name|int
name|paritySize
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
literal|9
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|//1, 2, 3, 4, ... 10
name|ErasureCode
name|ec
init|=
operator|new
name|ReedSolomonCode
argument_list|(
name|stripeSize
argument_list|,
name|paritySize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|TEST_TIMES
condition|;
name|m
operator|++
control|)
block|{
name|int
name|symbolMax
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|ec
operator|.
name|symbolSize
argument_list|()
argument_list|)
decl_stmt|;
name|int
index|[]
name|message
init|=
operator|new
name|int
index|[
name|stripeSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripeSize
condition|;
name|i
operator|++
control|)
block|{
name|message
index|[
name|i
index|]
operator|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|symbolMax
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|parity
init|=
operator|new
name|int
index|[
name|paritySize
index|]
decl_stmt|;
name|ec
operator|.
name|encode
argument_list|(
name|message
argument_list|,
name|parity
argument_list|)
expr_stmt|;
name|int
index|[]
name|data
init|=
operator|new
name|int
index|[
name|stripeSize
operator|+
name|paritySize
index|]
decl_stmt|;
name|int
index|[]
name|copy
init|=
operator|new
name|int
index|[
name|data
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paritySize
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|parity
index|[
name|i
index|]
expr_stmt|;
name|copy
index|[
name|i
index|]
operator|=
name|parity
index|[
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripeSize
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
operator|+
name|paritySize
index|]
operator|=
name|message
index|[
name|i
index|]
expr_stmt|;
name|copy
index|[
name|i
operator|+
name|paritySize
index|]
operator|=
name|message
index|[
name|i
index|]
expr_stmt|;
block|}
name|int
name|erasedLen
init|=
name|paritySize
operator|==
literal|1
condition|?
literal|1
else|:
name|RAND
operator|.
name|nextInt
argument_list|(
name|paritySize
operator|-
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
index|[]
name|erasedLocations
init|=
name|randomErasedLocation
argument_list|(
name|erasedLen
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedLocations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|erasedLocations
index|[
name|i
index|]
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|int
index|[]
name|erasedValues
init|=
operator|new
name|int
index|[
name|erasedLen
index|]
decl_stmt|;
name|ec
operator|.
name|decode
argument_list|(
name|data
argument_list|,
name|erasedLocations
argument_list|,
name|erasedValues
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedLen
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Decode failed"
argument_list|,
name|copy
index|[
name|erasedLocations
index|[
name|i
index|]
index|]
argument_list|,
name|erasedValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testRSPerformance ()
specifier|public
name|void
name|testRSPerformance
parameter_list|()
block|{
name|int
name|stripeSize
init|=
literal|10
decl_stmt|;
name|int
name|paritySize
init|=
literal|4
decl_stmt|;
name|ErasureCode
name|ec
init|=
operator|new
name|ReedSolomonCode
argument_list|(
name|stripeSize
argument_list|,
name|paritySize
argument_list|)
decl_stmt|;
name|int
name|symbolMax
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|ec
operator|.
name|symbolSize
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|message
init|=
operator|new
name|byte
index|[
name|stripeSize
index|]
index|[]
decl_stmt|;
name|int
name|bufsize
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripeSize
condition|;
name|i
operator|++
control|)
block|{
name|message
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|bufsize
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bufsize
condition|;
name|j
operator|++
control|)
block|{
name|message
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
operator|(
name|byte
operator|)
name|RAND
operator|.
name|nextInt
argument_list|(
name|symbolMax
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
index|[]
name|parity
init|=
operator|new
name|byte
index|[
name|paritySize
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paritySize
condition|;
name|i
operator|++
control|)
block|{
name|parity
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|bufsize
index|]
expr_stmt|;
block|}
name|long
name|encodeStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
index|[]
name|tmpIn
init|=
operator|new
name|int
index|[
name|stripeSize
index|]
decl_stmt|;
name|int
index|[]
name|tmpOut
init|=
operator|new
name|int
index|[
name|paritySize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufsize
condition|;
name|i
operator|++
control|)
block|{
comment|// Copy message.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|stripeSize
condition|;
name|j
operator|++
control|)
name|tmpIn
index|[
name|j
index|]
operator|=
literal|0x000000FF
operator|&
name|message
index|[
name|j
index|]
index|[
name|i
index|]
expr_stmt|;
name|ec
operator|.
name|encode
argument_list|(
name|tmpIn
argument_list|,
name|tmpOut
argument_list|)
expr_stmt|;
comment|// Copy parity.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|paritySize
condition|;
name|j
operator|++
control|)
name|parity
index|[
name|j
index|]
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|tmpOut
index|[
name|j
index|]
expr_stmt|;
block|}
name|long
name|encodeEnd
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|float
name|encodeMSecs
init|=
operator|(
name|encodeEnd
operator|-
name|encodeStart
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time to encode rs = "
operator|+
name|encodeMSecs
operator|+
literal|"msec ("
operator|+
name|message
index|[
literal|0
index|]
operator|.
name|length
operator|/
operator|(
literal|1000
operator|*
name|encodeMSecs
operator|)
operator|+
literal|" MB/s)"
argument_list|)
expr_stmt|;
comment|// Copy erased array.
name|int
index|[]
name|data
init|=
operator|new
name|int
index|[
name|paritySize
operator|+
name|stripeSize
index|]
decl_stmt|;
comment|// 4th location is the 0th symbol in the message
name|int
index|[]
name|erasedLocations
init|=
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|1
block|,
literal|5
block|,
literal|7
block|}
decl_stmt|;
name|int
index|[]
name|erasedValues
init|=
operator|new
name|int
index|[
name|erasedLocations
operator|.
name|length
index|]
decl_stmt|;
name|byte
index|[]
name|copy
init|=
operator|new
name|byte
index|[
name|bufsize
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bufsize
condition|;
name|j
operator|++
control|)
block|{
name|copy
index|[
name|j
index|]
operator|=
name|message
index|[
literal|0
index|]
index|[
name|j
index|]
expr_stmt|;
name|message
index|[
literal|0
index|]
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|long
name|decodeStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufsize
condition|;
name|i
operator|++
control|)
block|{
comment|// Copy parity first.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|paritySize
condition|;
name|j
operator|++
control|)
block|{
name|data
index|[
name|j
index|]
operator|=
literal|0x000000FF
operator|&
name|parity
index|[
name|j
index|]
index|[
name|i
index|]
expr_stmt|;
block|}
comment|// Copy message. Skip 0 as the erased symbol
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|stripeSize
condition|;
name|j
operator|++
control|)
block|{
name|data
index|[
name|j
operator|+
name|paritySize
index|]
operator|=
literal|0x000000FF
operator|&
name|message
index|[
name|j
index|]
index|[
name|i
index|]
expr_stmt|;
block|}
comment|// Use 0, 2, 3, 6, 8, 9, 10, 11, 12, 13th symbol to reconstruct the data
name|ec
operator|.
name|decode
argument_list|(
name|data
argument_list|,
name|erasedLocations
argument_list|,
name|erasedValues
argument_list|)
expr_stmt|;
name|message
index|[
literal|0
index|]
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|erasedValues
index|[
literal|0
index|]
expr_stmt|;
block|}
name|long
name|decodeEnd
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|float
name|decodeMSecs
init|=
operator|(
name|decodeEnd
operator|-
name|decodeStart
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time to decode = "
operator|+
name|decodeMSecs
operator|+
literal|"msec ("
operator|+
name|message
index|[
literal|0
index|]
operator|.
name|length
operator|/
operator|(
literal|1000
operator|*
name|decodeMSecs
operator|)
operator|+
literal|" MB/s)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Decode failed"
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|equals
argument_list|(
name|copy
argument_list|,
name|message
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testXorPerformance ()
specifier|public
name|void
name|testXorPerformance
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|Random
name|RAND
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Random
argument_list|()
decl_stmt|;
name|int
name|stripeSize
init|=
literal|10
decl_stmt|;
name|byte
index|[]
index|[]
name|message
init|=
operator|new
name|byte
index|[
name|stripeSize
index|]
index|[]
decl_stmt|;
name|int
name|bufsize
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripeSize
condition|;
name|i
operator|++
control|)
block|{
name|message
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|bufsize
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bufsize
condition|;
name|j
operator|++
control|)
block|{
name|message
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
operator|(
name|byte
operator|)
name|RAND
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|parity
init|=
operator|new
name|byte
index|[
name|bufsize
index|]
decl_stmt|;
name|long
name|encodeStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufsize
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|stripeSize
condition|;
name|j
operator|++
control|)
name|parity
index|[
name|i
index|]
operator|^=
name|message
index|[
name|j
index|]
index|[
name|i
index|]
expr_stmt|;
block|}
name|long
name|encodeEnd
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|float
name|encodeMSecs
init|=
name|encodeEnd
operator|-
name|encodeStart
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time to encode xor = "
operator|+
name|encodeMSecs
operator|+
literal|" msec ("
operator|+
name|message
index|[
literal|0
index|]
operator|.
name|length
operator|/
operator|(
literal|1000
operator|*
name|encodeMSecs
operator|)
operator|+
literal|"MB/s)"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|copy
init|=
operator|new
name|byte
index|[
name|bufsize
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bufsize
condition|;
name|j
operator|++
control|)
block|{
name|copy
index|[
name|j
index|]
operator|=
name|message
index|[
literal|0
index|]
index|[
name|j
index|]
expr_stmt|;
name|message
index|[
literal|0
index|]
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|long
name|decodeStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufsize
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|stripeSize
condition|;
name|j
operator|++
control|)
name|message
index|[
literal|0
index|]
index|[
name|i
index|]
operator|^=
name|message
index|[
name|j
index|]
index|[
name|i
index|]
expr_stmt|;
name|message
index|[
literal|0
index|]
index|[
name|i
index|]
operator|^=
name|parity
index|[
name|i
index|]
expr_stmt|;
block|}
name|long
name|decodeEnd
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|float
name|decodeMSecs
init|=
name|decodeEnd
operator|-
name|decodeStart
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time to decode xor = "
operator|+
name|decodeMSecs
operator|+
literal|" msec ("
operator|+
name|message
index|[
literal|0
index|]
operator|.
name|length
operator|/
operator|(
literal|1000
operator|*
name|decodeMSecs
operator|)
operator|+
literal|"MB/s)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Decode failed"
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|equals
argument_list|(
name|copy
argument_list|,
name|message
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|randomErasedLocation (int erasedLen, int dataLen)
specifier|private
name|int
index|[]
name|randomErasedLocation
parameter_list|(
name|int
name|erasedLen
parameter_list|,
name|int
name|dataLen
parameter_list|)
block|{
name|int
index|[]
name|erasedLocations
init|=
operator|new
name|int
index|[
name|erasedLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedLen
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|s
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|size
argument_list|()
operator|!=
name|erasedLen
condition|)
block|{
name|s
operator|.
name|add
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|dataLen
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|t
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|erased
range|:
name|s
control|)
block|{
name|erasedLocations
index|[
name|t
operator|++
index|]
operator|=
name|erased
expr_stmt|;
block|}
block|}
return|return
name|erasedLocations
return|;
block|}
block|}
end_class

end_unit

