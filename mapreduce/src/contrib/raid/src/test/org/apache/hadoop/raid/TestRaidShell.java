begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|ExtendedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|TestRaidDfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|RaidDFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|RaidNode
import|;
end_import

begin_class
DECL|class|TestRaidShell
specifier|public
class|class
name|TestRaidShell
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.TestRaidShell"
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/contrib/raid/test/data"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG_FILE
specifier|final
specifier|static
name|String
name|CONFIG_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-raid.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|RELOAD_INTERVAL
specifier|final
specifier|static
name|long
name|RELOAD_INTERVAL
init|=
literal|1000
decl_stmt|;
DECL|field|NUM_DATANODES
specifier|final
specifier|static
name|int
name|NUM_DATANODES
init|=
literal|3
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|namenode
name|String
name|namenode
init|=
literal|null
decl_stmt|;
DECL|field|dfs
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|hftp
name|String
name|hftp
init|=
literal|null
decl_stmt|;
DECL|field|fileSys
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
DECL|field|cnode
name|RaidNode
name|cnode
init|=
literal|null
decl_stmt|;
DECL|field|rand
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**    * Create a file with three stripes, corrupt a block each in two stripes,    * and wait for the the file to be fixed.    */
DECL|method|testBlockFix ()
specifier|public
name|void
name|testBlockFix
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testBlockFix started."
argument_list|)
expr_stmt|;
name|long
name|blockSize
init|=
literal|8192L
decl_stmt|;
name|int
name|stripeLength
init|=
literal|3
decl_stmt|;
name|mySetup
argument_list|(
name|stripeLength
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
literal|"/user/dhruba/raidtest/file1"
argument_list|)
decl_stmt|;
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
literal|"/destraid/user/dhruba/raidtest"
argument_list|)
decl_stmt|;
name|Path
name|parityFile
init|=
operator|new
name|Path
argument_list|(
name|destPath
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|long
name|crc1
init|=
name|TestRaidDfs
operator|.
name|createTestFilePartialLastBlock
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|long
name|file1Len
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testBlockFix created test files"
argument_list|)
expr_stmt|;
comment|// create an instance of the RaidNode
name|Configuration
name|localConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localConf
operator|.
name|set
argument_list|(
name|RaidNode
operator|.
name|RAID_LOCATION_KEY
argument_list|,
literal|"/destraid"
argument_list|)
expr_stmt|;
name|localConf
operator|.
name|setInt
argument_list|(
literal|"raid.blockfix.interval"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// the RaidNode does the raiding inline (instead of submitting to map/reduce)
name|conf
operator|.
name|set
argument_list|(
literal|"raid.classname"
argument_list|,
literal|"org.apache.hadoop.raid.LocalRaidNode"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"raid.blockfix.classname"
argument_list|,
literal|"org.apache.hadoop.raid.LocalBlockFixer"
argument_list|)
expr_stmt|;
name|cnode
operator|=
name|RaidNode
operator|.
name|createRaidNode
argument_list|(
literal|null
argument_list|,
name|localConf
argument_list|)
expr_stmt|;
try|try
block|{
name|TestRaidDfs
operator|.
name|waitForFileRaided
argument_list|(
name|LOG
argument_list|,
name|fileSys
argument_list|,
name|file1
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|cnode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cnode
operator|.
name|join
argument_list|()
expr_stmt|;
name|cnode
operator|=
literal|null
expr_stmt|;
name|FileStatus
name|srcStat
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
decl_stmt|;
name|LocatedBlocks
name|locations
init|=
name|RaidDFSUtil
operator|.
name|getBlockLocations
argument_list|(
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
argument_list|,
name|file1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
name|srcStat
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fileSys
decl_stmt|;
comment|// Corrupt blocks in different stripes. We can fix them.
name|int
index|[]
name|corruptBlockIdxs
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|6
block|}
decl_stmt|;
for|for
control|(
name|int
name|idx
range|:
name|corruptBlockIdxs
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Corrupting block "
operator|+
name|locations
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|corruptBlock
argument_list|(
name|locations
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TestBlockFixer
operator|.
name|reportCorruptBlocks
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|corruptBlockIdxs
argument_list|,
name|srcStat
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCorruptBlocks
argument_list|(
name|corruptBlockIdxs
operator|.
name|length
argument_list|,
name|dfs
argument_list|,
name|file1
argument_list|)
expr_stmt|;
comment|// Create RaidShell and fix the file.
name|RaidShell
name|shell
init|=
operator|new
name|RaidShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-recoverBlocks"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|file1
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|waitForCorruptBlocks
argument_list|(
literal|0
argument_list|,
name|dfs
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TestRaidDfs
operator|.
name|validateFile
argument_list|(
name|dfs
argument_list|,
name|file1
argument_list|,
name|file1Len
argument_list|,
name|crc1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now corrupt and fix the parity file.
name|FileStatus
name|parityStat
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|parityFile
argument_list|)
decl_stmt|;
name|long
name|parityCrc
init|=
name|getCRC
argument_list|(
name|fileSys
argument_list|,
name|parityFile
argument_list|)
decl_stmt|;
name|locations
operator|=
name|RaidDFSUtil
operator|.
name|getBlockLocations
argument_list|(
name|dfs
argument_list|,
name|parityFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
name|parityStat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|corruptBlock
argument_list|(
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
name|TestBlockFixer
operator|.
name|reportCorruptBlocks
argument_list|(
name|fileSys
argument_list|,
name|parityFile
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
name|srcStat
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCorruptBlocks
argument_list|(
literal|1
argument_list|,
name|dfs
argument_list|,
name|parityFile
argument_list|)
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|parityFile
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|waitForCorruptBlocks
argument_list|(
literal|0
argument_list|,
name|dfs
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parityCrc
argument_list|,
name|getCRC
argument_list|(
name|fileSys
argument_list|,
name|parityFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testBlockFix Exception "
operator|+
name|e
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|myTearDown
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testBlockFix completed."
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForCorruptBlocks ( int numCorruptBlocks, DistributedFileSystem dfs, Path file)
specifier|private
name|void
name|waitForCorruptBlocks
parameter_list|(
name|int
name|numCorruptBlocks
parameter_list|,
name|DistributedFileSystem
name|dfs
parameter_list|,
name|Path
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileStatus
name|stat
init|=
name|dfs
operator|.
name|getFileStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|actual
init|=
literal|0
decl_stmt|;
do|do
block|{
name|actual
operator|=
name|RaidDFSUtil
operator|.
name|corruptBlocksInFile
argument_list|(
name|dfs
argument_list|,
name|path
argument_list|,
literal|0
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|actual
operator|==
name|numCorruptBlocks
condition|)
break|break;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
literal|120000
condition|)
break|break;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for "
operator|+
name|numCorruptBlocks
operator|+
literal|" corrupt blocks in "
operator|+
name|path
operator|+
literal|", found "
operator|+
name|actual
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
name|assertEquals
argument_list|(
name|numCorruptBlocks
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|mySetup (int stripeLength, int timeBeforeHar)
specifier|private
name|void
name|mySetup
parameter_list|(
name|int
name|stripeLength
parameter_list|,
name|int
name|timeBeforeHar
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Make sure data directory exists
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"raid.config.file"
argument_list|,
name|CONFIG_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"raid.config.reload"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"raid.config.reload.interval"
argument_list|,
name|RELOAD_INTERVAL
argument_list|)
expr_stmt|;
comment|// scan all policies once every 5 second
name|conf
operator|.
name|setLong
argument_list|(
literal|"raid.policy.rescan.interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// make all deletions not go through Trash
name|conf
operator|.
name|set
argument_list|(
literal|"fs.shell.delete.classname"
argument_list|,
literal|"org.apache.hadoop.hdfs.DFSClient"
argument_list|)
expr_stmt|;
comment|// do not use map-reduce cluster for Raiding
name|conf
operator|.
name|set
argument_list|(
literal|"raid.classname"
argument_list|,
literal|"org.apache.hadoop.raid.LocalRaidNode"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"raid.server.address"
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hdfs.raid.stripeLength"
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hdfs.raid.locations"
argument_list|,
literal|"/destraid"
argument_list|)
expr_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_DATANODES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|namenode
operator|=
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|)
expr_stmt|;
name|hftp
operator|=
literal|"hftp://localhost.localdomain:"
operator|+
name|dfs
operator|.
name|getNameNodePort
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|)
expr_stmt|;
name|FileWriter
name|fileWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|CONFIG_FILE
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
name|String
name|str
init|=
literal|"<configuration> "
operator|+
literal|"<srcPath prefix=\"/user/dhruba/raidtest\"> "
operator|+
literal|"<policy name = \"RaidTest1\"> "
operator|+
literal|"<erasureCode>xor</erasureCode> "
operator|+
literal|"<destPath> /destraid</destPath> "
operator|+
literal|"<property> "
operator|+
literal|"<name>targetReplication</name> "
operator|+
literal|"<value>1</value> "
operator|+
literal|"<description>after RAIDing, decrease the replication factor of a file to this value."
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>metaReplication</name> "
operator|+
literal|"<value>1</value> "
operator|+
literal|"<description> replication factor of parity file"
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>modTimePeriod</name> "
operator|+
literal|"<value>2000</value> "
operator|+
literal|"<description> time (milliseconds) after a file is modified to make it "
operator|+
literal|"a candidate for RAIDing "
operator|+
literal|"</description> "
operator|+
literal|"</property> "
decl_stmt|;
if|if
condition|(
name|timeBeforeHar
operator|>=
literal|0
condition|)
block|{
name|str
operator|+=
literal|"<property> "
operator|+
literal|"<name>time_before_har</name> "
operator|+
literal|"<value>"
operator|+
name|timeBeforeHar
operator|+
literal|"</value> "
operator|+
literal|"<description> amount of time waited before har'ing parity files"
operator|+
literal|"</description> "
operator|+
literal|"</property> "
expr_stmt|;
block|}
name|str
operator|+=
literal|"</policy>"
operator|+
literal|"</srcPath>"
operator|+
literal|"</configuration>"
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|myTearDown ()
specifier|private
name|void
name|myTearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cnode
operator|!=
literal|null
condition|)
block|{
name|cnode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cnode
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getCRC (FileSystem fs, Path p)
specifier|private
name|long
name|getCRC
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|CRC32
name|crc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|stm
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|>
literal|0
condition|;
name|b
operator|=
name|stm
operator|.
name|read
argument_list|()
control|)
block|{
name|crc
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|crc
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|corruptBlock (ExtendedBlock block)
name|void
name|corruptBlock
parameter_list|(
name|ExtendedBlock
name|block
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Could not corrupt block"
argument_list|,
name|dfs
operator|.
name|corruptBlockOnDataNodes
argument_list|(
name|block
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

