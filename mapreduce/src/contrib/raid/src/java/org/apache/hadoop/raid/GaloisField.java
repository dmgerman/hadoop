begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Implementation of Galois field arithmetics with 2^p elements.  * The input must be unsigned integers.  */
end_comment

begin_class
DECL|class|GaloisField
specifier|public
class|class
name|GaloisField
block|{
DECL|field|logTable
specifier|private
specifier|final
name|int
index|[]
name|logTable
decl_stmt|;
DECL|field|powTable
specifier|private
specifier|final
name|int
index|[]
name|powTable
decl_stmt|;
DECL|field|mulTable
specifier|private
specifier|final
name|int
index|[]
index|[]
name|mulTable
decl_stmt|;
DECL|field|divTable
specifier|private
specifier|final
name|int
index|[]
index|[]
name|divTable
decl_stmt|;
DECL|field|fieldSize
specifier|private
specifier|final
name|int
name|fieldSize
decl_stmt|;
DECL|field|primitivePeriod
specifier|private
specifier|final
name|int
name|primitivePeriod
decl_stmt|;
DECL|field|primitivePolynomial
specifier|private
specifier|final
name|int
name|primitivePolynomial
decl_stmt|;
comment|// Field size 256 is good for byte based system
DECL|field|DEFAULT_FIELD_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FIELD_SIZE
init|=
literal|256
decl_stmt|;
comment|// primitive polynomial 1 + X^2 + X^3 + X^4 + X^8
DECL|field|DEFAULT_PRIMITIVE_POLYNOMIAL
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_PRIMITIVE_POLYNOMIAL
init|=
literal|285
decl_stmt|;
DECL|field|instances
specifier|static
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|GaloisField
argument_list|>
name|instances
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|GaloisField
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Get the object performs Galois field arithmetics    * @param fieldSize size of the field    * @param primitivePolynomial a primitive polynomial corresponds to the size    */
DECL|method|getInstance (int fieldSize, int primitivePolynomial)
specifier|public
specifier|static
name|GaloisField
name|getInstance
parameter_list|(
name|int
name|fieldSize
parameter_list|,
name|int
name|primitivePolynomial
parameter_list|)
block|{
name|int
name|key
init|=
operator|(
operator|(
name|fieldSize
operator|<<
literal|16
operator|)
operator|&
literal|0xFFFF0000
operator|)
operator|+
operator|(
name|primitivePolynomial
operator|&
literal|0x0000FFFF
operator|)
decl_stmt|;
name|GaloisField
name|gf
decl_stmt|;
synchronized|synchronized
init|(
name|instances
init|)
block|{
name|gf
operator|=
name|instances
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|gf
operator|==
literal|null
condition|)
block|{
name|gf
operator|=
operator|new
name|GaloisField
argument_list|(
name|fieldSize
argument_list|,
name|primitivePolynomial
argument_list|)
expr_stmt|;
name|instances
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|gf
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|gf
return|;
block|}
comment|/**    * Get the object performs Galois field arithmetics with default setting    */
DECL|method|getInstance ()
specifier|public
specifier|static
name|GaloisField
name|getInstance
parameter_list|()
block|{
return|return
name|getInstance
argument_list|(
name|DEFAULT_FIELD_SIZE
argument_list|,
name|DEFAULT_PRIMITIVE_POLYNOMIAL
argument_list|)
return|;
block|}
DECL|method|GaloisField (int fieldSize, int primitivePolynomial)
specifier|private
name|GaloisField
parameter_list|(
name|int
name|fieldSize
parameter_list|,
name|int
name|primitivePolynomial
parameter_list|)
block|{
assert|assert
name|fieldSize
operator|>
literal|0
assert|;
assert|assert
name|primitivePolynomial
operator|>
literal|0
assert|;
name|this
operator|.
name|fieldSize
operator|=
name|fieldSize
expr_stmt|;
name|this
operator|.
name|primitivePeriod
operator|=
name|fieldSize
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|primitivePolynomial
operator|=
name|primitivePolynomial
expr_stmt|;
name|logTable
operator|=
operator|new
name|int
index|[
name|fieldSize
index|]
expr_stmt|;
name|powTable
operator|=
operator|new
name|int
index|[
name|fieldSize
index|]
expr_stmt|;
name|mulTable
operator|=
operator|new
name|int
index|[
name|fieldSize
index|]
index|[
name|fieldSize
index|]
expr_stmt|;
name|divTable
operator|=
operator|new
name|int
index|[
name|fieldSize
index|]
index|[
name|fieldSize
index|]
expr_stmt|;
name|int
name|value
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|pow
init|=
literal|0
init|;
name|pow
operator|<
name|fieldSize
operator|-
literal|1
condition|;
name|pow
operator|++
control|)
block|{
name|powTable
index|[
name|pow
index|]
operator|=
name|value
expr_stmt|;
name|logTable
index|[
name|value
index|]
operator|=
name|pow
expr_stmt|;
name|value
operator|=
name|value
operator|*
literal|2
expr_stmt|;
if|if
condition|(
name|value
operator|>=
name|fieldSize
condition|)
block|{
name|value
operator|=
name|value
operator|^
name|primitivePolynomial
expr_stmt|;
block|}
block|}
comment|// building multiplication table
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldSize
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fieldSize
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|j
operator|==
literal|0
condition|)
block|{
name|mulTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
name|int
name|z
init|=
name|logTable
index|[
name|i
index|]
operator|+
name|logTable
index|[
name|j
index|]
decl_stmt|;
name|z
operator|=
name|z
operator|>=
name|primitivePeriod
condition|?
name|z
operator|-
name|primitivePeriod
else|:
name|z
expr_stmt|;
name|z
operator|=
name|powTable
index|[
name|z
index|]
expr_stmt|;
name|mulTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|z
expr_stmt|;
block|}
block|}
comment|// building division table
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldSize
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|fieldSize
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|divTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
name|int
name|z
init|=
name|logTable
index|[
name|i
index|]
operator|-
name|logTable
index|[
name|j
index|]
decl_stmt|;
name|z
operator|=
name|z
operator|<
literal|0
condition|?
name|z
operator|+
name|primitivePeriod
else|:
name|z
expr_stmt|;
name|z
operator|=
name|powTable
index|[
name|z
index|]
expr_stmt|;
name|divTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|z
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return number of elements in the field    * @return number of elements in the field    */
DECL|method|getFieldSize ()
specifier|public
name|int
name|getFieldSize
parameter_list|()
block|{
return|return
name|fieldSize
return|;
block|}
comment|/**    * Return the primitive polynomial in GF(2)    * @return primitive polynomial as a integer    */
DECL|method|getPrimitivePolynomial ()
specifier|public
name|int
name|getPrimitivePolynomial
parameter_list|()
block|{
return|return
name|primitivePolynomial
return|;
block|}
comment|/**    * Compute the sum of two fields    * @param x input field    * @param y input field    * @return result of addition    */
DECL|method|add (int x, int y)
specifier|public
name|int
name|add
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
assert|assert
operator|(
name|x
operator|>=
literal|0
operator|&&
name|x
operator|<
name|getFieldSize
argument_list|()
operator|&&
name|y
operator|>=
literal|0
operator|&&
name|y
operator|<
name|getFieldSize
argument_list|()
operator|)
assert|;
return|return
name|x
operator|^
name|y
return|;
block|}
comment|/**    * Compute the multiplication of two fields    * @param x input field    * @param y input field    * @return result of multiplication    */
DECL|method|multiply (int x, int y)
specifier|public
name|int
name|multiply
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
assert|assert
operator|(
name|x
operator|>=
literal|0
operator|&&
name|x
operator|<
name|getFieldSize
argument_list|()
operator|&&
name|y
operator|>=
literal|0
operator|&&
name|y
operator|<
name|getFieldSize
argument_list|()
operator|)
assert|;
return|return
name|mulTable
index|[
name|x
index|]
index|[
name|y
index|]
return|;
block|}
comment|/**    * Compute the division of two fields    * @param x input field    * @param y input field    * @return x/y    */
DECL|method|divide (int x, int y)
specifier|public
name|int
name|divide
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
assert|assert
operator|(
name|x
operator|>=
literal|0
operator|&&
name|x
argument_list|<
name|getFieldSize
operator|(
operator|)
operator|&&
name|y
argument_list|>
literal|0
operator|&&
name|y
operator|<
name|getFieldSize
argument_list|()
operator|)
assert|;
return|return
name|divTable
index|[
name|x
index|]
index|[
name|y
index|]
return|;
block|}
comment|/**    * Compute power n of a field    * @param x input field    * @param n power    * @return x^n    */
DECL|method|power (int x, int n)
specifier|public
name|int
name|power
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|n
parameter_list|)
block|{
assert|assert
operator|(
name|x
operator|>=
literal|0
operator|&&
name|x
operator|<
name|getFieldSize
argument_list|()
operator|)
assert|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|x
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|x
operator|=
name|logTable
index|[
name|x
index|]
operator|*
name|n
expr_stmt|;
if|if
condition|(
name|x
operator|<
name|primitivePeriod
condition|)
block|{
return|return
name|powTable
index|[
name|x
index|]
return|;
block|}
name|x
operator|=
name|x
operator|%
name|primitivePeriod
expr_stmt|;
return|return
name|powTable
index|[
name|x
index|]
return|;
block|}
comment|/**    * Given a Vandermonde matrix V[i][j]=x[j]^i and vector y, solve for z such    * that Vz=y. The output z will be placed in y.    * @param x the vector which describe the Vandermonde matrix    * @param y right-hand side of the Vandermonde system equation.    *          will be replaced the output in this vector    */
DECL|method|solveVandermondeSystem (int[] x, int[] y)
specifier|public
name|void
name|solveVandermondeSystem
parameter_list|(
name|int
index|[]
name|x
parameter_list|,
name|int
index|[]
name|y
parameter_list|)
block|{
name|solveVandermondeSystem
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|x
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Given a Vandermonde matrix V[i][j]=x[j]^i and vector y, solve for z such    * that Vz=y. The output z will be placed in y.    * @param x the vector which describe the Vandermonde matrix    * @param y right-hand side of the Vandermonde system equation.    *          will be replaced the output in this vector    * @param len consider x and y only from 0...len-1    */
DECL|method|solveVandermondeSystem (int[] x, int[] y, int len)
specifier|public
name|void
name|solveVandermondeSystem
parameter_list|(
name|int
index|[]
name|x
parameter_list|,
name|int
index|[]
name|y
parameter_list|,
name|int
name|len
parameter_list|)
block|{
assert|assert
operator|(
name|x
operator|.
name|length
operator|<=
name|len
operator|&&
name|y
operator|.
name|length
operator|<=
name|len
operator|)
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|len
operator|-
literal|1
init|;
name|j
operator|>
name|i
condition|;
name|j
operator|--
control|)
block|{
name|y
index|[
name|j
index|]
operator|=
name|y
index|[
name|j
index|]
operator|^
name|mulTable
index|[
name|x
index|[
name|i
index|]
index|]
index|[
name|y
index|[
name|j
operator|-
literal|1
index|]
index|]
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|len
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|y
index|[
name|j
index|]
operator|=
name|divTable
index|[
name|y
index|[
name|j
index|]
index|]
index|[
name|x
index|[
name|j
index|]
operator|^
name|x
index|[
name|j
operator|-
name|i
operator|-
literal|1
index|]
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|len
operator|-
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|y
index|[
name|j
index|]
operator|=
name|y
index|[
name|j
index|]
operator|^
name|y
index|[
name|j
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Compute the multiplication of two polynomials. The index in the    * array corresponds to the power of the entry. For example p[0] is the    * constant term of the polynomial p.     * @param p input polynomial    * @param q input polynomial    * @return polynomial represents p*q    */
DECL|method|multiply (int[] p, int[] q)
specifier|public
name|int
index|[]
name|multiply
parameter_list|(
name|int
index|[]
name|p
parameter_list|,
name|int
index|[]
name|q
parameter_list|)
block|{
name|int
name|len
init|=
name|p
operator|.
name|length
operator|+
name|q
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|q
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|result
index|[
name|i
operator|+
name|j
index|]
operator|=
name|add
argument_list|(
name|result
index|[
name|i
operator|+
name|j
index|]
argument_list|,
name|multiply
argument_list|(
name|p
index|[
name|i
index|]
argument_list|,
name|q
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Compute the remainder of a dividend and divisor pair. The index in the    * array corresponds to the power of the entry. For example p[0] is the    * constant term of the polynomial p.     * @param dividend dividend polynomial, the remainder will be placed here when return    * @param divisor divisor polynomial    */
DECL|method|remainder (int[] dividend, int[] divisor)
specifier|public
name|void
name|remainder
parameter_list|(
name|int
index|[]
name|dividend
parameter_list|,
name|int
index|[]
name|divisor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|dividend
operator|.
name|length
operator|-
name|divisor
operator|.
name|length
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|int
name|ratio
init|=
name|divTable
index|[
name|dividend
index|[
name|i
operator|+
name|divisor
operator|.
name|length
operator|-
literal|1
index|]
index|]
index|[
name|divisor
index|[
name|divisor
operator|.
name|length
operator|-
literal|1
index|]
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|divisor
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|k
init|=
name|j
operator|+
name|i
decl_stmt|;
name|dividend
index|[
name|k
index|]
operator|=
name|dividend
index|[
name|k
index|]
operator|^
name|mulTable
index|[
name|ratio
index|]
index|[
name|divisor
index|[
name|j
index|]
index|]
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Compute the sum of two polynomials. The index in the    * array corresponds to the power of the entry. For example p[0] is the    * constant term of the polynomial p.     * @param p input polynomial    * @param q input polynomial    * @return polynomial represents p+q    */
DECL|method|add (int[] p, int[] q)
specifier|public
name|int
index|[]
name|add
parameter_list|(
name|int
index|[]
name|p
parameter_list|,
name|int
index|[]
name|q
parameter_list|)
block|{
name|int
name|len
init|=
name|Math
operator|.
name|max
argument_list|(
name|p
operator|.
name|length
argument_list|,
name|q
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|p
operator|.
name|length
operator|&&
name|i
operator|<
name|q
operator|.
name|length
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|add
argument_list|(
name|p
index|[
name|i
index|]
argument_list|,
name|q
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|<
name|p
operator|.
name|length
condition|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|p
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
index|[
name|i
index|]
operator|=
name|q
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Substitute x into polynomial p(x).     * @param p input polynomial    * @param x input field    * @return p(x)    */
DECL|method|substitute (int[] p, int x)
specifier|public
name|int
name|substitute
parameter_list|(
name|int
index|[]
name|p
parameter_list|,
name|int
name|x
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|result
operator|^
name|mulTable
index|[
name|p
index|[
name|i
index|]
index|]
index|[
name|y
index|]
expr_stmt|;
name|y
operator|=
name|mulTable
index|[
name|x
index|]
index|[
name|y
index|]
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

