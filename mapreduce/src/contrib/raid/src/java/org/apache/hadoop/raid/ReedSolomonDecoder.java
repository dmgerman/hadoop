begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|BlockMissingException
import|;
end_import

begin_class
DECL|class|ReedSolomonDecoder
specifier|public
class|class
name|ReedSolomonDecoder
extends|extends
name|Decoder
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.ReedSolomonDecoder"
argument_list|)
decl_stmt|;
DECL|field|reedSolomonCode
specifier|private
name|ErasureCode
name|reedSolomonCode
decl_stmt|;
DECL|method|ReedSolomonDecoder ( Configuration conf, int stripeSize, int paritySize)
specifier|public
name|ReedSolomonDecoder
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|stripeSize
parameter_list|,
name|int
name|paritySize
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|stripeSize
argument_list|,
name|paritySize
argument_list|)
expr_stmt|;
name|this
operator|.
name|reedSolomonCode
operator|=
operator|new
name|ReedSolomonCode
argument_list|(
name|stripeSize
argument_list|,
name|paritySize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fixErasedBlock ( FileSystem fs, Path srcFile, FileSystem parityFs, Path parityFile, long blockSize, long errorOffset, long bytesToSkip, long limit, OutputStream out)
specifier|protected
name|void
name|fixErasedBlock
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|srcFile
parameter_list|,
name|FileSystem
name|parityFs
parameter_list|,
name|Path
name|parityFile
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|long
name|errorOffset
parameter_list|,
name|long
name|bytesToSkip
parameter_list|,
name|long
name|limit
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
index|[]
name|inputs
init|=
operator|new
name|FSDataInputStream
index|[
name|stripeSize
operator|+
name|paritySize
index|]
decl_stmt|;
name|int
index|[]
name|erasedLocations
init|=
name|buildInputs
argument_list|(
name|fs
argument_list|,
name|srcFile
argument_list|,
name|parityFs
argument_list|,
name|parityFile
argument_list|,
name|errorOffset
argument_list|,
name|inputs
argument_list|)
decl_stmt|;
name|int
name|blockIdxInStripe
init|=
operator|(
call|(
name|int
call|)
argument_list|(
name|errorOffset
operator|/
name|blockSize
argument_list|)
operator|)
operator|%
name|stripeSize
decl_stmt|;
name|int
name|erasedLocationToFix
init|=
name|paritySize
operator|+
name|blockIdxInStripe
decl_stmt|;
name|writeFixedBlock
argument_list|(
name|inputs
argument_list|,
name|erasedLocations
argument_list|,
name|erasedLocationToFix
argument_list|,
name|bytesToSkip
argument_list|,
name|limit
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|buildInputs (FileSystem fs, Path srcFile, FileSystem parityFs, Path parityFile, long errorOffset, FSDataInputStream[] inputs)
specifier|protected
name|int
index|[]
name|buildInputs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|srcFile
parameter_list|,
name|FileSystem
name|parityFs
parameter_list|,
name|Path
name|parityFile
parameter_list|,
name|long
name|errorOffset
parameter_list|,
name|FSDataInputStream
index|[]
name|inputs
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Building inputs to recover block starting at "
operator|+
name|errorOffset
argument_list|)
expr_stmt|;
name|FileStatus
name|srcStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|srcFile
argument_list|)
decl_stmt|;
name|long
name|blockSize
init|=
name|srcStat
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
name|long
name|blockIdx
init|=
call|(
name|int
call|)
argument_list|(
name|errorOffset
operator|/
name|blockSize
argument_list|)
decl_stmt|;
name|long
name|stripeIdx
init|=
name|blockIdx
operator|/
name|stripeSize
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FileSize = "
operator|+
name|srcStat
operator|.
name|getLen
argument_list|()
operator|+
literal|", blockSize = "
operator|+
name|blockSize
operator|+
literal|", blockIdx = "
operator|+
name|blockIdx
operator|+
literal|", stripeIdx = "
operator|+
name|stripeIdx
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|erasedLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// First open streams to the parity blocks.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paritySize
condition|;
name|i
operator|++
control|)
block|{
name|long
name|offset
init|=
name|blockSize
operator|*
operator|(
name|stripeIdx
operator|*
name|paritySize
operator|+
name|i
operator|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|parityFs
operator|.
name|open
argument_list|(
name|parityFile
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|parityFile
operator|+
literal|":"
operator|+
name|offset
operator|+
literal|" as input "
operator|+
name|i
argument_list|)
expr_stmt|;
name|inputs
index|[
name|i
index|]
operator|=
name|in
expr_stmt|;
block|}
comment|// Now open streams to the data blocks.
for|for
control|(
name|int
name|i
init|=
name|paritySize
init|;
name|i
operator|<
name|paritySize
operator|+
name|stripeSize
condition|;
name|i
operator|++
control|)
block|{
name|long
name|offset
init|=
name|blockSize
operator|*
operator|(
name|stripeIdx
operator|*
name|stripeSize
operator|+
name|i
operator|-
name|paritySize
operator|)
decl_stmt|;
if|if
condition|(
name|offset
operator|==
name|errorOffset
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|srcFile
operator|+
literal|":"
operator|+
name|offset
operator|+
literal|" is known to have error, adding zeros as input "
operator|+
name|i
argument_list|)
expr_stmt|;
name|inputs
index|[
name|i
index|]
operator|=
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|RaidUtils
operator|.
name|ZeroInputStream
argument_list|(
name|offset
operator|+
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
name|erasedLocations
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|offset
operator|>
name|srcStat
operator|.
name|getLen
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|srcFile
operator|+
literal|":"
operator|+
name|offset
operator|+
literal|" is past file size, adding zeros as input "
operator|+
name|i
argument_list|)
expr_stmt|;
name|inputs
index|[
name|i
index|]
operator|=
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|RaidUtils
operator|.
name|ZeroInputStream
argument_list|(
name|offset
operator|+
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|srcFile
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|srcFile
operator|+
literal|":"
operator|+
name|offset
operator|+
literal|" as input "
operator|+
name|i
argument_list|)
expr_stmt|;
name|inputs
index|[
name|i
index|]
operator|=
name|in
expr_stmt|;
block|}
block|}
if|if
condition|(
name|erasedLocations
operator|.
name|size
argument_list|()
operator|>
name|paritySize
condition|)
block|{
name|String
name|msg
init|=
literal|"Too many erased locations: "
operator|+
name|erasedLocations
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|int
index|[]
name|locs
init|=
operator|new
name|int
index|[
name|erasedLocations
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|locs
index|[
name|i
index|]
operator|=
name|erasedLocations
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|locs
return|;
block|}
comment|/**    * Decode the inputs provided and write to the output.    * @param inputs array of inputs.    * @param erasedLocations indexes in the inputs which are known to be erased.    * @param erasedLocationToFix index in the inputs which needs to be fixed.    * @param skipBytes number of bytes to skip before writing to output.    * @param limit maximum number of bytes to be written/skipped.    * @param out the output.    * @throws IOException    */
DECL|method|writeFixedBlock ( FSDataInputStream[] inputs, int[] erasedLocations, int erasedLocationToFix, long skipBytes, long limit, OutputStream out)
name|void
name|writeFixedBlock
parameter_list|(
name|FSDataInputStream
index|[]
name|inputs
parameter_list|,
name|int
index|[]
name|erasedLocations
parameter_list|,
name|int
name|erasedLocationToFix
parameter_list|,
name|long
name|skipBytes
parameter_list|,
name|long
name|limit
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Need to write "
operator|+
operator|(
name|limit
operator|-
name|skipBytes
operator|)
operator|+
literal|" bytes for erased location index "
operator|+
name|erasedLocationToFix
argument_list|)
expr_stmt|;
name|int
index|[]
name|tmp
init|=
operator|new
name|int
index|[
name|inputs
operator|.
name|length
index|]
decl_stmt|;
name|int
index|[]
name|decoded
init|=
operator|new
name|int
index|[
name|erasedLocations
operator|.
name|length
index|]
decl_stmt|;
name|long
name|toDiscard
init|=
name|skipBytes
decl_stmt|;
comment|// Loop while the number of skipped + written bytes is less than the max.
for|for
control|(
name|long
name|written
init|=
literal|0
init|;
name|skipBytes
operator|+
name|written
operator|<
name|limit
condition|;
control|)
block|{
name|erasedLocations
operator|=
name|readFromInputs
argument_list|(
name|inputs
argument_list|,
name|erasedLocations
argument_list|,
name|limit
argument_list|)
expr_stmt|;
if|if
condition|(
name|decoded
operator|.
name|length
operator|!=
name|erasedLocations
operator|.
name|length
condition|)
block|{
name|decoded
operator|=
operator|new
name|int
index|[
name|erasedLocations
operator|.
name|length
index|]
expr_stmt|;
block|}
name|int
name|toWrite
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
operator|(
name|long
operator|)
name|bufSize
argument_list|,
name|limit
operator|-
operator|(
name|skipBytes
operator|+
name|written
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|toDiscard
operator|>=
name|toWrite
condition|)
block|{
name|toDiscard
operator|-=
name|toWrite
expr_stmt|;
continue|continue;
block|}
comment|// Decoded bufSize amount of data.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufSize
condition|;
name|i
operator|++
control|)
block|{
name|performDecode
argument_list|(
name|readBufs
argument_list|,
name|writeBufs
argument_list|,
name|i
argument_list|,
name|tmp
argument_list|,
name|erasedLocations
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedLocations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|erasedLocations
index|[
name|i
index|]
operator|==
name|erasedLocationToFix
condition|)
block|{
name|toWrite
operator|-=
name|toDiscard
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|writeBufs
index|[
name|i
index|]
argument_list|,
operator|(
name|int
operator|)
name|toDiscard
argument_list|,
name|toWrite
argument_list|)
expr_stmt|;
name|toDiscard
operator|=
literal|0
expr_stmt|;
name|written
operator|+=
name|toWrite
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Wrote "
operator|+
name|toWrite
operator|+
literal|" bytes for erased location index "
operator|+
name|erasedLocationToFix
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
DECL|method|readFromInputs ( FSDataInputStream[] inputs, int[] erasedLocations, long limit)
name|int
index|[]
name|readFromInputs
parameter_list|(
name|FSDataInputStream
index|[]
name|inputs
parameter_list|,
name|int
index|[]
name|erasedLocations
parameter_list|,
name|long
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
comment|// For every input, read some data = bufSize.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|curPos
init|=
name|inputs
index|[
name|i
index|]
operator|.
name|getPos
argument_list|()
decl_stmt|;
try|try
block|{
name|RaidUtils
operator|.
name|readTillEnd
argument_list|(
name|inputs
index|[
name|i
index|]
argument_list|,
name|readBufs
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|BlockMissingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Encountered BlockMissingException in stream "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Encountered ChecksumException in stream "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// Found a new erased location.
if|if
condition|(
name|erasedLocations
operator|.
name|length
operator|==
name|paritySize
condition|)
block|{
name|String
name|msg
init|=
literal|"Too many read errors"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|// Add this stream to the set of erased locations.
name|int
index|[]
name|newErasedLocations
init|=
operator|new
name|int
index|[
name|erasedLocations
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|erasedLocations
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|newErasedLocations
index|[
name|j
index|]
operator|=
name|erasedLocations
index|[
name|j
index|]
expr_stmt|;
block|}
name|newErasedLocations
index|[
name|newErasedLocations
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|i
expr_stmt|;
name|erasedLocations
operator|=
name|newErasedLocations
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using zeros for stream "
operator|+
name|i
argument_list|)
expr_stmt|;
name|inputs
index|[
name|i
index|]
operator|=
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|RaidUtils
operator|.
name|ZeroInputStream
argument_list|(
name|curPos
operator|+
name|limit
argument_list|)
argument_list|)
expr_stmt|;
name|inputs
index|[
name|i
index|]
operator|.
name|seek
argument_list|(
name|curPos
argument_list|)
expr_stmt|;
name|RaidUtils
operator|.
name|readTillEnd
argument_list|(
name|inputs
index|[
name|i
index|]
argument_list|,
name|readBufs
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|erasedLocations
return|;
block|}
DECL|method|performDecode (byte[][] readBufs, byte[][] writeBufs, int idx, int[] inputs, int[] erasedLocations, int[] decoded)
name|void
name|performDecode
parameter_list|(
name|byte
index|[]
index|[]
name|readBufs
parameter_list|,
name|byte
index|[]
index|[]
name|writeBufs
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
index|[]
name|inputs
parameter_list|,
name|int
index|[]
name|erasedLocations
parameter_list|,
name|int
index|[]
name|decoded
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decoded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|decoded
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
name|readBufs
index|[
name|i
index|]
index|[
name|idx
index|]
operator|&
literal|0x000000FF
expr_stmt|;
block|}
name|reedSolomonCode
operator|.
name|decode
argument_list|(
name|inputs
argument_list|,
name|erasedLocations
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decoded
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writeBufs
index|[
name|i
index|]
index|[
name|idx
index|]
operator|=
operator|(
name|byte
operator|)
name|decoded
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

