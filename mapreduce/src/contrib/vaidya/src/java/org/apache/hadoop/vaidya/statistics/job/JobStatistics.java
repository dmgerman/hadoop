begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vaidya.statistics.job
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|statistics
operator|.
name|job
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|TaskInfo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|JobStatistics
specifier|public
class|class
name|JobStatistics
implements|implements
name|JobStatisticsInterface
block|{
comment|/*    * Pattern for parsing the COUNTERS    */
DECL|field|_pattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|_pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[[^,]?]+"
argument_list|)
decl_stmt|;
comment|//"[[^,]?]+"
comment|/*    * Job configuration    */
DECL|field|_jobConf
specifier|private
name|JobConf
name|_jobConf
decl_stmt|;
comment|/**    * @param jobConf the jobConf to set    */
DECL|method|setJobConf (JobConf jobConf)
name|void
name|setJobConf
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
block|{
name|this
operator|.
name|_jobConf
operator|=
name|jobConf
expr_stmt|;
comment|// TODO: Add job conf to _job array
block|}
comment|/*    * Aggregated Job level counters     */
DECL|field|_jobInfo
specifier|private
name|JobHistoryParser
operator|.
name|JobInfo
name|_jobInfo
decl_stmt|;
comment|/*    * Job stats     */
DECL|field|_job
specifier|private
name|java
operator|.
name|util
operator|.
name|Hashtable
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
name|_job
decl_stmt|;
DECL|method|getJobConf ()
specifier|public
name|JobConf
name|getJobConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|_jobConf
return|;
block|}
comment|/*    * Get Job Counters of type long    */
DECL|method|getLongValue (Enum key)
specifier|public
name|long
name|getLongValue
parameter_list|(
name|Enum
name|key
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|_job
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|long
operator|)
literal|0
return|;
block|}
else|else
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|this
operator|.
name|_job
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/*    * Get job Counters of type Double    */
DECL|method|getDoubleValue (Enum key)
specifier|public
name|double
name|getDoubleValue
parameter_list|(
name|Enum
name|key
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|_job
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|double
operator|)
literal|0
return|;
block|}
else|else
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|this
operator|.
name|_job
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/*     * Get Job Counters of type String    */
DECL|method|getStringValue (Enum key)
specifier|public
name|String
name|getStringValue
parameter_list|(
name|Enum
name|key
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|_job
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|_job
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
comment|/*    * Set key value of type long    */
DECL|method|setValue (Enum key, long value)
specifier|public
name|void
name|setValue
parameter_list|(
name|Enum
name|key
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|_job
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Set key value of type double    */
DECL|method|setValue (Enum key, double value)
specifier|public
name|void
name|setValue
parameter_list|(
name|Enum
name|key
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|this
operator|.
name|_job
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Set key value of type String    */
DECL|method|setValue (Enum key, String value)
specifier|public
name|void
name|setValue
parameter_list|(
name|Enum
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|_job
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/*    * Map Task List (Sorted by task id)    */
DECL|field|_mapTaskList
specifier|private
name|ArrayList
argument_list|<
name|MapTaskStatistics
argument_list|>
name|_mapTaskList
init|=
operator|new
name|ArrayList
argument_list|<
name|MapTaskStatistics
argument_list|>
argument_list|()
decl_stmt|;
comment|/*    * Reduce Task List (Sorted by task id)    */
DECL|field|_reduceTaskList
specifier|private
name|ArrayList
argument_list|<
name|ReduceTaskStatistics
argument_list|>
name|_reduceTaskList
init|=
operator|new
name|ArrayList
argument_list|<
name|ReduceTaskStatistics
argument_list|>
argument_list|()
decl_stmt|;
comment|/*     * Ctor:    */
DECL|method|JobStatistics (JobConf jobConf, JobInfo jobInfo)
specifier|public
name|JobStatistics
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|JobInfo
name|jobInfo
parameter_list|)
throws|throws
name|ParseException
block|{
name|this
operator|.
name|_jobConf
operator|=
name|jobConf
expr_stmt|;
name|this
operator|.
name|_jobInfo
operator|=
name|jobInfo
expr_stmt|;
name|this
operator|.
name|_job
operator|=
operator|new
name|Hashtable
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|populate_Job
argument_list|(
name|this
operator|.
name|_job
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
name|populate_MapReduceTaskLists
argument_list|(
name|this
operator|.
name|_mapTaskList
argument_list|,
name|this
operator|.
name|_reduceTaskList
argument_list|,
name|jobInfo
operator|.
name|getAllTasks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the Job Type: MAP_REDUCE, MAP_ONLY
if|if
condition|(
name|getLongValue
argument_list|(
name|JobKeys
operator|.
name|TOTAL_REDUCES
argument_list|)
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|_job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|JOBTYPE
argument_list|,
literal|"MAP_ONLY"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|_job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|JOBTYPE
argument_list|,
literal|"MAP_REDUCE"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    *     */
DECL|method|populate_MapReduceTaskLists (ArrayList<MapTaskStatistics> mapTaskList, ArrayList<ReduceTaskStatistics> reduceTaskList, Map<TaskID, TaskInfo> taskMap)
specifier|private
name|void
name|populate_MapReduceTaskLists
parameter_list|(
name|ArrayList
argument_list|<
name|MapTaskStatistics
argument_list|>
name|mapTaskList
parameter_list|,
name|ArrayList
argument_list|<
name|ReduceTaskStatistics
argument_list|>
name|reduceTaskList
parameter_list|,
name|Map
argument_list|<
name|TaskID
argument_list|,
name|TaskInfo
argument_list|>
name|taskMap
parameter_list|)
throws|throws
name|ParseException
block|{
name|int
name|num_tasks
init|=
name|taskMap
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// DO we need these lists?
comment|//    List<TaskAttemptInfo> successfulMapAttemptList =
comment|//      new ArrayList<TaskAttemptInfo>();
comment|//    List<TaskAttemptInfo> successfulReduceAttemptList =
comment|//      new ArrayList<TaskAttemptInfo>();
for|for
control|(
name|JobHistoryParser
operator|.
name|TaskInfo
name|taskInfo
range|:
name|taskMap
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|taskInfo
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|MapTaskStatistics
name|mapT
init|=
operator|new
name|MapTaskStatistics
argument_list|()
decl_stmt|;
name|TaskAttemptInfo
name|successfulAttempt
init|=
name|getLastSuccessfulTaskAttempt
argument_list|(
name|taskInfo
argument_list|)
decl_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|TASK_ID
argument_list|,
name|successfulAttempt
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|ATTEMPT_ID
argument_list|,
name|successfulAttempt
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|HOSTNAME
argument_list|,
name|successfulAttempt
operator|.
name|getTrackerName
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|TASK_TYPE
argument_list|,
name|successfulAttempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|STATUS
argument_list|,
name|successfulAttempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|START_TIME
argument_list|,
name|successfulAttempt
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|FINISH_TIME
argument_list|,
name|successfulAttempt
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|SPLITS
argument_list|,
name|taskInfo
operator|.
name|getSplitLocations
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|TRACKER_NAME
argument_list|,
name|successfulAttempt
operator|.
name|getTrackerName
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|STATE_STRING
argument_list|,
name|successfulAttempt
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|HTTP_PORT
argument_list|,
name|successfulAttempt
operator|.
name|getHttpPort
argument_list|()
argument_list|)
expr_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|ERROR
argument_list|,
name|successfulAttempt
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|parseAndAddMapTaskCounters
argument_list|(
name|mapT
argument_list|,
name|successfulAttempt
operator|.
name|getCounters
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mapTaskList
operator|.
name|add
argument_list|(
name|mapT
argument_list|)
expr_stmt|;
comment|// Add number of task attempts
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|NUM_ATTEMPTS
argument_list|,
operator|(
operator|new
name|Integer
argument_list|(
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add EXECUTION_TIME = FINISH_TIME - START_TIME
name|long
name|etime
init|=
name|mapT
operator|.
name|getLongValue
argument_list|(
name|MapTaskKeys
operator|.
name|FINISH_TIME
argument_list|)
operator|-
name|mapT
operator|.
name|getLongValue
argument_list|(
name|MapTaskKeys
operator|.
name|START_TIME
argument_list|)
decl_stmt|;
name|mapT
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|EXECUTION_TIME
argument_list|,
operator|(
operator|new
name|Long
argument_list|(
name|etime
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskInfo
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
condition|)
block|{
name|ReduceTaskStatistics
name|reduceT
init|=
operator|new
name|ReduceTaskStatistics
argument_list|()
decl_stmt|;
name|TaskAttemptInfo
name|successfulAttempt
init|=
name|getLastSuccessfulTaskAttempt
argument_list|(
name|taskInfo
argument_list|)
decl_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|TASK_ID
argument_list|,
name|successfulAttempt
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|ATTEMPT_ID
argument_list|,
name|successfulAttempt
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|HOSTNAME
argument_list|,
name|successfulAttempt
operator|.
name|getTrackerName
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|TASK_TYPE
argument_list|,
name|successfulAttempt
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|STATUS
argument_list|,
name|successfulAttempt
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|START_TIME
argument_list|,
name|successfulAttempt
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|FINISH_TIME
argument_list|,
name|successfulAttempt
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|SHUFFLE_FINISH_TIME
argument_list|,
name|successfulAttempt
operator|.
name|getShuffleFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|SORT_FINISH_TIME
argument_list|,
name|successfulAttempt
operator|.
name|getSortFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|SPLITS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|TRACKER_NAME
argument_list|,
name|successfulAttempt
operator|.
name|getTrackerName
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|STATE_STRING
argument_list|,
name|successfulAttempt
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|HTTP_PORT
argument_list|,
name|successfulAttempt
operator|.
name|getHttpPort
argument_list|()
argument_list|)
expr_stmt|;
name|parseAndAddReduceTaskCounters
argument_list|(
name|reduceT
argument_list|,
name|successfulAttempt
operator|.
name|getCounters
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|reduceTaskList
operator|.
name|add
argument_list|(
name|reduceT
argument_list|)
expr_stmt|;
comment|// Add number of task attempts
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|NUM_ATTEMPTS
argument_list|,
operator|(
operator|new
name|Integer
argument_list|(
name|taskInfo
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add EXECUTION_TIME = FINISH_TIME - START_TIME
name|long
name|etime1
init|=
name|reduceT
operator|.
name|getLongValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|FINISH_TIME
argument_list|)
operator|-
name|reduceT
operator|.
name|getLongValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|START_TIME
argument_list|)
decl_stmt|;
name|reduceT
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|EXECUTION_TIME
argument_list|,
operator|(
operator|new
name|Long
argument_list|(
name|etime1
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskInfo
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|JOB_CLEANUP
argument_list|)
operator|||
name|taskInfo
operator|.
name|getTaskType
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|JOB_SETUP
argument_list|)
condition|)
block|{
comment|//System.out.println("INFO: IGNORING TASK TYPE : "+task.get(Keys.TASK_TYPE));
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"UNKNOWN TASK TYPE : "
operator|+
name|taskInfo
operator|.
name|getTaskType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Get last successful task attempt to be added in the stats    */
DECL|method|getLastSuccessfulTaskAttempt (TaskInfo task)
specifier|private
name|TaskAttemptInfo
name|getLastSuccessfulTaskAttempt
parameter_list|(
name|TaskInfo
name|task
parameter_list|)
block|{
for|for
control|(
name|TaskAttemptInfo
name|ai
range|:
name|task
operator|.
name|getAllTaskAttempts
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getTaskStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ai
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/*    * Popuate the job stats     */
DECL|method|populate_Job (Hashtable<Enum, String> job, JobInfo jobInfo)
specifier|private
name|void
name|populate_Job
parameter_list|(
name|Hashtable
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
name|job
parameter_list|,
name|JobInfo
name|jobInfo
parameter_list|)
throws|throws
name|ParseException
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|FINISH_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobInfo
operator|.
name|getFinishTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|JOBID
argument_list|,
name|jobInfo
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|JOBNAME
argument_list|,
name|jobInfo
operator|.
name|getJobname
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|USER
argument_list|,
name|jobInfo
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|JOBCONF
argument_list|,
name|jobInfo
operator|.
name|getJobConfPath
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|SUBMIT_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobInfo
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|LAUNCH_TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobInfo
operator|.
name|getLaunchTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|TOTAL_MAPS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobInfo
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|TOTAL_REDUCES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobInfo
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|FAILED_MAPS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobInfo
operator|.
name|getFailedMaps
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|FAILED_REDUCES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobInfo
operator|.
name|getFailedReduces
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|FINISHED_MAPS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobInfo
operator|.
name|getFinishedMaps
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|FINISHED_REDUCES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|jobInfo
operator|.
name|getFinishedReduces
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|STATUS
argument_list|,
name|jobInfo
operator|.
name|getJobStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|JOB_PRIORITY
argument_list|,
name|jobInfo
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|parseAndAddJobCounters
argument_list|(
name|job
argument_list|,
name|jobInfo
operator|.
name|getTotalCounters
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Parse and add the job counters    */
DECL|method|parseAndAddJobCounters (Hashtable<Enum, String> job, String counters)
specifier|private
name|void
name|parseAndAddJobCounters
parameter_list|(
name|Hashtable
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
name|job
parameter_list|,
name|String
name|counters
parameter_list|)
throws|throws
name|ParseException
block|{
name|Counters
name|cnt
init|=
name|Counters
operator|.
name|fromEscapedCompactString
argument_list|(
name|counters
argument_list|)
decl_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Counters
operator|.
name|Group
argument_list|>
name|grps
init|=
name|cnt
operator|.
name|iterator
argument_list|()
init|;
name|grps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Counters
operator|.
name|Group
name|grp
init|=
name|grps
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//String groupname = "<" + grp.getName() + ">::<" + grp.getDisplayName() + ">";
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Counters
operator|.
name|Counter
argument_list|>
name|mycounters
init|=
name|grp
operator|.
name|iterator
argument_list|()
init|;
name|mycounters
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Counters
operator|.
name|Counter
name|counter
init|=
name|mycounters
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//String countername = "<"+counter.getName()+">::<"+counter.getDisplayName()+">::<"+counter.getValue()+">";
comment|//System.err.println("groupName:"+groupname+",countername: "+countername);
name|String
name|countername
init|=
name|grp
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|"."
operator|+
name|counter
operator|.
name|getDisplayName
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
operator|new
name|Long
argument_list|(
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
block|{
name|countername
block|,
name|value
block|}
decl_stmt|;
comment|//System.err.println("part0:<"+parts[0]+">,:part1<"+parts[1]+">");
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.FILE_BYTES_READ"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|FILE_BYTES_READ
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.FILE_BYTES_WRITTEN"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|FILE_BYTES_WRITTEN
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.HDFS_BYTES_READ"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|HDFS_BYTES_READ
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.HDFS_BYTES_WRITTEN"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|HDFS_BYTES_WRITTEN
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Job Counters .Launched map tasks"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|LAUNCHED_MAPS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Job Counters .Launched reduce tasks"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|LAUNCHED_REDUCES
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Job Counters .Data-local map tasks"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|DATALOCAL_MAPS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Job Counters .Rack-local map tasks"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|RACKLOCAL_MAPS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Map input records"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|MAP_INPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Map output records"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|MAP_OUTPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Map input bytes"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|MAP_INPUT_BYTES
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Map output bytes"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|MAP_OUTPUT_BYTES
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Combine input records"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|COMBINE_INPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Combine output records"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|COMBINE_OUTPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Reduce input groups"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|REDUCE_INPUT_GROUPS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Reduce input records"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|REDUCE_INPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Reduce output records"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|REDUCE_OUTPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Spilled Records"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|SPILLED_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Reduce shuffle bytes"
argument_list|)
condition|)
block|{
name|job
operator|.
name|put
argument_list|(
name|JobKeys
operator|.
name|SHUFFLE_BYTES
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"JobCounterKey:<"
operator|+
name|parts
index|[
literal|0
index|]
operator|+
literal|"> ==> NOT INCLUDED IN PERFORMANCE ADVISOR"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Parse and add the Map task counters    */
DECL|method|parseAndAddMapTaskCounters (MapTaskStatistics mapTask, String counters)
specifier|private
name|void
name|parseAndAddMapTaskCounters
parameter_list|(
name|MapTaskStatistics
name|mapTask
parameter_list|,
name|String
name|counters
parameter_list|)
throws|throws
name|ParseException
block|{
name|Counters
name|cnt
init|=
name|Counters
operator|.
name|fromEscapedCompactString
argument_list|(
name|counters
argument_list|)
decl_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Counters
operator|.
name|Group
argument_list|>
name|grps
init|=
name|cnt
operator|.
name|iterator
argument_list|()
init|;
name|grps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Counters
operator|.
name|Group
name|grp
init|=
name|grps
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//String groupname = "<" + grp.getName() + ">::<" + grp.getDisplayName() + ">";
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Counters
operator|.
name|Counter
argument_list|>
name|mycounters
init|=
name|grp
operator|.
name|iterator
argument_list|()
init|;
name|mycounters
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Counters
operator|.
name|Counter
name|counter
init|=
name|mycounters
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//String countername = "<"+counter.getName()+">::<"+counter.getDisplayName()+">::<"+counter.getValue()+">";
comment|//System.out.println("groupName:"+groupname+",countername: "+countername);
name|String
name|countername
init|=
name|grp
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|"."
operator|+
name|counter
operator|.
name|getDisplayName
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
operator|new
name|Long
argument_list|(
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
block|{
name|countername
block|,
name|value
block|}
decl_stmt|;
comment|//System.out.println("part0:"+parts[0]+",:part1 "+parts[1]);
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.FILE_BYTES_READ"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|FILE_BYTES_READ
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.FILE_BYTES_WRITTEN"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|FILE_BYTES_WRITTEN
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.HDFS_BYTES_READ"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|HDFS_BYTES_READ
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.HDFS_BYTES_WRITTEN"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|HDFS_BYTES_WRITTEN
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Map input records"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|INPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Map output records"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|OUTPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Map output bytes"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|OUTPUT_BYTES
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Combine input records"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|COMBINE_INPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Combine output records"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|COMBINE_OUTPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Spilled Records"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|SPILLED_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileInputFormatCounters.BYTES_READ"
argument_list|)
condition|)
block|{
name|mapTask
operator|.
name|setValue
argument_list|(
name|MapTaskKeys
operator|.
name|INPUT_BYTES
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"MapCounterKey:<"
operator|+
name|parts
index|[
literal|0
index|]
operator|+
literal|"> ==> NOT INCLUDED IN PERFORMANCE ADVISOR MAP TASK"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Parse and add the reduce task counters    */
DECL|method|parseAndAddReduceTaskCounters (ReduceTaskStatistics reduceTask, String counters)
specifier|private
name|void
name|parseAndAddReduceTaskCounters
parameter_list|(
name|ReduceTaskStatistics
name|reduceTask
parameter_list|,
name|String
name|counters
parameter_list|)
throws|throws
name|ParseException
block|{
name|Counters
name|cnt
init|=
name|Counters
operator|.
name|fromEscapedCompactString
argument_list|(
name|counters
argument_list|)
decl_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Counters
operator|.
name|Group
argument_list|>
name|grps
init|=
name|cnt
operator|.
name|iterator
argument_list|()
init|;
name|grps
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Counters
operator|.
name|Group
name|grp
init|=
name|grps
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//String groupname = "<" + grp.getName() + ">::<" + grp.getDisplayName() + ">";
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Counters
operator|.
name|Counter
argument_list|>
name|mycounters
init|=
name|grp
operator|.
name|iterator
argument_list|()
init|;
name|mycounters
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Counters
operator|.
name|Counter
name|counter
init|=
name|mycounters
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//String countername = "<"+counter.getName()+">::<"+counter.getDisplayName()+">::<"+counter.getValue()+">";
comment|//System.out.println("groupName:"+groupname+",countername: "+countername);
name|String
name|countername
init|=
name|grp
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|"."
operator|+
name|counter
operator|.
name|getDisplayName
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
operator|new
name|Long
argument_list|(
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
block|{
name|countername
block|,
name|value
block|}
decl_stmt|;
comment|//System.out.println("part0:"+parts[0]+",:part1 "+parts[1]);
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.FILE_BYTES_READ"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|FILE_BYTES_READ
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.FILE_BYTES_WRITTEN"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|FILE_BYTES_WRITTEN
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.HDFS_BYTES_READ"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|HDFS_BYTES_READ
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"FileSystemCounters.HDFS_BYTES_WRITTEN"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|HDFS_BYTES_WRITTEN
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Reduce input records"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|INPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Reduce output records"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|OUTPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Combine input records"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|COMBINE_INPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Combine output records"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|COMBINE_OUTPUT_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Reduce input groups"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|INPUT_GROUPS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Spilled Records"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|SPILLED_RECORDS
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"Map-Reduce Framework.Reduce shuffle bytes"
argument_list|)
condition|)
block|{
name|reduceTask
operator|.
name|setValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|SHUFFLE_BYTES
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ReduceCounterKey:<"
operator|+
name|parts
index|[
literal|0
index|]
operator|+
literal|"> ==> NOT INCLUDED IN PERFORMANCE ADVISOR REDUCE TASK"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Print the Job Execution Statistics    * TODO: split to pring job, map/reduce task list and individual map/reduce task stats    */
DECL|method|printJobExecutionStatistics ()
specifier|public
name|void
name|printJobExecutionStatistics
parameter_list|()
block|{
comment|/*      * Print Job Counters      */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"JOB COUNTERS *********************************************"
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|this
operator|.
name|_job
operator|.
name|size
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
argument_list|>
name|kv
init|=
name|this
operator|.
name|_job
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
operator|)
name|kv
operator|.
name|next
argument_list|()
decl_stmt|;
name|Enum
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Key:<"
operator|+
name|key
operator|.
name|name
argument_list|()
operator|+
literal|">, value:<"
operator|+
name|value
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
comment|/*      *       */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MAP COUNTERS *********************************************"
argument_list|)
expr_stmt|;
name|int
name|size1
init|=
name|this
operator|.
name|_mapTaskList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size1
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MAP TASK *********************************************"
argument_list|)
expr_stmt|;
name|this
operator|.
name|_mapTaskList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|printKeys
argument_list|()
expr_stmt|;
block|}
comment|/*      *       */
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REDUCE COUNTERS *********************************************"
argument_list|)
expr_stmt|;
name|int
name|size2
init|=
name|this
operator|.
name|_mapTaskList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size2
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"REDUCE TASK *********************************************"
argument_list|)
expr_stmt|;
name|this
operator|.
name|_reduceTaskList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|printKeys
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Hash table keeping sorted lists of map tasks based on the specific map task key    */
DECL|field|_sortedMapTaskListsByKey
specifier|private
name|Hashtable
argument_list|<
name|Enum
argument_list|,
name|ArrayList
argument_list|<
name|MapTaskStatistics
argument_list|>
argument_list|>
name|_sortedMapTaskListsByKey
init|=
operator|new
name|Hashtable
argument_list|<
name|Enum
argument_list|,
name|ArrayList
argument_list|<
name|MapTaskStatistics
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/*    * @return mapTaskList : ArrayList of MapTaskStatistics    * @param mapTaskSortKey : Specific counter key used for sorting the task list    * @param datatype : indicates the data type of the counter key used for sorting    * If sort key is null then by default map tasks are sorted using map task ids.    */
specifier|public
specifier|synchronized
name|ArrayList
argument_list|<
name|MapTaskStatistics
argument_list|>
DECL|method|getMapTaskList (Enum mapTaskSortKey, KeyDataType dataType)
name|getMapTaskList
parameter_list|(
name|Enum
name|mapTaskSortKey
parameter_list|,
name|KeyDataType
name|dataType
parameter_list|)
block|{
comment|/*       * If mapTaskSortKey is null then use the task id as a key.      */
if|if
condition|(
name|mapTaskSortKey
operator|==
literal|null
condition|)
block|{
name|mapTaskSortKey
operator|=
name|MapTaskKeys
operator|.
name|TASK_ID
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|_sortedMapTaskListsByKey
operator|.
name|get
argument_list|(
name|mapTaskSortKey
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|MapTaskStatistics
argument_list|>
name|newList
init|=
operator|(
name|ArrayList
argument_list|<
name|MapTaskStatistics
argument_list|>
operator|)
name|this
operator|.
name|_mapTaskList
operator|.
name|clone
argument_list|()
decl_stmt|;
name|this
operator|.
name|_sortedMapTaskListsByKey
operator|.
name|put
argument_list|(
name|mapTaskSortKey
argument_list|,
name|this
operator|.
name|sortMapTasksByKey
argument_list|(
name|newList
argument_list|,
name|mapTaskSortKey
argument_list|,
name|dataType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|_sortedMapTaskListsByKey
operator|.
name|get
argument_list|(
name|mapTaskSortKey
argument_list|)
return|;
block|}
DECL|method|sortMapTasksByKey (ArrayList<MapTaskStatistics> mapTasks, Enum key, Enum dataType)
specifier|private
name|ArrayList
argument_list|<
name|MapTaskStatistics
argument_list|>
name|sortMapTasksByKey
parameter_list|(
name|ArrayList
argument_list|<
name|MapTaskStatistics
argument_list|>
name|mapTasks
parameter_list|,
name|Enum
name|key
parameter_list|,
name|Enum
name|dataType
parameter_list|)
block|{
name|MapCounterComparator
name|mcc
init|=
operator|new
name|MapCounterComparator
argument_list|(
name|key
argument_list|,
name|dataType
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|mapTasks
argument_list|,
name|mcc
argument_list|)
expr_stmt|;
return|return
name|mapTasks
return|;
block|}
DECL|class|MapCounterComparator
specifier|private
class|class
name|MapCounterComparator
implements|implements
name|Comparator
argument_list|<
name|MapTaskStatistics
argument_list|>
block|{
DECL|field|_sortKey
specifier|public
name|Enum
name|_sortKey
decl_stmt|;
DECL|field|_dataType
specifier|public
name|Enum
name|_dataType
decl_stmt|;
DECL|method|MapCounterComparator (Enum key, Enum dataType)
specifier|public
name|MapCounterComparator
parameter_list|(
name|Enum
name|key
parameter_list|,
name|Enum
name|dataType
parameter_list|)
block|{
name|this
operator|.
name|_sortKey
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|_dataType
operator|=
name|dataType
expr_stmt|;
block|}
comment|// Comparator interface requires defining compare method.
DECL|method|compare (MapTaskStatistics a, MapTaskStatistics b)
specifier|public
name|int
name|compare
parameter_list|(
name|MapTaskStatistics
name|a
parameter_list|,
name|MapTaskStatistics
name|b
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|_dataType
operator|==
name|KeyDataType
operator|.
name|LONG
condition|)
block|{
name|long
name|aa
init|=
name|a
operator|.
name|getLongValue
argument_list|(
name|this
operator|.
name|_sortKey
argument_list|)
decl_stmt|;
name|long
name|bb
init|=
name|b
operator|.
name|getLongValue
argument_list|(
name|this
operator|.
name|_sortKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|aa
operator|<
name|bb
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|aa
operator|==
name|bb
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|aa
operator|>
name|bb
condition|)
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|a
operator|.
name|getStringValue
argument_list|(
name|this
operator|.
name|_sortKey
argument_list|)
operator|.
name|compareToIgnoreCase
argument_list|(
name|b
operator|.
name|getStringValue
argument_list|(
name|this
operator|.
name|_sortKey
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
comment|/*    * Reduce Array List sorting    */
DECL|field|_sortedReduceTaskListsByKey
specifier|private
name|Hashtable
argument_list|<
name|Enum
argument_list|,
name|ArrayList
argument_list|<
name|ReduceTaskStatistics
argument_list|>
argument_list|>
name|_sortedReduceTaskListsByKey
init|=
operator|new
name|Hashtable
argument_list|<
name|Enum
argument_list|,
name|ArrayList
argument_list|<
name|ReduceTaskStatistics
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/*      * @return reduceTaskList : ArrayList of ReduceTaskStatistics    * @param reduceTaskSortKey : Specific counter key used for sorting the task list    * @param dataType : indicates the data type of the counter key used for sorting    * If sort key is null then, by default reduce tasks are sorted using task ids.      */
specifier|public
specifier|synchronized
name|ArrayList
argument_list|<
name|ReduceTaskStatistics
argument_list|>
DECL|method|getReduceTaskList (Enum reduceTaskSortKey, KeyDataType dataType)
name|getReduceTaskList
parameter_list|(
name|Enum
name|reduceTaskSortKey
parameter_list|,
name|KeyDataType
name|dataType
parameter_list|)
block|{
comment|/*       * If reduceTaskSortKey is null then use the task id as a key.      */
if|if
condition|(
name|reduceTaskSortKey
operator|==
literal|null
condition|)
block|{
name|reduceTaskSortKey
operator|=
name|ReduceTaskKeys
operator|.
name|TASK_ID
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|_sortedReduceTaskListsByKey
operator|.
name|get
argument_list|(
name|reduceTaskSortKey
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|ReduceTaskStatistics
argument_list|>
name|newList
init|=
operator|(
name|ArrayList
argument_list|<
name|ReduceTaskStatistics
argument_list|>
operator|)
name|this
operator|.
name|_reduceTaskList
operator|.
name|clone
argument_list|()
decl_stmt|;
name|this
operator|.
name|_sortedReduceTaskListsByKey
operator|.
name|put
argument_list|(
name|reduceTaskSortKey
argument_list|,
name|this
operator|.
name|sortReduceTasksByKey
argument_list|(
name|newList
argument_list|,
name|reduceTaskSortKey
argument_list|,
name|dataType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|_sortedReduceTaskListsByKey
operator|.
name|get
argument_list|(
name|reduceTaskSortKey
argument_list|)
return|;
block|}
DECL|method|sortReduceTasksByKey (ArrayList<ReduceTaskStatistics> reduceTasks, Enum key, Enum dataType)
specifier|private
name|ArrayList
argument_list|<
name|ReduceTaskStatistics
argument_list|>
name|sortReduceTasksByKey
parameter_list|(
name|ArrayList
argument_list|<
name|ReduceTaskStatistics
argument_list|>
name|reduceTasks
parameter_list|,
name|Enum
name|key
parameter_list|,
name|Enum
name|dataType
parameter_list|)
block|{
name|ReduceCounterComparator
name|rcc
init|=
operator|new
name|ReduceCounterComparator
argument_list|(
name|key
argument_list|,
name|dataType
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|reduceTasks
argument_list|,
name|rcc
argument_list|)
expr_stmt|;
return|return
name|reduceTasks
return|;
block|}
DECL|class|ReduceCounterComparator
specifier|private
class|class
name|ReduceCounterComparator
implements|implements
name|Comparator
argument_list|<
name|ReduceTaskStatistics
argument_list|>
block|{
DECL|field|_sortKey
specifier|public
name|Enum
name|_sortKey
decl_stmt|;
DECL|field|_dataType
specifier|public
name|Enum
name|_dataType
decl_stmt|;
comment|//either long or string
DECL|method|ReduceCounterComparator (Enum key, Enum dataType)
specifier|public
name|ReduceCounterComparator
parameter_list|(
name|Enum
name|key
parameter_list|,
name|Enum
name|dataType
parameter_list|)
block|{
name|this
operator|.
name|_sortKey
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|_dataType
operator|=
name|dataType
expr_stmt|;
block|}
comment|// Comparator interface requires defining compare method.
DECL|method|compare (ReduceTaskStatistics a, ReduceTaskStatistics b)
specifier|public
name|int
name|compare
parameter_list|(
name|ReduceTaskStatistics
name|a
parameter_list|,
name|ReduceTaskStatistics
name|b
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|_dataType
operator|==
name|KeyDataType
operator|.
name|LONG
condition|)
block|{
name|long
name|aa
init|=
name|a
operator|.
name|getLongValue
argument_list|(
name|this
operator|.
name|_sortKey
argument_list|)
decl_stmt|;
name|long
name|bb
init|=
name|b
operator|.
name|getLongValue
argument_list|(
name|this
operator|.
name|_sortKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|aa
operator|<
name|bb
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|aa
operator|==
name|bb
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|aa
operator|>
name|bb
condition|)
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|a
operator|.
name|getStringValue
argument_list|(
name|this
operator|.
name|_sortKey
argument_list|)
operator|.
name|compareToIgnoreCase
argument_list|(
name|b
operator|.
name|getStringValue
argument_list|(
name|this
operator|.
name|_sortKey
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

