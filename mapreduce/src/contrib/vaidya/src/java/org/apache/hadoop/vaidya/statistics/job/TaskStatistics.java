begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vaidya.statistics.job
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|statistics
operator|.
name|job
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TaskStatistics
specifier|public
class|class
name|TaskStatistics
block|{
comment|/*    * Stores task statistics as Enum/String key,value pairs.    */
DECL|field|_task
specifier|private
name|Hashtable
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
name|_task
init|=
operator|new
name|Hashtable
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/*     * Get Long key value    */
DECL|method|getLongValue (Enum key)
specifier|public
name|long
name|getLongValue
parameter_list|(
name|Enum
name|key
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|_task
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|long
operator|)
literal|0
return|;
block|}
else|else
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|this
operator|.
name|_task
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/*    * Get key type Double    */
DECL|method|getDoubleValue (Enum key)
specifier|public
name|double
name|getDoubleValue
parameter_list|(
name|Enum
name|key
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|_task
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|double
operator|)
literal|0
return|;
block|}
else|else
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|this
operator|.
name|_task
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/*    * Get key of type String    */
DECL|method|getStringValue (Enum key)
specifier|public
name|String
name|getStringValue
parameter_list|(
name|Enum
name|key
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|_task
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|_task
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
comment|/*    * Set long key value     */
DECL|method|setValue (Enum key, long value)
specifier|public
name|void
name|setValue
parameter_list|(
name|Enum
name|key
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|_task
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Set double key value    */
DECL|method|setValue (Enum key, double value)
specifier|public
name|void
name|setValue
parameter_list|(
name|Enum
name|key
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|this
operator|.
name|_task
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Set String key value    */
DECL|method|setValue (Enum key, String value)
specifier|public
name|void
name|setValue
parameter_list|(
name|Enum
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|_task
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/*    * Print the key/values pairs for a task     */
DECL|method|printKeys ()
specifier|public
name|void
name|printKeys
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
argument_list|>
name|task
init|=
name|this
operator|.
name|_task
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|task
operator|.
name|size
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
argument_list|>
name|kv
init|=
name|task
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|Enum
argument_list|,
name|String
argument_list|>
operator|)
name|kv
operator|.
name|next
argument_list|()
decl_stmt|;
name|Enum
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Key:<"
operator|+
name|key
operator|.
name|name
argument_list|()
operator|+
literal|">, value:<"
operator|+
name|value
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

