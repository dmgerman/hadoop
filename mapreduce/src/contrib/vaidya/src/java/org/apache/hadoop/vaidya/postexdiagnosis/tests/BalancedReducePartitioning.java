begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vaidya.postexdiagnosis.tests
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|postexdiagnosis
operator|.
name|tests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|statistics
operator|.
name|job
operator|.
name|JobStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|statistics
operator|.
name|job
operator|.
name|JobStatisticsInterface
operator|.
name|JobKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|statistics
operator|.
name|job
operator|.
name|JobStatisticsInterface
operator|.
name|KeyDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|statistics
operator|.
name|job
operator|.
name|JobStatisticsInterface
operator|.
name|ReduceTaskKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|statistics
operator|.
name|job
operator|.
name|ReduceTaskStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|DiagnosticTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|BalancedReducePartitioning
specifier|public
class|class
name|BalancedReducePartitioning
extends|extends
name|DiagnosticTest
block|{
DECL|field|totalReduces
specifier|private
name|long
name|totalReduces
decl_stmt|;
DECL|field|busyReducers
specifier|private
name|long
name|busyReducers
decl_stmt|;
DECL|field|percentReduceRecordsSize
specifier|private
name|long
name|percentReduceRecordsSize
decl_stmt|;
DECL|field|percent
specifier|private
name|double
name|percent
decl_stmt|;
DECL|field|impact
specifier|private
name|double
name|impact
decl_stmt|;
DECL|field|_job
specifier|private
name|JobStatistics
name|_job
decl_stmt|;
comment|/**    *     */
DECL|method|BalancedReducePartitioning ()
specifier|public
name|BalancedReducePartitioning
parameter_list|()
block|{   }
comment|/*        */
annotation|@
name|Override
DECL|method|evaluate (JobStatistics jobExecutionStats)
specifier|public
name|double
name|evaluate
parameter_list|(
name|JobStatistics
name|jobExecutionStats
parameter_list|)
block|{
comment|/* Set the global job variable */
name|this
operator|.
name|_job
operator|=
name|jobExecutionStats
expr_stmt|;
comment|/* If Map only job then impact is zero */
if|if
condition|(
name|jobExecutionStats
operator|.
name|getStringValue
argument_list|(
name|JobKeys
operator|.
name|JOBTYPE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"MAP_ONLY"
argument_list|)
condition|)
block|{
name|this
operator|.
name|impact
operator|=
literal|0
expr_stmt|;
return|return
name|this
operator|.
name|impact
return|;
block|}
comment|/*      * Read this rule specific input PercentReduceRecords      */
name|this
operator|.
name|percent
operator|=
name|getInputElementDoubleValue
argument_list|(
literal|"PercentReduceRecords"
argument_list|,
literal|0.90
argument_list|)
expr_stmt|;
comment|/*      * Get the sorted reduce task list by number of INPUT_RECORDS (ascending)       */
name|List
argument_list|<
name|ReduceTaskStatistics
argument_list|>
name|srTaskList
init|=
name|jobExecutionStats
operator|.
name|getReduceTaskList
argument_list|(
name|ReduceTaskKeys
operator|.
name|INPUT_RECORDS
argument_list|,
name|KeyDataType
operator|.
name|LONG
argument_list|)
decl_stmt|;
name|this
operator|.
name|percentReduceRecordsSize
operator|=
call|(
name|long
call|)
argument_list|(
name|this
operator|.
name|percent
operator|*
name|jobExecutionStats
operator|.
name|getLongValue
argument_list|(
name|JobKeys
operator|.
name|REDUCE_INPUT_RECORDS
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|totalReduces
operator|=
name|jobExecutionStats
operator|.
name|getLongValue
argument_list|(
name|JobKeys
operator|.
name|TOTAL_REDUCES
argument_list|)
expr_stmt|;
name|long
name|tempReduceRecordsCount
init|=
literal|0
decl_stmt|;
name|this
operator|.
name|busyReducers
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|srTaskList
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
block|{
name|tempReduceRecordsCount
operator|+=
name|srTaskList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLongValue
argument_list|(
name|ReduceTaskKeys
operator|.
name|INPUT_RECORDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|busyReducers
operator|++
expr_stmt|;
if|if
condition|(
name|tempReduceRecordsCount
operator|>=
name|this
operator|.
name|percentReduceRecordsSize
condition|)
block|{
break|break;
block|}
block|}
comment|// Calculate Impact
return|return
name|this
operator|.
name|impact
operator|=
operator|(
literal|1
operator|-
operator|(
name|double
operator|)
name|this
operator|.
name|busyReducers
operator|/
operator|(
name|double
operator|)
name|this
operator|.
name|totalReduces
operator|)
return|;
block|}
comment|/*    * helper function to print specific reduce counter for all reduce tasks    */
DECL|method|printReduceCounters (List<Hashtable<ReduceTaskKeys, String>> x, ReduceTaskKeys key)
specifier|public
name|void
name|printReduceCounters
parameter_list|(
name|List
argument_list|<
name|Hashtable
argument_list|<
name|ReduceTaskKeys
argument_list|,
name|String
argument_list|>
argument_list|>
name|x
parameter_list|,
name|ReduceTaskKeys
name|key
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|x
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ind:"
operator|+
name|i
operator|+
literal|", Value:"
operator|+
name|x
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*     *     */
annotation|@
name|Override
DECL|method|getPrescription ()
specifier|public
name|String
name|getPrescription
parameter_list|()
block|{
return|return
literal|"* Use the appropriate partitioning function"
operator|+
literal|"\n"
operator|+
literal|"* For streaming job consider following partitioner and hadoop config parameters\n"
operator|+
literal|"  * org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner\n"
operator|+
literal|"  * -jobconf stream.map.output.field.separator, -jobconf stream.num.map.output.key.fields"
return|;
block|}
comment|/*     */
annotation|@
name|Override
DECL|method|getReferenceDetails ()
specifier|public
name|String
name|getReferenceDetails
parameter_list|()
block|{
name|String
name|ref
init|=
literal|"* TotalReduceTasks: "
operator|+
name|this
operator|.
name|totalReduces
operator|+
literal|"\n"
operator|+
literal|"* BusyReduceTasks processing "
operator|+
name|this
operator|.
name|percent
operator|+
literal|"% of total records: "
operator|+
name|this
operator|.
name|busyReducers
operator|+
literal|"\n"
operator|+
literal|"* Impact: "
operator|+
name|truncate
argument_list|(
name|this
operator|.
name|impact
argument_list|)
decl_stmt|;
return|return
name|ref
return|;
block|}
block|}
end_class

end_unit

