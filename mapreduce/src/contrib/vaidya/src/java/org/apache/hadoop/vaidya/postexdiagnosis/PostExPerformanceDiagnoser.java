begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vaidya.postexdiagnosis
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|postexdiagnosis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|DiagnosticTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|JobDiagnoser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|statistics
operator|.
name|job
operator|.
name|JobStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vaidya
operator|.
name|util
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * This class acts as a driver or rule engine for executing the post execution   * performance diagnostics tests of a map/reduce job. It prints or saves the   * diagnostic report as a xml document.   */
end_comment

begin_class
DECL|class|PostExPerformanceDiagnoser
specifier|public
class|class
name|PostExPerformanceDiagnoser
extends|extends
name|JobDiagnoser
block|{
DECL|field|_jobHistoryFile
specifier|private
name|String
name|_jobHistoryFile
init|=
literal|null
decl_stmt|;
DECL|field|_testsConfFileIs
specifier|private
name|InputStream
name|_testsConfFileIs
init|=
literal|null
decl_stmt|;
DECL|field|_reportFile
specifier|private
name|String
name|_reportFile
init|=
literal|null
decl_stmt|;
DECL|field|_jobConfFile
specifier|private
name|String
name|_jobConfFile
init|=
literal|null
decl_stmt|;
comment|/*     * Data available for analysts to write post execution performance diagnostic rules     */
DECL|field|_jobExecutionStatistics
specifier|private
name|JobStatistics
name|_jobExecutionStatistics
decl_stmt|;
comment|/*    * Get the report file where diagnostic report is to be saved    */
DECL|method|getReportFile ()
specifier|public
name|String
name|getReportFile
parameter_list|()
block|{
return|return
name|this
operator|.
name|_reportFile
return|;
block|}
comment|/*    * Get the job history log file used in collecting the job counters    */
DECL|method|getJobHistoryFile ()
specifier|public
name|String
name|getJobHistoryFile
parameter_list|()
block|{
return|return
name|this
operator|.
name|_jobHistoryFile
return|;
block|}
comment|/*    * Get the test configuration file where all the diagnostic tests are registered    * with their configuration information.    */
DECL|method|getTestsConfFileIs ()
specifier|public
name|InputStream
name|getTestsConfFileIs
parameter_list|()
block|{
return|return
name|this
operator|.
name|_testsConfFileIs
return|;
block|}
comment|/*    * Set the test configuration file    */
DECL|method|setTestsConfFileIs (InputStream testsConfFileIs)
specifier|public
name|void
name|setTestsConfFileIs
parameter_list|(
name|InputStream
name|testsConfFileIs
parameter_list|)
block|{
name|this
operator|.
name|_testsConfFileIs
operator|=
name|testsConfFileIs
expr_stmt|;
block|}
comment|/**    * @return JobStatistics - Object storing the job configuration and execution    * counters and statistics information    */
DECL|method|getJobExecutionStatistics ()
specifier|public
name|JobStatistics
name|getJobExecutionStatistics
parameter_list|()
block|{
return|return
name|_jobExecutionStatistics
return|;
block|}
comment|/**    * @param jobConfFile - URL pointing to job configuration (job_conf.xml) file    * @param jobHistoryFile - URL pointing to job history log file      * @param testsConfFileIs - file path for test configuration file (optional).     * If not specified default path is:$HADOOP_PREFIX/contrib/vaidya/pxpd_tests_config.xml    * @param reportFile - file path for storing report (optional)    */
DECL|method|PostExPerformanceDiagnoser (String jobConfFile, String jobHistoryFile, InputStream testsConfFileIs, String reportFile)
specifier|public
name|PostExPerformanceDiagnoser
parameter_list|(
name|String
name|jobConfFile
parameter_list|,
name|String
name|jobHistoryFile
parameter_list|,
name|InputStream
name|testsConfFileIs
parameter_list|,
name|String
name|reportFile
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|_jobHistoryFile
operator|=
name|jobHistoryFile
expr_stmt|;
name|this
operator|.
name|_testsConfFileIs
operator|=
name|testsConfFileIs
expr_stmt|;
name|this
operator|.
name|_reportFile
operator|=
name|reportFile
expr_stmt|;
name|this
operator|.
name|_jobConfFile
operator|=
name|jobConfFile
expr_stmt|;
comment|/*      * Read the job information necessary for post performance analysis      */
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|JobInfo
name|jobInfo
init|=
name|readJobInformation
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|this
operator|.
name|_jobExecutionStatistics
operator|=
operator|new
name|JobStatistics
argument_list|(
name|jobConf
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * read and populate job statistics information.    */
DECL|method|readJobInformation (JobConf jobConf)
specifier|private
name|JobInfo
name|readJobInformation
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|Exception
block|{
comment|/*      * Convert the input strings to URL      */
name|URL
name|jobConfFileUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|_jobConfFile
argument_list|)
decl_stmt|;
name|URL
name|jobHistoryFileUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|_jobHistoryFile
argument_list|)
decl_stmt|;
comment|/*      * Read the Job Configuration from the jobConfFile url      */
name|jobConf
operator|.
name|addResource
argument_list|(
name|jobConfFileUrl
argument_list|)
expr_stmt|;
comment|/*       * Read JobHistoryFile and build job counters to evaluate diagnostic rules      */
name|JobHistoryParser
name|parser
decl_stmt|;
name|JobInfo
name|jobInfo
decl_stmt|;
if|if
condition|(
name|jobHistoryFileUrl
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hdfs"
argument_list|)
condition|)
block|{
name|parser
operator|=
operator|new
name|JobHistoryParser
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|jobConf
argument_list|)
argument_list|,
name|jobHistoryFileUrl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jobHistoryFileUrl
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|parser
operator|=
operator|new
name|JobHistoryParser
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|jobConf
argument_list|)
argument_list|,
name|jobHistoryFileUrl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Malformed URL. Protocol: "
operator|+
name|jobHistoryFileUrl
operator|.
name|getProtocol
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|jobInfo
return|;
block|}
comment|/*    * print Help    */
DECL|method|printHelp ()
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"PostExPerformanceDiagnoser -jobconf<fileurl> -joblog<fileurl> [-testconf<filepath>] [-report<filepath>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-jobconf<fileurl>     : File path for job configuration file (e.g. job_xxxx_conf.xml). It can be on HDFS or"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                       : local file system. It should be specified in the URL format."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                       : e.g. local file => file://localhost/Users/hadoop-user/job_0001_conf.xml"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                       : e.g. hdfs file  => hdfs://namenode:port/Users/hadoop-user/hodlogs/.../job_0001_conf.xml"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-joblog<fileurl>      : File path for job history log file. It can be on HDFS or local file system."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                       : It should be specified in the URL format."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-testconf<filepath>   : Optional file path for performance advisor tests configuration file. It should be available"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                       : on local file system and be specified as as an absolute file path."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                       : e.g. => /Users/hadoop-user/postex_diagnosis_tests.xml. If not specified default file will be used"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                       : from the hadoop-{ver}-vaidya.jar in a classpath."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                       : For user to view or make local copy of default tests, file is available at $HADOOP_PREFIX/contrib/vaidya/conf/postex_diagnosis_tests.xml"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-report<filepath>     : Optional file path for for storing diagnostic report in a XML format. Path should be available"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                       : on local file system and be specified as as an absolute file path."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                       : e.g. => /Users/hadoop-user/postex_diagnosis_report.xml. If not specified report will be printed on console"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-help                  : prints this usage"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param args    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|jobconffile
init|=
literal|null
decl_stmt|;
name|String
name|joblogfile
init|=
literal|null
decl_stmt|;
name|InputStream
name|testsconffileis
init|=
literal|null
decl_stmt|;
name|String
name|reportfile
init|=
literal|null
decl_stmt|;
comment|/*      * Parse the command line arguments      */
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|=
name|i
operator|+
literal|2
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-jobconf"
argument_list|)
condition|)
block|{
name|jobconffile
operator|=
name|args
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-joblog"
argument_list|)
condition|)
block|{
name|joblogfile
operator|=
name|args
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-testconf"
argument_list|)
condition|)
block|{
name|testsconffileis
operator|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|args
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-report"
argument_list|)
condition|)
block|{
name|reportfile
operator|=
name|args
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
name|printHelp
argument_list|()
expr_stmt|;
return|return;
block|}
else|else
block|{
name|printHelp
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid arguments."
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|printHelp
argument_list|()
expr_stmt|;
block|}
comment|// Check if required arguments are specified
if|if
condition|(
name|jobconffile
operator|==
literal|null
operator|||
name|joblogfile
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid arguments: -jobconf or -joblog arguments are missing"
argument_list|)
expr_stmt|;
name|printHelp
argument_list|()
expr_stmt|;
return|return;
block|}
try|try
block|{
comment|/*        * Create performance advisor and read job execution statistics        */
name|PostExPerformanceDiagnoser
name|pa
init|=
operator|new
name|PostExPerformanceDiagnoser
argument_list|(
name|jobconffile
argument_list|,
name|joblogfile
argument_list|,
name|testsconffileis
argument_list|,
name|reportfile
argument_list|)
decl_stmt|;
comment|/*        * Read the diagnostic tests configuration file (xml)        */
if|if
condition|(
name|pa
operator|.
name|getTestsConfFileIs
argument_list|()
operator|==
literal|null
condition|)
block|{
name|java
operator|.
name|io
operator|.
name|InputStream
name|testsconfis
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"postex_diagnosis_tests.xml"
argument_list|)
decl_stmt|;
name|pa
operator|.
name|setTestsConfFileIs
argument_list|(
name|testsconfis
argument_list|)
expr_stmt|;
block|}
comment|/*        * Parse the tests configuration file        */
name|Document
name|rulesDoc
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|pa
operator|.
name|getTestsConfFileIs
argument_list|()
argument_list|)
decl_stmt|;
comment|/*         * Read the diagnostic rule entries from the config file.        * For every rule read and load the rule class name        * Execute the Run() method of the class and get the report element        */
name|NodeList
name|list
init|=
name|rulesDoc
operator|.
name|getElementsByTagName
argument_list|(
literal|"DiagnosticTest"
argument_list|)
decl_stmt|;
name|int
name|list_size
init|=
name|list
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list_size
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|dRule
init|=
operator|(
name|Element
operator|)
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NodeList
name|cNodeList
init|=
name|dRule
operator|.
name|getElementsByTagName
argument_list|(
literal|"ClassName"
argument_list|)
decl_stmt|;
name|Element
name|cn
init|=
operator|(
name|Element
operator|)
name|cNodeList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|cn
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Class
name|rc
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|DiagnosticTest
name|test
init|=
operator|(
name|DiagnosticTest
operator|)
name|rc
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|test
operator|.
name|initGlobals
argument_list|(
name|pa
operator|.
name|getJobExecutionStatistics
argument_list|()
argument_list|,
operator|(
name|Element
operator|)
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|run
argument_list|()
expr_stmt|;
name|NodeList
name|nodelist
init|=
name|pa
operator|.
name|getReport
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"PostExPerformanceDiagnosticReport"
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
operator|(
name|Element
operator|)
name|nodelist
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//root.appendChild(rule.getReportElement(pa.getReport(), root));
name|Element
name|re
init|=
name|test
operator|.
name|getReportElement
argument_list|(
name|pa
operator|.
name|getReport
argument_list|()
argument_list|,
name|root
argument_list|,
name|i
argument_list|)
decl_stmt|;
comment|//XMLUtils.printDOM(re);
block|}
comment|//Optionally print or save the report
if|if
condition|(
name|pa
operator|.
name|getReportFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|pa
operator|.
name|printReport
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pa
operator|.
name|saveReport
argument_list|(
name|pa
operator|.
name|getReportFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Exception:"
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

