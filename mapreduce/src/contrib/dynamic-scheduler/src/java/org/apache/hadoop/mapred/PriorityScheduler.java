begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_comment
comment|/**  * A {@link TaskScheduler} that   * provides the following features:   * (1) allows continuous enforcement of user controlled dynamic queue shares,  * (2) preempts tasks exceeding their queue shares instantaneously when new   * jobs arrive,  * (3) is work conserving,  * (4) tracks queue usage to only charge when jobs are pending or running,  * (5) authorizes queue submissions based on symmetric private key HMAC/SHA1   * signatures.  */
end_comment

begin_class
DECL|class|PriorityScheduler
class|class
name|PriorityScheduler
extends|extends
name|QueueTaskScheduler
block|{
DECL|class|InitThread
specifier|private
class|class
name|InitThread
extends|extends
name|Thread
block|{
DECL|field|job
name|JobInProgress
name|job
decl_stmt|;
DECL|method|InitThread (JobInProgress job)
name|InitThread
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|taskTrackerManager
operator|.
name|initJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|JobListener
specifier|private
class|class
name|JobListener
extends|extends
name|JobInProgressListener
block|{
annotation|@
name|Override
DECL|method|jobAdded (JobInProgress job)
specifier|public
name|void
name|jobAdded
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
operator|new
name|InitThread
argument_list|(
name|job
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|PriorityScheduler
operator|.
name|this
init|)
block|{
name|String
name|queue
init|=
name|authorize
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|job
operator|.
name|kill
argument_list|()
expr_stmt|;
return|return;
block|}
name|jobQueue
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|QueueJobs
name|jobs
init|=
name|queueJobs
operator|.
name|get
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobs
operator|==
literal|null
condition|)
block|{
name|jobs
operator|=
operator|new
name|QueueJobs
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|queueJobs
operator|.
name|put
argument_list|(
name|queue
argument_list|,
name|jobs
argument_list|)
expr_stmt|;
block|}
name|jobs
operator|.
name|jobs
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Add job "
operator|+
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|jobRemoved (JobInProgress job)
specifier|public
name|void
name|jobRemoved
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
synchronized|synchronized
init|(
name|PriorityScheduler
operator|.
name|this
init|)
block|{
name|jobQueue
operator|.
name|remove
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
name|getQueue
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|queueJobs
operator|.
name|get
argument_list|(
name|queue
argument_list|)
operator|.
name|jobs
operator|.
name|remove
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|jobUpdated (JobChangeEvent event)
specifier|public
name|void
name|jobUpdated
parameter_list|(
name|JobChangeEvent
name|event
parameter_list|)
block|{     }
block|}
DECL|field|TASK_COMPARATOR
specifier|static
specifier|final
name|Comparator
argument_list|<
name|TaskInProgress
argument_list|>
name|TASK_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|TaskInProgress
name|o1
parameter_list|,
name|TaskInProgress
name|o2
parameter_list|)
block|{
name|int
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|o1
operator|.
name|getProgress
argument_list|()
operator|<
name|o2
operator|.
name|getProgress
argument_list|()
condition|)
block|{
name|res
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
operator|(
name|o1
operator|.
name|getProgress
argument_list|()
operator|==
name|o2
operator|.
name|getProgress
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|o1
operator|.
name|getExecStartTime
argument_list|()
operator|>
name|o2
operator|.
name|getExecStartTime
argument_list|()
condition|)
block|{
name|res
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
operator|(
name|o1
operator|.
name|getExecStartTime
argument_list|()
operator|==
name|o2
operator|.
name|getExecStartTime
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
block|}
decl_stmt|;
DECL|field|QUEUE_COMPARATOR
specifier|static
specifier|final
name|Comparator
argument_list|<
name|KillQueue
argument_list|>
name|QUEUE_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|KillQueue
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|KillQueue
name|o1
parameter_list|,
name|KillQueue
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|startTime
operator|<
name|o2
operator|.
name|startTime
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|startTime
operator|>
name|o2
operator|.
name|startTime
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
DECL|class|QueueJobs
class|class
name|QueueJobs
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|jobs
name|LinkedList
argument_list|<
name|JobInProgress
argument_list|>
name|jobs
init|=
operator|new
name|LinkedList
argument_list|<
name|JobInProgress
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|QueueJobs (String name)
name|QueueJobs
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
DECL|class|QueueQuota
class|class
name|QueueQuota
block|{
DECL|field|quota
name|int
name|quota
decl_stmt|;
DECL|field|map_used
name|int
name|map_used
decl_stmt|;
DECL|field|reduce_used
name|int
name|reduce_used
decl_stmt|;
DECL|field|map_pending
name|int
name|map_pending
decl_stmt|;
DECL|field|reduce_pending
name|int
name|reduce_pending
decl_stmt|;
DECL|field|mappers
name|int
name|mappers
decl_stmt|;
DECL|field|reducers
name|int
name|reducers
decl_stmt|;
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|method|QueueQuota (String name)
name|QueueQuota
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
DECL|field|allocator
specifier|private
name|QueueAllocator
name|allocator
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PriorityScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAP
specifier|static
specifier|final
name|boolean
name|MAP
init|=
literal|true
decl_stmt|;
DECL|field|REDUCE
specifier|static
specifier|final
name|boolean
name|REDUCE
init|=
literal|false
decl_stmt|;
DECL|field|FILL
specifier|private
specifier|static
specifier|final
name|boolean
name|FILL
init|=
literal|true
decl_stmt|;
DECL|field|NO_FILL
specifier|private
specifier|static
specifier|final
name|boolean
name|NO_FILL
init|=
literal|false
decl_stmt|;
DECL|field|jobListener
specifier|private
name|JobListener
name|jobListener
init|=
operator|new
name|JobListener
argument_list|()
decl_stmt|;
DECL|field|debug
specifier|private
specifier|static
specifier|final
name|boolean
name|debug
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
DECL|field|sortTasks
specifier|private
name|boolean
name|sortTasks
init|=
literal|true
decl_stmt|;
DECL|field|lastKill
specifier|private
name|long
name|lastKill
init|=
literal|0
decl_stmt|;
DECL|field|killInterval
specifier|private
name|long
name|killInterval
init|=
literal|0
decl_stmt|;
DECL|field|auth
specifier|private
name|PriorityAuthorization
name|auth
init|=
operator|new
name|PriorityAuthorization
argument_list|()
decl_stmt|;
DECL|field|jobQueue
specifier|private
name|LinkedList
argument_list|<
name|JobInProgress
argument_list|>
name|jobQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|JobInProgress
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|queueJobs
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|QueueJobs
argument_list|>
name|queueJobs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|QueueJobs
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|taskTrackerManager
operator|.
name|addJobInProgressListener
argument_list|(
name|jobListener
argument_list|)
expr_stmt|;
name|sortTasks
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"mapred.priority-scheduler.sort-tasks"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|killInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"mapred.priority-scheduler.kill-interval"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|auth
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|terminate ()
specifier|public
name|void
name|terminate
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|setAllocator (QueueAllocator allocator)
specifier|public
name|void
name|setAllocator
parameter_list|(
name|QueueAllocator
name|allocator
parameter_list|)
block|{
name|this
operator|.
name|allocator
operator|=
name|allocator
expr_stmt|;
block|}
DECL|method|assignMapRedTask (JobInProgress job, TaskTrackerStatus taskTracker, int numTrackers, List<Task> assignedTasks, Map<String,QueueQuota> queueQuota, boolean fill, boolean map)
specifier|private
name|boolean
name|assignMapRedTask
parameter_list|(
name|JobInProgress
name|job
parameter_list|,
name|TaskTrackerStatus
name|taskTracker
parameter_list|,
name|int
name|numTrackers
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|>
name|assignedTasks
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|QueueQuota
argument_list|>
name|queueQuota
parameter_list|,
name|boolean
name|fill
parameter_list|,
name|boolean
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|queue
init|=
name|getQueue
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|QueueQuota
name|quota
init|=
name|queueQuota
operator|.
name|get
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|quota
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Queue "
operator|+
name|queue
operator|+
literal|" not configured properly"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|quota
operator|.
name|quota
operator|<
literal|1
operator|&&
operator|!
name|fill
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Task
name|t
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|map
condition|)
block|{
name|t
operator|=
name|job
operator|.
name|obtainNewLocalMapTask
argument_list|(
name|taskTracker
argument_list|,
name|numTrackers
argument_list|,
name|taskTrackerManager
operator|.
name|getNumberOfUniqueHosts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assigned local task for job "
operator|+
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|getJobID
argument_list|()
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assignedTasks
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
condition|)
block|{
name|quota
operator|.
name|map_used
operator|++
expr_stmt|;
block|}
else|else
block|{
name|quota
operator|.
name|reduce_used
operator|++
expr_stmt|;
block|}
name|quota
operator|.
name|quota
operator|--
expr_stmt|;
return|return
literal|true
return|;
block|}
name|t
operator|=
name|job
operator|.
name|obtainNewNonLocalMapTask
argument_list|(
name|taskTracker
argument_list|,
name|numTrackers
argument_list|,
name|taskTrackerManager
operator|.
name|getNumberOfUniqueHosts
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
name|job
operator|.
name|obtainNewReduceTask
argument_list|(
name|taskTracker
argument_list|,
name|numTrackers
argument_list|,
name|taskTrackerManager
operator|.
name|getNumberOfUniqueHosts
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assigned remote task for job "
operator|+
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|getJobID
argument_list|()
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assignedTasks
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
condition|)
block|{
name|quota
operator|.
name|map_used
operator|++
expr_stmt|;
block|}
else|else
block|{
name|quota
operator|.
name|reduce_used
operator|++
expr_stmt|;
block|}
name|quota
operator|.
name|quota
operator|--
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getQueueQuota (int maxMapTasks, int maxReduceTasks, boolean map)
name|Map
argument_list|<
name|String
argument_list|,
name|QueueQuota
argument_list|>
name|getQueueQuota
parameter_list|(
name|int
name|maxMapTasks
parameter_list|,
name|int
name|maxReduceTasks
parameter_list|,
name|boolean
name|map
parameter_list|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"max map tasks "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|maxMapTasks
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"max reduce tasks "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|maxReduceTasks
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|maxTasks
init|=
operator|(
name|map
operator|)
condition|?
name|maxMapTasks
else|:
name|maxReduceTasks
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueueAllocation
argument_list|>
name|shares
init|=
name|allocator
operator|.
name|getAllocation
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueueQuota
argument_list|>
name|quotaMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|QueueQuota
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueAllocation
name|share
range|:
name|shares
operator|.
name|values
argument_list|()
control|)
block|{
name|QueueQuota
name|quota
init|=
operator|new
name|QueueQuota
argument_list|(
name|share
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|quota
operator|.
name|mappers
operator|=
name|Math
operator|.
name|round
argument_list|(
name|share
operator|.
name|getShare
argument_list|()
operator|*
name|maxMapTasks
argument_list|)
expr_stmt|;
name|quota
operator|.
name|reducers
operator|=
name|Math
operator|.
name|round
argument_list|(
name|share
operator|.
name|getShare
argument_list|()
operator|*
name|maxReduceTasks
argument_list|)
expr_stmt|;
name|quota
operator|.
name|quota
operator|=
operator|(
name|map
operator|)
condition|?
name|quota
operator|.
name|mappers
else|:
name|quota
operator|.
name|reducers
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"queue "
operator|+
name|quota
operator|.
name|name
operator|+
literal|" initial quota "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|quota
operator|.
name|quota
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|quota
operator|.
name|map_used
operator|=
literal|0
expr_stmt|;
name|quota
operator|.
name|reduce_used
operator|=
literal|0
expr_stmt|;
name|quota
operator|.
name|map_pending
operator|=
literal|0
expr_stmt|;
name|quota
operator|.
name|reduce_pending
operator|=
literal|0
expr_stmt|;
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|jobs
init|=
name|getJobs
argument_list|(
name|quota
operator|.
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|JobInProgress
name|job
range|:
name|jobs
control|)
block|{
name|quota
operator|.
name|map_pending
operator|+=
name|job
operator|.
name|pendingMaps
argument_list|()
expr_stmt|;
name|quota
operator|.
name|reduce_pending
operator|+=
name|job
operator|.
name|pendingReduces
argument_list|()
expr_stmt|;
name|int
name|running
init|=
operator|(
name|map
operator|)
condition|?
name|job
operator|.
name|runningMapTasks
else|:
name|job
operator|.
name|runningReduceTasks
decl_stmt|;
name|quota
operator|.
name|quota
operator|-=
name|running
expr_stmt|;
name|quota
operator|.
name|map_used
operator|+=
name|job
operator|.
name|runningMapTasks
expr_stmt|;
name|quota
operator|.
name|reduce_used
operator|+=
name|job
operator|.
name|runningReduceTasks
expr_stmt|;
block|}
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"queue "
operator|+
name|quota
operator|.
name|name
operator|+
literal|" quota "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|quota
operator|.
name|quota
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|quotaMap
operator|.
name|put
argument_list|(
name|quota
operator|.
name|name
argument_list|,
name|quota
argument_list|)
expr_stmt|;
block|}
return|return
name|quotaMap
return|;
block|}
DECL|method|scheduleJobs (int availableSlots, boolean map, boolean fill, TaskTrackerStatus taskTracker, int numTrackers, List<Task> assignedTasks, Map<String,QueueQuota> queueQuota)
specifier|private
name|void
name|scheduleJobs
parameter_list|(
name|int
name|availableSlots
parameter_list|,
name|boolean
name|map
parameter_list|,
name|boolean
name|fill
parameter_list|,
name|TaskTrackerStatus
name|taskTracker
parameter_list|,
name|int
name|numTrackers
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|>
name|assignedTasks
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|QueueQuota
argument_list|>
name|queueQuota
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|availableSlots
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|JobInProgress
name|job
range|:
name|jobQueue
control|)
block|{
if|if
condition|(
operator|(
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|RUNNING
operator|)
operator|||
operator|(
operator|!
name|map
operator|&&
name|job
operator|.
name|numReduceTasks
operator|==
literal|0
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|assignMapRedTask
argument_list|(
name|job
argument_list|,
name|taskTracker
argument_list|,
name|numTrackers
argument_list|,
name|assignedTasks
argument_list|,
name|queueQuota
argument_list|,
name|fill
argument_list|,
name|map
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
DECL|method|countTasksToKill (Map<String,QueueQuota> queueQuota, boolean map)
specifier|private
name|int
name|countTasksToKill
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|QueueQuota
argument_list|>
name|queueQuota
parameter_list|,
name|boolean
name|map
parameter_list|)
block|{
name|int
name|killTasks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QueueQuota
name|quota
range|:
name|queueQuota
operator|.
name|values
argument_list|()
control|)
block|{
name|killTasks
operator|+=
name|Math
operator|.
name|min
argument_list|(
operator|(
name|map
operator|)
condition|?
name|quota
operator|.
name|map_pending
else|:
name|quota
operator|.
name|reduce_pending
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|quota
operator|.
name|quota
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|killTasks
return|;
block|}
DECL|method|markIdle (Map<String, QueueQuota> queueQuota)
specifier|protected
name|void
name|markIdle
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|QueueQuota
argument_list|>
name|queueQuota
parameter_list|)
block|{
for|for
control|(
name|QueueQuota
name|quota
range|:
name|queueQuota
operator|.
name|values
argument_list|()
control|)
block|{
name|allocator
operator|.
name|setUsage
argument_list|(
name|quota
operator|.
name|name
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|quota
operator|.
name|map_used
argument_list|,
name|quota
operator|.
name|mappers
argument_list|)
operator|+
name|Math
operator|.
name|min
argument_list|(
name|quota
operator|.
name|reduce_used
argument_list|,
name|quota
operator|.
name|reducers
argument_list|)
argument_list|,
operator|(
name|quota
operator|.
name|map_pending
operator|+
name|quota
operator|.
name|reduce_pending
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assignMapRedTasks (List<Task> assignedTasks, TaskTrackerStatus taskTracker, int numTrackers, boolean map)
specifier|private
specifier|synchronized
name|void
name|assignMapRedTasks
parameter_list|(
name|List
argument_list|<
name|Task
argument_list|>
name|assignedTasks
parameter_list|,
name|TaskTrackerStatus
name|taskTracker
parameter_list|,
name|int
name|numTrackers
parameter_list|,
name|boolean
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|taskOffset
init|=
name|assignedTasks
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|maxTasks
init|=
operator|(
name|map
operator|)
condition|?
name|taskTracker
operator|.
name|getMaxMapSlots
argument_list|()
else|:
name|taskTracker
operator|.
name|getMaxReduceSlots
argument_list|()
decl_stmt|;
name|int
name|countTasks
init|=
operator|(
name|map
operator|)
condition|?
name|taskTracker
operator|.
name|countMapTasks
argument_list|()
else|:
name|taskTracker
operator|.
name|countReduceTasks
argument_list|()
decl_stmt|;
name|int
name|availableSlots
init|=
name|maxTasks
operator|-
name|countTasks
decl_stmt|;
name|int
name|map_capacity
init|=
literal|0
decl_stmt|;
name|int
name|reduce_capacity
init|=
literal|0
decl_stmt|;
name|ClusterStatus
name|status
init|=
name|taskTrackerManager
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|map_capacity
operator|=
name|status
operator|.
name|getMaxMapTasks
argument_list|()
expr_stmt|;
name|reduce_capacity
operator|=
name|status
operator|.
name|getMaxReduceTasks
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|QueueQuota
argument_list|>
name|queueQuota
init|=
name|getQueueQuota
argument_list|(
name|map_capacity
argument_list|,
name|reduce_capacity
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"available slots "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|availableSlots
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"queue size "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|jobQueue
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"map capacity "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|map_capacity
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"reduce capacity "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|reduce_capacity
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|scheduleJobs
argument_list|(
name|availableSlots
argument_list|,
name|map
argument_list|,
name|NO_FILL
argument_list|,
name|taskTracker
argument_list|,
name|numTrackers
argument_list|,
name|assignedTasks
argument_list|,
name|queueQuota
argument_list|)
expr_stmt|;
name|availableSlots
operator|-=
name|assignedTasks
operator|.
name|size
argument_list|()
operator|+
name|taskOffset
expr_stmt|;
name|scheduleJobs
argument_list|(
name|availableSlots
argument_list|,
name|map
argument_list|,
name|FILL
argument_list|,
name|taskTracker
argument_list|,
name|numTrackers
argument_list|,
name|assignedTasks
argument_list|,
name|queueQuota
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
condition|)
block|{
name|markIdle
argument_list|(
name|queueQuota
argument_list|)
expr_stmt|;
block|}
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
if|if
condition|(
operator|(
name|killInterval
operator|>
literal|0
operator|)
operator|&&
operator|(
name|currentTime
operator|-
name|lastKill
operator|>
name|killInterval
operator|)
condition|)
block|{
name|lastKill
operator|=
name|currentTime
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
name|int
name|killTasks
init|=
name|countTasksToKill
argument_list|(
name|queueQuota
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"trying to kill "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|killTasks
argument_list|)
operator|+
literal|" tasks "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|killMapRedTasks
argument_list|(
name|killTasks
argument_list|,
name|queueQuota
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
DECL|class|KillQueue
class|class
name|KillQueue
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|startTime
name|long
name|startTime
decl_stmt|;
DECL|field|quota
name|QueueQuota
name|quota
decl_stmt|;
block|}
DECL|method|getKillQueues (Map<String, QueueQuota> queueQuota)
specifier|private
name|Collection
argument_list|<
name|KillQueue
argument_list|>
name|getKillQueues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|QueueQuota
argument_list|>
name|queueQuota
parameter_list|)
block|{
name|TreeMap
name|killQueues
init|=
operator|new
name|TreeMap
argument_list|(
name|QUEUE_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|QueueJobs
name|queueJob
range|:
name|queueJobs
operator|.
name|values
argument_list|()
control|)
block|{
name|QueueQuota
name|quota
init|=
name|queueQuota
operator|.
name|get
argument_list|(
name|queueJob
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|quota
operator|.
name|quota
operator|>=
literal|0
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|JobInProgress
name|job
range|:
name|queueJob
operator|.
name|jobs
control|)
block|{
if|if
condition|(
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
name|KillQueue
name|killQueue
init|=
operator|new
name|KillQueue
argument_list|()
decl_stmt|;
name|killQueue
operator|.
name|name
operator|=
name|queueJob
operator|.
name|name
expr_stmt|;
name|killQueue
operator|.
name|startTime
operator|=
name|job
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|killQueue
operator|.
name|quota
operator|=
name|quota
expr_stmt|;
name|killQueues
operator|.
name|put
argument_list|(
name|killQueue
argument_list|,
name|killQueue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|killQueues
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|killMapRedTasks (int killTasks, Map<String,QueueQuota> queueQuota, boolean map)
specifier|private
name|void
name|killMapRedTasks
parameter_list|(
name|int
name|killTasks
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|QueueQuota
argument_list|>
name|queueQuota
parameter_list|,
name|boolean
name|map
parameter_list|)
block|{
name|int
name|killed
init|=
literal|0
decl_stmt|;
comment|// sort queues  exceeding quota in reverse order of time since starting
comment|// a running job
name|Collection
argument_list|<
name|KillQueue
argument_list|>
name|killQueues
init|=
name|getKillQueues
argument_list|(
name|queueQuota
argument_list|)
decl_stmt|;
for|for
control|(
name|KillQueue
name|killQueue
range|:
name|killQueues
control|)
block|{
if|if
condition|(
name|killed
operator|==
name|killTasks
condition|)
block|{
return|return;
block|}
name|QueueQuota
name|quota
init|=
name|killQueue
operator|.
name|quota
decl_stmt|;
comment|// don't kill more than needed and not more than quota exceeded
name|int
name|toKill
init|=
name|Math
operator|.
name|min
argument_list|(
name|killTasks
operator|-
name|killed
argument_list|,
operator|-
name|quota
operator|.
name|quota
argument_list|)
decl_stmt|;
name|killQueueTasks
argument_list|(
name|quota
operator|.
name|name
argument_list|,
name|toKill
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|killed
operator|+=
name|toKill
expr_stmt|;
block|}
block|}
DECL|method|taskType (boolean map)
specifier|private
name|String
name|taskType
parameter_list|(
name|boolean
name|map
parameter_list|)
block|{
return|return
operator|(
name|map
operator|)
condition|?
literal|"MAP"
else|:
literal|"REDUCE"
return|;
block|}
DECL|method|killQueueTasks (String queue, int killTasks, boolean map)
specifier|private
name|void
name|killQueueTasks
parameter_list|(
name|String
name|queue
parameter_list|,
name|int
name|killTasks
parameter_list|,
name|boolean
name|map
parameter_list|)
block|{
if|if
condition|(
name|killTasks
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"trying to kill "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|killTasks
argument_list|)
operator|+
literal|" tasks from queue "
operator|+
name|queue
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|killed
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|jobs
init|=
name|getJobs
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"total jobs to kill from "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|jobs
operator|.
name|size
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JobInProgress
name|job
range|:
name|jobs
control|)
block|{
name|TaskInProgress
name|tasks
index|[]
init|=
operator|(
name|map
operator|)
condition|?
name|job
operator|.
name|maps
operator|.
name|clone
argument_list|()
else|:
name|job
operator|.
name|reduces
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortTasks
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|tasks
argument_list|,
name|TASK_COMPARATOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"total tasks to kill from "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|tasks
operator|.
name|length
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tasks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"total active tasks to kill from "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getActiveTasks
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TaskAttemptID
name|id
range|:
name|tasks
index|[
name|i
index|]
operator|.
name|getActiveTasks
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|tasks
index|[
name|i
index|]
operator|.
name|isCommitPending
argument_list|(
name|id
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tasks
index|[
name|i
index|]
operator|.
name|killTask
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"killed task "
operator|+
name|id
operator|+
literal|" progress "
operator|+
name|Double
operator|.
name|toString
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getProgress
argument_list|()
argument_list|)
operator|+
literal|" start time "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|tasks
index|[
name|i
index|]
operator|.
name|getExecStartTime
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|taskType
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|killed
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|killed
operator|==
name|killTasks
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|assignTasks (TaskTracker taskTracker)
specifier|public
name|List
argument_list|<
name|Task
argument_list|>
name|assignTasks
parameter_list|(
name|TaskTracker
name|taskTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|millis
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|millis
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|ClusterStatus
name|clusterStatus
init|=
name|taskTrackerManager
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|int
name|numTrackers
init|=
name|clusterStatus
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|>
name|assignedTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|assignMapRedTasks
argument_list|(
name|assignedTasks
argument_list|,
name|taskTracker
operator|.
name|getStatus
argument_list|()
argument_list|,
name|numTrackers
argument_list|,
name|MAP
argument_list|)
expr_stmt|;
name|assignMapRedTasks
argument_list|(
name|assignedTasks
argument_list|,
name|taskTracker
operator|.
name|getStatus
argument_list|()
argument_list|,
name|numTrackers
argument_list|,
name|REDUCE
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|millis
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"assigned total tasks: "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|assignedTasks
operator|.
name|size
argument_list|()
argument_list|)
operator|+
literal|" in "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|elapsed
argument_list|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
return|return
name|assignedTasks
return|;
block|}
annotation|@
name|Override
DECL|method|getJobs (String queueName)
specifier|public
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|getJobs
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|QueueJobs
name|jobs
init|=
name|queueJobs
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobs
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|JobInProgress
argument_list|>
argument_list|()
return|;
block|}
return|return
name|jobs
operator|.
name|jobs
return|;
block|}
DECL|method|getQueue (JobInProgress job)
specifier|private
name|String
name|getQueue
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|JobConf
name|conf
init|=
name|job
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
return|return
name|conf
operator|.
name|getQueueName
argument_list|()
return|;
block|}
DECL|method|getUser (JobInProgress job)
specifier|private
name|String
name|getUser
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|JobConf
name|conf
init|=
name|job
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
return|return
name|conf
operator|.
name|getUser
argument_list|()
return|;
block|}
DECL|method|authorize (JobInProgress job)
specifier|private
name|String
name|authorize
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|JobConf
name|conf
init|=
name|job
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|conf
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|queue
init|=
name|conf
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|equals
argument_list|(
name|queue
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|timestamp
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.job.timestamp"
argument_list|)
decl_stmt|;
name|String
name|signature
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.job.signature"
argument_list|)
decl_stmt|;
name|int
name|role
init|=
name|auth
operator|.
name|authorize
argument_list|(
literal|"&user="
operator|+
name|user
operator|+
literal|"&timestamp="
operator|+
name|timestamp
argument_list|,
name|signature
argument_list|,
name|user
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|!=
name|PriorityAuthorization
operator|.
name|NO_ACCESS
condition|)
block|{
return|return
name|queue
return|;
block|}
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

