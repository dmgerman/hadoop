begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Abstract class for implementing a persistent store  * of allocation information.  */
end_comment

begin_class
DECL|class|AllocationStore
specifier|public
specifier|abstract
class|class
name|AllocationStore
block|{
DECL|field|queueCache
name|Map
argument_list|<
name|String
argument_list|,
name|BudgetQueue
argument_list|>
name|queueCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BudgetQueue
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Initializes configuration    * @param conf MapReduce configuration    */
DECL|method|init (Configuration conf)
specifier|public
specifier|abstract
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
function_decl|;
comment|/**    * Loads allocations from persistent store    */
DECL|method|load ()
specifier|public
specifier|abstract
name|void
name|load
parameter_list|()
function_decl|;
comment|/**    * Saves allocations to persistent store    */
DECL|method|save ()
specifier|public
specifier|abstract
name|void
name|save
parameter_list|()
function_decl|;
comment|/**    * Gets current remaining budget associated with queue.    * @param queue name of queue    * @return budget in credits    */
DECL|method|getBudget (String queue)
specifier|public
name|float
name|getBudget
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|float
name|budget
init|=
literal|0.0f
decl_stmt|;
name|BudgetQueue
name|budgetQueue
init|=
name|queueCache
operator|.
name|get
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|budgetQueue
operator|!=
literal|null
condition|)
block|{
name|budget
operator|=
name|budgetQueue
operator|.
name|budget
expr_stmt|;
block|}
return|return
name|budget
return|;
block|}
comment|/**    * Gets current spending rate associated with queue.    * @param queue name of queue    * @return spending rate in credits per allocation interval to be    * deducted from budget    */
DECL|method|getSpending (String queue)
specifier|public
name|float
name|getSpending
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|float
name|spending
init|=
literal|0
decl_stmt|;
name|BudgetQueue
name|budgetQueue
init|=
name|queueCache
operator|.
name|get
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|budgetQueue
operator|!=
literal|null
condition|)
block|{
name|spending
operator|=
name|budgetQueue
operator|.
name|spending
expr_stmt|;
block|}
return|return
name|spending
return|;
block|}
comment|/**    * Adds budget to queue.    * @param queue name of queue    * @param budget in credits to be added to queue    */
DECL|method|addBudget (String queue, float budget)
specifier|public
specifier|synchronized
name|void
name|addBudget
parameter_list|(
name|String
name|queue
parameter_list|,
name|float
name|budget
parameter_list|)
block|{
name|BudgetQueue
name|budgetQueue
init|=
name|queueCache
operator|.
name|get
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|budgetQueue
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|budgetQueue
operator|.
name|addBudget
argument_list|(
name|budget
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds new queue.    * @param queue name of queue    */
DECL|method|addQueue (String queue)
specifier|public
specifier|synchronized
name|void
name|addQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|queueCache
operator|.
name|put
argument_list|(
name|queue
argument_list|,
operator|new
name|BudgetQueue
argument_list|(
name|queue
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets queue info.    * @param queue name of queue    * @return xml representation of queue info as a string    */
DECL|method|getQueueInfo (String queue)
specifier|public
name|String
name|getQueueInfo
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|BudgetQueue
name|budgetQueue
init|=
name|queueCache
operator|.
name|get
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|budgetQueue
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
literal|"<budget>"
operator|+
name|Float
operator|.
name|toString
argument_list|(
name|budgetQueue
operator|.
name|budget
argument_list|)
operator|+
literal|"</budget>\n"
operator|+
literal|"<spending>"
operator|+
name|Float
operator|.
name|toString
argument_list|(
name|budgetQueue
operator|.
name|spending
argument_list|)
operator|+
literal|"</spending>\n"
operator|+
literal|"<used>"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|budgetQueue
operator|.
name|used
argument_list|)
operator|+
literal|"</used>\n"
operator|+
literal|"<pending>"
operator|+
name|budgetQueue
operator|.
name|pending
operator|+
literal|"</pending>\n"
return|;
block|}
comment|/**    * Remove queue.    * @param queue name of queue    */
DECL|method|removeQueue (String queue)
specifier|public
specifier|synchronized
name|void
name|removeQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|queueCache
operator|.
name|remove
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets spending rate for queue.    * @param queue name of queue    * @param spending spending rate in credits per allocation interval to be    * deducted from budget    */
DECL|method|setSpending (String queue, float spending)
specifier|public
specifier|synchronized
name|void
name|setSpending
parameter_list|(
name|String
name|queue
parameter_list|,
name|float
name|spending
parameter_list|)
block|{
name|BudgetQueue
name|budgetQueue
init|=
name|queueCache
operator|.
name|get
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|budgetQueue
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|budgetQueue
operator|.
name|spending
operator|=
name|spending
expr_stmt|;
block|}
comment|/**    * Sets queue usage for accounting    * @param queue name of queue    * @param used slots currently in use    * @param pending pending tasks    */
DECL|method|setUsage (String queue, int used, int pending)
specifier|public
specifier|synchronized
name|void
name|setUsage
parameter_list|(
name|String
name|queue
parameter_list|,
name|int
name|used
parameter_list|,
name|int
name|pending
parameter_list|)
block|{
name|BudgetQueue
name|budgetQueue
init|=
name|queueCache
operator|.
name|get
argument_list|(
name|queue
argument_list|)
decl_stmt|;
if|if
condition|(
name|budgetQueue
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|budgetQueue
operator|.
name|used
operator|=
name|used
expr_stmt|;
name|budgetQueue
operator|.
name|pending
operator|=
name|pending
expr_stmt|;
block|}
comment|/**   * Gets queue status (budget, spending, usage)   * @return collection of queue status objects   */
DECL|method|getQueues ()
specifier|public
name|Collection
argument_list|<
name|BudgetQueue
argument_list|>
name|getQueues
parameter_list|()
block|{
return|return
name|queueCache
operator|.
name|values
argument_list|()
return|;
block|}
block|}
end_class

end_unit

