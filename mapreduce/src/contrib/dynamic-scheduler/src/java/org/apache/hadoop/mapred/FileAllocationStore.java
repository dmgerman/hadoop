begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_comment
comment|/**  * Implements persistent storage for queue budget and spending  * information in a file.  */
end_comment

begin_class
DECL|class|FileAllocationStore
specifier|public
class|class
name|FileAllocationStore
extends|extends
name|AllocationStore
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileAllocationStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fileName
specifier|private
name|String
name|fileName
init|=
literal|""
decl_stmt|;
DECL|field|loaded
specifier|private
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
comment|/** {@inheritDoc} */
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|fileName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|PrioritySchedulerOptions
operator|.
name|DYNAMIC_SCHEDULER_BUDGET_FILE
argument_list|,
literal|"/etc/hadoop.budget"
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|save ()
specifier|public
name|void
name|save
parameter_list|()
block|{
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|fileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BudgetQueue
name|queue
range|:
name|getQueues
argument_list|()
control|)
block|{
name|out
operator|.
name|printf
argument_list|(
literal|"%s %.20f %.20f\n"
argument_list|,
name|queue
operator|.
name|name
argument_list|,
name|queue
operator|.
name|budget
argument_list|,
name|queue
operator|.
name|spending
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error writing to file: "
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close (Closeable closeable)
specifier|private
name|void
name|close
parameter_list|(
name|Closeable
name|closeable
parameter_list|)
block|{
if|if
condition|(
name|closeable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ce
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing file: "
operator|+
name|fileName
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|load ()
specifier|public
name|void
name|load
parameter_list|()
block|{
if|if
condition|(
name|loaded
condition|)
block|{
return|return;
block|}
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|nameValue
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameValue
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
continue|continue;
block|}
name|queueCache
operator|.
name|put
argument_list|(
name|nameValue
index|[
literal|0
index|]
argument_list|,
operator|new
name|BudgetQueue
argument_list|(
name|nameValue
index|[
literal|0
index|]
argument_list|,
name|Float
operator|.
name|parseFloat
argument_list|(
name|nameValue
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Float
operator|.
name|parseFloat
argument_list|(
name|nameValue
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|loaded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading file: "
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

