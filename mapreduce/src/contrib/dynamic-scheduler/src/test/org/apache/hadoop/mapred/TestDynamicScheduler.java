begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  Test the dynamic scheduler.  Use the System Property test.build.data to drive the test run  */
end_comment

begin_class
DECL|class|TestDynamicScheduler
specifier|public
class|class
name|TestDynamicScheduler
extends|extends
name|BaseSchedulerTest
block|{
DECL|field|scheduler
specifier|private
name|DynamicPriorityScheduler
name|scheduler
decl_stmt|;
comment|/**    * Create the test queues    * @throws Exception    */
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PrioritySchedulerOptions
operator|.
name|DYNAMIC_SCHEDULER_SCHEDULER
argument_list|,
literal|"org.apache.hadoop.mapred.FakeDynamicScheduler"
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|new
name|DynamicPriorityScheduler
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setTimer
argument_list|(
name|timer
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTracker
argument_list|)
expr_stmt|;
name|taskTracker
operator|.
name|addQueues
argument_list|(
name|QUEUES
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Remove the queues    * @throws Exception    */
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|removeQueues
argument_list|(
name|QUEUES
argument_list|)
expr_stmt|;
block|}
DECL|method|setSpending (String queue, float spending)
specifier|private
name|void
name|setSpending
parameter_list|(
name|String
name|queue
parameter_list|,
name|float
name|spending
parameter_list|)
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|allocations
operator|.
name|setSpending
argument_list|(
name|queue
argument_list|,
name|spending
argument_list|)
expr_stmt|;
block|}
DECL|method|setBudgets (String[] queue, float[] budget)
specifier|private
name|void
name|setBudgets
parameter_list|(
name|String
index|[]
name|queue
parameter_list|,
name|float
index|[]
name|budget
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queue
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|allocations
operator|.
name|addBudget
argument_list|(
name|queue
index|[
name|i
index|]
argument_list|,
name|budget
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addQueues (String[] queue)
specifier|private
name|void
name|addQueues
parameter_list|(
name|String
index|[]
name|queue
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|aQueue
range|:
name|queue
control|)
block|{
name|scheduler
operator|.
name|allocations
operator|.
name|addQueue
argument_list|(
name|aQueue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeQueues (String[] queue)
specifier|private
name|void
name|removeQueues
parameter_list|(
name|String
index|[]
name|queue
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|aQueue
range|:
name|queue
control|)
block|{
name|scheduler
operator|.
name|allocations
operator|.
name|removeQueue
argument_list|(
name|aQueue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllocation ()
specifier|public
name|void
name|testAllocation
parameter_list|()
throws|throws
name|IOException
block|{
name|addQueues
argument_list|(
name|QUEUES
argument_list|)
expr_stmt|;
name|setSpending
argument_list|(
literal|"queue1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|setSpending
argument_list|(
literal|"queue2"
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|setBudgets
argument_list|(
name|QUEUES
argument_list|,
operator|new
name|float
index|[]
block|{
literal|100.0f
block|,
literal|100.0f
block|}
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocations
operator|.
name|setUsage
argument_list|(
literal|"queue1"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocations
operator|.
name|setUsage
argument_list|(
literal|"queue2"
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|timer
operator|.
name|runTask
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|scheduler
operator|.
name|allocations
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scheduler
operator|.
name|allocations
operator|.
name|allocation
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scheduler
operator|.
name|allocations
operator|.
name|allocation
operator|.
name|get
argument_list|(
literal|"queue1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scheduler
operator|.
name|allocations
operator|.
name|allocation
operator|.
name|get
argument_list|(
literal|"queue2"
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|BudgetQueue
argument_list|>
name|budgetQueues
init|=
name|scheduler
operator|.
name|allocations
operator|.
name|store
operator|.
name|getQueues
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|budgetQueues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|budgetQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BudgetQueue
name|queue1Budget
init|=
literal|null
decl_stmt|;
name|BudgetQueue
name|queue2Budget
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BudgetQueue
name|queue
range|:
name|budgetQueues
control|)
block|{
if|if
condition|(
name|queue
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"queue1"
argument_list|)
condition|)
block|{
name|queue1Budget
operator|=
name|queue
expr_stmt|;
block|}
else|else
block|{
name|queue2Budget
operator|=
name|queue
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|queue1Budget
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queue2Budget
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|98.0f
argument_list|,
name|queue1Budget
operator|.
name|budget
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|94.0f
argument_list|,
name|queue2Budget
operator|.
name|budget
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|queue1Budget
operator|.
name|spending
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0f
argument_list|,
name|queue2Budget
operator|.
name|spending
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueueAllocation
argument_list|>
name|shares
init|=
name|scheduler
operator|.
name|allocations
operator|.
name|getAllocation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|shares
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|shares
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|shares
operator|.
name|get
argument_list|(
literal|"queue1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|shares
operator|.
name|get
argument_list|(
literal|"queue2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
operator|/
literal|3.0f
argument_list|,
name|shares
operator|.
name|get
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getShare
argument_list|()
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0f
operator|/
literal|3.0f
argument_list|,
name|shares
operator|.
name|get
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getShare
argument_list|()
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
block|}
DECL|method|testBudgetUpdate ()
specifier|public
name|void
name|testBudgetUpdate
parameter_list|()
throws|throws
name|IOException
block|{
name|addQueues
argument_list|(
name|QUEUES
argument_list|)
expr_stmt|;
name|setSpending
argument_list|(
literal|"queue1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|setSpending
argument_list|(
literal|"queue2"
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|setBudgets
argument_list|(
name|QUEUES
argument_list|,
operator|new
name|float
index|[]
block|{
literal|100.0f
block|,
literal|200.0f
block|}
argument_list|)
expr_stmt|;
name|timer
operator|.
name|runTask
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|BudgetQueue
argument_list|>
name|budgetQueues
init|=
name|scheduler
operator|.
name|allocations
operator|.
name|store
operator|.
name|getQueues
argument_list|()
decl_stmt|;
name|BudgetQueue
name|queue1Budget
init|=
literal|null
decl_stmt|;
name|BudgetQueue
name|queue2Budget
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BudgetQueue
name|queue
range|:
name|budgetQueues
control|)
block|{
if|if
condition|(
name|queue
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"queue1"
argument_list|)
condition|)
block|{
name|queue1Budget
operator|=
name|queue
expr_stmt|;
block|}
else|else
block|{
name|queue2Budget
operator|=
name|queue
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|queue1Budget
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queue2Budget
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100.0f
argument_list|,
name|queue1Budget
operator|.
name|budget
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200.0f
argument_list|,
name|queue2Budget
operator|.
name|budget
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|setBudgets
argument_list|(
name|QUEUES
argument_list|,
operator|new
name|float
index|[]
block|{
literal|200.0f
block|,
literal|300.0f
block|}
argument_list|)
expr_stmt|;
name|timer
operator|.
name|runTask
argument_list|()
expr_stmt|;
name|budgetQueues
operator|=
name|scheduler
operator|.
name|allocations
operator|.
name|store
operator|.
name|getQueues
argument_list|()
expr_stmt|;
for|for
control|(
name|BudgetQueue
name|queue
range|:
name|budgetQueues
control|)
block|{
if|if
condition|(
name|queue
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"queue1"
argument_list|)
condition|)
block|{
name|queue1Budget
operator|=
name|queue
expr_stmt|;
block|}
else|else
block|{
name|queue2Budget
operator|=
name|queue
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|300.0f
argument_list|,
name|queue1Budget
operator|.
name|budget
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500.0f
argument_list|,
name|queue2Budget
operator|.
name|budget
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|removeQueues
argument_list|(
name|QUEUES
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpendingUpdate ()
specifier|public
name|void
name|testSpendingUpdate
parameter_list|()
throws|throws
name|IOException
block|{
name|addQueues
argument_list|(
name|QUEUES
argument_list|)
expr_stmt|;
name|setSpending
argument_list|(
literal|"queue1"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|setSpending
argument_list|(
literal|"queue2"
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|setBudgets
argument_list|(
name|QUEUES
argument_list|,
operator|new
name|float
index|[]
block|{
literal|100.0f
block|,
literal|100.0f
block|}
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocations
operator|.
name|setUsage
argument_list|(
literal|"queue1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocations
operator|.
name|setUsage
argument_list|(
literal|"queue2"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|timer
operator|.
name|runTask
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueueAllocation
argument_list|>
name|shares
init|=
name|scheduler
operator|.
name|allocations
operator|.
name|getAllocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
operator|/
literal|3.0f
argument_list|,
name|shares
operator|.
name|get
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getShare
argument_list|()
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0f
operator|/
literal|3.0f
argument_list|,
name|shares
operator|.
name|get
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getShare
argument_list|()
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|setSpending
argument_list|(
literal|"queue1"
argument_list|,
literal|5.0f
argument_list|)
expr_stmt|;
name|setSpending
argument_list|(
literal|"queue2"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|timer
operator|.
name|runTask
argument_list|()
expr_stmt|;
name|shares
operator|=
name|scheduler
operator|.
name|allocations
operator|.
name|getAllocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.0f
operator|/
literal|6.0f
argument_list|,
name|shares
operator|.
name|get
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getShare
argument_list|()
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
operator|/
literal|6.0f
argument_list|,
name|shares
operator|.
name|get
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getShare
argument_list|()
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

