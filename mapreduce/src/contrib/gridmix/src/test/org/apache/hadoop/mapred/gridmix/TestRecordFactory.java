begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_class
DECL|class|TestRecordFactory
specifier|public
class|class
name|TestRecordFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRecordFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|testFactory (long targetBytes, long targetRecs)
specifier|public
specifier|static
name|void
name|testFactory
parameter_list|(
name|long
name|targetBytes
parameter_list|,
name|long
name|targetRecs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|GridmixKey
name|key
init|=
operator|new
name|GridmixKey
argument_list|()
decl_stmt|;
specifier|final
name|GridmixRecord
name|val
init|=
operator|new
name|GridmixRecord
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Target bytes/records: "
operator|+
name|targetBytes
operator|+
literal|"/"
operator|+
name|targetRecs
argument_list|)
expr_stmt|;
specifier|final
name|RecordFactory
name|f
init|=
operator|new
name|AvgRecordFactory
argument_list|(
name|targetBytes
argument_list|,
name|targetRecs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|targetRecs
operator|=
name|targetRecs
operator|<=
literal|0
operator|&&
name|targetBytes
operator|>=
literal|0
condition|?
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|targetBytes
operator|/
name|conf
operator|.
name|getInt
argument_list|(
name|AvgRecordFactory
operator|.
name|GRIDMIX_MISSING_REC_SIZE
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
argument_list|)
else|:
name|targetRecs
expr_stmt|;
name|long
name|records
init|=
literal|0L
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|f
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
condition|)
block|{
operator|++
name|records
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|val
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|targetRecs
argument_list|,
name|records
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetBytes
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandom ()
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|targetBytes
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|20
argument_list|)
operator|+
literal|3
operator|*
operator|(
literal|1
operator|<<
literal|14
operator|)
decl_stmt|;
specifier|final
name|long
name|targetRecs
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|14
argument_list|)
decl_stmt|;
name|testFactory
argument_list|(
name|targetBytes
argument_list|,
name|targetRecs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAvg ()
specifier|public
name|void
name|testAvg
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|avgsize
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|10
argument_list|)
operator|+
literal|1
decl_stmt|;
specifier|final
name|long
name|targetRecs
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|14
argument_list|)
decl_stmt|;
name|testFactory
argument_list|(
name|targetRecs
operator|*
name|avgsize
argument_list|,
name|targetRecs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZero ()
specifier|public
name|void
name|testZero
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|targetBytes
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
literal|20
argument_list|)
decl_stmt|;
name|testFactory
argument_list|(
name|targetBytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

