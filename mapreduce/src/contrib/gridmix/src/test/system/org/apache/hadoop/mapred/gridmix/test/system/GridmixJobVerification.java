begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix.test.system
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|LoggedJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ZombieJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|GridmixSystemTestCase
import|;
end_import

begin_comment
comment|/**  * Verifying each Gridmix job with corresponding job story in a trace file.  */
end_comment

begin_class
DECL|class|GridmixJobVerification
specifier|public
class|class
name|GridmixJobVerification
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GridmixJobVerification
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|path
specifier|private
name|Path
name|path
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|jtClient
specifier|private
name|JTClient
name|jtClient
decl_stmt|;
DECL|field|userResolverVal
specifier|private
name|String
name|userResolverVal
decl_stmt|;
DECL|field|origJobIdKey
specifier|static
specifier|final
name|String
name|origJobIdKey
init|=
name|GridMixConfig
operator|.
name|GRIDMIX_ORIGINAL_JOB_ID
decl_stmt|;
DECL|field|jobSubKey
specifier|static
specifier|final
name|String
name|jobSubKey
init|=
name|GridMixConfig
operator|.
name|GRIDMIX_SUBMISSION_POLICY
decl_stmt|;
DECL|field|jobTypeKey
specifier|static
specifier|final
name|String
name|jobTypeKey
init|=
name|GridMixConfig
operator|.
name|GRIDMIX_JOB_TYPE
decl_stmt|;
DECL|field|mapTaskKey
specifier|static
specifier|final
name|String
name|mapTaskKey
init|=
name|GridMixConfig
operator|.
name|GRIDMIX_SLEEPJOB_MAPTASK_ONLY
decl_stmt|;
DECL|field|usrResolver
specifier|static
specifier|final
name|String
name|usrResolver
init|=
name|GridMixConfig
operator|.
name|GRIDMIX_USER_RESOLVER
decl_stmt|;
DECL|field|fileOutputFormatKey
specifier|static
specifier|final
name|String
name|fileOutputFormatKey
init|=
name|FileOutputFormat
operator|.
name|COMPRESS
decl_stmt|;
DECL|field|fileInputFormatKey
specifier|static
specifier|final
name|String
name|fileInputFormatKey
init|=
name|FileInputFormat
operator|.
name|INPUT_DIR
decl_stmt|;
DECL|field|compEmulKey
specifier|static
specifier|final
name|String
name|compEmulKey
init|=
name|GridMixConfig
operator|.
name|GRIDMIX_COMPRESSION_ENABLE
decl_stmt|;
DECL|field|inputDecompKey
specifier|static
specifier|final
name|String
name|inputDecompKey
init|=
name|GridMixConfig
operator|.
name|GRIDMIX_INPUT_DECOMPRESS_ENABLE
decl_stmt|;
DECL|field|mapInputCompRatio
specifier|static
specifier|final
name|String
name|mapInputCompRatio
init|=
name|GridMixConfig
operator|.
name|GRIDMIX_INPUT_COMPRESS_RATIO
decl_stmt|;
DECL|field|mapOutputCompRatio
specifier|static
specifier|final
name|String
name|mapOutputCompRatio
init|=
name|GridMixConfig
operator|.
name|GRIDMIX_INTERMEDIATE_COMPRESSION_RATIO
decl_stmt|;
DECL|field|reduceOutputCompRatio
specifier|static
specifier|final
name|String
name|reduceOutputCompRatio
init|=
name|GridMixConfig
operator|.
name|GRIDMIX_OUTPUT_COMPRESSION_RATIO
decl_stmt|;
DECL|field|simuAndOrigJobsInfo
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|JobConf
argument_list|>
argument_list|>
name|simuAndOrigJobsInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|JobConf
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Gridmix job verification constructor    * @param path - path of the gridmix output directory.    * @param conf - cluster configuration.    * @param jtClient - jobtracker client.    */
DECL|method|GridmixJobVerification (Path path, Configuration conf, JTClient jtClient)
specifier|public
name|GridmixJobVerification
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|JTClient
name|jtClient
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|jtClient
operator|=
name|jtClient
expr_stmt|;
block|}
comment|/**    * It verifies the Gridmix jobs with corresponding job story in a trace file.    * @param jobids - gridmix job ids.    * @throws IOException - if an I/O error occurs.    * @throws ParseException - if an parse error occurs.    */
DECL|method|verifyGridmixJobsWithJobStories (List<JobID> jobids)
specifier|public
name|void
name|verifyGridmixJobsWithJobStories
parameter_list|(
name|List
argument_list|<
name|JobID
argument_list|>
name|jobids
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|origSubmissionTime
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|simuSubmissionTime
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|GridmixJobStory
name|gjs
init|=
operator|new
name|GridmixJobStory
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|JobID
argument_list|>
name|ite
init|=
name|jobids
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|File
name|destFolder
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/gridmix-st/"
argument_list|)
decl_stmt|;
name|destFolder
operator|.
name|mkdir
argument_list|()
expr_stmt|;
while|while
condition|(
name|ite
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JobID
name|simuJobId
init|=
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
name|JobHistoryParser
operator|.
name|JobInfo
name|jhInfo
init|=
name|getSimulatedJobHistory
argument_list|(
name|simuJobId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Job history not found."
argument_list|,
name|jhInfo
argument_list|)
expr_stmt|;
name|Counters
name|counters
init|=
name|jhInfo
operator|.
name|getTotalCounters
argument_list|()
decl_stmt|;
name|JobConf
name|simuJobConf
init|=
name|getSimulatedJobConf
argument_list|(
name|simuJobId
argument_list|,
name|destFolder
argument_list|)
decl_stmt|;
name|String
name|origJobId
init|=
name|simuJobConf
operator|.
name|get
argument_list|(
name|origJobIdKey
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"OriginalJobID<->CurrentJobID:"
operator|+
name|origJobId
operator|+
literal|"<->"
operator|+
name|simuJobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|userResolverVal
operator|==
literal|null
condition|)
block|{
name|userResolverVal
operator|=
name|simuJobConf
operator|.
name|get
argument_list|(
name|usrResolver
argument_list|)
expr_stmt|;
block|}
name|ZombieJob
name|zombieJob
init|=
name|gjs
operator|.
name|getZombieJob
argument_list|(
name|JobID
operator|.
name|forName
argument_list|(
name|origJobId
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|mapJobCounters
init|=
name|getJobMapCounters
argument_list|(
name|zombieJob
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|reduceJobCounters
init|=
name|getJobReduceCounters
argument_list|(
name|zombieJob
argument_list|)
decl_stmt|;
if|if
condition|(
name|simuJobConf
operator|.
name|get
argument_list|(
name|jobSubKey
argument_list|)
operator|.
name|contains
argument_list|(
literal|"REPLAY"
argument_list|)
condition|)
block|{
name|origSubmissionTime
operator|.
name|put
argument_list|(
name|zombieJob
operator|.
name|getSubmissionTime
argument_list|()
argument_list|,
name|origJobId
operator|.
name|toString
argument_list|()
operator|+
literal|"^"
operator|+
name|simuJobId
argument_list|)
expr_stmt|;
name|simuSubmissionTime
operator|.
name|put
argument_list|(
name|jhInfo
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|origJobId
operator|.
name|toString
argument_list|()
operator|+
literal|"^"
operator|+
name|simuJobId
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying the job<"
operator|+
name|simuJobId
operator|+
literal|"> and wait for a while..."
argument_list|)
expr_stmt|;
name|verifySimulatedJobSummary
argument_list|(
name|zombieJob
argument_list|,
name|jhInfo
argument_list|,
name|simuJobConf
argument_list|)
expr_stmt|;
name|verifyJobMapCounters
argument_list|(
name|counters
argument_list|,
name|mapJobCounters
argument_list|,
name|simuJobConf
argument_list|)
expr_stmt|;
name|verifyJobReduceCounters
argument_list|(
name|counters
argument_list|,
name|reduceJobCounters
argument_list|,
name|simuJobConf
argument_list|)
expr_stmt|;
name|verifyCompressionEmulation
argument_list|(
name|zombieJob
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|simuJobConf
argument_list|,
name|counters
argument_list|,
name|reduceJobCounters
argument_list|,
name|mapJobCounters
argument_list|)
expr_stmt|;
name|verifyDistributeCache
argument_list|(
name|zombieJob
argument_list|,
name|simuJobConf
argument_list|)
expr_stmt|;
name|setJobDistributedCacheInfo
argument_list|(
name|simuJobId
operator|.
name|toString
argument_list|()
argument_list|,
name|simuJobConf
argument_list|,
name|zombieJob
operator|.
name|getJobConf
argument_list|()
argument_list|)
expr_stmt|;
name|verifyHighRamMemoryJobs
argument_list|(
name|zombieJob
argument_list|,
name|simuJobConf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Done."
argument_list|)
expr_stmt|;
block|}
name|verifyDistributedCacheBetweenJobs
argument_list|(
name|simuAndOrigJobsInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the job submission order between the jobs in replay mode.    * @param origSubmissionTime - sorted map of original jobs submission times.    * @param simuSubmissionTime - sorted map of simulated jobs submission times.    */
DECL|method|verifyJobSumissionTime (SortedMap<Long, String> origSubmissionTime, SortedMap<Long, String> simuSubmissionTime)
specifier|public
name|void
name|verifyJobSumissionTime
parameter_list|(
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|origSubmissionTime
parameter_list|,
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|simuSubmissionTime
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Simulated job's submission time count has "
operator|+
literal|"not match with Original job's submission time count."
argument_list|,
name|origSubmissionTime
operator|.
name|size
argument_list|()
argument_list|,
name|simuSubmissionTime
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|origSubmissionTime
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|String
name|origAndSimuJobID
init|=
name|origSubmissionTime
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|simuAndorigJobID
init|=
name|simuSubmissionTime
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Simulated jobs have not submitted in same "
operator|+
literal|"order as original jobs submitted in REPLAY mode."
argument_list|,
name|origAndSimuJobID
argument_list|,
name|simuAndorigJobID
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * It verifies the simulated job map counters.    * @param counters - Original job map counters.    * @param mapJobCounters - Simulated job map counters.    * @param jobConf - Simulated job configuration.    * @throws ParseException - If an parser error occurs.    */
DECL|method|verifyJobMapCounters (Counters counters, Map<String,Long> mapCounters, JobConf jobConf)
specifier|public
name|void
name|verifyJobMapCounters
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|mapCounters
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|jobConf
operator|.
name|get
argument_list|(
name|jobTypeKey
argument_list|,
literal|"LOADJOB"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"SLEEPJOB"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Map input records have not matched."
argument_list|,
name|mapCounters
operator|.
name|get
argument_list|(
literal|"MAP_INPUT_RECS"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|getCounterValue
argument_list|(
name|counters
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Map Input Bytes are zero"
argument_list|,
name|getCounterValue
argument_list|(
name|counters
argument_list|,
literal|"HDFS_BYTES_READ"
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Map Input Records are zero"
argument_list|,
name|getCounterValue
argument_list|(
name|counters
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *  It verifies the simulated job reduce counters.    * @param counters - Original job reduce counters.    * @param reduceCounters - Simulated job reduce counters.    * @param jobConf - simulated job configuration.    * @throws ParseException - if an parser error occurs.    */
DECL|method|verifyJobReduceCounters (Counters counters, Map<String,Long> reduceCounters, JobConf jobConf)
specifier|public
name|void
name|verifyJobReduceCounters
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|reduceCounters
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|jobConf
operator|.
name|get
argument_list|(
name|jobTypeKey
argument_list|,
literal|"LOADJOB"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"SLEEPJOB"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Reduce output records are not zero for sleep job."
argument_list|,
name|getCounterValue
argument_list|(
name|counters
argument_list|,
literal|"REDUCE_OUTPUT_RECORDS"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Reduce output bytes are not zero for sleep job."
argument_list|,
name|getCounterValue
argument_list|(
name|counters
argument_list|,
literal|"HDFS_BYTES_WRITTEN"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * It verifies the gridmix simulated job summary.    * @param zombieJob - Original job summary.    * @param jhInfo  - Simulated job history info.    * @param jobConf - simulated job configuration.    * @throws IOException - if an I/O error occurs.    */
DECL|method|verifySimulatedJobSummary (ZombieJob zombieJob, JobHistoryParser.JobInfo jhInfo, JobConf jobConf)
specifier|public
name|void
name|verifySimulatedJobSummary
parameter_list|(
name|ZombieJob
name|zombieJob
parameter_list|,
name|JobHistoryParser
operator|.
name|JobInfo
name|jhInfo
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job id has not matched"
argument_list|,
name|zombieJob
operator|.
name|getJobID
argument_list|()
argument_list|,
name|JobID
operator|.
name|forName
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|origJobIdKey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job maps have not matched"
argument_list|,
name|zombieJob
operator|.
name|getNumberMaps
argument_list|()
argument_list|,
name|jhInfo
operator|.
name|getTotalMaps
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|jobConf
operator|.
name|getBoolean
argument_list|(
name|mapTaskKey
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job reducers have not matched"
argument_list|,
name|zombieJob
operator|.
name|getNumberReduces
argument_list|()
argument_list|,
name|jhInfo
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job reducers have not matched"
argument_list|,
literal|0
argument_list|,
name|jhInfo
operator|.
name|getTotalReduces
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job status has not matched."
argument_list|,
name|zombieJob
operator|.
name|getOutcome
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|convertJobStatus
argument_list|(
name|jhInfo
operator|.
name|getJobStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LoggedJob
name|loggedJob
init|=
name|zombieJob
operator|.
name|getLoggedJob
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Job priority has not matched."
argument_list|,
name|loggedJob
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jhInfo
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobConf
operator|.
name|get
argument_list|(
name|usrResolver
argument_list|)
operator|.
name|contains
argument_list|(
literal|"RoundRobin"
argument_list|)
condition|)
block|{
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jhInfo
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" has not impersonate with other user."
argument_list|,
operator|!
name|jhInfo
operator|.
name|getUsername
argument_list|()
operator|.
name|equals
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the original job map counters from a trace.    * @param zombieJob - Original job story.    * @return - map counters as a map.    */
DECL|method|getJobMapCounters (ZombieJob zombieJob)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getJobMapCounters
parameter_list|(
name|ZombieJob
name|zombieJob
parameter_list|)
block|{
name|long
name|expMapInputBytes
init|=
literal|0
decl_stmt|;
name|long
name|expMapOutputBytes
init|=
literal|0
decl_stmt|;
name|long
name|expMapInputRecs
init|=
literal|0
decl_stmt|;
name|long
name|expMapOutputRecs
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|mapCounters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|zombieJob
operator|.
name|getNumberMaps
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|TaskInfo
name|mapTask
init|=
name|zombieJob
operator|.
name|getTaskInfo
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|expMapInputBytes
operator|+=
name|mapTask
operator|.
name|getInputBytes
argument_list|()
expr_stmt|;
name|expMapOutputBytes
operator|+=
name|mapTask
operator|.
name|getOutputBytes
argument_list|()
expr_stmt|;
name|expMapInputRecs
operator|+=
name|mapTask
operator|.
name|getInputRecords
argument_list|()
expr_stmt|;
name|expMapOutputRecs
operator|+=
name|mapTask
operator|.
name|getOutputRecords
argument_list|()
expr_stmt|;
block|}
name|mapCounters
operator|.
name|put
argument_list|(
literal|"MAP_INPUT_BYTES"
argument_list|,
name|expMapInputBytes
argument_list|)
expr_stmt|;
name|mapCounters
operator|.
name|put
argument_list|(
literal|"MAP_OUTPUT_BYTES"
argument_list|,
name|expMapOutputBytes
argument_list|)
expr_stmt|;
name|mapCounters
operator|.
name|put
argument_list|(
literal|"MAP_INPUT_RECS"
argument_list|,
name|expMapInputRecs
argument_list|)
expr_stmt|;
name|mapCounters
operator|.
name|put
argument_list|(
literal|"MAP_OUTPUT_RECS"
argument_list|,
name|expMapOutputRecs
argument_list|)
expr_stmt|;
return|return
name|mapCounters
return|;
block|}
comment|/**    * Get the original job reduce counters from a trace.    * @param zombieJob - Original job story.    * @return - reduce counters as a map.    */
DECL|method|getJobReduceCounters (ZombieJob zombieJob)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getJobReduceCounters
parameter_list|(
name|ZombieJob
name|zombieJob
parameter_list|)
block|{
name|long
name|expReduceInputBytes
init|=
literal|0
decl_stmt|;
name|long
name|expReduceOutputBytes
init|=
literal|0
decl_stmt|;
name|long
name|expReduceInputRecs
init|=
literal|0
decl_stmt|;
name|long
name|expReduceOutputRecs
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|reduceCounters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|zombieJob
operator|.
name|getNumberReduces
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|TaskInfo
name|reduceTask
init|=
name|zombieJob
operator|.
name|getTaskInfo
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|expReduceInputBytes
operator|+=
name|reduceTask
operator|.
name|getInputBytes
argument_list|()
expr_stmt|;
name|expReduceOutputBytes
operator|+=
name|reduceTask
operator|.
name|getOutputBytes
argument_list|()
expr_stmt|;
name|expReduceInputRecs
operator|+=
name|reduceTask
operator|.
name|getInputRecords
argument_list|()
expr_stmt|;
name|expReduceOutputRecs
operator|+=
name|reduceTask
operator|.
name|getOutputRecords
argument_list|()
expr_stmt|;
block|}
name|reduceCounters
operator|.
name|put
argument_list|(
literal|"REDUCE_INPUT_BYTES"
argument_list|,
name|expReduceInputBytes
argument_list|)
expr_stmt|;
name|reduceCounters
operator|.
name|put
argument_list|(
literal|"REDUCE_OUTPUT_BYTES"
argument_list|,
name|expReduceOutputBytes
argument_list|)
expr_stmt|;
name|reduceCounters
operator|.
name|put
argument_list|(
literal|"REDUCE_INPUT_RECS"
argument_list|,
name|expReduceInputRecs
argument_list|)
expr_stmt|;
name|reduceCounters
operator|.
name|put
argument_list|(
literal|"REDUCE_OUTPUT_RECS"
argument_list|,
name|expReduceOutputRecs
argument_list|)
expr_stmt|;
return|return
name|reduceCounters
return|;
block|}
comment|/**    * Get the simulated job configuration of a job.    * @param simulatedJobID - Simulated job id.    * @param tmpJHFolder - temporary job history folder location.    * @return - simulated job configuration.    * @throws IOException - If an I/O error occurs.    */
DECL|method|getSimulatedJobConf (JobID simulatedJobID, File tmpJHFolder)
specifier|public
name|JobConf
name|getSimulatedJobConf
parameter_list|(
name|JobID
name|simulatedJobID
parameter_list|,
name|File
name|tmpJHFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|historyFilePath
init|=
name|jtClient
operator|.
name|getProxy
argument_list|()
operator|.
name|getJobHistoryLocationForRetiredJob
argument_list|(
name|simulatedJobID
argument_list|)
decl_stmt|;
name|Path
name|jhpath
init|=
operator|new
name|Path
argument_list|(
name|historyFilePath
argument_list|)
decl_stmt|;
name|fs
operator|=
name|jhpath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyToLocalFile
argument_list|(
name|jhpath
argument_list|,
operator|new
name|Path
argument_list|(
name|tmpJHFolder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyToLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|historyFilePath
operator|+
literal|"_conf.xml"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tmpJHFolder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jobConf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpJHFolder
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|simulatedJobID
operator|+
literal|"_conf.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
return|return
name|jobConf
return|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the simulated job history of a job.    * @param simulatedJobID - simulated job id.    * @return - simulated job information.    * @throws IOException - if an I/O error occurs.    */
DECL|method|getSimulatedJobHistory (JobID simulatedJobID)
specifier|public
name|JobHistoryParser
operator|.
name|JobInfo
name|getSimulatedJobHistory
parameter_list|(
name|JobID
name|simulatedJobID
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|historyFilePath
init|=
name|jtClient
operator|.
name|getProxy
argument_list|()
operator|.
name|getJobHistoryLocationForRetiredJob
argument_list|(
name|simulatedJobID
argument_list|)
decl_stmt|;
name|Path
name|jhpath
init|=
operator|new
name|Path
argument_list|(
name|historyFilePath
argument_list|)
decl_stmt|;
name|fs
operator|=
name|jhpath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|JobHistoryParser
name|jhparser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|fs
argument_list|,
name|jhpath
argument_list|)
decl_stmt|;
name|JobHistoryParser
operator|.
name|JobInfo
name|jhInfo
init|=
name|jhparser
operator|.
name|parse
argument_list|()
decl_stmt|;
return|return
name|jhInfo
return|;
block|}
finally|finally
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the user resolver of a job.    */
DECL|method|getJobUserResolver ()
specifier|public
name|String
name|getJobUserResolver
parameter_list|()
block|{
return|return
name|userResolverVal
return|;
block|}
comment|/**    * It verifies the compression ratios of mapreduce jobs.    * @param origJobConf - original job configuration.    * @param simuJobConf - simulated job configuration.    * @param counters  - simulated job counters.    * @param origReduceCounters - original job reduce counters.    * @param origMapCounters - original job map counters.    * @throws ParseException - if a parser error occurs.    * @throws IOException - if an I/O error occurs.    */
DECL|method|verifyCompressionEmulation (JobConf origJobConf, JobConf simuJobConf,Counters counters, Map<String, Long> origReduceCounters, Map<String, Long> origMapJobCounters)
specifier|public
name|void
name|verifyCompressionEmulation
parameter_list|(
name|JobConf
name|origJobConf
parameter_list|,
name|JobConf
name|simuJobConf
parameter_list|,
name|Counters
name|counters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|origReduceCounters
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|origMapJobCounters
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
if|if
condition|(
name|simuJobConf
operator|.
name|getBoolean
argument_list|(
name|compEmulKey
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|String
name|inputDir
init|=
name|origJobConf
operator|.
name|get
argument_list|(
name|fileInputFormatKey
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fileInputFormatKey
operator|+
literal|" is Null"
argument_list|,
name|inputDir
argument_list|)
expr_stmt|;
name|long
name|simMapInputBytes
init|=
name|getCounterValue
argument_list|(
name|counters
argument_list|,
literal|"HDFS_BYTES_READ"
argument_list|)
decl_stmt|;
name|long
name|uncompressedInputSize
init|=
name|origMapJobCounters
operator|.
name|get
argument_list|(
literal|"MAP_INPUT_BYTES"
argument_list|)
decl_stmt|;
name|long
name|simReduceInputBytes
init|=
name|getCounterValue
argument_list|(
name|counters
argument_list|,
literal|"REDUCE_SHUFFLE_BYTES"
argument_list|)
decl_stmt|;
name|long
name|simMapOutputBytes
init|=
name|getCounterValue
argument_list|(
name|counters
argument_list|,
literal|"MAP_OUTPUT_BYTES"
argument_list|)
decl_stmt|;
comment|// Verify input compression whether it's enable or not.
if|if
condition|(
name|inputDir
operator|.
name|contains
argument_list|(
literal|".gz"
argument_list|)
operator|||
name|inputDir
operator|.
name|contains
argument_list|(
literal|".tgz"
argument_list|)
operator|||
name|inputDir
operator|.
name|contains
argument_list|(
literal|".bz"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Input decompression attribute has been not set for "
operator|+
literal|"for compressed input"
argument_list|,
name|simuJobConf
operator|.
name|getBoolean
argument_list|(
name|inputDecompKey
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|INPUT_COMP_RATIO
init|=
name|getExpectedCompressionRatio
argument_list|(
name|simuJobConf
argument_list|,
name|mapInputCompRatio
argument_list|)
decl_stmt|;
name|float
name|INTERMEDIATE_COMP_RATIO
init|=
name|getExpectedCompressionRatio
argument_list|(
name|simuJobConf
argument_list|,
name|mapOutputCompRatio
argument_list|)
decl_stmt|;
comment|// Verify Map Input Compression Ratio.
name|assertMapInputCompressionRatio
argument_list|(
name|simMapInputBytes
argument_list|,
name|uncompressedInputSize
argument_list|,
name|INPUT_COMP_RATIO
argument_list|)
expr_stmt|;
comment|// Verify Map Output Compression Ratio.
name|assertMapOuputCompressionRatio
argument_list|(
name|simReduceInputBytes
argument_list|,
name|simMapOutputBytes
argument_list|,
name|INTERMEDIATE_COMP_RATIO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MAP input bytes has not matched."
argument_list|,
name|convertBytes
argument_list|(
name|uncompressedInputSize
argument_list|)
argument_list|,
name|convertBytes
argument_list|(
name|simMapInputBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Simulated job output format has not matched with "
operator|+
literal|"original job output format."
argument_list|,
name|origJobConf
operator|.
name|getBoolean
argument_list|(
name|fileOutputFormatKey
argument_list|,
literal|false
argument_list|)
argument_list|,
name|simuJobConf
operator|.
name|getBoolean
argument_list|(
name|fileOutputFormatKey
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|simuJobConf
operator|.
name|getBoolean
argument_list|(
name|fileOutputFormatKey
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|float
name|OUTPUT_COMP_RATIO
init|=
name|getExpectedCompressionRatio
argument_list|(
name|simuJobConf
argument_list|,
name|reduceOutputCompRatio
argument_list|)
decl_stmt|;
comment|//Verify reduce output compression ratio.
name|long
name|simReduceOutputBytes
init|=
name|getCounterValue
argument_list|(
name|counters
argument_list|,
literal|"HDFS_BYTES_WRITTEN"
argument_list|)
decl_stmt|;
name|long
name|origReduceOutputBytes
init|=
name|origReduceCounters
operator|.
name|get
argument_list|(
literal|"REDUCE_OUTPUT_BYTES"
argument_list|)
decl_stmt|;
name|assertReduceOutputCompressionRatio
argument_list|(
name|simReduceOutputBytes
argument_list|,
name|origReduceOutputBytes
argument_list|,
name|OUTPUT_COMP_RATIO
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertMapInputCompressionRatio (long simMapInputBytes, long origMapInputBytes, float expInputCompRatio)
specifier|private
name|void
name|assertMapInputCompressionRatio
parameter_list|(
name|long
name|simMapInputBytes
parameter_list|,
name|long
name|origMapInputBytes
parameter_list|,
name|float
name|expInputCompRatio
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"***Verify the map input bytes compression ratio****"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulated job's map input bytes(REDUCE_SHUFFLE_BYTES): "
operator|+
name|simMapInputBytes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Original job's map input bytes: "
operator|+
name|origMapInputBytes
argument_list|)
expr_stmt|;
specifier|final
name|float
name|actInputCompRatio
init|=
name|getActualCompressionRatio
argument_list|(
name|simMapInputBytes
argument_list|,
name|origMapInputBytes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected Map Input Compression Ratio:"
operator|+
name|expInputCompRatio
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual Map Input Compression Ratio:"
operator|+
name|actInputCompRatio
argument_list|)
expr_stmt|;
name|float
name|diffVal
init|=
call|(
name|float
call|)
argument_list|(
name|expInputCompRatio
operator|*
literal|0.06
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected Difference of Map Input Compression Ratio is<= "
operator|+
operator|+
name|diffVal
argument_list|)
expr_stmt|;
name|float
name|delta
init|=
name|Math
operator|.
name|abs
argument_list|(
name|expInputCompRatio
operator|-
name|actInputCompRatio
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual Difference of Map Iput Compression Ratio:"
operator|+
name|delta
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Simulated job input compression ratio has mismatched."
argument_list|,
name|delta
operator|<=
name|diffVal
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"******Done******"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMapOuputCompressionRatio (long simReduceInputBytes, long simMapoutputBytes, float expMapOuputCompRatio)
specifier|private
name|void
name|assertMapOuputCompressionRatio
parameter_list|(
name|long
name|simReduceInputBytes
parameter_list|,
name|long
name|simMapoutputBytes
parameter_list|,
name|float
name|expMapOuputCompRatio
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"***Verify the map output bytes compression ratio***"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulated job reduce input bytes:"
operator|+
name|simReduceInputBytes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulated job map output bytes:"
operator|+
name|simMapoutputBytes
argument_list|)
expr_stmt|;
specifier|final
name|float
name|actMapOutputCompRatio
init|=
name|getActualCompressionRatio
argument_list|(
name|simReduceInputBytes
argument_list|,
name|simMapoutputBytes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected Map Output Compression Ratio:"
operator|+
name|expMapOuputCompRatio
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual Map Output Compression Ratio:"
operator|+
name|actMapOutputCompRatio
argument_list|)
expr_stmt|;
name|float
name|diffVal
init|=
literal|0.05f
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected Difference Of Map Output Compression Ratio is<= "
operator|+
name|diffVal
argument_list|)
expr_stmt|;
name|float
name|delta
init|=
name|Math
operator|.
name|abs
argument_list|(
name|expMapOuputCompRatio
operator|-
name|actMapOutputCompRatio
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual Difference Of Map Ouput Compression Ratio :"
operator|+
name|delta
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Simulated job map output compression ratio "
operator|+
literal|"has not been matched."
argument_list|,
name|delta
operator|<=
name|diffVal
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"******Done******"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertReduceOutputCompressionRatio (long simReduceOutputBytes, long origReduceOutputBytes , float expOutputCompRatio )
specifier|private
name|void
name|assertReduceOutputCompressionRatio
parameter_list|(
name|long
name|simReduceOutputBytes
parameter_list|,
name|long
name|origReduceOutputBytes
parameter_list|,
name|float
name|expOutputCompRatio
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"***Verify the reduce output bytes compression ratio***"
argument_list|)
expr_stmt|;
specifier|final
name|float
name|actOuputputCompRatio
init|=
name|getActualCompressionRatio
argument_list|(
name|simReduceOutputBytes
argument_list|,
name|origReduceOutputBytes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulated job's reduce output bytes:"
operator|+
name|simReduceOutputBytes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Original job's reduce output bytes:"
operator|+
name|origReduceOutputBytes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected output compression ratio:"
operator|+
name|expOutputCompRatio
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual output compression ratio:"
operator|+
name|actOuputputCompRatio
argument_list|)
expr_stmt|;
name|long
name|diffVal
init|=
call|(
name|long
call|)
argument_list|(
name|origReduceOutputBytes
operator|*
literal|0.15
argument_list|)
decl_stmt|;
name|long
name|delta
init|=
name|Math
operator|.
name|abs
argument_list|(
name|origReduceOutputBytes
operator|-
name|simReduceOutputBytes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected difference of output compressed bytes is<= "
operator|+
name|diffVal
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual difference of compressed ouput bytes:"
operator|+
name|delta
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Simulated job reduce output compression ratio "
operator|+
literal|"has not been matched."
argument_list|,
name|delta
operator|<=
name|diffVal
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"******Done******"
argument_list|)
expr_stmt|;
block|}
DECL|method|getExpectedCompressionRatio (JobConf simuJobConf, String RATIO_TYPE)
specifier|private
name|float
name|getExpectedCompressionRatio
parameter_list|(
name|JobConf
name|simuJobConf
parameter_list|,
name|String
name|RATIO_TYPE
parameter_list|)
block|{
comment|// Default decompression ratio is 0.50f irrespective of original
comment|//job compression ratio.
if|if
condition|(
name|simuJobConf
operator|.
name|get
argument_list|(
name|RATIO_TYPE
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|simuJobConf
operator|.
name|get
argument_list|(
name|RATIO_TYPE
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0.50f
return|;
block|}
block|}
DECL|method|getActualCompressionRatio (long compressBytes, long uncompessBytes)
specifier|private
name|float
name|getActualCompressionRatio
parameter_list|(
name|long
name|compressBytes
parameter_list|,
name|long
name|uncompessBytes
parameter_list|)
block|{
name|double
name|ratio
init|=
operator|(
operator|(
name|double
operator|)
name|compressBytes
operator|)
operator|/
name|uncompessBytes
decl_stmt|;
name|int
name|significant
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|ratio
operator|*
literal|100
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|float
operator|)
name|significant
operator|)
operator|/
literal|100
return|;
block|}
comment|/**    * Verify the distributed cache files between the jobs in a gridmix run.    * @param jobsInfo - jobConfs of simulated and original jobs as a map.    */
DECL|method|verifyDistributedCacheBetweenJobs ( Map<String,List<JobConf>> jobsInfo)
specifier|public
name|void
name|verifyDistributedCacheBetweenJobs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|JobConf
argument_list|>
argument_list|>
name|jobsInfo
parameter_list|)
block|{
if|if
condition|(
name|jobsInfo
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|simJobfilesOccurBtnJobs
init|=
name|getDistcacheFilesOccurenceBetweenJobs
argument_list|(
name|jobsInfo
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|origJobfilesOccurBtnJobs
init|=
name|getDistcacheFilesOccurenceBetweenJobs
argument_list|(
name|jobsInfo
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|simuOccurList
init|=
name|getMapValuesAsList
argument_list|(
name|simJobfilesOccurBtnJobs
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|simuOccurList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|origOccurList
init|=
name|getMapValuesAsList
argument_list|(
name|origJobfilesOccurBtnJobs
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|origOccurList
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The unique count of distibuted cache files in "
operator|+
literal|"simulated jobs have not matched with the unique "
operator|+
literal|"count of original jobs distributed files "
argument_list|,
name|simuOccurList
operator|.
name|size
argument_list|()
argument_list|,
name|origOccurList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|origDistFileCount
range|:
name|origOccurList
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Distributed cache file reused in simulated "
operator|+
literal|"jobs has not matched with reused of distributed"
operator|+
literal|"cache file in original jobs."
argument_list|,
name|origDistFileCount
argument_list|,
name|simuOccurList
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the unique distributed cache files and occurrence between the jobs.    * @param jobsInfo - job's configurations as a map.    * @param jobConfIndex - 0 for simulated job configuration and     *                       1 for original jobs configuration.    * @return  - unique distributed cache files and occurrences as map.    */
DECL|method|getDistcacheFilesOccurenceBetweenJobs ( Map<String, List<JobConf>> jobsInfo, int jobConfIndex)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getDistcacheFilesOccurenceBetweenJobs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|JobConf
argument_list|>
argument_list|>
name|jobsInfo
parameter_list|,
name|int
name|jobConfIndex
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|filesOccurBtnJobs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jobIds
init|=
name|jobsInfo
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|ite
init|=
name|jobIds
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ite
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|jobId
init|=
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|JobConf
argument_list|>
name|jobconfs
init|=
name|jobsInfo
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|String
index|[]
name|distCacheFiles
init|=
name|jobconfs
operator|.
name|get
argument_list|(
name|jobConfIndex
argument_list|)
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_FILES
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|distCacheFileTimeStamps
init|=
name|jobconfs
operator|.
name|get
argument_list|(
name|jobConfIndex
argument_list|)
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_TIMESTAMP
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|distCacheFileVisib
init|=
name|jobconfs
operator|.
name|get
argument_list|(
name|jobConfIndex
argument_list|)
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_VISIBILITIES
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|indx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|distCacheFile
range|:
name|distCacheFiles
control|)
block|{
name|String
name|fileAndSize
init|=
name|distCacheFile
operator|+
literal|"^"
operator|+
name|distCacheFileTimeStamps
index|[
name|indx
index|]
operator|+
literal|"^"
operator|+
name|jobconfs
operator|.
name|get
argument_list|(
name|jobConfIndex
argument_list|)
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|filesOccurBtnJobs
operator|.
name|get
argument_list|(
name|fileAndSize
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
name|filesOccurBtnJobs
operator|.
name|get
argument_list|(
name|fileAndSize
argument_list|)
decl_stmt|;
name|count
operator|++
expr_stmt|;
name|filesOccurBtnJobs
operator|.
name|put
argument_list|(
name|fileAndSize
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filesOccurBtnJobs
operator|.
name|put
argument_list|(
name|fileAndSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|filesOccurBtnJobs
return|;
block|}
comment|/**    * It verifies the distributed cache emulation of  a job.    * @param zombieJob - Original job story.    * @param simuJobConf - Simulated job configuration.    */
DECL|method|verifyDistributeCache (ZombieJob zombieJob, JobConf simuJobConf)
specifier|public
name|void
name|verifyDistributeCache
parameter_list|(
name|ZombieJob
name|zombieJob
parameter_list|,
name|JobConf
name|simuJobConf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|simuJobConf
operator|.
name|getBoolean
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_ENABLE
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|JobConf
name|origJobConf
init|=
name|zombieJob
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|assertFileVisibility
argument_list|(
name|simuJobConf
argument_list|)
expr_stmt|;
name|assertDistcacheFiles
argument_list|(
name|simuJobConf
argument_list|,
name|origJobConf
argument_list|)
expr_stmt|;
name|assertFileSizes
argument_list|(
name|simuJobConf
argument_list|,
name|origJobConf
argument_list|)
expr_stmt|;
name|assertFileStamps
argument_list|(
name|simuJobConf
argument_list|,
name|origJobConf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Configuration has distributed cache visibilites"
operator|+
literal|"without enabled distributed cache emulation."
argument_list|,
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_VISIBILITIES
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Configuration has distributed cache files time "
operator|+
literal|"stamps without enabled distributed cache emulation."
argument_list|,
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_TIMESTAMP
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Configuration has distributed cache files paths"
operator|+
literal|"without enabled distributed cache emulation."
argument_list|,
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Configuration has distributed cache files sizes"
operator|+
literal|"without enabled distributed cache emulation."
argument_list|,
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_FILESSIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertFileStamps (JobConf simuJobConf, JobConf origJobConf)
specifier|private
name|void
name|assertFileStamps
parameter_list|(
name|JobConf
name|simuJobConf
parameter_list|,
name|JobConf
name|origJobConf
parameter_list|)
block|{
comment|//Verify simulated jobs against distributed cache files time stamps.
name|String
index|[]
name|origDCFTS
init|=
name|origJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_TIMESTAMP
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|simuDCFTS
init|=
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_TIMESTAMP
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|origDCFTS
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Invalid time stamps between original "
operator|+
literal|"and simulated job"
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|origDCFTS
index|[
name|index
index|]
argument_list|)
operator|<
name|Long
operator|.
name|parseLong
argument_list|(
name|simuDCFTS
index|[
name|index
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertFileVisibility (JobConf simuJobConf )
specifier|private
name|void
name|assertFileVisibility
parameter_list|(
name|JobConf
name|simuJobConf
parameter_list|)
block|{
comment|// Verify simulated jobs against distributed cache files visibilities.
name|String
index|[]
name|distFiles
init|=
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_FILES
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|simuDistVisibilities
init|=
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_VISIBILITIES
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|expFileVisibility
init|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|distFile
range|:
name|distFiles
control|)
block|{
name|boolean
name|isLocalDistCache
init|=
name|GridmixSystemTestCase
operator|.
name|isLocalDistCache
argument_list|(
name|distFile
argument_list|,
name|simuJobConf
operator|.
name|getUser
argument_list|()
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|simuDistVisibilities
index|[
name|index
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isLocalDistCache
condition|)
block|{
name|expFileVisibility
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expFileVisibility
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
name|index
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|String
name|actFileVisibility
range|:
name|simuDistVisibilities
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Simulated job distributed cache file "
operator|+
literal|"visibilities has not matched."
argument_list|,
name|expFileVisibility
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|actFileVisibility
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
DECL|method|assertDistcacheFiles (JobConf simuJobConf, JobConf origJobConf)
specifier|private
name|void
name|assertDistcacheFiles
parameter_list|(
name|JobConf
name|simuJobConf
parameter_list|,
name|JobConf
name|origJobConf
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Verify simulated jobs against distributed cache files.
name|String
index|[]
name|origDistFiles
init|=
name|origJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_FILES
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|simuDistFiles
init|=
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_FILES
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|simuDistVisibilities
init|=
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_VISIBILITIES
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No. of simulatued job's distcache files mismacted"
operator|+
literal|"with no.of original job's distcache files"
argument_list|,
name|origDistFiles
operator|.
name|length
argument_list|,
name|simuDistFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|simDistFile
range|:
name|simuDistFiles
control|)
block|{
name|Path
name|distPath
init|=
operator|new
name|Path
argument_list|(
name|simDistFile
argument_list|)
decl_stmt|;
name|boolean
name|isLocalDistCache
init|=
name|GridmixSystemTestCase
operator|.
name|isLocalDistCache
argument_list|(
name|simDistFile
argument_list|,
name|simuJobConf
operator|.
name|getUser
argument_list|()
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|simuDistVisibilities
index|[
name|index
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isLocalDistCache
condition|)
block|{
name|FileSystem
name|fs
init|=
name|distPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|fstat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|distPath
argument_list|)
decl_stmt|;
name|FsPermission
name|permission
init|=
name|fstat
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"HDFS distributed cache file has wrong "
operator|+
literal|"permissions for users."
argument_list|,
name|FsAction
operator|.
name|READ_WRITE
operator|.
name|SYMBOL
operator|==
name|permission
operator|.
name|getUserAction
argument_list|()
operator|.
name|SYMBOL
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"HDFS distributed cache file has wrong "
operator|+
literal|"permissions for groups."
argument_list|,
name|FsAction
operator|.
name|READ
operator|.
name|SYMBOL
operator|==
name|permission
operator|.
name|getGroupAction
argument_list|()
operator|.
name|SYMBOL
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"HDSFS distributed cache file has wrong "
operator|+
literal|"permissions for others."
argument_list|,
name|FsAction
operator|.
name|READ
operator|.
name|SYMBOL
operator|==
name|permission
operator|.
name|getOtherAction
argument_list|()
operator|.
name|SYMBOL
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
block|}
DECL|method|assertFileSizes (JobConf simuJobConf, JobConf origJobConf)
specifier|private
name|void
name|assertFileSizes
parameter_list|(
name|JobConf
name|simuJobConf
parameter_list|,
name|JobConf
name|origJobConf
parameter_list|)
block|{
comment|// Verify simulated jobs against distributed cache files size.
name|List
argument_list|<
name|String
argument_list|>
name|origDistFilesSize
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|origJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_FILESSIZE
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|origDistFilesSize
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|simuDistFilesSize
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_FILESSIZE
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|simuDistFilesSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Simulated job's file size list has not "
operator|+
literal|"matched with the Original job's file size list."
argument_list|,
name|origDistFilesSize
operator|.
name|size
argument_list|()
argument_list|,
name|simuDistFilesSize
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|origDistFilesSize
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Simulated job distcache file size has not "
operator|+
literal|"matched with original job distcache file size."
argument_list|,
name|origDistFilesSize
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|simuDistFilesSize
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setJobDistributedCacheInfo (String jobId, JobConf simuJobConf, JobConf origJobConf)
specifier|private
name|void
name|setJobDistributedCacheInfo
parameter_list|(
name|String
name|jobId
parameter_list|,
name|JobConf
name|simuJobConf
parameter_list|,
name|JobConf
name|origJobConf
parameter_list|)
block|{
if|if
condition|(
name|simuJobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_DISTCACHE_FILES
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|JobConf
argument_list|>
name|jobConfs
init|=
operator|new
name|ArrayList
argument_list|<
name|JobConf
argument_list|>
argument_list|()
decl_stmt|;
name|jobConfs
operator|.
name|add
argument_list|(
name|simuJobConf
argument_list|)
expr_stmt|;
name|jobConfs
operator|.
name|add
argument_list|(
name|origJobConf
argument_list|)
expr_stmt|;
name|simuAndOrigJobsInfo
operator|.
name|put
argument_list|(
name|jobId
argument_list|,
name|jobConfs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMapValuesAsList (Map<String,Integer> jobOccurs)
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|getMapValuesAsList
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|jobOccurs
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|occursList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
name|jobOccurs
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|ite
init|=
name|files
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ite
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|file
init|=
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
name|occursList
operator|.
name|add
argument_list|(
name|jobOccurs
operator|.
name|get
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|occursList
return|;
block|}
comment|/**    * It verifies the high ram gridmix jobs.    * @param zombieJob - Original job story.    * @param simuJobConf - Simulated job configuration.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|verifyHighRamMemoryJobs (ZombieJob zombieJob, JobConf simuJobConf)
specifier|public
name|void
name|verifyHighRamMemoryJobs
parameter_list|(
name|ZombieJob
name|zombieJob
parameter_list|,
name|JobConf
name|simuJobConf
parameter_list|)
block|{
name|JobConf
name|origJobConf
init|=
name|zombieJob
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|int
name|origMapFactor
init|=
name|getMapFactor
argument_list|(
name|origJobConf
argument_list|)
decl_stmt|;
name|int
name|origReduceFactor
init|=
name|getReduceFactor
argument_list|(
name|origJobConf
argument_list|)
decl_stmt|;
name|boolean
name|isHighRamEnable
init|=
name|simuJobConf
operator|.
name|getBoolean
argument_list|(
name|GridMixConfig
operator|.
name|GRIDMIX_HIGH_RAM_JOB_ENABLE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHighRamEnable
condition|)
block|{
if|if
condition|(
name|origMapFactor
operator|>=
literal|2
operator|&&
name|origReduceFactor
operator|>=
literal|2
condition|)
block|{
name|assertGridMixHighRamJob
argument_list|(
name|simuJobConf
argument_list|,
name|origJobConf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|origMapFactor
operator|>=
literal|2
condition|)
block|{
name|assertGridMixHighRamJob
argument_list|(
name|simuJobConf
argument_list|,
name|origJobConf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|origReduceFactor
operator|>=
literal|2
condition|)
block|{
name|assertGridMixHighRamJob
argument_list|(
name|simuJobConf
argument_list|,
name|origJobConf
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|origMapFactor
operator|>=
literal|2
operator|&&
name|origReduceFactor
operator|>=
literal|2
condition|)
block|{
name|assertGridMixHighRamJob
argument_list|(
name|simuJobConf
argument_list|,
name|origJobConf
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|origMapFactor
operator|>=
literal|2
condition|)
block|{
name|assertGridMixHighRamJob
argument_list|(
name|simuJobConf
argument_list|,
name|origJobConf
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|origReduceFactor
operator|>=
literal|2
condition|)
block|{
name|assertGridMixHighRamJob
argument_list|(
name|simuJobConf
argument_list|,
name|origJobConf
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the value for identifying the slots used by the map.    * @param jobConf - job configuration    * @return - map factor value.    */
DECL|method|getMapFactor (Configuration jobConf)
specifier|public
specifier|static
name|int
name|getMapFactor
parameter_list|(
name|Configuration
name|jobConf
parameter_list|)
block|{
name|long
name|clusterMapMem
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|CLUSTER_MAP_MEMORY
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|jobMapMem
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|JOB_MAP_MEMORY_MB
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|jobMapMem
operator|/
name|clusterMapMem
argument_list|)
return|;
block|}
comment|/**    * Get the value for identifying the slots used by the reduce.    * @param jobConf - job configuration.    * @return - reduce factor value.    */
DECL|method|getReduceFactor (Configuration jobConf)
specifier|public
specifier|static
name|int
name|getReduceFactor
parameter_list|(
name|Configuration
name|jobConf
parameter_list|)
block|{
name|long
name|clusterReduceMem
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|CLUSTER_REDUCE_MEMORY
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|jobReduceMem
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|GridMixConfig
operator|.
name|JOB_REDUCE_MEMORY_MB
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|jobReduceMem
operator|/
name|clusterReduceMem
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|assertGridMixHighRamJob (JobConf simuJobConf, Configuration origConf, int option)
specifier|private
name|void
name|assertGridMixHighRamJob
parameter_list|(
name|JobConf
name|simuJobConf
parameter_list|,
name|Configuration
name|origConf
parameter_list|,
name|int
name|option
parameter_list|)
block|{
name|int
name|simuMapFactor
init|=
name|getMapFactor
argument_list|(
name|simuJobConf
argument_list|)
decl_stmt|;
name|int
name|simuReduceFactor
init|=
name|getReduceFactor
argument_list|(
name|simuJobConf
argument_list|)
decl_stmt|;
comment|/**      *  option 1 : Both map and reduce honors the high ram.      *  option 2 : Map only honors the high ram.      *  option 3 : Reduce only honors the high ram.      *  option 4 : Both map and reduce should not honors the high ram      *             in disable state.      *  option 5 : Map should not honors the high ram in disable state.      *  option 6 : Reduce should not honors the high ram in disable state.      */
switch|switch
condition|(
name|option
condition|)
block|{
case|case
literal|1
case|:
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Gridmix job has not honored the high "
operator|+
literal|"ram for map."
argument_list|,
name|simuMapFactor
operator|>=
literal|2
operator|&&
name|simuMapFactor
operator|==
name|getMapFactor
argument_list|(
name|origConf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Gridmix job has not honored the high "
operator|+
literal|"ram for reduce."
argument_list|,
name|simuReduceFactor
operator|>=
literal|2
operator|&&
name|simuReduceFactor
operator|==
name|getReduceFactor
argument_list|(
name|origConf
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Gridmix job has not honored the high "
operator|+
literal|"ram for map."
argument_list|,
name|simuMapFactor
operator|>=
literal|2
operator|&&
name|simuMapFactor
operator|==
name|getMapFactor
argument_list|(
name|origConf
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Girdmix job has not honored the high "
operator|+
literal|"ram for reduce."
argument_list|,
name|simuReduceFactor
operator|>=
literal|2
operator|&&
name|simuReduceFactor
operator|==
name|getReduceFactor
argument_list|(
name|origConf
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Gridmix job has honored the high "
operator|+
literal|"ram for map in emulation disable state."
argument_list|,
name|simuMapFactor
operator|<
literal|2
operator|&&
name|simuMapFactor
operator|!=
name|getMapFactor
argument_list|(
name|origConf
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Gridmix job has honored the high "
operator|+
literal|"ram for reduce in emulation disable state."
argument_list|,
name|simuReduceFactor
operator|<
literal|2
operator|&&
name|simuReduceFactor
operator|!=
name|getReduceFactor
argument_list|(
name|origConf
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Gridmix job has honored the high "
operator|+
literal|"ram for map in emulation disable state."
argument_list|,
name|simuMapFactor
operator|<
literal|2
operator|&&
name|simuMapFactor
operator|!=
name|getMapFactor
argument_list|(
name|origConf
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Girdmix job has honored the high "
operator|+
literal|"ram for reduce in emulation disable state."
argument_list|,
name|simuReduceFactor
operator|<
literal|2
operator|&&
name|simuReduceFactor
operator|!=
name|getReduceFactor
argument_list|(
name|origConf
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**    * Get task memory after scaling based on cluster configuration.    * @param jobTaskKey - Job task key attribute.    * @param clusterTaskKey - Cluster task key attribute.    * @param origConf - Original job configuration.    * @param simuConf - Simulated job configuration.    * @return scaled task memory value.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getScaledTaskMemInMB (String jobTaskKey, String clusterTaskKey, Configuration origConf, Configuration simuConf)
specifier|public
specifier|static
name|long
name|getScaledTaskMemInMB
parameter_list|(
name|String
name|jobTaskKey
parameter_list|,
name|String
name|clusterTaskKey
parameter_list|,
name|Configuration
name|origConf
parameter_list|,
name|Configuration
name|simuConf
parameter_list|)
block|{
name|long
name|simuClusterTaskValue
init|=
name|simuConf
operator|.
name|getLong
argument_list|(
name|clusterTaskKey
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|long
name|origClusterTaskValue
init|=
name|origConf
operator|.
name|getLong
argument_list|(
name|clusterTaskKey
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|long
name|origJobTaskValue
init|=
name|origConf
operator|.
name|getLong
argument_list|(
name|jobTaskKey
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|double
name|scaleFactor
init|=
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|origJobTaskValue
operator|/
name|origClusterTaskValue
argument_list|)
decl_stmt|;
name|long
name|simulatedJobValue
init|=
call|(
name|long
call|)
argument_list|(
name|scaleFactor
operator|*
name|simuClusterTaskValue
argument_list|)
decl_stmt|;
return|return
name|simulatedJobValue
return|;
block|}
comment|/**    * It Verifies the memory limit of a task.    * @param TaskMemInMB - task memory limit.    * @param taskLimitInMB - task upper limit.    */
DECL|method|verifyMemoryLimits (long TaskMemInMB, long taskLimitInMB)
specifier|public
specifier|static
name|void
name|verifyMemoryLimits
parameter_list|(
name|long
name|TaskMemInMB
parameter_list|,
name|long
name|taskLimitInMB
parameter_list|)
block|{
if|if
condition|(
name|TaskMemInMB
operator|>
name|taskLimitInMB
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Simulated job's task memory exceeds the "
operator|+
literal|"upper limit of task virtual memory."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|convertJobStatus (String jobStatus)
specifier|private
name|String
name|convertJobStatus
parameter_list|(
name|String
name|jobStatus
parameter_list|)
block|{
if|if
condition|(
name|jobStatus
operator|.
name|equals
argument_list|(
literal|"SUCCEEDED"
argument_list|)
condition|)
block|{
return|return
literal|"SUCCESS"
return|;
block|}
else|else
block|{
return|return
name|jobStatus
return|;
block|}
block|}
DECL|method|convertBytes (long bytesValue)
specifier|private
name|String
name|convertBytes
parameter_list|(
name|long
name|bytesValue
parameter_list|)
block|{
name|int
name|units
init|=
literal|1024
decl_stmt|;
if|if
condition|(
name|bytesValue
operator|<
name|units
condition|)
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|bytesValue
argument_list|)
operator|+
literal|"B"
return|;
block|}
else|else
block|{
comment|// it converts the bytes into either KB or MB or GB or TB etc.
name|int
name|exp
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|bytesValue
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
name|units
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%1d%sB"
argument_list|,
call|(
name|long
call|)
argument_list|(
name|bytesValue
operator|/
name|Math
operator|.
name|pow
argument_list|(
name|units
argument_list|,
name|exp
argument_list|)
argument_list|)
argument_list|,
literal|"KMGTPE"
operator|.
name|charAt
argument_list|(
name|exp
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|getCounterValue (Counters counters, String key)
specifier|private
name|long
name|getCounterValue
parameter_list|(
name|Counters
name|counters
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|ParseException
block|{
for|for
control|(
name|String
name|groupName
range|:
name|counters
operator|.
name|getGroupNames
argument_list|()
control|)
block|{
name|CounterGroup
name|totalGroup
init|=
name|counters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|itrCounter
init|=
name|totalGroup
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itrCounter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Counter
name|counter
init|=
name|itrCounter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|counter
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|counter
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

