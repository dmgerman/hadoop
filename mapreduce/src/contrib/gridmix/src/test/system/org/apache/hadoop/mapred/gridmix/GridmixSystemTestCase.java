begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|MRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|test
operator|.
name|system
operator|.
name|JTClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|GridmixJobSubmission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|GridmixJobVerification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|GridMixRunMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|GridMixConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|UtilsForGridmix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
operator|.
name|GridmixJobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ZombieJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Run and verify the Gridmix jobs for given a trace.  */
end_comment

begin_class
DECL|class|GridmixSystemTestCase
specifier|public
class|class
name|GridmixSystemTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GridmixSystemTestCase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|protected
specifier|static
name|MRCluster
name|cluster
decl_stmt|;
DECL|field|cSize
specifier|protected
specifier|static
name|int
name|cSize
decl_stmt|;
DECL|field|jtClient
specifier|protected
specifier|static
name|JTClient
name|jtClient
decl_stmt|;
DECL|field|rtClient
specifier|protected
specifier|static
name|JTProtocol
name|rtClient
decl_stmt|;
DECL|field|gridmixDir
specifier|protected
specifier|static
name|Path
name|gridmixDir
decl_stmt|;
DECL|field|map
specifier|protected
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
DECL|field|gridmixJS
specifier|protected
specifier|static
name|GridmixJobSubmission
name|gridmixJS
decl_stmt|;
DECL|field|gridmixJV
specifier|protected
specifier|static
name|GridmixJobVerification
name|gridmixJV
decl_stmt|;
DECL|field|jobids
specifier|protected
specifier|static
name|List
argument_list|<
name|JobID
argument_list|>
name|jobids
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|before ()
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|excludeExpList
init|=
block|{
literal|"java.net.ConnectException"
block|,
literal|"java.io.IOException"
block|}
decl_stmt|;
name|cluster
operator|=
name|MRCluster
operator|.
name|createCluster
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setExcludeExpList
argument_list|(
name|excludeExpList
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|cSize
operator|=
name|cluster
operator|.
name|getTTClients
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|jtClient
operator|=
name|cluster
operator|.
name|getJTClient
argument_list|()
expr_stmt|;
name|rtClient
operator|=
name|jtClient
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|gridmixDir
operator|=
operator|new
name|Path
argument_list|(
literal|"herriot-gridmix"
argument_list|)
expr_stmt|;
name|UtilsForGridmix
operator|.
name|createDirs
argument_list|(
name|gridmixDir
argument_list|,
name|rtClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|=
name|UtilsForGridmix
operator|.
name|getMRTraces
argument_list|(
name|rtClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after ()
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|UtilsForGridmix
operator|.
name|cleanup
argument_list|(
name|gridmixDir
argument_list|,
name|rtClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/gridmix-st/"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|tearDown
argument_list|()
expr_stmt|;
comment|/* Clean up the proxy user directories if gridmix run with        RoundRobinUserResovler mode.*/
if|if
condition|(
name|gridmixJV
operator|!=
literal|null
operator|&&
name|gridmixJV
operator|.
name|getJobUserResolver
argument_list|()
operator|.
name|contains
argument_list|(
literal|"RoundRobin"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|proxyUsers
init|=
name|UtilsForGridmix
operator|.
name|listProxyUsers
argument_list|(
name|gridmixJS
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|proxyUsers
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|UtilsForGridmix
operator|.
name|cleanup
argument_list|(
operator|new
name|Path
argument_list|(
literal|"hdfs:///user/"
operator|+
name|proxyUsers
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|,
name|rtClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Run the gridmix with specified runtime parameters and     * verify the jobs the after completion of execution.    * @param runtimeValues - common runtime arguments for gridmix.    * @param otherValues - test specific runtime arguments for gridmix.    * @param tracePath - path of a trace file.    * @throws Exception - if an exception occurs.    */
DECL|method|runGridmixAndVerify (String[] runtimeValues, String [] otherValues, String tracePath)
specifier|public
specifier|static
name|void
name|runGridmixAndVerify
parameter_list|(
name|String
index|[]
name|runtimeValues
parameter_list|,
name|String
index|[]
name|otherValues
parameter_list|,
name|String
name|tracePath
parameter_list|)
throws|throws
name|Exception
block|{
name|runGridmixAndVerify
argument_list|(
name|runtimeValues
argument_list|,
name|otherValues
argument_list|,
name|tracePath
argument_list|,
name|GridMixRunMode
operator|.
name|DATA_GENERATION_AND_RUN_GRIDMIX
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run the gridmix with specified runtime parameters and    * verify the jobs the after completion of execution.    * @param runtimeValues - common runtime arguments for gridmix.    * @param otherValues - test specific runtime arguments for gridmix.    * @param tracePath - path of a trace file.    * @param mode - 1 for data generation, 2 for run the gridmix and 3 for    * data generation and run the gridmix.    * @throws Exception - if an exception occurs.    */
DECL|method|runGridmixAndVerify (String [] runtimeValues, String [] otherValues, String tracePath, int mode)
specifier|public
specifier|static
name|void
name|runGridmixAndVerify
parameter_list|(
name|String
index|[]
name|runtimeValues
parameter_list|,
name|String
index|[]
name|otherValues
parameter_list|,
name|String
name|tracePath
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|JobID
argument_list|>
name|jobids
init|=
name|runGridmix
argument_list|(
name|runtimeValues
argument_list|,
name|otherValues
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|gridmixJV
operator|=
operator|new
name|GridmixJobVerification
argument_list|(
operator|new
name|Path
argument_list|(
name|tracePath
argument_list|)
argument_list|,
name|gridmixJS
operator|.
name|getJobConf
argument_list|()
argument_list|,
name|jtClient
argument_list|)
expr_stmt|;
name|gridmixJV
operator|.
name|verifyGridmixJobsWithJobStories
argument_list|(
name|jobids
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run the gridmix with user specified mode.    * @param runtimeValues - common runtime parameters for gridmix.    * @param otherValues - test specifix runtime parameters for gridmix.    * @param mode -  1 for data generation, 2 for run the gridmix and 3 for    * data generation and run the gridmix.    * @return - list of gridmix job ids.    * @throws Exception - if an exception occurs.    */
DECL|method|runGridmix (String[] runtimeValues, String[] otherValues, int mode)
specifier|public
specifier|static
name|List
argument_list|<
name|JobID
argument_list|>
name|runGridmix
parameter_list|(
name|String
index|[]
name|runtimeValues
parameter_list|,
name|String
index|[]
name|otherValues
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|Exception
block|{
name|gridmixJS
operator|=
operator|new
name|GridmixJobSubmission
argument_list|(
name|rtClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|,
name|jtClient
argument_list|,
name|gridmixDir
argument_list|)
expr_stmt|;
name|gridmixJS
operator|.
name|submitJobs
argument_list|(
name|runtimeValues
argument_list|,
name|otherValues
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|JobID
argument_list|>
name|jobids
init|=
name|UtilsForGridmix
operator|.
name|listGridmixJobIDs
argument_list|(
name|jtClient
operator|.
name|getClient
argument_list|()
argument_list|,
name|gridmixJS
operator|.
name|getGridmixJobCount
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|jobids
return|;
block|}
comment|/**    * get the trace file based on given regular expression.    * @param regExp - trace file file pattern.     * @return - trace file as string.    * @throws IOException - if an I/O error occurs.    */
DECL|method|getTraceFile (String regExp)
specifier|public
specifier|static
name|String
name|getTraceFile
parameter_list|(
name|String
name|regExp
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|listTraces
init|=
name|UtilsForGridmix
operator|.
name|listMRTraces
argument_list|(
name|rtClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|ite
init|=
name|listTraces
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ite
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|traceFile
init|=
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|traceFile
operator|.
name|indexOf
argument_list|(
name|regExp
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
name|traceFile
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Validate the task memory parameters.    * @param tracePath - trace file.    * @param isTraceHasHighRamJobs - true if trace has high ram job(s)     *                                otherwise its false     */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|validateTaskMemoryParamters (String tracePath, boolean isTraceHasHighRamJobs)
specifier|public
specifier|static
name|void
name|validateTaskMemoryParamters
parameter_list|(
name|String
name|tracePath
parameter_list|,
name|boolean
name|isTraceHasHighRamJobs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isTraceHasHighRamJobs
condition|)
block|{
name|GridmixJobStory
name|gjs
init|=
operator|new
name|GridmixJobStory
argument_list|(
operator|new
name|Path
argument_list|(
name|tracePath
argument_list|)
argument_list|,
name|rtClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|JobID
argument_list|>
name|jobids
init|=
name|gjs
operator|.
name|getZombieJobs
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|boolean
name|isHighRamFlag
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JobID
name|jobid
range|:
name|jobids
control|)
block|{
name|ZombieJob
name|zombieJob
init|=
name|gjs
operator|.
name|getZombieJobs
argument_list|()
operator|.
name|get
argument_list|(
name|jobid
argument_list|)
decl_stmt|;
name|JobConf
name|origJobConf
init|=
name|zombieJob
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|int
name|origMapFactor
init|=
name|GridmixJobVerification
operator|.
name|getMapFactor
argument_list|(
name|origJobConf
argument_list|)
decl_stmt|;
name|int
name|origReduceFactor
init|=
name|GridmixJobVerification
operator|.
name|getReduceFactor
argument_list|(
name|origJobConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|origMapFactor
operator|>=
literal|2
operator|||
name|origReduceFactor
operator|>=
literal|2
condition|)
block|{
name|isHighRamFlag
operator|=
literal|true
expr_stmt|;
name|long
name|TaskMapMemInMB
init|=
name|GridmixJobVerification
operator|.
name|getScaledTaskMemInMB
argument_list|(
name|GridMixConfig
operator|.
name|JOB_MAP_MEMORY_MB
argument_list|,
name|GridMixConfig
operator|.
name|CLUSTER_MAP_MEMORY
argument_list|,
name|origJobConf
argument_list|,
name|rtClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|TaskReduceMemInMB
init|=
name|GridmixJobVerification
operator|.
name|getScaledTaskMemInMB
argument_list|(
name|GridMixConfig
operator|.
name|JOB_REDUCE_MEMORY_MB
argument_list|,
name|GridMixConfig
operator|.
name|CLUSTER_REDUCE_MEMORY
argument_list|,
name|origJobConf
argument_list|,
name|rtClient
operator|.
name|getDaemonConf
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|taskMapLimitInMB
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|GridMixConfig
operator|.
name|CLUSTER_MAX_MAP_MEMORY
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|long
name|taskReduceLimitInMB
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|GridMixConfig
operator|.
name|CLUSTER_MAX_REDUCE_MEMORY
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
decl_stmt|;
name|GridmixJobVerification
operator|.
name|verifyMemoryLimits
argument_list|(
name|TaskMapMemInMB
argument_list|,
name|taskMapLimitInMB
argument_list|)
expr_stmt|;
name|GridmixJobVerification
operator|.
name|verifyMemoryLimits
argument_list|(
name|TaskReduceMemInMB
argument_list|,
name|taskReduceLimitInMB
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Trace doesn't have atleast one high ram job."
argument_list|,
name|isHighRamFlag
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isLocalDistCache (String fileName, String userName, boolean visibility)
specifier|public
specifier|static
name|boolean
name|isLocalDistCache
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|userName
parameter_list|,
name|boolean
name|visibility
parameter_list|)
block|{
return|return
name|DistributedCacheEmulator
operator|.
name|isLocalDistCacheFile
argument_list|(
name|fileName
argument_list|,
name|userName
argument_list|,
name|visibility
argument_list|)
return|;
block|}
block|}
end_class

end_unit

