begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStoryProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Pre21JobHistoryConstants
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ZombieJobProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Pre21JobHistoryConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Component reading job traces generated by Rumen. Each job in the trace is  * assigned a sequence number and given a submission time relative to the  * job that preceded it. Jobs are enqueued in the JobSubmitter provided at  * construction.  * @see org.apache.hadoop.tools.rumen.HadoopLogsAnalyzer  */
end_comment

begin_class
DECL|class|JobFactory
specifier|abstract
class|class
name|JobFactory
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Gridmix
operator|.
name|Component
argument_list|<
name|Void
argument_list|>
implements|,
name|StatListener
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|scratch
specifier|protected
specifier|final
name|Path
name|scratch
decl_stmt|;
DECL|field|rateFactor
specifier|protected
specifier|final
name|float
name|rateFactor
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|rThread
specifier|protected
specifier|final
name|Thread
name|rThread
decl_stmt|;
DECL|field|sequence
specifier|protected
specifier|final
name|AtomicInteger
name|sequence
decl_stmt|;
DECL|field|submitter
specifier|protected
specifier|final
name|JobSubmitter
name|submitter
decl_stmt|;
DECL|field|startFlag
specifier|protected
specifier|final
name|CountDownLatch
name|startFlag
decl_stmt|;
DECL|field|userResolver
specifier|protected
specifier|final
name|UserResolver
name|userResolver
decl_stmt|;
DECL|field|jobCreator
specifier|protected
specifier|final
name|JobCreator
name|jobCreator
decl_stmt|;
DECL|field|error
specifier|protected
specifier|volatile
name|IOException
name|error
init|=
literal|null
decl_stmt|;
DECL|field|jobProducer
specifier|protected
specifier|final
name|JobStoryProducer
name|jobProducer
decl_stmt|;
DECL|field|lock
specifier|protected
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|/**    * Creating a new instance does not start the thread.    * @param submitter Component to which deserialized jobs are passed    * @param jobTrace Stream of job traces with which to construct a    *                 {@link org.apache.hadoop.tools.rumen.ZombieJobProducer}    * @param scratch Directory into which to write output from simulated jobs    * @param conf Config passed to all jobs to be submitted    * @param startFlag Latch released from main to start pipeline    * @throws java.io.IOException    */
DECL|method|JobFactory (JobSubmitter submitter, InputStream jobTrace, Path scratch, Configuration conf, CountDownLatch startFlag, UserResolver userResolver)
specifier|public
name|JobFactory
parameter_list|(
name|JobSubmitter
name|submitter
parameter_list|,
name|InputStream
name|jobTrace
parameter_list|,
name|Path
name|scratch
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|,
name|UserResolver
name|userResolver
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|submitter
argument_list|,
operator|new
name|ZombieJobProducer
argument_list|(
name|jobTrace
argument_list|,
literal|null
argument_list|)
argument_list|,
name|scratch
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|userResolver
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor permitting JobStoryProducer to be mocked.    * @param submitter Component to which deserialized jobs are passed    * @param jobProducer Producer generating JobStory objects.    * @param scratch Directory into which to write output from simulated jobs    * @param conf Config passed to all jobs to be submitted    * @param startFlag Latch released from main to start pipeline    */
DECL|method|JobFactory (JobSubmitter submitter, JobStoryProducer jobProducer, Path scratch, Configuration conf, CountDownLatch startFlag, UserResolver userResolver)
specifier|protected
name|JobFactory
parameter_list|(
name|JobSubmitter
name|submitter
parameter_list|,
name|JobStoryProducer
name|jobProducer
parameter_list|,
name|Path
name|scratch
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|,
name|UserResolver
name|userResolver
parameter_list|)
block|{
name|sequence
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|scratch
operator|=
name|scratch
expr_stmt|;
name|this
operator|.
name|rateFactor
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
name|Gridmix
operator|.
name|GRIDMIX_SUB_MUL
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobProducer
operator|=
name|jobProducer
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|submitter
operator|=
name|submitter
expr_stmt|;
name|this
operator|.
name|startFlag
operator|=
name|startFlag
expr_stmt|;
name|this
operator|.
name|rThread
operator|=
name|createReaderThread
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" The submission thread name is "
operator|+
name|rThread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|userResolver
operator|=
name|userResolver
expr_stmt|;
name|this
operator|.
name|jobCreator
operator|=
name|JobCreator
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|,
name|JobCreator
operator|.
name|LOADJOB
argument_list|)
expr_stmt|;
block|}
DECL|class|MinTaskInfo
specifier|static
class|class
name|MinTaskInfo
extends|extends
name|TaskInfo
block|{
DECL|method|MinTaskInfo (TaskInfo info)
specifier|public
name|MinTaskInfo
parameter_list|(
name|TaskInfo
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|info
operator|.
name|getInputBytes
argument_list|()
argument_list|,
name|info
operator|.
name|getInputRecords
argument_list|()
argument_list|,
name|info
operator|.
name|getOutputBytes
argument_list|()
argument_list|,
name|info
operator|.
name|getOutputRecords
argument_list|()
argument_list|,
name|info
operator|.
name|getTaskMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputBytes ()
specifier|public
name|long
name|getInputBytes
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|super
operator|.
name|getInputBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getInputRecords ()
specifier|public
name|int
name|getInputRecords
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|super
operator|.
name|getInputRecords
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getOutputBytes ()
specifier|public
name|long
name|getOutputBytes
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|super
operator|.
name|getOutputBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getOutputRecords ()
specifier|public
name|int
name|getOutputRecords
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|super
operator|.
name|getOutputRecords
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getTaskMemory ()
specifier|public
name|long
name|getTaskMemory
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|super
operator|.
name|getTaskMemory
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|FilterJobStory
specifier|protected
specifier|static
class|class
name|FilterJobStory
implements|implements
name|JobStory
block|{
DECL|field|job
specifier|protected
specifier|final
name|JobStory
name|job
decl_stmt|;
DECL|method|FilterJobStory (JobStory job)
specifier|public
name|FilterJobStory
parameter_list|(
name|JobStory
name|job
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
block|}
DECL|method|getJobConf ()
specifier|public
name|JobConf
name|getJobConf
parameter_list|()
block|{
return|return
name|job
operator|.
name|getJobConf
argument_list|()
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|job
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
name|job
operator|.
name|getJobID
argument_list|()
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|job
operator|.
name|getUser
argument_list|()
return|;
block|}
DECL|method|getSubmissionTime ()
specifier|public
name|long
name|getSubmissionTime
parameter_list|()
block|{
return|return
name|job
operator|.
name|getSubmissionTime
argument_list|()
return|;
block|}
DECL|method|getInputSplits ()
specifier|public
name|InputSplit
index|[]
name|getInputSplits
parameter_list|()
block|{
return|return
name|job
operator|.
name|getInputSplits
argument_list|()
return|;
block|}
DECL|method|getNumberMaps ()
specifier|public
name|int
name|getNumberMaps
parameter_list|()
block|{
return|return
name|job
operator|.
name|getNumberMaps
argument_list|()
return|;
block|}
DECL|method|getNumberReduces ()
specifier|public
name|int
name|getNumberReduces
parameter_list|()
block|{
return|return
name|job
operator|.
name|getNumberReduces
argument_list|()
return|;
block|}
DECL|method|getTaskInfo (TaskType taskType, int taskNumber)
specifier|public
name|TaskInfo
name|getTaskInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|)
block|{
return|return
name|job
operator|.
name|getTaskInfo
argument_list|(
name|taskType
argument_list|,
name|taskNumber
argument_list|)
return|;
block|}
DECL|method|getTaskAttemptInfo (TaskType taskType, int taskNumber, int taskAttemptNumber)
specifier|public
name|TaskAttemptInfo
name|getTaskAttemptInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|,
name|int
name|taskAttemptNumber
parameter_list|)
block|{
return|return
name|job
operator|.
name|getTaskAttemptInfo
argument_list|(
name|taskType
argument_list|,
name|taskNumber
argument_list|,
name|taskAttemptNumber
argument_list|)
return|;
block|}
DECL|method|getMapTaskAttemptInfoAdjusted ( int taskNumber, int taskAttemptNumber, int locality)
specifier|public
name|TaskAttemptInfo
name|getMapTaskAttemptInfoAdjusted
parameter_list|(
name|int
name|taskNumber
parameter_list|,
name|int
name|taskAttemptNumber
parameter_list|,
name|int
name|locality
parameter_list|)
block|{
return|return
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
name|taskNumber
argument_list|,
name|taskAttemptNumber
argument_list|,
name|locality
argument_list|)
return|;
block|}
DECL|method|getOutcome ()
specifier|public
name|Values
name|getOutcome
parameter_list|()
block|{
return|return
name|job
operator|.
name|getOutcome
argument_list|()
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|job
operator|.
name|getQueueName
argument_list|()
return|;
block|}
block|}
DECL|method|createReaderThread ()
specifier|protected
specifier|abstract
name|Thread
name|createReaderThread
parameter_list|()
function_decl|;
DECL|method|getNextJobFiltered ()
specifier|protected
name|JobStory
name|getNextJobFiltered
parameter_list|()
throws|throws
name|IOException
block|{
name|JobStory
name|job
decl_stmt|;
do|do
block|{
name|job
operator|=
name|jobProducer
operator|.
name|getNextJob
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|job
operator|!=
literal|null
operator|&&
operator|(
name|job
operator|.
name|getOutcome
argument_list|()
operator|!=
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|SUCCESS
operator|||
name|job
operator|.
name|getSubmissionTime
argument_list|()
operator|<
literal|0
operator|)
condition|)
do|;
return|return
literal|null
operator|==
name|job
condition|?
literal|null
else|:
operator|new
name|FilterJobStory
argument_list|(
name|job
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|TaskInfo
name|getTaskInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|)
block|{
return|return
operator|new
name|MinTaskInfo
argument_list|(
name|this
operator|.
name|job
operator|.
name|getTaskInfo
argument_list|(
name|taskType
argument_list|,
name|taskNumber
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Obtain the error that caused the thread to exit unexpectedly.    */
DECL|method|error ()
specifier|public
name|IOException
name|error
parameter_list|()
block|{
return|return
name|error
return|;
block|}
comment|/**    * Add is disabled.    * @throws UnsupportedOperationException    */
DECL|method|add (Void ignored)
specifier|public
name|void
name|add
parameter_list|(
name|Void
name|ignored
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is at the start of the pipeline and accepts no events"
argument_list|)
throw|;
block|}
comment|/**    * Start the reader thread, wait for latch if necessary.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|rThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Wait for the reader thread to exhaust the job trace.    */
DECL|method|join (long millis)
specifier|public
name|void
name|join
parameter_list|(
name|long
name|millis
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|rThread
operator|.
name|join
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
comment|/**    * Interrupt the reader thread.    */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|rThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|/**    * Interrupt the reader thread. This requires no special consideration, as    * the thread has no pending work queue.    */
DECL|method|abort ()
specifier|public
name|void
name|abort
parameter_list|()
block|{
comment|// Currently no special work
name|rThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

