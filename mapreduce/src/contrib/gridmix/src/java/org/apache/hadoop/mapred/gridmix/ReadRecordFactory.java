begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * For every record consumed, read key + val bytes from the stream provided.  */
end_comment

begin_class
DECL|class|ReadRecordFactory
class|class
name|ReadRecordFactory
extends|extends
name|RecordFactory
block|{
comment|/**    * Size of internal, scratch buffer to read from internal stream.    */
DECL|field|GRIDMIX_READ_BUF_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_READ_BUF_SIZE
init|=
literal|"gridmix.read.buffer.size"
decl_stmt|;
DECL|field|buf
specifier|private
specifier|final
name|byte
index|[]
name|buf
decl_stmt|;
DECL|field|src
specifier|private
specifier|final
name|InputStream
name|src
decl_stmt|;
DECL|field|factory
specifier|private
specifier|final
name|RecordFactory
name|factory
decl_stmt|;
comment|/**    * @param targetBytes Expected byte count.    * @param targetRecords Expected record count.    * @param src Stream to read bytes.    * @param conf Used to establish read buffer size. @see #GRIDMIX_READ_BUF_SIZE    */
DECL|method|ReadRecordFactory (long targetBytes, long targetRecords, InputStream src, Configuration conf)
specifier|public
name|ReadRecordFactory
parameter_list|(
name|long
name|targetBytes
parameter_list|,
name|long
name|targetRecords
parameter_list|,
name|InputStream
name|src
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|AvgRecordFactory
argument_list|(
name|targetBytes
argument_list|,
name|targetRecords
argument_list|,
name|conf
argument_list|)
argument_list|,
name|src
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param factory Factory to draw record sizes.    * @param src Stream to read bytes.    * @param conf Used to establish read buffer size. @see #GRIDMIX_READ_BUF_SIZE    */
DECL|method|ReadRecordFactory (RecordFactory factory, InputStream src, Configuration conf)
specifier|public
name|ReadRecordFactory
parameter_list|(
name|RecordFactory
name|factory
parameter_list|,
name|InputStream
name|src
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|src
operator|=
name|src
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
name|buf
operator|=
operator|new
name|byte
index|[
name|conf
operator|.
name|getInt
argument_list|(
name|GRIDMIX_READ_BUF_SIZE
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next (GridmixKey key, GridmixRecord val)
specifier|public
name|boolean
name|next
parameter_list|(
name|GridmixKey
name|key
parameter_list|,
name|GridmixRecord
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|factory
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|len
init|=
operator|(
literal|null
operator|==
name|key
condition|?
literal|0
else|:
name|key
operator|.
name|getSize
argument_list|()
operator|)
operator|+
name|val
operator|.
name|getSize
argument_list|()
init|;
name|len
operator|>
literal|0
condition|;
name|len
operator|-=
name|buf
operator|.
name|length
control|)
block|{
name|IOUtils
operator|.
name|readFully
argument_list|(
name|src
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|buf
operator|.
name|length
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|factory
operator|.
name|getProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|factory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

