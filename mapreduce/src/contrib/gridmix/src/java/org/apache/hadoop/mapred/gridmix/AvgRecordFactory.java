begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Given byte and record targets, emit roughly equal-sized records satisfying  * the contract.  */
end_comment

begin_class
DECL|class|AvgRecordFactory
class|class
name|AvgRecordFactory
extends|extends
name|RecordFactory
block|{
comment|/**    * Percentage of record for key data.    */
DECL|field|GRIDMIX_KEY_FRC
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_KEY_FRC
init|=
literal|"gridmix.key.fraction"
decl_stmt|;
DECL|field|GRIDMIX_MISSING_REC_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|GRIDMIX_MISSING_REC_SIZE
init|=
literal|"gridmix.missing.rec.size"
decl_stmt|;
DECL|field|targetBytes
specifier|private
specifier|final
name|long
name|targetBytes
decl_stmt|;
DECL|field|targetRecords
specifier|private
specifier|final
name|long
name|targetRecords
decl_stmt|;
DECL|field|step
specifier|private
specifier|final
name|long
name|step
decl_stmt|;
DECL|field|avgrec
specifier|private
specifier|final
name|int
name|avgrec
decl_stmt|;
DECL|field|keyLen
specifier|private
specifier|final
name|int
name|keyLen
decl_stmt|;
DECL|field|accBytes
specifier|private
name|long
name|accBytes
init|=
literal|0L
decl_stmt|;
DECL|field|accRecords
specifier|private
name|long
name|accRecords
init|=
literal|0L
decl_stmt|;
DECL|field|unspilledBytes
specifier|private
name|int
name|unspilledBytes
init|=
literal|0
decl_stmt|;
DECL|field|minSpilledBytes
specifier|private
name|int
name|minSpilledBytes
init|=
literal|0
decl_stmt|;
comment|/**    * @param targetBytes Expected byte count.    * @param targetRecords Expected record count.    * @param conf Used to resolve edge cases @see #GRIDMIX_KEY_FRC    */
DECL|method|AvgRecordFactory (long targetBytes, long targetRecords, Configuration conf)
specifier|public
name|AvgRecordFactory
parameter_list|(
name|long
name|targetBytes
parameter_list|,
name|long
name|targetRecords
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|targetBytes
argument_list|,
name|targetRecords
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param minSpilledBytes Minimum amount of data expected per record    */
DECL|method|AvgRecordFactory (long targetBytes, long targetRecords, Configuration conf, int minSpilledBytes)
specifier|public
name|AvgRecordFactory
parameter_list|(
name|long
name|targetBytes
parameter_list|,
name|long
name|targetRecords
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|minSpilledBytes
parameter_list|)
block|{
name|this
operator|.
name|targetBytes
operator|=
name|targetBytes
expr_stmt|;
name|this
operator|.
name|targetRecords
operator|=
name|targetRecords
operator|<=
literal|0
operator|&&
name|this
operator|.
name|targetBytes
operator|>=
literal|0
condition|?
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|targetBytes
operator|/
name|conf
operator|.
name|getInt
argument_list|(
name|GRIDMIX_MISSING_REC_SIZE
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
argument_list|)
else|:
name|targetRecords
expr_stmt|;
specifier|final
name|long
name|tmp
init|=
name|this
operator|.
name|targetBytes
operator|/
name|this
operator|.
name|targetRecords
decl_stmt|;
name|step
operator|=
name|this
operator|.
name|targetBytes
operator|-
name|this
operator|.
name|targetRecords
operator|*
name|tmp
expr_stmt|;
name|avgrec
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|tmp
operator|+
literal|1
argument_list|)
expr_stmt|;
name|keyLen
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|tmp
operator|*
name|Math
operator|.
name|min
argument_list|(
literal|1.0f
argument_list|,
name|conf
operator|.
name|getFloat
argument_list|(
name|GRIDMIX_KEY_FRC
argument_list|,
literal|0.1f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|minSpilledBytes
operator|=
name|minSpilledBytes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next (GridmixKey key, GridmixRecord val)
specifier|public
name|boolean
name|next
parameter_list|(
name|GridmixKey
name|key
parameter_list|,
name|GridmixRecord
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|accBytes
operator|>=
name|targetBytes
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|reclen
init|=
name|accRecords
operator|++
operator|>=
name|step
condition|?
name|avgrec
operator|-
literal|1
else|:
name|avgrec
decl_stmt|;
specifier|final
name|int
name|len
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|targetBytes
operator|-
name|accBytes
argument_list|,
name|reclen
argument_list|)
decl_stmt|;
name|unspilledBytes
operator|+=
name|len
expr_stmt|;
comment|// len != reclen?
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|unspilledBytes
operator|<
name|minSpilledBytes
operator|&&
name|accRecords
operator|<
name|targetRecords
condition|)
block|{
name|key
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|val
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|accBytes
operator|+=
name|key
operator|.
name|getSize
argument_list|()
operator|+
name|val
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|unspilledBytes
operator|-=
operator|(
name|key
operator|.
name|getSize
argument_list|()
operator|+
name|val
operator|.
name|getSize
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
block|{
name|key
operator|.
name|setSize
argument_list|(
name|keyLen
argument_list|)
expr_stmt|;
name|val
operator|.
name|setSize
argument_list|(
name|unspilledBytes
operator|-
name|key
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|accBytes
operator|+=
name|unspilledBytes
expr_stmt|;
name|unspilledBytes
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|unspilledBytes
operator|<
name|minSpilledBytes
operator|&&
name|accRecords
operator|<
name|targetRecords
condition|)
block|{
name|val
operator|.
name|setSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|accBytes
operator|+=
name|val
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|unspilledBytes
operator|-=
name|val
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|val
operator|.
name|setSize
argument_list|(
name|unspilledBytes
argument_list|)
expr_stmt|;
name|accBytes
operator|+=
name|unspilledBytes
expr_stmt|;
name|unspilledBytes
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
literal|1.0f
argument_list|,
name|accBytes
operator|/
operator|(
operator|(
name|float
operator|)
name|targetBytes
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// noop
block|}
block|}
end_class

end_unit

