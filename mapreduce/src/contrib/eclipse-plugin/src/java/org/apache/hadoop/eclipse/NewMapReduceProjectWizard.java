begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|preferences
operator|.
name|MapReducePreferencePage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|preferences
operator|.
name|PreferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|resources
operator|.
name|IProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|resources
operator|.
name|IProjectDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|resources
operator|.
name|ResourcesPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|CoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IConfigurationElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IExecutableExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|QualifiedName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|SubProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|ui
operator|.
name|wizards
operator|.
name|NewJavaProjectWizardPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|dialogs
operator|.
name|IDialogConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|operation
operator|.
name|IRunnableWithProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|preference
operator|.
name|PreferenceDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|preference
operator|.
name|PreferenceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|preference
operator|.
name|PreferenceNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|IStructuredSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|wizard
operator|.
name|IWizardPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|wizard
operator|.
name|Wizard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|SWT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|events
operator|.
name|SelectionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|events
operator|.
name|SelectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|layout
operator|.
name|GridData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|layout
operator|.
name|GridLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|DirectoryDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|IWorkbench
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|IWorkbenchWizard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|PlatformUI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|dialogs
operator|.
name|WizardNewProjectCreationPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|wizards
operator|.
name|newresource
operator|.
name|BasicNewProjectResourceWizard
import|;
end_import

begin_comment
comment|/**  * Wizard for creating a new MapReduce Project  *   */
end_comment

begin_class
DECL|class|NewMapReduceProjectWizard
specifier|public
class|class
name|NewMapReduceProjectWizard
extends|extends
name|Wizard
implements|implements
name|IWorkbenchWizard
implements|,
name|IExecutableExtension
block|{
DECL|field|log
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|NewMapReduceProjectWizard
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|firstPage
specifier|private
name|HadoopFirstPage
name|firstPage
decl_stmt|;
DECL|field|javaPage
specifier|private
name|NewJavaProjectWizardPage
name|javaPage
decl_stmt|;
DECL|field|newDriverPage
specifier|public
name|NewDriverWizardPage
name|newDriverPage
decl_stmt|;
DECL|field|config
specifier|private
name|IConfigurationElement
name|config
decl_stmt|;
DECL|method|NewMapReduceProjectWizard ()
specifier|public
name|NewMapReduceProjectWizard
parameter_list|()
block|{
name|setWindowTitle
argument_list|(
literal|"New MapReduce Project Wizard"
argument_list|)
expr_stmt|;
block|}
DECL|method|init (IWorkbench workbench, IStructuredSelection selection)
specifier|public
name|void
name|init
parameter_list|(
name|IWorkbench
name|workbench
parameter_list|,
name|IStructuredSelection
name|selection
parameter_list|)
block|{    }
annotation|@
name|Override
DECL|method|canFinish ()
specifier|public
name|boolean
name|canFinish
parameter_list|()
block|{
return|return
name|firstPage
operator|.
name|isPageComplete
argument_list|()
operator|&&
name|javaPage
operator|.
name|isPageComplete
argument_list|()
comment|//&& ((!firstPage.generateDriver.getSelection())
comment|// || newDriverPage.isPageComplete()
return|;
block|}
annotation|@
name|Override
DECL|method|getNextPage (IWizardPage page)
specifier|public
name|IWizardPage
name|getNextPage
parameter_list|(
name|IWizardPage
name|page
parameter_list|)
block|{
comment|// if (page == firstPage
comment|//&& firstPage.generateDriver.getSelection()
comment|// )
comment|// {
comment|// return newDriverPage; // if "generate mapper" checked, second page is
comment|// new driver page
comment|// }
comment|// else
comment|// {
name|IWizardPage
name|answer
init|=
name|super
operator|.
name|getNextPage
argument_list|(
name|page
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|newDriverPage
condition|)
block|{
return|return
literal|null
return|;
comment|// dont flip to new driver page unless "generate
comment|// driver" is checked
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
name|javaPage
condition|)
block|{
return|return
name|answer
return|;
block|}
else|else
block|{
return|return
name|answer
return|;
block|}
comment|// }
block|}
annotation|@
name|Override
DECL|method|getPreviousPage (IWizardPage page)
specifier|public
name|IWizardPage
name|getPreviousPage
parameter_list|(
name|IWizardPage
name|page
parameter_list|)
block|{
if|if
condition|(
name|page
operator|==
name|newDriverPage
condition|)
block|{
return|return
name|firstPage
return|;
comment|// newDriverPage, if it appears, is the second
comment|// page
block|}
else|else
block|{
return|return
name|super
operator|.
name|getPreviousPage
argument_list|(
name|page
argument_list|)
return|;
block|}
block|}
DECL|class|HadoopFirstPage
specifier|static
class|class
name|HadoopFirstPage
extends|extends
name|WizardNewProjectCreationPage
implements|implements
name|SelectionListener
block|{
DECL|method|HadoopFirstPage ()
specifier|public
name|HadoopFirstPage
parameter_list|()
block|{
name|super
argument_list|(
literal|"New Hadoop Project"
argument_list|)
expr_stmt|;
name|setImageDescriptor
argument_list|(
name|ImageLibrary
operator|.
name|get
argument_list|(
literal|"wizard.mapreduce.project.new"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|openPreferences
specifier|private
name|Link
name|openPreferences
decl_stmt|;
DECL|field|workspaceHadoop
specifier|private
name|Button
name|workspaceHadoop
decl_stmt|;
DECL|field|projectHadoop
specifier|private
name|Button
name|projectHadoop
decl_stmt|;
DECL|field|location
specifier|private
name|Text
name|location
decl_stmt|;
DECL|field|browse
specifier|private
name|Button
name|browse
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|currentPath
specifier|public
name|String
name|currentPath
decl_stmt|;
comment|// private Button generateDriver;
annotation|@
name|Override
DECL|method|createControl (Composite parent)
specifier|public
name|void
name|createControl
parameter_list|(
name|Composite
name|parent
parameter_list|)
block|{
name|super
operator|.
name|createControl
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|"MapReduce Project"
argument_list|)
expr_stmt|;
name|setDescription
argument_list|(
literal|"Create a MapReduce project."
argument_list|)
expr_stmt|;
name|Group
name|group
init|=
operator|new
name|Group
argument_list|(
operator|(
name|Composite
operator|)
name|getControl
argument_list|()
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|group
operator|.
name|setLayoutData
argument_list|(
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|FILL_HORIZONTAL
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setText
argument_list|(
literal|"Hadoop MapReduce Library Installation Path"
argument_list|)
expr_stmt|;
name|GridLayout
name|layout
init|=
operator|new
name|GridLayout
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|layout
operator|.
name|marginLeft
operator|=
name|convertHorizontalDLUsToPixels
argument_list|(
name|IDialogConstants
operator|.
name|HORIZONTAL_MARGIN
argument_list|)
expr_stmt|;
name|layout
operator|.
name|marginRight
operator|=
name|convertHorizontalDLUsToPixels
argument_list|(
name|IDialogConstants
operator|.
name|HORIZONTAL_MARGIN
argument_list|)
expr_stmt|;
name|layout
operator|.
name|marginTop
operator|=
name|convertHorizontalDLUsToPixels
argument_list|(
name|IDialogConstants
operator|.
name|VERTICAL_MARGIN
argument_list|)
expr_stmt|;
name|layout
operator|.
name|marginBottom
operator|=
name|convertHorizontalDLUsToPixels
argument_list|(
name|IDialogConstants
operator|.
name|VERTICAL_MARGIN
argument_list|)
expr_stmt|;
name|group
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|workspaceHadoop
operator|=
operator|new
name|Button
argument_list|(
name|group
argument_list|,
name|SWT
operator|.
name|RADIO
argument_list|)
expr_stmt|;
name|GridData
name|d
init|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|BEGINNING
argument_list|,
name|GridData
operator|.
name|BEGINNING
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|d
operator|.
name|horizontalSpan
operator|=
literal|2
expr_stmt|;
name|workspaceHadoop
operator|.
name|setLayoutData
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// workspaceHadoop.setText("Use default workbench Hadoop library
comment|// location");
name|workspaceHadoop
operator|.
name|setSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateHadoopDirLabelFromPreferences
argument_list|()
expr_stmt|;
name|openPreferences
operator|=
operator|new
name|Link
argument_list|(
name|group
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|openPreferences
operator|.
name|setText
argument_list|(
literal|"<a>Configure Hadoop install directory...</a>"
argument_list|)
expr_stmt|;
name|openPreferences
operator|.
name|setLayoutData
argument_list|(
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|END
argument_list|,
name|GridData
operator|.
name|CENTER
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|openPreferences
operator|.
name|addSelectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|projectHadoop
operator|=
operator|new
name|Button
argument_list|(
name|group
argument_list|,
name|SWT
operator|.
name|RADIO
argument_list|)
expr_stmt|;
name|projectHadoop
operator|.
name|setLayoutData
argument_list|(
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|BEGINNING
argument_list|,
name|GridData
operator|.
name|CENTER
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|projectHadoop
operator|.
name|setText
argument_list|(
literal|"Specify Hadoop library location"
argument_list|)
expr_stmt|;
name|location
operator|=
operator|new
name|Text
argument_list|(
name|group
argument_list|,
name|SWT
operator|.
name|SINGLE
operator||
name|SWT
operator|.
name|BORDER
argument_list|)
expr_stmt|;
name|location
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|END
argument_list|,
name|GridData
operator|.
name|CENTER
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|.
name|horizontalSpan
operator|=
literal|1
expr_stmt|;
name|d
operator|.
name|widthHint
operator|=
literal|250
expr_stmt|;
name|d
operator|.
name|grabExcessHorizontalSpace
operator|=
literal|true
expr_stmt|;
name|location
operator|.
name|setLayoutData
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|location
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|browse
operator|=
operator|new
name|Button
argument_list|(
name|group
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|browse
operator|.
name|setText
argument_list|(
literal|"Browse..."
argument_list|)
expr_stmt|;
name|browse
operator|.
name|setLayoutData
argument_list|(
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|BEGINNING
argument_list|,
name|GridData
operator|.
name|CENTER
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|browse
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|browse
operator|.
name|addSelectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|projectHadoop
operator|.
name|addSelectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|workspaceHadoop
operator|.
name|addSelectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// generateDriver = new Button((Composite) getControl(), SWT.CHECK);
comment|// generateDriver.setText("Generate a MapReduce driver");
comment|// generateDriver.addListener(SWT.Selection, new Listener()
comment|// {
comment|// public void handleEvent(Event event) {
comment|// getContainer().updateButtons(); }
comment|// });
block|}
annotation|@
name|Override
DECL|method|isPageComplete ()
specifier|public
name|boolean
name|isPageComplete
parameter_list|()
block|{
name|boolean
name|validHadoop
init|=
name|validateHadoopLocation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|validHadoop
operator|&&
name|isCurrentPage
argument_list|()
condition|)
block|{
name|setErrorMessage
argument_list|(
literal|"Invalid Hadoop Runtime specified; please click 'Configure Hadoop install directory' or fill in library location input field"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setErrorMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|isPageComplete
argument_list|()
operator|&&
name|validHadoop
return|;
block|}
DECL|method|validateHadoopLocation ()
specifier|private
name|boolean
name|validateHadoopLocation
parameter_list|()
block|{
name|FilenameFilter
name|gotHadoopJar
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"hadoop"
argument_list|)
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|&&
operator|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"test"
argument_list|)
operator|==
operator|-
literal|1
operator|)
operator|&&
operator|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"examples"
argument_list|)
operator|==
operator|-
literal|1
operator|)
operator|)
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|workspaceHadoop
operator|.
name|getSelection
argument_list|()
condition|)
block|{
name|this
operator|.
name|currentPath
operator|=
name|path
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|exists
argument_list|()
operator|&&
operator|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|list
argument_list|(
name|gotHadoopJar
argument_list|)
operator|.
name|length
operator|>
literal|0
operator|)
return|;
block|}
else|else
block|{
name|this
operator|.
name|currentPath
operator|=
name|location
operator|.
name|getText
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|Path
argument_list|(
name|location
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
return|return
name|file
operator|.
name|exists
argument_list|()
operator|&&
operator|(
operator|new
name|Path
argument_list|(
name|location
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|list
argument_list|(
name|gotHadoopJar
argument_list|)
operator|.
name|length
operator|>
literal|0
operator|)
return|;
block|}
block|}
DECL|method|updateHadoopDirLabelFromPreferences ()
specifier|private
name|void
name|updateHadoopDirLabelFromPreferences
parameter_list|()
block|{
name|path
operator|=
name|Activator
operator|.
name|getDefault
argument_list|()
operator|.
name|getPreferenceStore
argument_list|()
operator|.
name|getString
argument_list|(
name|PreferenceConstants
operator|.
name|P_PATH
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|path
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|workspaceHadoop
operator|.
name|setText
argument_list|(
literal|"Use default Hadoop"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|workspaceHadoop
operator|.
name|setText
argument_list|(
literal|"Use default Hadoop (currently not set)"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|widgetDefaultSelected (SelectionEvent e)
specifier|public
name|void
name|widgetDefaultSelected
parameter_list|(
name|SelectionEvent
name|e
parameter_list|)
block|{     }
DECL|method|widgetSelected (SelectionEvent e)
specifier|public
name|void
name|widgetSelected
parameter_list|(
name|SelectionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|openPreferences
condition|)
block|{
name|PreferenceManager
name|manager
init|=
operator|new
name|PreferenceManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|addToRoot
argument_list|(
operator|new
name|PreferenceNode
argument_list|(
literal|"Hadoop Installation Directory"
argument_list|,
operator|new
name|MapReducePreferencePage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PreferenceDialog
name|dialog
init|=
operator|new
name|PreferenceDialog
argument_list|(
name|this
operator|.
name|getShell
argument_list|()
argument_list|,
name|manager
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|create
argument_list|()
expr_stmt|;
name|dialog
operator|.
name|setMessage
argument_list|(
literal|"Select Hadoop Installation Directory"
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setBlockOnOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|open
argument_list|()
expr_stmt|;
name|updateHadoopDirLabelFromPreferences
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|browse
condition|)
block|{
name|DirectoryDialog
name|dialog
init|=
operator|new
name|DirectoryDialog
argument_list|(
name|this
operator|.
name|getShell
argument_list|()
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setMessage
argument_list|(
literal|"Select a hadoop installation, containing hadoop-X-core.jar"
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
literal|"Select Hadoop Installation Directory"
argument_list|)
expr_stmt|;
name|String
name|directory
init|=
name|dialog
operator|.
name|open
argument_list|()
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
name|location
operator|.
name|setText
argument_list|(
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validateHadoopLocation
argument_list|()
condition|)
block|{
name|setErrorMessage
argument_list|(
literal|"No Hadoop jar found in specified directory"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setErrorMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|projectHadoop
operator|.
name|getSelection
argument_list|()
condition|)
block|{
name|location
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|browse
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|location
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|browse
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|getContainer
argument_list|()
operator|.
name|updateButtons
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addPages ()
specifier|public
name|void
name|addPages
parameter_list|()
block|{
comment|/*      * firstPage = new HadoopFirstPage(); addPage(firstPage ); addPage( new      * JavaProjectWizardSecondPage(firstPage) );      */
name|firstPage
operator|=
operator|new
name|HadoopFirstPage
argument_list|()
expr_stmt|;
name|javaPage
operator|=
operator|new
name|NewJavaProjectWizardPage
argument_list|(
name|ResourcesPlugin
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|firstPage
argument_list|)
expr_stmt|;
comment|// newDriverPage = new NewDriverWizardPage(false);
comment|// newDriverPage.setPageComplete(false); // ensure finish button
comment|// initially disabled
name|addPage
argument_list|(
name|firstPage
argument_list|)
expr_stmt|;
name|addPage
argument_list|(
name|javaPage
argument_list|)
expr_stmt|;
comment|// addPage(newDriverPage);
block|}
annotation|@
name|Override
DECL|method|performFinish ()
specifier|public
name|boolean
name|performFinish
parameter_list|()
block|{
try|try
block|{
name|PlatformUI
operator|.
name|getWorkbench
argument_list|()
operator|.
name|getProgressService
argument_list|()
operator|.
name|runInUI
argument_list|(
name|this
operator|.
name|getContainer
argument_list|()
argument_list|,
operator|new
name|IRunnableWithProgress
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|)
block|{
try|try
block|{
name|monitor
operator|.
name|beginTask
argument_list|(
literal|"Create Hadoop Project"
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|javaPage
operator|.
name|getRunnable
argument_list|()
operator|.
name|run
argument_list|(
operator|new
name|SubProgressMonitor
argument_list|(
name|monitor
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// if( firstPage.generateDriver.getSelection())
comment|// {
comment|// newDriverPage.setPackageFragmentRoot(javaPage.getNewJavaProject().getAllPackageFragmentRoots()[0],
comment|// false);
comment|// newDriverPage.getRunnable().run(new
comment|// SubProgressMonitor(monitor,100));
comment|// }
name|IProject
name|project
init|=
name|javaPage
operator|.
name|getNewJavaProject
argument_list|()
operator|.
name|getResource
argument_list|()
operator|.
name|getProject
argument_list|()
decl_stmt|;
name|IProjectDescription
name|description
init|=
name|project
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|String
index|[]
name|existingNatures
init|=
name|description
operator|.
name|getNatureIds
argument_list|()
decl_stmt|;
name|String
index|[]
name|natures
init|=
operator|new
name|String
index|[
name|existingNatures
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|existingNatures
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|natures
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|existingNatures
index|[
name|i
index|]
expr_stmt|;
block|}
name|natures
index|[
literal|0
index|]
operator|=
name|MapReduceNature
operator|.
name|ID
expr_stmt|;
name|description
operator|.
name|setNatureIds
argument_list|(
name|natures
argument_list|)
expr_stmt|;
name|project
operator|.
name|setPersistentProperty
argument_list|(
operator|new
name|QualifiedName
argument_list|(
name|Activator
operator|.
name|PLUGIN_ID
argument_list|,
literal|"hadoop.runtime.path"
argument_list|)
argument_list|,
name|firstPage
operator|.
name|currentPath
argument_list|)
expr_stmt|;
name|project
operator|.
name|setDescription
argument_list|(
name|description
argument_list|,
operator|new
name|NullProgressMonitor
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|natureIds
init|=
name|project
operator|.
name|getDescription
argument_list|()
operator|.
name|getNatureIds
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|natureIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|log
operator|.
name|fine
argument_list|(
literal|"Nature id # "
operator|+
name|i
operator|+
literal|"> "
operator|+
name|natureIds
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|monitor
operator|.
name|worked
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|done
argument_list|()
expr_stmt|;
name|BasicNewProjectResourceWizard
operator|.
name|updatePerspective
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CoreException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CoreException thrown."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|setInitializationData (IConfigurationElement config, String propertyName, Object data)
specifier|public
name|void
name|setInitializationData
parameter_list|(
name|IConfigurationElement
name|config
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|data
parameter_list|)
throws|throws
name|CoreException
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
block|}
end_class

end_unit

