begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.actions
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|ImageLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
operator|.
name|DFSActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
operator|.
name|DFSFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
operator|.
name|DFSFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
operator|.
name|DFSLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
operator|.
name|DFSLocationsRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
operator|.
name|DFSPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|resources
operator|.
name|IStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|CoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|PlatformObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|action
operator|.
name|IAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|dialogs
operator|.
name|InputDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|dialogs
operator|.
name|MessageDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|operation
operator|.
name|IRunnableWithProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|resource
operator|.
name|ImageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ISelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|IStructuredSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|SWT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|DirectoryDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Display
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|FileDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|IObjectActionDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|IPersistableElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|IStorageEditorInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|IWorkbenchPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|PartInitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|PlatformUI
import|;
end_import

begin_comment
comment|/**  * Actual implementation of DFS actions  */
end_comment

begin_class
DECL|class|DFSActionImpl
specifier|public
class|class
name|DFSActionImpl
implements|implements
name|IObjectActionDelegate
block|{
DECL|field|selection
specifier|private
name|ISelection
name|selection
decl_stmt|;
DECL|field|targetPart
specifier|private
name|IWorkbenchPart
name|targetPart
decl_stmt|;
comment|/* @inheritDoc */
DECL|method|setActivePart (IAction action, IWorkbenchPart targetPart)
specifier|public
name|void
name|setActivePart
parameter_list|(
name|IAction
name|action
parameter_list|,
name|IWorkbenchPart
name|targetPart
parameter_list|)
block|{
name|this
operator|.
name|targetPart
operator|=
name|targetPart
expr_stmt|;
block|}
comment|/* @inheritDoc */
DECL|method|run (IAction action)
specifier|public
name|void
name|run
parameter_list|(
name|IAction
name|action
parameter_list|)
block|{
comment|// Ignore non structured selections
if|if
condition|(
operator|!
operator|(
name|this
operator|.
name|selection
operator|instanceof
name|IStructuredSelection
operator|)
condition|)
return|return;
comment|// operate on the DFS asynchronously to prevent blocking the main UI
specifier|final
name|IStructuredSelection
name|ss
init|=
operator|(
name|IStructuredSelection
operator|)
name|selection
decl_stmt|;
specifier|final
name|String
name|actionId
init|=
name|action
operator|.
name|getActionDefinitionId
argument_list|()
decl_stmt|;
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|asyncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
switch|switch
condition|(
name|DFSActions
operator|.
name|getById
argument_list|(
name|actionId
argument_list|)
condition|)
block|{
case|case
name|DELETE
case|:
block|{
name|delete
argument_list|(
name|ss
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OPEN
case|:
block|{
name|open
argument_list|(
name|ss
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MKDIR
case|:
block|{
name|mkdir
argument_list|(
name|ss
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|UPLOAD_FILES
case|:
block|{
name|uploadFilesToDFS
argument_list|(
name|ss
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|UPLOAD_DIR
case|:
block|{
name|uploadDirectoryToDFS
argument_list|(
name|ss
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REFRESH
case|:
block|{
name|refresh
argument_list|(
name|ss
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DOWNLOAD
case|:
block|{
name|downloadFromDFS
argument_list|(
name|ss
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RECONNECT
case|:
block|{
name|reconnect
argument_list|(
name|ss
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DISCONNECT
case|:
block|{
name|disconnect
argument_list|(
name|ss
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"Unhandled DFS Action: "
operator|+
name|actionId
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|MessageDialog
operator|.
name|openError
argument_list|(
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|getActiveShell
argument_list|()
argument_list|,
literal|"DFS Action error"
argument_list|,
literal|"An error occurred while performing DFS operation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new sub-folder into an existing directory    *     * @param selection    */
DECL|method|mkdir (IStructuredSelection selection)
specifier|private
name|void
name|mkdir
parameter_list|(
name|IStructuredSelection
name|selection
parameter_list|)
block|{
name|List
argument_list|<
name|DFSFolder
argument_list|>
name|folders
init|=
name|filterSelection
argument_list|(
name|DFSFolder
operator|.
name|class
argument_list|,
name|selection
argument_list|)
decl_stmt|;
if|if
condition|(
name|folders
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|DFSFolder
name|folder
init|=
name|folders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|InputDialog
name|dialog
init|=
operator|new
name|InputDialog
argument_list|(
name|Display
operator|.
name|getCurrent
argument_list|()
operator|.
name|getActiveShell
argument_list|()
argument_list|,
literal|"Create subfolder"
argument_list|,
literal|"Enter the name of the subfolder"
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|dialog
operator|.
name|open
argument_list|()
operator|==
name|InputDialog
operator|.
name|OK
condition|)
name|folder
operator|.
name|mkdir
argument_list|(
name|dialog
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Implement the import action (upload files from the current machine to    * HDFS)    *     * @param object    * @throws SftpException    * @throws JSchException    * @throws InvocationTargetException    * @throws InterruptedException    */
DECL|method|uploadFilesToDFS (IStructuredSelection selection)
specifier|private
name|void
name|uploadFilesToDFS
parameter_list|(
name|IStructuredSelection
name|selection
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|InterruptedException
block|{
comment|// Ask the user which files to upload
name|FileDialog
name|dialog
init|=
operator|new
name|FileDialog
argument_list|(
name|Display
operator|.
name|getCurrent
argument_list|()
operator|.
name|getActiveShell
argument_list|()
argument_list|,
name|SWT
operator|.
name|OPEN
operator||
name|SWT
operator|.
name|MULTI
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
literal|"Select the local files to upload"
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|open
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fname
range|:
name|dialog
operator|.
name|getFileNames
argument_list|()
control|)
name|files
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|dialog
operator|.
name|getFilterPath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|fname
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO enable upload command only when selection is exactly one folder
name|List
argument_list|<
name|DFSFolder
argument_list|>
name|folders
init|=
name|filterSelection
argument_list|(
name|DFSFolder
operator|.
name|class
argument_list|,
name|selection
argument_list|)
decl_stmt|;
if|if
condition|(
name|folders
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
name|uploadToDFS
argument_list|(
name|folders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
comment|/**    * Implement the import action (upload directory from the current machine    * to HDFS)    *     * @param object    * @throws SftpException    * @throws JSchException    * @throws InvocationTargetException    * @throws InterruptedException    */
DECL|method|uploadDirectoryToDFS (IStructuredSelection selection)
specifier|private
name|void
name|uploadDirectoryToDFS
parameter_list|(
name|IStructuredSelection
name|selection
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|InterruptedException
block|{
comment|// Ask the user which local directory to upload
name|DirectoryDialog
name|dialog
init|=
operator|new
name|DirectoryDialog
argument_list|(
name|Display
operator|.
name|getCurrent
argument_list|()
operator|.
name|getActiveShell
argument_list|()
argument_list|,
name|SWT
operator|.
name|OPEN
operator||
name|SWT
operator|.
name|MULTI
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
literal|"Select the local file or directory to upload"
argument_list|)
expr_stmt|;
name|String
name|dirName
init|=
name|dialog
operator|.
name|open
argument_list|()
decl_stmt|;
specifier|final
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// TODO enable upload command only when selection is exactly one folder
specifier|final
name|List
argument_list|<
name|DFSFolder
argument_list|>
name|folders
init|=
name|filterSelection
argument_list|(
name|DFSFolder
operator|.
name|class
argument_list|,
name|selection
argument_list|)
decl_stmt|;
if|if
condition|(
name|folders
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
name|uploadToDFS
argument_list|(
name|folders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
DECL|method|uploadToDFS (final DFSFolder folder, final List<File> files)
specifier|private
name|void
name|uploadToDFS
parameter_list|(
specifier|final
name|DFSFolder
name|folder
parameter_list|,
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|InterruptedException
block|{
name|PlatformUI
operator|.
name|getWorkbench
argument_list|()
operator|.
name|getProgressService
argument_list|()
operator|.
name|busyCursorWhile
argument_list|(
operator|new
name|IRunnableWithProgress
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|)
throws|throws
name|InvocationTargetException
block|{
name|int
name|work
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
name|work
operator|+=
name|computeUploadWork
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|beginTask
argument_list|(
literal|"Uploading files to distributed file system"
argument_list|,
name|work
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|folder
operator|.
name|upload
argument_list|(
name|monitor
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|MessageDialog
operator|.
name|openError
argument_list|(
literal|null
argument_list|,
literal|"Upload files to distributed file system"
argument_list|,
literal|"Upload failed.\n"
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
name|monitor
operator|.
name|done
argument_list|()
expr_stmt|;
comment|// Update the UI
name|folder
operator|.
name|doRefresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|reconnect (IStructuredSelection selection)
specifier|private
name|void
name|reconnect
parameter_list|(
name|IStructuredSelection
name|selection
parameter_list|)
block|{
for|for
control|(
name|DFSLocation
name|location
range|:
name|filterSelection
argument_list|(
name|DFSLocation
operator|.
name|class
argument_list|,
name|selection
argument_list|)
control|)
name|location
operator|.
name|reconnect
argument_list|()
expr_stmt|;
block|}
DECL|method|disconnect (IStructuredSelection selection)
specifier|private
name|void
name|disconnect
parameter_list|(
name|IStructuredSelection
name|selection
parameter_list|)
block|{
if|if
condition|(
name|selection
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
return|return;
name|Object
name|first
init|=
name|selection
operator|.
name|getFirstElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|first
operator|instanceof
name|DFSLocationsRoot
operator|)
condition|)
return|return;
name|DFSLocationsRoot
name|root
init|=
operator|(
name|DFSLocationsRoot
operator|)
name|first
decl_stmt|;
name|root
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/**    * Implements the Download action from HDFS to the current machine    *     * @param object    * @throws SftpException    * @throws JSchException    * @throws InterruptedException    * @throws InvocationTargetException    */
DECL|method|downloadFromDFS (IStructuredSelection selection)
specifier|private
name|void
name|downloadFromDFS
parameter_list|(
name|IStructuredSelection
name|selection
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|InterruptedException
block|{
comment|// Ask the user where to put the downloaded files
name|DirectoryDialog
name|dialog
init|=
operator|new
name|DirectoryDialog
argument_list|(
name|Display
operator|.
name|getCurrent
argument_list|()
operator|.
name|getActiveShell
argument_list|()
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
literal|"Copy to local directory"
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setMessage
argument_list|(
literal|"Copy the selected files and directories from the "
operator|+
literal|"distributed filesystem to a local directory"
argument_list|)
expr_stmt|;
name|String
name|directory
init|=
name|dialog
operator|.
name|open
argument_list|()
decl_stmt|;
if|if
condition|(
name|directory
operator|==
literal|null
condition|)
return|return;
specifier|final
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|MessageDialog
operator|.
name|openError
argument_list|(
literal|null
argument_list|,
literal|"Download to local file system"
argument_list|,
literal|"Invalid directory location: \""
operator|+
name|dir
operator|+
literal|"\""
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|List
argument_list|<
name|DFSPath
argument_list|>
name|paths
init|=
name|filterSelection
argument_list|(
name|DFSPath
operator|.
name|class
argument_list|,
name|selection
argument_list|)
decl_stmt|;
name|PlatformUI
operator|.
name|getWorkbench
argument_list|()
operator|.
name|getProgressService
argument_list|()
operator|.
name|busyCursorWhile
argument_list|(
operator|new
name|IRunnableWithProgress
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|)
throws|throws
name|InvocationTargetException
block|{
name|int
name|work
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DFSPath
name|path
range|:
name|paths
control|)
name|work
operator|+=
name|path
operator|.
name|computeDownloadWork
argument_list|()
expr_stmt|;
name|monitor
operator|.
name|beginTask
argument_list|(
literal|"Downloading files to local file system"
argument_list|,
name|work
argument_list|)
expr_stmt|;
for|for
control|(
name|DFSPath
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
name|monitor
operator|.
name|isCanceled
argument_list|()
condition|)
return|return;
try|try
block|{
name|path
operator|.
name|downloadToLocalDirectory
argument_list|(
name|monitor
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// nothing we want to do here
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|monitor
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Open the selected DfsPath in the editor window    *     * @param selection    * @throws JSchException    * @throws IOException    * @throws PartInitException    * @throws InvocationTargetException    * @throws InterruptedException    */
DECL|method|open (IStructuredSelection selection)
specifier|private
name|void
name|open
parameter_list|(
name|IStructuredSelection
name|selection
parameter_list|)
throws|throws
name|IOException
throws|,
name|PartInitException
throws|,
name|InvocationTargetException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|DFSFile
name|file
range|:
name|filterSelection
argument_list|(
name|DFSFile
operator|.
name|class
argument_list|,
name|selection
argument_list|)
control|)
block|{
name|IStorageEditorInput
name|editorInput
init|=
operator|new
name|DFSFileEditorInput
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|targetPart
operator|.
name|getSite
argument_list|()
operator|.
name|getWorkbenchWindow
argument_list|()
operator|.
name|getActivePage
argument_list|()
operator|.
name|openEditor
argument_list|(
name|editorInput
argument_list|,
literal|"org.eclipse.ui.DefaultTextEditor"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param selection    * @throws JSchException    */
DECL|method|refresh (IStructuredSelection selection)
specifier|private
name|void
name|refresh
parameter_list|(
name|IStructuredSelection
name|selection
parameter_list|)
block|{
for|for
control|(
name|DFSPath
name|path
range|:
name|filterSelection
argument_list|(
name|DFSPath
operator|.
name|class
argument_list|,
name|selection
argument_list|)
control|)
name|path
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
DECL|method|delete (IStructuredSelection selection)
specifier|private
name|void
name|delete
parameter_list|(
name|IStructuredSelection
name|selection
parameter_list|)
block|{
name|List
argument_list|<
name|DFSPath
argument_list|>
name|list
init|=
name|filterSelection
argument_list|(
name|DFSPath
operator|.
name|class
argument_list|,
name|selection
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Are you sure you want to delete "
operator|+
literal|"the following files from the distributed file system?\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|DFSPath
name|path
range|:
name|list
control|)
name|msg
operator|.
name|append
argument_list|(
name|path
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|MessageDialog
operator|.
name|openConfirm
argument_list|(
literal|null
argument_list|,
literal|"Confirm Delete from DFS"
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|DFSPath
argument_list|>
name|toRefresh
init|=
operator|new
name|HashSet
argument_list|<
name|DFSPath
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DFSPath
name|path
range|:
name|list
control|)
block|{
name|path
operator|.
name|delete
argument_list|()
expr_stmt|;
name|toRefresh
operator|.
name|add
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DFSPath
name|path
range|:
name|toRefresh
control|)
block|{
name|path
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/* @inheritDoc */
DECL|method|selectionChanged (IAction action, ISelection selection)
specifier|public
name|void
name|selectionChanged
parameter_list|(
name|IAction
name|action
parameter_list|,
name|ISelection
name|selection
parameter_list|)
block|{
name|this
operator|.
name|selection
operator|=
name|selection
expr_stmt|;
block|}
comment|/**    * Extract the list of<T> from the structured selection    *     * @param clazz the class T    * @param selection the structured selection    * @return the list of<T> it contains    */
DECL|method|filterSelection (Class<T> clazz, IStructuredSelection selection)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|filterSelection
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|IStructuredSelection
name|selection
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|selection
operator|.
name|toList
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
DECL|method|computeUploadWork (File file)
specifier|private
specifier|static
name|int
name|computeUploadWork
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|int
name|contentWork
init|=
literal|1
decl_stmt|;
for|for
control|(
name|File
name|child
range|:
name|file
operator|.
name|listFiles
argument_list|()
control|)
name|contentWork
operator|+=
name|computeUploadWork
argument_list|(
name|child
argument_list|)
expr_stmt|;
return|return
name|contentWork
return|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|1
operator|+
call|(
name|int
call|)
argument_list|(
name|file
operator|.
name|length
argument_list|()
operator|/
literal|1024
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**  * Adapter to allow the viewing of a DfsFile in the Editor window  */
end_comment

begin_class
DECL|class|DFSFileEditorInput
class|class
name|DFSFileEditorInput
extends|extends
name|PlatformObject
implements|implements
name|IStorageEditorInput
block|{
DECL|field|file
specifier|private
name|DFSFile
name|file
decl_stmt|;
comment|/**    * Constructor    *     * @param file    */
DECL|method|DFSFileEditorInput (DFSFile file)
name|DFSFileEditorInput
parameter_list|(
name|DFSFile
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
comment|/* @inheritDoc */
DECL|method|getToolTipText ()
specifier|public
name|String
name|getToolTipText
parameter_list|()
block|{
return|return
name|file
operator|.
name|toDetailedString
argument_list|()
return|;
block|}
comment|/* @inheritDoc */
DECL|method|getPersistable ()
specifier|public
name|IPersistableElement
name|getPersistable
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/* @inheritDoc */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|file
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* @inheritDoc */
DECL|method|getImageDescriptor ()
specifier|public
name|ImageDescriptor
name|getImageDescriptor
parameter_list|()
block|{
return|return
name|ImageLibrary
operator|.
name|get
argument_list|(
literal|"dfs.file.editor"
argument_list|)
return|;
block|}
comment|/* @inheritDoc */
DECL|method|exists ()
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/* @inheritDoc */
DECL|method|getStorage ()
specifier|public
name|IStorage
name|getStorage
parameter_list|()
throws|throws
name|CoreException
block|{
return|return
name|file
operator|.
name|getIStorage
argument_list|()
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

