begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.servers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|servers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|ConfProp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|dialogs
operator|.
name|IMessageProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|wizard
operator|.
name|WizardPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|SWT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|custom
operator|.
name|ScrolledComposite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|events
operator|.
name|ModifyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|events
operator|.
name|ModifyListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|events
operator|.
name|SelectionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|events
operator|.
name|SelectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|graphics
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|layout
operator|.
name|GridData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|layout
operator|.
name|GridLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Control
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Display
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|TabFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|TabItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Wizard for editing the settings of a Hadoop location  *   * The wizard contains 3 tabs: General, Tunneling and Advanced. It edits  * parameters of the location member which either a new location or a copy of  * an existing registered location.  */
end_comment

begin_class
DECL|class|HadoopLocationWizard
specifier|public
class|class
name|HadoopLocationWizard
extends|extends
name|WizardPage
block|{
DECL|field|circle
name|Image
name|circle
decl_stmt|;
comment|/**    * The location effectively edited by the wizard. This location is a copy    * or a new one.    */
DECL|field|location
specifier|private
name|HadoopServer
name|location
decl_stmt|;
comment|/**    * The original location being edited by the wizard (null if we create a    * new instance).    */
DECL|field|original
specifier|private
name|HadoopServer
name|original
decl_stmt|;
comment|/**    * New Hadoop location wizard    */
DECL|method|HadoopLocationWizard ()
specifier|public
name|HadoopLocationWizard
parameter_list|()
block|{
name|super
argument_list|(
literal|"Hadoop Server"
argument_list|,
literal|"New Hadoop Location"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|original
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|location
operator|=
operator|new
name|HadoopServer
argument_list|()
expr_stmt|;
name|this
operator|.
name|location
operator|.
name|setLocationName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor to edit the parameters of an existing Hadoop server    *     * @param server    */
DECL|method|HadoopLocationWizard (HadoopServer server)
specifier|public
name|HadoopLocationWizard
parameter_list|(
name|HadoopServer
name|server
parameter_list|)
block|{
name|super
argument_list|(
literal|"Create a new Hadoop location"
argument_list|,
literal|"Edit Hadoop Location"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|original
operator|=
name|server
expr_stmt|;
name|this
operator|.
name|location
operator|=
operator|new
name|HadoopServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs any actions appropriate in response to the user having pressed    * the Finish button, or refuse if finishing now is not permitted.    *     * @return the created or updated Hadoop location    */
DECL|method|performFinish ()
specifier|public
name|HadoopServer
name|performFinish
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|original
operator|==
literal|null
condition|)
block|{
comment|// New location
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|syncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|addServer
argument_list|(
name|HadoopLocationWizard
operator|.
name|this
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|location
return|;
block|}
else|else
block|{
comment|// Update location
specifier|final
name|String
name|originalName
init|=
name|this
operator|.
name|original
operator|.
name|getLocationName
argument_list|()
decl_stmt|;
name|this
operator|.
name|original
operator|.
name|load
argument_list|(
name|this
operator|.
name|location
argument_list|)
expr_stmt|;
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|syncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|updateServer
argument_list|(
name|originalName
argument_list|,
name|HadoopLocationWizard
operator|.
name|this
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|original
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|setMessage
argument_list|(
literal|"Invalid server location values"
argument_list|,
name|IMessageProvider
operator|.
name|ERROR
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Validates the current Hadoop location settings (look for Hadoop    * installation directory).    *     */
DECL|method|testLocation ()
specifier|private
name|void
name|testLocation
parameter_list|()
block|{
name|setMessage
argument_list|(
literal|"Not implemented yet"
argument_list|,
name|IMessageProvider
operator|.
name|WARNING
argument_list|)
expr_stmt|;
block|}
comment|/**    * Location is not complete (and finish button not available) until a host    * name is specified.    *     * @inheritDoc    */
annotation|@
name|Override
DECL|method|isPageComplete ()
specifier|public
name|boolean
name|isPageComplete
parameter_list|()
block|{
block|{
name|String
name|locName
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_LOCATION_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|locName
operator|==
literal|null
operator|)
operator|||
operator|(
name|locName
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|||
name|locName
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|setMessage
argument_list|(
literal|"Bad location name: "
operator|+
literal|"the location name should not contain "
operator|+
literal|"any character prohibited in a file name."
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|{
name|String
name|master
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_JOB_TRACKER_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|master
operator|==
literal|null
operator|)
operator|||
operator|(
name|master
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|setMessage
argument_list|(
literal|"Bad master host name: "
operator|+
literal|"the master host name refers to the machine "
operator|+
literal|"that runs the Job tracker."
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|{
name|String
name|jobTracker
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|JOB_TRACKER_URI
argument_list|)
decl_stmt|;
name|String
index|[]
name|strs
init|=
name|jobTracker
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|boolean
name|ok
init|=
operator|(
name|strs
operator|.
name|length
operator|==
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
try|try
block|{
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strs
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|ok
operator|=
operator|(
name|port
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|port
operator|<
literal|65536
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|setMessage
argument_list|(
literal|"The job tracker information ("
operator|+
name|ConfProp
operator|.
name|JOB_TRACKER_URI
operator|.
name|name
operator|+
literal|") is invalid. "
operator|+
literal|"This usually looks like \"host:port\""
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|{
name|String
name|fsDefaultURI
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|FS_DEFAULT_URI
argument_list|)
decl_stmt|;
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|fsDefaultURI
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|setMessage
argument_list|(
literal|"The default file system URI is invalid. "
operator|+
literal|"This usually looks like \"hdfs://host:port/\" "
operator|+
literal|"or \"file:///dir/\""
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
block|}
block|}
name|setMessage
argument_list|(
literal|"Define the location of a Hadoop infrastructure "
operator|+
literal|"for running MapReduce applications."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Create the wizard    */
comment|/* @inheritDoc */
DECL|method|createControl (Composite parent)
specifier|public
name|void
name|createControl
parameter_list|(
name|Composite
name|parent
parameter_list|)
block|{
name|setTitle
argument_list|(
literal|"Define Hadoop location"
argument_list|)
expr_stmt|;
name|setDescription
argument_list|(
literal|"Define the location of a Hadoop infrastructure "
operator|+
literal|"for running MapReduce applications."
argument_list|)
expr_stmt|;
name|Composite
name|panel
init|=
operator|new
name|Composite
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|FILL
argument_list|)
decl_stmt|;
name|GridLayout
name|glayout
init|=
operator|new
name|GridLayout
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
name|glayout
argument_list|)
expr_stmt|;
name|TabMediator
name|mediator
init|=
operator|new
name|TabMediator
argument_list|(
name|panel
argument_list|)
decl_stmt|;
block|{
name|GridData
name|gdata
init|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|FILL_BOTH
argument_list|)
decl_stmt|;
name|gdata
operator|.
name|horizontalSpan
operator|=
literal|2
expr_stmt|;
name|mediator
operator|.
name|folder
operator|.
name|setLayoutData
argument_list|(
name|gdata
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setControl
argument_list|(
name|panel
comment|/* mediator.folder */
argument_list|)
expr_stmt|;
block|{
specifier|final
name|Button
name|btn
init|=
operator|new
name|Button
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|btn
operator|.
name|setText
argument_list|(
literal|"&Load from file"
argument_list|)
expr_stmt|;
name|btn
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|btn
operator|.
name|setToolTipText
argument_list|(
literal|"Not yet implemented"
argument_list|)
expr_stmt|;
name|btn
operator|.
name|addListener
argument_list|(
name|SWT
operator|.
name|Selection
argument_list|,
operator|new
name|Listener
argument_list|()
block|{
specifier|public
name|void
name|handleEvent
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
comment|// TODO
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|Button
name|validate
init|=
operator|new
name|Button
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|validate
operator|.
name|setText
argument_list|(
literal|"&Validate location"
argument_list|)
expr_stmt|;
name|validate
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|validate
operator|.
name|setToolTipText
argument_list|(
literal|"Not yet implemented"
argument_list|)
expr_stmt|;
name|validate
operator|.
name|addListener
argument_list|(
name|SWT
operator|.
name|Selection
argument_list|,
operator|new
name|Listener
argument_list|()
block|{
specifier|public
name|void
name|handleEvent
parameter_list|(
name|Event
name|e
parameter_list|)
block|{
name|testLocation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|interface|TabListener
specifier|private
interface|interface
name|TabListener
block|{
DECL|method|notifyChange (ConfProp prop, String propValue)
name|void
name|notifyChange
parameter_list|(
name|ConfProp
name|prop
parameter_list|,
name|String
name|propValue
parameter_list|)
function_decl|;
block|}
comment|/*    * Mediator pattern to keep tabs synchronized with each other and with the    * location state.    */
DECL|class|TabMediator
specifier|private
class|class
name|TabMediator
block|{
DECL|field|folder
name|TabFolder
name|folder
decl_stmt|;
DECL|field|tabs
specifier|private
name|Set
argument_list|<
name|TabListener
argument_list|>
name|tabs
init|=
operator|new
name|HashSet
argument_list|<
name|TabListener
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|TabMediator (Composite parent)
name|TabMediator
parameter_list|(
name|Composite
name|parent
parameter_list|)
block|{
name|folder
operator|=
operator|new
name|TabFolder
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|TabMain
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|TabAdvanced
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Access to current configuration settings      *       * @param propName the property name      * @return the current property value      */
DECL|method|get (String propName)
name|String
name|get
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|location
operator|.
name|getConfProp
argument_list|(
name|propName
argument_list|)
return|;
block|}
DECL|method|get (ConfProp prop)
name|String
name|get
parameter_list|(
name|ConfProp
name|prop
parameter_list|)
block|{
return|return
name|location
operator|.
name|getConfProp
argument_list|(
name|prop
argument_list|)
return|;
block|}
comment|/**      * Implements change notifications from any tab: update the location      * state and other tabs      *       * @param source origin of the notification (one of the tree tabs)      * @param propName modified property      * @param propValue new value      */
DECL|method|notifyChange (TabListener source, final ConfProp prop, final String propValue)
name|void
name|notifyChange
parameter_list|(
name|TabListener
name|source
parameter_list|,
specifier|final
name|ConfProp
name|prop
parameter_list|,
specifier|final
name|String
name|propValue
parameter_list|)
block|{
comment|// Ignore notification when no change
name|String
name|oldValue
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|oldValue
operator|!=
literal|null
operator|)
operator|&&
name|oldValue
operator|.
name|equals
argument_list|(
name|propValue
argument_list|)
condition|)
return|return;
name|location
operator|.
name|setConfProp
argument_list|(
name|prop
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|syncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|getContainer
argument_list|()
operator|.
name|updateButtons
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|fireChange
argument_list|(
name|source
argument_list|,
name|prop
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
comment|/*        * Now we deal with dependencies between settings        */
specifier|final
name|String
name|jobTrackerHost
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_JOB_TRACKER_HOST
argument_list|)
decl_stmt|;
specifier|final
name|String
name|jobTrackerPort
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_JOB_TRACKER_PORT
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nameNodeHost
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_NAME_NODE_HOST
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nameNodePort
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_NAME_NODE_PORT
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|colocate
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_COLOCATE_MASTERS
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|jobTrackerURI
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|JOB_TRACKER_URI
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fsDefaultURI
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|FS_DEFAULT_URI
argument_list|)
decl_stmt|;
specifier|final
name|String
name|socksServerURI
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|SOCKS_SERVER
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|socksProxyEnable
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_SOCKS_PROXY_ENABLE
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|socksProxyHost
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_SOCKS_PROXY_HOST
argument_list|)
decl_stmt|;
specifier|final
name|String
name|socksProxyPort
init|=
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_SOCKS_PROXY_PORT
argument_list|)
decl_stmt|;
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|syncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
switch|switch
condition|(
name|prop
condition|)
block|{
case|case
name|PI_JOB_TRACKER_HOST
case|:
block|{
if|if
condition|(
name|colocate
condition|)
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|PI_NAME_NODE_HOST
argument_list|,
name|jobTrackerHost
argument_list|)
expr_stmt|;
name|String
name|newJobTrackerURI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s"
argument_list|,
name|jobTrackerHost
argument_list|,
name|jobTrackerPort
argument_list|)
decl_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|JOB_TRACKER_URI
argument_list|,
name|newJobTrackerURI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_JOB_TRACKER_PORT
case|:
block|{
name|String
name|newJobTrackerURI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s"
argument_list|,
name|jobTrackerHost
argument_list|,
name|jobTrackerPort
argument_list|)
decl_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|JOB_TRACKER_URI
argument_list|,
name|newJobTrackerURI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_NAME_NODE_HOST
case|:
block|{
name|String
name|newHDFSURI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"hdfs://%s:%s/"
argument_list|,
name|nameNodeHost
argument_list|,
name|nameNodePort
argument_list|)
decl_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|FS_DEFAULT_URI
argument_list|,
name|newHDFSURI
argument_list|)
expr_stmt|;
comment|// Break colocation if someone force the DFS Master
if|if
condition|(
operator|!
name|colocate
operator|&&
operator|!
name|nameNodeHost
operator|.
name|equals
argument_list|(
name|jobTrackerHost
argument_list|)
condition|)
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|PI_COLOCATE_MASTERS
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_NAME_NODE_PORT
case|:
block|{
name|String
name|newHDFSURI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"hdfs://%s:%s/"
argument_list|,
name|nameNodeHost
argument_list|,
name|nameNodePort
argument_list|)
decl_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|FS_DEFAULT_URI
argument_list|,
name|newHDFSURI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_SOCKS_PROXY_HOST
case|:
block|{
name|String
name|newSocksProxyURI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s"
argument_list|,
name|socksProxyHost
argument_list|,
name|socksProxyPort
argument_list|)
decl_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|SOCKS_SERVER
argument_list|,
name|newSocksProxyURI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_SOCKS_PROXY_PORT
case|:
block|{
name|String
name|newSocksProxyURI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s"
argument_list|,
name|socksProxyHost
argument_list|,
name|socksProxyPort
argument_list|)
decl_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|SOCKS_SERVER
argument_list|,
name|newSocksProxyURI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|JOB_TRACKER_URI
case|:
block|{
name|String
index|[]
name|strs
init|=
name|jobTrackerURI
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|strs
index|[
literal|0
index|]
decl_stmt|;
name|String
name|port
init|=
operator|(
name|strs
operator|.
name|length
operator|==
literal|2
operator|)
condition|?
name|strs
index|[
literal|1
index|]
else|:
literal|""
decl_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|PI_JOB_TRACKER_HOST
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|PI_JOB_TRACKER_PORT
argument_list|,
name|port
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FS_DEFAULT_URI
case|:
block|{
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|fsDefaultURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hdfs"
argument_list|)
condition|)
block|{
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|port
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|PI_NAME_NODE_HOST
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|PI_NAME_NODE_PORT
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|use
parameter_list|)
block|{
comment|// Ignore the update!
block|}
break|break;
block|}
case|case
name|SOCKS_SERVER
case|:
block|{
name|String
index|[]
name|strs
init|=
name|socksServerURI
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|strs
index|[
literal|0
index|]
decl_stmt|;
name|String
name|port
init|=
operator|(
name|strs
operator|.
name|length
operator|==
literal|2
operator|)
condition|?
name|strs
index|[
literal|1
index|]
else|:
literal|""
decl_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|PI_SOCKS_PROXY_HOST
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|PI_SOCKS_PROXY_PORT
argument_list|,
name|port
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_COLOCATE_MASTERS
case|:
block|{
if|if
condition|(
name|colocate
condition|)
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|PI_NAME_NODE_HOST
argument_list|,
name|jobTrackerHost
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_SOCKS_PROXY_ENABLE
case|:
block|{
if|if
condition|(
name|socksProxyEnable
condition|)
block|{
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|SOCKET_FACTORY_DEFAULT
argument_list|,
literal|"org.apache.hadoop.net.SocksSocketFactory"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|ConfProp
operator|.
name|SOCKET_FACTORY_DEFAULT
argument_list|,
literal|"org.apache.hadoop.net.StandardSocketFactory"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Change notifications on properties (by name). A property might not be      * reflected as a ConfProp enum. If it is, the notification is forwarded      * to the ConfProp notifyChange method. If not, it is processed here.      *       * @param source      * @param propName      * @param propValue      */
DECL|method|notifyChange (TabListener source, String propName, String propValue)
name|void
name|notifyChange
parameter_list|(
name|TabListener
name|source
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|propValue
parameter_list|)
block|{
name|ConfProp
name|prop
init|=
name|ConfProp
operator|.
name|getByName
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
name|notifyChange
argument_list|(
name|source
argument_list|,
name|prop
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
name|location
operator|.
name|setConfProp
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
comment|/**      * Broadcast a property change to all registered tabs. If a tab is      * identified as the source of the change, this tab will not be notified.      *       * @param source TODO      * @param prop      * @param value      */
DECL|method|fireChange (TabListener source, ConfProp prop, String value)
specifier|private
name|void
name|fireChange
parameter_list|(
name|TabListener
name|source
parameter_list|,
name|ConfProp
name|prop
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|TabListener
name|tab
range|:
name|tabs
control|)
block|{
if|if
condition|(
name|tab
operator|!=
name|source
condition|)
name|tab
operator|.
name|notifyChange
argument_list|(
name|prop
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Create a SWT Text component for the given {@link ConfProp} text    * configuration property.    *     * @param listener    * @param parent    * @param prop    * @return    */
DECL|method|createConfText (ModifyListener listener, Composite parent, ConfProp prop)
specifier|private
name|Text
name|createConfText
parameter_list|(
name|ModifyListener
name|listener
parameter_list|,
name|Composite
name|parent
parameter_list|,
name|ConfProp
name|prop
parameter_list|)
block|{
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|SINGLE
operator||
name|SWT
operator|.
name|BORDER
argument_list|)
decl_stmt|;
name|GridData
name|data
init|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|FILL_HORIZONTAL
argument_list|)
decl_stmt|;
name|text
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|text
operator|.
name|setData
argument_list|(
literal|"hProp"
argument_list|,
name|prop
argument_list|)
expr_stmt|;
name|text
operator|.
name|setText
argument_list|(
name|location
operator|.
name|getConfProp
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|addModifyListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
name|text
return|;
block|}
comment|/**    * Create a SWT Checked Button component for the given {@link ConfProp}    * boolean configuration property.    *     * @param listener    * @param parent    * @param prop    * @return    */
DECL|method|createConfCheckButton (SelectionListener listener, Composite parent, ConfProp prop, String text)
specifier|private
name|Button
name|createConfCheckButton
parameter_list|(
name|SelectionListener
name|listener
parameter_list|,
name|Composite
name|parent
parameter_list|,
name|ConfProp
name|prop
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|Button
name|button
init|=
operator|new
name|Button
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|CHECK
argument_list|)
decl_stmt|;
name|button
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|button
operator|.
name|setData
argument_list|(
literal|"hProp"
argument_list|,
name|prop
argument_list|)
expr_stmt|;
name|button
operator|.
name|setSelection
argument_list|(
name|location
operator|.
name|getConfProp
argument_list|(
name|prop
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|.
name|addSelectionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
name|button
return|;
block|}
comment|/**    * Create editor entry for the given configuration property. The editor is    * a couple (Label, Text).    *     * @param listener the listener to trigger on property change    * @param parent the SWT parent container    * @param prop the property to create an editor for    * @param labelText a label (null will defaults to the property name)    *     * @return a SWT Text field    */
DECL|method|createConfLabelText (ModifyListener listener, Composite parent, ConfProp prop, String labelText)
specifier|private
name|Text
name|createConfLabelText
parameter_list|(
name|ModifyListener
name|listener
parameter_list|,
name|Composite
name|parent
parameter_list|,
name|ConfProp
name|prop
parameter_list|,
name|String
name|labelText
parameter_list|)
block|{
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
if|if
condition|(
name|labelText
operator|==
literal|null
condition|)
name|labelText
operator|=
name|prop
operator|.
name|name
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
name|labelText
argument_list|)
expr_stmt|;
return|return
name|createConfText
argument_list|(
name|listener
argument_list|,
name|parent
argument_list|,
name|prop
argument_list|)
return|;
block|}
comment|/**    * Create an editor entry for the given configuration name    *     * @param listener the listener to trigger on property change    * @param parent the SWT parent container    * @param propName the name of the property to create an editor for    * @param labelText a label (null will defaults to the property name)    *     * @return a SWT Text field    */
DECL|method|createConfNameEditor (ModifyListener listener, Composite parent, String propName, String labelText)
specifier|private
name|Text
name|createConfNameEditor
parameter_list|(
name|ModifyListener
name|listener
parameter_list|,
name|Composite
name|parent
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|labelText
parameter_list|)
block|{
block|{
name|ConfProp
name|prop
init|=
name|ConfProp
operator|.
name|getByName
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
return|return
name|createConfLabelText
argument_list|(
name|listener
argument_list|,
name|parent
argument_list|,
name|prop
argument_list|,
name|labelText
argument_list|)
return|;
block|}
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
if|if
condition|(
name|labelText
operator|==
literal|null
condition|)
name|labelText
operator|=
name|propName
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
name|labelText
argument_list|)
expr_stmt|;
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|SINGLE
operator||
name|SWT
operator|.
name|BORDER
argument_list|)
decl_stmt|;
name|GridData
name|data
init|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|FILL_HORIZONTAL
argument_list|)
decl_stmt|;
name|text
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|text
operator|.
name|setData
argument_list|(
literal|"hPropName"
argument_list|,
name|propName
argument_list|)
expr_stmt|;
name|text
operator|.
name|setText
argument_list|(
name|location
operator|.
name|getConfProp
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|addModifyListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
name|text
return|;
block|}
comment|/**    * Main parameters of the Hadoop location:    *<li> host and port of the Map/Reduce master (Job tracker)    *<li> host and port of the DFS master (Name node)    *<li> SOCKS proxy    */
DECL|class|TabMain
specifier|private
class|class
name|TabMain
implements|implements
name|TabListener
implements|,
name|ModifyListener
implements|,
name|SelectionListener
block|{
DECL|field|mediator
name|TabMediator
name|mediator
decl_stmt|;
DECL|field|locationName
name|Text
name|locationName
decl_stmt|;
DECL|field|textJTHost
name|Text
name|textJTHost
decl_stmt|;
DECL|field|textNNHost
name|Text
name|textNNHost
decl_stmt|;
DECL|field|colocateMasters
name|Button
name|colocateMasters
decl_stmt|;
DECL|field|textJTPort
name|Text
name|textJTPort
decl_stmt|;
DECL|field|textNNPort
name|Text
name|textNNPort
decl_stmt|;
DECL|field|userName
name|Text
name|userName
decl_stmt|;
DECL|field|useSocksProxy
name|Button
name|useSocksProxy
decl_stmt|;
DECL|field|socksProxyHost
name|Text
name|socksProxyHost
decl_stmt|;
DECL|field|socksProxyPort
name|Text
name|socksProxyPort
decl_stmt|;
DECL|method|TabMain (TabMediator mediator)
name|TabMain
parameter_list|(
name|TabMediator
name|mediator
parameter_list|)
block|{
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|TabItem
name|tab
init|=
operator|new
name|TabItem
argument_list|(
name|mediator
operator|.
name|folder
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|tab
operator|.
name|setText
argument_list|(
literal|"General"
argument_list|)
expr_stmt|;
name|tab
operator|.
name|setToolTipText
argument_list|(
literal|"General location parameters"
argument_list|)
expr_stmt|;
name|tab
operator|.
name|setImage
argument_list|(
name|circle
argument_list|)
expr_stmt|;
name|tab
operator|.
name|setControl
argument_list|(
name|createControl
argument_list|(
name|mediator
operator|.
name|folder
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createControl (Composite parent)
specifier|private
name|Control
name|createControl
parameter_list|(
name|Composite
name|parent
parameter_list|)
block|{
name|Composite
name|panel
init|=
operator|new
name|Composite
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|FILL
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
operator|new
name|GridLayout
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|GridData
name|data
decl_stmt|;
comment|/*        * Location name        */
block|{
name|Composite
name|subpanel
init|=
operator|new
name|Composite
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|FILL
argument_list|)
decl_stmt|;
name|subpanel
operator|.
name|setLayout
argument_list|(
operator|new
name|GridLayout
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|data
operator|.
name|horizontalSpan
operator|=
literal|2
expr_stmt|;
name|data
operator|.
name|horizontalAlignment
operator|=
name|SWT
operator|.
name|FILL
expr_stmt|;
name|subpanel
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|locationName
operator|=
name|createConfLabelText
argument_list|(
name|this
argument_list|,
name|subpanel
argument_list|,
name|ConfProp
operator|.
name|PI_LOCATION_NAME
argument_list|,
literal|"&Location name:"
argument_list|)
expr_stmt|;
block|}
comment|/*        * Map/Reduce group        */
block|{
name|Group
name|groupMR
init|=
operator|new
name|Group
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|SHADOW_NONE
argument_list|)
decl_stmt|;
name|groupMR
operator|.
name|setText
argument_list|(
literal|"Map/Reduce Master"
argument_list|)
expr_stmt|;
name|groupMR
operator|.
name|setToolTipText
argument_list|(
literal|"Address of the Map/Reduce master node "
operator|+
literal|"(the Job Tracker)."
argument_list|)
expr_stmt|;
name|GridLayout
name|layout
init|=
operator|new
name|GridLayout
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|groupMR
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|data
operator|.
name|verticalAlignment
operator|=
name|SWT
operator|.
name|FILL
expr_stmt|;
name|data
operator|.
name|horizontalAlignment
operator|=
name|SWT
operator|.
name|CENTER
expr_stmt|;
name|data
operator|.
name|widthHint
operator|=
literal|250
expr_stmt|;
name|groupMR
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// Job Tracker host
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|groupMR
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"Host:"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|BEGINNING
argument_list|,
name|GridData
operator|.
name|CENTER
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|label
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|textJTHost
operator|=
name|createConfText
argument_list|(
name|this
argument_list|,
name|groupMR
argument_list|,
name|ConfProp
operator|.
name|PI_JOB_TRACKER_HOST
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|FILL
argument_list|,
name|GridData
operator|.
name|CENTER
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|textJTHost
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// Job Tracker port
name|label
operator|=
operator|new
name|Label
argument_list|(
name|groupMR
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"Port:"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|BEGINNING
argument_list|,
name|GridData
operator|.
name|CENTER
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|label
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|textJTPort
operator|=
name|createConfText
argument_list|(
name|this
argument_list|,
name|groupMR
argument_list|,
name|ConfProp
operator|.
name|PI_JOB_TRACKER_PORT
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|FILL
argument_list|,
name|GridData
operator|.
name|CENTER
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|textJTPort
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
comment|/*        * DFS group        */
block|{
name|Group
name|groupDFS
init|=
operator|new
name|Group
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|SHADOW_NONE
argument_list|)
decl_stmt|;
name|groupDFS
operator|.
name|setText
argument_list|(
literal|"DFS Master"
argument_list|)
expr_stmt|;
name|groupDFS
operator|.
name|setToolTipText
argument_list|(
literal|"Address of the Distributed FileSystem "
operator|+
literal|"master node (the Name Node)."
argument_list|)
expr_stmt|;
name|GridLayout
name|layout
init|=
operator|new
name|GridLayout
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|groupDFS
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|data
operator|.
name|horizontalAlignment
operator|=
name|SWT
operator|.
name|CENTER
expr_stmt|;
name|data
operator|.
name|widthHint
operator|=
literal|250
expr_stmt|;
name|groupDFS
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|colocateMasters
operator|=
name|createConfCheckButton
argument_list|(
name|this
argument_list|,
name|groupDFS
argument_list|,
name|ConfProp
operator|.
name|PI_COLOCATE_MASTERS
argument_list|,
literal|"Use M/R Master host"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|data
operator|.
name|horizontalSpan
operator|=
literal|2
expr_stmt|;
name|colocateMasters
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// Job Tracker host
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|groupDFS
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"Host:"
argument_list|)
expr_stmt|;
name|label
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|textNNHost
operator|=
name|createConfText
argument_list|(
name|this
argument_list|,
name|groupDFS
argument_list|,
name|ConfProp
operator|.
name|PI_NAME_NODE_HOST
argument_list|)
expr_stmt|;
comment|// Job Tracker port
name|label
operator|=
operator|new
name|Label
argument_list|(
name|groupDFS
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"Port:"
argument_list|)
expr_stmt|;
name|label
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|textNNPort
operator|=
name|createConfText
argument_list|(
name|this
argument_list|,
name|groupDFS
argument_list|,
name|ConfProp
operator|.
name|PI_NAME_NODE_PORT
argument_list|)
expr_stmt|;
block|}
block|{
name|Composite
name|subpanel
init|=
operator|new
name|Composite
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|FILL
argument_list|)
decl_stmt|;
name|subpanel
operator|.
name|setLayout
argument_list|(
operator|new
name|GridLayout
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|data
operator|.
name|horizontalSpan
operator|=
literal|2
expr_stmt|;
name|data
operator|.
name|horizontalAlignment
operator|=
name|SWT
operator|.
name|FILL
expr_stmt|;
name|subpanel
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|userName
operator|=
name|createConfLabelText
argument_list|(
name|this
argument_list|,
name|subpanel
argument_list|,
name|ConfProp
operator|.
name|PI_USER_NAME
argument_list|,
literal|"&User name:"
argument_list|)
expr_stmt|;
block|}
comment|// SOCKS proxy group
block|{
name|Group
name|groupSOCKS
init|=
operator|new
name|Group
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|SHADOW_NONE
argument_list|)
decl_stmt|;
name|groupSOCKS
operator|.
name|setText
argument_list|(
literal|"SOCKS proxy"
argument_list|)
expr_stmt|;
name|groupSOCKS
operator|.
name|setToolTipText
argument_list|(
literal|"Address of the SOCKS proxy to use "
operator|+
literal|"to connect to the infrastructure."
argument_list|)
expr_stmt|;
name|GridLayout
name|layout
init|=
operator|new
name|GridLayout
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|groupSOCKS
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|data
operator|.
name|horizontalAlignment
operator|=
name|SWT
operator|.
name|CENTER
expr_stmt|;
name|data
operator|.
name|horizontalSpan
operator|=
literal|2
expr_stmt|;
name|data
operator|.
name|widthHint
operator|=
literal|250
expr_stmt|;
name|groupSOCKS
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|useSocksProxy
operator|=
name|createConfCheckButton
argument_list|(
name|this
argument_list|,
name|groupSOCKS
argument_list|,
name|ConfProp
operator|.
name|PI_SOCKS_PROXY_ENABLE
argument_list|,
literal|"Enable SOCKS proxy"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|data
operator|.
name|horizontalSpan
operator|=
literal|2
expr_stmt|;
name|useSocksProxy
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// SOCKS proxy host
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|groupSOCKS
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"Host:"
argument_list|)
expr_stmt|;
name|label
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|socksProxyHost
operator|=
name|createConfText
argument_list|(
name|this
argument_list|,
name|groupSOCKS
argument_list|,
name|ConfProp
operator|.
name|PI_SOCKS_PROXY_HOST
argument_list|)
expr_stmt|;
comment|// SOCKS proxy port
name|label
operator|=
operator|new
name|Label
argument_list|(
name|groupSOCKS
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|GridData
argument_list|()
expr_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"Port:"
argument_list|)
expr_stmt|;
name|label
operator|.
name|setLayoutData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|socksProxyPort
operator|=
name|createConfText
argument_list|(
name|this
argument_list|,
name|groupSOCKS
argument_list|,
name|ConfProp
operator|.
name|PI_SOCKS_PROXY_PORT
argument_list|)
expr_stmt|;
block|}
comment|// Update the state of all widgets according to the current values!
name|reloadConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_COLOCATE_MASTERS
argument_list|)
expr_stmt|;
name|reloadConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_SOCKS_PROXY_ENABLE
argument_list|)
expr_stmt|;
name|reloadConfProp
argument_list|(
name|ConfProp
operator|.
name|PI_JOB_TRACKER_HOST
argument_list|)
expr_stmt|;
return|return
name|panel
return|;
block|}
comment|/**      * Reload the given configuration property value      *       * @param prop      */
DECL|method|reloadConfProp (ConfProp prop)
specifier|private
name|void
name|reloadConfProp
parameter_list|(
name|ConfProp
name|prop
parameter_list|)
block|{
name|this
operator|.
name|notifyChange
argument_list|(
name|prop
argument_list|,
name|location
operator|.
name|getConfProp
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|notifyChange (ConfProp prop, String propValue)
specifier|public
name|void
name|notifyChange
parameter_list|(
name|ConfProp
name|prop
parameter_list|,
name|String
name|propValue
parameter_list|)
block|{
switch|switch
condition|(
name|prop
condition|)
block|{
case|case
name|PI_JOB_TRACKER_HOST
case|:
block|{
name|textJTHost
operator|.
name|setText
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_JOB_TRACKER_PORT
case|:
block|{
name|textJTPort
operator|.
name|setText
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_LOCATION_NAME
case|:
block|{
name|locationName
operator|.
name|setText
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_USER_NAME
case|:
block|{
name|userName
operator|.
name|setText
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_COLOCATE_MASTERS
case|:
block|{
if|if
condition|(
name|colocateMasters
operator|!=
literal|null
condition|)
block|{
name|boolean
name|colocate
init|=
name|propValue
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
decl_stmt|;
name|colocateMasters
operator|.
name|setSelection
argument_list|(
name|colocate
argument_list|)
expr_stmt|;
if|if
condition|(
name|textNNHost
operator|!=
literal|null
condition|)
block|{
name|textNNHost
operator|.
name|setEnabled
argument_list|(
operator|!
name|colocate
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|PI_NAME_NODE_HOST
case|:
block|{
name|textNNHost
operator|.
name|setText
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_NAME_NODE_PORT
case|:
block|{
name|textNNPort
operator|.
name|setText
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_SOCKS_PROXY_ENABLE
case|:
block|{
if|if
condition|(
name|useSocksProxy
operator|!=
literal|null
condition|)
block|{
name|boolean
name|useProxy
init|=
name|propValue
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
decl_stmt|;
name|useSocksProxy
operator|.
name|setSelection
argument_list|(
name|useProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|socksProxyHost
operator|!=
literal|null
condition|)
name|socksProxyHost
operator|.
name|setEnabled
argument_list|(
name|useProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|socksProxyPort
operator|!=
literal|null
condition|)
name|socksProxyPort
operator|.
name|setEnabled
argument_list|(
name|useProxy
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PI_SOCKS_PROXY_HOST
case|:
block|{
name|socksProxyHost
operator|.
name|setText
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PI_SOCKS_PROXY_PORT
case|:
block|{
name|socksProxyPort
operator|.
name|setText
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/* @inheritDoc */
DECL|method|modifyText (ModifyEvent e)
specifier|public
name|void
name|modifyText
parameter_list|(
name|ModifyEvent
name|e
parameter_list|)
block|{
specifier|final
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|e
operator|.
name|widget
decl_stmt|;
specifier|final
name|ConfProp
name|prop
init|=
operator|(
name|ConfProp
operator|)
name|text
operator|.
name|getData
argument_list|(
literal|"hProp"
argument_list|)
decl_stmt|;
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|syncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|mediator
operator|.
name|notifyChange
argument_list|(
name|TabMain
operator|.
name|this
argument_list|,
name|prop
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* @inheritDoc */
DECL|method|widgetDefaultSelected (SelectionEvent e)
specifier|public
name|void
name|widgetDefaultSelected
parameter_list|(
name|SelectionEvent
name|e
parameter_list|)
block|{
name|this
operator|.
name|widgetSelected
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/* @inheritDoc */
DECL|method|widgetSelected (SelectionEvent e)
specifier|public
name|void
name|widgetSelected
parameter_list|(
name|SelectionEvent
name|e
parameter_list|)
block|{
specifier|final
name|Button
name|button
init|=
operator|(
name|Button
operator|)
name|e
operator|.
name|widget
decl_stmt|;
specifier|final
name|ConfProp
name|prop
init|=
operator|(
name|ConfProp
operator|)
name|button
operator|.
name|getData
argument_list|(
literal|"hProp"
argument_list|)
decl_stmt|;
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|syncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// We want to receive the update also!
name|mediator
operator|.
name|notifyChange
argument_list|(
literal|null
argument_list|,
name|prop
argument_list|,
name|button
operator|.
name|getSelection
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TabAdvanced
specifier|private
class|class
name|TabAdvanced
implements|implements
name|TabListener
implements|,
name|ModifyListener
block|{
DECL|field|mediator
name|TabMediator
name|mediator
decl_stmt|;
DECL|field|panel
specifier|private
name|Composite
name|panel
decl_stmt|;
DECL|field|textMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Text
argument_list|>
name|textMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Text
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|TabAdvanced (TabMediator mediator)
name|TabAdvanced
parameter_list|(
name|TabMediator
name|mediator
parameter_list|)
block|{
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|TabItem
name|tab
init|=
operator|new
name|TabItem
argument_list|(
name|mediator
operator|.
name|folder
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|tab
operator|.
name|setText
argument_list|(
literal|"Advanced parameters"
argument_list|)
expr_stmt|;
name|tab
operator|.
name|setToolTipText
argument_list|(
literal|"Access to advanced Hadoop parameters"
argument_list|)
expr_stmt|;
name|tab
operator|.
name|setImage
argument_list|(
name|circle
argument_list|)
expr_stmt|;
name|tab
operator|.
name|setControl
argument_list|(
name|createControl
argument_list|(
name|mediator
operator|.
name|folder
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createControl (Composite parent)
specifier|private
name|Control
name|createControl
parameter_list|(
name|Composite
name|parent
parameter_list|)
block|{
name|ScrolledComposite
name|sc
init|=
operator|new
name|ScrolledComposite
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|BORDER
operator||
name|SWT
operator|.
name|H_SCROLL
operator||
name|SWT
operator|.
name|V_SCROLL
argument_list|)
decl_stmt|;
name|panel
operator|=
operator|new
name|Composite
argument_list|(
name|sc
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setContent
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setExpandHorizontal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setExpandVertical
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setMinSize
argument_list|(
literal|640
argument_list|,
literal|480
argument_list|)
expr_stmt|;
name|GridLayout
name|layout
init|=
operator|new
name|GridLayout
argument_list|()
decl_stmt|;
name|layout
operator|.
name|numColumns
operator|=
literal|2
expr_stmt|;
name|layout
operator|.
name|makeColumnsEqualWidth
operator|=
literal|false
expr_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setLayoutData
argument_list|(
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|FILL
argument_list|,
name|GridData
operator|.
name|FILL
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sort by property name
name|Configuration
name|config
init|=
name|location
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
name|config
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Text
name|text
init|=
name|createConfNameEditor
argument_list|(
name|this
argument_list|,
name|panel
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|textMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|sc
operator|.
name|setMinSize
argument_list|(
name|panel
operator|.
name|computeSize
argument_list|(
name|SWT
operator|.
name|DEFAULT
argument_list|,
name|SWT
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sc
return|;
block|}
DECL|method|notifyChange (ConfProp prop, final String propValue)
specifier|public
name|void
name|notifyChange
parameter_list|(
name|ConfProp
name|prop
parameter_list|,
specifier|final
name|String
name|propValue
parameter_list|)
block|{
name|Text
name|text
init|=
name|textMap
operator|.
name|get
argument_list|(
name|prop
operator|.
name|name
argument_list|)
decl_stmt|;
name|text
operator|.
name|setText
argument_list|(
name|propValue
argument_list|)
expr_stmt|;
block|}
DECL|method|modifyText (ModifyEvent e)
specifier|public
name|void
name|modifyText
parameter_list|(
name|ModifyEvent
name|e
parameter_list|)
block|{
specifier|final
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|e
operator|.
name|widget
decl_stmt|;
name|Object
name|hProp
init|=
name|text
operator|.
name|getData
argument_list|(
literal|"hProp"
argument_list|)
decl_stmt|;
specifier|final
name|ConfProp
name|prop
init|=
operator|(
name|hProp
operator|!=
literal|null
operator|)
condition|?
operator|(
name|ConfProp
operator|)
name|hProp
else|:
literal|null
decl_stmt|;
name|Object
name|hPropName
init|=
name|text
operator|.
name|getData
argument_list|(
literal|"hPropName"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|propName
init|=
operator|(
name|hPropName
operator|!=
literal|null
operator|)
condition|?
operator|(
name|String
operator|)
name|hPropName
else|:
literal|null
decl_stmt|;
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|syncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
name|mediator
operator|.
name|notifyChange
argument_list|(
name|TabAdvanced
operator|.
name|this
argument_list|,
name|prop
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|mediator
operator|.
name|notifyChange
argument_list|(
name|TabAdvanced
operator|.
name|this
argument_list|,
name|propName
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

