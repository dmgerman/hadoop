begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|Activator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|ErrorMessageDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|resources
operator|.
name|IResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|ICompilationUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|IJavaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|IType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|ui
operator|.
name|jarpackager
operator|.
name|IJarExportRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|ui
operator|.
name|jarpackager
operator|.
name|JarPackageData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|operation
operator|.
name|IRunnableWithProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Display
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|PlatformUI
import|;
end_import

begin_comment
comment|/**  * Methods for interacting with the jar file containing the  * Mapper/Reducer/Driver classes for a MapReduce job.  */
end_comment

begin_class
DECL|class|JarModule
specifier|public
class|class
name|JarModule
implements|implements
name|IRunnableWithProgress
block|{
DECL|field|log
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|JarModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|resource
specifier|private
name|IResource
name|resource
decl_stmt|;
DECL|field|jarFile
specifier|private
name|File
name|jarFile
decl_stmt|;
DECL|method|JarModule (IResource resource)
specifier|public
name|JarModule
parameter_list|(
name|IResource
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|resource
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|resource
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**    * Creates a JAR file containing the given resource (Java class with    * main()) and all associated resources    *     * @param resource the resource    * @return a file designing the created package    */
DECL|method|run (IProgressMonitor monitor)
specifier|public
name|void
name|run
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|)
block|{
name|log
operator|.
name|fine
argument_list|(
literal|"Build jar"
argument_list|)
expr_stmt|;
name|JarPackageData
name|jarrer
init|=
operator|new
name|JarPackageData
argument_list|()
decl_stmt|;
name|jarrer
operator|.
name|setExportJavaFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jarrer
operator|.
name|setExportClassFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jarrer
operator|.
name|setExportOutputFolders
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jarrer
operator|.
name|setOverwrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// IJavaProject project =
comment|// (IJavaProject) resource.getProject().getNature(JavaCore.NATURE_ID);
comment|// check this is the case before letting this method get called
name|Object
name|element
init|=
name|resource
operator|.
name|getAdapter
argument_list|(
name|IJavaElement
operator|.
name|class
argument_list|)
decl_stmt|;
name|IType
name|type
init|=
operator|(
operator|(
name|ICompilationUnit
operator|)
name|element
operator|)
operator|.
name|findPrimaryType
argument_list|()
decl_stmt|;
name|jarrer
operator|.
name|setManifestMainClass
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// Create a temporary JAR file name
name|File
name|baseDir
init|=
name|Activator
operator|.
name|getDefault
argument_list|()
operator|.
name|getStateLocation
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s_%s-"
argument_list|,
name|resource
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|jarFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
argument_list|,
literal|".jar"
argument_list|,
name|baseDir
argument_list|)
decl_stmt|;
name|jarrer
operator|.
name|setJarLocation
argument_list|(
operator|new
name|Path
argument_list|(
name|jarFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jarrer
operator|.
name|setElements
argument_list|(
name|resource
operator|.
name|getProject
argument_list|()
operator|.
name|members
argument_list|(
name|IResource
operator|.
name|FILE
argument_list|)
argument_list|)
expr_stmt|;
name|IJarExportRunnable
name|runnable
init|=
name|jarrer
operator|.
name|createJarExportRunnable
argument_list|(
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|getActiveShell
argument_list|()
argument_list|)
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
name|this
operator|.
name|jarFile
operator|=
name|jarFile
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Allow the retrieval of the resulting JAR file    *     * @return the generated JAR file    */
DECL|method|getJarFile ()
specifier|public
name|File
name|getJarFile
parameter_list|()
block|{
return|return
name|this
operator|.
name|jarFile
return|;
block|}
comment|/**    * Static way to create a JAR package for the given resource and showing a    * progress bar    *     * @param resource    * @return    */
DECL|method|createJarPackage (IResource resource)
specifier|public
specifier|static
name|File
name|createJarPackage
parameter_list|(
name|IResource
name|resource
parameter_list|)
block|{
name|JarModule
name|jarModule
init|=
operator|new
name|JarModule
argument_list|(
name|resource
argument_list|)
decl_stmt|;
try|try
block|{
name|PlatformUI
operator|.
name|getWorkbench
argument_list|()
operator|.
name|getProgressService
argument_list|()
operator|.
name|run
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|jarModule
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|File
name|jarFile
init|=
name|jarModule
operator|.
name|getJarFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|jarFile
operator|==
literal|null
condition|)
block|{
name|ErrorMessageDialog
operator|.
name|display
argument_list|(
literal|"Run on Hadoop"
argument_list|,
literal|"Unable to create or locate the JAR file for the Job"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|jarFile
return|;
block|}
block|}
end_class

end_unit

