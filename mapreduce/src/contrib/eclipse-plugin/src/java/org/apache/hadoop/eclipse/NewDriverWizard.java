begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|resources
operator|.
name|IFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|CoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|IJavaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|internal
operator|.
name|ui
operator|.
name|wizards
operator|.
name|NewElementWizard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|operation
operator|.
name|IRunnableWithProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|IStructuredSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|INewWizard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|IWorkbench
import|;
end_import

begin_comment
comment|/**  * Wizard for creating a new Driver class (a class that runs a MapReduce job).  *   */
end_comment

begin_class
DECL|class|NewDriverWizard
specifier|public
class|class
name|NewDriverWizard
extends|extends
name|NewElementWizard
implements|implements
name|INewWizard
implements|,
name|IRunnableWithProgress
block|{
DECL|field|page
specifier|private
name|NewDriverWizardPage
name|page
decl_stmt|;
comment|/*    * @Override public boolean performFinish() { }    */
DECL|method|run (IProgressMonitor monitor)
specifier|public
name|void
name|run
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|)
block|{
try|try
block|{
name|page
operator|.
name|createType
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CoreException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|NewDriverWizard ()
specifier|public
name|NewDriverWizard
parameter_list|()
block|{
name|setWindowTitle
argument_list|(
literal|"New MapReduce Driver"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (IWorkbench workbench, IStructuredSelection selection)
specifier|public
name|void
name|init
parameter_list|(
name|IWorkbench
name|workbench
parameter_list|,
name|IStructuredSelection
name|selection
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|workbench
argument_list|,
name|selection
argument_list|)
expr_stmt|;
name|page
operator|=
operator|new
name|NewDriverWizardPage
argument_list|()
expr_stmt|;
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|.
name|setSelection
argument_list|(
name|selection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|/**    * Performs any actions appropriate in response to the user having pressed the    * Finish button, or refuse if finishing now is not permitted.    */
DECL|method|performFinish ()
specifier|public
name|boolean
name|performFinish
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|performFinish
argument_list|()
condition|)
block|{
if|if
condition|(
name|getCreatedElement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|selectAndReveal
argument_list|(
name|page
operator|.
name|getModifiedResource
argument_list|()
argument_list|)
expr_stmt|;
name|openResource
argument_list|(
operator|(
name|IFile
operator|)
name|page
operator|.
name|getModifiedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
comment|/**    *     */
DECL|method|finishPage (IProgressMonitor monitor)
specifier|protected
name|void
name|finishPage
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|CoreException
block|{
name|this
operator|.
name|run
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCreatedElement ()
specifier|public
name|IJavaElement
name|getCreatedElement
parameter_list|()
block|{
return|return
name|page
operator|.
name|getCreatedType
argument_list|()
operator|.
name|getPrimaryElement
argument_list|()
return|;
block|}
block|}
end_class

end_unit

