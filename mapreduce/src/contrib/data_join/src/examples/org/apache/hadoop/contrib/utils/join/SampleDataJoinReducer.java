begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.utils.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
operator|.
name|DataJoinReducerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|utils
operator|.
name|join
operator|.
name|TaggedMapOutput
import|;
end_import

begin_comment
comment|/**  * This is a subclass of DataJoinReducerBase that is used to  * demonstrate the functionality of INNER JOIN between 2 data  * sources (TAB separated text files) based on the first column.  */
end_comment

begin_class
DECL|class|SampleDataJoinReducer
specifier|public
class|class
name|SampleDataJoinReducer
extends|extends
name|DataJoinReducerBase
block|{
comment|/**    *     * @param tags    *          a list of source tags    * @param values    *          a value per source    * @return combined value derived from values of the sources    */
DECL|method|combine (Object[] tags, Object[] values)
specifier|protected
name|TaggedMapOutput
name|combine
parameter_list|(
name|Object
index|[]
name|tags
parameter_list|,
name|Object
index|[]
name|values
parameter_list|)
block|{
comment|// eliminate rows which didnot match in one of the two tables (for INNER JOIN)
if|if
condition|(
name|tags
operator|.
name|length
operator|<
literal|2
condition|)
return|return
literal|null
return|;
name|String
name|joinedStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tags
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|joinedStr
operator|+=
literal|"\t"
expr_stmt|;
comment|// strip first column as it is the key on which we joined
name|String
name|line
init|=
operator|(
call|(
name|Text
call|)
argument_list|(
operator|(
operator|(
name|TaggedMapOutput
operator|)
name|values
index|[
name|i
index|]
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\t"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|joinedStr
operator|+=
name|tokens
index|[
literal|1
index|]
expr_stmt|;
block|}
name|TaggedMapOutput
name|retv
init|=
operator|new
name|SampleTaggedMapOutput
argument_list|(
operator|new
name|Text
argument_list|(
name|joinedStr
argument_list|)
argument_list|)
decl_stmt|;
name|retv
operator|.
name|setTag
argument_list|(
operator|(
name|Text
operator|)
name|tags
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|retv
return|;
block|}
block|}
end_class

end_unit

