begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.main
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
operator|.
name|IndexUpdateConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
operator|.
name|IIndexUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
operator|.
name|Shard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * A distributed "index" is partitioned into "shards". Each shard corresponds  * to a Lucene instance. This class contains the main() method which uses a  * Map/Reduce job to analyze documents and update Lucene instances in parallel.  *   * The main() method in UpdateIndex requires the following information for  * updating the shards:  *   - Input formatter. This specifies how to format the input documents.  *   - Analysis. This defines the analyzer to use on the input. The analyzer  *     determines whether a document is being inserted, updated, or deleted.  *     For inserts or updates, the analyzer also converts each input document  *     into a Lucene document.  *   - Input paths. This provides the location(s) of updated documents,  *     e.g., HDFS files or directories, or HBase tables.  *   - Shard paths, or index path with the number of shards. Either specify  *     the path for each shard, or specify an index path and the shards are  *     the sub-directories of the index directory.  *   - Output path. When the update to a shard is done, a message is put here.  *   - Number of map tasks.  *  * All of the information can be specified in a configuration file. All but  * the first two can also be specified as command line options. Check out  * conf/index-config.xml.template for other configurable parameters.  *  * Note: Because of the parallel nature of Map/Reduce, the behaviour of  * multiple inserts, deletes or updates to the same document is undefined.  */
end_comment

begin_class
DECL|class|UpdateIndex
specifier|public
class|class
name|UpdateIndex
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UpdateIndex
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NUMBER_FORMAT
specifier|private
specifier|static
specifier|final
name|NumberFormat
name|NUMBER_FORMAT
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
static|static
block|{
name|NUMBER_FORMAT
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|NUMBER_FORMAT
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|now ()
specifier|private
specifier|static
name|long
name|now
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
DECL|method|printUsage (String cmd)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|UpdateIndex
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"                        -inputPaths<inputPath,inputPath>\n"
operator|+
literal|"                        -outputPath<outputPath>\n"
operator|+
literal|"                        -shards<shardDir,shardDir>\n"
operator|+
literal|"                        -indexPath<indexPath>\n"
operator|+
literal|"                        -numShards<num>\n"
operator|+
literal|"                        -numMapTasks<num>\n"
operator|+
literal|"                        -conf<confPath>\n"
operator|+
literal|"Note: Do not use both -shards option and -indexPath option."
argument_list|)
expr_stmt|;
block|}
DECL|method|getIndexPath (Configuration conf)
specifier|private
specifier|static
name|String
name|getIndexPath
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
literal|"sea.index.path"
argument_list|)
return|;
block|}
DECL|method|getNumShards (Configuration conf)
specifier|private
specifier|static
name|int
name|getNumShards
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
literal|"sea.num.shards"
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|createShards (String indexPath, int numShards, Configuration conf)
specifier|private
specifier|static
name|Shard
index|[]
name|createShards
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|int
name|numShards
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|parent
init|=
name|Shard
operator|.
name|normalizePath
argument_list|(
name|indexPath
argument_list|)
operator|+
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
name|long
name|versionNumber
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|generation
init|=
operator|-
literal|1
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|fileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
index|[]
name|shardNames
init|=
operator|new
name|String
index|[
name|fileStatus
operator|.
name|length
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fileStatus
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|shardNames
index|[
name|count
index|]
operator|=
name|fileStatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|shardNames
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Shard
index|[]
name|shards
init|=
operator|new
name|Shard
index|[
name|count
operator|>=
name|numShards
condition|?
name|count
else|:
name|numShards
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|shards
index|[
name|i
index|]
operator|=
operator|new
name|Shard
argument_list|(
name|versionNumber
argument_list|,
name|parent
operator|+
name|shardNames
index|[
name|i
index|]
argument_list|,
name|generation
argument_list|)
expr_stmt|;
block|}
name|int
name|number
init|=
name|count
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|count
init|;
name|i
operator|<
name|numShards
condition|;
name|i
operator|++
control|)
block|{
name|String
name|shardPath
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|shardPath
operator|=
name|parent
operator|+
name|NUMBER_FORMAT
operator|.
name|format
argument_list|(
name|number
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|shardPath
argument_list|)
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|shards
index|[
name|i
index|]
operator|=
operator|new
name|Shard
argument_list|(
name|versionNumber
argument_list|,
name|shardPath
argument_list|,
name|generation
argument_list|)
expr_stmt|;
block|}
return|return
name|shards
return|;
block|}
else|else
block|{
name|Shard
index|[]
name|shards
init|=
operator|new
name|Shard
index|[
name|numShards
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shards
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|shards
index|[
name|i
index|]
operator|=
operator|new
name|Shard
argument_list|(
name|versionNumber
argument_list|,
name|parent
operator|+
name|NUMBER_FORMAT
operator|.
name|format
argument_list|(
name|i
argument_list|)
argument_list|,
name|generation
argument_list|)
expr_stmt|;
block|}
return|return
name|shards
return|;
block|}
block|}
comment|/**    * The main() method    * @param argv    */
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|inputPathsString
init|=
literal|null
decl_stmt|;
name|Path
name|outputPath
init|=
literal|null
decl_stmt|;
name|String
name|shardsString
init|=
literal|null
decl_stmt|;
name|String
name|indexPath
init|=
literal|null
decl_stmt|;
name|int
name|numShards
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|numMapTasks
init|=
operator|-
literal|1
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|confPath
init|=
literal|null
decl_stmt|;
comment|// parse the command line
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argv
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// parse command line
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-inputPaths"
argument_list|)
condition|)
block|{
name|inputPathsString
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-outputPath"
argument_list|)
condition|)
block|{
name|outputPath
operator|=
operator|new
name|Path
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-shards"
argument_list|)
condition|)
block|{
name|shardsString
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-indexPath"
argument_list|)
condition|)
block|{
name|indexPath
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-numShards"
argument_list|)
condition|)
block|{
name|numShards
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-numMapTasks"
argument_list|)
condition|)
block|{
name|numMapTasks
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argv
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-conf"
argument_list|)
condition|)
block|{
comment|// add as a local FS resource
name|confPath
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|confPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unknown option "
operator|+
name|argv
index|[
name|i
index|]
operator|+
literal|" w/ value "
operator|+
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"inputPaths = "
operator|+
name|inputPathsString
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"outputPath = "
operator|+
name|outputPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"shards     = "
operator|+
name|shardsString
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"indexPath  = "
operator|+
name|indexPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"numShards  = "
operator|+
name|numShards
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"numMapTasks= "
operator|+
name|numMapTasks
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"confPath   = "
operator|+
name|confPath
argument_list|)
expr_stmt|;
name|Path
index|[]
name|inputPaths
init|=
literal|null
decl_stmt|;
name|Shard
index|[]
name|shards
init|=
literal|null
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|IndexUpdateConfiguration
name|iconf
init|=
operator|new
name|IndexUpdateConfiguration
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputPathsString
operator|!=
literal|null
condition|)
block|{
name|jobConf
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
name|inputPathsString
argument_list|)
expr_stmt|;
block|}
name|inputPaths
operator|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputPaths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|inputPaths
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|outputPath
operator|==
literal|null
condition|)
block|{
name|outputPath
operator|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputPaths
operator|==
literal|null
operator|||
name|outputPath
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"InputPaths and outputPath must be specified."
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardsString
operator|!=
literal|null
condition|)
block|{
name|iconf
operator|.
name|setIndexShards
argument_list|(
name|shardsString
argument_list|)
expr_stmt|;
block|}
name|shards
operator|=
name|Shard
operator|.
name|getIndexShards
argument_list|(
name|iconf
argument_list|)
expr_stmt|;
if|if
condition|(
name|shards
operator|!=
literal|null
operator|&&
name|shards
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|shards
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|indexPath
operator|==
literal|null
condition|)
block|{
name|indexPath
operator|=
name|getIndexPath
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numShards
operator|<=
literal|0
condition|)
block|{
name|numShards
operator|=
name|getNumShards
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shards
operator|==
literal|null
operator|&&
name|indexPath
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Either shards or indexPath must be specified."
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numMapTasks
operator|<=
literal|0
condition|)
block|{
name|numMapTasks
operator|=
name|jobConf
operator|.
name|getNumMapTasks
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// create shards and set their directories if necessary
if|if
condition|(
name|shards
operator|==
literal|null
condition|)
block|{
name|shards
operator|=
name|createShards
argument_list|(
name|indexPath
argument_list|,
name|numShards
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|long
name|startTime
init|=
name|now
argument_list|()
decl_stmt|;
try|try
block|{
name|IIndexUpdater
name|updater
init|=
operator|(
name|IIndexUpdater
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|iconf
operator|.
name|getIndexUpdaterClass
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sea.index.updater = "
operator|+
name|iconf
operator|.
name|getIndexUpdaterClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|updater
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|inputPaths
argument_list|,
name|outputPath
argument_list|,
name|numMapTasks
argument_list|,
name|shards
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Index update job is done"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|long
name|elapsedTime
init|=
name|now
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Elapsed time is  "
operator|+
operator|(
name|elapsedTime
operator|/
literal|1000
operator|)
operator|+
literal|"s"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Elapsed time is "
operator|+
operator|(
name|elapsedTime
operator|/
literal|1000
operator|)
operator|+
literal|"s"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

