begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_comment
comment|/**  * This class represents an indexing operation. The operation can be an insert,  * a delete or an update. If the operation is an insert or an update, a (new)  * document must be specified. If the operation is a delete or an update, a  * delete term must be specified.  */
end_comment

begin_class
DECL|class|DocumentAndOp
specifier|public
class|class
name|DocumentAndOp
implements|implements
name|Writable
block|{
comment|/**    * This class represents the type of an operation - an insert, a delete or    * an update.    */
DECL|class|Op
specifier|public
specifier|static
specifier|final
class|class
name|Op
block|{
DECL|field|INSERT
specifier|public
specifier|static
specifier|final
name|Op
name|INSERT
init|=
operator|new
name|Op
argument_list|(
literal|"INSERT"
argument_list|)
decl_stmt|;
DECL|field|DELETE
specifier|public
specifier|static
specifier|final
name|Op
name|DELETE
init|=
operator|new
name|Op
argument_list|(
literal|"DELETE"
argument_list|)
decl_stmt|;
DECL|field|UPDATE
specifier|public
specifier|static
specifier|final
name|Op
name|UPDATE
init|=
operator|new
name|Op
argument_list|(
literal|"UPDATE"
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|Op (String name)
specifier|private
name|Op
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
DECL|field|op
specifier|private
name|Op
name|op
decl_stmt|;
DECL|field|doc
specifier|private
name|Document
name|doc
decl_stmt|;
DECL|field|term
specifier|private
name|Term
name|term
decl_stmt|;
comment|/**    * Constructor for no operation.    */
DECL|method|DocumentAndOp ()
specifier|public
name|DocumentAndOp
parameter_list|()
block|{   }
comment|/**    * Constructor for an insert operation.    * @param op    * @param doc    */
DECL|method|DocumentAndOp (Op op, Document doc)
specifier|public
name|DocumentAndOp
parameter_list|(
name|Op
name|op
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
assert|assert
operator|(
name|op
operator|==
name|Op
operator|.
name|INSERT
operator|)
assert|;
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|term
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Constructor for a delete operation.    * @param op    * @param term    */
DECL|method|DocumentAndOp (Op op, Term term)
specifier|public
name|DocumentAndOp
parameter_list|(
name|Op
name|op
parameter_list|,
name|Term
name|term
parameter_list|)
block|{
assert|assert
operator|(
name|op
operator|==
name|Op
operator|.
name|DELETE
operator|)
assert|;
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|doc
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
comment|/**    * Constructor for an insert, a delete or an update operation.    * @param op    * @param doc    * @param term    */
DECL|method|DocumentAndOp (Op op, Document doc, Term term)
specifier|public
name|DocumentAndOp
parameter_list|(
name|Op
name|op
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Term
name|term
parameter_list|)
block|{
if|if
condition|(
name|op
operator|==
name|Op
operator|.
name|INSERT
condition|)
block|{
assert|assert
operator|(
name|doc
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|term
operator|==
literal|null
operator|)
assert|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|Op
operator|.
name|DELETE
condition|)
block|{
assert|assert
operator|(
name|doc
operator|==
literal|null
operator|)
assert|;
assert|assert
operator|(
name|term
operator|!=
literal|null
operator|)
assert|;
block|}
else|else
block|{
assert|assert
operator|(
name|op
operator|==
name|Op
operator|.
name|UPDATE
operator|)
assert|;
assert|assert
operator|(
name|doc
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|term
operator|!=
literal|null
operator|)
assert|;
block|}
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
comment|/**    * Set the instance to be an insert operation.    * @param doc    */
DECL|method|setInsert (Document doc)
specifier|public
name|void
name|setInsert
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|Op
operator|.
name|INSERT
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|term
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Set the instance to be a delete operation.    * @param term    */
DECL|method|setDelete (Term term)
specifier|public
name|void
name|setDelete
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|Op
operator|.
name|DELETE
expr_stmt|;
name|this
operator|.
name|doc
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
comment|/**    * Set the instance to be an update operation.    * @param doc    * @param term    */
DECL|method|setUpdate (Document doc, Term term)
specifier|public
name|void
name|setUpdate
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Term
name|term
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|Op
operator|.
name|UPDATE
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
comment|/**    * Get the type of operation.    * @return the type of the operation.    */
DECL|method|getOp ()
specifier|public
name|Op
name|getOp
parameter_list|()
block|{
return|return
name|op
return|;
block|}
comment|/**    * Get the document.    * @return the document    */
DECL|method|getDocument ()
specifier|public
name|Document
name|getDocument
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
comment|/**    * Get the term.    * @return the term    */
DECL|method|getTerm ()
specifier|public
name|Term
name|getTerm
parameter_list|()
block|{
return|return
name|term
return|;
block|}
comment|/* (non-Javadoc)    * @see java.lang.Object#toString()    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"[op="
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", doc="
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|", term="
argument_list|)
expr_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.io.Writable#write(java.io.DataOutput)    */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".write should never be called"
argument_list|)
throw|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.io.Writable#readFields(java.io.DataInput)    */
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".readFields should never be called"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

