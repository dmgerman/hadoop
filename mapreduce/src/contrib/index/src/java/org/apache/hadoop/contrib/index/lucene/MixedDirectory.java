begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.lucene
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NoLockFactory
import|;
end_import

begin_comment
comment|/**  * The initial version of an index is stored in a read-only FileSystem dir  * (FileSystemDirectory). Index files created by newer versions are written to  * a writable local FS dir (Lucene's FSDirectory). We should use the general  * FileSystemDirectory for the writable dir as well. But have to use Lucene's  * FSDirectory because currently Lucene does randome write and  * FileSystemDirectory only supports sequential write.  *   * Note: We may delete files from the read-only FileSystem dir because there  * can be some segment files from an uncommitted checkpoint. For the same  * reason, we may create files in the writable dir which already exist in the  * read-only dir and logically they overwrite the ones in the read-only dir.  */
end_comment

begin_class
DECL|class|MixedDirectory
class|class
name|MixedDirectory
extends|extends
name|Directory
block|{
DECL|field|readDir
specifier|private
specifier|final
name|Directory
name|readDir
decl_stmt|;
comment|// FileSystemDirectory
DECL|field|writeDir
specifier|private
specifier|final
name|Directory
name|writeDir
decl_stmt|;
comment|// Lucene's FSDirectory
comment|// take advantage of the fact that Lucene's FSDirectory.fileExists is faster
DECL|method|MixedDirectory (FileSystem readFs, Path readPath, FileSystem writeFs, Path writePath, Configuration conf)
specifier|public
name|MixedDirectory
parameter_list|(
name|FileSystem
name|readFs
parameter_list|,
name|Path
name|readPath
parameter_list|,
name|FileSystem
name|writeFs
parameter_list|,
name|Path
name|writePath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|readDir
operator|=
operator|new
name|FileSystemDirectory
argument_list|(
name|readFs
argument_list|,
name|readPath
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// check writeFS is a local FS?
name|writeDir
operator|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|writePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// ignore this one, throw the original one
block|}
throw|throw
name|e
throw|;
block|}
name|lockFactory
operator|=
operator|new
name|NoLockFactory
argument_list|()
expr_stmt|;
block|}
comment|// for debugging
DECL|method|MixedDirectory (Directory readDir, Directory writeDir)
name|MixedDirectory
parameter_list|(
name|Directory
name|readDir
parameter_list|,
name|Directory
name|writeDir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|readDir
operator|=
name|readDir
expr_stmt|;
name|this
operator|.
name|writeDir
operator|=
name|writeDir
expr_stmt|;
name|lockFactory
operator|=
operator|new
name|NoLockFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|list ()
specifier|public
name|String
index|[]
name|list
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|readFiles
init|=
name|readDir
operator|.
name|list
argument_list|()
decl_stmt|;
name|String
index|[]
name|writeFiles
init|=
name|writeDir
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|readFiles
operator|==
literal|null
operator|||
name|readFiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|writeFiles
return|;
block|}
elseif|else
if|if
condition|(
name|writeFiles
operator|==
literal|null
operator|||
name|writeFiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|readFiles
return|;
block|}
else|else
block|{
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|readFiles
operator|.
name|length
operator|+
name|writeFiles
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|readFiles
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|readFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|writeFiles
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|readFiles
operator|.
name|length
argument_list|,
name|writeFiles
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteFile (String name)
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writeDir
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writeDir
operator|.
name|deleteFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readDir
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|readDir
operator|.
name|deleteFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|fileExists (String name)
specifier|public
name|boolean
name|fileExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeDir
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
operator|||
name|readDir
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fileLength (String name)
specifier|public
name|long
name|fileLength
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writeDir
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|writeDir
operator|.
name|fileLength
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|readDir
operator|.
name|fileLength
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|fileModified (String name)
specifier|public
name|long
name|fileModified
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writeDir
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|writeDir
operator|.
name|fileModified
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|readDir
operator|.
name|fileModified
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|renameFile (String from, String to)
specifier|public
name|void
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|touchFile (String name)
specifier|public
name|void
name|touchFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writeDir
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writeDir
operator|.
name|touchFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readDir
operator|.
name|touchFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createOutput (String name)
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeDir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|openInput (String name)
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writeDir
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|writeDir
operator|.
name|openInput
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|readDir
operator|.
name|openInput
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|openInput (String name, int bufferSize)
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writeDir
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|writeDir
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|readDir
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|readDir
operator|!=
literal|null
condition|)
block|{
name|readDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|writeDir
operator|!=
literal|null
condition|)
block|{
name|writeDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"@"
operator|+
name|readDir
operator|+
literal|"&"
operator|+
name|writeDir
return|;
block|}
block|}
end_class

end_unit

