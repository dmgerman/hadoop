begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|example
operator|.
name|HashingDistributionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|example
operator|.
name|LineDocInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|example
operator|.
name|LineDocLocalAnalysis
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_comment
comment|/**  * This class provides the getters and the setters to a number of parameters.  * Most of the parameters are related to the index update and the rest are  * from the existing Map/Reduce parameters.    */
end_comment

begin_class
DECL|class|IndexUpdateConfiguration
specifier|public
class|class
name|IndexUpdateConfiguration
block|{
DECL|field|conf
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Constructor    * @param conf    */
DECL|method|IndexUpdateConfiguration (Configuration conf)
specifier|public
name|IndexUpdateConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Get the underlying configuration object.    * @return the configuration    */
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|//
comment|// existing map/reduce properties
comment|//
comment|// public int getIOFileBufferSize() {
comment|// return getInt("io.file.buffer.size", 4096);
comment|// }
comment|/**    * Get the IO sort space in MB.    * @return the IO sort space in MB    */
DECL|method|getIOSortMB ()
specifier|public
name|int
name|getIOSortMB
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|,
literal|100
argument_list|)
return|;
block|}
comment|/**    * Set the IO sort space in MB.    * @param mb  the IO sort space in MB    */
DECL|method|setIOSortMB (int mb)
specifier|public
name|void
name|setIOSortMB
parameter_list|(
name|int
name|mb
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|IO_SORT_MB
argument_list|,
name|mb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the Map/Reduce temp directory.    * @return the Map/Reduce temp directory    */
DECL|method|getMapredTempDir ()
specifier|public
name|String
name|getMapredTempDir
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|MRConfig
operator|.
name|TEMP_DIR
argument_list|)
return|;
block|}
comment|//
comment|// properties for index update
comment|//
comment|/**    * Get the distribution policy class.    * @return the distribution policy class    */
DECL|method|getDistributionPolicyClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|IDistributionPolicy
argument_list|>
name|getDistributionPolicyClass
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getClass
argument_list|(
literal|"sea.distribution.policy"
argument_list|,
name|HashingDistributionPolicy
operator|.
name|class
argument_list|,
name|IDistributionPolicy
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Set the distribution policy class.    * @param theClass  the distribution policy class    */
DECL|method|setDistributionPolicyClass ( Class<? extends IDistributionPolicy> theClass)
specifier|public
name|void
name|setDistributionPolicyClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|IDistributionPolicy
argument_list|>
name|theClass
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"sea.distribution.policy"
argument_list|,
name|theClass
argument_list|,
name|IDistributionPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the analyzer class.    * @return the analyzer class    */
DECL|method|getDocumentAnalyzerClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Analyzer
argument_list|>
name|getDocumentAnalyzerClass
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getClass
argument_list|(
literal|"sea.document.analyzer"
argument_list|,
name|StandardAnalyzer
operator|.
name|class
argument_list|,
name|Analyzer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Set the analyzer class.    * @param theClass  the analyzer class    */
DECL|method|setDocumentAnalyzerClass (Class<? extends Analyzer> theClass)
specifier|public
name|void
name|setDocumentAnalyzerClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Analyzer
argument_list|>
name|theClass
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"sea.document.analyzer"
argument_list|,
name|theClass
argument_list|,
name|Analyzer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the index input format class.    * @return the index input format class    */
DECL|method|getIndexInputFormatClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getIndexInputFormatClass
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getClass
argument_list|(
literal|"sea.input.format"
argument_list|,
name|LineDocInputFormat
operator|.
name|class
argument_list|,
name|InputFormat
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Set the index input format class.    * @param theClass  the index input format class    */
DECL|method|setIndexInputFormatClass (Class<? extends InputFormat> theClass)
specifier|public
name|void
name|setIndexInputFormatClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|theClass
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"sea.input.format"
argument_list|,
name|theClass
argument_list|,
name|InputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the index updater class.    * @return the index updater class    */
DECL|method|getIndexUpdaterClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|IIndexUpdater
argument_list|>
name|getIndexUpdaterClass
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getClass
argument_list|(
literal|"sea.index.updater"
argument_list|,
name|IndexUpdater
operator|.
name|class
argument_list|,
name|IIndexUpdater
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Set the index updater class.    * @param theClass  the index updater class    */
DECL|method|setIndexUpdaterClass (Class<? extends IIndexUpdater> theClass)
specifier|public
name|void
name|setIndexUpdaterClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|IIndexUpdater
argument_list|>
name|theClass
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"sea.index.updater"
argument_list|,
name|theClass
argument_list|,
name|IIndexUpdater
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the local analysis class.    * @return the local analysis class    */
DECL|method|getLocalAnalysisClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|ILocalAnalysis
argument_list|>
name|getLocalAnalysisClass
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getClass
argument_list|(
literal|"sea.local.analysis"
argument_list|,
name|LineDocLocalAnalysis
operator|.
name|class
argument_list|,
name|ILocalAnalysis
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Set the local analysis class.    * @param theClass  the local analysis class    */
DECL|method|setLocalAnalysisClass (Class<? extends ILocalAnalysis> theClass)
specifier|public
name|void
name|setLocalAnalysisClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ILocalAnalysis
argument_list|>
name|theClass
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"sea.local.analysis"
argument_list|,
name|theClass
argument_list|,
name|ILocalAnalysis
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the string representation of a number of shards.    * @return the string representation of a number of shards    */
DECL|method|getIndexShards ()
specifier|public
name|String
name|getIndexShards
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
literal|"sea.index.shards"
argument_list|)
return|;
block|}
comment|/**    * Set the string representation of a number of shards.    * @param shards  the string representation of a number of shards    */
DECL|method|setIndexShards (String shards)
specifier|public
name|void
name|setIndexShards
parameter_list|(
name|String
name|shards
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"sea.index.shards"
argument_list|,
name|shards
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the max field length for a Lucene instance.    * @return the max field length for a Lucene instance    */
DECL|method|getIndexMaxFieldLength ()
specifier|public
name|int
name|getIndexMaxFieldLength
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
literal|"sea.max.field.length"
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Set the max field length for a Lucene instance.    * @param maxFieldLength  the max field length for a Lucene instance    */
DECL|method|setIndexMaxFieldLength (int maxFieldLength)
specifier|public
name|void
name|setIndexMaxFieldLength
parameter_list|(
name|int
name|maxFieldLength
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"sea.max.field.length"
argument_list|,
name|maxFieldLength
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the max number of segments for a Lucene instance.    * @return the max number of segments for a Lucene instance    */
DECL|method|getIndexMaxNumSegments ()
specifier|public
name|int
name|getIndexMaxNumSegments
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
literal|"sea.max.num.segments"
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Set the max number of segments for a Lucene instance.    * @param maxNumSegments  the max number of segments for a Lucene instance    */
DECL|method|setIndexMaxNumSegments (int maxNumSegments)
specifier|public
name|void
name|setIndexMaxNumSegments
parameter_list|(
name|int
name|maxNumSegments
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"sea.max.num.segments"
argument_list|,
name|maxNumSegments
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check whether to use the compound file format for a Lucene instance.    * @return true if using the compound file format for a Lucene instance    */
DECL|method|getIndexUseCompoundFile ()
specifier|public
name|boolean
name|getIndexUseCompoundFile
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"sea.use.compound.file"
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Set whether use the compound file format for a Lucene instance.    * @param useCompoundFile  whether to use the compound file format    */
DECL|method|setIndexUseCompoundFile (boolean useCompoundFile)
specifier|public
name|void
name|setIndexUseCompoundFile
parameter_list|(
name|boolean
name|useCompoundFile
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"sea.use.compound.file"
argument_list|,
name|useCompoundFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the max ram index size in bytes. The default is 50M.    * @return the max ram index size in bytes    */
DECL|method|getMaxRAMSizeInBytes ()
specifier|public
name|long
name|getMaxRAMSizeInBytes
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
literal|"sea.max.ramsize.bytes"
argument_list|,
literal|50L
operator|<<
literal|20
argument_list|)
return|;
block|}
comment|/**    * Set the max ram index size in bytes.    * @param b  the max ram index size in bytes    */
DECL|method|setMaxRAMSizeInBytes (long b)
specifier|public
name|void
name|setMaxRAMSizeInBytes
parameter_list|(
name|long
name|b
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
literal|"sea.max.ramsize.bytes"
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

