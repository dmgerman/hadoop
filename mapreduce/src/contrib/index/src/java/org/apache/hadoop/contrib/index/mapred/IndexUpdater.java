begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|lucene
operator|.
name|FileSystemDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**  * An implementation of an index updater interface which creates a Map/Reduce  * job configuration and run the Map/Reduce job to analyze documents and update  * Lucene instances in parallel.  */
end_comment

begin_class
DECL|class|IndexUpdater
specifier|public
class|class
name|IndexUpdater
implements|implements
name|IIndexUpdater
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IndexUpdater
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|IndexUpdater ()
specifier|public
name|IndexUpdater
parameter_list|()
block|{   }
comment|/* (non-Javadoc)    * @see org.apache.hadoop.contrib.index.mapred.IIndexUpdater#run(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path[], org.apache.hadoop.fs.Path, int, org.apache.hadoop.contrib.index.mapred.Shard[])    */
DECL|method|run (Configuration conf, Path[] inputPaths, Path outputPath, int numMapTasks, Shard[] shards)
specifier|public
name|void
name|run
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
index|[]
name|inputPaths
parameter_list|,
name|Path
name|outputPath
parameter_list|,
name|int
name|numMapTasks
parameter_list|,
name|Shard
index|[]
name|shards
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|jobConf
init|=
name|createJob
argument_list|(
name|conf
argument_list|,
name|inputPaths
argument_list|,
name|outputPath
argument_list|,
name|numMapTasks
argument_list|,
name|shards
argument_list|)
decl_stmt|;
name|JobClient
operator|.
name|runJob
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
DECL|method|createJob (Configuration conf, Path[] inputPaths, Path outputPath, int numMapTasks, Shard[] shards)
name|JobConf
name|createJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
index|[]
name|inputPaths
parameter_list|,
name|Path
name|outputPath
parameter_list|,
name|int
name|numMapTasks
parameter_list|,
name|Shard
index|[]
name|shards
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set the starting generation for each shard
comment|// when a reduce task fails, a new reduce task
comment|// has to know where to re-start
name|setShardGeneration
argument_list|(
name|conf
argument_list|,
name|shards
argument_list|)
expr_stmt|;
comment|// iconf.set sets properties in conf
name|IndexUpdateConfiguration
name|iconf
init|=
operator|new
name|IndexUpdateConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Shard
operator|.
name|setIndexShards
argument_list|(
name|iconf
argument_list|,
name|shards
argument_list|)
expr_stmt|;
comment|// MapTask.MapOutputBuffer uses JobContext.IO_SORT_MB to decide its max buffer size
comment|// (max buffer size = 1/2 * JobContext.IO_SORT_MB).
comment|// Here we half-en JobContext.IO_SORT_MB because we use the other half memory to
comment|// build an intermediate form/index in Combiner.
name|iconf
operator|.
name|setIOSortMB
argument_list|(
name|iconf
operator|.
name|getIOSortMB
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// create the job configuration
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|IndexUpdater
operator|.
name|class
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setJobName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// provided by application
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|jobConf
argument_list|,
name|inputPaths
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobConf
argument_list|,
name|outputPath
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
name|numMapTasks
argument_list|)
expr_stmt|;
comment|// already set shards
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
name|shards
operator|.
name|length
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setInputFormat
argument_list|(
name|iconf
operator|.
name|getIndexInputFormatClass
argument_list|()
argument_list|)
expr_stmt|;
name|Path
index|[]
name|inputs
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|inputs
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|inputs
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"mapred.input.dir = "
operator|+
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"mapreduce.output.fileoutputformat.outputdir = "
operator|+
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|jobConf
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"mapreduce.job.maps = "
operator|+
name|jobConf
operator|.
name|getNumMapTasks
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"mapreduce.job.reduces = "
operator|+
name|jobConf
operator|.
name|getNumReduceTasks
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|shards
operator|.
name|length
operator|+
literal|" shards = "
operator|+
name|iconf
operator|.
name|getIndexShards
argument_list|()
argument_list|)
expr_stmt|;
comment|// better if we don't create the input format instance
name|LOG
operator|.
name|info
argument_list|(
literal|"mapred.input.format.class = "
operator|+
name|jobConf
operator|.
name|getInputFormat
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// set by the system
name|jobConf
operator|.
name|setMapOutputKeyClass
argument_list|(
name|IndexUpdateMapper
operator|.
name|getMapOutputKeyClass
argument_list|()
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMapOutputValueClass
argument_list|(
name|IndexUpdateMapper
operator|.
name|getMapOutputValueClass
argument_list|()
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputKeyClass
argument_list|(
name|IndexUpdateReducer
operator|.
name|getOutputKeyClass
argument_list|()
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputValueClass
argument_list|(
name|IndexUpdateReducer
operator|.
name|getOutputValueClass
argument_list|()
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setMapperClass
argument_list|(
name|IndexUpdateMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setPartitionerClass
argument_list|(
name|IndexUpdatePartitioner
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setCombinerClass
argument_list|(
name|IndexUpdateCombiner
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setReducerClass
argument_list|(
name|IndexUpdateReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setOutputFormat
argument_list|(
name|IndexUpdateOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|jobConf
return|;
block|}
DECL|method|setShardGeneration (Configuration conf, Shard[] shards)
name|void
name|setShardGeneration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Shard
index|[]
name|shards
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shards
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|shards
index|[
name|i
index|]
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|generation
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|FileSystemDirectory
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dir
operator|=
operator|new
name|FileSystemDirectory
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|generation
operator|=
name|LuceneUtil
operator|.
name|getCurrentSegmentGeneration
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|generation
operator|!=
name|shards
index|[
name|i
index|]
operator|.
name|getGeneration
argument_list|()
condition|)
block|{
comment|// set the starting generation for the shard
name|shards
index|[
name|i
index|]
operator|=
operator|new
name|Shard
argument_list|(
name|shards
index|[
name|i
index|]
operator|.
name|getVersion
argument_list|()
argument_list|,
name|shards
index|[
name|i
index|]
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|generation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

