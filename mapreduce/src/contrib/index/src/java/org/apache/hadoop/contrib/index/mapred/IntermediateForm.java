begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|lucene
operator|.
name|RAMDirectoryUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|KeepOnlyLastCommitDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_comment
comment|/**  * An intermediate form for one or more parsed Lucene documents and/or  * delete terms. It actually uses Lucene file format as the format for  * the intermediate form by using RAM dir files.  *   * Note: If process(*) is ever called, closeWriter() should be called.  * Otherwise, no need to call closeWriter().  */
end_comment

begin_class
DECL|class|IntermediateForm
specifier|public
class|class
name|IntermediateForm
implements|implements
name|Writable
block|{
DECL|field|iconf
specifier|private
name|IndexUpdateConfiguration
name|iconf
init|=
literal|null
decl_stmt|;
DECL|field|deleteList
specifier|private
specifier|final
name|Collection
argument_list|<
name|Term
argument_list|>
name|deleteList
decl_stmt|;
DECL|field|dir
specifier|private
name|RAMDirectory
name|dir
decl_stmt|;
DECL|field|writer
specifier|private
name|IndexWriter
name|writer
decl_stmt|;
DECL|field|numDocs
specifier|private
name|int
name|numDocs
decl_stmt|;
comment|/**    * Constructor    * @throws IOException    */
DECL|method|IntermediateForm ()
specifier|public
name|IntermediateForm
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteList
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|Term
argument_list|>
argument_list|()
expr_stmt|;
name|dir
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
name|writer
operator|=
literal|null
expr_stmt|;
name|numDocs
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Configure using an index update configuration.    * @param iconf  the index update configuration    */
DECL|method|configure (IndexUpdateConfiguration iconf)
specifier|public
name|void
name|configure
parameter_list|(
name|IndexUpdateConfiguration
name|iconf
parameter_list|)
block|{
name|this
operator|.
name|iconf
operator|=
name|iconf
expr_stmt|;
block|}
comment|/**    * Get the ram directory of the intermediate form.    * @return the ram directory    */
DECL|method|getDirectory ()
specifier|public
name|Directory
name|getDirectory
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
comment|/**    * Get an iterator for the delete terms in the intermediate form.    * @return an iterator for the delete terms    */
DECL|method|deleteTermIterator ()
specifier|public
name|Iterator
argument_list|<
name|Term
argument_list|>
name|deleteTermIterator
parameter_list|()
block|{
return|return
name|deleteList
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**    * This method is used by the index update mapper and process a document    * operation into the current intermediate form.    * @param doc  input document operation    * @param analyzer  the analyzer    * @throws IOException    */
DECL|method|process (DocumentAndOp doc, Analyzer analyzer)
specifier|public
name|void
name|process
parameter_list|(
name|DocumentAndOp
name|doc
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doc
operator|.
name|getOp
argument_list|()
operator|==
name|DocumentAndOp
operator|.
name|Op
operator|.
name|DELETE
operator|||
name|doc
operator|.
name|getOp
argument_list|()
operator|==
name|DocumentAndOp
operator|.
name|Op
operator|.
name|UPDATE
condition|)
block|{
name|deleteList
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|.
name|getOp
argument_list|()
operator|==
name|DocumentAndOp
operator|.
name|Op
operator|.
name|INSERT
operator|||
name|doc
operator|.
name|getOp
argument_list|()
operator|==
name|DocumentAndOp
operator|.
name|Op
operator|.
name|UPDATE
condition|)
block|{
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
comment|// analyzer is null because we specify an analyzer with addDocument
name|writer
operator|=
name|createWriter
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
operator|.
name|getDocument
argument_list|()
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|numDocs
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * This method is used by the index update combiner and process an    * intermediate form into the current intermediate form. More specifically,    * the input intermediate forms are a single-document ram index and/or a    * single delete term.    * @param form  the input intermediate form    * @throws IOException    */
DECL|method|process (IntermediateForm form)
specifier|public
name|void
name|process
parameter_list|(
name|IntermediateForm
name|form
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|form
operator|.
name|deleteList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|deleteList
operator|.
name|addAll
argument_list|(
name|form
operator|.
name|deleteList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|form
operator|.
name|dir
operator|.
name|sizeInBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|writer
operator|=
name|createWriter
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|addIndexesNoOptimize
argument_list|(
operator|new
name|Directory
index|[]
block|{
name|form
operator|.
name|dir
block|}
argument_list|)
expr_stmt|;
name|numDocs
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Close the Lucene index writer associated with the intermediate form,    * if created. Do not close the ram directory. In fact, there is no need    * to close a ram directory.    * @throws IOException    */
DECL|method|closeWriter ()
specifier|public
name|void
name|closeWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * The total size of files in the directory and ram used by the index writer.    * It does not include memory used by the delete list.    * @return the total size in bytes    */
DECL|method|totalSizeInBytes ()
specifier|public
name|long
name|totalSizeInBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|size
init|=
name|dir
operator|.
name|sizeInBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|size
operator|+=
name|writer
operator|.
name|ramSizeInBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/* (non-Javadoc)    * @see java.lang.Object#toString()    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"[numDocs="
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", numDeletes="
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|deleteList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Term
argument_list|>
name|iter
init|=
name|deleteTermIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createWriter ()
specifier|private
name|IndexWriter
name|createWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iconf
operator|!=
literal|null
condition|)
block|{
name|int
name|maxFieldLength
init|=
name|iconf
operator|.
name|getIndexMaxFieldLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxFieldLength
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|setMaxFieldLength
argument_list|(
name|maxFieldLength
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|writer
return|;
block|}
DECL|method|resetForm ()
specifier|private
name|void
name|resetForm
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteList
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|sizeInBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// it's ok if we don't close a ram directory
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// an alternative is to delete all the files and reuse the ram directory
name|dir
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
block|}
assert|assert
operator|(
name|writer
operator|==
literal|null
operator|)
assert|;
name|numDocs
operator|=
literal|0
expr_stmt|;
block|}
comment|// ///////////////////////////////////
comment|// Writable
comment|// ///////////////////////////////////
comment|/* (non-Javadoc)    * @see org.apache.hadoop.io.Writable#write(java.io.DataOutput)    */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|deleteList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Term
name|term
range|:
name|deleteList
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|term
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|term
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|files
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
name|RAMDirectoryUtil
operator|.
name|writeRAMFiles
argument_list|(
name|out
argument_list|,
name|dir
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.io.Writable#readFields(java.io.DataInput)    */
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|resetForm
argument_list|()
expr_stmt|;
name|int
name|numDeleteTerms
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDeleteTerms
condition|;
name|i
operator|++
control|)
block|{
name|String
name|field
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|deleteList
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RAMDirectoryUtil
operator|.
name|readRAMFiles
argument_list|(
name|in
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

