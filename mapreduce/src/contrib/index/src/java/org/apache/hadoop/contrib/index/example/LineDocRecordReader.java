begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.example
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
operator|.
name|DocumentAndOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
operator|.
name|DocumentID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_comment
comment|/**  * A simple RecordReader for LineDoc for plain text files where each line is a  * doc. Each line is as follows: documentID<SPACE>op<SPACE>content<EOF>,  * where op can be "i", "ins" or "insert" for insert, "d", "del" or "delete"  * for delete, or "u", "upd" or "update" for update.  */
end_comment

begin_class
DECL|class|LineDocRecordReader
specifier|public
class|class
name|LineDocRecordReader
implements|implements
name|RecordReader
argument_list|<
name|DocumentID
argument_list|,
name|LineDocTextAndOp
argument_list|>
block|{
DECL|field|SPACE
specifier|private
specifier|static
specifier|final
name|char
name|SPACE
init|=
literal|' '
decl_stmt|;
DECL|field|EOL
specifier|private
specifier|static
specifier|final
name|char
name|EOL
init|=
literal|'\n'
decl_stmt|;
DECL|field|start
specifier|private
name|long
name|start
decl_stmt|;
DECL|field|pos
specifier|private
name|long
name|pos
decl_stmt|;
DECL|field|end
specifier|private
name|long
name|end
decl_stmt|;
DECL|field|in
specifier|private
name|BufferedInputStream
name|in
decl_stmt|;
DECL|field|buffer
specifier|private
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|256
argument_list|)
decl_stmt|;
comment|/**    * Provide a bridge to get the bytes from the ByteArrayOutputStream without    * creating a new byte array.    */
DECL|class|TextStuffer
specifier|private
specifier|static
class|class
name|TextStuffer
extends|extends
name|OutputStream
block|{
DECL|field|target
specifier|public
name|Text
name|target
decl_stmt|;
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"write(byte) not supported"
argument_list|)
throw|;
block|}
DECL|method|write (byte[] data, int offset, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|target
operator|.
name|set
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|bridge
specifier|private
name|TextStuffer
name|bridge
init|=
operator|new
name|TextStuffer
argument_list|()
decl_stmt|;
comment|/**    * Constructor    * @param job    * @param split      * @throws IOException    */
DECL|method|LineDocRecordReader (Configuration job, FileSplit split)
specifier|public
name|LineDocRecordReader
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|FileSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|split
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|long
name|end
init|=
name|start
operator|+
name|split
operator|.
name|getLength
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|file
init|=
name|split
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// open the file and seek to the start of the split
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fileIn
init|=
name|fs
operator|.
name|open
argument_list|(
name|split
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|fileIn
decl_stmt|;
name|boolean
name|skipFirstLine
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|0
condition|)
block|{
name|skipFirstLine
operator|=
literal|true
expr_stmt|;
comment|// wait till BufferedInputStream to skip
operator|--
name|start
expr_stmt|;
name|fileIn
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|in
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipFirstLine
condition|)
block|{
comment|// skip first line and re-establish "start".
name|start
operator|+=
name|LineDocRecordReader
operator|.
name|readData
argument_list|(
name|this
operator|.
name|in
argument_list|,
literal|null
argument_list|,
name|EOL
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.mapred.RecordReader#close()    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.mapred.RecordReader#createKey()    */
DECL|method|createKey ()
specifier|public
name|DocumentID
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|DocumentID
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.mapred.RecordReader#createValue()    */
DECL|method|createValue ()
specifier|public
name|LineDocTextAndOp
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|LineDocTextAndOp
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.mapred.RecordReader#getPos()    */
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.mapred.RecordReader#getProgress()    */
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|start
operator|==
name|end
condition|)
block|{
return|return
literal|0.0f
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
literal|1.0f
argument_list|,
operator|(
name|pos
operator|-
name|start
operator|)
operator|/
call|(
name|float
call|)
argument_list|(
name|end
operator|-
name|start
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.mapred.RecordReader#next(java.lang.Object, java.lang.Object)    */
DECL|method|next (DocumentID key, LineDocTextAndOp value)
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|DocumentID
name|key
parameter_list|,
name|LineDocTextAndOp
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|>=
name|end
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// key is document id, which are bytes until first space
if|if
condition|(
operator|!
name|readInto
argument_list|(
name|key
operator|.
name|getText
argument_list|()
argument_list|,
name|SPACE
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// read operation: i/d/u, or ins/del/upd, or insert/delete/update
name|Text
name|opText
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|readInto
argument_list|(
name|opText
argument_list|,
name|SPACE
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|opStr
init|=
name|opText
operator|.
name|toString
argument_list|()
decl_stmt|;
name|DocumentAndOp
operator|.
name|Op
name|op
decl_stmt|;
if|if
condition|(
name|opStr
operator|.
name|equals
argument_list|(
literal|"i"
argument_list|)
operator|||
name|opStr
operator|.
name|equals
argument_list|(
literal|"ins"
argument_list|)
operator|||
name|opStr
operator|.
name|equals
argument_list|(
literal|"insert"
argument_list|)
condition|)
block|{
name|op
operator|=
name|DocumentAndOp
operator|.
name|Op
operator|.
name|INSERT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opStr
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
operator|||
name|opStr
operator|.
name|equals
argument_list|(
literal|"del"
argument_list|)
operator|||
name|opStr
operator|.
name|equals
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
name|op
operator|=
name|DocumentAndOp
operator|.
name|Op
operator|.
name|DELETE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opStr
operator|.
name|equals
argument_list|(
literal|"u"
argument_list|)
operator|||
name|opStr
operator|.
name|equals
argument_list|(
literal|"upd"
argument_list|)
operator|||
name|opStr
operator|.
name|equals
argument_list|(
literal|"update"
argument_list|)
condition|)
block|{
name|op
operator|=
name|DocumentAndOp
operator|.
name|Op
operator|.
name|UPDATE
expr_stmt|;
block|}
else|else
block|{
comment|// default is insert
name|op
operator|=
name|DocumentAndOp
operator|.
name|Op
operator|.
name|INSERT
expr_stmt|;
block|}
name|value
operator|.
name|setOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
name|DocumentAndOp
operator|.
name|Op
operator|.
name|DELETE
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// read rest of the line
return|return
name|readInto
argument_list|(
name|value
operator|.
name|getText
argument_list|()
argument_list|,
name|EOL
argument_list|)
return|;
block|}
block|}
DECL|method|readInto (Text text, char delimiter)
specifier|private
name|boolean
name|readInto
parameter_list|(
name|Text
name|text
parameter_list|,
name|char
name|delimiter
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|long
name|bytesRead
init|=
name|readData
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|,
name|delimiter
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|pos
operator|+=
name|bytesRead
expr_stmt|;
name|bridge
operator|.
name|target
operator|=
name|text
expr_stmt|;
name|buffer
operator|.
name|writeTo
argument_list|(
name|bridge
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|readData (InputStream in, OutputStream out, char delimiter)
specifier|private
specifier|static
name|long
name|readData
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|char
name|delimiter
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bytes
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|b
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|bytes
operator|+=
literal|1
expr_stmt|;
name|byte
name|c
init|=
operator|(
name|byte
operator|)
name|b
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|EOL
operator|||
name|c
operator|==
name|delimiter
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|c
operator|==
literal|'\r'
condition|)
block|{
name|in
operator|.
name|mark
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|byte
name|nextC
init|=
operator|(
name|byte
operator|)
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextC
operator|!=
name|EOL
operator|||
name|c
operator|==
name|delimiter
condition|)
block|{
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|+=
literal|1
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bytes
return|;
block|}
block|}
end_class

end_unit

