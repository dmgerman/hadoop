begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.lucene
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_comment
comment|/**  * This class copies some methods from Lucene's SegmentInfos since that class  * is not public.  */
end_comment

begin_class
DECL|class|LuceneUtil
specifier|public
specifier|final
class|class
name|LuceneUtil
block|{
DECL|class|IndexFileNames
specifier|static
specifier|final
class|class
name|IndexFileNames
block|{
comment|/** Name of the index segment file */
DECL|field|SEGMENTS
specifier|static
specifier|final
name|String
name|SEGMENTS
init|=
literal|"segments"
decl_stmt|;
comment|/** Name of the generation reference file name */
DECL|field|SEGMENTS_GEN
specifier|static
specifier|final
name|String
name|SEGMENTS_GEN
init|=
literal|"segments.gen"
decl_stmt|;
block|}
comment|/**    * Check if the file is a segments_N file    * @param name    * @return true if the file is a segments_N file    */
DECL|method|isSegmentsFile (String name)
specifier|public
specifier|static
name|boolean
name|isSegmentsFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
return|;
block|}
comment|/**    * Check if the file is the segments.gen file    * @param name    * @return true if the file is the segments.gen file    */
DECL|method|isSegmentsGenFile (String name)
specifier|public
specifier|static
name|boolean
name|isSegmentsGenFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
return|;
block|}
comment|/**    * Get the generation (N) of the current segments_N file in the directory.    *     * @param directory -- directory to search for the latest segments_N file    */
DECL|method|getCurrentSegmentGeneration (Directory directory)
specifier|public
specifier|static
name|long
name|getCurrentSegmentGeneration
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|files
init|=
name|directory
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot read directory "
operator|+
name|directory
operator|+
literal|": list() returned null"
argument_list|)
throw|;
return|return
name|getCurrentSegmentGeneration
argument_list|(
name|files
argument_list|)
return|;
block|}
comment|/**    * Get the generation (N) of the current segments_N file from a list of    * files.    *     * @param files -- array of file names to check    */
DECL|method|getCurrentSegmentGeneration (String[] files)
specifier|public
specifier|static
name|long
name|getCurrentSegmentGeneration
parameter_list|(
name|String
index|[]
name|files
parameter_list|)
block|{
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|long
name|max
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
operator|&&
operator|!
name|file
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
condition|)
block|{
name|long
name|gen
init|=
name|generationFromSegmentsFileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|gen
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|gen
expr_stmt|;
block|}
block|}
block|}
return|return
name|max
return|;
block|}
comment|/**    * Parse the generation off the segments file name and return it.    */
DECL|method|generationFromSegmentsFileName (String fileName)
specifier|public
specifier|static
name|long
name|generationFromSegmentsFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|fileName
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|IndexFileNames
operator|.
name|SEGMENTS
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"fileName \""
operator|+
name|fileName
operator|+
literal|"\" is not a segments file"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

