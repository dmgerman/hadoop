begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.lucene
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BufferedIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BufferedIndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import

begin_comment
comment|/**  * This class implements a Lucene Directory on top of a general FileSystem.  * Currently it does not support locking.  */
end_comment

begin_class
DECL|class|FileSystemDirectory
specifier|public
class|class
name|FileSystemDirectory
extends|extends
name|Directory
block|{
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|directory
specifier|private
specifier|final
name|Path
name|directory
decl_stmt|;
DECL|field|ioFileBufferSize
specifier|private
specifier|final
name|int
name|ioFileBufferSize
decl_stmt|;
comment|/**    * Constructor    * @param fs    * @param directory    * @param create    * @param conf    * @throws IOException    */
DECL|method|FileSystemDirectory (FileSystem fs, Path directory, boolean create, Configuration conf)
specifier|public
name|FileSystemDirectory
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|directory
parameter_list|,
name|boolean
name|create
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|ioFileBufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
if|if
condition|(
name|create
condition|)
block|{
name|create
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isDir
init|=
literal|false
decl_stmt|;
try|try
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|directory
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|isDir
operator|=
name|status
operator|.
name|isDirectory
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// file does not exist, isDir already set to false
block|}
if|if
condition|(
operator|!
name|isDir
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|directory
operator|+
literal|" is not a directory"
argument_list|)
throw|;
block|}
block|}
DECL|method|create ()
specifier|private
name|void
name|create
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|directory
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isDir
init|=
literal|false
decl_stmt|;
try|try
block|{
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|directory
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|isDir
operator|=
name|status
operator|.
name|isDirectory
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// file does not exist, isDir already set to false
block|}
if|if
condition|(
operator|!
name|isDir
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|directory
operator|+
literal|" is not a directory"
argument_list|)
throw|;
block|}
comment|// clear old index files
name|FileStatus
index|[]
name|fileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|directory
argument_list|,
name|LuceneIndexFileNameFilter
operator|.
name|getFilter
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|fileStatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot delete index file "
operator|+
name|fileStatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#list()    */
DECL|method|list ()
specifier|public
name|String
index|[]
name|list
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|fileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|directory
argument_list|,
name|LuceneIndexFileNameFilter
operator|.
name|getFilter
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|fileStatus
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|fileStatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#fileExists(java.lang.String)    */
DECL|method|fileExists (String name)
specifier|public
name|boolean
name|fileExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#fileModified(java.lang.String)    */
DECL|method|fileModified (String name)
specifier|public
name|long
name|fileModified
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#touchFile(java.lang.String)    */
DECL|method|touchFile (String name)
specifier|public
name|void
name|touchFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#fileLength(java.lang.String)    */
DECL|method|fileLength (String name)
specifier|public
name|long
name|fileLength
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|getLen
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#deleteFile(java.lang.String)    */
DECL|method|deleteFile (String name)
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot delete index file "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#renameFile(java.lang.String, java.lang.String)    */
DECL|method|renameFile (String from, String to)
specifier|public
name|void
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
name|from
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
name|to
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#createOutput(java.lang.String)    */
DECL|method|createOutput (String name)
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
operator|&&
operator|!
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// delete the existing one if applicable
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot overwrite index file "
operator|+
name|file
argument_list|)
throw|;
block|}
return|return
operator|new
name|FileSystemIndexOutput
argument_list|(
name|file
argument_list|,
name|ioFileBufferSize
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#openInput(java.lang.String)    */
DECL|method|openInput (String name)
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|openInput
argument_list|(
name|name
argument_list|,
name|ioFileBufferSize
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#openInput(java.lang.String, int)    */
DECL|method|openInput (String name, int bufferSize)
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileSystemIndexInput
argument_list|(
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
name|name
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#makeLock(java.lang.String)    */
DECL|method|makeLock (final String name)
specifier|public
name|Lock
name|makeLock
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|Lock
argument_list|()
block|{
specifier|public
name|boolean
name|obtain
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|release
parameter_list|()
block|{       }
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Lock@"
operator|+
operator|new
name|Path
argument_list|(
name|directory
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.store.Directory#close()    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do not close the file system
block|}
comment|/* (non-Javadoc)    * @see java.lang.Object#toString()    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"@"
operator|+
name|directory
return|;
block|}
DECL|class|FileSystemIndexInput
specifier|private
class|class
name|FileSystemIndexInput
extends|extends
name|BufferedIndexInput
block|{
comment|// shared by clones
DECL|class|Descriptor
specifier|private
class|class
name|Descriptor
block|{
DECL|field|in
specifier|public
specifier|final
name|FSDataInputStream
name|in
decl_stmt|;
DECL|field|position
specifier|public
name|long
name|position
decl_stmt|;
comment|// cache of in.getPos()
DECL|method|Descriptor (Path file, int ioFileBufferSize)
specifier|public
name|Descriptor
parameter_list|(
name|Path
name|file
parameter_list|,
name|int
name|ioFileBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
name|file
argument_list|,
name|ioFileBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|filePath
specifier|private
specifier|final
name|Path
name|filePath
decl_stmt|;
comment|// for debugging
DECL|field|descriptor
specifier|private
specifier|final
name|Descriptor
name|descriptor
decl_stmt|;
DECL|field|length
specifier|private
specifier|final
name|long
name|length
decl_stmt|;
DECL|field|isOpen
specifier|private
name|boolean
name|isOpen
decl_stmt|;
DECL|field|isClone
specifier|private
name|boolean
name|isClone
decl_stmt|;
DECL|method|FileSystemIndexInput (Path path, int ioFileBufferSize)
specifier|public
name|FileSystemIndexInput
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|ioFileBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|filePath
operator|=
name|path
expr_stmt|;
name|descriptor
operator|=
operator|new
name|Descriptor
argument_list|(
name|path
argument_list|,
name|ioFileBufferSize
argument_list|)
expr_stmt|;
name|length
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|isOpen
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|readInternal (byte[] b, int offset, int len)
specifier|protected
name|void
name|readInternal
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|descriptor
init|)
block|{
name|long
name|position
init|=
name|getFilePointer
argument_list|()
decl_stmt|;
if|if
condition|(
name|position
operator|!=
name|descriptor
operator|.
name|position
condition|)
block|{
name|descriptor
operator|.
name|in
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|descriptor
operator|.
name|position
operator|=
name|position
expr_stmt|;
block|}
name|int
name|total
init|=
literal|0
decl_stmt|;
do|do
block|{
name|int
name|i
init|=
name|descriptor
operator|.
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|offset
operator|+
name|total
argument_list|,
name|len
operator|-
name|total
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Read past EOF"
argument_list|)
throw|;
block|}
name|descriptor
operator|.
name|position
operator|+=
name|i
expr_stmt|;
name|total
operator|+=
name|i
expr_stmt|;
block|}
do|while
condition|(
name|total
operator|<
name|len
condition|)
do|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isClone
condition|)
block|{
if|if
condition|(
name|isOpen
condition|)
block|{
name|descriptor
operator|.
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|isOpen
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Index file "
operator|+
name|filePath
operator|+
literal|" already closed"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|seekInternal (long position)
specifier|protected
name|void
name|seekInternal
parameter_list|(
name|long
name|position
parameter_list|)
block|{
comment|// handled in readInternal()
block|}
DECL|method|length ()
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isClone
operator|&&
name|isOpen
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
comment|// close the file
block|}
block|}
DECL|method|clone ()
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|FileSystemIndexInput
name|clone
init|=
operator|(
name|FileSystemIndexInput
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|isClone
operator|=
literal|true
expr_stmt|;
return|return
name|clone
return|;
block|}
block|}
DECL|class|FileSystemIndexOutput
specifier|private
class|class
name|FileSystemIndexOutput
extends|extends
name|BufferedIndexOutput
block|{
DECL|field|filePath
specifier|private
specifier|final
name|Path
name|filePath
decl_stmt|;
comment|// for debugging
DECL|field|out
specifier|private
specifier|final
name|FSDataOutputStream
name|out
decl_stmt|;
DECL|field|isOpen
specifier|private
name|boolean
name|isOpen
decl_stmt|;
DECL|method|FileSystemIndexOutput (Path path, int ioFileBufferSize)
specifier|public
name|FileSystemIndexOutput
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|ioFileBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|filePath
operator|=
name|path
expr_stmt|;
comment|// overwrite is true by default
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|ioFileBufferSize
argument_list|)
expr_stmt|;
name|isOpen
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|flushBuffer (byte[] b, int offset, int size)
specifier|public
name|void
name|flushBuffer
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isOpen
condition|)
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|isOpen
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Index file "
operator|+
name|filePath
operator|+
literal|" already closed"
argument_list|)
throw|;
block|}
block|}
DECL|method|seek (long pos)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|length ()
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|out
operator|.
name|getPos
argument_list|()
return|;
block|}
DECL|method|finalize ()
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isOpen
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
comment|// close the file
block|}
block|}
block|}
block|}
end_class

end_unit

