begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MapReduceBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_comment
comment|/**  * This class applies local analysis on a key-value pair and then convert the  * result docid-operation pair to a shard-and-intermediate form pair.  */
end_comment

begin_class
DECL|class|IndexUpdateMapper
specifier|public
class|class
name|IndexUpdateMapper
parameter_list|<
name|K
extends|extends
name|WritableComparable
parameter_list|,
name|V
extends|extends
name|Writable
parameter_list|>
extends|extends
name|MapReduceBase
implements|implements
name|Mapper
argument_list|<
name|K
argument_list|,
name|V
argument_list|,
name|Shard
argument_list|,
name|IntermediateForm
argument_list|>
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IndexUpdateMapper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Get the map output key class.    * @return the map output key class    */
DECL|method|getMapOutputKeyClass ()
specifier|public
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
name|getMapOutputKeyClass
parameter_list|()
block|{
return|return
name|Shard
operator|.
name|class
return|;
block|}
comment|/**    * Get the map output value class.    * @return the map output value class    */
DECL|method|getMapOutputValueClass ()
specifier|public
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getMapOutputValueClass
parameter_list|()
block|{
return|return
name|IntermediateForm
operator|.
name|class
return|;
block|}
DECL|field|iconf
name|IndexUpdateConfiguration
name|iconf
decl_stmt|;
DECL|field|analyzer
specifier|private
name|Analyzer
name|analyzer
decl_stmt|;
DECL|field|shards
specifier|private
name|Shard
index|[]
name|shards
decl_stmt|;
DECL|field|distributionPolicy
specifier|private
name|IDistributionPolicy
name|distributionPolicy
decl_stmt|;
DECL|field|localAnalysis
specifier|private
name|ILocalAnalysis
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|localAnalysis
decl_stmt|;
DECL|field|tmpKey
specifier|private
name|DocumentID
name|tmpKey
decl_stmt|;
DECL|field|tmpValue
specifier|private
name|DocumentAndOp
name|tmpValue
decl_stmt|;
DECL|field|tmpCollector
specifier|private
name|OutputCollector
argument_list|<
name|DocumentID
argument_list|,
name|DocumentAndOp
argument_list|>
name|tmpCollector
init|=
operator|new
name|OutputCollector
argument_list|<
name|DocumentID
argument_list|,
name|DocumentAndOp
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|collect
parameter_list|(
name|DocumentID
name|key
parameter_list|,
name|DocumentAndOp
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|tmpKey
operator|=
name|key
expr_stmt|;
name|tmpValue
operator|=
name|value
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**    * Map a key-value pair to a shard-and-intermediate form pair. Internally,    * the local analysis is first applied to map the key-value pair to a    * document id-and-operation pair, then the docid-and-operation pair is    * mapped to a shard-intermediate form pair. The intermediate form is of the    * form of a single-document ram index and/or a single delete term.    */
DECL|method|map (K key, V value, OutputCollector<Shard, IntermediateForm> output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|OutputCollector
argument_list|<
name|Shard
argument_list|,
name|IntermediateForm
argument_list|>
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|localAnalysis
operator|.
name|map
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|tmpCollector
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpKey
operator|!=
literal|null
operator|&&
name|tmpValue
operator|!=
literal|null
condition|)
block|{
name|DocumentAndOp
name|doc
init|=
name|tmpValue
decl_stmt|;
name|IntermediateForm
name|form
init|=
operator|new
name|IntermediateForm
argument_list|()
decl_stmt|;
name|form
operator|.
name|configure
argument_list|(
name|iconf
argument_list|)
expr_stmt|;
name|form
operator|.
name|process
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|form
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getOp
argument_list|()
operator|==
name|DocumentAndOp
operator|.
name|Op
operator|.
name|INSERT
condition|)
block|{
name|int
name|chosenShard
init|=
name|distributionPolicy
operator|.
name|chooseShardForInsert
argument_list|(
name|tmpKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenShard
operator|>=
literal|0
condition|)
block|{
comment|// insert into one shard
name|output
operator|.
name|collect
argument_list|(
name|shards
index|[
name|chosenShard
index|]
argument_list|,
name|form
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Chosen shard for insert must be>= 0"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|doc
operator|.
name|getOp
argument_list|()
operator|==
name|DocumentAndOp
operator|.
name|Op
operator|.
name|DELETE
condition|)
block|{
name|int
name|chosenShard
init|=
name|distributionPolicy
operator|.
name|chooseShardForDelete
argument_list|(
name|tmpKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenShard
operator|>=
literal|0
condition|)
block|{
comment|// delete from one shard
name|output
operator|.
name|collect
argument_list|(
name|shards
index|[
name|chosenShard
index|]
argument_list|,
name|form
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// broadcast delete to all shards
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shards
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|collect
argument_list|(
name|shards
index|[
name|i
index|]
argument_list|,
name|form
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// UPDATE
name|int
name|insertToShard
init|=
name|distributionPolicy
operator|.
name|chooseShardForInsert
argument_list|(
name|tmpKey
argument_list|)
decl_stmt|;
name|int
name|deleteFromShard
init|=
name|distributionPolicy
operator|.
name|chooseShardForDelete
argument_list|(
name|tmpKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|insertToShard
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|insertToShard
operator|==
name|deleteFromShard
condition|)
block|{
comment|// update into one shard
name|output
operator|.
name|collect
argument_list|(
name|shards
index|[
name|insertToShard
index|]
argument_list|,
name|form
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// prepare a deletion form
name|IntermediateForm
name|deletionForm
init|=
operator|new
name|IntermediateForm
argument_list|()
decl_stmt|;
name|deletionForm
operator|.
name|configure
argument_list|(
name|iconf
argument_list|)
expr_stmt|;
name|deletionForm
operator|.
name|process
argument_list|(
operator|new
name|DocumentAndOp
argument_list|(
name|DocumentAndOp
operator|.
name|Op
operator|.
name|DELETE
argument_list|,
name|doc
operator|.
name|getTerm
argument_list|()
argument_list|)
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|deletionForm
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteFromShard
operator|>=
literal|0
condition|)
block|{
comment|// delete from one shard
name|output
operator|.
name|collect
argument_list|(
name|shards
index|[
name|deleteFromShard
index|]
argument_list|,
name|deletionForm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// broadcast delete to all shards
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shards
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|collect
argument_list|(
name|shards
index|[
name|i
index|]
argument_list|,
name|deletionForm
argument_list|)
expr_stmt|;
block|}
block|}
comment|// prepare an insertion form
name|IntermediateForm
name|insertionForm
init|=
operator|new
name|IntermediateForm
argument_list|()
decl_stmt|;
name|insertionForm
operator|.
name|configure
argument_list|(
name|iconf
argument_list|)
expr_stmt|;
name|insertionForm
operator|.
name|process
argument_list|(
operator|new
name|DocumentAndOp
argument_list|(
name|DocumentAndOp
operator|.
name|Op
operator|.
name|INSERT
argument_list|,
name|doc
operator|.
name|getDocument
argument_list|()
argument_list|)
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|insertionForm
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
comment|// insert into one shard
name|output
operator|.
name|collect
argument_list|(
name|shards
index|[
name|insertToShard
index|]
argument_list|,
name|insertionForm
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Chosen shard for insert must be>= 0"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.mapred.MapReduceBase#configure(org.apache.hadoop.mapred.JobConf)    */
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|iconf
operator|=
operator|new
name|IndexUpdateConfiguration
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|analyzer
operator|=
operator|(
name|Analyzer
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|iconf
operator|.
name|getDocumentAnalyzerClass
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|localAnalysis
operator|=
operator|(
name|ILocalAnalysis
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|iconf
operator|.
name|getLocalAnalysisClass
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|localAnalysis
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|shards
operator|=
name|Shard
operator|.
name|getIndexShards
argument_list|(
name|iconf
argument_list|)
expr_stmt|;
name|distributionPolicy
operator|=
operator|(
name|IDistributionPolicy
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|iconf
operator|.
name|getDistributionPolicyClass
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|distributionPolicy
operator|.
name|init
argument_list|(
name|shards
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sea.document.analyzer = "
operator|+
name|analyzer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sea.local.analysis = "
operator|+
name|localAnalysis
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|shards
operator|.
name|length
operator|+
literal|" shards = "
operator|+
name|iconf
operator|.
name|getIndexShards
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sea.distribution.policy = "
operator|+
name|distributionPolicy
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.hadoop.mapred.MapReduceBase#close()    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|localAnalysis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

