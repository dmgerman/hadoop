begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.lucene
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_comment
comment|/**  * A utility class which writes an index in a ram dir into a DataOutput and  * read from a DataInput an index into a ram dir.  */
end_comment

begin_class
DECL|class|RAMDirectoryUtil
specifier|public
class|class
name|RAMDirectoryUtil
block|{
DECL|field|BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|1024
decl_stmt|;
comment|// RAMOutputStream.BUFFER_SIZE;
comment|/**    * Write a number of files from a ram directory to a data output.    * @param out  the data output    * @param dir  the ram directory    * @param names  the names of the files to write    * @throws IOException    */
DECL|method|writeRAMFiles (DataOutput out, RAMDirectory dir, String[] names)
specifier|public
specifier|static
name|void
name|writeRAMFiles
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|RAMDirectory
name|dir
parameter_list|,
name|String
index|[]
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|names
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|dir
operator|.
name|fileLength
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
comment|// can we avoid the extra copy?
name|IndexInput
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|length
condition|)
block|{
name|int
name|len
init|=
name|position
operator|+
name|BUFFER_SIZE
operator|<=
name|length
condition|?
name|BUFFER_SIZE
else|:
call|(
name|int
call|)
argument_list|(
name|length
operator|-
name|position
argument_list|)
decl_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|position
operator|+=
name|len
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Read a number of files from a data input to a ram directory.    * @param in  the data input    * @param dir  the ram directory    * @throws IOException    */
DECL|method|readRAMFiles (DataInput in, RAMDirectory dir)
specifier|public
specifier|static
name|void
name|readRAMFiles
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|RAMDirectory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numFiles
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
comment|// can we avoid the extra copy?
name|IndexOutput
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
name|output
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|length
condition|)
block|{
name|int
name|len
init|=
name|position
operator|+
name|BUFFER_SIZE
operator|<=
name|length
condition|?
name|BUFFER_SIZE
else|:
call|(
name|int
call|)
argument_list|(
name|length
operator|-
name|position
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|position
operator|+=
name|len
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

