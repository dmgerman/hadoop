begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.lucene
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
operator|.
name|IndexUpdateConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
operator|.
name|IntermediateForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
operator|.
name|Shard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|KeepOnlyLastCommitDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_comment
comment|/**  * The initial version of an index is stored in the perm dir. Index files  * created by newer versions are written to a temp dir on the local FS. After  * successfully creating the new version in the temp dir, the shard writer  * moves the new files to the perm dir and deletes the temp dir in close().  */
end_comment

begin_class
DECL|class|ShardWriter
specifier|public
class|class
name|ShardWriter
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ShardWriter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|localFs
specifier|private
specifier|final
name|FileSystem
name|localFs
decl_stmt|;
DECL|field|perm
specifier|private
specifier|final
name|Path
name|perm
decl_stmt|;
DECL|field|temp
specifier|private
specifier|final
name|Path
name|temp
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|writer
specifier|private
specifier|final
name|IndexWriter
name|writer
decl_stmt|;
DECL|field|maxNumSegments
specifier|private
name|int
name|maxNumSegments
decl_stmt|;
DECL|field|numForms
specifier|private
name|long
name|numForms
init|=
literal|0
decl_stmt|;
comment|/**    * Constructor    * @param fs    * @param shard    * @param tempDir    * @param iconf    * @throws IOException    */
DECL|method|ShardWriter (FileSystem fs, Shard shard, String tempDir, IndexUpdateConfiguration iconf)
specifier|public
name|ShardWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Shard
name|shard
parameter_list|,
name|String
name|tempDir
parameter_list|,
name|IndexUpdateConfiguration
name|iconf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Construct a shard writer"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|iconf
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|perm
operator|=
operator|new
name|Path
argument_list|(
name|shard
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|temp
operator|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|long
name|initGeneration
init|=
name|shard
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|perm
argument_list|)
condition|)
block|{
assert|assert
operator|(
name|initGeneration
operator|<
literal|0
operator|)
assert|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|perm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|restoreGeneration
argument_list|(
name|fs
argument_list|,
name|perm
argument_list|,
name|initGeneration
argument_list|)
expr_stmt|;
block|}
name|dir
operator|=
operator|new
name|MixedDirectory
argument_list|(
name|fs
argument_list|,
name|perm
argument_list|,
name|localFs
argument_list|,
name|fs
operator|.
name|startLocalOutput
argument_list|(
name|perm
argument_list|,
name|temp
argument_list|)
argument_list|,
name|iconf
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// analyzer is null because we only use addIndexes, not addDocument
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|initGeneration
operator|<
literal|0
condition|?
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
else|:
operator|new
name|MixedDeletionPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|setParameters
argument_list|(
name|iconf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Process an intermediate form by carrying out, on the Lucene instance of    * the shard, the deletes and the inserts (a ram index) in the form.     * @param form  the intermediate form containing deletes and a ram index    * @throws IOException    */
DECL|method|process (IntermediateForm form)
specifier|public
name|void
name|process
parameter_list|(
name|IntermediateForm
name|form
parameter_list|)
throws|throws
name|IOException
block|{
comment|// first delete
name|Iterator
argument_list|<
name|Term
argument_list|>
name|iter
init|=
name|form
operator|.
name|deleteTermIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// then insert
name|writer
operator|.
name|addIndexesNoOptimize
argument_list|(
operator|new
name|Directory
index|[]
block|{
name|form
operator|.
name|getDirectory
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|numForms
operator|++
expr_stmt|;
block|}
comment|/**    * Close the shard writer. Optimize the Lucene instance of the shard before    * closing if necessary, and copy the files created in the temp directory    * to the permanent directory after closing.    * @throws IOException    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing the shard writer, processed "
operator|+
name|numForms
operator|+
literal|" forms"
argument_list|)
expr_stmt|;
try|try
block|{
try|try
block|{
if|if
condition|(
name|maxNumSegments
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|optimize
argument_list|(
name|maxNumSegments
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Optimized the shard into at most "
operator|+
name|maxNumSegments
operator|+
literal|" segments"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed Lucene index writer"
argument_list|)
expr_stmt|;
block|}
name|moveFromTempToPerm
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Moved new index files to "
operator|+
name|perm
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed the shard writer"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)    * @see java.lang.Object#toString()    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"@"
operator|+
name|perm
operator|+
literal|"&"
operator|+
name|temp
return|;
block|}
DECL|method|setParameters (IndexUpdateConfiguration iconf)
specifier|private
name|void
name|setParameters
parameter_list|(
name|IndexUpdateConfiguration
name|iconf
parameter_list|)
block|{
name|int
name|maxFieldLength
init|=
name|iconf
operator|.
name|getIndexMaxFieldLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxFieldLength
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|setMaxFieldLength
argument_list|(
name|maxFieldLength
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|setUseCompoundFile
argument_list|(
name|iconf
operator|.
name|getIndexUseCompoundFile
argument_list|()
argument_list|)
expr_stmt|;
name|maxNumSegments
operator|=
name|iconf
operator|.
name|getIndexMaxNumSegments
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxFieldLength
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sea.max.field.length = "
operator|+
name|writer
operator|.
name|getMaxFieldLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"sea.use.compound.file = "
operator|+
name|writer
operator|.
name|getUseCompoundFile
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sea.max.num.segments = "
operator|+
name|maxNumSegments
argument_list|)
expr_stmt|;
block|}
comment|// in case a previous reduce task fails, restore the generation to
comment|// the original starting point by deleting the segments.gen file
comment|// and the segments_N files whose generations are greater than the
comment|// starting generation; rest of the unwanted files will be deleted
comment|// once the unwanted segments_N files are deleted
DECL|method|restoreGeneration (FileSystem fs, Path perm, long startGen)
specifier|private
name|void
name|restoreGeneration
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|perm
parameter_list|,
name|long
name|startGen
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|fileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|perm
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|LuceneUtil
operator|.
name|isSegmentsFile
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// remove the segments_N files whose generation are greater than
comment|// the starting generation
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|path
init|=
name|fileStatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|startGen
operator|<
name|LuceneUtil
operator|.
name|generationFromSegmentsFileName
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// always remove segments.gen in case last failed try removed segments_N
comment|// but not segments.gen, and segments.gen will be overwritten anyway.
name|Path
name|segmentsGenFile
init|=
operator|new
name|Path
argument_list|(
name|LuceneUtil
operator|.
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|segmentsGenFile
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|segmentsGenFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// move the files created in the temp dir into the perm dir
comment|// and then delete the temp dir from the local FS
DECL|method|moveFromTempToPerm ()
specifier|private
name|void
name|moveFromTempToPerm
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|FileStatus
index|[]
name|fileStatus
init|=
name|localFs
operator|.
name|listStatus
argument_list|(
name|temp
argument_list|,
name|LuceneIndexFileNameFilter
operator|.
name|getFilter
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|segmentsPath
init|=
literal|null
decl_stmt|;
name|Path
name|segmentsGenPath
init|=
literal|null
decl_stmt|;
comment|// move the files created in temp dir except segments_N and segments.gen
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|path
init|=
name|fileStatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|LuceneUtil
operator|.
name|isSegmentsGenFile
argument_list|(
name|name
argument_list|)
condition|)
block|{
assert|assert
operator|(
name|segmentsGenPath
operator|==
literal|null
operator|)
assert|;
name|segmentsGenPath
operator|=
name|path
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LuceneUtil
operator|.
name|isSegmentsFile
argument_list|(
name|name
argument_list|)
condition|)
block|{
assert|assert
operator|(
name|segmentsPath
operator|==
literal|null
operator|)
assert|;
name|segmentsPath
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|.
name|completeLocalOutput
argument_list|(
operator|new
name|Path
argument_list|(
name|perm
argument_list|,
name|name
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|// move the segments_N file
if|if
condition|(
name|segmentsPath
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|completeLocalOutput
argument_list|(
operator|new
name|Path
argument_list|(
name|perm
argument_list|,
name|segmentsPath
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|segmentsPath
argument_list|)
expr_stmt|;
block|}
comment|// move the segments.gen file
if|if
condition|(
name|segmentsGenPath
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|completeLocalOutput
argument_list|(
operator|new
name|Path
argument_list|(
name|perm
argument_list|,
name|segmentsGenPath
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|segmentsGenPath
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// finally delete the temp dir (files should have been deleted)
name|localFs
operator|.
name|delete
argument_list|(
name|temp
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

