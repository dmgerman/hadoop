begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_comment
comment|/**  * A test-cluster based on {@link MiniMRCluster} that is started with  * CapacityTaskScheduler. It provides knobs to configure both the cluster as  * well as the scheduler. Any test that intends to test capacity-scheduler  * should extend this.  *   */
end_comment

begin_class
DECL|class|ClusterWithCapacityScheduler
specifier|public
class|class
name|ClusterWithCapacityScheduler
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClusterWithCapacityScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mrCluster
specifier|private
name|MiniMRCluster
name|mrCluster
decl_stmt|;
DECL|field|jobConf
specifier|private
name|JobConf
name|jobConf
decl_stmt|;
DECL|field|MY_SCHEDULER_CONF_PATH_PROPERTY
specifier|static
specifier|final
name|String
name|MY_SCHEDULER_CONF_PATH_PROPERTY
init|=
literal|"my.resource.path"
decl_stmt|;
DECL|method|startCluster ()
specifier|protected
name|void
name|startCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|startCluster
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start the cluster with two TaskTrackers and two DataNodes and configure the    * cluster with clusterProperties and the scheduler with schedulerProperties.    * Uses default configuration whenever user provided properties are missing    * (null/empty)    *     * @param clusterProperties    * @param schedulerProperties    * @throws IOException    */
DECL|method|startCluster (Properties clusterProperties, Properties schedulerProperties)
specifier|protected
name|void
name|startCluster
parameter_list|(
name|Properties
name|clusterProperties
parameter_list|,
name|Properties
name|schedulerProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|startCluster
argument_list|(
literal|2
argument_list|,
name|clusterProperties
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start the cluster with numTaskTrackers TaskTrackers and numDataNodes    * DataNodes and configure the cluster with clusterProperties and the    * scheduler with schedulerProperties. Uses default configuration whenever    * user provided properties are missing (null/empty)    *     * @param numTaskTrackers    * @param clusterProperties    * @param schedulerProperties    * @throws IOException    */
DECL|method|startCluster (int numTaskTrackers, Properties clusterProperties, Properties schedulerProperties)
specifier|protected
name|void
name|startCluster
parameter_list|(
name|int
name|numTaskTrackers
parameter_list|,
name|Properties
name|clusterProperties
parameter_list|,
name|Properties
name|schedulerProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
operator|new
name|ClusterWithCapacityScheduler
operator|.
name|MyClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|JobConf
name|clusterConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|clusterProperties
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|clusterProperties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|schedulerProperties
operator|!=
literal|null
condition|)
block|{
name|setUpSchedulerConfigFile
argument_list|(
name|schedulerProperties
argument_list|)
expr_stmt|;
block|}
name|clusterConf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_TASK_SCHEDULER
argument_list|,
name|CapacityTaskScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|numTaskTrackers
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|clusterConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobConf
operator|=
name|mrCluster
operator|.
name|createJobConf
argument_list|(
name|clusterConf
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpSchedulerConfigFile (Properties schedulerConfProps)
specifier|private
name|void
name|setUpSchedulerConfigFile
parameter_list|(
name|Properties
name|schedulerConfProps
parameter_list|)
throws|throws
name|IOException
block|{
name|LocalFileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|myResourcePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
decl_stmt|;
name|Path
name|schedulerConfigFilePath
init|=
operator|new
name|Path
argument_list|(
name|myResourcePath
argument_list|,
name|CapacitySchedulerConf
operator|.
name|SCHEDULER_CONF_FILE
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|schedulerConfigFilePath
argument_list|)
decl_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|schedulerConfProps
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|key
operator|+
name|schedulerConfProps
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|schedulerConfProps
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|writeXml
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"setting resource path where capacity-scheduler's config file "
operator|+
literal|"is placed to "
operator|+
name|myResourcePath
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|MY_SCHEDULER_CONF_PATH_PROPERTY
argument_list|,
name|myResourcePath
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanUpSchedulerConfigFile ()
specifier|private
name|void
name|cleanUpSchedulerConfigFile
parameter_list|()
throws|throws
name|IOException
block|{
name|LocalFileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|myResourcePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
decl_stmt|;
name|Path
name|schedulerConfigFilePath
init|=
operator|new
name|Path
argument_list|(
name|myResourcePath
argument_list|,
name|CapacitySchedulerConf
operator|.
name|SCHEDULER_CONF_FILE
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|schedulerConfigFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobConf ()
specifier|protected
name|JobConf
name|getJobConf
parameter_list|()
block|{
return|return
operator|new
name|JobConf
argument_list|(
name|this
operator|.
name|jobConf
argument_list|)
return|;
block|}
DECL|method|getJobTracker ()
specifier|protected
name|JobTracker
name|getJobTracker
parameter_list|()
block|{
return|return
name|this
operator|.
name|mrCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanUpSchedulerConfigFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Wait till all the slots in the cluster are occupied with respect to the    * tasks of type specified isMap.    *     *<p>    *     *<b>Also, it is assumed that the tasks won't finish any time soon, like in    * the case of tasks of {@link ControlledMapReduceJob}</b>.    *     * @param isMap    */
DECL|method|waitTillAllSlotsAreOccupied (boolean isMap)
specifier|protected
name|void
name|waitTillAllSlotsAreOccupied
parameter_list|(
name|boolean
name|isMap
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|JobTracker
name|jt
init|=
name|this
operator|.
name|mrCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
decl_stmt|;
name|ClusterStatus
name|clusterStatus
init|=
name|jt
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|int
name|currentTasks
init|=
operator|(
name|isMap
condition|?
name|clusterStatus
operator|.
name|getMapTasks
argument_list|()
else|:
name|clusterStatus
operator|.
name|getReduceTasks
argument_list|()
operator|)
decl_stmt|;
name|int
name|maxTasks
init|=
operator|(
name|isMap
condition|?
name|clusterStatus
operator|.
name|getMaxMapTasks
argument_list|()
else|:
name|clusterStatus
operator|.
name|getMaxReduceTasks
argument_list|()
operator|)
decl_stmt|;
while|while
condition|(
name|currentTasks
operator|!=
name|maxTasks
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|clusterStatus
operator|=
name|jt
operator|.
name|getClusterStatus
argument_list|()
expr_stmt|;
name|currentTasks
operator|=
operator|(
name|isMap
condition|?
name|clusterStatus
operator|.
name|getMapTasks
argument_list|()
else|:
name|clusterStatus
operator|.
name|getReduceTasks
argument_list|()
operator|)
expr_stmt|;
name|maxTasks
operator|=
operator|(
name|isMap
condition|?
name|clusterStatus
operator|.
name|getMaxMapTasks
argument_list|()
else|:
name|clusterStatus
operator|.
name|getMaxReduceTasks
argument_list|()
operator|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting till cluster reaches steady state. currentTasks : "
operator|+
name|currentTasks
operator|+
literal|" total cluster capacity : "
operator|+
name|maxTasks
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyClassLoader
specifier|static
class|class
name|MyClassLoader
extends|extends
name|ClassLoader
block|{
annotation|@
name|Override
DECL|method|getResource (String name)
specifier|public
name|URL
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|CapacitySchedulerConf
operator|.
name|SCHEDULER_CONF_FILE
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
name|findResource
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findResource (String name)
specifier|protected
name|URL
name|findResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|String
name|resourcePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ClusterWithCapacityScheduler
operator|.
name|MY_SCHEDULER_CONF_PATH_PROPERTY
argument_list|)
decl_stmt|;
comment|// Check the resourcePath directory
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|resourcePath
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|URL
argument_list|(
literal|"file://"
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|mue
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"exception : "
operator|+
name|mue
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|findResource
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

