begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatusChangeEvent
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|CapacityTestUtils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestCapacityScheduler
specifier|public
class|class
name|TestCapacityScheduler
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TestCapacityScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|queueConfigPath
name|String
name|queueConfigPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.extraconf"
argument_list|,
literal|"build/test/extraconf"
argument_list|)
decl_stmt|;
DECL|field|queueConfigFile
name|File
name|queueConfigFile
init|=
operator|new
name|File
argument_list|(
name|queueConfigPath
argument_list|,
name|QueueManager
operator|.
name|QUEUE_CONF_FILE_NAME
argument_list|)
decl_stmt|;
DECL|field|jobCounter
specifier|private
specifier|static
name|int
name|jobCounter
decl_stmt|;
DECL|field|controlledInitializationPoller
specifier|private
name|ControlledInitializationPoller
name|controlledInitializationPoller
decl_stmt|;
DECL|field|conf
specifier|protected
name|JobConf
name|conf
decl_stmt|;
DECL|field|scheduler
specifier|protected
name|CapacityTaskScheduler
name|scheduler
decl_stmt|;
DECL|field|taskTrackerManager
specifier|private
name|FakeTaskTrackerManager
name|taskTrackerManager
decl_stmt|;
DECL|field|clock
specifier|private
name|FakeClock
name|clock
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|setUp
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp ( int numTaskTrackers, int numMapTasksPerTracker, int numReduceTasksPerTracker)
specifier|private
name|void
name|setUp
parameter_list|(
name|int
name|numTaskTrackers
parameter_list|,
name|int
name|numMapTasksPerTracker
parameter_list|,
name|int
name|numReduceTasksPerTracker
parameter_list|)
block|{
name|jobCounter
operator|=
literal|0
expr_stmt|;
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
name|numTaskTrackers
argument_list|,
name|numMapTasksPerTracker
argument_list|,
name|numReduceTasksPerTracker
argument_list|)
expr_stmt|;
name|clock
operator|=
operator|new
name|FakeClock
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|new
name|CapacityTaskScheduler
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
comment|// Don't let the JobInitializationPoller come in our way.
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.queue.names"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|controlledInitializationPoller
operator|=
operator|new
name|ControlledInitializationPoller
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|,
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setInitializationPoller
argument_list|(
name|controlledInitializationPoller
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//by default disable speculative execution.
name|conf
operator|.
name|setMapSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReduceSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|.
name|terminate
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test max capacity    * @throws IOException    */
DECL|method|testMaxCapacity ()
specifier|public
name|void
name|testMaxCapacity
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|setUp
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|25.0f
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|setMaxCapacityPercent
argument_list|(
literal|50.0f
argument_list|)
expr_stmt|;
comment|//submit the Job
name|FakeJobInProgress
name|fjob1
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|"default"
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|taskTrackerManager
operator|.
name|initJob
argument_list|(
name|fjob1
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|>
name|task1
init|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|>
name|task2
init|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
decl_stmt|;
comment|//we have already reached the limit
comment|//this call would return null
name|List
argument_list|<
name|Task
argument_list|>
name|task3
init|=
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt3"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|task3
argument_list|)
expr_stmt|;
comment|//Now complete the task 1 i.e map task.
for|for
control|(
name|Task
name|task
range|:
name|task1
control|)
block|{
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|fjob1
argument_list|)
expr_stmt|;
block|}
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt1"
argument_list|)
expr_stmt|;
name|task2
operator|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
block|}
comment|// test job run-state change
DECL|method|testJobRunStateChange ()
specifier|public
name|void
name|testJobRunStateChange
parameter_list|()
throws|throws
name|IOException
block|{
comment|// start the scheduler
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit the job
name|FakeJobInProgress
name|fjob1
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"default"
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|FakeJobInProgress
name|fjob2
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"default"
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
comment|// test if changing the job priority/start-time works as expected in the
comment|// waiting queue
name|testJobOrderChange
argument_list|(
name|fjob1
argument_list|,
name|fjob2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Init the jobs
comment|// simulate the case where the job with a lower priority becomes running
comment|// first (may be because of the setup tasks).
comment|// init the lower ranked job first
name|taskTrackerManager
operator|.
name|initJob
argument_list|(
name|fjob2
argument_list|)
expr_stmt|;
comment|// init the higher ordered job later
name|taskTrackerManager
operator|.
name|initJob
argument_list|(
name|fjob1
argument_list|)
expr_stmt|;
comment|// check if the jobs are missing from the waiting queue
comment|// The jobs are not removed from waiting queue until they are scheduled
name|assertEquals
argument_list|(
literal|"Waiting queue is garbled on job init"
argument_list|,
literal|2
argument_list|,
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test if changing the job priority/start-time works as expected in the
comment|// running queue
name|testJobOrderChange
argument_list|(
name|fjob1
argument_list|,
name|fjob2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// schedule a task
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// complete the job
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
name|tasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|fjob1
argument_list|)
expr_stmt|;
comment|// mark the job as complete
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|fjob1
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|rqueue
init|=
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getRunningJobs
argument_list|()
decl_stmt|;
comment|// check if the job is removed from the scheduler
name|assertFalse
argument_list|(
literal|"Scheduler contains completed job"
argument_list|,
name|rqueue
operator|.
name|contains
argument_list|(
name|fjob1
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the running queue size is correct
name|assertEquals
argument_list|(
literal|"Job finish garbles the queue"
argument_list|,
literal|1
argument_list|,
name|rqueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test if the queue reflects the changes
DECL|method|testJobOrderChange ( FakeJobInProgress fjob1, FakeJobInProgress fjob2, boolean waiting)
specifier|private
name|void
name|testJobOrderChange
parameter_list|(
name|FakeJobInProgress
name|fjob1
parameter_list|,
name|FakeJobInProgress
name|fjob2
parameter_list|,
name|boolean
name|waiting
parameter_list|)
block|{
name|String
name|queueName
init|=
name|waiting
condition|?
literal|"waiting"
else|:
literal|"running"
decl_stmt|;
comment|// check if the jobs in the queue are the right order
name|JobInProgress
index|[]
name|jobs
init|=
name|getJobsInQueue
argument_list|(
name|waiting
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|queueName
operator|+
literal|" queue doesnt contain job #1 in right order"
argument_list|,
name|jobs
index|[
literal|0
index|]
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|fjob1
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queueName
operator|+
literal|" queue doesnt contain job #2 in right order"
argument_list|,
name|jobs
index|[
literal|1
index|]
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|fjob2
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// I. Check the start-time change
comment|// Change job2 start-time and check if job2 bumps up in the queue
name|taskTrackerManager
operator|.
name|setStartTime
argument_list|(
name|fjob2
argument_list|,
name|fjob1
operator|.
name|startTime
operator|-
literal|1
argument_list|)
expr_stmt|;
name|jobs
operator|=
name|getJobsInQueue
argument_list|(
name|waiting
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Start time change didnt not work as expected for job #2 in "
operator|+
name|queueName
operator|+
literal|" queue"
argument_list|,
name|jobs
index|[
literal|0
index|]
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|fjob2
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Start time change didnt not work as expected for job #1 in"
operator|+
name|queueName
operator|+
literal|" queue"
argument_list|,
name|jobs
index|[
literal|1
index|]
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|fjob1
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the queue is fine
name|assertEquals
argument_list|(
literal|"Start-time change garbled the "
operator|+
name|queueName
operator|+
literal|" queue"
argument_list|,
literal|2
argument_list|,
name|jobs
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// II. Change job priority change
comment|// Bump up job1's priority and make sure job1 bumps up in the queue
name|taskTrackerManager
operator|.
name|setPriority
argument_list|(
name|fjob1
argument_list|,
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
comment|// Check if the priority changes are reflected
name|jobs
operator|=
name|getJobsInQueue
argument_list|(
name|waiting
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Priority change didnt not work as expected for job #1 in "
operator|+
name|queueName
operator|+
literal|" queue"
argument_list|,
name|jobs
index|[
literal|0
index|]
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|fjob1
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Priority change didnt not work as expected for job #2 in "
operator|+
name|queueName
operator|+
literal|" queue"
argument_list|,
name|jobs
index|[
literal|1
index|]
operator|.
name|getJobID
argument_list|()
operator|.
name|equals
argument_list|(
name|fjob2
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the queue is fine
name|assertEquals
argument_list|(
literal|"Priority change has garbled the "
operator|+
name|queueName
operator|+
literal|" queue"
argument_list|,
literal|2
argument_list|,
name|jobs
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// reset the queue state back to normal
name|taskTrackerManager
operator|.
name|setStartTime
argument_list|(
name|fjob1
argument_list|,
name|fjob2
operator|.
name|startTime
operator|-
literal|1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setPriority
argument_list|(
name|fjob1
argument_list|,
name|JobPriority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobsInQueue (boolean waiting)
specifier|private
name|JobInProgress
index|[]
name|getJobsInQueue
parameter_list|(
name|boolean
name|waiting
parameter_list|)
block|{
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|queue
init|=
name|waiting
condition|?
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
else|:
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getRunningJobs
argument_list|()
decl_stmt|;
return|return
name|queue
operator|.
name|toArray
argument_list|(
operator|new
name|JobInProgress
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|// tests if tasks can be assinged when there are multiple jobs from a same
comment|// user
DECL|method|testJobFinished ()
specifier|public
name|void
name|testJobFinished
parameter_list|()
throws|throws
name|Exception
block|{
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit 2 jobs
name|FakeJobInProgress
name|j1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|"default"
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
name|FakeJobInProgress
name|j2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|"default"
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// I. Check multiple assignments with running tasks within job
comment|// ask for a task from first job
name|Task
name|t
init|=
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
decl_stmt|;
comment|//  ask for another task from the first job
name|t
operator|=
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
comment|// complete tasks
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_m_000001_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_m_000002_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
comment|// II. Check multiple assignments with running tasks across jobs
comment|// ask for a task from first job
name|t
operator|=
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt1"
argument_list|)
expr_stmt|;
comment|//  ask for a task from the second job
name|t
operator|=
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
comment|// complete tasks
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0002_m_000001_0"
argument_list|,
name|j2
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_m_000003_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
comment|// III. Check multiple assignments with completed tasks across jobs
comment|// ask for a task from the second job
name|t
operator|=
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
comment|// complete task
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0002_m_000002_0"
argument_list|,
name|j2
argument_list|)
expr_stmt|;
comment|// IV. Check assignment with completed job
comment|// finish first job
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|getJobQueue
argument_list|(
name|j1
argument_list|)
operator|.
name|jobCompleted
argument_list|(
name|j1
argument_list|)
expr_stmt|;
comment|// ask for another task from the second job
comment|// if tasks can be assigned then the structures are properly updated
name|t
operator|=
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000003_0 on tt1"
argument_list|)
expr_stmt|;
comment|// complete task
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0002_m_000003_0"
argument_list|,
name|j2
argument_list|)
expr_stmt|;
block|}
comment|/**    * tests the submission of jobs to container and job queues    * @throws Exception    */
DECL|method|testJobSubmission ()
specifier|public
name|void
name|testJobSubmission
parameter_list|()
throws|throws
name|Exception
block|{
name|JobQueueInfo
index|[]
name|queues
init|=
name|TestQueueManagerRefresh
operator|.
name|getSimpleQueueHierarchy
argument_list|()
decl_stmt|;
name|queues
index|[
literal|0
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|1
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|queues
index|[
literal|2
index|]
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// write the configuration file
name|QueueManagerTestUtils
operator|.
name|writeQueueConfigurationFile
argument_list|(
name|queueConfigFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|JobQueueInfo
index|[]
block|{
name|queues
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// use the queues from the config file.
name|taskTrackerManager
operator|.
name|setQueueManager
argument_list|(
operator|new
name|QueueManager
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit a job to the container queue
try|try
block|{
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|20
argument_list|,
literal|0
argument_list|,
name|queues
index|[
literal|0
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Jobs are being able to be submitted to the container queue"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|getJobs
argument_list|(
name|queues
index|[
literal|0
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FakeJobInProgress
name|job
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|queues
index|[
literal|1
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getJobs
argument_list|(
name|queues
index|[
literal|1
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|getJobs
argument_list|(
name|queues
index|[
literal|1
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
comment|// check if the job is submitted
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
comment|// test for getJobs
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
argument_list|>
name|subJobsList
init|=
name|taskTrackerManager
operator|.
name|submitJobs
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
name|queues
index|[
literal|2
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|JobQueuesManager
name|mgr
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
comment|//Raise status change events for jobs submitted.
name|raiseStatusChangeEvents
argument_list|(
name|mgr
argument_list|,
name|queues
index|[
literal|2
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|jobs
init|=
name|scheduler
operator|.
name|getJobs
argument_list|(
name|queues
index|[
literal|2
index|]
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Number of jobs returned by scheduler is wrong"
argument_list|,
name|jobs
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Submitted jobs and Returned jobs are not same"
argument_list|,
name|subJobsList
operator|.
name|get
argument_list|(
literal|"u1"
argument_list|)
operator|.
name|containsAll
argument_list|(
name|jobs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Basic test to test capacity allocation across the queues which have no
comment|//capacity configured.
DECL|method|testCapacityAllocationToQueues ()
specifier|public
name|void
name|testCapacityAllocationToQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|,
literal|"qAZ1"
block|,
literal|"qAZ2"
block|,
literal|"qAZ3"
block|,
literal|"qAZ4"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|25.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"qAZ1"
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"qAZ2"
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"qAZ3"
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"qAZ4"
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobQueuesManager
name|jqm
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
name|assertEquals
argument_list|(
literal|18.75f
argument_list|,
name|jqm
operator|.
name|getJobQueue
argument_list|(
literal|"qAZ1"
argument_list|)
operator|.
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18.75f
argument_list|,
name|jqm
operator|.
name|getJobQueue
argument_list|(
literal|"qAZ2"
argument_list|)
operator|.
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18.75f
argument_list|,
name|jqm
operator|.
name|getJobQueue
argument_list|(
literal|"qAZ3"
argument_list|)
operator|.
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18.75f
argument_list|,
name|jqm
operator|.
name|getJobQueue
argument_list|(
literal|"qAZ4"
argument_list|)
operator|.
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCapacityAllocFailureWithLowerMaxCapacity ()
specifier|public
name|void
name|testCapacityAllocFailureWithLowerMaxCapacity
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|,
literal|"qAZ1"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|25.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|FakeQueueInfo
name|qi
init|=
operator|new
name|FakeQueueInfo
argument_list|(
literal|"qAZ1"
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
decl_stmt|;
name|qi
operator|.
name|maxCapacity
operator|=
literal|40.0f
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
name|qi
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"scheduler start should fail "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ise
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|ise
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IllegalStateException
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|" Capacity share ("
operator|+
literal|75.0f
operator|+
literal|")for unconfigured queue "
operator|+
literal|"qAZ1"
operator|+
literal|" is greater than its maximum-capacity percentage "
operator|+
literal|40.0f
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Tests how capacity is computed and assignment of tasks done
comment|// on the basis of the capacity.
DECL|method|testCapacityBasedAllocation ()
specifier|public
name|void
name|testCapacityBasedAllocation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up some queues
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|,
literal|"q2"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// set the capacity % as 10%, so that capacity will be zero initially as
comment|// the cluster capacity increase slowly.
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|10.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"q2"
argument_list|,
literal|90.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit a job to the default queue
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|"default"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
comment|// submit a job to the second queue
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|"q2"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
comment|// job from q2 runs first because it has some non-zero capacity.
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|verifyCapacity
argument_list|(
name|taskTrackerManager
argument_list|,
literal|"0"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|verifyCapacity
argument_list|(
name|taskTrackerManager
argument_list|,
literal|"3"
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
comment|// add another tt to increase tt slots
name|taskTrackerManager
operator|.
name|addTaskTracker
argument_list|(
literal|"tt3"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|verifyCapacity
argument_list|(
name|taskTrackerManager
argument_list|,
literal|"0"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|verifyCapacity
argument_list|(
name|taskTrackerManager
argument_list|,
literal|"5"
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
comment|// add another tt to increase tt slots
name|taskTrackerManager
operator|.
name|addTaskTracker
argument_list|(
literal|"tt4"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_m_000003_0 on tt3"
argument_list|)
expr_stmt|;
name|verifyCapacity
argument_list|(
name|taskTrackerManager
argument_list|,
literal|"0"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|verifyCapacity
argument_list|(
name|taskTrackerManager
argument_list|,
literal|"7"
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
comment|// add another tt to increase tt slots
name|taskTrackerManager
operator|.
name|addTaskTracker
argument_list|(
literal|"tt5"
argument_list|)
expr_stmt|;
comment|// now job from default should run, as it is furthest away
comment|// in terms of runningMaps / capacity.
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt4"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt4"
argument_list|)
expr_stmt|;
name|verifyCapacity
argument_list|(
name|taskTrackerManager
argument_list|,
literal|"1"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|verifyCapacity
argument_list|(
name|taskTrackerManager
argument_list|,
literal|"9"
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
block|}
comment|// test capacity transfer
DECL|method|testCapacityTransfer ()
specifier|public
name|void
name|testCapacityTransfer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up some queues
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|,
literal|"q2"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"q2"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit a job
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"q2"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
comment|// for queue 'q2', the capacity for maps is 2. Since we're the only user,
comment|// we should get a task
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
comment|// I should get another map task.
comment|//No redduces as there is 1 slot only for reduce on TT
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
comment|// Now we're at full capacity for maps. If I ask for another map task,
comment|// I should get a map task from the default queue's capacity.
comment|//same with reduce
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
comment|// and another
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000004_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * test the high memory blocking with max capacity.    * @throws IOException    */
DECL|method|testHighMemoryBlockingWithMaxCapacity ()
specifier|public
name|void
name|testHighMemoryBlockingWithMaxCapacity
parameter_list|()
throws|throws
name|IOException
block|{
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"defaultXYZM"
block|}
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"defaultXYZM"
argument_list|,
literal|25.0f
argument_list|,
literal|true
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
comment|// enabled memory-based scheduling
comment|// Normal job in the cluster would be 1GB maps/reduces
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_MAPMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_REDUCEMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|setMaxCapacityPercent
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"defaultXYZM"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
name|jConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"defaultXYZM"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|//high ram map from job 1 and normal reduce task from job 1
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
decl_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"defaultXYZM"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|200.0f
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"defaultXYZM"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|100.0f
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkMemReservedForTasksOnTT
argument_list|(
literal|"tt1"
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|,
literal|1
operator|*
literal|1024L
argument_list|)
expr_stmt|;
comment|//we have reached the maximum limit for map, so no more map tasks.
comment|//we have used 1 reduce already and 1 more reduce slot is left for the
comment|//before we reach maxcapacity for reduces.
comment|// But current 1 slot + 2 slots for high ram reduce would
comment|//mean we are crossing the maxium capacity.hence nothing would be assigned
comment|//in this call
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//complete the high ram job on tt1.
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|job1
argument_list|)
expr_stmt|;
block|}
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|tasks
operator|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"defaultXYZM"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|200.0f
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"defaultXYZM"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|200.0f
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkMemReservedForTasksOnTT
argument_list|(
literal|"tt2"
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|)
expr_stmt|;
comment|//complete the high ram job on tt1.
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|job2
argument_list|)
expr_stmt|;
block|}
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|tasks
operator|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
block|}
comment|/**    * test if user limits automatically adjust to max map or reduce limit    */
DECL|method|testUserLimitsWithMaxCapacity ()
specifier|public
name|void
name|testUserLimitsWithMaxCapacity
parameter_list|()
throws|throws
name|Exception
block|{
name|setUp
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// set up some queues
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|setMaxCapacityPercent
argument_list|(
literal|75
argument_list|)
expr_stmt|;
comment|// submit a job
name|FakeJobInProgress
name|fjob1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"default"
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
name|FakeJobInProgress
name|fjob2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"default"
argument_list|,
literal|"u2"
argument_list|)
decl_stmt|;
comment|// for queue 'default', maxCapacity for map and reduce is 3.
comment|// initial user limit for 50% assuming there are 2 users/queue is.
comment|//  1 map and 1 reduce.
comment|// after max capacity it is 1.5 each.
comment|//first job would be given 1 job each.
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
decl_stmt|;
comment|//for user u1 we have reached the limit. that is 1 job.
comment|//1 more map and reduce tasks.
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|tasks
operator|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|tasks
operator|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Utility method to construct a map of expected strings
comment|// with exactly one map task and one reduce task.
DECL|method|populateExpectedStrings (Map<String, String> expectedTaskStrings, String mapTask, String reduceTask)
specifier|private
name|void
name|populateExpectedStrings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedTaskStrings
parameter_list|,
name|String
name|mapTask
parameter_list|,
name|String
name|reduceTask
parameter_list|)
block|{
name|expectedTaskStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedTaskStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
name|mapTask
argument_list|)
expr_stmt|;
name|expectedTaskStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
name|reduceTask
argument_list|)
expr_stmt|;
block|}
comment|// test user limits
DECL|method|testUserLimits ()
specifier|public
name|void
name|testUserLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up some queues
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|,
literal|"q2"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"q2"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit a job
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"q2"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
comment|// for queue 'q2', the capacity is 2 for maps and 1 for reduce.
comment|// Since we're the only user, we should get tasks
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedTaskStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|populateExpectedStrings
argument_list|(
name|expectedTaskStrings
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedTaskStrings
argument_list|)
expr_stmt|;
comment|// Submit another job, from a different user
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"q2"
argument_list|,
literal|"u2"
argument_list|)
expr_stmt|;
comment|// Now if I ask for a task, it should come from the second job
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
comment|// Now we're at full capacity. If I ask for another task,
comment|// I should get tasks from the default queue's capacity.
name|populateExpectedStrings
argument_list|(
name|expectedTaskStrings
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedTaskStrings
argument_list|)
expr_stmt|;
comment|// and another
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|// test user limits when a 2nd job is submitted much after first job
DECL|method|testUserLimits2 ()
specifier|public
name|void
name|testUserLimits2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up some queues
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|,
literal|"q2"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"q2"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit a job
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"q2"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
comment|// for queue 'q2', the capacity for maps is 2 and reduce is 1.
comment|// Since we're the only user, we should get tasks
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedTaskStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|populateExpectedStrings
argument_list|(
name|expectedTaskStrings
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedTaskStrings
argument_list|)
expr_stmt|;
comment|// since we're the only job, we get another map
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
comment|// Submit another job, from a different user
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"q2"
argument_list|,
literal|"u2"
argument_list|)
expr_stmt|;
comment|// Now if I ask for a task, it should come from the second job
name|populateExpectedStrings
argument_list|(
name|expectedTaskStrings
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedTaskStrings
argument_list|)
expr_stmt|;
comment|// and another
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|// test user limits when a 2nd job is submitted much after first job
comment|// and we need to wait for first job's task to complete
DECL|method|testUserLimits3 ()
specifier|public
name|void
name|testUserLimits3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up some queues
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|,
literal|"q2"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"q2"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit a job
name|FakeJobInProgress
name|j1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"q2"
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// for queue 'q2', the capacity for maps is 2 and reduces is 1.
comment|// Since we're the only user, we should get a task
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedTaskStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|populateExpectedStrings
argument_list|(
name|expectedTaskStrings
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedTaskStrings
argument_list|)
expr_stmt|;
comment|// since we're the only job, we get another map
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
comment|// we get more tasks from 'default queue'
name|populateExpectedStrings
argument_list|(
name|expectedTaskStrings
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedTaskStrings
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000004_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Submit another job, from a different user
name|FakeJobInProgress
name|j2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"q2"
argument_list|,
literal|"u2"
argument_list|)
decl_stmt|;
comment|// one of the task finishes of each type
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_m_000001_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_r_000001_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
comment|// Now if I ask for a task, it should come from the second job
name|populateExpectedStrings
argument_list|(
name|expectedTaskStrings
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedTaskStrings
argument_list|)
expr_stmt|;
comment|// another task from job1 finishes, another new task to job2
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_m_000002_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
comment|// now we have equal number of tasks from each job. Whichever job's
comment|// task finishes, that job gets a new task
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_m_000003_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_r_000002_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
name|populateExpectedStrings
argument_list|(
name|expectedTaskStrings
argument_list|,
literal|"attempt_test_0001_m_000005_0 on tt2"
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedTaskStrings
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0002_m_000001_0"
argument_list|,
name|j2
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000003_0 on tt1"
argument_list|)
expr_stmt|;
block|}
comment|// test user limits with many users, more slots
DECL|method|testUserLimits4 ()
specifier|public
name|void
name|testUserLimits4
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up one queue, with 10 map slots and 5 reduce slots
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// add some more TTs
name|taskTrackerManager
operator|.
name|addTaskTracker
argument_list|(
literal|"tt3"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addTaskTracker
argument_list|(
literal|"tt4"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addTaskTracker
argument_list|(
literal|"tt5"
argument_list|)
expr_stmt|;
comment|// u1 submits job
name|FakeJobInProgress
name|j1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// it gets the first 5 slots
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedTaskStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|ttName
init|=
literal|"tt"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|populateExpectedStrings
argument_list|(
name|expectedTaskStrings
argument_list|,
literal|"attempt_test_0001_m_00000"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"_0 on "
operator|+
name|ttName
argument_list|,
literal|"attempt_test_0001_r_00000"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"_0 on "
operator|+
name|ttName
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
name|ttName
argument_list|,
name|expectedTaskStrings
argument_list|)
expr_stmt|;
block|}
comment|// u2 submits job with 4 slots
name|FakeJobInProgress
name|j2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|,
literal|"u2"
argument_list|)
decl_stmt|;
comment|// u2 should get next 4 slots
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|String
name|ttName
init|=
literal|"tt"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
name|ttName
argument_list|,
literal|"attempt_test_0002_m_00000"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"_0 on "
operator|+
name|ttName
argument_list|)
expr_stmt|;
block|}
comment|// last slot should go to u1, since u2 has no more tasks
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt5"
argument_list|,
literal|"attempt_test_0001_m_000006_0 on tt5"
argument_list|)
expr_stmt|;
comment|// u1 finishes tasks
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_m_000006_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_r_000005_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
comment|// u1 submits a few more jobs
comment|// All the jobs are inited when submitted
comment|// because of addition of Eager Job Initializer all jobs in this
comment|//case would e initialised.
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
comment|// u2 also submits a job
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
literal|"u2"
argument_list|)
expr_stmt|;
comment|// now u3 submits a job
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|"u3"
argument_list|)
expr_stmt|;
comment|// next map slot should go to u3, even though u2 has an earlier job, since
comment|// user limits have changed and u1/u2 are over limits
comment|// reduce slot will go to job 2, as it is still under limit.
name|populateExpectedStrings
argument_list|(
name|expectedTaskStrings
argument_list|,
literal|"attempt_test_0007_m_000001_0 on tt5"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt5"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt5"
argument_list|,
name|expectedTaskStrings
argument_list|)
expr_stmt|;
comment|// some other task finishes and u3 gets it
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0002_m_000004_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt4"
argument_list|,
literal|"attempt_test_0007_m_000002_0 on tt4"
argument_list|)
expr_stmt|;
comment|// now, u2 finishes a task
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0002_m_000002_0"
argument_list|,
name|j1
argument_list|)
expr_stmt|;
comment|// next slot will go to u1, since u3 has nothing to run and u1's job is
comment|// first in the queue
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000007_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify that high memory jobs hit user limits faster than any normal    * job.    *    * @throws IOException    */
DECL|method|testUserLimitsForHighMemoryJobs ()
specifier|public
name|void
name|testUserLimitsForHighMemoryJobs
parameter_list|()
throws|throws
name|IOException
block|{
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
comment|// enabled memory-based scheduling
comment|// Normal job in the cluster would be 1GB maps/reduces
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_MAPMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_REDUCEMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit one normal job to the other queue.
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit one high memory(2GB maps, 2GB reduces) job of "
operator|+
literal|"6 map and 6 reduce tasks"
argument_list|)
expr_stmt|;
name|jConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u2"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// Verify that normal job takes 5 task assignments to hit user limits
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_00000"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_00000"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
block|}
comment|// u1 has 5 map slots and 5 reduce slots. u2 has none. So u1's user limits
comment|// are hit. So u2 should get slots
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_00000"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_00000"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
block|}
comment|// u1 has 5 map slots and 5 reduce slots. u2 has 4 map slots and 4 reduce
comment|// slots. Because of high memory tasks, giving u2 another task would
comment|// overflow limits. So, no more tasks should be given to anyone.
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Following is the testing strategy for testing scheduling information.    * - start capacity scheduler with two queues.    * - check the scheduling information with respect to the configuration    * which was used to configure the queues.    * - Submit 5 jobs to a queue.    * - Check the waiting jobs count, it should be 5.    * - Then run initializationPoller()    * - Check once again the waiting queue, it should be 5 jobs again.    * - Then raise status change events.    * - Assign tasks to a task tracker.    * - Check waiting job count, it should be 4 now and used map (%) = 100    * and used reduce (%) = 100    * - finish the job and then check the used percentage it should go    * back to zero    * - Then pick an initialized job but not scheduled job and fail it.    * - Run the poller    * - Check the waiting job count should now be 3.    * - Now fail a job which has not been initialized at all.    * - Run the poller, so that it can clean up the job queue.    * - Check the count, the waiting job count should be 2.    * - Now raise status change events to move the initialized jobs which    * should be two in count to running queue.    * - Then schedule a map and reduce of the job in running queue.    * - Run the poller because the poller is responsible for waiting    * jobs count. Check the count, it should be using 100% map, reduce and one    * waiting job    * - fail the running job.    * - Check the count, it should be now one waiting job and zero running    * tasks    */
DECL|method|testSchedulingInformation ()
specifier|public
name|void
name|testSchedulingInformation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|,
literal|"q2"
block|}
decl_stmt|;
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"q2"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// heartbeat
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// heartbeat
name|int
name|totalMaps
init|=
name|taskTrackerManager
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getMaxMapTasks
argument_list|()
decl_stmt|;
name|int
name|totalReduces
init|=
name|taskTrackerManager
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getMaxReduceTasks
argument_list|()
decl_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|taskTrackerManager
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|String
name|schedulingInfo
init|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
decl_stmt|;
name|String
name|schedulingInfo2
init|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"q2"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
decl_stmt|;
name|String
index|[]
name|infoStrings
init|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
operator|.
name|length
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|0
index|]
argument_list|,
literal|"Queue configuration"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|1
index|]
argument_list|,
literal|"Capacity Percentage: 50.0%"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|2
index|]
argument_list|,
literal|"User Limit: 25%"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|3
index|]
argument_list|,
literal|"Priority Supported: YES"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|4
index|]
argument_list|,
literal|"-------------"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|5
index|]
argument_list|,
literal|"Map tasks"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|6
index|]
argument_list|,
literal|"Capacity: "
operator|+
name|totalMaps
operator|*
literal|50
operator|/
literal|100
operator|+
literal|" slots"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|7
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|8
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|9
index|]
argument_list|,
literal|"-------------"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|10
index|]
argument_list|,
literal|"Reduce tasks"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|11
index|]
argument_list|,
literal|"Capacity: "
operator|+
name|totalReduces
operator|*
literal|50
operator|/
literal|100
operator|+
literal|" slots"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|12
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|13
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|14
index|]
argument_list|,
literal|"-------------"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|15
index|]
argument_list|,
literal|"Job info"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|16
index|]
argument_list|,
literal|"Number of Waiting Jobs: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|17
index|]
argument_list|,
literal|"Number of users who have submitted jobs: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|schedulingInfo
argument_list|,
name|schedulingInfo2
argument_list|)
expr_stmt|;
comment|//Testing with actual job submission.
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
name|userJobs
init|=
name|taskTrackerManager
operator|.
name|submitJobs
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|"default"
argument_list|)
operator|.
name|get
argument_list|(
literal|"u1"
argument_list|)
decl_stmt|;
name|schedulingInfo
operator|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
expr_stmt|;
name|infoStrings
operator|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
comment|//waiting job should be equal to number of jobs submitted.
name|assertEquals
argument_list|(
name|infoStrings
operator|.
name|length
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|7
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|8
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|12
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|13
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|16
index|]
argument_list|,
literal|"Number of Waiting Jobs: 5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|17
index|]
argument_list|,
literal|"Number of users who have submitted jobs: 1"
argument_list|)
expr_stmt|;
comment|//Initalize the jobs but don't raise events
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
name|schedulingInfo
operator|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
expr_stmt|;
name|infoStrings
operator|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
operator|.
name|length
argument_list|,
literal|18
argument_list|)
expr_stmt|;
comment|//should be previous value as nothing is scheduled because no events
comment|//has been raised after initialization.
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|7
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|8
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|12
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|13
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|16
index|]
argument_list|,
literal|"Number of Waiting Jobs: 5"
argument_list|)
expr_stmt|;
comment|//Raise status change event so that jobs can move to running queue.
name|raiseStatusChangeEvents
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|)
expr_stmt|;
name|raiseStatusChangeEvents
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
comment|//assign one job
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|strs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|>
name|t1
init|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|strs
argument_list|)
decl_stmt|;
comment|//Initalize extra job.
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|//Get scheduling information, now the number of waiting job should have
comment|//changed to 4 as one is scheduled and has become running.
comment|// make sure we update our stats
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|schedulingInfo
operator|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
expr_stmt|;
name|infoStrings
operator|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
operator|.
name|length
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|7
index|]
argument_list|,
literal|"Used capacity: 1 (100.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|8
index|]
argument_list|,
literal|"Running tasks: 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|9
index|]
argument_list|,
literal|"Active users:"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|10
index|]
argument_list|,
literal|"User 'u1': 1 (100.0% of used capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|14
index|]
argument_list|,
literal|"Used capacity: 1 (100.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|15
index|]
argument_list|,
literal|"Running tasks: 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|20
index|]
argument_list|,
literal|"Number of Waiting Jobs: 4"
argument_list|)
expr_stmt|;
comment|// make sure we update our stats
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|schedulingInfo
operator|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
expr_stmt|;
name|infoStrings
operator|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
operator|.
name|length
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|7
index|]
argument_list|,
literal|"Used capacity: 1 (100.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|8
index|]
argument_list|,
literal|"Running tasks: 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|9
index|]
argument_list|,
literal|"Active users:"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|10
index|]
argument_list|,
literal|"User 'u1': 1 (100.0% of used capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|14
index|]
argument_list|,
literal|"Used capacity: 1 (100.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|15
index|]
argument_list|,
literal|"Running tasks: 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|16
index|]
argument_list|,
literal|"Active users:"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|17
index|]
argument_list|,
literal|"User 'u1': 1 (100.0% of used capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|20
index|]
argument_list|,
literal|"Number of Waiting Jobs: 4"
argument_list|)
expr_stmt|;
comment|//Complete the job and check the running tasks count
name|FakeJobInProgress
name|u1j1
init|=
name|userJobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|t1
control|)
block|{
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|u1j1
argument_list|)
expr_stmt|;
block|}
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|u1j1
argument_list|)
expr_stmt|;
comment|// make sure we update our stats
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|schedulingInfo
operator|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
expr_stmt|;
name|infoStrings
operator|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
operator|.
name|length
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|7
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|8
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|12
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|13
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|16
index|]
argument_list|,
literal|"Number of Waiting Jobs: 4"
argument_list|)
expr_stmt|;
comment|//Fail a job which is initialized but not scheduled and check the count.
name|FakeJobInProgress
name|u1j2
init|=
name|userJobs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"User1 job 2 not initalized "
argument_list|,
name|u1j2
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|u1j2
argument_list|,
name|JobStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|//Run initializer to clean up failed jobs
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|// make sure we update our stats
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|schedulingInfo
operator|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
expr_stmt|;
name|infoStrings
operator|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
operator|.
name|length
argument_list|,
literal|18
argument_list|)
expr_stmt|;
comment|//should be previous value as nothing is scheduled because no events
comment|//has been raised after initialization.
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|7
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|8
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|12
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|13
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|16
index|]
argument_list|,
literal|"Number of Waiting Jobs: 3"
argument_list|)
expr_stmt|;
comment|//Fail a job which is not initialized but is in the waiting queue.
name|FakeJobInProgress
name|u1j5
init|=
name|userJobs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"User1 job 5 initalized "
argument_list|,
name|u1j5
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|u1j5
argument_list|,
name|JobStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|//run initializer to clean up failed job
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|// make sure we update our stats
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|schedulingInfo
operator|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
expr_stmt|;
name|infoStrings
operator|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
operator|.
name|length
argument_list|,
literal|18
argument_list|)
expr_stmt|;
comment|//should be previous value as nothing is scheduled because no events
comment|//has been raised after initialization.
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|7
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|8
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|12
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|13
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|16
index|]
argument_list|,
literal|"Number of Waiting Jobs: 2"
argument_list|)
expr_stmt|;
comment|//Raise status change events as none of the intialized jobs would be
comment|//in running queue as we just failed the second job which was initialized
comment|//and completed the first one.
name|raiseStatusChangeEvents
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|)
expr_stmt|;
name|raiseStatusChangeEvents
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
comment|//Now schedule a map should be job3 of the user as job1 succeeded job2
comment|//failed and now job3 is running
name|strs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0003_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|t1
operator|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|strs
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|u1j3
init|=
name|userJobs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"User Job 3 not running "
argument_list|,
name|u1j3
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//now the running count of map should be one and waiting jobs should be
comment|//one. run the poller as it is responsible for waiting count
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|// make sure we update our stats
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|schedulingInfo
operator|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
expr_stmt|;
name|infoStrings
operator|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
operator|.
name|length
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|7
index|]
argument_list|,
literal|"Used capacity: 1 (100.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|8
index|]
argument_list|,
literal|"Running tasks: 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|9
index|]
argument_list|,
literal|"Active users:"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|10
index|]
argument_list|,
literal|"User 'u1': 1 (100.0% of used capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|14
index|]
argument_list|,
literal|"Used capacity: 1 (100.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|15
index|]
argument_list|,
literal|"Running tasks: 1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|16
index|]
argument_list|,
literal|"Active users:"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|17
index|]
argument_list|,
literal|"User 'u1': 1 (100.0% of used capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|20
index|]
argument_list|,
literal|"Number of Waiting Jobs: 1"
argument_list|)
expr_stmt|;
comment|//Fail the executing job
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|u1j3
argument_list|,
name|JobStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// make sure we update our stats
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
comment|//Now running counts should become zero
name|schedulingInfo
operator|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
expr_stmt|;
name|infoStrings
operator|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
operator|.
name|length
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|7
index|]
argument_list|,
literal|"Used capacity: 0 (0.0% of Capacity)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|8
index|]
argument_list|,
literal|"Running tasks: 0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|infoStrings
index|[
literal|16
index|]
argument_list|,
literal|"Number of Waiting Jobs: 1"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify that highMemoryJobs are scheduled like all other jobs when    * memory-based scheduling is not enabled.    *    * @throws IOException    */
DECL|method|testDisabledMemoryBasedScheduling ()
specifier|public
name|void
name|testDisabledMemoryBasedScheduling
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting the scheduler."
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
comment|// memory-based scheduling disabled by default.
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit one high memory job of 1 3GB map task "
operator|+
literal|"and 1 1GB reduce task."
argument_list|)
expr_stmt|;
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|3
operator|*
literal|1024L
argument_list|)
expr_stmt|;
comment|// 3GB
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|1
operator|*
literal|1024L
argument_list|)
expr_stmt|;
comment|// 1 GB
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
name|jConf
argument_list|)
expr_stmt|;
comment|// assert that all tasks are launched even though they transgress the
comment|// scheduling limits.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test reverting HADOOP-4979. If there is a high-mem job, we should now look    * at reduce jobs (if map tasks are high-mem) or vice-versa.    *    * @throws IOException    */
DECL|method|testHighMemoryBlockingAcrossTaskTypes ()
specifier|public
name|void
name|testHighMemoryBlockingAcrossTaskTypes
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 2 map and 1 reduce slots
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
comment|// enabled memory-based scheduling
comment|// Normal job in the cluster would be 1GB maps/reduces
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_MAPMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_REDUCEMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// The situation : Two jobs in the queue. First job with only maps and no
comment|// reduces and is a high memory job. Second job is a normal job with both
comment|// maps and reduces.
comment|// First job cannot run for want of memory for maps. In this case, second
comment|// job's reduces should run.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit one high memory(2GB maps, 0MB reduces) job of "
operator|+
literal|"2 map tasks"
argument_list|)
expr_stmt|;
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit another regular memory(1GB vmem maps/reduces) job of "
operator|+
literal|"2 map/red tasks"
argument_list|)
expr_stmt|;
name|jConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// first, a map from j1 and a reduce from other job j2
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|strs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|strs
argument_list|)
expr_stmt|;
comment|// Total 2 map slots should be accounted for.
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|checkMemReservedForTasksOnTT
argument_list|(
literal|"tt1"
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|,
literal|1
operator|*
literal|1024L
argument_list|)
expr_stmt|;
comment|//TT has 2 slots for reduces hence this call should get a reduce task
comment|//from other job
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|checkMemReservedForTasksOnTT
argument_list|(
literal|"tt1"
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|)
expr_stmt|;
comment|//now as all the slots are occupied hence no more tasks would be
comment|//assigned.
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that scheduler schedules normal jobs once high RAM jobs    * have been reserved to the limit.    *    * The test causes the scheduler to schedule a normal job on two    * trackers, and one task of the high RAM job on a third. Then it    * asserts that one of the first two trackers gets a reservation    * for the remaining task of the high RAM job. After this, it    * asserts that a normal job submitted later is allowed to run    * on a free slot, as all tasks of the high RAM job are either    * scheduled or reserved.    *    * @throws IOException    */
DECL|method|testClusterBlockingForLackOfMemory ()
specifier|public
name|void
name|testClusterBlockingForLackOfMemory
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting the scheduler."
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
comment|// enabled memory-based scheduling
comment|// Normal jobs 1GB maps/reduces. 2GB limit on maps/reduces
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_MAPMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_REDUCEMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit one normal memory(1GB maps/reduces) job of "
operator|+
literal|"2 map, 2 reduce tasks."
argument_list|)
expr_stmt|;
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// Fill a tt with this job's tasks.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
comment|// Total 1 map slot should be accounted for.
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|16.7f
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|16.7f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobQueue
operator|.
name|getJobQueueSchedInfo
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|job1
operator|.
name|getSchedulingInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkMemReservedForTasksOnTT
argument_list|(
literal|"tt1"
argument_list|,
literal|1
operator|*
literal|1024L
argument_list|,
literal|1
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
comment|// fill another TT with the rest of the tasks of the job
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit one high memory(2GB maps/reduces) job of "
operator|+
literal|"2 map, 2 reduce tasks."
argument_list|)
expr_stmt|;
name|jConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// Have another TT run one task of each type of the high RAM
comment|// job. This will fill up the TT.
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt3"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt3"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt3"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|66.7f
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|66.7f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobQueue
operator|.
name|getJobQueueSchedInfo
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkMemReservedForTasksOnTT
argument_list|(
literal|"tt3"
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit one normal memory(1GB maps/reduces) job of "
operator|+
literal|"1 map, 1 reduce tasks."
argument_list|)
expr_stmt|;
name|jConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job3
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// Send a TT with insufficient space for task assignment,
comment|// This will cause a reservation for the high RAM job.
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// reserved tasktrackers contribute to occupied slots for maps and reduces
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|checkMemReservedForTasksOnTT
argument_list|(
literal|"tt1"
argument_list|,
literal|1
operator|*
literal|1024L
argument_list|,
literal|1
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobQueue
operator|.
name|getJobQueueSchedInfo
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobQueue
operator|.
name|getJobQueueSchedInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|job3
operator|.
name|getSchedulingInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reservations are already done for job2. So job3 should go ahead.
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0003_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testcase to verify fix for a NPE (HADOOP-5641), when memory based    * scheduling is enabled and jobs are retired from memory when tasks    * are still active on some Tasktrackers.    *    * @throws IOException    */
DECL|method|testMemoryMatchingWithRetiredJobs ()
specifier|public
name|void
name|testMemoryMatchingWithRetiredJobs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// create a cluster with a single node.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting cluster with 1 tasktracker, 2 map and 2 reduce slots"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// create scheduler
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
comment|// enabled memory-based scheduling
name|LOG
operator|.
name|debug
argument_list|(
literal|"Assume TT has 2GB for maps and 2GB for reduces"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_MAPMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_REDUCEMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024L
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit a normal job
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submitting a normal job with 2 maps and 2 reduces"
argument_list|)
expr_stmt|;
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// 1st cycle - 1 map and reduce gets assigned.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|>
name|t
init|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
decl_stmt|;
comment|// Total 1 map slot and 1 reduce slot should be accounted for.
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|checkMemReservedForTasksOnTT
argument_list|(
literal|"tt1"
argument_list|,
literal|512L
argument_list|,
literal|512L
argument_list|)
expr_stmt|;
comment|// kill this job !
name|taskTrackerManager
operator|.
name|killJob
argument_list|(
name|job1
operator|.
name|getJobID
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// No more map/reduce slots should be accounted for.
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
comment|// retire the job
name|taskTrackerManager
operator|.
name|retireJob
argument_list|(
name|job1
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit another job.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submitting another normal job with 2 maps and 2 reduces"
argument_list|)
expr_stmt|;
name|jConf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// since with HADOOP-5964, we don't rely on a job conf to get
comment|// the memory occupied, scheduling should be able to work correctly.
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|>
name|t1
init|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
decl_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|checkMemReservedForTasksOnTT
argument_list|(
literal|"tt1"
argument_list|,
literal|1024L
argument_list|,
literal|1024L
argument_list|)
expr_stmt|;
comment|// now, no more can be assigned because all the slots are blocked.
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// finish the tasks on the tracker.
for|for
control|(
name|Task
name|task
range|:
name|t
control|)
block|{
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|job1
argument_list|)
expr_stmt|;
block|}
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt1"
argument_list|)
expr_stmt|;
comment|// now a new task can be assigned.
name|t
operator|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|checkOccupiedSlots
argument_list|(
literal|"default"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
comment|// memory used will change because of the finished task above.
name|checkMemReservedForTasksOnTT
argument_list|(
literal|"tt1"
argument_list|,
literal|1024L
argument_list|,
literal|1024L
argument_list|)
expr_stmt|;
block|}
comment|/*    * Test cases for Job Initialization poller.    */
comment|/*   * This test verifies that the correct number of jobs for   * correct number of users is initialized.   * It also verifies that as jobs of users complete, new jobs   * from the correct users are initialized.   */
DECL|method|testJobInitialization ()
specifier|public
name|void
name|testJobInitialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up the scheduler
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobQueuesManager
name|mgr
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
name|JobInitializationPoller
name|initPoller
init|=
name|scheduler
operator|.
name|getInitializationPoller
argument_list|()
decl_stmt|;
comment|// submit 4 jobs each for 3 users.
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
argument_list|>
name|userJobs
init|=
name|taskTrackerManager
operator|.
name|submitJobs
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
comment|// get the jobs submitted.
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
name|u1Jobs
init|=
name|userJobs
operator|.
name|get
argument_list|(
literal|"u1"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
name|u2Jobs
init|=
name|userJobs
operator|.
name|get
argument_list|(
literal|"u2"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
name|u3Jobs
init|=
name|userJobs
operator|.
name|get
argument_list|(
literal|"u3"
argument_list|)
decl_stmt|;
comment|// reference to the initializedJobs data structure
comment|// changes are reflected in the set as they are made by the poller
name|Set
argument_list|<
name|JobID
argument_list|>
name|initializedJobs
init|=
name|initPoller
operator|.
name|getInitializedJobList
argument_list|()
decl_stmt|;
comment|// we should have 12 (3 x 4) jobs in the job queue
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// run one poller iteration.
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|// the poller should initialize 6 jobs
comment|// 3 users and 2 jobs from each
name|assertEquals
argument_list|(
name|initializedJobs
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Initialized jobs didnt contain the user1 job 1"
argument_list|,
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u1Jobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Initialized jobs didnt contain the user1 job 2"
argument_list|,
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u1Jobs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Initialized jobs didnt contain the user2 job 1"
argument_list|,
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u2Jobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Initialized jobs didnt contain the user2 job 2"
argument_list|,
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u2Jobs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Initialized jobs didnt contain the user3 job 1"
argument_list|,
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u3Jobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Initialized jobs didnt contain the user3 job 2"
argument_list|,
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u3Jobs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// now submit one more job from another user.
name|FakeJobInProgress
name|u4j1
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"u4"
argument_list|)
decl_stmt|;
comment|// run the poller again.
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|// since no jobs have started running, there should be no
comment|// change to the initialized jobs.
name|assertEquals
argument_list|(
name|initializedJobs
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Initialized jobs contains user 4 jobs"
argument_list|,
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u4j1
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This event simulates raising the event on completion of setup task
comment|// and moves the job to the running list for the scheduler to pick up.
name|raiseStatusChangeEvents
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
comment|// get some tasks assigned.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|>
name|t1
init|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
decl_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Task
argument_list|>
name|t2
init|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|t1
control|)
block|{
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|u1Jobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Task
name|task
range|:
name|t2
control|)
block|{
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|u1Jobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// as some jobs have running tasks, the poller will now
comment|// pick up new jobs to initialize.
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|// count should still be the same
name|assertEquals
argument_list|(
name|initializedJobs
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// new jobs that have got into the list
name|assertTrue
argument_list|(
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u1Jobs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u1Jobs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|raiseStatusChangeEvents
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
comment|// the first two jobs are done, no longer in the initialized list.
name|assertFalse
argument_list|(
literal|"Initialized jobs contains the user1 job 1"
argument_list|,
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u1Jobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Initialized jobs contains the user1 job 2"
argument_list|,
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u1Jobs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0003_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
comment|// finish one more job
name|t1
operator|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|t1
control|)
block|{
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|u1Jobs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// no new jobs should be picked up, because max user limit
comment|// is still 3.
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|initializedJobs
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0004_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0004_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
comment|// run 1 more jobs..
name|t1
operator|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|t1
control|)
block|{
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|u1Jobs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now initialised jobs should contain user 4's job, as
comment|// user 1's jobs are all done and the number of users is
comment|// below the limit
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|initializedJobs
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|initializedJobs
operator|.
name|contains
argument_list|(
name|u4j1
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|controlledInitializationPoller
operator|.
name|stopRunning
argument_list|()
expr_stmt|;
block|}
comment|/*    * testHighPriorityJobInitialization() shows behaviour when high priority job    * is submitted into a queue and how initialisation happens for the same.    */
DECL|method|testHighPriorityJobInitialization ()
specifier|public
name|void
name|testHighPriorityJobInitialization
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobInitializationPoller
name|initPoller
init|=
name|scheduler
operator|.
name|getInitializationPoller
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|JobID
argument_list|>
name|initializedJobsList
init|=
name|initPoller
operator|.
name|getInitializedJobList
argument_list|()
decl_stmt|;
comment|// submit 3 jobs for 3 users
name|taskTrackerManager
operator|.
name|submitJobs
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|initializedJobsList
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// submit 2 job for a different user. one of them will be made high priority
name|FakeJobInProgress
name|u4j1
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"u4"
argument_list|)
decl_stmt|;
name|FakeJobInProgress
name|u4j2
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"u4"
argument_list|)
decl_stmt|;
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|// shouldn't change
name|assertEquals
argument_list|(
name|initializedJobsList
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Contains U4J1 high priority job "
argument_list|,
name|initializedJobsList
operator|.
name|contains
argument_list|(
name|u4j1
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Contains U4J2 Normal priority job "
argument_list|,
name|initializedJobsList
operator|.
name|contains
argument_list|(
name|u4j2
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// change priority of one job
name|taskTrackerManager
operator|.
name|setPriority
argument_list|(
name|u4j1
argument_list|,
name|JobPriority
operator|.
name|VERY_HIGH
argument_list|)
expr_stmt|;
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|// the high priority job should get initialized, but not the
comment|// low priority job from u4, as we have already exceeded the
comment|// limit.
name|assertEquals
argument_list|(
name|initializedJobsList
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Does not contain U4J1 high priority job "
argument_list|,
name|initializedJobsList
operator|.
name|contains
argument_list|(
name|u4j1
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Contains U4J2 Normal priority job "
argument_list|,
name|initializedJobsList
operator|.
name|contains
argument_list|(
name|u4j2
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|controlledInitializationPoller
operator|.
name|stopRunning
argument_list|()
expr_stmt|;
block|}
DECL|method|testJobMovement ()
specifier|public
name|void
name|testJobMovement
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobQueuesManager
name|mgr
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
comment|// check proper running job movement and completion
name|checkRunningJobMovementAndCompletion
argument_list|()
expr_stmt|;
comment|// check failed running job movement
name|checkFailedRunningJobMovement
argument_list|()
expr_stmt|;
comment|// Check job movement of failed initalized job
name|checkFailedInitializedJobMovement
argument_list|()
expr_stmt|;
comment|// Check failed waiting job movement
name|checkFailedWaitingJobMovement
argument_list|()
expr_stmt|;
block|}
DECL|method|testStartWithoutDefaultQueueConfigured ()
specifier|public
name|void
name|testStartWithoutDefaultQueueConfigured
parameter_list|()
throws|throws
name|Exception
block|{
comment|//configure a single queue which is not default queue
name|String
index|[]
name|qs
init|=
block|{
literal|"q1"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"q1"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
comment|//Start the scheduler.
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//Submit a job and wait till it completes
name|FakeJobInProgress
name|job
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"q1"
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
name|raiseStatusChangeEvents
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|,
literal|"q1"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|strs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|strs
argument_list|)
expr_stmt|;
block|}
DECL|method|testFailedJobInitalizations ()
specifier|public
name|void
name|testFailedJobInitalizations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobQueuesManager
name|mgr
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
comment|//Submit a job whose initialization would fail always.
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeFailingJobInProgress
argument_list|(
operator|new
name|JobID
argument_list|(
literal|"test"
argument_list|,
operator|++
name|jobCounter
argument_list|)
argument_list|,
operator|new
name|JobConf
argument_list|()
argument_list|,
name|taskTrackerManager
argument_list|,
literal|"u1"
argument_list|,
name|UtilsForTests
operator|.
name|getJobTracker
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|//check if job is present in waiting list.
name|assertEquals
argument_list|(
literal|"Waiting job list does not contain submitted job"
argument_list|,
literal|1
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Waiting job does not contain submitted job"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
comment|//initialization should fail now.
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|//Check if the job has been properly cleaned up.
name|assertEquals
argument_list|(
literal|"Waiting job list contains submitted job"
argument_list|,
literal|0
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Waiting job contains submitted job"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Waiting job contains submitted job"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getRunningJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case deals with normal jobs which have speculative maps and reduce.    * Following is test executed    *<ol>    *<li>Submit one job with speculative maps and reduce.</li>    *<li>Submit another job with no speculative execution.</li>    *<li>Observe that all tasks from first job get scheduled, speculative    * and normal tasks</li>    *<li>Finish all the first jobs tasks second jobs tasks get scheduled.</li>    *</ol>    *    * @throws IOException    */
DECL|method|testSpeculativeTaskScheduling ()
specifier|public
name|void
name|testSpeculativeTaskScheduling
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|}
decl_stmt|;
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|JobQueuesManager
name|mgr
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapSpeculativeExecution
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReduceSpeculativeExecution
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//Submit a job which would have one speculative map and one speculative
comment|//reduce.
name|FakeJobInProgress
name|fjob1
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//Submit a job which has no speculative map or reduce.
name|FakeJobInProgress
name|fjob2
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|//Ask the poller to initalize all the submitted job and raise status
comment|//change event.
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
name|raiseStatusChangeEvents
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|strs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|strs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Pending maps of job1 greater than zero"
argument_list|,
operator|(
name|fjob1
operator|.
name|pendingMaps
argument_list|()
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Pending reduces of job1 greater than zero"
argument_list|,
operator|(
name|fjob1
operator|.
name|pendingReduces
argument_list|()
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|str
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|str
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_1 on tt2"
argument_list|)
expr_stmt|;
name|str
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_1 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_m_000001_0"
argument_list|,
name|fjob1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_m_000001_1"
argument_list|,
name|fjob1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_r_000001_0"
argument_list|,
name|fjob1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_r_000001_1"
argument_list|,
name|fjob1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|fjob1
argument_list|)
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|str
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0002_m_000001_0"
argument_list|,
name|fjob2
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0002_r_000001_0"
argument_list|,
name|fjob2
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|fjob2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify that TTs are reserved for high memory jobs, but only till a    * TT is reserved for each of the pending task.    *    * @throws IOException    */
DECL|method|testTTReservingWithHighMemoryJobs ()
specifier|public
name|void
name|testTTReservingWithHighMemoryJobs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 3 taskTrackers, 2 map and 0 reduce slots on each TT
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
comment|// enabled memory-based scheduling
comment|// Normal job in the cluster would be 1GB maps/reduces
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_MAPMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_REDUCEMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit a regular memory(1GB vmem maps/reduces) job of "
operator|+
literal|"3 map/red tasks"
argument_list|)
expr_stmt|;
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// assign one map task of job1 on all the TTs
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt3"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt3"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|job1
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobQueue
operator|.
name|getJobQueueSchedInfo
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|job1
operator|.
name|getSchedulingInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit one high memory(2GB maps, 0MB reduces) job of "
operator|+
literal|"2 map tasks"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit another regular memory(1GB vmem maps/reduces) job of "
operator|+
literal|"2 map/red tasks"
argument_list|)
expr_stmt|;
name|jConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job3
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// Job2, a high memory job cannot be accommodated on a any TT. But with each
comment|// trip to the scheduler, each of the TT should be reserved by job2.
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobQueue
operator|.
name|getJobQueueSchedInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobQueue
operator|.
name|getJobQueueSchedInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Job2 has only 2 pending tasks. So no more reservations. Job3 should get
comment|// slots on tt3. tt1 and tt2 should not be assigned any slots with the
comment|// reservation stats intact.
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobQueue
operator|.
name|getJobQueueSchedInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobQueue
operator|.
name|getJobQueueSchedInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt3"
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt3"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JobQueue
operator|.
name|getJobQueueSchedInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|job2
operator|.
name|getSchedulingInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// No more tasks there in job3 also
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify that queue ordering is based on the number of slots occupied    * and hence to verify that presence of high memory jobs is reflected properly    * while determining used capacities of queues and hence the queue ordering.    *    * @throws IOException    */
DECL|method|testQueueOrdering ()
specifier|public
name|void
name|testQueueOrdering
parameter_list|()
throws|throws
name|IOException
block|{
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|,
literal|"q1"
block|}
decl_stmt|;
name|String
index|[]
name|reversedQs
init|=
block|{
name|qs
index|[
literal|1
index|]
block|,
name|qs
index|[
literal|0
index|]
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"q1"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// enabled memory-based scheduling
comment|// Normal job in the cluster would be 1GB maps/reduces
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_MAPMEMORY_MB
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_REDUCEMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|setLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Submit one high memory(2GB maps, 2GB reduces) job of "
operator|+
literal|"6 map and 6 reduce tasks"
argument_list|)
expr_stmt|;
name|JobConf
name|jConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job1
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// Submit a normal job to the other queue.
name|jConf
operator|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForMapTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setMemoryForReduceTask
argument_list|(
literal|1
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumMapTasks
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setUser
argument_list|(
literal|"u1"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setQueueName
argument_list|(
literal|"q1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|job2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jConf
argument_list|)
decl_stmt|;
comment|// Map and reduce of high memory job should be assigned
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|qs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|qs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1st map and reduce of normal job should be assigned
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|reversedQs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|reversedQs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2nd map and reduce of normal job should be assigned
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|reversedQs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|reversedQs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now both the queues are equally served. But the comparator doesn't change
comment|// the order if queues are equally served.
comment|// Hence, 3rd map and reduce of normal job should be assigned
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|reversedQs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|reversedQs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2nd map and reduce of high memory job should be assigned
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|qs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|qs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4th map and reduce of normal job should be assigned.
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000004_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000004_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|reversedQs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|checkQueuesOrder
argument_list|(
name|reversedQs
argument_list|,
name|scheduler
operator|.
name|getOrderedQueues
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests whether 1 map and 1 reduce are assigned even if reduces span across    * multiple jobs or multiple queues.    *    * creates a cluster of 6 maps and 2 reduces.    * Submits 2 jobs:    * job1 , with 6 map and 1 reduces    * job2 with  2 map and 1 reduces    *    *    * check that first assignment assigns a map and a reduce.    * check that second assignment assigns a map and a reduce    * (both from other job and other queue)    *    * the last 2 calls just checks to make sure that we dont get further reduces    *     * @throws Exception    */
DECL|method|testMultiTaskAssignmentInMultipleQueues ()
specifier|public
name|void
name|testMultiTaskAssignmentInMultipleQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|setUp
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// set up some queues
name|String
index|[]
name|qs
init|=
block|{
literal|"default"
block|,
literal|"q1"
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
name|qs
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"q1"
argument_list|,
literal|50.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//Submit the job with 6 maps and 2 reduces
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
name|FakeJobInProgress
name|j2
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|"q1"
argument_list|,
literal|"u2"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|str
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|str
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|str
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|str
argument_list|)
expr_stmt|;
comment|// next assignment will be for job in second queue.
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|str
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|str
argument_list|)
expr_stmt|;
comment|//now both the reduce slots are being used , hence we sholdnot get only 1
comment|//map task in this assignTasks call.
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRunningJobMovementAndCompletion ()
specifier|private
name|void
name|checkRunningJobMovementAndCompletion
parameter_list|()
throws|throws
name|IOException
block|{
name|JobQueuesManager
name|mgr
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
name|JobInitializationPoller
name|p
init|=
name|scheduler
operator|.
name|getInitializationPoller
argument_list|()
decl_stmt|;
comment|// submit a job
name|FakeJobInProgress
name|job
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getInitializedJobList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// make it running.
name|raiseStatusChangeEvents
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
comment|// it should be there in both the queues.
name|assertTrue
argument_list|(
literal|"Job not present in Job Queue"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job not present in Running Queue"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getRunningJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
comment|// assign a task
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|strs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|strs
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|strs
argument_list|)
expr_stmt|;
name|controlledInitializationPoller
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|// now this task should be removed from the initialized list.
name|assertTrue
argument_list|(
name|p
operator|.
name|getInitializedJobList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// the job should also be removed from the job queue as tasks
comment|// are scheduled
name|assertFalse
argument_list|(
literal|"Job present in Job Queue"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
comment|// complete tasks and job
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_m_000001_0"
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"attempt_test_0001_r_000001_0"
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// make sure it is removed from the run queue
name|assertFalse
argument_list|(
literal|"Job present in running queue"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getRunningJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailedRunningJobMovement ()
specifier|private
name|void
name|checkFailedRunningJobMovement
parameter_list|()
throws|throws
name|IOException
block|{
name|JobQueuesManager
name|mgr
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
comment|//submit a job and initalized the same
name|FakeJobInProgress
name|job
init|=
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|//check if the job is present in running queue.
name|assertTrue
argument_list|(
literal|"Running jobs list does not contain submitted job"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getRunningJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|job
argument_list|,
name|JobStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|//check if the job is properly removed from running queue.
name|assertFalse
argument_list|(
literal|"Running jobs list does not contain submitted job"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getRunningJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailedInitializedJobMovement ()
specifier|private
name|void
name|checkFailedInitializedJobMovement
parameter_list|()
throws|throws
name|IOException
block|{
name|JobQueuesManager
name|mgr
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
name|JobInitializationPoller
name|p
init|=
name|scheduler
operator|.
name|getInitializationPoller
argument_list|()
decl_stmt|;
comment|//submit a job
name|FakeJobInProgress
name|job
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|//Initialize the job
name|p
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|//Don't raise the status change event.
comment|//check in waiting and initialized jobs list.
name|assertTrue
argument_list|(
literal|"Waiting jobs list does not contain the job"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Initialized job does not contain the job"
argument_list|,
name|p
operator|.
name|getInitializedJobList
argument_list|()
operator|.
name|contains
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//fail the initalized job
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|job
argument_list|,
name|JobStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|//Check if the job is present in waiting queue
name|assertFalse
argument_list|(
literal|"Waiting jobs list contains failed job"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
comment|//run the poller to do the cleanup
name|p
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
comment|//check for failed job in the initialized job list
name|assertFalse
argument_list|(
literal|"Initialized jobs  contains failed job"
argument_list|,
name|p
operator|.
name|getInitializedJobList
argument_list|()
operator|.
name|contains
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailedWaitingJobMovement ()
specifier|private
name|void
name|checkFailedWaitingJobMovement
parameter_list|()
throws|throws
name|IOException
block|{
name|JobQueuesManager
name|mgr
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
comment|// submit a job
name|FakeJobInProgress
name|job
init|=
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// check in waiting and initialized jobs list.
name|assertTrue
argument_list|(
literal|"Waiting jobs list does not contain the job"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
comment|// fail the waiting job
name|taskTrackerManager
operator|.
name|finalizeJob
argument_list|(
name|job
argument_list|,
name|JobStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// Check if the job is present in waiting queue
name|assertFalse
argument_list|(
literal|"Waiting jobs list contains failed job"
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
operator|.
name|contains
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|raiseStatusChangeEvents (JobQueuesManager mgr)
specifier|private
name|void
name|raiseStatusChangeEvents
parameter_list|(
name|JobQueuesManager
name|mgr
parameter_list|)
block|{
name|raiseStatusChangeEvents
argument_list|(
name|mgr
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
DECL|method|raiseStatusChangeEvents (JobQueuesManager mgr, String queueName)
specifier|private
name|void
name|raiseStatusChangeEvents
parameter_list|(
name|JobQueuesManager
name|mgr
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|jips
init|=
name|mgr
operator|.
name|getJobQueue
argument_list|(
name|queueName
argument_list|)
operator|.
name|getWaitingJobs
argument_list|()
decl_stmt|;
for|for
control|(
name|JobInProgress
name|jip
range|:
name|jips
control|)
block|{
if|if
condition|(
name|jip
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
name|JobStatusChangeEvent
name|evt
init|=
operator|new
name|JobStatusChangeEvent
argument_list|(
name|jip
argument_list|,
name|EventType
operator|.
name|RUN_STATE_CHANGED
argument_list|,
name|jip
operator|.
name|getStatus
argument_list|()
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|jobUpdated
argument_list|(
name|evt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|tracker (String taskTrackerName)
specifier|protected
name|TaskTracker
name|tracker
parameter_list|(
name|String
name|taskTrackerName
parameter_list|)
block|{
return|return
name|taskTrackerManager
operator|.
name|getTaskTracker
argument_list|(
name|taskTrackerName
argument_list|)
return|;
block|}
comment|/**    * Get the amount of memory that is reserved for tasks on the taskTracker and    * verify that it matches what is expected.    *    * @param taskTracker    * @param expectedMemForMapsOnTT    * @param expectedMemForReducesOnTT    */
DECL|method|checkMemReservedForTasksOnTT ( String taskTracker, Long expectedMemForMapsOnTT, Long expectedMemForReducesOnTT)
specifier|private
name|void
name|checkMemReservedForTasksOnTT
parameter_list|(
name|String
name|taskTracker
parameter_list|,
name|Long
name|expectedMemForMapsOnTT
parameter_list|,
name|Long
name|expectedMemForReducesOnTT
parameter_list|)
block|{
name|Long
name|observedMemForMapsOnTT
init|=
name|scheduler
operator|.
name|memoryMatcher
operator|.
name|getMemReservedForTasks
argument_list|(
name|tracker
argument_list|(
name|taskTracker
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
decl_stmt|;
name|Long
name|observedMemForReducesOnTT
init|=
name|scheduler
operator|.
name|memoryMatcher
operator|.
name|getMemReservedForTasks
argument_list|(
name|tracker
argument_list|(
name|taskTracker
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedMemForMapsOnTT
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|observedMemForMapsOnTT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|observedMemForMapsOnTT
argument_list|,
name|expectedMemForMapsOnTT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedMemForReducesOnTT
operator|==
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|observedMemForReducesOnTT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|observedMemForReducesOnTT
argument_list|,
name|expectedMemForReducesOnTT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify the number of slots of type 'type' from the queue 'queue'.    * incrMapIndex and incrReduceIndex are set , when expected output string is    * changed.these values can be set if the index of    * "Used capacity: %d (%.1f%% of Capacity)"    * is changed.    *    * @param queue    * @param type    * @param numActiveUsers               in the queue at present.    * @param expectedOccupiedSlots    * @param expectedOccupiedSlotsPercent    * @param incrMapIndex    * @param incrReduceIndex    */
DECL|method|checkOccupiedSlots ( String queue, TaskType type, int numActiveUsers, int expectedOccupiedSlots, float expectedOccupiedSlotsPercent, int incrMapIndex, int incrReduceIndex)
specifier|private
name|void
name|checkOccupiedSlots
parameter_list|(
name|String
name|queue
parameter_list|,
name|TaskType
name|type
parameter_list|,
name|int
name|numActiveUsers
parameter_list|,
name|int
name|expectedOccupiedSlots
parameter_list|,
name|float
name|expectedOccupiedSlotsPercent
parameter_list|,
name|int
name|incrMapIndex
parameter_list|,
name|int
name|incrReduceIndex
parameter_list|)
block|{
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|taskTrackerManager
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|String
name|schedulingInfo
init|=
name|queueManager
operator|.
name|getJobQueueInfo
argument_list|(
name|queue
argument_list|)
operator|.
name|getSchedulingInfo
argument_list|()
decl_stmt|;
name|String
index|[]
name|infoStrings
init|=
name|schedulingInfo
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|index
operator|=
literal|7
operator|+
name|incrMapIndex
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
condition|)
block|{
name|index
operator|=
operator|(
name|numActiveUsers
operator|==
literal|0
condition|?
literal|12
else|:
literal|13
operator|+
name|numActiveUsers
operator|)
operator|+
name|incrReduceIndex
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|infoStrings
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Used capacity: %d (%.1f%% of Capacity)"
argument_list|,
name|expectedOccupiedSlots
argument_list|,
name|expectedOccupiedSlotsPercent
argument_list|)
argument_list|,
name|infoStrings
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param queue    * @param type    * @param numActiveUsers    * @param expectedOccupiedSlots    * @param expectedOccupiedSlotsPercent    */
DECL|method|checkOccupiedSlots ( String queue, TaskType type, int numActiveUsers, int expectedOccupiedSlots, float expectedOccupiedSlotsPercent )
specifier|private
name|void
name|checkOccupiedSlots
parameter_list|(
name|String
name|queue
parameter_list|,
name|TaskType
name|type
parameter_list|,
name|int
name|numActiveUsers
parameter_list|,
name|int
name|expectedOccupiedSlots
parameter_list|,
name|float
name|expectedOccupiedSlotsPercent
parameter_list|)
block|{
name|checkOccupiedSlots
argument_list|(
name|queue
argument_list|,
name|type
argument_list|,
name|numActiveUsers
argument_list|,
name|expectedOccupiedSlots
argument_list|,
name|expectedOccupiedSlotsPercent
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQueuesOrder ( String[] expectedOrder, String[] observedOrder)
specifier|private
name|void
name|checkQueuesOrder
parameter_list|(
name|String
index|[]
name|expectedOrder
parameter_list|,
name|String
index|[]
name|observedOrder
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Observed and expected queues are not of same length."
argument_list|,
name|expectedOrder
operator|.
name|length
operator|==
name|observedOrder
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|expectedQ
range|:
name|expectedOrder
control|)
block|{
name|assertTrue
argument_list|(
literal|"Observed and expected queues are not in the same order. "
operator|+
literal|"Differ at index "
operator|+
name|i
operator|+
literal|". Got "
operator|+
name|observedOrder
index|[
name|i
index|]
operator|+
literal|" instead of "
operator|+
name|expectedQ
argument_list|,
name|expectedQ
operator|.
name|equals
argument_list|(
name|observedOrder
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testDeprecatedMemoryValues ()
specifier|public
name|void
name|testDeprecatedMemoryValues
parameter_list|()
throws|throws
name|IOException
block|{
comment|// 2 map and 1 reduce slots
name|taskTrackerManager
operator|.
name|addQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"default"
block|}
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeQueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|queues
operator|.
name|add
argument_list|(
operator|new
name|FakeQueueInfo
argument_list|(
literal|"default"
argument_list|,
literal|100.0f
argument_list|,
literal|true
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
call|(
name|JobConf
call|)
argument_list|(
name|scheduler
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|UPPER_LIMIT_ON_TASK_VMEM_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|setFakeQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|MemoryMatcher
operator|.
name|getLimitMaxMemForMapSlot
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MemoryMatcher
operator|.
name|getLimitMaxMemForReduceSlot
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

