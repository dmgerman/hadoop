begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|CapacityTestUtils
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestContainerQueue
specifier|public
class|class
name|TestContainerQueue
extends|extends
name|TestCase
block|{
DECL|field|taskTrackerManager
name|CapacityTestUtils
operator|.
name|FakeTaskTrackerManager
name|taskTrackerManager
init|=
literal|null
decl_stmt|;
DECL|field|scheduler
name|CapacityTaskScheduler
name|scheduler
init|=
literal|null
decl_stmt|;
DECL|field|clock
name|CapacityTestUtils
operator|.
name|FakeClock
name|clock
init|=
literal|null
decl_stmt|;
name|CapacityTestUtils
operator|.
name|ControlledInitializationPoller
DECL|field|controlledInitializationPoller
name|controlledInitializationPoller
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|setUp
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp ( int numTaskTrackers, int numMapTasksPerTracker, int numReduceTasksPerTracker)
specifier|private
name|void
name|setUp
parameter_list|(
name|int
name|numTaskTrackers
parameter_list|,
name|int
name|numMapTasksPerTracker
parameter_list|,
name|int
name|numReduceTasksPerTracker
parameter_list|)
block|{
name|taskTrackerManager
operator|=
operator|new
name|CapacityTestUtils
operator|.
name|FakeTaskTrackerManager
argument_list|(
name|numTaskTrackers
argument_list|,
name|numMapTasksPerTracker
argument_list|,
name|numReduceTasksPerTracker
argument_list|)
expr_stmt|;
name|clock
operator|=
operator|new
name|CapacityTestUtils
operator|.
name|FakeClock
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|new
name|CapacityTaskScheduler
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
comment|// Don't let the JobInitializationPoller come in our way.
name|controlledInitializationPoller
operator|=
operator|new
name|CapacityTestUtils
operator|.
name|ControlledInitializationPoller
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|,
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setInitializationPoller
argument_list|(
name|controlledInitializationPoller
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setConf
argument_list|(
name|taskTrackerManager
operator|.
name|defaultJobConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * check the minCapacity distribution across children    * and grand children.    *<p/>    * Check for both capacity % and also actual no of slots allocated.    */
DECL|method|testMinCapacity ()
specifier|public
name|void
name|testMinCapacity
parameter_list|()
block|{
name|AbstractQueue
name|rt
init|=
name|QueueHierarchyBuilder
operator|.
name|createRootAbstractQueue
argument_list|()
decl_stmt|;
comment|//Simple check to make sure that capacity is properly distributed among
comment|// its children.
comment|//level 1 children
name|QueueSchedulingContext
name|a1
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"a"
argument_list|,
literal|25
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|a2
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"b"
argument_list|,
literal|25
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AbstractQueue
name|q
init|=
operator|new
name|ContainerQueue
argument_list|(
name|rt
argument_list|,
name|a1
argument_list|)
decl_stmt|;
name|AbstractQueue
name|ql
init|=
operator|new
name|ContainerQueue
argument_list|(
name|rt
argument_list|,
name|a2
argument_list|)
decl_stmt|;
comment|//level 2 children
name|QueueSchedulingContext
name|a
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"aa"
argument_list|,
literal|50
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|b
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"ab"
argument_list|,
literal|50
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|c
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"ac"
argument_list|,
literal|50
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|d
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"ad"
argument_list|,
literal|50
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AbstractQueue
name|q1
init|=
operator|new
name|JobQueue
argument_list|(
name|q
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|AbstractQueue
name|q2
init|=
operator|new
name|JobQueue
argument_list|(
name|q
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|AbstractQueue
name|q3
init|=
operator|new
name|JobQueue
argument_list|(
name|ql
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|AbstractQueue
name|q4
init|=
operator|new
name|JobQueue
argument_list|(
name|ql
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|rt
operator|.
name|update
argument_list|(
literal|1000
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|//share at level 0.
comment|// (1000 * 25) / 100
name|assertEquals
argument_list|(
name|q
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ql
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|250
argument_list|)
expr_stmt|;
comment|//share would be (1000 * 25 / 100 ) * (50 / 100)
name|assertEquals
argument_list|(
name|q1
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|125
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q2
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|125
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q3
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|125
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q4
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|125
argument_list|)
expr_stmt|;
comment|//
name|rt
operator|.
name|update
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ql
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//share would be (1000 * 25 / 100 ) * (50 / 100)
name|assertEquals
argument_list|(
name|q1
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q2
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q3
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q4
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxCapacity ()
specifier|public
name|void
name|testMaxCapacity
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|setUp
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addJobInProgressListener
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|)
expr_stmt|;
name|AbstractQueue
name|rt
init|=
name|QueueHierarchyBuilder
operator|.
name|createRootAbstractQueue
argument_list|()
decl_stmt|;
name|QueueSchedulingContext
name|a1
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"R.a"
argument_list|,
literal|25
argument_list|,
literal|50
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|a2
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"R.b"
argument_list|,
literal|25
argument_list|,
literal|30
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|a3
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"R.c"
argument_list|,
literal|50
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|//Test for max capacity
name|AbstractQueue
name|q
init|=
operator|new
name|JobQueue
argument_list|(
name|rt
argument_list|,
name|a1
argument_list|)
decl_stmt|;
name|AbstractQueue
name|q1
init|=
operator|new
name|JobQueue
argument_list|(
name|rt
argument_list|,
name|a2
argument_list|)
decl_stmt|;
name|AbstractQueue
name|q2
init|=
operator|new
name|JobQueue
argument_list|(
name|rt
argument_list|,
name|a3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|addQueue
argument_list|(
operator|(
name|JobQueue
operator|)
name|q
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|addQueue
argument_list|(
operator|(
name|JobQueue
operator|)
name|q1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|addQueue
argument_list|(
operator|(
name|JobQueue
operator|)
name|q2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setRoot
argument_list|(
name|rt
argument_list|)
expr_stmt|;
name|rt
operator|.
name|update
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
comment|// submit a job to the second queue
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|"R.a"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
comment|//Queue R.a should not more than 2 slots
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|taskTrackerManager
operator|.
name|getTaskTracker
argument_list|(
literal|"tt3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDistributedUnConfiguredCapacity ()
specifier|public
name|void
name|testDistributedUnConfiguredCapacity
parameter_list|()
block|{
name|AbstractQueue
name|rt
init|=
name|QueueHierarchyBuilder
operator|.
name|createRootAbstractQueue
argument_list|()
decl_stmt|;
comment|//generate Queuecontext for the children
name|QueueSchedulingContext
name|a1
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"a"
argument_list|,
literal|50
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|a2
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"b"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AbstractQueue
name|rtChild1
init|=
operator|new
name|ContainerQueue
argument_list|(
name|rt
argument_list|,
name|a1
argument_list|)
decl_stmt|;
name|AbstractQueue
name|rtChild2
init|=
operator|new
name|ContainerQueue
argument_list|(
name|rt
argument_list|,
name|a2
argument_list|)
decl_stmt|;
comment|//Add further children to rtChild1.
name|QueueSchedulingContext
name|b
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"ab"
argument_list|,
literal|30
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|c
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"ac"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|d
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"ad"
argument_list|,
literal|100
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AbstractQueue
name|q0
init|=
operator|new
name|JobQueue
argument_list|(
name|rtChild1
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|AbstractQueue
name|q1
init|=
operator|new
name|JobQueue
argument_list|(
name|rtChild1
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|AbstractQueue
name|q2
init|=
operator|new
name|JobQueue
argument_list|(
name|rtChild2
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|rt
operator|.
name|distributeUnConfiguredCapacity
argument_list|()
expr_stmt|;
comment|//after distribution the rtChild2 capacity should be 50.
name|assertEquals
argument_list|(
name|rtChild2
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getCapacityPercent
argument_list|()
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
comment|//Now check the capacity of q1. It should be 60%.
name|assertTrue
argument_list|(
name|q1
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getCapacityPercent
argument_list|()
operator|==
literal|70
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpHierarchy ()
specifier|private
name|Map
name|setUpHierarchy
parameter_list|()
block|{
return|return
name|setUpHierarchy
argument_list|(
literal|60
argument_list|,
literal|40
argument_list|,
literal|80
argument_list|,
literal|20
argument_list|)
return|;
block|}
comment|/**    * @param a capacity for sch q    * @param b capacity for gta q    * @param c capacity for sch.prod q    * @param d capacity for sch.misc q    * @return    */
DECL|method|setUpHierarchy ( int a, int b, int c, int d)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractQueue
argument_list|>
name|setUpHierarchy
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|c
parameter_list|,
name|int
name|d
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|AbstractQueue
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AbstractQueue
argument_list|>
argument_list|()
decl_stmt|;
name|AbstractQueue
name|rt
init|=
name|QueueHierarchyBuilder
operator|.
name|createRootAbstractQueue
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|rt
operator|.
name|getName
argument_list|()
argument_list|,
name|rt
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setRoot
argument_list|(
name|rt
argument_list|)
expr_stmt|;
comment|// Create 2 levels of hierarchy.
comment|//Firt level
name|QueueSchedulingContext
name|sch
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"rt.sch"
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|gta
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"rt.gta"
argument_list|,
name|b
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AbstractQueue
name|schq
init|=
operator|new
name|ContainerQueue
argument_list|(
name|rt
argument_list|,
name|sch
argument_list|)
decl_stmt|;
comment|//Cannot declare a ContainerQueue if no children.
name|AbstractQueue
name|gtaq
init|=
operator|new
name|JobQueue
argument_list|(
name|rt
argument_list|,
name|gta
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|schq
operator|.
name|getName
argument_list|()
argument_list|,
name|schq
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|gtaq
operator|.
name|getName
argument_list|()
argument_list|,
name|gtaq
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|addQueue
argument_list|(
operator|(
name|JobQueue
operator|)
name|gtaq
argument_list|)
expr_stmt|;
comment|//Create further children.
name|QueueSchedulingContext
name|prod
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"rt.sch.prod"
argument_list|,
name|c
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QueueSchedulingContext
name|misc
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|"rt.sch.misc"
argument_list|,
name|d
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AbstractQueue
name|prodq
init|=
operator|new
name|JobQueue
argument_list|(
name|schq
argument_list|,
name|prod
argument_list|)
decl_stmt|;
name|AbstractQueue
name|miscq
init|=
operator|new
name|JobQueue
argument_list|(
name|schq
argument_list|,
name|misc
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|prodq
operator|.
name|getName
argument_list|()
argument_list|,
name|prodq
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|miscq
operator|.
name|getName
argument_list|()
argument_list|,
name|miscq
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|addQueue
argument_list|(
operator|(
name|JobQueue
operator|)
name|prodq
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|jobQueuesManager
operator|.
name|addQueue
argument_list|(
operator|(
name|JobQueue
operator|)
name|miscq
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/**    * Verifies that capacities are allocated properly in hierarchical queues.    *     * The test case sets up a hierarchy of queues and submits jobs to     * all the queues. It verifies that computation of capacities, sorting,    * etc are working correctly.    * @throws Exception    */
DECL|method|testCapacityAllocationInHierarchicalQueues ()
specifier|public
name|void
name|testCapacityAllocationInHierarchicalQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|setUp
argument_list|(
literal|9
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addJobInProgressListener
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|)
expr_stmt|;
comment|// set up some queues
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractQueue
argument_list|>
name|map
init|=
name|setUpHierarchy
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
comment|// verify initial capacity distribution
name|TaskSchedulingContext
name|mapTsc
init|=
name|map
operator|.
name|get
argument_list|(
literal|"rt.gta"
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|mapTsc
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mapTsc
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"rt.sch"
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|mapTsc
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|mapTsc
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"rt.sch.prod"
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|mapTsc
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mapTsc
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"rt.sch.misc"
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|mapTsc
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
comment|//Only Allow job submission to leaf queue
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|"rt.sch.prod"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
comment|// submit a job to the second queue
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|"rt.sch.misc"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
comment|//submit a job in gta level queue
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|"rt.gta"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0003_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt3"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt3"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt3"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0003_m_000002_0 on tt4"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0003_r_000002_0 on tt4"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt4"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt5"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt5"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt5"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt6"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt6"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt6"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|4
block|,
literal|3
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0003_m_000003_0 on tt7"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0003_r_000003_0 on tt7"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt7"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000004_0 on tt8"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000004_0 on tt8"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt8"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|5
block|,
literal|4
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt9"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|CapacityTestUtils
operator|.
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt9"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt9"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to make sure that capacity is divided at each level properly.    *    * The test case sets up a two level hierarchy of queues as follows:    *   - rt.sch    *     - rt.sch.prod    *     - rt.sch.misc    *   - rt.gta      * Jobs are submitted to rt.sch.misc and rt.gta, and the test verifies     * that as long as rt.sch is below rt.gta's capacity, it still gets     * allocated slots even if rt.sch.misc is over its capacity.     * @throws IOException    */
DECL|method|testHierarchicalCapacityAllocation ()
specifier|public
name|void
name|testHierarchicalCapacityAllocation
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|setUp
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|addJobInProgressListener
argument_list|(
name|scheduler
operator|.
name|jobQueuesManager
argument_list|)
expr_stmt|;
comment|// set up some queues
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractQueue
argument_list|>
name|map
init|=
name|setUpHierarchy
argument_list|(
literal|70
argument_list|,
literal|30
argument_list|,
literal|80
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
comment|// verify capacities as per the setup.
name|TaskSchedulingContext
name|mapTSC
init|=
name|map
operator|.
name|get
argument_list|(
literal|"rt.gta"
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|mapTSC
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mapTSC
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"rt.sch"
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|mapTSC
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|mapTSC
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"rt.sch.prod"
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|mapTSC
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mapTSC
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"rt.sch.misc"
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|mapTSC
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
comment|// submit a job to the second queue
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|"rt.sch.misc"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
comment|//submit a job in gta level queue
name|taskTrackerManager
operator|.
name|submitJobAndInit
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|"rt.gta"
argument_list|,
literal|"u1"
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt1"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt2"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt3"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt3"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt3"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|0
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt4"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt4"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt4"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|0
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt5"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt5"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt5"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|0
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000004_0 on tt6"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000004_0 on tt6"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt6"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|4
block|,
literal|0
block|,
literal|4
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000005_0 on tt7"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000005_0 on tt7"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt7"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
name|assertUsedCapacity
argument_list|(
name|map
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rt.gta"
block|,
literal|"rt.sch"
block|,
literal|"rt.sch.prod"
block|,
literal|"rt.sch.misc"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|5
block|,
literal|0
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
comment|//============================================
name|expectedStrings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
literal|"attempt_test_0001_m_000006_0 on tt8"
argument_list|)
expr_stmt|;
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
literal|"attempt_test_0001_r_000006_0 on tt8"
argument_list|)
expr_stmt|;
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
literal|"tt8"
argument_list|,
name|expectedStrings
argument_list|)
expr_stmt|;
block|}
comment|// verify that the number of slots used for each queue
comment|// matches the expected value.
DECL|method|assertUsedCapacity (Map<String, AbstractQueue> queueMap, String[] queueNames, int[] expectedUsedSlots)
specifier|private
name|void
name|assertUsedCapacity
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractQueue
argument_list|>
name|queueMap
parameter_list|,
name|String
index|[]
name|queueNames
parameter_list|,
name|int
index|[]
name|expectedUsedSlots
parameter_list|)
block|{
name|scheduler
operator|.
name|updateContextInfoForTests
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|queueNames
operator|.
name|length
argument_list|,
name|expectedUsedSlots
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queueNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TaskSchedulingContext
name|mapTSC
init|=
name|queueMap
operator|.
name|get
argument_list|(
name|queueNames
index|[
name|i
index|]
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|mapTSC
operator|.
name|getNumSlotsOccupied
argument_list|()
argument_list|,
name|expectedUsedSlots
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

