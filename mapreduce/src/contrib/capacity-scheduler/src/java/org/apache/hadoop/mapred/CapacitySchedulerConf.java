begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * Class providing access to Capacity scheduler configuration and default values  * for queue-configuration. Capacity scheduler configuration includes settings  * for the {@link JobInitializationPoller} and default values for queue  * configuration. These are read from the file  * {@link CapacitySchedulerConf#SCHEDULER_CONF_FILE} on the CLASSPATH. The main  * queue configuration is defined in the file  * {@link QueueManager#QUEUE_CONF_FILE_NAME} on the CLASSPATH.  *   *<p>  *   * This class also provides APIs to get and set the configuration for the  * queues.  */
end_comment

begin_class
DECL|class|CapacitySchedulerConf
class|class
name|CapacitySchedulerConf
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CapacitySchedulerConf
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CAPACITY_PROPERTY
specifier|static
specifier|final
name|String
name|CAPACITY_PROPERTY
init|=
literal|"capacity"
decl_stmt|;
DECL|field|SUPPORTS_PRIORITY_PROPERTY
specifier|static
specifier|final
name|String
name|SUPPORTS_PRIORITY_PROPERTY
init|=
literal|"supports-priority"
decl_stmt|;
DECL|field|MAXIMUM_INITIALIZED_JOBS_PER_USER_PROPERTY
specifier|static
specifier|final
name|String
name|MAXIMUM_INITIALIZED_JOBS_PER_USER_PROPERTY
init|=
literal|"maximum-initialized-jobs-per-user"
decl_stmt|;
DECL|field|MINIMUM_USER_LIMIT_PERCENT_PROPERTY
specifier|static
specifier|final
name|String
name|MINIMUM_USER_LIMIT_PERCENT_PROPERTY
init|=
literal|"minimum-user-limit-percent"
decl_stmt|;
comment|/** Default file name from which the capacity scheduler configuration is read. */
DECL|field|SCHEDULER_CONF_FILE
specifier|public
specifier|static
specifier|final
name|String
name|SCHEDULER_CONF_FILE
init|=
literal|"capacity-scheduler.xml"
decl_stmt|;
DECL|field|defaultUlimitMinimum
specifier|private
name|int
name|defaultUlimitMinimum
decl_stmt|;
DECL|field|defaultSupportPriority
specifier|private
name|boolean
name|defaultSupportPriority
decl_stmt|;
DECL|field|QUEUE_CONF_PROPERTY_NAME_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_CONF_PROPERTY_NAME_PREFIX
init|=
literal|"mapred.capacity-scheduler.queue."
decl_stmt|;
DECL|field|queueProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|queueProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * If {@link JobConf#MAPRED_TASK_MAXPMEM_PROPERTY} is set to    * {@link JobConf#DISABLED_MEMORY_LIMIT}, this configuration will be used to    * calculate job's physical memory requirements as a percentage of the job's    * virtual memory requirements set via    * {@link JobConf#setMaxVirtualMemoryForTask()}. This property thus provides    * default value of physical memory for job's that don't explicitly specify    * physical memory requirements.    *<p/>    * It defaults to {@link JobConf#DISABLED_MEMORY_LIMIT} and if not explicitly    * set to a valid value, scheduler will not consider physical memory for    * scheduling even if virtual memory based scheduling is enabled.    *    * @deprecated    */
annotation|@
name|Deprecated
DECL|field|DEFAULT_PERCENTAGE_OF_PMEM_IN_VMEM_PROPERTY
specifier|static
name|String
name|DEFAULT_PERCENTAGE_OF_PMEM_IN_VMEM_PROPERTY
init|=
literal|"mapred.capacity-scheduler.task.default-pmem-percentage-in-vmem"
decl_stmt|;
comment|/**    * Configuration that provides an upper limit on the maximum physical memory    * that can be specified by a job. The job configuration    * {@link JobConf#MAPRED_TASK_MAXPMEM_PROPERTY} should,    * by definition, be less than this value. If not, the job will be rejected    * by the scheduler. If it is set to {@link JobConf#DISABLED_MEMORY_LIMIT},    * scheduler will not consider physical memory for scheduling even if virtual    * memory based scheduling is enabled.    *    * @deprecated    */
annotation|@
name|Deprecated
DECL|field|UPPER_LIMIT_ON_TASK_PMEM_PROPERTY
specifier|static
specifier|final
name|String
name|UPPER_LIMIT_ON_TASK_PMEM_PROPERTY
init|=
literal|"mapred.capacity-scheduler.task.limit.maxpmem"
decl_stmt|;
comment|/**    * A maximum capacity defines a limit beyond which a sub-queue    * cannot use the capacity of its parent queue.    */
DECL|field|MAX_CAPACITY_PROPERTY
specifier|static
specifier|final
name|String
name|MAX_CAPACITY_PROPERTY
init|=
literal|"maximum-capacity"
decl_stmt|;
comment|/**    * The constant which defines the default initialization thread    * polling interval, denoted in milliseconds.    */
DECL|field|INITIALIZATION_THREAD_POLLING_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|INITIALIZATION_THREAD_POLLING_INTERVAL
init|=
literal|5000
decl_stmt|;
comment|/**    * The constant which defines the maximum number of worker threads to be    * spawned off for job initialization    */
DECL|field|MAX_INITIALIZATION_WORKER_THREADS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_INITIALIZATION_WORKER_THREADS
init|=
literal|5
decl_stmt|;
DECL|field|rmConf
specifier|private
name|Configuration
name|rmConf
decl_stmt|;
DECL|field|defaultMaxJobsPerUsersToInitialize
specifier|private
name|int
name|defaultMaxJobsPerUsersToInitialize
decl_stmt|;
comment|/**    * Create a new CapacitySchedulerConf.    * This method reads from the default configuration file mentioned in    * {@link SCHEDULER_CONF_FILE}, that must be present in the classpath of the    * application.    */
DECL|method|CapacitySchedulerConf ()
specifier|public
name|CapacitySchedulerConf
parameter_list|()
block|{
name|rmConf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getCSConf
argument_list|()
operator|.
name|addResource
argument_list|(
name|SCHEDULER_CONF_FILE
argument_list|)
expr_stmt|;
name|initializeDefaults
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a new CapacitySchedulerConf reading the specified configuration    * file.    *     * @param configFile {@link Path} to the configuration file containing    * the Capacity scheduler configuration.    */
DECL|method|CapacitySchedulerConf (Path configFile)
specifier|public
name|CapacitySchedulerConf
parameter_list|(
name|Path
name|configFile
parameter_list|)
block|{
name|rmConf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getCSConf
argument_list|()
operator|.
name|addResource
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
name|initializeDefaults
argument_list|()
expr_stmt|;
block|}
comment|/*    * Method used to initialize the default values and the queue list    * which is used by the Capacity Scheduler.    */
DECL|method|initializeDefaults ()
specifier|private
name|void
name|initializeDefaults
parameter_list|()
block|{
name|defaultUlimitMinimum
operator|=
name|getCSConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"mapred.capacity-scheduler.default-minimum-user-limit-percent"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|defaultSupportPriority
operator|=
name|getCSConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"mapred.capacity-scheduler.default-supports-priority"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|defaultMaxJobsPerUsersToInitialize
operator|=
name|getCSConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"mapred.capacity-scheduler.default-maximum-initialized-jobs-per-user"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|setProperties (String queueName , Properties properties)
name|void
name|setProperties
parameter_list|(
name|String
name|queueName
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|queueProperties
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the percentage of the cluster for the specified queue.    *     * This method defaults to configured default Capacity if    * no value is specified in the configuration for this queue.     * If the configured capacity is negative value or greater than 100 an    * {@link IllegalArgumentException} is thrown.    *     * If default capacity is not configured for a queue, then    * system allocates capacity based on what is free at the time of     * capacity scheduler start    *     *     * @param queue name of the queue    * @return percent of the cluster for the queue.    */
DECL|method|getCapacity (String queue)
specifier|public
name|float
name|getCapacity
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
comment|//Check done in order to return default capacity which can be negative
comment|//In case of both capacity and default capacity not configured.
comment|//Last check is if the configuration is specified and is marked as
comment|//negative we throw exception
name|String
name|raw
init|=
name|getProperty
argument_list|(
name|queue
argument_list|,
name|CAPACITY_PROPERTY
argument_list|)
decl_stmt|;
name|float
name|result
init|=
name|this
operator|.
name|getFloat
argument_list|(
name|raw
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>
literal|100.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal capacity for queue "
operator|+
name|queue
operator|+
literal|" of "
operator|+
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getProperty (String queue,String property)
name|String
name|getProperty
parameter_list|(
name|String
name|queue
parameter_list|,
name|String
name|property
parameter_list|)
block|{
if|if
condition|(
operator|!
name|queueProperties
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid queuename "
operator|+
name|queue
argument_list|)
throw|;
comment|//This check is still required as sometimes we create queue with null
comment|//This is typically happens in case of test.
if|if
condition|(
name|queueProperties
operator|.
name|get
argument_list|(
name|queue
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|queueProperties
operator|.
name|get
argument_list|(
name|queue
argument_list|)
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Return the maximum percentage of the cluster capacity that can be    * used by the given queue    * This percentage defines a limit beyond which a    * sub-queue cannot use the capacity of its parent queue.    * This provides a means to limit how much excess capacity a    * sub-queue can use. By default, there is no limit.    *    * The maximum-capacity-stretch of a queue can only be    * greater than or equal to its minimum capacity.    *     * @param queue name of the queue    * @return maximum capacity percent of cluster for the queue    */
DECL|method|getMaxCapacity (String queue)
specifier|public
name|float
name|getMaxCapacity
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|String
name|raw
init|=
name|getProperty
argument_list|(
name|queue
argument_list|,
name|MAX_CAPACITY_PROPERTY
argument_list|)
decl_stmt|;
name|float
name|result
init|=
name|getFloat
argument_list|(
name|raw
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|result
operator|=
operator|(
name|result
operator|<=
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
name|result
expr_stmt|;
if|if
condition|(
name|result
operator|>
literal|100.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal maximum-capacity-stretch "
operator|+
literal|"for queue "
operator|+
name|queue
operator|+
literal|" of "
operator|+
name|result
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|result
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
name|result
operator|<
name|getCapacity
argument_list|(
name|queue
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maximum-capacity-stretch "
operator|+
literal|"for a queue should be greater than capacity "
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get whether priority is supported for this queue.    *     * If this value is false, then job priorities will be ignored in     * scheduling decisions. This method defaults to<code>false</code> if     * the property is not configured for this queue.     * @param queue name of the queue    * @return Whether this queue supports priority or not.    */
DECL|method|isPrioritySupported (String queue)
specifier|public
name|boolean
name|isPrioritySupported
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|String
name|raw
init|=
name|getProperty
argument_list|(
name|queue
argument_list|,
name|SUPPORTS_PRIORITY_PROPERTY
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|raw
argument_list|)
return|;
block|}
comment|/**    * Get the minimum limit of resources for any user submitting jobs in     * this queue, in percentage.    *     * This method defaults to default user limit configured if    * no value is specified in the configuration for this queue.    *     * Throws an {@link IllegalArgumentException} when invalid value is     * configured.    *     * @param queue name of the queue    * @return minimum limit of resources, in percentage, that will be     * available for a user.    *     */
DECL|method|getMinimumUserLimitPercent (String queue)
specifier|public
name|int
name|getMinimumUserLimitPercent
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|String
name|raw
init|=
name|getProperty
argument_list|(
name|queue
argument_list|,
name|MINIMUM_USER_LIMIT_PERCENT_PROPERTY
argument_list|)
decl_stmt|;
name|int
name|userLimit
init|=
name|getInt
argument_list|(
name|raw
argument_list|,
name|defaultUlimitMinimum
argument_list|)
decl_stmt|;
if|if
condition|(
name|userLimit
operator|<=
literal|0
operator|||
name|userLimit
operator|>
literal|100
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid user limit : "
operator|+
name|userLimit
operator|+
literal|" for queue : "
operator|+
name|queue
argument_list|)
throw|;
block|}
return|return
name|userLimit
return|;
block|}
DECL|method|toFullPropertyName (String queue, String property)
specifier|static
specifier|final
name|String
name|toFullPropertyName
parameter_list|(
name|String
name|queue
parameter_list|,
name|String
name|property
parameter_list|)
block|{
return|return
name|QUEUE_CONF_PROPERTY_NAME_PREFIX
operator|+
name|queue
operator|+
literal|"."
operator|+
name|property
return|;
block|}
comment|/**    * Gets the maximum number of jobs which are allowed to initialize in the    * job queue.    *     * @param queue queue name.    * @return maximum number of jobs allowed to be initialized per user.    * @throws IllegalArgumentException if maximum number of users is negative    * or zero.    */
DECL|method|getMaxJobsPerUserToInitialize (String queue)
specifier|public
name|int
name|getMaxJobsPerUserToInitialize
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|String
name|raw
init|=
name|getProperty
argument_list|(
name|queue
argument_list|,
name|MAXIMUM_INITIALIZED_JOBS_PER_USER_PROPERTY
argument_list|)
decl_stmt|;
name|int
name|maxJobsPerUser
init|=
name|getInt
argument_list|(
name|raw
argument_list|,
name|defaultMaxJobsPerUsersToInitialize
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxJobsPerUser
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid maximum jobs per user configuration "
operator|+
name|maxJobsPerUser
argument_list|)
throw|;
block|}
return|return
name|maxJobsPerUser
return|;
block|}
comment|/**    * Amount of time in milliseconds which poller thread and initialization    * thread would sleep before looking at the queued jobs.    *     * The default value if no corresponding configuration is present is    * 5000 Milliseconds.    *      * @return time in milliseconds.    * @throws IllegalArgumentException if time is negative or zero.    */
DECL|method|getSleepInterval ()
specifier|public
name|long
name|getSleepInterval
parameter_list|()
block|{
name|long
name|sleepInterval
init|=
name|getCSConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"mapred.capacity-scheduler.init-poll-interval"
argument_list|,
name|INITIALIZATION_THREAD_POLLING_INTERVAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|sleepInterval
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid initializater poller interval "
operator|+
name|sleepInterval
argument_list|)
throw|;
block|}
return|return
name|sleepInterval
return|;
block|}
comment|/**    * Gets maximum number of threads which are spawned to initialize jobs    * in job queue in  parallel. The number of threads should be always less than    * or equal to number of job queues present.    *     * If number of threads is configured to be more than job queues present,    * then number of job queues is used as number of threads used for initializing    * jobs.    *     * So a given thread can have responsibility of initializing jobs from more     * than one queue.    *     * The default value is 5    *     * @return maximum number of threads spawned to initialize jobs in job queue    * in parallel.    */
DECL|method|getMaxWorkerThreads ()
specifier|public
name|int
name|getMaxWorkerThreads
parameter_list|()
block|{
name|int
name|maxWorkerThreads
init|=
name|getCSConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"mapred.capacity-scheduler.init-worker-threads"
argument_list|,
name|MAX_INITIALIZATION_WORKER_THREADS
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxWorkerThreads
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid initializater worker thread number "
operator|+
name|maxWorkerThreads
argument_list|)
throw|;
block|}
return|return
name|maxWorkerThreads
return|;
block|}
DECL|method|getCSConf ()
specifier|public
name|Configuration
name|getCSConf
parameter_list|()
block|{
return|return
name|rmConf
return|;
block|}
DECL|method|getFloat (String valueString,float defaultValue)
name|float
name|getFloat
parameter_list|(
name|String
name|valueString
parameter_list|,
name|float
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|valueString
operator|==
literal|null
condition|)
return|return
name|defaultValue
return|;
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|valueString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
DECL|method|getInt (String valueString,int defaultValue)
name|int
name|getInt
parameter_list|(
name|String
name|valueString
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|valueString
operator|==
literal|null
condition|)
return|return
name|defaultValue
return|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|valueString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
block|}
end_class

end_unit

