begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * Composite class for Queue hierarchy.  */
end_comment

begin_class
DECL|class|ContainerQueue
class|class
name|ContainerQueue
extends|extends
name|AbstractQueue
block|{
comment|//List of immediate children for this container queue.
comment|//Duplicate childrens are not allowed.
DECL|field|children
specifier|private
name|List
argument_list|<
name|AbstractQueue
argument_list|>
name|children
decl_stmt|;
DECL|method|ContainerQueue (AbstractQueue parent , QueueSchedulingContext qsc)
specifier|public
name|ContainerQueue
parameter_list|(
name|AbstractQueue
name|parent
parameter_list|,
name|QueueSchedulingContext
name|qsc
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|qsc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update current contexts and update children's contexts    * @param mapClusterCapacity    * @param reduceClusterCapacity    */
annotation|@
name|Override
DECL|method|update (int mapClusterCapacity, int reduceClusterCapacity)
specifier|public
name|void
name|update
parameter_list|(
name|int
name|mapClusterCapacity
parameter_list|,
name|int
name|reduceClusterCapacity
parameter_list|)
block|{
name|super
operator|.
name|update
argument_list|(
name|mapClusterCapacity
argument_list|,
name|reduceClusterCapacity
argument_list|)
expr_stmt|;
name|updateChildrenContext
argument_list|()
expr_stmt|;
block|}
comment|/**    * set normalized capacity values for children.    * and update children.    */
DECL|method|updateChildrenContext ()
specifier|private
name|void
name|updateChildrenContext
parameter_list|()
block|{
for|for
control|(
name|AbstractQueue
name|queue
range|:
name|children
control|)
block|{
name|int
name|normalizedMapClusterCapacity
init|=
name|qsc
operator|.
name|getMapTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|int
name|normalizedReduceClusterCapacity
init|=
name|qsc
operator|.
name|getReduceTSC
argument_list|()
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
comment|//update children context,
comment|// normalize mapClusterCapacity,reduceClusterCapacity to the current.
name|queue
operator|.
name|update
argument_list|(
name|normalizedMapClusterCapacity
argument_list|,
name|normalizedReduceClusterCapacity
argument_list|)
expr_stmt|;
comment|//update current TaskSchedulingContext information
comment|//At parent level , these information is cumulative of all
comment|//children's TSC values.
comment|//Typically JobQueue's TSC would change first . so as of now
comment|//parental level values would be stale unless we call update , which
comment|//happens incase of new heartbeat.
comment|//This behaviour shuold be fine , as before assignTask we first update
comment|//then sort the whole hierarchy
name|qsc
operator|.
name|getMapTSC
argument_list|()
operator|.
name|update
argument_list|(
name|queue
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getMapTSC
argument_list|()
argument_list|)
expr_stmt|;
name|qsc
operator|.
name|getReduceTSC
argument_list|()
operator|.
name|update
argument_list|(
name|queue
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|getReduceTSC
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param queueComparator    */
annotation|@
name|Override
DECL|method|sort (Comparator queueComparator)
specifier|public
name|void
name|sort
parameter_list|(
name|Comparator
name|queueComparator
parameter_list|)
block|{
comment|//sort immediate children
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|queueComparator
argument_list|)
expr_stmt|;
comment|//recursive sort all children.
for|for
control|(
name|AbstractQueue
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|sort
argument_list|(
name|queueComparator
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the sorted order of the leaf level queues.    * @return    */
annotation|@
name|Override
DECL|method|getDescendentJobQueues ()
specifier|public
name|List
argument_list|<
name|AbstractQueue
argument_list|>
name|getDescendentJobQueues
parameter_list|()
block|{
name|List
argument_list|<
name|AbstractQueue
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractQueue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractQueue
name|child
range|:
name|children
control|)
block|{
name|l
operator|.
name|addAll
argument_list|(
name|child
operator|.
name|getDescendentJobQueues
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
annotation|@
name|Override
DECL|method|getDescendantContainerQueues ()
name|List
argument_list|<
name|AbstractQueue
argument_list|>
name|getDescendantContainerQueues
parameter_list|()
block|{
name|List
argument_list|<
name|AbstractQueue
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractQueue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractQueue
name|child
range|:
name|this
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
operator|&&
name|child
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|l
operator|.
name|addAll
argument_list|(
name|child
operator|.
name|getDescendantContainerQueues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|l
return|;
block|}
comment|/**    * Used for test only.    * @return    */
annotation|@
name|Override
DECL|method|getChildren ()
name|List
argument_list|<
name|AbstractQueue
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
annotation|@
name|Override
DECL|method|addChild (AbstractQueue queue)
specifier|public
name|void
name|addChild
parameter_list|(
name|AbstractQueue
name|queue
parameter_list|)
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|AbstractQueue
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|children
operator|.
name|contains
argument_list|(
name|queue
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|" The queue "
operator|+
name|queue
operator|.
name|getName
argument_list|()
operator|+
literal|" already "
operator|+
literal|"exists hence ignoring  the current value "
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|children
operator|.
name|add
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|/**    *    */
annotation|@
name|Override
DECL|method|distributeUnConfiguredCapacity ()
name|void
name|distributeUnConfiguredCapacity
parameter_list|()
block|{
name|List
argument_list|<
name|AbstractQueue
argument_list|>
name|unConfiguredQueues
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractQueue
argument_list|>
argument_list|()
decl_stmt|;
name|float
name|totalCapacity
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AbstractQueue
name|q
range|:
name|children
control|)
block|{
if|if
condition|(
name|q
operator|.
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
comment|//Add into unConfigured queue.
name|unConfiguredQueues
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//If capacity is set , then add that to totalCapacity.
name|LOG
operator|.
name|info
argument_list|(
literal|" the capacity percent of the queue "
operator|+
name|q
operator|.
name|getName
argument_list|()
operator|+
literal|"  is "
operator|+
literal|""
operator|+
name|q
operator|.
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
argument_list|)
expr_stmt|;
name|totalCapacity
operator|+=
name|q
operator|.
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
expr_stmt|;
comment|//As we already know current Capacity percent of this queue
comment|//make children distribute unconfigured Capacity.
name|q
operator|.
name|distributeUnConfiguredCapacity
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|unConfiguredQueues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Total capacity to be distributed among the others are  "
operator|+
literal|""
operator|+
operator|(
literal|100
operator|-
name|totalCapacity
operator|)
argument_list|)
expr_stmt|;
comment|//We have list of queues at this level which are unconfigured.
comment|//100 - totalCapacity is the capacity remaining.
comment|//Divide it equally among all the un configured queues.
name|float
name|capacityShare
init|=
operator|(
literal|100
operator|-
name|totalCapacity
operator|)
operator|/
name|unConfiguredQueues
operator|.
name|size
argument_list|()
decl_stmt|;
comment|//We dont have to check for 100 - totalCapacity being -ve , as
comment|//we already do it while loading.
for|for
control|(
name|AbstractQueue
name|q
range|:
name|unConfiguredQueues
control|)
block|{
if|if
condition|(
name|q
operator|.
name|qsc
operator|.
name|getMaxCapacityPercent
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|q
operator|.
name|qsc
operator|.
name|getMaxCapacityPercent
argument_list|()
operator|<
name|capacityShare
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|" Capacity share ("
operator|+
name|capacityShare
operator|+
literal|")for unconfigured queue "
operator|+
name|q
operator|.
name|getName
argument_list|()
operator|+
literal|" is greater than its maximum-capacity percentage "
operator|+
name|q
operator|.
name|qsc
operator|.
name|getMaxCapacityPercent
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|q
operator|.
name|qsc
operator|.
name|setCapacityPercent
argument_list|(
name|capacityShare
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Capacity share for un configured queue "
operator|+
name|q
operator|.
name|getName
argument_list|()
operator|+
literal|""
operator|+
literal|" is "
operator|+
name|capacityShare
argument_list|)
expr_stmt|;
comment|//we have q's capacity now.
comment|//make children also distribute it among themselves.
name|q
operator|.
name|distributeUnConfiguredCapacity
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

