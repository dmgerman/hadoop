begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * ********************************************************************  * Keeping track of scheduling information for queues  *<p/>  * Maintain information specific to  * each kind of task, Map or Reduce (num of running tasks, pending  * tasks etc).  *<p/>  * This scheduling information is used to decide how to allocate  * tasks, redistribute capacity, etc.  *<p/>  * A TaskSchedulingContext (TSI) object represents scheduling  * information for a particular kind of task (Map or Reduce).  *<p/>  * ********************************************************************  */
end_comment

begin_class
DECL|class|TaskSchedulingContext
specifier|public
class|class
name|TaskSchedulingContext
block|{
comment|/**    * the actual capacity, which depends on how many slots are available    * in the cluster at any given time.    */
DECL|field|capacity
specifier|private
name|int
name|capacity
init|=
literal|0
decl_stmt|;
comment|// number of running tasks
DECL|field|numRunningTasks
specifier|private
name|int
name|numRunningTasks
init|=
literal|0
decl_stmt|;
comment|// number of slots occupied by running tasks
DECL|field|numSlotsOccupied
specifier|private
name|int
name|numSlotsOccupied
init|=
literal|0
decl_stmt|;
comment|//the actual capacity stretch which depends on how many slots are available
comment|//in cluster at any given time.
DECL|field|maxCapacity
specifier|private
name|int
name|maxCapacity
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * for each user, we need to keep track of number of slots occupied by    * running tasks    */
DECL|field|numSlotsOccupiedByUser
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|numSlotsOccupiedByUser
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * reset the variables associated with tasks    */
DECL|method|resetTaskVars ()
name|void
name|resetTaskVars
parameter_list|()
block|{
name|setNumRunningTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setNumSlotsOccupied
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|getNumSlotsOccupiedByUser
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|getNumSlotsOccupiedByUser
argument_list|()
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * returns the capacity of queue as no of slots.    * @return    */
DECL|method|getCapacity ()
name|int
name|getCapacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
comment|/**    * Mutator method for capacity    *    * @param capacity    */
DECL|method|setCapacity (int capacity)
name|void
name|setCapacity
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
block|}
comment|/**    * return information about the tasks    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|float
name|occupiedSlotsAsPercent
init|=
name|getCapacity
argument_list|()
operator|!=
literal|0
condition|?
operator|(
operator|(
name|float
operator|)
name|getNumSlotsOccupied
argument_list|()
operator|*
literal|100
operator|/
name|getCapacity
argument_list|()
operator|)
else|:
literal|0
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Capacity: "
operator|+
name|getCapacity
argument_list|()
operator|+
literal|" slots\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getMaxCapacity
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Maximum capacity: "
operator|+
name|getMaxCapacity
argument_list|()
operator|+
literal|" slots\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Used capacity: %d (%.1f%% of Capacity)\n"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|getNumSlotsOccupied
argument_list|()
argument_list|)
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
name|occupiedSlotsAsPercent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Running tasks: %d\n"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|getNumRunningTasks
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// include info on active users
if|if
condition|(
name|getNumSlotsOccupied
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Active users:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|getNumSlotsOccupiedByUser
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<=
literal|0
operator|)
condition|)
block|{
comment|// user has no tasks running
continue|continue;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"User '"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"': "
argument_list|)
expr_stmt|;
name|int
name|numSlotsOccupiedByThisUser
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|float
name|p
init|=
operator|(
name|float
operator|)
name|numSlotsOccupiedByThisUser
operator|*
literal|100
operator|/
name|getNumSlotsOccupied
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d (%.1f%% of used capacity)\n"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|numSlotsOccupiedByThisUser
argument_list|)
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getNumRunningTasks ()
name|int
name|getNumRunningTasks
parameter_list|()
block|{
return|return
name|numRunningTasks
return|;
block|}
DECL|method|setNumRunningTasks (int numRunningTasks)
name|void
name|setNumRunningTasks
parameter_list|(
name|int
name|numRunningTasks
parameter_list|)
block|{
name|this
operator|.
name|numRunningTasks
operator|=
name|numRunningTasks
expr_stmt|;
block|}
DECL|method|getNumSlotsOccupied ()
name|int
name|getNumSlotsOccupied
parameter_list|()
block|{
return|return
name|numSlotsOccupied
return|;
block|}
DECL|method|setNumSlotsOccupied (int numSlotsOccupied)
name|void
name|setNumSlotsOccupied
parameter_list|(
name|int
name|numSlotsOccupied
parameter_list|)
block|{
name|this
operator|.
name|numSlotsOccupied
operator|=
name|numSlotsOccupied
expr_stmt|;
block|}
DECL|method|getNumSlotsOccupiedByUser ()
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getNumSlotsOccupiedByUser
parameter_list|()
block|{
return|return
name|numSlotsOccupiedByUser
return|;
block|}
DECL|method|setNumSlotsOccupiedByUser ( Map<String, Integer> numSlotsOccupiedByUser)
name|void
name|setNumSlotsOccupiedByUser
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|numSlotsOccupiedByUser
parameter_list|)
block|{
name|this
operator|.
name|numSlotsOccupiedByUser
operator|=
name|numSlotsOccupiedByUser
expr_stmt|;
block|}
DECL|method|getMaxCapacity ()
name|int
name|getMaxCapacity
parameter_list|()
block|{
return|return
name|maxCapacity
return|;
block|}
DECL|method|setMaxCapacity (int maxCapacity)
name|void
name|setMaxCapacity
parameter_list|(
name|int
name|maxCapacity
parameter_list|)
block|{
name|this
operator|.
name|maxCapacity
operator|=
name|maxCapacity
expr_stmt|;
block|}
DECL|method|update (TaskSchedulingContext tc)
name|void
name|update
parameter_list|(
name|TaskSchedulingContext
name|tc
parameter_list|)
block|{
name|this
operator|.
name|numSlotsOccupied
operator|+=
name|tc
operator|.
name|numSlotsOccupied
expr_stmt|;
name|this
operator|.
name|numRunningTasks
operator|+=
name|tc
operator|.
name|numRunningTasks
expr_stmt|;
comment|//this.maxTaskLimit += tc.maxTaskLimit;
name|updateNoOfSlotsOccupiedByUser
argument_list|(
name|tc
operator|.
name|numSlotsOccupiedByUser
argument_list|)
expr_stmt|;
block|}
DECL|method|updateNoOfSlotsOccupiedByUser (Map<String, Integer> nou)
specifier|private
name|void
name|updateNoOfSlotsOccupiedByUser
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nou
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|it
init|=
name|nou
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Integer
name|currentVal
init|=
name|numSlotsOccupiedByUser
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentVal
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|numSlotsOccupiedByUser
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|currentVal
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

