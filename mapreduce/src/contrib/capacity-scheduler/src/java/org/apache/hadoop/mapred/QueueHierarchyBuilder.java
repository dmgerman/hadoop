begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Hierarchy builder for the CapacityScheduler.  *   */
end_comment

begin_class
DECL|class|QueueHierarchyBuilder
class|class
name|QueueHierarchyBuilder
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QueueHierarchyBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|QueueHierarchyBuilder ()
name|QueueHierarchyBuilder
parameter_list|()
block|{   }
comment|/**    * Create a new {@link AbstractQueue}s-hierarchy and set the new queue    * properties in the passed {@link CapacitySchedulerConf}.    *     * @param rootChildren    * @param schedConf    * @return the root {@link AbstractQueue} of the newly created hierarchy.    */
DECL|method|createHierarchy (List<JobQueueInfo> rootChildren, CapacitySchedulerConf schedConf)
name|AbstractQueue
name|createHierarchy
parameter_list|(
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|rootChildren
parameter_list|,
name|CapacitySchedulerConf
name|schedConf
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Root queues defined : "
argument_list|)
expr_stmt|;
for|for
control|(
name|JobQueueInfo
name|q
range|:
name|rootChildren
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|q
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create the root.
name|AbstractQueue
name|newRootAbstractQueue
init|=
name|createRootAbstractQueue
argument_list|()
decl_stmt|;
comment|// Create the complete hierarchy rooted at newRootAbstractQueue
name|createHierarchy
argument_list|(
name|newRootAbstractQueue
argument_list|,
name|rootChildren
argument_list|,
name|schedConf
argument_list|)
expr_stmt|;
comment|// Distribute any un-configured capacities
name|newRootAbstractQueue
operator|.
name|distributeUnConfiguredCapacity
argument_list|()
expr_stmt|;
return|return
name|newRootAbstractQueue
return|;
block|}
DECL|field|TOTAL_CAPACITY_OVERFLOWN_MSG
specifier|static
specifier|final
name|String
name|TOTAL_CAPACITY_OVERFLOWN_MSG
init|=
literal|"The cumulative capacity for the queues (%s) at the same level "
operator|+
literal|"has overflown over 100%% at %f%%"
decl_stmt|;
comment|/**    * Recursively create a complete AbstractQueues-hierarchy. 'Parent' is the    * root of the hierarchy. 'Children' is the immediate children of the 'parent'    * and may in-turn be the parent of further child queues. Any JobQueueInfo    * which doesn't have any more children is used to create a JobQueue in the    * AbstractQueues-hierarchy and every other AbstractQueue is used to create a    * ContainerQueue.    *     *<p>    *     * While creating the hierarchy, we make sure at each level that the total    * capacity of all the children at that level doesn't cross 100%    *     * @param parent the queue that will be the root of the new hierarchy.    * @param children the immediate children of the 'parent'    * @param schedConfig Configuration object to which the new queue    *          properties are set. The new queue properties are set with key    *          names obtained by expanding the queue-names to reflect the whole    *          hierarchy.    */
DECL|method|createHierarchy (AbstractQueue parent, List<JobQueueInfo> children, CapacitySchedulerConf schedConfig)
specifier|private
name|void
name|createHierarchy
parameter_list|(
name|AbstractQueue
name|parent
parameter_list|,
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|children
parameter_list|,
name|CapacitySchedulerConf
name|schedConfig
parameter_list|)
block|{
comment|//check if children have further childrens.
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|float
name|totalCapacity
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|JobQueueInfo
name|qs
range|:
name|children
control|)
block|{
comment|//Check if this child has any more children.
name|List
argument_list|<
name|JobQueueInfo
argument_list|>
name|childQueues
init|=
name|qs
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|childQueues
operator|!=
literal|null
operator|&&
name|childQueues
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//generate a new ContainerQueue and recursively
comment|//create hierarchy.
name|AbstractQueue
name|cq
init|=
operator|new
name|ContainerQueue
argument_list|(
name|parent
argument_list|,
name|loadContext
argument_list|(
name|qs
operator|.
name|getProperties
argument_list|()
argument_list|,
name|qs
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|schedConfig
argument_list|)
argument_list|)
decl_stmt|;
comment|//update totalCapacity
name|totalCapacity
operator|+=
name|cq
operator|.
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created a ContainerQueue "
operator|+
name|qs
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" and added it as a child to "
operator|+
name|parent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//create child hiearchy
name|createHierarchy
argument_list|(
name|cq
argument_list|,
name|childQueues
argument_list|,
name|schedConfig
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//if not this is a JobQueue.
comment|//create a JobQueue.
name|AbstractQueue
name|jq
init|=
operator|new
name|JobQueue
argument_list|(
name|parent
argument_list|,
name|loadContext
argument_list|(
name|qs
operator|.
name|getProperties
argument_list|()
argument_list|,
name|qs
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|schedConfig
argument_list|)
argument_list|)
decl_stmt|;
name|totalCapacity
operator|+=
name|jq
operator|.
name|qsc
operator|.
name|getCapacityPercent
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created a jobQueue "
operator|+
name|qs
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" and added it as a child to "
operator|+
name|parent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//check for totalCapacity at each level , the total for children
comment|//shouldn't cross 100.
if|if
condition|(
name|totalCapacity
operator|>
literal|100.0
condition|)
block|{
name|StringBuilder
name|childQueueNames
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|JobQueueInfo
name|child
range|:
name|children
control|)
block|{
name|childQueueNames
operator|.
name|append
argument_list|(
name|child
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|TOTAL_CAPACITY_OVERFLOWN_MSG
argument_list|,
name|childQueueNames
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|childQueueNames
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
name|totalCapacity
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Create a new {@link QueueSchedulingContext} from the given props. Also set    * these properties in the passed scheduler configuration object.    *     * @param props Properties to be set in the {@link QueueSchedulingContext}    * @param queueName Queue name    * @param schedConf Scheduler configuration object to set the properties in.    * @return the generated {@link QueueSchedulingContext} object    */
DECL|method|loadContext (Properties props, String queueName, CapacitySchedulerConf schedConf)
specifier|private
name|QueueSchedulingContext
name|loadContext
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|queueName
parameter_list|,
name|CapacitySchedulerConf
name|schedConf
parameter_list|)
block|{
name|schedConf
operator|.
name|setProperties
argument_list|(
name|queueName
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|float
name|capacity
init|=
name|schedConf
operator|.
name|getCapacity
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|float
name|stretchCapacity
init|=
name|schedConf
operator|.
name|getMaxCapacity
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|capacity
operator|==
operator|-
literal|1.0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No capacity specified for queue "
operator|+
name|queueName
argument_list|)
expr_stmt|;
block|}
name|int
name|ulMin
init|=
name|schedConf
operator|.
name|getMinimumUserLimitPercent
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
comment|// create our QSC and add to our hashmap
name|QueueSchedulingContext
name|qsi
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
name|queueName
argument_list|,
name|capacity
argument_list|,
name|stretchCapacity
argument_list|,
name|ulMin
argument_list|)
decl_stmt|;
name|qsi
operator|.
name|setSupportsPriorities
argument_list|(
name|schedConf
operator|.
name|isPrioritySupported
argument_list|(
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|qsi
return|;
block|}
comment|/**    * Create an {@link AbstractQueue} with an empty    * {@link QueueSchedulingContext}. Can be used to as the root queue to create    * {@link AbstractQueue} hierarchies.    *     * @return a root {@link AbstractQueue}    */
DECL|method|createRootAbstractQueue ()
specifier|static
name|AbstractQueue
name|createRootAbstractQueue
parameter_list|()
block|{
name|QueueSchedulingContext
name|rootContext
init|=
operator|new
name|QueueSchedulingContext
argument_list|(
literal|""
argument_list|,
literal|100
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|AbstractQueue
name|root
init|=
operator|new
name|ContainerQueue
argument_list|(
literal|null
argument_list|,
name|rootContext
argument_list|)
decl_stmt|;
return|return
name|root
return|;
block|}
block|}
end_class

end_unit

