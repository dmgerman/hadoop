begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobQueueJobInProgressListener
operator|.
name|JobSchedulingInfo
import|;
end_import

begin_comment
comment|/**  * A {@link JobInProgressListener} that maintains the jobs being managed in  * one or more queues.  */
end_comment

begin_class
DECL|class|JobQueuesManager
class|class
name|JobQueuesManager
extends|extends
name|JobInProgressListener
block|{
comment|// we maintain a hashmap of queue-names to queue info
DECL|field|jobQueues
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|JobQueue
argument_list|>
name|jobQueues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JobQueue
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobQueuesManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|JobQueuesManager ()
name|JobQueuesManager
parameter_list|()
block|{   }
comment|/**    * Add the given queue to the map of queue name to job-queues.    *     * @param queue The job-queue    */
DECL|method|addQueue (JobQueue queue)
specifier|public
name|void
name|addQueue
parameter_list|(
name|JobQueue
name|queue
parameter_list|)
block|{
name|jobQueues
operator|.
name|put
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|jobAdded (JobInProgress job)
specifier|public
name|void
name|jobAdded
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|+
literal|" submitted to queue "
operator|+
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
comment|// add job to the right queue
name|JobQueue
name|qi
init|=
name|getJobQueue
argument_list|(
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|qi
condition|)
block|{
comment|// job was submitted to a queue we're not aware of
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid queue "
operator|+
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" specified for job "
operator|+
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|getJobID
argument_list|()
operator|+
literal|". Ignoring job."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// let scheduler know.
name|qi
operator|.
name|jobAdded
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|// Note that job is removed when the job completes i.e in jobUpated()
annotation|@
name|Override
DECL|method|jobRemoved (JobInProgress job)
specifier|public
name|void
name|jobRemoved
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|jobUpdated (JobChangeEvent event)
specifier|public
name|void
name|jobUpdated
parameter_list|(
name|JobChangeEvent
name|event
parameter_list|)
block|{
name|JobInProgress
name|job
init|=
name|event
operator|.
name|getJobInProgress
argument_list|()
decl_stmt|;
name|JobQueue
name|qi
init|=
name|getJobQueue
argument_list|(
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|qi
operator|.
name|jobUpdated
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|getComparator (String queue)
name|Comparator
argument_list|<
name|JobSchedulingInfo
argument_list|>
name|getComparator
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
return|return
name|getJobQueue
argument_list|(
name|queue
argument_list|)
operator|.
name|comparator
return|;
block|}
DECL|method|getJobQueue (JobInProgress jip)
specifier|public
name|JobQueue
name|getJobQueue
parameter_list|(
name|JobInProgress
name|jip
parameter_list|)
block|{
return|return
name|getJobQueue
argument_list|(
name|jip
operator|.
name|getProfile
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getJobQueue (String name)
name|JobQueue
name|getJobQueue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|jobQueues
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getJobQueueNames ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getJobQueueNames
parameter_list|()
block|{
return|return
name|jobQueues
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
end_class

end_unit

