begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * ********************************************************************  * Keeping track of scheduling information for queues  *<p/>  * We need to maintain scheduling information relevant to a queue (its  * name, capacity, etc), along with information specific to  * each kind of task, Map or Reduce (num of running tasks, pending  * tasks etc).  *<p/>  * This scheduling information is used to decide how to allocate  * tasks, redistribute capacity, etc.  *<p/>  * A QueueSchedulingContext(qsc) object represents scheduling information for  * a queue.   * ********************************************************************  */
end_comment

begin_class
DECL|class|QueueSchedulingContext
specifier|public
class|class
name|QueueSchedulingContext
block|{
comment|//Name of this queue
DECL|field|queueName
specifier|private
name|String
name|queueName
decl_stmt|;
comment|//Get the maximum capacity of this queue for running map tasks
comment|// in the cluster.
DECL|field|mapCapacity
specifier|private
name|int
name|mapCapacity
decl_stmt|;
comment|//Get the maximum capacity of this queue for running reduce tasks
comment|// in the cluster.
DECL|field|reduceCapacity
specifier|private
name|int
name|reduceCapacity
decl_stmt|;
comment|/**      * capacity(%) is set in the config as      * mapred.capacity-scheduler.queue.<queue-name>.capacity"      * Percentage of the number of slots in the cluster that are      * to be available for jobs in this queue.      */
DECL|field|capacityPercent
specifier|private
name|float
name|capacityPercent
init|=
literal|0
decl_stmt|;
comment|/**    * maxCapacityStretch(%) is set in config as    * mapred.capacity-scheduler.queue.<queue-name>.maximum-capacity    * maximum-capacity-stretch defines a limit beyond which a sub-queue    * cannot use the capacity of its parent queue.    */
DECL|field|maxCapacityPercent
specifier|private
name|float
name|maxCapacityPercent
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * to handle user limits, we need to know how many users have jobs in      * the queue.      */
DECL|field|numJobsByUser
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|numJobsByUser
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * min value of user limit (same for all users)      */
DECL|field|ulMin
specifier|private
name|int
name|ulMin
decl_stmt|;
comment|// whether the queue supports priorities
comment|//default is false
DECL|field|supportsPriorities
specifier|private
name|boolean
name|supportsPriorities
init|=
literal|false
decl_stmt|;
comment|//No of waiting jobs.
DECL|field|numOfWaitingJobs
specifier|private
name|int
name|numOfWaitingJobs
init|=
literal|0
decl_stmt|;
comment|//State of mapCapacity
DECL|field|prevMapCapacity
specifier|private
name|int
name|prevMapCapacity
init|=
literal|0
decl_stmt|;
comment|//State of reduceCapacity
DECL|field|prevReduceCapacity
specifier|private
name|int
name|prevReduceCapacity
init|=
literal|0
decl_stmt|;
comment|/**      * We keep a TaskSchedulingInfo object for each kind of task we support      */
DECL|field|mapTSC
specifier|private
name|TaskSchedulingContext
name|mapTSC
decl_stmt|;
DECL|field|reduceTSC
specifier|private
name|TaskSchedulingContext
name|reduceTSC
decl_stmt|;
DECL|method|QueueSchedulingContext ( String queueName, float capacityPercent, float maxCapacityPercent, int ulMin)
name|QueueSchedulingContext
parameter_list|(
name|String
name|queueName
parameter_list|,
name|float
name|capacityPercent
parameter_list|,
name|float
name|maxCapacityPercent
parameter_list|,
name|int
name|ulMin
parameter_list|)
block|{
name|this
operator|.
name|setQueueName
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|this
operator|.
name|setCapacityPercent
argument_list|(
name|capacityPercent
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMaxCapacityPercent
argument_list|(
name|maxCapacityPercent
argument_list|)
expr_stmt|;
name|this
operator|.
name|setUlMin
argument_list|(
name|ulMin
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMapTSC
argument_list|(
operator|new
name|TaskSchedulingContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setReduceTSC
argument_list|(
operator|new
name|TaskSchedulingContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * return information about the queue      *      * @return a String representing the information about the queue.      */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// We print out the queue information first, followed by info
comment|// on map and reduce tasks and job info
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Queue configuration\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Capacity Percentage: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getCapacityPercent
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"%\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"User Limit: %d%s\n"
argument_list|,
name|getUlMin
argument_list|()
argument_list|,
literal|"%"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Priority Supported: %s\n"
argument_list|,
operator|(
name|supportsPriorities
argument_list|()
operator|)
condition|?
literal|"YES"
else|:
literal|"NO"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-------------\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Map tasks\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getMapTSC
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-------------\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Reduce tasks\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getReduceTSC
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"-------------\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Job info\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Number of Waiting Jobs: %d\n"
argument_list|,
name|this
operator|.
name|getNumOfWaitingJobs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Number of users who have submitted jobs: %d\n"
argument_list|,
name|getNumJobsByUser
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getQueueName ()
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|queueName
return|;
block|}
DECL|method|setQueueName (String queueName)
name|void
name|setQueueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
block|}
DECL|method|getMapCapacity ()
name|int
name|getMapCapacity
parameter_list|()
block|{
return|return
name|mapCapacity
return|;
block|}
DECL|method|setMapCapacity (int mapCapacity)
name|void
name|setMapCapacity
parameter_list|(
name|int
name|mapCapacity
parameter_list|)
block|{
name|this
operator|.
name|mapCapacity
operator|=
name|mapCapacity
expr_stmt|;
block|}
DECL|method|getReduceCapacity ()
name|int
name|getReduceCapacity
parameter_list|()
block|{
return|return
name|reduceCapacity
return|;
block|}
DECL|method|setReduceCapacity (int reduceCapacity)
name|void
name|setReduceCapacity
parameter_list|(
name|int
name|reduceCapacity
parameter_list|)
block|{
name|this
operator|.
name|reduceCapacity
operator|=
name|reduceCapacity
expr_stmt|;
block|}
DECL|method|getCapacityPercent ()
name|float
name|getCapacityPercent
parameter_list|()
block|{
return|return
name|capacityPercent
return|;
block|}
DECL|method|setCapacityPercent (float capacityPercent)
name|void
name|setCapacityPercent
parameter_list|(
name|float
name|capacityPercent
parameter_list|)
block|{
name|this
operator|.
name|capacityPercent
operator|=
name|capacityPercent
expr_stmt|;
block|}
DECL|method|getNumJobsByUser ()
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getNumJobsByUser
parameter_list|()
block|{
return|return
name|numJobsByUser
return|;
block|}
DECL|method|setNumJobsByUser (Map<String, Integer> numJobsByUser)
name|void
name|setNumJobsByUser
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|numJobsByUser
parameter_list|)
block|{
name|this
operator|.
name|numJobsByUser
operator|=
name|numJobsByUser
expr_stmt|;
block|}
DECL|method|getUlMin ()
name|int
name|getUlMin
parameter_list|()
block|{
return|return
name|ulMin
return|;
block|}
DECL|method|setUlMin (int ulMin)
name|void
name|setUlMin
parameter_list|(
name|int
name|ulMin
parameter_list|)
block|{
name|this
operator|.
name|ulMin
operator|=
name|ulMin
expr_stmt|;
block|}
DECL|method|getMapTSC ()
name|TaskSchedulingContext
name|getMapTSC
parameter_list|()
block|{
return|return
name|mapTSC
return|;
block|}
DECL|method|setMapTSC (TaskSchedulingContext mapTSC)
name|void
name|setMapTSC
parameter_list|(
name|TaskSchedulingContext
name|mapTSC
parameter_list|)
block|{
name|this
operator|.
name|mapTSC
operator|=
name|mapTSC
expr_stmt|;
block|}
DECL|method|getReduceTSC ()
name|TaskSchedulingContext
name|getReduceTSC
parameter_list|()
block|{
return|return
name|reduceTSC
return|;
block|}
DECL|method|setReduceTSC (TaskSchedulingContext reduceTSC)
name|void
name|setReduceTSC
parameter_list|(
name|TaskSchedulingContext
name|reduceTSC
parameter_list|)
block|{
name|this
operator|.
name|reduceTSC
operator|=
name|reduceTSC
expr_stmt|;
block|}
DECL|method|supportsPriorities ()
name|boolean
name|supportsPriorities
parameter_list|()
block|{
return|return
name|supportsPriorities
return|;
block|}
DECL|method|setSupportsPriorities (boolean supportsPriorities)
name|void
name|setSupportsPriorities
parameter_list|(
name|boolean
name|supportsPriorities
parameter_list|)
block|{
name|this
operator|.
name|supportsPriorities
operator|=
name|supportsPriorities
expr_stmt|;
block|}
DECL|method|getNumOfWaitingJobs ()
name|int
name|getNumOfWaitingJobs
parameter_list|()
block|{
return|return
name|numOfWaitingJobs
return|;
block|}
DECL|method|setNumOfWaitingJobs (int numOfWaitingJobs)
name|void
name|setNumOfWaitingJobs
parameter_list|(
name|int
name|numOfWaitingJobs
parameter_list|)
block|{
name|this
operator|.
name|numOfWaitingJobs
operator|=
name|numOfWaitingJobs
expr_stmt|;
block|}
DECL|method|getMaxCapacityPercent ()
name|float
name|getMaxCapacityPercent
parameter_list|()
block|{
return|return
name|maxCapacityPercent
return|;
block|}
DECL|method|setMaxCapacityPercent (float maxCapacityPercent)
name|void
name|setMaxCapacityPercent
parameter_list|(
name|float
name|maxCapacityPercent
parameter_list|)
block|{
name|this
operator|.
name|maxCapacityPercent
operator|=
name|maxCapacityPercent
expr_stmt|;
block|}
DECL|method|updateContext (int mapClusterCapacity , int reduceClusterCapacity)
name|void
name|updateContext
parameter_list|(
name|int
name|mapClusterCapacity
parameter_list|,
name|int
name|reduceClusterCapacity
parameter_list|)
block|{
name|setMapCapacity
argument_list|(
name|mapClusterCapacity
argument_list|)
expr_stmt|;
name|setReduceCapacity
argument_list|(
name|reduceClusterCapacity
argument_list|)
expr_stmt|;
comment|// if # of slots have changed since last time, update.
comment|// First, compute whether the total number of TT slots have changed
comment|// compute new capacities, if TT slots have changed
if|if
condition|(
name|getMapCapacity
argument_list|()
operator|!=
name|prevMapCapacity
condition|)
block|{
name|getMapTSC
argument_list|()
operator|.
name|setCapacity
argument_list|(
call|(
name|int
call|)
argument_list|(
name|getCapacityPercent
argument_list|()
operator|*
name|getMapCapacity
argument_list|()
operator|/
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|//Check if max capacity percent is set for this queue.
comment|//if yes then set the maxcapacity for this queue.
if|if
condition|(
name|getMaxCapacityPercent
argument_list|()
operator|>
literal|0
condition|)
block|{
name|getMapTSC
argument_list|()
operator|.
name|setMaxCapacity
argument_list|(
call|(
name|int
call|)
argument_list|(
name|getMaxCapacityPercent
argument_list|()
operator|*
name|getMapCapacity
argument_list|()
operator|/
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//REDUCES
if|if
condition|(
name|getReduceCapacity
argument_list|()
operator|!=
name|prevReduceCapacity
condition|)
block|{
name|getReduceTSC
argument_list|()
operator|.
name|setCapacity
argument_list|(
call|(
name|int
call|)
argument_list|(
name|getCapacityPercent
argument_list|()
operator|*
name|getReduceCapacity
argument_list|()
operator|/
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|//set stretch capacity for reduce
comment|//check if max capacity percent is set for this QueueSchedulingContext.
comment|//if yes then set the maxCapacity for this JobQueue.
if|if
condition|(
name|getMaxCapacityPercent
argument_list|()
operator|>
literal|0
condition|)
block|{
name|getReduceTSC
argument_list|()
operator|.
name|setMaxCapacity
argument_list|(
call|(
name|int
call|)
argument_list|(
name|getMaxCapacityPercent
argument_list|()
operator|*
name|getReduceCapacity
argument_list|()
operator|/
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// reset running/pending tasks, tasks per user
name|getMapTSC
argument_list|()
operator|.
name|resetTaskVars
argument_list|()
expr_stmt|;
name|getReduceTSC
argument_list|()
operator|.
name|resetTaskVars
argument_list|()
expr_stmt|;
comment|// update stats on running jobs
name|prevMapCapacity
operator|=
name|getMapCapacity
argument_list|()
expr_stmt|;
name|prevReduceCapacity
operator|=
name|getReduceCapacity
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

