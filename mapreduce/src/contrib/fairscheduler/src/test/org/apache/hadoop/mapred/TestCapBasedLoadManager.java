begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Exercise the canAssignMap and canAssignReduce methods in   * CapBasedLoadManager.  */
end_comment

begin_class
DECL|class|TestCapBasedLoadManager
specifier|public
class|class
name|TestCapBasedLoadManager
extends|extends
name|TestCase
block|{
comment|/**    * Returns a running MapTaskStatus.    */
DECL|method|getRunningMapTaskStatus ()
specifier|private
name|TaskStatus
name|getRunningMapTaskStatus
parameter_list|()
block|{
name|TaskStatus
name|ts
init|=
operator|new
name|MapTaskStatus
argument_list|()
decl_stmt|;
name|ts
operator|.
name|setRunState
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|ts
return|;
block|}
comment|/**    * Returns a running ReduceTaskStatus.    */
DECL|method|getRunningReduceTaskStatus ()
specifier|private
name|TaskStatus
name|getRunningReduceTaskStatus
parameter_list|()
block|{
name|TaskStatus
name|ts
init|=
operator|new
name|ReduceTaskStatus
argument_list|()
decl_stmt|;
name|ts
operator|.
name|setRunState
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|ts
return|;
block|}
comment|/**    * Returns a TaskTrackerStatus with the specified statistics.     * @param mapCap        The capacity of map tasks     * @param reduceCap     The capacity of reduce tasks    * @param runningMap    The number of running map tasks    * @param runningReduce The number of running reduce tasks    */
DECL|method|getTaskTrackerStatus (int mapCap, int reduceCap, int runningMap, int runningReduce)
specifier|private
name|TaskTrackerStatus
name|getTaskTrackerStatus
parameter_list|(
name|int
name|mapCap
parameter_list|,
name|int
name|reduceCap
parameter_list|,
name|int
name|runningMap
parameter_list|,
name|int
name|runningReduce
parameter_list|)
block|{
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|ts
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runningMap
condition|;
name|i
operator|++
control|)
block|{
name|ts
operator|.
name|add
argument_list|(
name|getRunningMapTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runningReduce
condition|;
name|i
operator|++
control|)
block|{
name|ts
operator|.
name|add
argument_list|(
name|getRunningReduceTaskStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TaskTrackerStatus
name|tracker
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
literal|"tracker"
argument_list|,
literal|"tracker_host"
argument_list|,
literal|1234
argument_list|,
name|ts
argument_list|,
literal|0
argument_list|,
name|mapCap
argument_list|,
name|reduceCap
argument_list|)
decl_stmt|;
return|return
name|tracker
return|;
block|}
comment|/**    * A single test of canAssignMap.    */
DECL|method|oneTestCanAssignMap (float maxDiff, int mapCap, int runningMap, int totalMapSlots, int totalRunnableMap, boolean expected)
specifier|private
name|void
name|oneTestCanAssignMap
parameter_list|(
name|float
name|maxDiff
parameter_list|,
name|int
name|mapCap
parameter_list|,
name|int
name|runningMap
parameter_list|,
name|int
name|totalMapSlots
parameter_list|,
name|int
name|totalRunnableMap
parameter_list|,
name|boolean
name|expected
parameter_list|)
block|{
name|CapBasedLoadManager
name|manager
init|=
operator|new
name|CapBasedLoadManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"mapred.fairscheduler.load.max.diff"
argument_list|,
name|maxDiff
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TaskTrackerStatus
name|ts
init|=
name|getTaskTrackerStatus
argument_list|(
name|mapCap
argument_list|,
literal|1
argument_list|,
name|runningMap
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"When maxDiff="
operator|+
name|maxDiff
operator|+
literal|", with totalRunnableMap="
operator|+
name|totalRunnableMap
operator|+
literal|" and totalMapSlots="
operator|+
name|totalMapSlots
operator|+
literal|", a tracker with runningMap="
operator|+
name|runningMap
operator|+
literal|" and mapCap="
operator|+
name|mapCap
operator|+
literal|" should "
operator|+
operator|(
name|expected
condition|?
literal|""
else|:
literal|"not "
operator|)
operator|+
literal|"be able to take more Maps."
argument_list|,
name|expected
argument_list|,
name|manager
operator|.
name|canAssignMap
argument_list|(
name|ts
argument_list|,
name|totalRunnableMap
argument_list|,
name|totalMapSlots
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test canAssignMap method.    */
DECL|method|testCanAssignMap ()
specifier|public
name|void
name|testCanAssignMap
parameter_list|()
block|{
name|oneTestCanAssignMap
argument_list|(
literal|0.0f
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|oneTestCanAssignMap
argument_list|(
literal|0.0f
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|oneTestCanAssignMap
argument_list|(
literal|0.2f
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|oneTestCanAssignMap
argument_list|(
literal|0.0f
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|,
literal|11
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|oneTestCanAssignMap
argument_list|(
literal|0.0f
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|50
argument_list|,
literal|11
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|oneTestCanAssignMap
argument_list|(
literal|0.3f
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|50
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|oneTestCanAssignMap
argument_list|(
literal|1.0f
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * A single test of canAssignReduce.    */
DECL|method|oneTestCanAssignReduce (float maxDiff, int ReduceCap, int runningReduce, int totalReduceSlots, int totalRunnableReduce, boolean expected)
specifier|private
name|void
name|oneTestCanAssignReduce
parameter_list|(
name|float
name|maxDiff
parameter_list|,
name|int
name|ReduceCap
parameter_list|,
name|int
name|runningReduce
parameter_list|,
name|int
name|totalReduceSlots
parameter_list|,
name|int
name|totalRunnableReduce
parameter_list|,
name|boolean
name|expected
parameter_list|)
block|{
name|CapBasedLoadManager
name|manager
init|=
operator|new
name|CapBasedLoadManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"mapred.fairscheduler.load.max.diff"
argument_list|,
name|maxDiff
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TaskTrackerStatus
name|ts
init|=
name|getTaskTrackerStatus
argument_list|(
literal|1
argument_list|,
name|ReduceCap
argument_list|,
literal|1
argument_list|,
name|runningReduce
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"When maxDiff="
operator|+
name|maxDiff
operator|+
literal|", with totalRunnableReduce="
operator|+
name|totalRunnableReduce
operator|+
literal|" and totalReduceSlots="
operator|+
name|totalReduceSlots
operator|+
literal|", a tracker with runningReduce="
operator|+
name|runningReduce
operator|+
literal|" and ReduceCap="
operator|+
name|ReduceCap
operator|+
literal|" should "
operator|+
operator|(
name|expected
condition|?
literal|""
else|:
literal|"not "
operator|)
operator|+
literal|"be able to take more Reduces."
argument_list|,
name|expected
argument_list|,
name|manager
operator|.
name|canAssignReduce
argument_list|(
name|ts
argument_list|,
name|totalRunnableReduce
argument_list|,
name|totalReduceSlots
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Test canAssignReduce method.    */
DECL|method|testCanAssignReduce ()
specifier|public
name|void
name|testCanAssignReduce
parameter_list|()
block|{
name|oneTestCanAssignReduce
argument_list|(
literal|0.0f
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|oneTestCanAssignReduce
argument_list|(
literal|0.0f
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|oneTestCanAssignReduce
argument_list|(
literal|0.2f
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|oneTestCanAssignReduce
argument_list|(
literal|0.0f
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|,
literal|11
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|oneTestCanAssignReduce
argument_list|(
literal|0.0f
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|50
argument_list|,
literal|11
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|oneTestCanAssignReduce
argument_list|(
literal|0.3f
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|50
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|oneTestCanAssignReduce
argument_list|(
literal|1.0f
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

