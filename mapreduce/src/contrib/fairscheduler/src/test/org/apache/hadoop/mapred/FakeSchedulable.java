begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Dummy implementation of Schedulable for unit testing.  */
end_comment

begin_class
DECL|class|FakeSchedulable
specifier|public
class|class
name|FakeSchedulable
extends|extends
name|Schedulable
block|{
DECL|field|demand
specifier|private
name|int
name|demand
decl_stmt|;
DECL|field|runningTasks
specifier|private
name|int
name|runningTasks
decl_stmt|;
DECL|field|minShare
specifier|private
name|int
name|minShare
decl_stmt|;
DECL|field|weight
specifier|private
name|double
name|weight
decl_stmt|;
DECL|field|priority
specifier|private
name|JobPriority
name|priority
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|method|FakeSchedulable ()
specifier|public
name|FakeSchedulable
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobPriority
operator|.
name|NORMAL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (int demand)
specifier|public
name|FakeSchedulable
parameter_list|(
name|int
name|demand
parameter_list|)
block|{
name|this
argument_list|(
name|demand
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobPriority
operator|.
name|NORMAL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (int demand, int minShare)
specifier|public
name|FakeSchedulable
parameter_list|(
name|int
name|demand
parameter_list|,
name|int
name|minShare
parameter_list|)
block|{
name|this
argument_list|(
name|demand
argument_list|,
name|minShare
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobPriority
operator|.
name|NORMAL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (int demand, int minShare, double weight)
specifier|public
name|FakeSchedulable
parameter_list|(
name|int
name|demand
parameter_list|,
name|int
name|minShare
parameter_list|,
name|double
name|weight
parameter_list|)
block|{
name|this
argument_list|(
name|demand
argument_list|,
name|minShare
argument_list|,
name|weight
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|JobPriority
operator|.
name|NORMAL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (int demand, int minShare, double weight, int fairShare, int runningTasks, JobPriority priority, long startTime)
specifier|public
name|FakeSchedulable
parameter_list|(
name|int
name|demand
parameter_list|,
name|int
name|minShare
parameter_list|,
name|double
name|weight
parameter_list|,
name|int
name|fairShare
parameter_list|,
name|int
name|runningTasks
parameter_list|,
name|JobPriority
name|priority
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|demand
operator|=
name|demand
expr_stmt|;
name|this
operator|.
name|minShare
operator|=
name|minShare
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|setFairShare
argument_list|(
name|fairShare
argument_list|)
expr_stmt|;
name|this
operator|.
name|runningTasks
operator|=
name|runningTasks
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assignTask (TaskTrackerStatus tts, long currentTime, Collection<JobInProgress> visited)
specifier|public
name|Task
name|assignTask
parameter_list|(
name|TaskTrackerStatus
name|tts
parameter_list|,
name|long
name|currentTime
parameter_list|,
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|visited
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getDemand ()
specifier|public
name|int
name|getDemand
parameter_list|()
block|{
return|return
name|demand
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"FakeSchedulable"
operator|+
name|this
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|JobPriority
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
annotation|@
name|Override
DECL|method|getRunningTasks ()
specifier|public
name|int
name|getRunningTasks
parameter_list|()
block|{
return|return
name|runningTasks
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|getWeight ()
specifier|public
name|double
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
annotation|@
name|Override
DECL|method|getMinShare ()
specifier|public
name|int
name|getMinShare
parameter_list|()
block|{
return|return
name|minShare
return|;
block|}
annotation|@
name|Override
DECL|method|redistributeShare ()
specifier|public
name|void
name|redistributeShare
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|updateDemand ()
specifier|public
name|void
name|updateDemand
parameter_list|()
block|{}
block|}
end_class

end_unit

