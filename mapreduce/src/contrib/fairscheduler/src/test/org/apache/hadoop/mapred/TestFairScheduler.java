begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FairScheduler
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
operator|.
name|JobTrackerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobInProgress
operator|.
name|KillInterruptedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|FakeClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|ContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|spi
operator|.
name|NoEmitMetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|spi
operator|.
name|OutputRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_class
DECL|class|TestFairScheduler
specifier|public
class|class
name|TestFairScheduler
extends|extends
name|TestCase
block|{
DECL|field|TEST_DIR
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/contrib/streaming/test/data"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|ALLOC_FILE
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-pools"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|POOL_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|POOL_PROPERTY
init|=
literal|"pool"
decl_stmt|;
DECL|field|EXPLICIT_POOL_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|EXPLICIT_POOL_PROPERTY
init|=
literal|"mapred.fairscheduler.pool"
decl_stmt|;
DECL|field|jobCounter
specifier|private
specifier|static
name|int
name|jobCounter
decl_stmt|;
DECL|class|FakeJobInProgress
class|class
name|FakeJobInProgress
extends|extends
name|JobInProgress
block|{
DECL|field|taskTrackerManager
specifier|private
name|FakeTaskTrackerManager
name|taskTrackerManager
decl_stmt|;
DECL|field|mapCounter
specifier|private
name|int
name|mapCounter
init|=
literal|0
decl_stmt|;
DECL|field|reduceCounter
specifier|private
name|int
name|reduceCounter
init|=
literal|0
decl_stmt|;
DECL|field|mapInputLocations
specifier|private
specifier|final
name|String
index|[]
index|[]
name|mapInputLocations
decl_stmt|;
comment|// Array of hosts for each map
DECL|field|initialized
specifier|private
name|boolean
name|initialized
decl_stmt|;
DECL|method|FakeJobInProgress (JobConf jobConf, FakeTaskTrackerManager taskTrackerManager, String[][] mapInputLocations, JobTracker jt)
specifier|public
name|FakeJobInProgress
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|FakeTaskTrackerManager
name|taskTrackerManager
parameter_list|,
name|String
index|[]
index|[]
name|mapInputLocations
parameter_list|,
name|JobTracker
name|jt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|JobID
argument_list|(
literal|"test"
argument_list|,
operator|++
name|jobCounter
argument_list|)
argument_list|,
name|jobConf
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskTrackerManager
operator|=
name|taskTrackerManager
expr_stmt|;
name|this
operator|.
name|mapInputLocations
operator|=
name|mapInputLocations
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|status
operator|=
operator|new
name|JobStatus
argument_list|()
expr_stmt|;
name|this
operator|.
name|status
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|)
expr_stmt|;
name|this
operator|.
name|nonLocalMaps
operator|=
operator|new
name|LinkedList
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nonLocalRunningMaps
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|runningMapCache
operator|=
operator|new
name|IdentityHashMap
argument_list|<
name|Node
argument_list|,
name|Set
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nonRunningReduces
operator|=
operator|new
name|LinkedList
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|runningReduces
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|jobHistory
operator|=
operator|new
name|FakeJobHistory
argument_list|()
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initTasks ()
specifier|public
specifier|synchronized
name|void
name|initTasks
parameter_list|()
throws|throws
name|IOException
block|{
comment|// initTasks is needed to create non-empty cleanup and setup TIP
comment|// arrays, otherwise calls such as job.getTaskInProgress will fail
name|JobID
name|jobId
init|=
name|getJobID
argument_list|()
decl_stmt|;
name|JobConf
name|conf
init|=
name|getJobConf
argument_list|()
decl_stmt|;
name|String
name|jobFile
init|=
literal|""
decl_stmt|;
comment|// create two cleanup tips, one map and one reduce.
name|cleanup
operator|=
operator|new
name|TaskInProgress
index|[
literal|2
index|]
expr_stmt|;
comment|// cleanup map tip.
name|cleanup
index|[
literal|0
index|]
operator|=
operator|new
name|TaskInProgress
argument_list|(
name|jobId
argument_list|,
name|jobFile
argument_list|,
literal|null
argument_list|,
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|this
argument_list|,
name|numMapTasks
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cleanup
index|[
literal|0
index|]
operator|.
name|setJobCleanupTask
argument_list|()
expr_stmt|;
comment|// cleanup reduce tip.
name|cleanup
index|[
literal|1
index|]
operator|=
operator|new
name|TaskInProgress
argument_list|(
name|jobId
argument_list|,
name|jobFile
argument_list|,
name|numMapTasks
argument_list|,
name|numReduceTasks
argument_list|,
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|this
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cleanup
index|[
literal|1
index|]
operator|.
name|setJobCleanupTask
argument_list|()
expr_stmt|;
comment|// create two setup tips, one map and one reduce.
name|setup
operator|=
operator|new
name|TaskInProgress
index|[
literal|2
index|]
expr_stmt|;
comment|// setup map tip.
name|setup
index|[
literal|0
index|]
operator|=
operator|new
name|TaskInProgress
argument_list|(
name|jobId
argument_list|,
name|jobFile
argument_list|,
literal|null
argument_list|,
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|this
argument_list|,
name|numMapTasks
operator|+
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setup
index|[
literal|0
index|]
operator|.
name|setJobSetupTask
argument_list|()
expr_stmt|;
comment|// setup reduce tip.
name|setup
index|[
literal|1
index|]
operator|=
operator|new
name|TaskInProgress
argument_list|(
name|jobId
argument_list|,
name|jobFile
argument_list|,
name|numMapTasks
argument_list|,
name|numReduceTasks
operator|+
literal|1
argument_list|,
name|jobtracker
argument_list|,
name|conf
argument_list|,
name|this
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setup
index|[
literal|1
index|]
operator|.
name|setJobSetupTask
argument_list|()
expr_stmt|;
comment|// create maps
name|numMapTasks
operator|=
name|conf
operator|.
name|getNumMapTasks
argument_list|()
expr_stmt|;
name|maps
operator|=
operator|new
name|TaskInProgress
index|[
name|numMapTasks
index|]
expr_stmt|;
comment|// empty format
name|JobSplit
operator|.
name|TaskSplitMetaInfo
name|split
init|=
name|JobSplit
operator|.
name|EMPTY_TASK_SPLIT
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMapTasks
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|inputLocations
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mapInputLocations
operator|!=
literal|null
condition|)
name|inputLocations
operator|=
name|mapInputLocations
index|[
name|i
index|]
expr_stmt|;
name|maps
index|[
name|i
index|]
operator|=
operator|new
name|FakeTaskInProgress
argument_list|(
name|getJobID
argument_list|()
argument_list|,
name|i
argument_list|,
name|getJobConf
argument_list|()
argument_list|,
name|this
argument_list|,
name|inputLocations
argument_list|,
name|split
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapInputLocations
operator|==
literal|null
condition|)
comment|// Job has no locality info
name|nonLocalMaps
operator|.
name|add
argument_list|(
name|maps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// create reduces
name|numReduceTasks
operator|=
name|conf
operator|.
name|getNumReduceTasks
argument_list|()
expr_stmt|;
name|reduces
operator|=
operator|new
name|TaskInProgress
index|[
name|numReduceTasks
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numReduceTasks
condition|;
name|i
operator|++
control|)
block|{
name|reduces
index|[
name|i
index|]
operator|=
operator|new
name|FakeTaskInProgress
argument_list|(
name|getJobID
argument_list|()
argument_list|,
name|i
argument_list|,
name|getJobConf
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|inited ()
specifier|public
name|boolean
name|inited
parameter_list|()
block|{
return|return
name|initialized
return|;
block|}
annotation|@
name|Override
DECL|method|obtainNewMapTask (final TaskTrackerStatus tts, int clusterSize, int numUniqueHosts, int localityLevel)
specifier|public
name|Task
name|obtainNewMapTask
parameter_list|(
specifier|final
name|TaskTrackerStatus
name|tts
parameter_list|,
name|int
name|clusterSize
parameter_list|,
name|int
name|numUniqueHosts
parameter_list|,
name|int
name|localityLevel
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|map
init|=
literal|0
init|;
name|map
operator|<
name|maps
operator|.
name|length
condition|;
name|map
operator|++
control|)
block|{
name|FakeTaskInProgress
name|tip
init|=
operator|(
name|FakeTaskInProgress
operator|)
name|maps
index|[
name|map
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|tip
operator|.
name|isRunning
argument_list|()
operator|&&
operator|!
name|tip
operator|.
name|isComplete
argument_list|()
operator|&&
name|getLocalityLevel
argument_list|(
name|tip
argument_list|,
name|tts
argument_list|)
operator|<
name|localityLevel
condition|)
block|{
name|TaskAttemptID
name|attemptId
init|=
name|getTaskAttemptID
argument_list|(
name|tip
argument_list|)
decl_stmt|;
name|JobSplit
operator|.
name|TaskSplitMetaInfo
name|split
init|=
name|JobSplit
operator|.
name|EMPTY_TASK_SPLIT
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|MapTask
argument_list|(
literal|""
argument_list|,
name|attemptId
argument_list|,
literal|0
argument_list|,
name|split
operator|.
name|getSplitIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s on %s"
argument_list|,
name|getTaskID
argument_list|()
argument_list|,
name|tts
operator|.
name|getTrackerName
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|runningMapTasks
operator|++
expr_stmt|;
name|tip
operator|.
name|createTaskAttempt
argument_list|(
name|task
argument_list|,
name|tts
operator|.
name|getTrackerName
argument_list|()
argument_list|)
expr_stmt|;
name|nonLocalRunningMaps
operator|.
name|add
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|startTask
argument_list|(
name|tts
operator|.
name|getTrackerName
argument_list|()
argument_list|,
name|task
argument_list|,
name|tip
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|obtainNewReduceTask (final TaskTrackerStatus tts, int clusterSize, int ignored)
specifier|public
name|Task
name|obtainNewReduceTask
parameter_list|(
specifier|final
name|TaskTrackerStatus
name|tts
parameter_list|,
name|int
name|clusterSize
parameter_list|,
name|int
name|ignored
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|reduce
init|=
literal|0
init|;
name|reduce
operator|<
name|reduces
operator|.
name|length
condition|;
name|reduce
operator|++
control|)
block|{
name|FakeTaskInProgress
name|tip
init|=
operator|(
name|FakeTaskInProgress
operator|)
name|reduces
index|[
name|reduce
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|tip
operator|.
name|isRunning
argument_list|()
operator|&&
operator|!
name|tip
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|TaskAttemptID
name|attemptId
init|=
name|getTaskAttemptID
argument_list|(
name|tip
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|ReduceTask
argument_list|(
literal|""
argument_list|,
name|attemptId
argument_list|,
literal|0
argument_list|,
name|maps
operator|.
name|length
argument_list|,
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s on %s"
argument_list|,
name|getTaskID
argument_list|()
argument_list|,
name|tts
operator|.
name|getTrackerName
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|runningReduceTasks
operator|++
expr_stmt|;
name|tip
operator|.
name|createTaskAttempt
argument_list|(
name|task
argument_list|,
name|tts
operator|.
name|getTrackerName
argument_list|()
argument_list|)
expr_stmt|;
name|runningReduces
operator|.
name|add
argument_list|(
name|tip
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|startTask
argument_list|(
name|tts
operator|.
name|getTrackerName
argument_list|()
argument_list|,
name|task
argument_list|,
name|tip
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|mapTaskFinished (TaskInProgress tip)
specifier|public
name|void
name|mapTaskFinished
parameter_list|(
name|TaskInProgress
name|tip
parameter_list|)
block|{
name|runningMapTasks
operator|--
expr_stmt|;
name|finishedMapTasks
operator|++
expr_stmt|;
name|nonLocalRunningMaps
operator|.
name|remove
argument_list|(
name|tip
argument_list|)
expr_stmt|;
block|}
DECL|method|reduceTaskFinished (TaskInProgress tip)
specifier|public
name|void
name|reduceTaskFinished
parameter_list|(
name|TaskInProgress
name|tip
parameter_list|)
block|{
name|runningReduceTasks
operator|--
expr_stmt|;
name|finishedReduceTasks
operator|++
expr_stmt|;
name|runningReduces
operator|.
name|remove
argument_list|(
name|tip
argument_list|)
expr_stmt|;
block|}
DECL|method|getTaskAttemptID (TaskInProgress tip)
specifier|private
name|TaskAttemptID
name|getTaskAttemptID
parameter_list|(
name|TaskInProgress
name|tip
parameter_list|)
block|{
name|JobID
name|jobId
init|=
name|getJobID
argument_list|()
decl_stmt|;
name|TaskType
name|type
init|=
name|tip
operator|.
name|isMapTask
argument_list|()
condition|?
name|TaskType
operator|.
name|MAP
else|:
name|TaskType
operator|.
name|REDUCE
decl_stmt|;
return|return
operator|new
name|TaskAttemptID
argument_list|(
name|jobId
operator|.
name|getJtIdentifier
argument_list|()
argument_list|,
name|jobId
operator|.
name|getId
argument_list|()
argument_list|,
name|type
argument_list|,
name|tip
operator|.
name|getIdWithinJob
argument_list|()
argument_list|,
name|tip
operator|.
name|nextTaskId
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLocalityLevel (TaskInProgress tip, TaskTrackerStatus tts)
name|int
name|getLocalityLevel
parameter_list|(
name|TaskInProgress
name|tip
parameter_list|,
name|TaskTrackerStatus
name|tts
parameter_list|)
block|{
name|FakeTaskInProgress
name|ftip
init|=
operator|(
name|FakeTaskInProgress
operator|)
name|tip
decl_stmt|;
if|if
condition|(
name|ftip
operator|.
name|inputLocations
operator|!=
literal|null
condition|)
block|{
comment|// Check whether we're on the same host as an input split
for|for
control|(
name|String
name|location
range|:
name|ftip
operator|.
name|inputLocations
control|)
block|{
if|if
condition|(
name|location
operator|.
name|equals
argument_list|(
name|tts
operator|.
name|host
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
comment|// Check whether we're on the same rack as an input split
for|for
control|(
name|String
name|location
range|:
name|ftip
operator|.
name|inputLocations
control|)
block|{
if|if
condition|(
name|getRack
argument_list|(
name|location
argument_list|)
operator|.
name|equals
argument_list|(
name|getRack
argument_list|(
name|tts
operator|.
name|host
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
comment|// Not on same rack or host
return|return
literal|2
return|;
block|}
else|else
block|{
comment|// Job has no locality info
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
DECL|class|FakeTaskInProgress
class|class
name|FakeTaskInProgress
extends|extends
name|TaskInProgress
block|{
DECL|field|isMap
specifier|private
name|boolean
name|isMap
decl_stmt|;
DECL|field|fakeJob
specifier|private
name|FakeJobInProgress
name|fakeJob
decl_stmt|;
DECL|field|activeTasks
specifier|private
name|TreeMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|String
argument_list|>
name|activeTasks
decl_stmt|;
DECL|field|taskStatus
specifier|private
name|TaskStatus
name|taskStatus
decl_stmt|;
DECL|field|isComplete
specifier|private
name|boolean
name|isComplete
init|=
literal|false
decl_stmt|;
DECL|field|inputLocations
specifier|private
name|String
index|[]
name|inputLocations
decl_stmt|;
comment|// Constructor for map
DECL|method|FakeTaskInProgress (JobID jId, int id, JobConf jobConf, FakeJobInProgress job, String[] inputLocations, JobSplit.TaskSplitMetaInfo split)
name|FakeTaskInProgress
parameter_list|(
name|JobID
name|jId
parameter_list|,
name|int
name|id
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|FakeJobInProgress
name|job
parameter_list|,
name|String
index|[]
name|inputLocations
parameter_list|,
name|JobSplit
operator|.
name|TaskSplitMetaInfo
name|split
parameter_list|)
block|{
name|super
argument_list|(
name|jId
argument_list|,
literal|""
argument_list|,
name|split
argument_list|,
literal|null
argument_list|,
name|jobConf
argument_list|,
name|job
argument_list|,
name|id
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|isMap
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|fakeJob
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|inputLocations
operator|=
name|inputLocations
expr_stmt|;
name|activeTasks
operator|=
operator|new
name|TreeMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|taskStatus
operator|=
name|TaskStatus
operator|.
name|createTaskStatus
argument_list|(
name|isMap
argument_list|)
expr_stmt|;
name|taskStatus
operator|.
name|setRunState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
block|}
comment|// Constructor for reduce
DECL|method|FakeTaskInProgress (JobID jId, int id, JobConf jobConf, FakeJobInProgress job)
name|FakeTaskInProgress
parameter_list|(
name|JobID
name|jId
parameter_list|,
name|int
name|id
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|FakeJobInProgress
name|job
parameter_list|)
block|{
name|super
argument_list|(
name|jId
argument_list|,
literal|""
argument_list|,
name|jobConf
operator|.
name|getNumMapTasks
argument_list|()
argument_list|,
name|id
argument_list|,
literal|null
argument_list|,
name|jobConf
argument_list|,
name|job
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|isMap
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|fakeJob
operator|=
name|job
expr_stmt|;
name|activeTasks
operator|=
operator|new
name|TreeMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|taskStatus
operator|=
name|TaskStatus
operator|.
name|createTaskStatus
argument_list|(
name|isMap
argument_list|)
expr_stmt|;
name|taskStatus
operator|.
name|setRunState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
block|}
DECL|method|createTaskAttempt (Task task, String taskTracker)
specifier|private
name|void
name|createTaskAttempt
parameter_list|(
name|Task
name|task
parameter_list|,
name|String
name|taskTracker
parameter_list|)
block|{
name|activeTasks
operator|.
name|put
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
argument_list|,
name|taskTracker
argument_list|)
expr_stmt|;
name|taskStatus
operator|=
name|TaskStatus
operator|.
name|createTaskStatus
argument_list|(
name|isMap
argument_list|,
name|task
operator|.
name|getTaskID
argument_list|()
argument_list|,
literal|0.5f
argument_list|,
literal|1
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|TaskStatus
operator|.
name|Phase
operator|.
name|STARTING
argument_list|,
operator|new
name|Counters
argument_list|()
argument_list|)
expr_stmt|;
name|taskStatus
operator|.
name|setStartTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getActiveTasks ()
name|TreeMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|String
argument_list|>
name|getActiveTasks
parameter_list|()
block|{
return|return
name|activeTasks
return|;
block|}
DECL|method|isComplete ()
specifier|public
specifier|synchronized
name|boolean
name|isComplete
parameter_list|()
block|{
return|return
name|isComplete
return|;
block|}
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|activeTasks
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskStatus (TaskAttemptID taskid)
specifier|public
name|TaskStatus
name|getTaskStatus
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|)
block|{
return|return
name|taskStatus
return|;
block|}
DECL|method|killAttempt ()
name|void
name|killAttempt
parameter_list|()
block|{
if|if
condition|(
name|isMap
condition|)
block|{
name|fakeJob
operator|.
name|mapTaskFinished
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fakeJob
operator|.
name|reduceTaskFinished
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|activeTasks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|taskStatus
operator|.
name|setRunState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
block|}
DECL|method|finishAttempt ()
name|void
name|finishAttempt
parameter_list|()
block|{
name|isComplete
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|isMap
condition|)
block|{
name|fakeJob
operator|.
name|mapTaskFinished
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fakeJob
operator|.
name|reduceTaskFinished
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|activeTasks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|taskStatus
operator|.
name|setRunState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|UNASSIGNED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FakeQueueManager
specifier|static
class|class
name|FakeQueueManager
extends|extends
name|QueueManager
block|{
DECL|field|queues
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
literal|null
decl_stmt|;
DECL|method|FakeQueueManager ()
name|FakeQueueManager
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setQueues (Set<String> queues)
name|void
name|setQueues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|)
block|{
name|this
operator|.
name|queues
operator|=
name|queues
expr_stmt|;
block|}
DECL|method|getLeafQueueNames ()
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|getLeafQueueNames
parameter_list|()
block|{
return|return
name|queues
return|;
block|}
block|}
DECL|class|FakeTaskTrackerManager
specifier|static
class|class
name|FakeTaskTrackerManager
implements|implements
name|TaskTrackerManager
block|{
DECL|field|maps
name|int
name|maps
init|=
literal|0
decl_stmt|;
DECL|field|reduces
name|int
name|reduces
init|=
literal|0
decl_stmt|;
DECL|field|maxMapTasksPerTracker
name|int
name|maxMapTasksPerTracker
init|=
literal|2
decl_stmt|;
DECL|field|maxReduceTasksPerTracker
name|int
name|maxReduceTasksPerTracker
init|=
literal|2
decl_stmt|;
DECL|field|ttExpiryInterval
name|long
name|ttExpiryInterval
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
comment|// default interval
DECL|field|listeners
name|List
argument_list|<
name|JobInProgressListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|JobInProgressListener
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobs
name|Map
argument_list|<
name|JobID
argument_list|,
name|JobInProgress
argument_list|>
name|jobs
init|=
operator|new
name|HashMap
argument_list|<
name|JobID
argument_list|,
name|JobInProgress
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|trackers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TaskTracker
argument_list|>
name|trackers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TaskTracker
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|statuses
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TaskStatus
argument_list|>
name|statuses
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TaskStatus
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|tips
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FakeTaskInProgress
argument_list|>
name|tips
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FakeTaskInProgress
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|trackerForTip
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TaskTrackerStatus
argument_list|>
name|trackerForTip
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TaskTrackerStatus
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|FakeTaskTrackerManager (int numRacks, int numTrackersPerRack)
specifier|public
name|FakeTaskTrackerManager
parameter_list|(
name|int
name|numRacks
parameter_list|,
name|int
name|numTrackersPerRack
parameter_list|)
block|{
name|int
name|nextTrackerId
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|rack
init|=
literal|1
init|;
name|rack
operator|<=
name|numRacks
condition|;
name|rack
operator|++
control|)
block|{
for|for
control|(
name|int
name|node
init|=
literal|1
init|;
name|node
operator|<=
name|numTrackersPerRack
condition|;
name|node
operator|++
control|)
block|{
name|int
name|id
init|=
name|nextTrackerId
operator|++
decl_stmt|;
name|String
name|host
init|=
literal|"rack"
operator|+
name|rack
operator|+
literal|".node"
operator|+
name|node
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating TaskTracker tt"
operator|+
name|id
operator|+
literal|" on "
operator|+
name|host
argument_list|)
expr_stmt|;
name|TaskTracker
name|tt
init|=
operator|new
name|TaskTracker
argument_list|(
literal|"tt"
operator|+
name|id
argument_list|)
decl_stmt|;
name|tt
operator|.
name|setStatus
argument_list|(
operator|new
name|TaskTrackerStatus
argument_list|(
literal|"tt"
operator|+
name|id
argument_list|,
name|host
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxMapTasksPerTracker
argument_list|,
name|maxReduceTasksPerTracker
argument_list|)
argument_list|)
expr_stmt|;
name|trackers
operator|.
name|put
argument_list|(
literal|"tt"
operator|+
name|id
argument_list|,
name|tt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getClusterStatus ()
specifier|public
name|ClusterStatus
name|getClusterStatus
parameter_list|()
block|{
name|int
name|numTrackers
init|=
name|trackers
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
operator|new
name|ClusterStatus
argument_list|(
name|numTrackers
argument_list|,
literal|0
argument_list|,
name|ttExpiryInterval
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|,
name|numTrackers
operator|*
name|maxMapTasksPerTracker
argument_list|,
name|numTrackers
operator|*
name|maxReduceTasksPerTracker
argument_list|,
name|JobTrackerStatus
operator|.
name|RUNNING
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueManager ()
specifier|public
name|QueueManager
name|getQueueManager
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberOfUniqueHosts ()
specifier|public
name|int
name|getNumberOfUniqueHosts
parameter_list|()
block|{
return|return
name|trackers
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|taskTrackers ()
specifier|public
name|Collection
argument_list|<
name|TaskTrackerStatus
argument_list|>
name|taskTrackers
parameter_list|()
block|{
name|List
argument_list|<
name|TaskTrackerStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskTrackerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskTracker
name|tt
range|:
name|trackers
operator|.
name|values
argument_list|()
control|)
block|{
name|statuses
operator|.
name|add
argument_list|(
name|tt
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
return|;
block|}
annotation|@
name|Override
DECL|method|addJobInProgressListener (JobInProgressListener listener)
specifier|public
name|void
name|addJobInProgressListener
parameter_list|(
name|JobInProgressListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeJobInProgressListener (JobInProgressListener listener)
specifier|public
name|void
name|removeJobInProgressListener
parameter_list|(
name|JobInProgressListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNextHeartbeatInterval ()
specifier|public
name|int
name|getNextHeartbeatInterval
parameter_list|()
block|{
return|return
name|JTConfig
operator|.
name|JT_HEARTBEAT_INTERVAL_MIN_DEFAULT
return|;
block|}
annotation|@
name|Override
DECL|method|killJob (JobID jobid)
specifier|public
name|void
name|killJob
parameter_list|(
name|JobID
name|jobid
parameter_list|)
block|{
return|return;
block|}
annotation|@
name|Override
DECL|method|getJob (JobID jobid)
specifier|public
name|JobInProgress
name|getJob
parameter_list|(
name|JobID
name|jobid
parameter_list|)
block|{
return|return
name|jobs
operator|.
name|get
argument_list|(
name|jobid
argument_list|)
return|;
block|}
DECL|method|initJob (JobInProgress job)
specifier|public
name|void
name|initJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
try|try
block|{
name|job
operator|.
name|initTasks
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KillInterruptedException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
block|}
DECL|method|failJob (JobInProgress job)
specifier|public
name|void
name|failJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
comment|// do nothing
block|}
comment|// Test methods
DECL|method|submitJob (JobInProgress job)
specifier|public
name|void
name|submitJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|jobs
operator|.
name|put
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
for|for
control|(
name|JobInProgressListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|jobAdded
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTaskTracker (String trackerID)
specifier|public
name|TaskTracker
name|getTaskTracker
parameter_list|(
name|String
name|trackerID
parameter_list|)
block|{
return|return
name|trackers
operator|.
name|get
argument_list|(
name|trackerID
argument_list|)
return|;
block|}
DECL|method|startTask (String trackerName, Task t, FakeTaskInProgress tip)
specifier|public
name|void
name|startTask
parameter_list|(
name|String
name|trackerName
parameter_list|,
name|Task
name|t
parameter_list|,
name|FakeTaskInProgress
name|tip
parameter_list|)
block|{
specifier|final
name|boolean
name|isMap
init|=
name|t
operator|.
name|isMapTask
argument_list|()
decl_stmt|;
if|if
condition|(
name|isMap
condition|)
block|{
name|maps
operator|++
expr_stmt|;
block|}
else|else
block|{
name|reduces
operator|++
expr_stmt|;
block|}
name|String
name|attemptId
init|=
name|t
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TaskStatus
name|status
init|=
name|tip
operator|.
name|getTaskStatus
argument_list|(
name|t
operator|.
name|getTaskID
argument_list|()
argument_list|)
decl_stmt|;
name|TaskTrackerStatus
name|trackerStatus
init|=
name|trackers
operator|.
name|get
argument_list|(
name|trackerName
argument_list|)
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|tips
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
name|tip
argument_list|)
expr_stmt|;
name|statuses
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|trackerForTip
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
name|trackerStatus
argument_list|)
expr_stmt|;
name|status
operator|.
name|setRunState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|trackerStatus
operator|.
name|getTaskReports
argument_list|()
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|finishTask (String taskTrackerName, String attemptId)
specifier|public
name|void
name|finishTask
parameter_list|(
name|String
name|taskTrackerName
parameter_list|,
name|String
name|attemptId
parameter_list|)
block|{
name|FakeTaskInProgress
name|tip
init|=
name|tips
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
name|maps
operator|--
expr_stmt|;
block|}
else|else
block|{
name|reduces
operator|--
expr_stmt|;
block|}
name|tip
operator|.
name|finishAttempt
argument_list|()
expr_stmt|;
name|TaskStatus
name|status
init|=
name|statuses
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|trackers
operator|.
name|get
argument_list|(
name|taskTrackerName
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|getTaskReports
argument_list|()
operator|.
name|remove
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|killTask (TaskAttemptID attemptId, boolean shouldFail)
specifier|public
name|boolean
name|killTask
parameter_list|(
name|TaskAttemptID
name|attemptId
parameter_list|,
name|boolean
name|shouldFail
parameter_list|)
block|{
name|String
name|attemptIdStr
init|=
name|attemptId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|FakeTaskInProgress
name|tip
init|=
name|tips
operator|.
name|get
argument_list|(
name|attemptIdStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
name|maps
operator|--
expr_stmt|;
block|}
else|else
block|{
name|reduces
operator|--
expr_stmt|;
block|}
name|tip
operator|.
name|killAttempt
argument_list|()
expr_stmt|;
name|TaskStatus
name|status
init|=
name|statuses
operator|.
name|get
argument_list|(
name|attemptIdStr
argument_list|)
decl_stmt|;
name|trackerForTip
operator|.
name|get
argument_list|(
name|attemptIdStr
argument_list|)
operator|.
name|getTaskReports
argument_list|()
operator|.
name|remove
argument_list|(
name|status
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|field|conf
specifier|protected
name|JobConf
name|conf
decl_stmt|;
DECL|field|scheduler
specifier|protected
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|taskTrackerManager
specifier|private
name|FakeTaskTrackerManager
name|taskTrackerManager
decl_stmt|;
DECL|field|clock
specifier|private
name|FakeClock
name|clock
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|jobCounter
operator|=
literal|0
expr_stmt|;
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Make sure data directory exists
comment|// Create an empty pools file (so we can add/remove pools later)
name|FileWriter
name|fileWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"<allocations />\n"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|setUpCluster
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getRack (String hostname)
specifier|public
name|String
name|getRack
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
comment|// Host names are of the form rackN.nodeM, so split at the dot.
return|return
name|hostname
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
index|[
literal|0
index|]
return|;
block|}
DECL|method|setUpCluster (int numRacks, int numNodesPerRack, boolean assignMultiple)
specifier|private
name|void
name|setUpCluster
parameter_list|(
name|int
name|numRacks
parameter_list|,
name|int
name|numNodesPerRack
parameter_list|,
name|boolean
name|assignMultiple
parameter_list|)
throws|throws
name|IOException
block|{
name|resetMetrics
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.allocation.file"
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.poolnameproperty"
argument_list|,
name|POOL_PROPERTY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"mapred.fairscheduler.assignmultiple"
argument_list|,
name|assignMultiple
argument_list|)
expr_stmt|;
comment|// Manually set locality delay because we aren't using a JobTracker so
comment|// we can't auto-compute it from the heartbeat interval.
name|conf
operator|.
name|setLong
argument_list|(
literal|"mapred.fairscheduler.locality.delay.node"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"mapred.fairscheduler.locality.delay.rack"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|=
operator|new
name|FakeTaskTrackerManager
argument_list|(
name|numRacks
argument_list|,
name|numNodesPerRack
argument_list|)
expr_stmt|;
name|clock
operator|=
operator|new
name|FakeClock
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|new
name|FairScheduler
argument_list|(
name|clock
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|waitForMapsBeforeLaunchingReduces
operator|=
literal|false
expr_stmt|;
name|scheduler
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set up a metrics context that doesn't emit anywhere but stores the data    * so we can verify it. Also clears it of any data so that different test    * cases don't pollute each other.    */
DECL|method|resetMetrics ()
specifier|private
name|void
name|resetMetrics
parameter_list|()
throws|throws
name|IOException
block|{
name|ContextFactory
name|factory
init|=
name|ContextFactory
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setAttribute
argument_list|(
literal|"fairscheduler.class"
argument_list|,
name|NoEmitMetricsContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MetricsUtil
operator|.
name|getContext
argument_list|(
literal|"fairscheduler"
argument_list|)
operator|.
name|createRecord
argument_list|(
literal|"jobs"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|MetricsUtil
operator|.
name|getContext
argument_list|(
literal|"fairscheduler"
argument_list|)
operator|.
name|createRecord
argument_list|(
literal|"pools"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|.
name|terminate
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|submitJobNotInitialized (int state, int maps, int reduces)
specifier|private
name|JobInProgress
name|submitJobNotInitialized
parameter_list|(
name|int
name|state
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|submitJob
argument_list|(
name|state
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|submitJob (int state, int maps, int reduces)
specifier|private
name|JobInProgress
name|submitJob
parameter_list|(
name|int
name|state
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|submitJob
argument_list|(
name|state
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|submitJob (int state, int maps, int reduces, String pool)
specifier|private
name|JobInProgress
name|submitJob
parameter_list|(
name|int
name|state
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|String
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|submitJob
argument_list|(
name|state
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|,
name|pool
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|submitJob (int state, int maps, int reduces, String pool, String[][] mapInputLocations, boolean initializeJob)
specifier|private
name|JobInProgress
name|submitJob
parameter_list|(
name|int
name|state
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|String
name|pool
parameter_list|,
name|String
index|[]
index|[]
name|mapInputLocations
parameter_list|,
name|boolean
name|initializeJob
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
name|maps
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
name|reduces
argument_list|)
expr_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
name|jobConf
operator|.
name|set
argument_list|(
name|POOL_PROPERTY
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|JobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|jobConf
argument_list|,
name|taskTrackerManager
argument_list|,
name|mapInputLocations
argument_list|,
name|UtilsForTests
operator|.
name|getJobTracker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|initializeJob
condition|)
block|{
name|taskTrackerManager
operator|.
name|initJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|setRunState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|startTime
operator|=
name|clock
operator|.
name|time
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|submitJobs (int number, int state, int maps, int reduces)
specifier|protected
name|void
name|submitJobs
parameter_list|(
name|int
name|number
parameter_list|,
name|int
name|state
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
block|{
name|submitJob
argument_list|(
name|state
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllocationFileParsing ()
specifier|public
name|void
name|testAllocationFileParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give pool A a minimum of 1 map, 2 reduces
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>1</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>2</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give pool B a minimum of 2 maps, 1 reduce
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>2</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>1</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give pool C min maps but no min reduces
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>2</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give pool D a limit of 3 running jobs
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningJobs>3</maxRunningJobs>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give pool E a preemption timeout of one minute
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolE\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>60</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Set default limit of jobs per pool to 15
name|out
operator|.
name|println
argument_list|(
literal|"<poolMaxJobsDefault>15</poolMaxJobsDefault>"
argument_list|)
expr_stmt|;
comment|// Set default limit of jobs per user to 5
name|out
operator|.
name|println
argument_list|(
literal|"<userMaxJobsDefault>5</userMaxJobsDefault>"
argument_list|)
expr_stmt|;
comment|// Give user1 a limit of 10 jobs
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningJobs>10</maxRunningJobs>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
comment|// Set default min share preemption timeout to 2 minutes
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>120"
operator|+
literal|"</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
comment|// Set fair share preemption timeout to 5 minutes
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>300</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|PoolManager
name|poolManager
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
decl_stmt|;
name|poolManager
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|poolManager
operator|.
name|getPools
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 5 in file + default pool
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
name|Pool
operator|.
name|DEFAULT_POOL_NAME
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
name|Pool
operator|.
name|DEFAULT_POOL_NAME
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
literal|"poolA"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
literal|"poolA"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
literal|"poolB"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
literal|"poolB"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
literal|"poolC"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
literal|"poolC"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
literal|"poolD"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
literal|"poolD"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
literal|"poolE"
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolManager
operator|.
name|getAllocation
argument_list|(
literal|"poolE"
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|poolManager
operator|.
name|getPoolMaxJobs
argument_list|(
name|Pool
operator|.
name|DEFAULT_POOL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|poolManager
operator|.
name|getPoolMaxJobs
argument_list|(
literal|"poolA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|poolManager
operator|.
name|getPoolMaxJobs
argument_list|(
literal|"poolB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|poolManager
operator|.
name|getPoolMaxJobs
argument_list|(
literal|"poolC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|poolManager
operator|.
name|getPoolMaxJobs
argument_list|(
literal|"poolD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|poolManager
operator|.
name|getPoolMaxJobs
argument_list|(
literal|"poolE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|poolManager
operator|.
name|getUserMaxJobs
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|poolManager
operator|.
name|getUserMaxJobs
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|poolManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
name|Pool
operator|.
name|DEFAULT_POOL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|poolManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"poolA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|poolManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"poolB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|poolManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"poolC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|poolManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"poolD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|poolManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"poolA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60000
argument_list|,
name|poolManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"poolE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|300000
argument_list|,
name|poolManager
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTaskNotAssignedWhenNoJobsArePresent ()
specifier|public
name|void
name|testTaskNotAssignedWhenNoJobsArePresent
parameter_list|()
throws|throws
name|IOException
block|{
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonRunningJobsAreIgnored ()
specifier|public
name|void
name|testNonRunningJobsAreIgnored
parameter_list|()
throws|throws
name|IOException
block|{
name|submitJobs
argument_list|(
literal|1
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|submitJobs
argument_list|(
literal|1
argument_list|,
name|JobStatus
operator|.
name|FAILED
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|submitJobs
argument_list|(
literal|1
argument_list|,
name|JobStatus
operator|.
name|KILLED
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Check that we still don't assign jobs after an update
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test contains two jobs with fewer required tasks than there are slots.    * We check that all tasks are assigned, but job 1 gets them first because it    * was submitted earlier.    */
DECL|method|testSmallJobs ()
specifier|public
name|void
name|testSmallJobs
parameter_list|()
throws|throws
name|IOException
block|{
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMetrics
argument_list|()
expr_stmt|;
comment|// Advance time before submitting another job j2, to make j1 run before j2
comment|// deterministically.
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMetrics
argument_list|()
expr_stmt|;
comment|// Assign tasks and check that jobs alternate in filling slots
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the scheduler has started counting the tasks as running
comment|// as soon as it launched them.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMetrics
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test is identical to testSmallJobs but sets assignMultiple to    * true so that multiple tasks can be assigned per heartbeat.    */
DECL|method|testSmallJobsWithAssignMultiple ()
specifier|public
name|void
name|testSmallJobsWithAssignMultiple
parameter_list|()
throws|throws
name|IOException
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMetrics
argument_list|()
expr_stmt|;
comment|// Advance time before submitting another job j2, to make j1 run before j2
comment|// deterministically.
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMetrics
argument_list|()
expr_stmt|;
comment|// Assign tasks and check that jobs alternate in filling slots
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the scheduler has started counting the tasks as running
comment|// as soon as it launched them.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMetrics
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test begins by submitting two jobs with 10 maps and reduces each.    * The first job is submitted 100ms after the second, to make it get slots    * first deterministically. We then assign a wave of tasks and check that    * they are given alternately to job1, job2, job1, job2, etc. We finish    * these tasks and assign a second wave, which should continue to be    * allocated in this manner.    */
DECL|method|testLargeJobs ()
specifier|public
name|void
name|testLargeJobs
parameter_list|()
throws|throws
name|IOException
block|{
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance time before submitting another job j2, to make j1 run before j2
comment|// deterministically.
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that tasks are filled alternately by the jobs
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Check that no new tasks can be launched once the tasktrackers are full
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the scheduler has started counting the tasks as running
comment|// as soon as it launched them.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
comment|// Finish up the tasks and advance time again. Note that we must finish
comment|// the task since FakeJobInProgress does not properly maintain running
comment|// tasks, so the scheduler will always get an empty task list from
comment|// the JobInProgress's getTasks(TaskType.MAP)/getTasks(TaskType.REDUCE) and
comment|// think they finished.
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that tasks are filled alternately by the jobs
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Check scheduler variables; the demands should now be 8 because 2 tasks
comment|// of each type have finished in each job
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A copy of testLargeJobs that enables the assignMultiple feature to launch    * multiple tasks per heartbeat. Results should be the same as testLargeJobs.    */
DECL|method|testLargeJobsWithAssignMultiple ()
specifier|public
name|void
name|testLargeJobsWithAssignMultiple
parameter_list|()
throws|throws
name|IOException
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance time before submitting another job j2, to make j1 run before j2
comment|// deterministically.
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
comment|// Check scheduler variables; the fair shares should now have been allocated
comment|// equally between j1 and j2, but j1 should have (4 slots)*(100 ms) deficit
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that tasks are filled alternately by the jobs
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Check that no new tasks can be launched once the tasktrackers are full
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the scheduler has started counting the tasks as running
comment|// as soon as it launched them.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
comment|// Finish up the tasks and advance time again. Note that we must finish
comment|// the task since FakeJobInProgress does not properly maintain running
comment|// tasks, so the scheduler will always get an empty task list from
comment|// the JobInProgress's getTasks(TaskType.MAP)/getTasks(TaskType.REDUCE) and
comment|// think they finished.
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that tasks are filled alternately by the jobs
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt1"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt1"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt1"
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt2"
argument_list|,
literal|"attempt_test_0002_m_000003_0 on tt2"
argument_list|,
literal|"attempt_test_0002_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Check scheduler variables; the demands should now be 8 because 2 tasks
comment|// of each type have finished in each job
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * We submit two jobs such that one has 2x the priority of the other to     * a cluster of 3 nodes, wait for 100 ms, and check that the weights/shares     * the high-priority job gets 4 tasks while the normal-priority job gets 2.    */
DECL|method|testJobsWithPriorities ()
specifier|public
name|void
name|testJobsWithPriorities
parameter_list|()
throws|throws
name|IOException
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|job2
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
comment|// Advance time
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Assign tasks and check that j2 gets 2x more tasks than j1. In addition,
comment|// whenever the jobs' runningTasks/weight ratios are tied, j1 should get
comment|// the new task first because it started first; thus the tasks of each
comment|// type should be handed out alternately to 1, 2, 2, 1, 2, 2, etc.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"HEREEEE"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt3"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt3"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_m_000003_0 on tt3"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_r_000003_0 on tt3"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test starts by submitting three large jobs:    * - job1 in the default pool, at time 0    * - job2 in poolA, with an allocation of 1 map / 2 reduces, at time 200    * - job3 in poolB, with an allocation of 2 maps / 1 reduce, at time 300    *     * We then assign tasks to all slots. The maps should be assigned in the    * order job2, job3, job 3, job1 because jobs 3 and 2 have guaranteed slots    * (1 and 2 respectively). Job2 comes before job3 when they are both at 0    * slots because it has an earlier start time. In a similar manner,    * reduces should be assigned as job2, job3, job2, job1.    */
DECL|method|testLargeJobsWithPools ()
specifier|public
name|void
name|testLargeJobsWithPools
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give pool A a minimum of 1 map, 2 reduces
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>1</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>2</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give pool B a minimum of 2 maps, 1 reduce
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>2</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>1</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|Pool
name|defaultPool
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|Pool
name|poolA
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"poolA"
argument_list|)
decl_stmt|;
name|Pool
name|poolB
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"poolB"
argument_list|)
decl_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance time 200ms and submit jobs 2 and 3
name|advanceTime
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolB"
argument_list|)
decl_stmt|;
name|JobInfo
name|info3
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job3
argument_list|)
decl_stmt|;
comment|// Check that minimum and fair shares have been allocated
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolB
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|poolB
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info3
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info3
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance time 100ms
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Assign tasks and check that slots are first given to needy jobs
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test starts by submitting three large jobs:    * - job1 in the default pool, at time 0    * - job2 in poolA, with an allocation of 2 maps / 2 reduces, at time 200    * - job3 in poolA, with an allocation of 2 maps / 2 reduces, at time 300    *     * After this, we start assigning tasks. The first two tasks of each type    * should be assigned to job2 and job3 since they are in a pool with an    * allocation guarantee, but the next two slots should be assigned to job 3    * because the pool will no longer be needy.    */
DECL|method|testLargeJobsWithExcessCapacity ()
specifier|public
name|void
name|testLargeJobsWithExcessCapacity
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give pool A a minimum of 2 maps, 2 reduces
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>2</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>2</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|Pool
name|poolA
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance time 200ms and submit job 2
name|advanceTime
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
comment|// Check that minimum and fair shares have been allocated
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance time 100ms and submit job 3
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInfo
name|info3
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job3
argument_list|)
decl_stmt|;
comment|// Check that minimum and fair shares have been allocated
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info3
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info3
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance time
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Assign tasks and check that slots are first given to needy jobs, but
comment|// that job 1 gets two tasks after due to having a larger share.
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * A copy of testLargeJobsWithExcessCapacity that enables assigning multiple    * tasks per heartbeat. Results should match testLargeJobsWithExcessCapacity.    */
DECL|method|testLargeJobsWithExcessCapacityAndAssignMultiple ()
specifier|public
name|void
name|testLargeJobsWithExcessCapacityAndAssignMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give pool A a minimum of 2 maps, 2 reduces
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>2</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>2</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|Pool
name|poolA
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance time 200ms and submit job 2
name|advanceTime
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
comment|// Check that minimum and fair shares have been allocated
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance time 100ms and submit job 3
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInfo
name|info3
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job3
argument_list|)
decl_stmt|;
comment|// Check that minimum and fair shares have been allocated
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info3
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info3
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Advance time
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Assign tasks and check that slots are first given to needy jobs, but
comment|// that job 1 gets two tasks after due to having a larger share.
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0003_m_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0003_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt2"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test starts by submitting two jobs at time 0:    * - job1 in the default pool    * - job2, with 1 map and 1 reduce, in poolA, which has an alloc of 4    *   maps and 4 reduces    *     * When we assign the slots, job2 should only get 1 of each type of task.    */
DECL|method|testSmallJobInLargePool ()
specifier|public
name|void
name|testSmallJobInLargePool
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give pool A a minimum of 4 maps, 4 reduces
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>4</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>4</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assign tasks and check that slots are first given to needy jobs
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test starts by submitting four jobs in the default pool. However, the    * maxRunningJobs limit for this pool has been set to two. We should see only    * the first two jobs get scheduled, each with half the total slots.    */
DECL|method|testPoolMaxJobs ()
specifier|public
name|void
name|testPoolMaxJobs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningJobs>2</maxRunningJobs>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Submit jobs, advancing time in-between to make sure that they are
comment|// all submitted at distinct times.
name|JobInProgress
name|job1
init|=
name|submitJobNotInitialized
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|FakeJobInProgress
operator|)
name|job1
operator|)
operator|.
name|inited
argument_list|()
argument_list|)
expr_stmt|;
name|job1
operator|.
name|getStatus
argument_list|()
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJobNotInitialized
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|FakeJobInProgress
operator|)
name|job2
operator|)
operator|.
name|inited
argument_list|()
argument_list|)
expr_stmt|;
name|job2
operator|.
name|getStatus
argument_list|()
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job3
init|=
name|submitJobNotInitialized
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info3
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job3
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job4
init|=
name|submitJobNotInitialized
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info4
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job4
argument_list|)
decl_stmt|;
comment|// Only two of the jobs should be initialized.
name|assertTrue
argument_list|(
operator|(
operator|(
name|FakeJobInProgress
operator|)
name|job1
operator|)
operator|.
name|inited
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|FakeJobInProgress
operator|)
name|job2
operator|)
operator|.
name|inited
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|FakeJobInProgress
operator|)
name|job3
operator|)
operator|.
name|inited
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|FakeJobInProgress
operator|)
name|job4
operator|)
operator|.
name|inited
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info3
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info3
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info4
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info4
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assign tasks and check that only jobs 1 and 2 get them
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test starts by submitting two jobs by user "user1" to the default    * pool, and two jobs by "user2". We set user1's job limit to 1. We should    * see one job from user1 and two from user2.     */
DECL|method|testUserMaxJobs ()
specifier|public
name|void
name|testUserMaxJobs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningJobs>1</maxRunningJobs>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Submit jobs, advancing time in-between to make sure that they are
comment|// all submitted at distinct times.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job1
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job2
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job3
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|JobInfo
name|info3
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job3
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job4
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job4
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|JobInfo
name|info4
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job4
argument_list|)
decl_stmt|;
comment|// Check scheduler variables
name|assertEquals
argument_list|(
literal|1.33
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.33
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.33
argument_list|,
name|info3
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.33
argument_list|,
name|info3
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.33
argument_list|,
name|info4
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.33
argument_list|,
name|info4
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
comment|// Assign tasks and check that slots are given only to jobs 1, 3 and 4
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0004_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0004_r_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test a combination of pool job limits and user job limits, the latter    * specified through both the userMaxJobsDefaults (for some users) and    * user-specific&lt;user&gt; elements in the allocations file.     */
DECL|method|testComplexJobLimits ()
specifier|public
name|void
name|testComplexJobLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningJobs>1</maxRunningJobs>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningJobs>1</maxRunningJobs>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningJobs>10</maxRunningJobs>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<userMaxJobsDefault>2</userMaxJobsDefault>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Submit jobs, advancing time in-between to make sure that they are
comment|// all submitted at distinct times.
comment|// Two jobs for user1; only one should get to run
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job1
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job2
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Three jobs for user2; all should get to run
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job3
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|JobInfo
name|info3
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job3
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job4
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job4
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|JobInfo
name|info4
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job4
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job5
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job5
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|JobInfo
name|info5
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job5
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Three jobs for user3; only two should get to run
name|JobInProgress
name|job6
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job6
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|JobInfo
name|info6
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job6
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job7
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job7
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|JobInfo
name|info7
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job7
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job8
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|job8
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|JobInfo
name|info8
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job8
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Two jobs for user4, in poolA; only one should get to run
name|JobInProgress
name|job9
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|job9
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user4"
argument_list|)
expr_stmt|;
name|JobInfo
name|info9
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job9
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job10
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|job10
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|,
literal|"user4"
argument_list|)
expr_stmt|;
name|JobInfo
name|info10
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job10
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Check scheduler variables. The jobs in poolA should get half
comment|// the total share, while those in the default pool should get
comment|// the other half. This works out to 2 slots each for the jobs
comment|// in poolA and 1/3 each for the jobs in the default pool because
comment|// there are 2 runnable jobs in poolA and 6 jobs in the default pool.
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info3
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info3
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info4
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info4
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info5
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info5
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info6
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info6
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info7
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.33
argument_list|,
name|info7
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info8
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info8
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info9
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info9
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info10
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|info10
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSizeBasedWeight ()
specifier|public
name|void
name|testSizeBasedWeight
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|sizeBasedWeight
operator|=
literal|true
expr_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
operator|>
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
operator|>
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test submits jobs in three pools: poolA, which has a weight    * of 2.0; poolB, which has a weight of 0.5; and the default pool, which    * should have a weight of 1.0. It then checks that the map and reduce    * fair shares are given out accordingly. We then submit a second job to    * pool B and check that each gets half of the pool (weight of 0.25).    */
DECL|method|testPoolWeights ()
specifier|public
name|void
name|testPoolWeights
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.5</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Submit jobs, advancing time in-between to make sure that they are
comment|// all submitted at distinct times.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolB"
argument_list|)
decl_stmt|;
name|JobInfo
name|info3
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job3
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.14
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.14
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.28
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.28
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.57
argument_list|,
name|info3
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.57
argument_list|,
name|info3
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|JobInProgress
name|job4
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolB"
argument_list|)
decl_stmt|;
name|JobInfo
name|info4
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job4
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.14
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.14
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.28
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.28
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.28
argument_list|,
name|info3
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.28
argument_list|,
name|info3
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.28
argument_list|,
name|info4
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.28
argument_list|,
name|info4
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|verifyMetrics
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test submits jobs in two pools, poolA and poolB. None of the    * jobs in poolA have maps, but this should not affect their reduce    * share.    */
DECL|method|testPoolWeightsWhenNoMaps ()
specifier|public
name|void
name|testPoolWeightsWhenNoMaps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Submit jobs, advancing time in-between to make sure that they are
comment|// all submitted at distinct times.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|JobInfo
name|info2
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolB"
argument_list|)
decl_stmt|;
name|JobInfo
name|info3
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job3
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|/*     assertEquals(0,     info1.mapWeight, 0.01);     assertEquals(1.0,   info1.reduceWeight, 0.01);     assertEquals(0,     info2.mapWeight, 0.01);     assertEquals(1.0,   info2.reduceWeight, 0.01);     assertEquals(1.0,   info3.mapWeight, 0.01);     assertEquals(1.0,   info3.reduceWeight, 0.01);     */
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.33
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|info2
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.33
argument_list|,
name|info2
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|info3
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.33
argument_list|,
name|info3
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
DECL|method|testPoolMaxMapsReduces ()
specifier|public
name|void
name|testPoolMaxMapsReduces
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Pool with upper bound
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolLimited\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxMaps>2</maxMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxReduces>1</maxReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Create two jobs with ten maps
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|"poolLimited"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|Pool
name|limited
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"poolLimited"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|limited
operator|.
name|getSchedulable
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|limited
operator|.
name|getSchedulable
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|Pool
name|defaultPool
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|defaultPool
operator|.
name|getSchedulable
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|defaultPool
operator|.
name|getSchedulable
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job1
operator|.
name|runningMapTasks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|job1
operator|.
name|runningReduceTasks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job2
operator|.
name|runningMapTasks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|job2
operator|.
name|runningReduceTasks
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that max-running-tasks per node are set by assigning load    * equally accross the cluster in CapBasedLoadManager.    */
DECL|method|testCapBasedLoadManager ()
specifier|public
name|void
name|testCapBasedLoadManager
parameter_list|()
block|{
name|CapBasedLoadManager
name|loadMgr
init|=
operator|new
name|CapBasedLoadManager
argument_list|()
decl_stmt|;
comment|// Arguments to getCap: totalRunnableTasks, nodeCap, totalSlots
comment|// Desired behavior: return ceil(nodeCap * min(1, runnableTasks/totalSlots))
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadMgr
operator|.
name|getCap
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadMgr
operator|.
name|getCap
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadMgr
operator|.
name|getCap
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadMgr
operator|.
name|getCap
argument_list|(
literal|200
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadMgr
operator|.
name|getCap
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|loadMgr
operator|.
name|getCap
argument_list|(
literal|50
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|loadMgr
operator|.
name|getCap
argument_list|(
literal|100
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|loadMgr
operator|.
name|getCap
argument_list|(
literal|200
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test starts by launching a job in the default pool that takes    * all the slots in the cluster. We then submit a job in a pool with    * min share of 2 maps and 1 reduce task. After the min share preemption    * timeout, this pool should be allowed to preempt tasks.     */
DECL|method|testMinSharePreemption ()
specifier|public
name|void
name|testMinSharePreemption
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Enable preemption in scheduler
name|scheduler
operator|.
name|preemptionEnabled
operator|=
literal|true
expr_stmt|;
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give pool A a min share of 2 maps and 1 reduce, and a preemption
comment|// timeout of 1 minute
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>2</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>1</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>60</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|Pool
name|poolA
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"poolA"
argument_list|)
decl_stmt|;
comment|// Submit job 1 and assign all slots to it. Sleep a bit before assigning
comment|// tasks on tt1 and tt2 to ensure that the ones on tt2 get preempted first.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Ten seconds later, submit job 2.
name|advanceTime
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
comment|// Ten seconds later, check that job 2 is not able to preempt tasks.
name|advanceTime
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Advance time by 49 more seconds, putting us at 59s after the
comment|// submission of job 2. It should still not be able to preempt.
name|advanceTime
argument_list|(
literal|49000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Advance time by 2 seconds, putting us at 61s after the submission
comment|// of job 2. It should now be able to preempt 2 maps and 1 reduce.
name|advanceTime
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that the tasks actually get preempted and we can assign new ones
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job1
operator|.
name|runningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|job1
operator|.
name|runningReduces
argument_list|()
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test starts by launching a job in the default pool that takes    * all the slots in the cluster. We then submit a job in a pool with    * min share of 3 maps and 3 reduce tasks, but which only actually    * needs 1 map and 2 reduces. We check that this pool does not prempt    * more than this many tasks despite its min share being higher.     */
DECL|method|testMinSharePreemptionWithSmallJob ()
specifier|public
name|void
name|testMinSharePreemptionWithSmallJob
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Enable preemption in scheduler
name|scheduler
operator|.
name|preemptionEnabled
operator|=
literal|true
expr_stmt|;
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give pool A a min share of 2 maps and 1 reduce, and a preemption
comment|// timeout of 1 minute
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>3</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>3</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>60</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|Pool
name|poolA
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"poolA"
argument_list|)
decl_stmt|;
comment|// Submit job 1 and assign all slots to it. Sleep a bit before assigning
comment|// tasks on tt1 and tt2 to ensure that the ones on tt2 get preempted first.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Ten seconds later, submit job 2.
name|advanceTime
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
comment|// Advance time by 59 seconds and check that no preemption occurs.
name|advanceTime
argument_list|(
literal|59000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Advance time by 2 seconds, putting us at 61s after the submission
comment|// of job 2. Job 2 should now preempt 1 map and 2 reduces.
name|advanceTime
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that the tasks actually get preempted and we can assign new ones
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|job1
operator|.
name|runningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job1
operator|.
name|runningReduces
argument_list|()
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test runs on a 4-node (8-slot) cluster to allow 3 pools with fair    * shares greater than 2 slots to coexist (which makes the half-fair-share     * of each pool more than 1 so that fair share preemption can kick in).     *     * The test first starts job 1, which takes 6 map slots and 6 reduce slots,    * in pool 1.  We then submit job 2 in pool 2, which takes 2 slots of each    * type. Finally, we submit a third job, job 3 in pool3, which gets no slots.     * At this point the fair share of each pool will be 8/3 ~= 2.7 slots.     * Pool 1 will be above its fair share, pool 2 will be below it but at half    * fair share, and pool 3 will be below half fair share. Therefore pool 3     * should preempt a task (after a timeout) but pools 1 and 2 shouldn't.     */
DECL|method|testFairSharePreemption ()
specifier|public
name|void
name|testFairSharePreemption
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a bigger cluster than normal (4 tasktrackers instead of 2)
name|setUpCluster
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Enable preemption in scheduler
name|scheduler
operator|.
name|preemptionEnabled
operator|=
literal|true
expr_stmt|;
comment|// Set up pools file with a fair share preemtion timeout of 1 minute
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>60</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Grab pools (they'll be created even though they're not in the alloc file)
name|Pool
name|pool1
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"pool1"
argument_list|)
decl_stmt|;
name|Pool
name|pool2
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"pool2"
argument_list|)
decl_stmt|;
name|Pool
name|pool3
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"pool3"
argument_list|)
decl_stmt|;
comment|// Submit job 1. We advance time by 100 between each task tracker
comment|// assignment stage to ensure that the tasks from job1 on tt3 are the ones
comment|// that are deterministically preempted first (being the latest launched
comment|// tasks in an over-allocated job).
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|,
literal|"pool1"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0001_m_000004_0 on tt3"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0001_r_000004_0 on tt3"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0001_m_000005_0 on tt3"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0001_r_000005_0 on tt3"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Submit job 2. It should get the last 2 slots.
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"pool2"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt4"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt4"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt4"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt4"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt4"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt4"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt4"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt4"
argument_list|)
expr_stmt|;
comment|// Submit job 3.
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"pool3"
argument_list|)
decl_stmt|;
comment|// Check that after 59 seconds, neither pool can preempt
name|advanceTime
argument_list|(
literal|59000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool2
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool2
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool3
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool3
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait 2 more seconds, so that job 3 has now been in the system for 61s.
comment|// Now pool 3 should be able to preempt 2 tasks (its share of 2.7 rounded
comment|// down to its floor), but pool 2 shouldn't.
name|advanceTime
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool2
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool2
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool3
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool3
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that the tasks actually get preempted and we can assign new ones
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|job1
operator|.
name|runningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|job1
operator|.
name|runningReduces
argument_list|()
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0003_m_000000_0 on tt3"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0003_r_000000_0 on tt3"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt3"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0003_r_000001_0 on tt3"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test runs on a 3-node (6-slot) cluster to allow 3 pools with fair    * shares equal 2 slots to coexist (which makes the half-fair-share     * of each pool equal to 1 so that fair share preemption can kick in).     *     * The test first starts job 1, which takes 3 map slots and 0 reduce slots,    * in pool 1.  We then submit job 2 in pool 2, which takes 3 map slots and zero    * reduce slots. Finally, we submit a third job, job 3 in pool3, which gets no slots.     * At this point the fair share of each pool will be 6/3 = 2 slots.     * Pool 1 and 2 will be above their fair share and pool 3 will be below half fair share.     * Therefore pool 3 should preempt tasks from both pool 1& 2 (after a timeout) but     * pools 1 and 2 shouldn't.     */
DECL|method|testFairSharePreemptionFromMultiplePools ()
specifier|public
name|void
name|testFairSharePreemptionFromMultiplePools
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a bigger cluster than normal (3 tasktrackers instead of 2)
name|setUpCluster
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Enable preemption in scheduler
name|scheduler
operator|.
name|preemptionEnabled
operator|=
literal|true
expr_stmt|;
comment|// Set up pools file with a fair share preemtion timeout of 1 minute
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>60</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Grab pools (they'll be created even though they're not in the alloc file)
name|Pool
name|pool1
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"pool1"
argument_list|)
decl_stmt|;
name|Pool
name|pool2
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"pool2"
argument_list|)
decl_stmt|;
name|Pool
name|pool3
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"pool3"
argument_list|)
decl_stmt|;
comment|// Submit job 1. We advance time by 100 between each task tracker
comment|// assignment stage to ensure that the tasks from job1 on tt3 are the ones
comment|// that are deterministically preempted first (being the latest launched
comment|// tasks in an over-allocated job).
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|12
argument_list|,
literal|0
argument_list|,
literal|"pool1"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Submit job 2. It should get the last 3 slots.
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|"pool2"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt3"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt3"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Submit job 3.
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|"pool3"
argument_list|)
decl_stmt|;
comment|// Check that after 59 seconds, neither pool can preempt
name|advanceTime
argument_list|(
literal|59000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool2
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool2
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool3
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool3
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait 2 more seconds, so that job 3 has now been in the system for 61s.
comment|// Now pool 3 should be able to preempt 2 tasks (its share of 2 rounded
comment|// down to its floor), but pool 1& 2 shouldn't.
name|advanceTime
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool2
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool2
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool3
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool3
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that the tasks actually get preempted and we can assign new ones.
comment|// This should preempt one task each from pool1 and pool2
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job2
operator|.
name|runningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job1
operator|.
name|runningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0003_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt3"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test submits a job that takes all 4 slots, and then a second job in    * a pool that has both a min share of 2 slots with a 60s timeout and a    * fair share timeout of 60s. After 60 seconds, this pool will be starved    * of both min share (2 slots of each type) and fair share (2 slots of each    * type), and we test that it does not kill more than 2 tasks of each type    * in total.    */
DECL|method|testMinAndFairSharePreemption ()
specifier|public
name|void
name|testMinAndFairSharePreemption
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Enable preemption in scheduler
name|scheduler
operator|.
name|preemptionEnabled
operator|=
literal|true
expr_stmt|;
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give pool A a min share of 2 maps and 1 reduce, and a preemption
comment|// timeout of 1 minute
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>2</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>2</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>60</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>60</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|Pool
name|poolA
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"poolA"
argument_list|)
decl_stmt|;
comment|// Submit job 1 and assign all slots to it. Sleep a bit before assigning
comment|// tasks on tt1 and tt2 to ensure that the ones on tt2 get preempted first.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Ten seconds later, submit job 2.
name|advanceTime
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
comment|// Ten seconds later, check that job 2 is not able to preempt tasks.
name|advanceTime
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Advance time by 49 more seconds, putting us at 59s after the
comment|// submission of job 2. It should still not be able to preempt.
name|advanceTime
argument_list|(
literal|49000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Advance time by 2 seconds, putting us at 61s after the submission
comment|// of job 2. It should now be able to preempt 2 maps and 1 reduce.
name|advanceTime
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that the tasks actually get preempted and we can assign new ones
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job1
operator|.
name|runningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job1
operator|.
name|runningReduces
argument_list|()
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is a copy of testMinAndFairSharePreemption that turns preemption    * off and verifies that no tasks get killed.    */
DECL|method|testNoPreemptionIfDisabled ()
specifier|public
name|void
name|testNoPreemptionIfDisabled
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give pool A a min share of 2 maps and 1 reduce, and a preemption
comment|// timeout of 1 minute
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>2</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>2</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>60</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>60</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Submit job 1 and assign all slots to it. Sleep a bit before assigning
comment|// tasks on tt1 and tt2 to ensure that the ones on tt2 get preempted first.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Ten seconds later, submit job 2.
name|advanceTime
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
comment|// Advance time by 61s, putting us past the preemption timeout,
comment|// and check that no tasks get preempted.
name|advanceTime
argument_list|(
literal|61000
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|job1
operator|.
name|runningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|job1
operator|.
name|runningReduces
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is a copy of testMinAndFairSharePreemption that turns preemption    * on but also turns on mapred.fairscheduler.preemption.only.log (the    * "dry run" parameter for testing out preemption) and verifies that no    * tasks get killed.    */
DECL|method|testNoPreemptionIfOnlyLogging ()
specifier|public
name|void
name|testNoPreemptionIfOnlyLogging
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Turn on preemption, but for logging only
name|scheduler
operator|.
name|preemptionEnabled
operator|=
literal|true
expr_stmt|;
name|scheduler
operator|.
name|onlyLogPreemption
operator|=
literal|true
expr_stmt|;
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give pool A a min share of 2 maps and 1 reduce, and a preemption
comment|// timeout of 1 minute
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>2</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>2</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>60</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>60</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Submit job 1 and assign all slots to it. Sleep a bit before assigning
comment|// tasks on tt1 and tt2 to ensure that the ones on tt2 get preempted first.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Ten seconds later, submit job 2.
name|advanceTime
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
comment|// Advance time by 61s, putting us past the preemption timeout,
comment|// and check that no tasks get preempted.
name|advanceTime
argument_list|(
literal|61000
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|job1
operator|.
name|runningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|job1
operator|.
name|runningReduces
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test exercises delay scheduling at the node level. We submit a job    * with data on rack1.node2 and check that it doesn't get assigned on earlier    * nodes. A second job with no locality info should get assigned instead.    *     * TaskTracker names in this test map to nodes as follows:    * - tt1 = rack1.node1    * - tt2 = rack1.node2    * - tt3 = rack2.node1    * - tt4 = rack2.node2    */
DECL|method|testDelaySchedulingAtNodeLevel ()
specifier|public
name|void
name|testDelaySchedulingAtNodeLevel
parameter_list|()
throws|throws
name|IOException
block|{
name|setUpCluster
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|assignMultiple
operator|=
literal|true
expr_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|"pool1"
argument_list|,
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"rack2.node2"
block|}
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
comment|// Advance time before submitting another job j2, to make j1 be ahead
comment|// of j2 in the queue deterministically.
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Assign tasks on nodes 1-3 and check that j2 gets them
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt2"
argument_list|,
literal|"attempt_test_0002_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_m_000004_0 on tt3"
argument_list|,
literal|"attempt_test_0002_m_000005_0 on tt3"
argument_list|)
expr_stmt|;
comment|// Assign a task on node 4 now and check that j1 gets it. The other slot
comment|// on the node should be given to j2 because j1 will be out of tasks.
name|checkAssignment
argument_list|(
literal|"tt4"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt4"
argument_list|,
literal|"attempt_test_0002_m_000006_0 on tt4"
argument_list|)
expr_stmt|;
comment|// Check that delay scheduling info is properly set
name|assertEquals
argument_list|(
name|info1
operator|.
name|lastMapLocalityLevel
argument_list|,
name|LocalityLevel
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|timeWaitedForLocalMap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|skippedAtLastHeartbeat
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test submits a job and causes it to exceed its node-level delay,    * and thus to go on to launch a rack-local task. We submit one job with data    * on rack2.node4 and check that it does not get assigned on any of the other    * nodes until 10 seconds (the delay configured in setUpCluster) pass.    * Finally, after some delay, we let the job assign local tasks and check    * that it has returned to waiting for node locality.    *     * TaskTracker names in this test map to nodes as follows:    * - tt1 = rack1.node1    * - tt2 = rack1.node2    * - tt3 = rack2.node1    * - tt4 = rack2.node2    */
DECL|method|testDelaySchedulingAtRackLevel ()
specifier|public
name|void
name|testDelaySchedulingAtRackLevel
parameter_list|()
throws|throws
name|IOException
block|{
name|setUpCluster
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|assignMultiple
operator|=
literal|true
expr_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|"pool1"
argument_list|,
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"rack2.node2"
block|}
block|,
block|{
literal|"rack2.node2"
block|}
block|,
block|{
literal|"rack2.node2"
block|}
block|,
block|{
literal|"rack2.node2"
block|}
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
comment|// Advance time before submitting another job j2, to make j1 be ahead
comment|// of j2 in the queue deterministically.
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|20
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Assign tasks on nodes 1-3 and check that j2 gets them
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000002_0 on tt2"
argument_list|,
literal|"attempt_test_0002_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_m_000004_0 on tt3"
argument_list|,
literal|"attempt_test_0002_m_000005_0 on tt3"
argument_list|)
expr_stmt|;
comment|// Advance time by 6 seconds to put us past the 5-second node locality delay
name|advanceTime
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Finish some tasks on each node
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000000_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000002_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_m_000004_0"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Check that job 1 is only assigned on node 3 (which is rack-local)
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000006_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000007_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt3"
argument_list|)
expr_stmt|;
comment|// Check that delay scheduling info is properly set
name|assertEquals
argument_list|(
name|info1
operator|.
name|lastMapLocalityLevel
argument_list|,
name|LocalityLevel
operator|.
name|RACK
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|timeWaitedForLocalMap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|skippedAtLastHeartbeat
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Also give job 1 some tasks on node 4. Its lastMapLocalityLevel
comment|// should go back to 0 after it gets assigned these.
name|checkAssignment
argument_list|(
literal|"tt4"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt4"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt4"
argument_list|)
expr_stmt|;
comment|// Check that delay scheduling info is properly set
name|assertEquals
argument_list|(
name|info1
operator|.
name|lastMapLocalityLevel
argument_list|,
name|LocalityLevel
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|timeWaitedForLocalMap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|skippedAtLastHeartbeat
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check that job 1 no longer assigns tasks in the same rack now
comment|// that it has obtained a node-local task
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000001_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000003_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_m_000005_0"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0002_m_000008_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000009_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0002_m_000010_0 on tt3"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// However, job 1 should still be able to launch tasks on node 4
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt4"
argument_list|,
literal|"attempt_test_0001_m_000001_0"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt4"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt4"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test submits a job and causes it to exceed its node-level delay,    * then its rack-level delay. It should then launch tasks off-rack.    * However, once the job gets a rack-local slot it should stay in-rack,    * and once it gets a node-local slot it should stay in-node.    * For simplicity, we don't submit a second job in this test.    *     * TaskTracker names in this test map to nodes as follows:    * - tt1 = rack1.node1    * - tt2 = rack1.node2    * - tt3 = rack2.node1    * - tt4 = rack2.node2    */
DECL|method|testDelaySchedulingOffRack ()
specifier|public
name|void
name|testDelaySchedulingOffRack
parameter_list|()
throws|throws
name|IOException
block|{
name|setUpCluster
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|assignMultiple
operator|=
literal|true
expr_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|"pool1"
argument_list|,
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"rack2.node2"
block|}
block|,
block|{
literal|"rack2.node2"
block|}
block|,
block|{
literal|"rack2.node2"
block|}
block|,
block|{
literal|"rack2.node2"
block|}
block|,
block|{
literal|"rack2.node2"
block|}
block|,
block|{
literal|"rack2.node2"
block|}
block|,
block|{
literal|"rack2.node2"
block|}
block|,
block|{
literal|"rack2.node2"
block|}
block|,         }
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Check that nothing is assigned on trackers 1-3
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Advance time by 6 seconds to put us past the 5-sec node locality delay
name|advanceTime
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Check that nothing is assigned on trackers 1-2; the job would assign
comment|// a task on tracker 3 (rack1.node2) so we skip that one
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Repeat to see that receiving multiple heartbeats works
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that delay scheduling info is properly set
name|assertEquals
argument_list|(
name|info1
operator|.
name|lastMapLocalityLevel
argument_list|,
name|LocalityLevel
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|timeWaitedForLocalMap
argument_list|,
literal|6200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|skippedAtLastHeartbeat
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Advance time by 11 seconds to put us past the 10-sec rack locality delay
name|advanceTime
argument_list|(
literal|11000
argument_list|)
expr_stmt|;
comment|// Now the job should be able to assign tasks on tt1 and tt2
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
comment|// Check that delay scheduling info is properly set
name|assertEquals
argument_list|(
name|info1
operator|.
name|lastMapLocalityLevel
argument_list|,
name|LocalityLevel
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|timeWaitedForLocalMap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|skippedAtLastHeartbeat
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Now assign a task on tt3. This should make the job stop assigning
comment|// on tt1 and tt2 (checked after we finish some tasks there)
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0001_m_000004_0 on tt3"
argument_list|,
literal|"attempt_test_0001_m_000005_0 on tt3"
argument_list|)
expr_stmt|;
comment|// Check that delay scheduling info is properly set
name|assertEquals
argument_list|(
name|info1
operator|.
name|lastMapLocalityLevel
argument_list|,
name|LocalityLevel
operator|.
name|RACK
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|timeWaitedForLocalMap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|skippedAtLastHeartbeat
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Check that j1 no longer assigns tasks on rack 1 now
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0"
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// However, tasks on rack 2 should still be assigned
name|taskTrackerManager
operator|.
name|finishTask
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0001_m_000004_0"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0001_m_000006_0 on tt3"
argument_list|)
expr_stmt|;
comment|// Now assign a task on node 4
name|checkAssignment
argument_list|(
literal|"tt4"
argument_list|,
literal|"attempt_test_0001_m_000007_0 on tt4"
argument_list|)
expr_stmt|;
comment|// Check that delay scheduling info is set so we are looking for node-local
comment|// tasks at this point
name|assertEquals
argument_list|(
name|info1
operator|.
name|lastMapLocalityLevel
argument_list|,
name|LocalityLevel
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|timeWaitedForLocalMap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|skippedAtLastHeartbeat
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test submits two jobs with 4 maps and 3 reduces in total to a    * 4-node cluster. Although the cluster has 2 map slots and 2 reduce    * slots per node, it should only launch one map and one reduce on each    * node to balance the load. We check that this happens even if    * assignMultiple is set to true so the scheduler has the opportunity    * to launch multiple tasks per heartbeat.    */
DECL|method|testAssignMultipleWithUnderloadedCluster ()
specifier|public
name|void
name|testAssignMultipleWithUnderloadedCluster
parameter_list|()
throws|throws
name|IOException
block|{
name|setUpCluster
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Advance to make j1 be scheduled before j2 deterministically.
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Assign tasks and check that at most one map and one reduce slot is used
comment|// on each node, and that no tasks are assigned on subsequent heartbeats
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt2"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt3"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt3"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt3"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt4"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt4"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test submits four jobs in the default pool, which is set to FIFO mode:    * - job1, with 1 map and 1 reduce    * - job2, with 3 maps and 3 reduces    * - job3, with 1 map, 1 reduce, and priority set to HIGH    * - job4, with 3 maps and 3 reduces    *     * We check that the scheduler assigns tasks first to job3 (because it is    * high priority), then to job1, then to job2.    */
DECL|method|testFifoPool ()
specifier|public
name|void
name|testFifoPool
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingMode>fifo</schedulingMode>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Submit jobs, advancing time in-between to make sure that they are
comment|// all submitted at distinct times.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job3
operator|.
name|setPriority
argument_list|(
name|JobPriority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job4
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// Assign tasks and check that they're given first to job3 (because it is
comment|// high priority), then to job1, then to job2.
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test submits 2 large jobs each to 2 pools, which are both set to FIFO    * mode through the global defaultPoolSchedulingMode setting. We check that    * the scheduler assigns tasks only to the first job within each pool, but    * alternates between the pools to give each pool a fair share.    */
DECL|method|testMultipleFifoPools ()
specifier|public
name|void
name|testMultipleFifoPools
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultPoolSchedulingMode>fifo</defaultPoolSchedulingMode>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Submit jobs, advancing time in-between to make sure that they are
comment|// all submitted at distinct times.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolB"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job4
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolB"
argument_list|)
decl_stmt|;
comment|// Assign tasks and check that they alternate between jobs 1 and 3, the
comment|// head-of-line jobs in their respective pools.
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0003_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0003_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test submits 2 large jobs each to 2 pools, one of which is set to FIFO    * mode through the global defaultPoolSchedulingMode setting, and one of which    * is set to fair mode. We check that the scheduler assigns tasks only to the    * first job in the FIFO pool but to both jobs in the fair sharing pool.    */
DECL|method|testFifoAndFairPools ()
specifier|public
name|void
name|testFifoAndFairPools
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultPoolSchedulingMode>fifo</defaultPoolSchedulingMode>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingMode>fair</schedulingMode>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
comment|// Submit jobs, advancing time in-between to make sure that they are
comment|// all submitted at distinct times.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolA"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job3
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolB"
argument_list|)
decl_stmt|;
name|advanceTime
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|JobInProgress
name|job4
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"poolB"
argument_list|)
decl_stmt|;
comment|// Assign tasks and check that only job 1 gets tasks in pool A, but
comment|// jobs 3 and 4 both get tasks in pool B.
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0003_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0004_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0004_r_000000_0 on tt2"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test uses the mapred.fairscheduler.pool property to assign jobs to pools.    */
DECL|method|testPoolAssignment ()
specifier|public
name|void
name|testPoolAssignment
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingMode>fair</schedulingMode>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingMode>fair</schedulingMode>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|Pool
name|defaultPool
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|Pool
name|poolA
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"poolA"
argument_list|)
decl_stmt|;
comment|// Submit a job to the default pool.  All specifications take default values.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit a job to the default pool and move it to poolA using setPool.
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|setPool
argument_list|(
name|job2
argument_list|,
literal|"poolA"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"poolA"
argument_list|,
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPoolName
argument_list|(
name|job2
argument_list|)
argument_list|)
expr_stmt|;
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit a job to poolA by specifying mapred.fairscheduler.pool
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|POOL_PROPERTY
argument_list|,
literal|"nonsense"
argument_list|)
expr_stmt|;
comment|// test that this is overridden
name|jobConf
operator|.
name|set
argument_list|(
name|EXPLICIT_POOL_PROPERTY
argument_list|,
literal|"poolA"
argument_list|)
expr_stmt|;
name|JobInProgress
name|job3
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|jobConf
argument_list|,
name|taskTrackerManager
argument_list|,
literal|null
argument_list|,
name|UtilsForTests
operator|.
name|getJobTracker
argument_list|()
argument_list|)
decl_stmt|;
name|job3
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|job3
operator|.
name|getStatus
argument_list|()
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|job3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit a job to poolA by specifying pool and not mapred.fairscheduler.pool
name|JobConf
name|jobConf2
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jobConf2
operator|.
name|setNumMapTasks
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|jobConf2
operator|.
name|setNumReduceTasks
argument_list|(
literal|19
argument_list|)
expr_stmt|;
name|jobConf2
operator|.
name|set
argument_list|(
name|POOL_PROPERTY
argument_list|,
literal|"poolA"
argument_list|)
expr_stmt|;
name|JobInProgress
name|job4
init|=
operator|new
name|FakeJobInProgress
argument_list|(
name|jobConf2
argument_list|,
name|taskTrackerManager
argument_list|,
literal|null
argument_list|,
name|UtilsForTests
operator|.
name|getJobTracker
argument_list|()
argument_list|)
decl_stmt|;
name|job4
operator|.
name|initTasks
argument_list|()
expr_stmt|;
name|job4
operator|.
name|getStatus
argument_list|()
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|taskTrackerManager
operator|.
name|submitJob
argument_list|(
name|job4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|33
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|39
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test switching a job from one pool to another, then back to the original    * one. This is a regression test for a bug seen during development of    * MAPREDUCE-2323 (fair scheduler metrics).    */
DECL|method|testSetPoolTwice ()
specifier|public
name|void
name|testSetPoolTwice
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingMode>fair</schedulingMode>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingMode>fair</schedulingMode>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|Pool
name|defaultPool
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|Pool
name|poolA
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"poolA"
argument_list|)
decl_stmt|;
comment|// Submit a job to the default pool.  All specifications take default values.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
comment|// Move job to poolA and make sure demand moves with it
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|setPool
argument_list|(
name|job1
argument_list|,
literal|"poolA"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"poolA"
argument_list|,
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPoolName
argument_list|(
name|job1
argument_list|)
argument_list|)
expr_stmt|;
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
comment|// Move back to default pool and make sure demand goes back
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|setPool
argument_list|(
name|job1
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPoolName
argument_list|(
name|job1
argument_list|)
argument_list|)
expr_stmt|;
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolA
operator|.
name|getMapSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|poolA
operator|.
name|getReduceSchedulable
argument_list|()
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|advanceTime (long time)
specifier|private
name|void
name|advanceTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|clock
operator|.
name|advance
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|tracker (String taskTrackerName)
specifier|protected
name|TaskTracker
name|tracker
parameter_list|(
name|String
name|taskTrackerName
parameter_list|)
block|{
return|return
name|taskTrackerManager
operator|.
name|getTaskTracker
argument_list|(
name|taskTrackerName
argument_list|)
return|;
block|}
DECL|method|checkAssignment (String taskTrackerName, String... expectedTasks)
specifier|protected
name|void
name|checkAssignment
parameter_list|(
name|String
name|taskTrackerName
parameter_list|,
name|String
modifier|...
name|expectedTasks
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
name|taskTrackerName
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tasks
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Assigned tasks:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tasks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- "
operator|+
name|tasks
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTasks
operator|.
name|length
argument_list|,
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tasks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|assertEquals
argument_list|(
literal|"assignment "
operator|+
name|i
argument_list|,
name|expectedTasks
index|[
name|i
index|]
argument_list|,
name|tasks
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test submits a job that takes all 2 slots in a pool has both a min    * share of 2 slots with minshare timeout of 5s, and then a second job in    * default pool with a fair share timeout of 5s. After 60 seconds, this pool    * will be starved of fair share (2 slots of each type), and we test that it    * does not kill more than 2 tasks of each type.    */
DECL|method|testFairSharePreemptionWithShortTimeout ()
specifier|public
name|void
name|testFairSharePreemptionWithShortTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Enable preemption in scheduler
name|scheduler
operator|.
name|preemptionEnabled
operator|=
literal|true
expr_stmt|;
comment|// Set up pools file
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>5</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"pool1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>2</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>2</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>5</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|reloadAllocs
argument_list|()
expr_stmt|;
name|Pool
name|pool1
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"pool1"
argument_list|)
decl_stmt|;
name|Pool
name|defaultPool
init|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
operator|.
name|getPool
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
comment|// Submit job 1 and assign all slots to it. Sleep a bit before assigning
comment|// tasks on tt1 and tt2 to ensure that the ones on tt2 get preempted first.
name|JobInProgress
name|job1
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"pool1"
argument_list|)
decl_stmt|;
name|JobInfo
name|info1
init|=
name|scheduler
operator|.
name|infos
operator|.
name|get
argument_list|(
name|job1
argument_list|)
decl_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000000_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_m_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt1"
argument_list|,
literal|"attempt_test_0001_r_000001_0 on tt1"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000002_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_m_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0001_r_000003_0 on tt2"
argument_list|)
expr_stmt|;
name|advanceTime
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ten seconds later, submit job 2.
name|JobInProgress
name|job2
init|=
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
comment|// Advance time by 6 seconds without update the scheduler.
comment|// This simulates the time gap between update and task preemption.
name|clock
operator|.
name|advance
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getRunningTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|mapSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2.0
argument_list|,
name|info1
operator|.
name|reduceSchedulable
operator|.
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool1
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|pool1
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|defaultPool
operator|.
name|getMapSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|tasksToPreempt
argument_list|(
name|defaultPool
operator|.
name|getReduceSchedulable
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that the tasks actually get preempted and we can assign new ones
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job1
operator|.
name|runningMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|job1
operator|.
name|runningReduces
argument_list|()
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000000_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_m_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|checkAssignment
argument_list|(
literal|"tt2"
argument_list|,
literal|"attempt_test_0002_r_000001_0 on tt2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|tracker
argument_list|(
literal|"tt2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ask scheduler to update metrics and then verify that they're all    * correctly published to the metrics context    */
DECL|method|verifyMetrics ()
specifier|private
name|void
name|verifyMetrics
parameter_list|()
block|{
name|scheduler
operator|.
name|updateMetrics
argument_list|()
expr_stmt|;
name|verifyPoolMetrics
argument_list|()
expr_stmt|;
name|verifyJobMetrics
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that pool-level metrics match internal data    */
DECL|method|verifyPoolMetrics ()
specifier|private
name|void
name|verifyPoolMetrics
parameter_list|()
block|{
name|MetricsContext
name|ctx
init|=
name|MetricsUtil
operator|.
name|getContext
argument_list|(
literal|"fairscheduler"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|OutputRecord
argument_list|>
name|records
init|=
name|ctx
operator|.
name|getAllRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|"pools"
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|scheduler
operator|.
name|getPoolSchedulables
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|,
name|records
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
for|for
control|(
name|OutputRecord
name|rec
range|:
name|records
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"record:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" name: "
operator|+
name|rec
operator|.
name|getTag
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" type: "
operator|+
name|rec
operator|.
name|getTag
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|OutputRecord
argument_list|>
name|byPoolAndType
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|OutputRecord
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OutputRecord
name|rec
range|:
name|records
control|)
block|{
name|String
name|pool
init|=
operator|(
name|String
operator|)
name|rec
operator|.
name|getTag
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
operator|(
name|String
operator|)
name|rec
operator|.
name|getTag
argument_list|(
literal|"taskType"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|byPoolAndType
operator|.
name|put
argument_list|(
name|pool
operator|+
literal|"_"
operator|+
name|type
argument_list|,
name|rec
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|PoolSchedulable
argument_list|>
name|poolScheds
init|=
operator|new
name|ArrayList
argument_list|<
name|PoolSchedulable
argument_list|>
argument_list|()
decl_stmt|;
name|poolScheds
operator|.
name|addAll
argument_list|(
name|scheduler
operator|.
name|getPoolSchedulables
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
argument_list|)
expr_stmt|;
name|poolScheds
operator|.
name|addAll
argument_list|(
name|scheduler
operator|.
name|getPoolSchedulables
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PoolSchedulable
name|pool
range|:
name|poolScheds
control|)
block|{
name|String
name|poolName
init|=
name|pool
operator|.
name|getName
argument_list|()
decl_stmt|;
name|OutputRecord
name|metrics
init|=
name|byPoolAndType
operator|.
name|get
argument_list|(
name|poolName
operator|+
literal|"_"
operator|+
name|pool
operator|.
name|getTaskType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Need metrics for "
operator|+
name|pool
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|verifySchedulableMetrics
argument_list|(
name|pool
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify that the job-level metrics match internal data    */
DECL|method|verifyJobMetrics ()
specifier|private
name|void
name|verifyJobMetrics
parameter_list|()
block|{
name|MetricsContext
name|ctx
init|=
name|MetricsUtil
operator|.
name|getContext
argument_list|(
literal|"fairscheduler"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|OutputRecord
argument_list|>
name|records
init|=
name|ctx
operator|.
name|getAllRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|"jobs"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking job metrics..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|OutputRecord
argument_list|>
name|byJobIdAndType
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|OutputRecord
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OutputRecord
name|rec
range|:
name|records
control|)
block|{
name|String
name|jobId
init|=
operator|(
name|String
operator|)
name|rec
operator|.
name|getTag
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
operator|(
name|String
operator|)
name|rec
operator|.
name|getTag
argument_list|(
literal|"taskType"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|byJobIdAndType
operator|.
name|put
argument_list|(
name|jobId
operator|+
literal|"_"
operator|+
name|type
argument_list|,
name|rec
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got "
operator|+
name|type
operator|+
literal|" metrics for job: "
operator|+
name|jobId
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|scheduler
operator|.
name|infos
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|,
name|byJobIdAndType
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|JobInProgress
argument_list|,
name|JobInfo
argument_list|>
name|entry
range|:
name|scheduler
operator|.
name|infos
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JobInfo
name|info
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|jobId
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|OutputRecord
name|mapMetrics
init|=
name|byJobIdAndType
operator|.
name|get
argument_list|(
name|jobId
operator|+
literal|"_MAP"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" should have map metrics"
argument_list|,
name|mapMetrics
argument_list|)
expr_stmt|;
name|verifySchedulableMetrics
argument_list|(
name|info
operator|.
name|mapSchedulable
argument_list|,
name|mapMetrics
argument_list|)
expr_stmt|;
name|OutputRecord
name|reduceMetrics
init|=
name|byJobIdAndType
operator|.
name|get
argument_list|(
name|jobId
operator|+
literal|"_REDUCE"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Job "
operator|+
name|jobId
operator|+
literal|" should have reduce metrics"
argument_list|,
name|reduceMetrics
argument_list|)
expr_stmt|;
name|verifySchedulableMetrics
argument_list|(
name|info
operator|.
name|reduceSchedulable
argument_list|,
name|reduceMetrics
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify that the metrics for a given Schedulable are correct    */
DECL|method|verifySchedulableMetrics ( Schedulable sched, OutputRecord metrics)
specifier|private
name|void
name|verifySchedulableMetrics
parameter_list|(
name|Schedulable
name|sched
parameter_list|,
name|OutputRecord
name|metrics
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|sched
operator|.
name|getRunningTasks
argument_list|()
argument_list|,
name|metrics
operator|.
name|getMetric
argument_list|(
literal|"runningTasks"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sched
operator|.
name|getDemand
argument_list|()
argument_list|,
name|metrics
operator|.
name|getMetric
argument_list|(
literal|"demand"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sched
operator|.
name|getFairShare
argument_list|()
argument_list|,
name|metrics
operator|.
name|getMetric
argument_list|(
literal|"fairShare"
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sched
operator|.
name|getWeight
argument_list|()
argument_list|,
name|metrics
operator|.
name|getMetric
argument_list|(
literal|"weight"
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.001
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

