begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * System tests for the fair scheduler. These run slower than the  * mock-based tests in TestFairScheduler but have a better chance  * of catching synchronization bugs with the real JT.  *  * This test suite will often be run inside JCarder in order to catch  * deadlock bugs which have plagued the scheduler in the past - hence  * it is a bit of a "grab-bag" of system tests, since it's important  * that they all run as part of the same JVM instantiation.  */
end_comment

begin_class
DECL|class|TestFairSchedulerSystem
specifier|public
class|class
name|TestFairSchedulerSystem
block|{
DECL|field|NUM_THREADS
specifier|static
specifier|final
name|int
name|NUM_THREADS
init|=
literal|2
decl_stmt|;
DECL|field|mr
specifier|static
name|MiniMRCluster
name|mr
decl_stmt|;
DECL|field|conf
specifier|static
name|JobConf
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
specifier|final
name|int
name|taskTrackers
init|=
literal|1
decl_stmt|;
comment|// Bump up the frequency of preemption updates to test against
comment|// deadlocks, etc.
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.jobtracker.taskScheduler"
argument_list|,
name|FairScheduler
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.update.interval"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.preemption.interval"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.preemption"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.eventlog.enabled"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.poolnameproperty"
argument_list|,
literal|"group.name"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
literal|"file:///"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|runSleepJob (JobConf conf)
specifier|private
name|void
name|runSleepJob
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-m"
block|,
literal|"1"
block|,
literal|"-r"
block|,
literal|"1"
block|,
literal|"-mt"
block|,
literal|"1"
block|,
literal|"-rt"
block|,
literal|"1"
block|}
decl_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|SleepJob
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**    * Submit some concurrent sleep jobs, and visit the scheduler servlet    * while they're running.    */
annotation|@
name|Test
DECL|method|testFairSchedulerSystem ()
specifier|public
name|void
name|testFairSchedulerSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|exec
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|NUM_THREADS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
argument_list|(
name|NUM_THREADS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|exec
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|jobConf
init|=
name|mr
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
name|runSleepJob
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|mr
operator|.
name|createJobConf
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wait for the tasks to finish, and visit the scheduler servlet
comment|// every few seconds while waiting.
for|for
control|(
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|te
parameter_list|)
block|{
comment|// It's OK
block|}
name|checkServlet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkServlet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JobStatus
name|jobs
index|[]
init|=
name|jc
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
if|if
condition|(
name|jobs
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No jobs running, not checking tasklog servlet"
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|JobStatus
name|j
range|:
name|jobs
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Checking task graph for "
operator|+
name|j
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|checkTaskGraphServlet
argument_list|(
name|j
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|err
parameter_list|)
block|{
comment|// The task graph servlet will be empty if the job has retired.
comment|// This is OK.
name|RunningJob
name|rj
init|=
name|jc
operator|.
name|getJob
argument_list|(
name|j
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rj
operator|.
name|isRetired
argument_list|()
condition|)
block|{
throw|throw
name|err
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Check the fair scheduler servlet for good status code and smoke test    * for contents.    */
DECL|method|checkServlet (boolean advanced)
specifier|private
name|void
name|checkServlet
parameter_list|(
name|boolean
name|advanced
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|jtURL
init|=
literal|"http://localhost:"
operator|+
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTrackerInfoPort
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|jtURL
operator|+
literal|"/scheduler"
operator|+
operator|(
name|advanced
condition|?
literal|"?advanced"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Just to be sure, slurp the content and make sure it looks like the scheduler
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|String
name|contents
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Bad contents for fair scheduler servlet: "
operator|+
name|contents
argument_list|,
name|contents
operator|.
name|contains
argument_list|(
literal|"Fair Scheduler Administration"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|userGroups
index|[]
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getGroupNames
argument_list|()
decl_stmt|;
name|String
name|primaryGroup
init|=
literal|">"
operator|+
name|userGroups
index|[
literal|0
index|]
operator|+
literal|"<"
decl_stmt|;
name|assertTrue
argument_list|(
name|contents
operator|.
name|contains
argument_list|(
name|primaryGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkTaskGraphServlet (JobID job)
specifier|private
name|void
name|checkTaskGraphServlet
parameter_list|(
name|JobID
name|job
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|jtURL
init|=
literal|"http://localhost:"
operator|+
name|mr
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTrackerInfoPort
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|jtURL
operator|+
literal|"/taskgraph?jobid="
operator|+
name|job
operator|.
name|toString
argument_list|()
operator|+
literal|"&type=map"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Just to be sure, slurp the content and make sure it looks like the scheduler
name|String
name|contents
init|=
name|slurpContents
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Bad contents for job "
operator|+
name|job
operator|+
literal|":\n"
operator|+
name|contents
argument_list|,
name|contents
operator|.
name|contains
argument_list|(
literal|"</svg>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|slurpContents (HttpURLConnection connection)
specifier|private
name|String
name|slurpContents
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

