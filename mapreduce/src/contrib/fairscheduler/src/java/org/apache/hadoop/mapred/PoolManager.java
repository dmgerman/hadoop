begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Maintains a list of pools as well as scheduling parameters for each pool,  * such as guaranteed share allocations, from the fair scheduler config file.  */
end_comment

begin_class
DECL|class|PoolManager
specifier|public
class|class
name|PoolManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.mapred.PoolManager"
argument_list|)
decl_stmt|;
comment|/** Time to wait between checks of the allocation file */
DECL|field|ALLOC_RELOAD_INTERVAL
specifier|public
specifier|static
specifier|final
name|long
name|ALLOC_RELOAD_INTERVAL
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|/**    * Time to wait after the allocation has been modified before reloading it    * (this is done to prevent loading a file that hasn't been fully written).    */
DECL|field|ALLOC_RELOAD_WAIT
specifier|public
specifier|static
specifier|final
name|long
name|ALLOC_RELOAD_WAIT
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
DECL|field|EXPLICIT_POOL_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|EXPLICIT_POOL_PROPERTY
init|=
literal|"mapred.fairscheduler.pool"
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|FairScheduler
name|scheduler
decl_stmt|;
comment|// Map and reduce minimum allocations for each pool
DECL|field|mapAllocs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapAllocs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reduceAllocs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|reduceAllocs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// If set, cap number of map and reduce tasks in a pool
DECL|field|poolMaxMaps
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|poolMaxMaps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|poolMaxReduces
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|poolMaxReduces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
comment|// Sharing weights for each pool
DECL|field|poolWeights
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|poolWeights
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
comment|// Max concurrent running jobs for each pool and for each user; in addition,
comment|// for users that have no max specified, we use the userMaxJobsDefault.
DECL|field|poolMaxJobs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|poolMaxJobs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|userMaxJobs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|userMaxJobs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|userMaxJobsDefault
specifier|private
name|int
name|userMaxJobsDefault
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|poolMaxJobsDefault
specifier|private
name|int
name|poolMaxJobsDefault
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// Min share preemption timeout for each pool in seconds. If a job in the pool
comment|// waits this long without receiving its guaranteed share, it is allowed to
comment|// preempt other jobs' tasks.
DECL|field|minSharePreemptionTimeouts
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|minSharePreemptionTimeouts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// Default min share preemption timeout for pools where it is not set
comment|// explicitly.
DECL|field|defaultMinSharePreemptionTimeout
specifier|private
name|long
name|defaultMinSharePreemptionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// Preemption timeout for jobs below fair share in seconds. If a job remains
comment|// below half its fair share for this long, it is allowed to preempt tasks.
DECL|field|fairSharePreemptionTimeout
specifier|private
name|long
name|fairSharePreemptionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|defaultSchedulingMode
name|SchedulingMode
name|defaultSchedulingMode
init|=
name|SchedulingMode
operator|.
name|FAIR
decl_stmt|;
DECL|field|allocFile
specifier|private
name|Object
name|allocFile
decl_stmt|;
comment|// Path to XML file containing allocations. This
comment|// is either a URL to specify a classpath resource
comment|// (if the fair-scheduler.xml on the classpath is
comment|// used) or a String to specify an absolute path (if
comment|// mapred.fairscheduler.allocation.file is used).
DECL|field|poolNameProperty
specifier|private
name|String
name|poolNameProperty
decl_stmt|;
comment|// Jobconf property to use for determining a
comment|// job's pool name (default: mapreduce.job.user.name)
DECL|field|pools
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Pool
argument_list|>
name|pools
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Pool
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|lastReloadAttempt
specifier|private
name|long
name|lastReloadAttempt
decl_stmt|;
comment|// Last time we tried to reload the pools file
DECL|field|lastSuccessfulReload
specifier|private
name|long
name|lastSuccessfulReload
decl_stmt|;
comment|// Last time we successfully reloaded pools
DECL|field|lastReloadAttemptFailed
specifier|private
name|boolean
name|lastReloadAttemptFailed
init|=
literal|false
decl_stmt|;
DECL|method|PoolManager (FairScheduler scheduler)
specifier|public
name|PoolManager
parameter_list|(
name|FairScheduler
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
block|}
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|AllocationConfigurationException
throws|,
name|ParserConfigurationException
block|{
name|Configuration
name|conf
init|=
name|scheduler
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|this
operator|.
name|poolNameProperty
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.fairscheduler.poolnameproperty"
argument_list|,
name|JobContext
operator|.
name|USER_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|allocFile
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.fairscheduler.allocation.file"
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocFile
operator|==
literal|null
condition|)
block|{
comment|// No allocation file specified in jobconf. Use the default allocation
comment|// file, fair-scheduler.xml, looking for it on the classpath.
name|allocFile
operator|=
operator|new
name|Configuration
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"fair-scheduler.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocFile
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The fair scheduler allocation file fair-scheduler.xml was "
operator|+
literal|"not found on the classpath, and no other config file is given "
operator|+
literal|"through mapred.fairscheduler.allocation.file."
argument_list|)
expr_stmt|;
block|}
block|}
name|reloadAllocs
argument_list|()
expr_stmt|;
name|lastSuccessfulReload
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|lastReloadAttempt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Create the default pool so that it shows up in the web UI
name|getPool
argument_list|(
name|Pool
operator|.
name|DEFAULT_POOL_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a pool by name, creating it if necessary    */
DECL|method|getPool (String name)
specifier|public
specifier|synchronized
name|Pool
name|getPool
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Pool
name|pool
init|=
name|pools
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|pool
operator|=
operator|new
name|Pool
argument_list|(
name|scheduler
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setSchedulingMode
argument_list|(
name|defaultSchedulingMode
argument_list|)
expr_stmt|;
name|pools
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
return|return
name|pool
return|;
block|}
comment|/**    * Get the pool that a given job is in.    */
DECL|method|getPool (JobInProgress job)
specifier|public
name|Pool
name|getPool
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
name|getPool
argument_list|(
name|getPoolName
argument_list|(
name|job
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Reload allocations file if it hasn't been loaded in a while    */
DECL|method|reloadAllocsIfNecessary ()
specifier|public
name|void
name|reloadAllocsIfNecessary
parameter_list|()
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|>
name|lastReloadAttempt
operator|+
name|ALLOC_RELOAD_INTERVAL
condition|)
block|{
name|lastReloadAttempt
operator|=
name|time
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|allocFile
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|// Get last modified time of alloc file depending whether it's a String
comment|// (for a path name) or an URL (for a classloader resource)
name|long
name|lastModified
decl_stmt|;
if|if
condition|(
name|allocFile
operator|instanceof
name|String
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|allocFile
argument_list|)
decl_stmt|;
name|lastModified
operator|=
name|file
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// allocFile is an URL
name|URLConnection
name|conn
init|=
operator|(
operator|(
name|URL
operator|)
name|allocFile
operator|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|lastModified
operator|=
name|conn
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lastModified
operator|>
name|lastSuccessfulReload
operator|&&
name|time
operator|>
name|lastModified
operator|+
name|ALLOC_RELOAD_WAIT
condition|)
block|{
name|reloadAllocs
argument_list|()
expr_stmt|;
name|lastSuccessfulReload
operator|=
name|time
expr_stmt|;
name|lastReloadAttemptFailed
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Throwing the error further out here won't help - the RPC thread
comment|// will catch it and report it in a loop. Instead, just log it and
comment|// hope somebody will notice from the log.
comment|// We log the error only on the first failure so we don't fill up the
comment|// JobTracker's log with these messages.
if|if
condition|(
operator|!
name|lastReloadAttemptFailed
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to reload fair scheduler config file - "
operator|+
literal|"will use existing allocations."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|lastReloadAttemptFailed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Updates the allocation list from the allocation config file. This file is    * expected to be in the following whitespace-separated format:    *     *<code>    * poolName1 mapAlloc reduceAlloc    * poolName2 mapAlloc reduceAlloc    * ...    *</code>    *     * Blank lines and lines starting with # are ignored.    *      * @throws IOException if the config file cannot be read.    * @throws AllocationConfigurationException if allocations are invalid.    * @throws ParserConfigurationException if XML parser is misconfigured.    * @throws SAXException if config file is malformed.    */
DECL|method|reloadAllocs ()
specifier|public
name|void
name|reloadAllocs
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|AllocationConfigurationException
block|{
if|if
condition|(
name|allocFile
operator|==
literal|null
condition|)
return|return;
comment|// Create some temporary hashmaps to hold the new allocs, and we only save
comment|// them in our fields if we have parsed the entire allocs file successfully.
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapAllocs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|reduceAllocs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|poolMaxJobs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|userMaxJobs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|poolMaxMaps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|poolMaxReduces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|poolWeights
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SchedulingMode
argument_list|>
name|poolModes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SchedulingMode
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|minSharePreemptionTimeouts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|userMaxJobsDefault
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|poolMaxJobsDefault
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|fairSharePreemptionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|defaultMinSharePreemptionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|SchedulingMode
name|defaultSchedulingMode
init|=
name|SchedulingMode
operator|.
name|FAIR
decl_stmt|;
comment|// Remember all pool names so we can display them on web UI, etc.
name|List
argument_list|<
name|String
argument_list|>
name|poolNamesInAllocFile
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Read and parse the allocations file.
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
decl_stmt|;
if|if
condition|(
name|allocFile
operator|instanceof
name|String
condition|)
block|{
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|allocFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|allocFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"allocations"
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Bad fair scheduler config "
operator|+
literal|"file: top-level element not<allocations>"
argument_list|)
throw|;
name|NodeList
name|elements
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|elements
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|Element
operator|)
condition|)
continue|continue;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
if|if
condition|(
literal|"pool"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|poolName
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|poolNamesInAllocFile
operator|.
name|add
argument_list|(
name|poolName
argument_list|)
expr_stmt|;
name|NodeList
name|fields
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|fieldNode
init|=
name|fields
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fieldNode
operator|instanceof
name|Element
operator|)
condition|)
continue|continue;
name|Element
name|field
init|=
operator|(
name|Element
operator|)
name|fieldNode
decl_stmt|;
if|if
condition|(
literal|"minMaps"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|mapAllocs
operator|.
name|put
argument_list|(
name|poolName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"minReduces"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|reduceAllocs
operator|.
name|put
argument_list|(
name|poolName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"maxMaps"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|poolMaxMaps
operator|.
name|put
argument_list|(
name|poolName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"maxReduces"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|poolMaxReduces
operator|.
name|put
argument_list|(
name|poolName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"maxRunningJobs"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|poolMaxJobs
operator|.
name|put
argument_list|(
name|poolName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"weight"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|double
name|val
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|poolWeights
operator|.
name|put
argument_list|(
name|poolName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"minSharePreemptionTimeout"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|minSharePreemptionTimeouts
operator|.
name|put
argument_list|(
name|poolName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"schedulingMode"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|poolModes
operator|.
name|put
argument_list|(
name|poolName
argument_list|,
name|parseSchedulingMode
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|poolMaxMaps
operator|.
name|containsKey
argument_list|(
name|poolName
argument_list|)
operator|&&
name|mapAllocs
operator|.
name|containsKey
argument_list|(
name|poolName
argument_list|)
operator|&&
name|poolMaxMaps
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
operator|<
name|mapAllocs
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Pool %s has max maps %d less than min maps %d"
argument_list|,
name|poolName
argument_list|,
name|poolMaxMaps
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
argument_list|,
name|mapAllocs
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|poolMaxReduces
operator|.
name|containsKey
argument_list|(
name|poolName
argument_list|)
operator|&&
name|reduceAllocs
operator|.
name|containsKey
argument_list|(
name|poolName
argument_list|)
operator|&&
name|poolMaxReduces
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
operator|<
name|reduceAllocs
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Pool %s has max reduces %d less than min reduces %d"
argument_list|,
name|poolName
argument_list|,
name|poolMaxReduces
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
argument_list|,
name|reduceAllocs
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"user"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|NodeList
name|fields
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|fieldNode
init|=
name|fields
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fieldNode
operator|instanceof
name|Element
operator|)
condition|)
continue|continue;
name|Element
name|field
init|=
operator|(
name|Element
operator|)
name|fieldNode
decl_stmt|;
if|if
condition|(
literal|"maxRunningJobs"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|userMaxJobs
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"userMaxJobsDefault"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|userMaxJobsDefault
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"poolMaxJobsDefault"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|poolMaxJobsDefault
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fairSharePreemptionTimeout"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|fairSharePreemptionTimeout
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"defaultMinSharePreemptionTimeout"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|defaultMinSharePreemptionTimeout
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"defaultPoolSchedulingMode"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|defaultSchedulingMode
operator|=
name|parseSchedulingMode
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bad element in allocations file: "
operator|+
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Commit the reload; also create any pool defined in the alloc file
comment|// if it does not already exist, so it can be displayed on the web UI.
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|mapAllocs
operator|=
name|mapAllocs
expr_stmt|;
name|this
operator|.
name|reduceAllocs
operator|=
name|reduceAllocs
expr_stmt|;
name|this
operator|.
name|poolMaxMaps
operator|=
name|poolMaxMaps
expr_stmt|;
name|this
operator|.
name|poolMaxReduces
operator|=
name|poolMaxReduces
expr_stmt|;
name|this
operator|.
name|poolMaxJobs
operator|=
name|poolMaxJobs
expr_stmt|;
name|this
operator|.
name|userMaxJobs
operator|=
name|userMaxJobs
expr_stmt|;
name|this
operator|.
name|poolWeights
operator|=
name|poolWeights
expr_stmt|;
name|this
operator|.
name|minSharePreemptionTimeouts
operator|=
name|minSharePreemptionTimeouts
expr_stmt|;
name|this
operator|.
name|userMaxJobsDefault
operator|=
name|userMaxJobsDefault
expr_stmt|;
name|this
operator|.
name|poolMaxJobsDefault
operator|=
name|poolMaxJobsDefault
expr_stmt|;
name|this
operator|.
name|fairSharePreemptionTimeout
operator|=
name|fairSharePreemptionTimeout
expr_stmt|;
name|this
operator|.
name|defaultMinSharePreemptionTimeout
operator|=
name|defaultMinSharePreemptionTimeout
expr_stmt|;
name|this
operator|.
name|defaultSchedulingMode
operator|=
name|defaultSchedulingMode
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|poolNamesInAllocFile
control|)
block|{
name|Pool
name|pool
init|=
name|getPool
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|poolModes
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|pool
operator|.
name|setSchedulingMode
argument_list|(
name|poolModes
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pool
operator|.
name|setSchedulingMode
argument_list|(
name|defaultSchedulingMode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Does the pool have incompatible max and min allocation set.    *     * @param type    *          {@link TaskType#MAP} or {@link TaskType#REDUCE}    * @param pool    *          the pool name    * @return true if the max is less than the min    */
DECL|method|invertedMinMax (TaskType type, String pool)
name|boolean
name|invertedMinMax
parameter_list|(
name|TaskType
name|type
parameter_list|,
name|String
name|pool
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|max
init|=
name|TaskType
operator|.
name|MAP
operator|==
name|type
condition|?
name|poolMaxMaps
else|:
name|poolMaxReduces
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|min
init|=
name|TaskType
operator|.
name|MAP
operator|==
name|type
condition|?
name|mapAllocs
else|:
name|reduceAllocs
decl_stmt|;
if|if
condition|(
name|max
operator|.
name|containsKey
argument_list|(
name|pool
argument_list|)
operator|&&
name|min
operator|.
name|containsKey
argument_list|(
name|pool
argument_list|)
operator|&&
name|max
operator|.
name|get
argument_list|(
name|pool
argument_list|)
operator|<
name|min
operator|.
name|get
argument_list|(
name|pool
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|parseSchedulingMode (String text)
specifier|private
name|SchedulingMode
name|parseSchedulingMode
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|text
operator|=
name|text
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
literal|"fair"
argument_list|)
condition|)
block|{
return|return
name|SchedulingMode
operator|.
name|FAIR
return|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
literal|"fifo"
argument_list|)
condition|)
block|{
return|return
name|SchedulingMode
operator|.
name|FIFO
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Unknown scheduling mode : "
operator|+
name|text
operator|+
literal|"; expected 'fifo' or 'fair'"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the allocation for a particular pool    */
DECL|method|getAllocation (String pool, TaskType taskType)
specifier|public
name|int
name|getAllocation
parameter_list|(
name|String
name|pool
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|allocationMap
init|=
operator|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|mapAllocs
else|:
name|reduceAllocs
operator|)
decl_stmt|;
name|Integer
name|alloc
init|=
name|allocationMap
operator|.
name|get
argument_list|(
name|pool
argument_list|)
decl_stmt|;
return|return
operator|(
name|alloc
operator|==
literal|null
condition|?
literal|0
else|:
name|alloc
operator|)
return|;
block|}
comment|/**    * Get the maximum map or reduce slots for the given pool.    * @return the cap set on this pool, or Integer.MAX_VALUE if not set.    */
DECL|method|getMaxSlots (String poolName, TaskType taskType)
name|int
name|getMaxSlots
parameter_list|(
name|String
name|poolName
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|maxMap
init|=
operator|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|poolMaxMaps
else|:
name|poolMaxReduces
operator|)
decl_stmt|;
if|if
condition|(
name|maxMap
operator|.
name|containsKey
argument_list|(
name|poolName
argument_list|)
condition|)
block|{
return|return
name|maxMap
operator|.
name|get
argument_list|(
name|poolName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
block|}
comment|/**    * Add a job in the appropriate pool    */
DECL|method|addJob (JobInProgress job)
specifier|public
specifier|synchronized
name|void
name|addJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|getPool
argument_list|(
name|getPoolName
argument_list|(
name|job
argument_list|)
argument_list|)
operator|.
name|addJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove a job    */
DECL|method|removeJob (JobInProgress job)
specifier|public
specifier|synchronized
name|void
name|removeJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|getPool
argument_list|(
name|getPoolName
argument_list|(
name|job
argument_list|)
argument_list|)
operator|.
name|removeJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Change the pool of a particular job    */
DECL|method|setPool (JobInProgress job, String pool)
specifier|public
specifier|synchronized
name|void
name|setPool
parameter_list|(
name|JobInProgress
name|job
parameter_list|,
name|String
name|pool
parameter_list|)
block|{
name|removeJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|getJobConf
argument_list|()
operator|.
name|set
argument_list|(
name|EXPLICIT_POOL_PROPERTY
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|addJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a collection of all pools    */
DECL|method|getPools ()
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|Pool
argument_list|>
name|getPools
parameter_list|()
block|{
return|return
name|pools
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**    * Get the pool name for a JobInProgress from its configuration.  This uses    * the value of mapred.fairscheduler.pool if specified, otherwise the value     * of the property named in mapred.fairscheduler.poolnameproperty if that is    * specified.  Otherwise if neither is specified it uses the "user.name" property     * in the jobconf by default.    */
DECL|method|getPoolName (JobInProgress job)
specifier|public
name|String
name|getPoolName
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|job
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
return|return
name|conf
operator|.
name|get
argument_list|(
name|EXPLICIT_POOL_PROPERTY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|poolNameProperty
argument_list|,
name|Pool
operator|.
name|DEFAULT_POOL_NAME
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**    * Get all pool names that have been seen either in the allocation file or in    * a MapReduce job.    */
DECL|method|getPoolNames ()
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|String
argument_list|>
name|getPoolNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Pool
name|pool
range|:
name|getPools
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|pool
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|method|getUserMaxJobs (String user)
specifier|public
name|int
name|getUserMaxJobs
parameter_list|(
name|String
name|user
parameter_list|)
block|{
if|if
condition|(
name|userMaxJobs
operator|.
name|containsKey
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
name|userMaxJobs
operator|.
name|get
argument_list|(
name|user
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|userMaxJobsDefault
return|;
block|}
block|}
DECL|method|getPoolMaxJobs (String pool)
specifier|public
name|int
name|getPoolMaxJobs
parameter_list|(
name|String
name|pool
parameter_list|)
block|{
if|if
condition|(
name|poolMaxJobs
operator|.
name|containsKey
argument_list|(
name|pool
argument_list|)
condition|)
block|{
return|return
name|poolMaxJobs
operator|.
name|get
argument_list|(
name|pool
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|poolMaxJobsDefault
return|;
block|}
block|}
DECL|method|getPoolWeight (String pool)
specifier|public
name|double
name|getPoolWeight
parameter_list|(
name|String
name|pool
parameter_list|)
block|{
if|if
condition|(
name|poolWeights
operator|.
name|containsKey
argument_list|(
name|pool
argument_list|)
condition|)
block|{
return|return
name|poolWeights
operator|.
name|get
argument_list|(
name|pool
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|1.0
return|;
block|}
block|}
comment|/**    * Get a pool's min share preemption timeout, in milliseconds. This is the    * time after which jobs in the pool may kill other pools' tasks if they    * are below their min share.    */
DECL|method|getMinSharePreemptionTimeout (String pool)
specifier|public
name|long
name|getMinSharePreemptionTimeout
parameter_list|(
name|String
name|pool
parameter_list|)
block|{
if|if
condition|(
name|minSharePreemptionTimeouts
operator|.
name|containsKey
argument_list|(
name|pool
argument_list|)
condition|)
block|{
return|return
name|minSharePreemptionTimeouts
operator|.
name|get
argument_list|(
name|pool
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultMinSharePreemptionTimeout
return|;
block|}
block|}
comment|/**    * Get the fair share preemption, in milliseconds. This is the time    * after which any job may kill other jobs' tasks if it is below half    * its fair share.    */
DECL|method|getFairSharePreemptionTimeout ()
specifier|public
name|long
name|getFairSharePreemptionTimeout
parameter_list|()
block|{
return|return
name|fairSharePreemptionTimeout
return|;
block|}
block|}
end_class

end_unit

