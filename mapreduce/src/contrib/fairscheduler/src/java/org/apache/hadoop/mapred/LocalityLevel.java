begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_comment
comment|/**  * Represents the level of data-locality at which a job in the fair scheduler  * is allowed to launch tasks. By default, jobs are not allowed to launch  * non-data-local tasks until they have waited a small number of seconds to  * find a slot on a node that they have data on. If a job has waited this  * long, it is allowed to launch rack-local tasks as well (on nodes that may  * not have the task's input data, but share a rack with a node that does).  * Finally, after a further wait, jobs are allowed to launch tasks anywhere  * in the cluster.  *   * This enum defines three levels - NODE, RACK and ANY (for allowing tasks  * to be launched on any node). A map task's level can be obtained from  * its job through {@link #fromTask(JobInProgress, Task, TaskTrackerStatus)}. In  * addition, for any locality level, it is possible to get a "level cap" to pass  * to {@link JobInProgress#obtainNewMapTask(TaskTrackerStatus, int, int, int)}  * to ensure that only tasks at this level or lower are launched, through  * the {@link #toCacheLevelCap()} method.  */
end_comment

begin_enum
DECL|enum|LocalityLevel
specifier|public
enum|enum
name|LocalityLevel
block|{
DECL|enumConstant|NODE
DECL|enumConstant|RACK
DECL|enumConstant|ANY
name|NODE
block|,
name|RACK
block|,
name|ANY
block|;
DECL|method|fromTask (JobInProgress job, Task mapTask, TaskTrackerStatus tracker)
specifier|public
specifier|static
name|LocalityLevel
name|fromTask
parameter_list|(
name|JobInProgress
name|job
parameter_list|,
name|Task
name|mapTask
parameter_list|,
name|TaskTrackerStatus
name|tracker
parameter_list|)
block|{
name|TaskID
name|tipID
init|=
name|mapTask
operator|.
name|getTaskID
argument_list|()
operator|.
name|getTaskID
argument_list|()
decl_stmt|;
name|TaskInProgress
name|tip
init|=
name|job
operator|.
name|getTaskInProgress
argument_list|(
name|tipID
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|job
operator|.
name|getLocalityLevel
argument_list|(
name|tip
argument_list|,
name|tracker
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
return|return
name|LocalityLevel
operator|.
name|NODE
return|;
case|case
literal|1
case|:
return|return
name|LocalityLevel
operator|.
name|RACK
return|;
default|default:
return|return
name|LocalityLevel
operator|.
name|ANY
return|;
block|}
block|}
comment|/**    * Obtain a JobInProgress cache level cap to pass to    * {@link JobInProgress#obtainNewMapTask(TaskTrackerStatus, int, int, int)}    * to ensure that only tasks of this locality level and lower are launched.    */
DECL|method|toCacheLevelCap ()
specifier|public
name|int
name|toCacheLevelCap
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|NODE
case|:
return|return
literal|1
return|;
case|case
name|RACK
case|:
return|return
literal|2
return|;
default|default:
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
block|}
block|}
end_enum

end_unit

