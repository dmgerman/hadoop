begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_comment
comment|/**  * A schedulable pool of jobs.  */
end_comment

begin_class
DECL|class|Pool
specifier|public
class|class
name|Pool
block|{
comment|/** Name of the default pool, where jobs with no pool parameter go. */
DECL|field|DEFAULT_POOL_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_POOL_NAME
init|=
literal|"default"
decl_stmt|;
comment|/** Pool name. */
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/** Jobs in this specific pool; does not include children pools' jobs. */
DECL|field|jobs
specifier|private
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|jobs
init|=
operator|new
name|ArrayList
argument_list|<
name|JobInProgress
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Scheduling mode for jobs inside the pool (fair or FIFO) */
DECL|field|schedulingMode
specifier|private
name|SchedulingMode
name|schedulingMode
decl_stmt|;
DECL|field|mapSchedulable
specifier|private
name|PoolSchedulable
name|mapSchedulable
decl_stmt|;
DECL|field|reduceSchedulable
specifier|private
name|PoolSchedulable
name|reduceSchedulable
decl_stmt|;
DECL|method|Pool (FairScheduler scheduler, String name)
specifier|public
name|Pool
parameter_list|(
name|FairScheduler
name|scheduler
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|mapSchedulable
operator|=
operator|new
name|PoolSchedulable
argument_list|(
name|scheduler
argument_list|,
name|this
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
name|reduceSchedulable
operator|=
operator|new
name|PoolSchedulable
argument_list|(
name|scheduler
argument_list|,
name|this
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobs ()
specifier|public
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|getJobs
parameter_list|()
block|{
return|return
name|jobs
return|;
block|}
DECL|method|addJob (JobInProgress job)
specifier|public
name|void
name|addJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|jobs
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|mapSchedulable
operator|.
name|addJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|reduceSchedulable
operator|.
name|addJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
DECL|method|removeJob (JobInProgress job)
specifier|public
name|void
name|removeJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|jobs
operator|.
name|remove
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|mapSchedulable
operator|.
name|removeJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|reduceSchedulable
operator|.
name|removeJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getSchedulingMode ()
specifier|public
name|SchedulingMode
name|getSchedulingMode
parameter_list|()
block|{
return|return
name|schedulingMode
return|;
block|}
DECL|method|setSchedulingMode (SchedulingMode schedulingMode)
specifier|public
name|void
name|setSchedulingMode
parameter_list|(
name|SchedulingMode
name|schedulingMode
parameter_list|)
block|{
name|this
operator|.
name|schedulingMode
operator|=
name|schedulingMode
expr_stmt|;
block|}
DECL|method|isDefaultPool ()
specifier|public
name|boolean
name|isDefaultPool
parameter_list|()
block|{
return|return
name|Pool
operator|.
name|DEFAULT_POOL_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getMapSchedulable ()
specifier|public
name|PoolSchedulable
name|getMapSchedulable
parameter_list|()
block|{
return|return
name|mapSchedulable
return|;
block|}
DECL|method|getReduceSchedulable ()
specifier|public
name|PoolSchedulable
name|getReduceSchedulable
parameter_list|()
block|{
return|return
name|reduceSchedulable
return|;
block|}
DECL|method|getSchedulable (TaskType type)
specifier|public
name|PoolSchedulable
name|getSchedulable
parameter_list|(
name|TaskType
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|mapSchedulable
else|:
name|reduceSchedulable
return|;
block|}
block|}
end_class

end_unit

