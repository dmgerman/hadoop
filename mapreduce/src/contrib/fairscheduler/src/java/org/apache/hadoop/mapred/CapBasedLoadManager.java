begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * A {@link LoadManager} for use by the {@link FairScheduler} that allocates  * tasks evenly across nodes up to their per-node maximum, using the default  * load management algorithm in Hadoop.  */
end_comment

begin_class
DECL|class|CapBasedLoadManager
specifier|public
class|class
name|CapBasedLoadManager
extends|extends
name|LoadManager
block|{
DECL|field|maxDiff
name|float
name|maxDiff
init|=
literal|0.0f
decl_stmt|;
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|maxDiff
operator|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"mapred.fairscheduler.load.max.diff"
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
comment|/**    * Determine how many tasks of a given type we want to run on a TaskTracker.     * This cap is chosen based on how many tasks of that type are outstanding in    * total, so that when the cluster is used below capacity, tasks are spread    * out uniformly across the nodes rather than being clumped up on whichever    * machines sent out heartbeats earliest.    */
DECL|method|getCap (int totalRunnableTasks, int localMaxTasks, int totalSlots)
name|int
name|getCap
parameter_list|(
name|int
name|totalRunnableTasks
parameter_list|,
name|int
name|localMaxTasks
parameter_list|,
name|int
name|totalSlots
parameter_list|)
block|{
name|double
name|load
init|=
name|maxDiff
operator|+
operator|(
operator|(
name|double
operator|)
name|totalRunnableTasks
operator|)
operator|/
name|totalSlots
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|localMaxTasks
operator|*
name|Math
operator|.
name|min
argument_list|(
literal|1.0
argument_list|,
name|load
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|canAssignMap (TaskTrackerStatus tracker, int totalRunnableMaps, int totalMapSlots)
specifier|public
name|boolean
name|canAssignMap
parameter_list|(
name|TaskTrackerStatus
name|tracker
parameter_list|,
name|int
name|totalRunnableMaps
parameter_list|,
name|int
name|totalMapSlots
parameter_list|)
block|{
return|return
name|tracker
operator|.
name|countMapTasks
argument_list|()
operator|<
name|getCap
argument_list|(
name|totalRunnableMaps
argument_list|,
name|tracker
operator|.
name|getMaxMapSlots
argument_list|()
argument_list|,
name|totalMapSlots
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|canAssignReduce (TaskTrackerStatus tracker, int totalRunnableReduces, int totalReduceSlots)
specifier|public
name|boolean
name|canAssignReduce
parameter_list|(
name|TaskTrackerStatus
name|tracker
parameter_list|,
name|int
name|totalRunnableReduces
parameter_list|,
name|int
name|totalReduceSlots
parameter_list|)
block|{
return|return
name|tracker
operator|.
name|countReduceTasks
argument_list|()
operator|<
name|getCap
argument_list|(
name|totalRunnableReduces
argument_list|,
name|tracker
operator|.
name|getMaxReduceSlots
argument_list|()
argument_list|,
name|totalReduceSlots
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|canLaunchTask (TaskTrackerStatus tracker, JobInProgress job, TaskType type)
specifier|public
name|boolean
name|canLaunchTask
parameter_list|(
name|TaskTrackerStatus
name|tracker
parameter_list|,
name|JobInProgress
name|job
parameter_list|,
name|TaskType
name|type
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

