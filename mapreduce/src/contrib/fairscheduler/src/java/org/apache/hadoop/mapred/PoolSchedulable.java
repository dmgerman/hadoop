begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FairScheduler
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_class
DECL|class|PoolSchedulable
specifier|public
class|class
name|PoolSchedulable
extends|extends
name|Schedulable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PoolSchedulable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|pool
specifier|private
name|Pool
name|pool
decl_stmt|;
DECL|field|taskType
specifier|private
name|TaskType
name|taskType
decl_stmt|;
DECL|field|poolMgr
specifier|private
name|PoolManager
name|poolMgr
decl_stmt|;
DECL|field|jobScheds
specifier|private
name|List
argument_list|<
name|JobSchedulable
argument_list|>
name|jobScheds
init|=
operator|new
name|LinkedList
argument_list|<
name|JobSchedulable
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|demand
specifier|private
name|int
name|demand
init|=
literal|0
decl_stmt|;
comment|// Variables used for preemption
DECL|field|lastTimeAtMinShare
name|long
name|lastTimeAtMinShare
decl_stmt|;
DECL|field|lastTimeAtHalfFairShare
name|long
name|lastTimeAtHalfFairShare
decl_stmt|;
DECL|method|PoolSchedulable (FairScheduler scheduler, Pool pool, TaskType type)
specifier|public
name|PoolSchedulable
parameter_list|(
name|FairScheduler
name|scheduler
parameter_list|,
name|Pool
name|pool
parameter_list|,
name|TaskType
name|type
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|taskType
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|poolMgr
operator|=
name|scheduler
operator|.
name|getPoolManager
argument_list|()
expr_stmt|;
name|long
name|currentTime
init|=
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|this
operator|.
name|lastTimeAtMinShare
operator|=
name|currentTime
expr_stmt|;
name|this
operator|.
name|lastTimeAtHalfFairShare
operator|=
name|currentTime
expr_stmt|;
name|initMetrics
argument_list|()
expr_stmt|;
block|}
DECL|method|addJob (JobInProgress job)
specifier|public
name|void
name|addJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|JobInfo
name|info
init|=
name|scheduler
operator|.
name|getJobInfo
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|jobScheds
operator|.
name|add
argument_list|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|info
operator|.
name|mapSchedulable
else|:
name|info
operator|.
name|reduceSchedulable
argument_list|)
expr_stmt|;
block|}
DECL|method|removeJob (JobInProgress job)
specifier|public
name|void
name|removeJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|JobSchedulable
argument_list|>
name|it
init|=
name|jobScheds
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JobSchedulable
name|jobSched
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|jobSched
operator|.
name|getJob
argument_list|()
operator|==
name|job
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Update demand by asking jobs in the pool to update    */
annotation|@
name|Override
DECL|method|updateDemand ()
specifier|public
name|void
name|updateDemand
parameter_list|()
block|{
name|demand
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|JobSchedulable
name|sched
range|:
name|jobScheds
control|)
block|{
name|sched
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|demand
operator|+=
name|sched
operator|.
name|getDemand
argument_list|()
expr_stmt|;
block|}
comment|// if demand exceeds the cap for this pool, limit to the max
name|int
name|maxTasks
init|=
name|poolMgr
operator|.
name|getMaxSlots
argument_list|(
name|pool
operator|.
name|getName
argument_list|()
argument_list|,
name|taskType
argument_list|)
decl_stmt|;
if|if
condition|(
name|demand
operator|>
name|maxTasks
condition|)
block|{
name|demand
operator|=
name|maxTasks
expr_stmt|;
block|}
block|}
comment|/**    * Distribute the pool's fair share among its jobs    */
annotation|@
name|Override
DECL|method|redistributeShare ()
specifier|public
name|void
name|redistributeShare
parameter_list|()
block|{
if|if
condition|(
name|pool
operator|.
name|getSchedulingMode
argument_list|()
operator|==
name|SchedulingMode
operator|.
name|FAIR
condition|)
block|{
name|SchedulingAlgorithms
operator|.
name|computeFairShares
argument_list|(
name|jobScheds
argument_list|,
name|getFairShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|JobSchedulable
name|sched
range|:
name|jobScheds
control|)
block|{
name|sched
operator|.
name|setFairShare
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getDemand ()
specifier|public
name|int
name|getDemand
parameter_list|()
block|{
return|return
name|demand
return|;
block|}
annotation|@
name|Override
DECL|method|getMinShare ()
specifier|public
name|int
name|getMinShare
parameter_list|()
block|{
return|return
name|poolMgr
operator|.
name|getAllocation
argument_list|(
name|pool
operator|.
name|getName
argument_list|()
argument_list|,
name|taskType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWeight ()
specifier|public
name|double
name|getWeight
parameter_list|()
block|{
return|return
name|poolMgr
operator|.
name|getPoolWeight
argument_list|(
name|pool
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|JobPriority
name|getPriority
parameter_list|()
block|{
return|return
name|JobPriority
operator|.
name|NORMAL
return|;
block|}
annotation|@
name|Override
DECL|method|getRunningTasks ()
specifier|public
name|int
name|getRunningTasks
parameter_list|()
block|{
name|int
name|ans
init|=
literal|0
decl_stmt|;
for|for
control|(
name|JobSchedulable
name|sched
range|:
name|jobScheds
control|)
block|{
name|ans
operator|+=
name|sched
operator|.
name|getRunningTasks
argument_list|()
expr_stmt|;
block|}
return|return
name|ans
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|assignTask (TaskTrackerStatus tts, long currentTime, Collection<JobInProgress> visited)
specifier|public
name|Task
name|assignTask
parameter_list|(
name|TaskTrackerStatus
name|tts
parameter_list|,
name|long
name|currentTime
parameter_list|,
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|visited
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|runningTasks
init|=
name|getRunningTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|runningTasks
operator|>=
name|poolMgr
operator|.
name|getMaxSlots
argument_list|(
name|pool
operator|.
name|getName
argument_list|()
argument_list|,
name|taskType
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SchedulingMode
name|mode
init|=
name|pool
operator|.
name|getSchedulingMode
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|Schedulable
argument_list|>
name|comparator
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|SchedulingMode
operator|.
name|FIFO
condition|)
block|{
name|comparator
operator|=
operator|new
name|SchedulingAlgorithms
operator|.
name|FifoComparator
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|SchedulingMode
operator|.
name|FAIR
condition|)
block|{
name|comparator
operator|=
operator|new
name|SchedulingAlgorithms
operator|.
name|FairShareComparator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported pool scheduling mode "
operator|+
name|mode
argument_list|)
throw|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|jobScheds
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
for|for
control|(
name|JobSchedulable
name|sched
range|:
name|jobScheds
control|)
block|{
name|Task
name|task
init|=
name|sched
operator|.
name|assignTask
argument_list|(
name|tts
argument_list|,
name|currentTime
argument_list|,
name|visited
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
return|return
name|task
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|pool
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getPool ()
name|Pool
name|getPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskType ()
specifier|public
name|TaskType
name|getTaskType
parameter_list|()
block|{
return|return
name|taskType
return|;
block|}
DECL|method|getJobSchedulables ()
specifier|public
name|Collection
argument_list|<
name|JobSchedulable
argument_list|>
name|getJobSchedulables
parameter_list|()
block|{
return|return
name|jobScheds
return|;
block|}
DECL|method|getLastTimeAtMinShare ()
specifier|public
name|long
name|getLastTimeAtMinShare
parameter_list|()
block|{
return|return
name|lastTimeAtMinShare
return|;
block|}
DECL|method|setLastTimeAtMinShare (long lastTimeAtMinShare)
specifier|public
name|void
name|setLastTimeAtMinShare
parameter_list|(
name|long
name|lastTimeAtMinShare
parameter_list|)
block|{
name|this
operator|.
name|lastTimeAtMinShare
operator|=
name|lastTimeAtMinShare
expr_stmt|;
block|}
DECL|method|getLastTimeAtHalfFairShare ()
specifier|public
name|long
name|getLastTimeAtHalfFairShare
parameter_list|()
block|{
return|return
name|lastTimeAtHalfFairShare
return|;
block|}
DECL|method|setLastTimeAtHalfFairShare (long lastTimeAtHalfFairShare)
specifier|public
name|void
name|setLastTimeAtHalfFairShare
parameter_list|(
name|long
name|lastTimeAtHalfFairShare
parameter_list|)
block|{
name|this
operator|.
name|lastTimeAtHalfFairShare
operator|=
name|lastTimeAtHalfFairShare
expr_stmt|;
block|}
DECL|method|getMetricsContextName ()
specifier|protected
name|String
name|getMetricsContextName
parameter_list|()
block|{
return|return
literal|"pools"
return|;
block|}
annotation|@
name|Override
DECL|method|updateMetrics ()
specifier|public
name|void
name|updateMetrics
parameter_list|()
block|{
name|super
operator|.
name|setMetricValues
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
if|if
condition|(
name|scheduler
operator|.
name|isPreemptionEnabled
argument_list|()
condition|)
block|{
comment|// These won't be set if preemption is off
name|long
name|lastCheck
init|=
name|scheduler
operator|.
name|getLastPreemptionUpdateTime
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"millisSinceAtMinShare"
argument_list|,
name|lastCheck
operator|-
name|lastTimeAtMinShare
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setMetric
argument_list|(
literal|"millisSinceAtHalfFairShare"
argument_list|,
name|lastCheck
operator|-
name|lastTimeAtHalfFairShare
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|update
argument_list|()
expr_stmt|;
for|for
control|(
name|JobSchedulable
name|job
range|:
name|jobScheds
control|)
block|{
name|job
operator|.
name|updateMetrics
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

