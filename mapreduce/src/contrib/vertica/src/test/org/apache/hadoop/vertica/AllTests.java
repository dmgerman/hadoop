begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vertica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaConfiguration
import|;
end_import

begin_comment
comment|/**  * All tests for Vertica Formatters (org.apache.hadoop.vertica)  *   *   */
end_comment

begin_class
DECL|class|AllTests
specifier|public
specifier|final
class|class
name|AllTests
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AllTests
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|VERTICA_HOSTNAME
specifier|static
specifier|final
name|String
name|VERTICA_HOSTNAME
init|=
literal|"localhost"
decl_stmt|;
DECL|field|VERTICA_USERNAME
specifier|static
specifier|final
name|String
name|VERTICA_USERNAME
init|=
literal|"dbadmin"
decl_stmt|;
DECL|field|VERTICA_PASSWORD
specifier|static
specifier|final
name|String
name|VERTICA_PASSWORD
init|=
literal|""
decl_stmt|;
DECL|field|VERTICA_DATABASE
specifier|static
specifier|final
name|String
name|VERTICA_DATABASE
init|=
literal|"db"
decl_stmt|;
DECL|field|hostname
specifier|static
name|String
name|hostname
decl_stmt|;
DECL|field|username
specifier|static
name|String
name|username
decl_stmt|;
DECL|field|password
specifier|static
name|String
name|password
decl_stmt|;
DECL|field|database
specifier|static
name|String
name|database
decl_stmt|;
DECL|field|run_tests
specifier|static
name|boolean
name|run_tests
init|=
literal|false
decl_stmt|;
DECL|method|getHostname ()
specifier|public
specifier|static
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
DECL|method|getUsername ()
specifier|public
specifier|static
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|getPassword ()
specifier|public
specifier|static
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|getDatabase ()
specifier|public
specifier|static
name|String
name|getDatabase
parameter_list|()
block|{
return|return
name|database
return|;
block|}
DECL|method|isSetup ()
specifier|public
specifier|static
name|boolean
name|isSetup
parameter_list|()
block|{
return|return
name|run_tests
return|;
block|}
DECL|method|AllTests ()
specifier|private
name|AllTests
parameter_list|()
block|{   }
DECL|method|configure ()
specifier|public
specifier|static
name|void
name|configure
parameter_list|()
block|{
if|if
condition|(
name|run_tests
condition|)
block|{
return|return;
block|}
name|Properties
name|properties
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|test_setup
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"vertica.test_setup"
argument_list|,
literal|"vertica_test.sql"
argument_list|)
decl_stmt|;
name|hostname
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"vertica.hostname"
argument_list|,
name|VERTICA_HOSTNAME
argument_list|)
expr_stmt|;
name|username
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"vertica.username"
argument_list|,
name|VERTICA_USERNAME
argument_list|)
expr_stmt|;
name|password
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"vertica.password"
argument_list|,
name|VERTICA_PASSWORD
argument_list|)
expr_stmt|;
name|database
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"vertica.database"
argument_list|,
name|VERTICA_DATABASE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Inititializing database with "
operator|+
name|test_setup
argument_list|)
expr_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|VerticaConfiguration
operator|.
name|VERTICA_DRIVER_CLASS
argument_list|)
expr_stmt|;
name|String
name|url
init|=
literal|"jdbc:vertica://"
operator|+
name|hostname
operator|+
literal|":5433/"
operator|+
name|database
operator|+
literal|"?user="
operator|+
name|username
operator|+
literal|"&password="
operator|+
name|password
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Conencting to "
operator|+
name|url
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|InputStream
name|strm_cmds
init|=
operator|new
name|FileInputStream
argument_list|(
name|test_setup
argument_list|)
decl_stmt|;
if|if
condition|(
name|strm_cmds
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|strm_cmds
operator|.
name|available
argument_list|()
index|]
decl_stmt|;
name|strm_cmds
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|String
index|[]
name|cmds
init|=
operator|new
name|String
argument_list|(
name|b
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|StringBuffer
name|no_comment
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|cmds
control|)
block|{
if|if
condition|(
operator|!
name|cmd
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
name|no_comment
operator|.
name|append
argument_list|(
name|cmd
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|cmd
range|:
name|no_comment
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|execute
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getSQLState
argument_list|()
operator|.
name|equals
argument_list|(
literal|"42V01"
argument_list|)
condition|)
continue|continue;
else|else
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|run_tests
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No vertica driver found: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" - skipping vertica tests"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not connect to vertica database: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" - skipping vertica tests"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing vertica test setup file "
operator|+
name|test_setup
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" - skipping vertica tests"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|suite ()
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|configure
argument_list|()
expr_stmt|;
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"Tests for org.apache.hadoop.vertica"
argument_list|)
decl_stmt|;
if|if
condition|(
name|run_tests
condition|)
block|{
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TestVertica
operator|.
name|class
argument_list|)
expr_stmt|;
name|suite
operator|.
name|addTestSuite
argument_list|(
name|TestExample
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|suite
return|;
block|}
block|}
end_class

end_unit

