begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vertica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_class
DECL|class|VerticaRecordReader
specifier|public
class|class
name|VerticaRecordReader
extends|extends
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|VerticaRecord
argument_list|>
block|{
DECL|field|results
name|ResultSet
name|results
init|=
literal|null
decl_stmt|;
DECL|field|start
name|long
name|start
init|=
literal|0
decl_stmt|;
DECL|field|pos
name|int
name|pos
init|=
literal|0
decl_stmt|;
DECL|field|length
name|long
name|length
init|=
literal|0
decl_stmt|;
DECL|field|split
name|VerticaInputSplit
name|split
init|=
literal|null
decl_stmt|;
DECL|field|key
name|LongWritable
name|key
init|=
literal|null
decl_stmt|;
DECL|field|value
name|VerticaRecord
name|value
init|=
literal|null
decl_stmt|;
DECL|method|VerticaRecordReader (VerticaInputSplit split, Configuration job)
specifier|public
name|VerticaRecordReader
parameter_list|(
name|VerticaInputSplit
name|split
parameter_list|,
name|Configuration
name|job
parameter_list|)
throws|throws
name|Exception
block|{
comment|// run query for this segment
name|this
operator|.
name|split
operator|=
name|split
expr_stmt|;
name|split
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|start
operator|=
name|split
operator|.
name|getStart
argument_list|()
expr_stmt|;
name|length
operator|=
name|split
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|results
operator|=
name|split
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
block|}
DECL|method|initialize (InputSplit split, TaskAttemptContext context)
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|key
operator|=
operator|new
name|LongWritable
argument_list|()
expr_stmt|;
try|try
block|{
name|pos
operator|++
expr_stmt|;
name|value
operator|=
operator|new
name|VerticaRecord
argument_list|(
name|results
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|split
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO: figure out why length would be 0
if|if
condition|(
name|length
operator|==
literal|0
condition|)
return|return
literal|1
return|;
return|return
name|pos
operator|/
name|length
return|;
block|}
DECL|method|next (LongWritable key, VerticaRecord value)
specifier|public
name|boolean
name|next
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|VerticaRecord
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|key
operator|.
name|set
argument_list|(
name|pos
operator|+
name|start
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
try|try
block|{
return|return
name|value
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCurrentKey ()
specifier|public
name|LongWritable
name|getCurrentKey
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentValue ()
specifier|public
name|VerticaRecord
name|getCurrentValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|nextKeyValue ()
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|key
operator|.
name|set
argument_list|(
name|pos
operator|+
name|start
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
try|try
block|{
return|return
name|value
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

