begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vertica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_class
DECL|class|VerticaUtil
specifier|public
class|class
name|VerticaUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VerticaUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|verticaVersion (Configuration conf, boolean output)
specifier|public
specifier|static
name|int
name|verticaVersion
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ver
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|VerticaConfiguration
name|vtconfig
init|=
operator|new
name|VerticaConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|vtconfig
operator|.
name|getConnection
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|DatabaseMetaData
name|dbmd
init|=
name|conn
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ver
operator|=
name|dbmd
operator|.
name|getDatabaseMajorVersion
argument_list|()
operator|*
literal|100
expr_stmt|;
name|ver
operator|+=
name|dbmd
operator|.
name|getDatabaseMinorVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Vertica Driver required to use Vertica Input or Output Formatters"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ver
return|;
block|}
DECL|method|checkOutputSpecs (Configuration conf)
specifier|public
specifier|static
name|void
name|checkOutputSpecs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|VerticaConfiguration
name|vtconfig
init|=
operator|new
name|VerticaConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|writerTable
init|=
name|vtconfig
operator|.
name|getOutputTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|writerTable
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Vertica output requires a table name defined by "
operator|+
name|VerticaConfiguration
operator|.
name|OUTPUT_TABLE_NAME_PROP
argument_list|)
throw|;
name|String
index|[]
name|def
init|=
name|vtconfig
operator|.
name|getOutputTableDef
argument_list|()
decl_stmt|;
name|boolean
name|dropTable
init|=
name|vtconfig
operator|.
name|getDropTable
argument_list|()
decl_stmt|;
name|String
name|schema
init|=
literal|null
decl_stmt|;
name|String
name|table
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|schemaTable
init|=
name|writerTable
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaTable
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|schema
operator|=
name|schemaTable
index|[
literal|0
index|]
expr_stmt|;
name|table
operator|=
name|schemaTable
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
name|table
operator|=
name|schemaTable
index|[
literal|0
index|]
expr_stmt|;
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Connection
name|conn
init|=
name|vtconfig
operator|.
name|getConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|DatabaseMetaData
name|dbmd
init|=
name|conn
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|dbmd
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|tableExists
init|=
name|rs
operator|.
name|next
argument_list|()
decl_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
if|if
condition|(
name|tableExists
operator|&&
name|dropTable
condition|)
block|{
if|if
condition|(
name|verticaVersion
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
operator|>=
literal|305
condition|)
block|{
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"TRUNCATE TABLE "
operator|+
name|writerTable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for version< 3.0 drop the table if it exists
comment|// if def is empty, grab the columns first to redfine the table
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
name|rs
operator|=
name|dbmd
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|defs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
name|defs
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
operator|+
literal|" "
operator|+
name|rs
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|def
operator|=
name|defs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
literal|"DROP TABLE "
operator|+
name|writerTable
operator|+
literal|" CASCADE"
argument_list|)
expr_stmt|;
name|tableExists
operator|=
literal|false
expr_stmt|;
comment|// force create
block|}
block|}
comment|// create table if it doesn't exist
if|if
condition|(
operator|!
name|tableExists
condition|)
block|{
if|if
condition|(
name|def
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Table "
operator|+
name|writerTable
operator|+
literal|" does not exist and no table definition provided"
argument_list|)
throw|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|rs
operator|=
name|dbmd
operator|.
name|getSchemas
argument_list|(
literal|null
argument_list|,
name|schema
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
name|stmt
operator|.
name|execute
argument_list|(
literal|"CREATE SCHEMA "
operator|+
name|schema
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|tabledef
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"CREATE TABLE "
argument_list|)
operator|.
name|append
argument_list|(
name|writerTable
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|column
range|:
name|def
control|)
name|tabledef
operator|.
name|append
argument_list|(
name|column
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|tabledef
operator|.
name|replace
argument_list|(
name|tabledef
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
name|tabledef
operator|.
name|length
argument_list|()
argument_list|,
literal|")"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|tabledef
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: create segmented projections
name|stmt
operator|.
name|execute
argument_list|(
literal|"select implement_temp_design('"
operator|+
name|writerTable
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|stmt
operator|!=
literal|null
condition|)
try|try
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// TODO: catch when params required but missing
comment|// TODO: better error message when count query is bad
DECL|method|getSplits (JobContext context)
specifier|public
specifier|static
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|int
name|numSplits
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"mapreduce.job.maps"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating splits up to "
operator|+
name|numSplits
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|long
name|start
init|=
literal|0
decl_stmt|;
name|long
name|end
init|=
literal|0
decl_stmt|;
name|boolean
name|limitOffset
init|=
literal|true
decl_stmt|;
comment|// This is the fancy part of mapping inputs...here's how we figure out
comment|// splits
comment|// get the params query or the params
name|VerticaConfiguration
name|config
init|=
operator|new
name|VerticaConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|inputQuery
init|=
name|config
operator|.
name|getInputQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputQuery
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Vertica input requires query defined by "
operator|+
name|VerticaConfiguration
operator|.
name|QUERY_PROP
argument_list|)
throw|;
name|String
name|paramsQuery
init|=
name|config
operator|.
name|getParamsQuery
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|params
init|=
name|config
operator|.
name|getInputParameters
argument_list|()
decl_stmt|;
comment|// TODO: limit needs order by unique key
comment|// TODO: what if there are more parameters than numsplits?
comment|// prep a count(*) wrapper query and then populate the bind params for each
name|String
name|countQuery
init|=
literal|"SELECT COUNT(*) FROM (\n"
operator|+
name|inputQuery
operator|+
literal|"\n) count"
decl_stmt|;
if|if
condition|(
name|paramsQuery
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating splits using paramsQuery :"
operator|+
name|paramsQuery
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|config
operator|.
name|getConnection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|paramsQuery
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|rsmd
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|limitOffset
operator|=
literal|false
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|segmentParams
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|rsmd
operator|.
name|getColumnCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|segmentParams
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getObject
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|splits
operator|.
name|add
argument_list|(
operator|new
name|VerticaInputSplit
argument_list|(
name|inputQuery
argument_list|,
name|segmentParams
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|stmt
operator|!=
literal|null
condition|)
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|params
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating splits using "
operator|+
name|params
operator|.
name|size
argument_list|()
operator|+
literal|" params"
argument_list|)
expr_stmt|;
name|limitOffset
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|Object
argument_list|>
name|segmentParams
range|:
name|params
control|)
block|{
comment|// if there are more numSplits than params we're going to introduce some
comment|// limit and offsets
comment|// TODO: write code to generate the start/end pairs for each group
name|splits
operator|.
name|add
argument_list|(
operator|new
name|VerticaInputSplit
argument_list|(
name|inputQuery
argument_list|,
name|segmentParams
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|limitOffset
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating splits using limit and offset"
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|config
operator|.
name|getConnection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|ResultSet
name|rs
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|countQuery
argument_list|)
decl_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|count
operator|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|stmt
operator|!=
literal|null
condition|)
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|long
name|splitSize
init|=
name|count
operator|/
name|numSplits
decl_stmt|;
name|end
operator|=
name|splitSize
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating "
operator|+
name|numSplits
operator|+
literal|" splits for "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
name|i
operator|++
control|)
block|{
name|splits
operator|.
name|add
argument_list|(
operator|new
name|VerticaInputSplit
argument_list|(
name|inputQuery
argument_list|,
literal|null
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|+=
name|splitSize
expr_stmt|;
name|end
operator|+=
name|splitSize
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"returning "
operator|+
name|splits
operator|.
name|size
argument_list|()
operator|+
literal|" final splits"
argument_list|)
expr_stmt|;
return|return
name|splits
return|;
block|}
block|}
end_class

end_unit

