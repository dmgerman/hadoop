begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vertica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VIntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VLongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Serializable record for records returned from and written to Vertica  *   */
end_comment

begin_class
DECL|class|VerticaRecord
specifier|public
class|class
name|VerticaRecord
implements|implements
name|Writable
block|{
DECL|field|results
name|ResultSet
name|results
init|=
literal|null
decl_stmt|;
DECL|field|meta
name|ResultSetMetaData
name|meta
init|=
literal|null
decl_stmt|;
DECL|field|columns
name|int
name|columns
init|=
literal|0
decl_stmt|;
DECL|field|types
name|List
argument_list|<
name|Integer
argument_list|>
name|types
init|=
literal|null
decl_stmt|;
DECL|field|values
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
DECL|field|names
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
literal|null
decl_stmt|;
DECL|field|dateString
name|boolean
name|dateString
decl_stmt|;
DECL|field|delimiter
name|String
name|delimiter
init|=
name|VerticaConfiguration
operator|.
name|DELIMITER
decl_stmt|;
DECL|field|terminator
name|String
name|terminator
init|=
name|VerticaConfiguration
operator|.
name|RECORD_TERMINATER
decl_stmt|;
DECL|field|datefmt
name|DateFormat
name|datefmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
DECL|field|timefmt
name|DateFormat
name|timefmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmmss"
argument_list|)
decl_stmt|;
DECL|field|tmstmpfmt
name|DateFormat
name|tmstmpfmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
DECL|field|sqlfmt
name|DateFormat
name|sqlfmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
DECL|method|getValues ()
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
DECL|method|getTypes ()
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getTypes
parameter_list|()
block|{
return|return
name|types
return|;
block|}
comment|/**    * Create a new VerticaRecord class out of a query result set    *     * @param results    *          ResultSet returned from running input split query    * @param dateString    *          True if dates should be marshaled as strings    * @throws SQLException    */
DECL|method|VerticaRecord (ResultSet results, boolean dateString)
name|VerticaRecord
parameter_list|(
name|ResultSet
name|results
parameter_list|,
name|boolean
name|dateString
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
name|this
operator|.
name|dateString
operator|=
name|dateString
expr_stmt|;
name|meta
operator|=
name|results
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|columns
operator|=
name|meta
operator|.
name|getColumnCount
argument_list|()
expr_stmt|;
name|names
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|types
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|columns
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
name|i
operator|++
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|meta
operator|.
name|getCatalogName
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|meta
operator|.
name|getColumnType
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|VerticaRecord ()
specifier|public
name|VerticaRecord
parameter_list|()
block|{
name|this
operator|.
name|types
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|VerticaRecord (List<String> names, List<Integer> types)
specifier|public
name|VerticaRecord
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|types
parameter_list|)
block|{
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Integer
name|type
range|:
name|types
control|)
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|columns
operator|=
name|values
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
DECL|method|VerticaRecord (List<Object> values, boolean parseTypes)
specifier|public
name|VerticaRecord
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|,
name|boolean
name|parseTypes
parameter_list|)
block|{
name|this
operator|.
name|types
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|columns
operator|=
name|values
operator|.
name|size
argument_list|()
expr_stmt|;
name|objectTypes
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test interface for junit tests that do not require a database    *     * @param types    * @param values    * @param dateString    */
DECL|method|VerticaRecord (List<String> names, List<Integer> types, List<Object> values, boolean dateString)
specifier|public
name|VerticaRecord
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|types
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|,
name|boolean
name|dateString
parameter_list|)
block|{
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|dateString
operator|=
name|dateString
expr_stmt|;
name|columns
operator|=
name|types
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|objectTypes
argument_list|()
expr_stmt|;
block|}
DECL|method|get (String name)
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|names
operator|==
literal|null
operator|||
name|names
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot set record by name if names not initialized"
argument_list|)
throw|;
name|int
name|i
init|=
name|names
operator|.
name|indexOf
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|get (int i)
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
name|values
operator|.
name|size
argument_list|()
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index "
operator|+
name|i
operator|+
literal|" greater than input size "
operator|+
name|values
operator|.
name|size
argument_list|()
argument_list|)
throw|;
return|return
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|set (String name, Object value)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|names
operator|==
literal|null
operator|||
name|names
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot set record by name if names not initialized"
argument_list|)
throw|;
name|int
name|i
init|=
name|names
operator|.
name|indexOf
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|set
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * set a value, 0 indexed    *     * @param i    */
DECL|method|set (Integer i, Object value)
specifier|public
name|void
name|set
parameter_list|(
name|Integer
name|i
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|set
argument_list|(
name|i
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * set a value, 0 indexed    *     * @param i    */
DECL|method|set (Integer i, Object value, boolean validate)
specifier|public
name|void
name|set
parameter_list|(
name|Integer
name|i
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
name|values
operator|.
name|size
argument_list|()
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index "
operator|+
name|i
operator|+
literal|" greater than input size "
operator|+
name|values
operator|.
name|size
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|validate
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|Integer
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Types
operator|.
name|BIGINT
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Long
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|Integer
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|Short
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|LongWritable
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|VLongWritable
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|VIntWritable
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to Long"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|INTEGER
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Integer
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|Short
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|VIntWritable
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to Integer"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|TINYINT
case|:
case|case
name|Types
operator|.
name|SMALLINT
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Short
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to Short"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|REAL
case|:
case|case
name|Types
operator|.
name|DECIMAL
case|:
case|case
name|Types
operator|.
name|NUMERIC
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|BigDecimal
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to BigDecimal"
argument_list|)
throw|;
case|case
name|Types
operator|.
name|DOUBLE
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Double
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|Float
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|DoubleWritable
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|FloatWritable
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to Double"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|FLOAT
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Float
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|FloatWritable
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to Float"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|BINARY
case|:
case|case
name|Types
operator|.
name|LONGVARBINARY
case|:
case|case
name|Types
operator|.
name|VARBINARY
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|byte
index|[]
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|BytesWritable
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to byte[]"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|BIT
case|:
case|case
name|Types
operator|.
name|BOOLEAN
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Boolean
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|BooleanWritable
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|ByteWritable
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to Boolean"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|CHAR
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Character
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|String
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to Character"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|LONGNVARCHAR
case|:
case|case
name|Types
operator|.
name|LONGVARCHAR
case|:
case|case
name|Types
operator|.
name|NCHAR
case|:
case|case
name|Types
operator|.
name|NVARCHAR
case|:
case|case
name|Types
operator|.
name|VARCHAR
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|String
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|Text
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to String"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|DATE
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Date
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to Date"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|TIME
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Time
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to Time"
argument_list|)
throw|;
break|break;
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Timestamp
operator|)
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
operator|)
condition|)
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Cannot cast "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to Timestamp"
argument_list|)
throw|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type value "
operator|+
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|values
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|next ()
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|results
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|columns
condition|;
name|i
operator|++
control|)
name|values
operator|.
name|set
argument_list|(
name|i
operator|-
literal|1
argument_list|,
name|results
operator|.
name|getObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|objectTypes ()
specifier|private
name|void
name|objectTypes
parameter_list|()
block|{
for|for
control|(
name|Object
name|obj
range|:
name|values
control|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Long
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|LongWritable
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|VLongWritable
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|VIntWritable
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Integer
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Short
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|BigDecimal
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|DoubleWritable
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Double
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Float
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|FloatWritable
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BINARY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|ByteWritable
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BINARY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Boolean
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|BooleanWritable
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Character
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|BytesWritable
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Text
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|DATE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Date
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|DATE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Time
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|TIME
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Timestamp
condition|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" passed to Vertica Record"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|toSQLString ()
specifier|public
name|String
name|toSQLString
parameter_list|()
block|{
return|return
name|toSQLString
argument_list|(
name|delimiter
argument_list|,
name|terminator
argument_list|)
return|;
block|}
DECL|method|toSQLString (String delimiterArg, String terminatorArg)
specifier|public
name|String
name|toSQLString
parameter_list|(
name|String
name|delimiterArg
parameter_list|,
name|String
name|terminatorArg
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|obj
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// switch statement uses fall through to handle type variations
comment|// e.g. type specified as BIGINT but passed in as Integer
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Types
operator|.
name|NULL
case|:
name|sb
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BIGINT
case|:
if|if
condition|(
name|obj
operator|instanceof
name|Long
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Types
operator|.
name|INTEGER
case|:
if|if
condition|(
name|obj
operator|instanceof
name|Integer
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Types
operator|.
name|TINYINT
case|:
case|case
name|Types
operator|.
name|SMALLINT
case|:
if|if
condition|(
name|obj
operator|instanceof
name|Short
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|LongWritable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|LongWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|VLongWritable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|VLongWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|VIntWritable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|VIntWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Types
operator|.
name|REAL
case|:
case|case
name|Types
operator|.
name|DECIMAL
case|:
case|case
name|Types
operator|.
name|NUMERIC
case|:
if|if
condition|(
name|obj
operator|instanceof
name|BigDecimal
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Types
operator|.
name|DOUBLE
case|:
if|if
condition|(
name|obj
operator|instanceof
name|Double
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|DoubleWritable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DoubleWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Types
operator|.
name|FLOAT
case|:
if|if
condition|(
name|obj
operator|instanceof
name|Float
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|FloatWritable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|FloatWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Types
operator|.
name|BINARY
case|:
case|case
name|Types
operator|.
name|LONGVARBINARY
case|:
case|case
name|Types
operator|.
name|VARBINARY
case|:
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|obj
argument_list|)
operator|.
name|asCharBuffer
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BIT
case|:
case|case
name|Types
operator|.
name|BOOLEAN
case|:
if|if
condition|(
name|obj
operator|instanceof
name|Boolean
condition|)
block|{
if|if
condition|(
operator|(
name|Boolean
operator|)
name|obj
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|BooleanWritable
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Types
operator|.
name|LONGNVARCHAR
case|:
case|case
name|Types
operator|.
name|LONGVARCHAR
case|:
case|case
name|Types
operator|.
name|NCHAR
case|:
case|case
name|Types
operator|.
name|NVARCHAR
case|:
case|case
name|Types
operator|.
name|VARCHAR
case|:
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|BytesWritable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|BytesWritable
operator|)
name|obj
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Types
operator|.
name|CHAR
case|:
if|if
condition|(
name|obj
operator|instanceof
name|Character
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|Character
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ByteWritable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|ByteWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Types
operator|.
name|DATE
case|:
case|case
name|Types
operator|.
name|TIME
case|:
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
if|if
condition|(
name|obj
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
condition|)
name|sb
operator|.
name|append
argument_list|(
name|sqlfmt
operator|.
name|format
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Date
condition|)
name|sb
operator|.
name|append
argument_list|(
name|sqlfmt
operator|.
name|format
argument_list|(
operator|(
name|Date
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Time
condition|)
name|sb
operator|.
name|append
argument_list|(
name|sqlfmt
operator|.
name|format
argument_list|(
operator|(
name|Time
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Timestamp
condition|)
name|sb
operator|.
name|append
argument_list|(
name|sqlfmt
operator|.
name|format
argument_list|(
operator|(
name|Timestamp
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type value "
operator|+
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|i
operator|<
name|columns
operator|-
literal|1
condition|)
name|sb
operator|.
name|append
argument_list|(
name|delimiterArg
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
name|terminatorArg
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|columns
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|types
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
name|i
operator|++
control|)
name|types
operator|.
name|add
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
name|i
operator|++
control|)
block|{
name|int
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Types
operator|.
name|NULL
case|:
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BIGINT
case|:
name|values
operator|.
name|add
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|INTEGER
case|:
name|values
operator|.
name|add
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|TINYINT
case|:
case|case
name|Types
operator|.
name|SMALLINT
case|:
name|values
operator|.
name|add
argument_list|(
name|in
operator|.
name|readShort
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|REAL
case|:
case|case
name|Types
operator|.
name|DECIMAL
case|:
case|case
name|Types
operator|.
name|NUMERIC
case|:
name|values
operator|.
name|add
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|DOUBLE
case|:
name|values
operator|.
name|add
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|FLOAT
case|:
name|values
operator|.
name|add
argument_list|(
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BINARY
case|:
case|case
name|Types
operator|.
name|LONGVARBINARY
case|:
case|case
name|Types
operator|.
name|VARBINARY
case|:
name|values
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|hexStringToByte
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BIT
case|:
case|case
name|Types
operator|.
name|BOOLEAN
case|:
name|values
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|CHAR
case|:
name|values
operator|.
name|add
argument_list|(
name|in
operator|.
name|readChar
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|LONGNVARCHAR
case|:
case|case
name|Types
operator|.
name|LONGVARCHAR
case|:
case|case
name|Types
operator|.
name|NCHAR
case|:
case|case
name|Types
operator|.
name|NVARCHAR
case|:
case|case
name|Types
operator|.
name|VARCHAR
case|:
name|values
operator|.
name|add
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|DATE
case|:
if|if
condition|(
name|dateString
condition|)
try|try
block|{
name|values
operator|.
name|add
argument_list|(
operator|new
name|Date
argument_list|(
name|datefmt
operator|.
name|parse
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
else|else
name|values
operator|.
name|add
argument_list|(
operator|new
name|Date
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|TIME
case|:
if|if
condition|(
name|dateString
condition|)
try|try
block|{
name|values
operator|.
name|add
argument_list|(
operator|new
name|Time
argument_list|(
name|timefmt
operator|.
name|parse
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
else|else
name|values
operator|.
name|add
argument_list|(
operator|new
name|Time
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
if|if
condition|(
name|dateString
condition|)
try|try
block|{
name|values
operator|.
name|add
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|tmstmpfmt
operator|.
name|parse
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
else|else
name|values
operator|.
name|add
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown type value "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|columns
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|obj
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
name|out
operator|.
name|writeInt
argument_list|(
name|Types
operator|.
name|NULL
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|writeInt
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|obj
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
continue|continue;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Types
operator|.
name|BIGINT
case|:
name|out
operator|.
name|writeLong
argument_list|(
operator|(
name|Long
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|INTEGER
case|:
name|out
operator|.
name|writeInt
argument_list|(
operator|(
name|Integer
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|TINYINT
case|:
case|case
name|Types
operator|.
name|SMALLINT
case|:
name|out
operator|.
name|writeShort
argument_list|(
operator|(
name|Short
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|REAL
case|:
case|case
name|Types
operator|.
name|DECIMAL
case|:
case|case
name|Types
operator|.
name|NUMERIC
case|:
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|DOUBLE
case|:
name|out
operator|.
name|writeDouble
argument_list|(
operator|(
name|Double
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|FLOAT
case|:
name|out
operator|.
name|writeFloat
argument_list|(
operator|(
name|Float
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BINARY
case|:
case|case
name|Types
operator|.
name|LONGVARBINARY
case|:
case|case
name|Types
operator|.
name|VARBINARY
case|:
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|BIT
case|:
case|case
name|Types
operator|.
name|BOOLEAN
case|:
name|out
operator|.
name|writeBoolean
argument_list|(
operator|(
name|Boolean
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|CHAR
case|:
name|out
operator|.
name|writeChar
argument_list|(
operator|(
name|Character
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|LONGNVARCHAR
case|:
case|case
name|Types
operator|.
name|LONGVARCHAR
case|:
case|case
name|Types
operator|.
name|NCHAR
case|:
case|case
name|Types
operator|.
name|NVARCHAR
case|:
case|case
name|Types
operator|.
name|VARCHAR
case|:
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
operator|(
name|String
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|DATE
case|:
if|if
condition|(
name|obj
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
condition|)
block|{
if|if
condition|(
name|dateString
condition|)
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|datefmt
operator|.
name|format
argument_list|(
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|writeLong
argument_list|(
operator|(
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|obj
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dateString
condition|)
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|datefmt
operator|.
name|format
argument_list|(
operator|(
name|Date
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|writeLong
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|obj
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Types
operator|.
name|TIME
case|:
if|if
condition|(
name|dateString
condition|)
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|timefmt
operator|.
name|format
argument_list|(
operator|(
name|Time
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|writeLong
argument_list|(
operator|(
operator|(
name|Time
operator|)
name|obj
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
if|if
condition|(
name|dateString
condition|)
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|tmstmpfmt
operator|.
name|format
argument_list|(
operator|(
name|Timestamp
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|out
operator|.
name|writeLong
argument_list|(
operator|(
operator|(
name|Timestamp
operator|)
name|obj
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown type value "
operator|+
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

