begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vertica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_comment
comment|/**  * Input formatter that returns the results of a query executed against Vertica.  * The key is a record number within the result set of each mapper The value is  * a VerticaRecord, which uses a similar interface to JDBC ResultSets for  * returning values.  *   */
end_comment

begin_class
DECL|class|VerticaInputFormat
specifier|public
class|class
name|VerticaInputFormat
extends|extends
name|InputFormat
argument_list|<
name|LongWritable
argument_list|,
name|VerticaRecord
argument_list|>
block|{
comment|/**    * Set the input query for a job    *     * @param job    * @param inputQuery    *          query to run against Vertica    */
DECL|method|setInput (Job job, String inputQuery)
specifier|public
specifier|static
name|void
name|setInput
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|inputQuery
parameter_list|)
block|{
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|VerticaInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|VerticaConfiguration
name|config
init|=
operator|new
name|VerticaConfiguration
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|setInputQuery
argument_list|(
name|inputQuery
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set a parameterized input query for a job and the query that returns the    * parameters.    *     * @param job    * @param inputQuery    *          SQL query that has parameters specified by question marks ("?")    * @param segmentParamsQuery    *          SQL query that returns parameters for the input query    */
DECL|method|setInput (Job job, String inputQuery, String segmentParamsQuery)
specifier|public
specifier|static
name|void
name|setInput
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|inputQuery
parameter_list|,
name|String
name|segmentParamsQuery
parameter_list|)
block|{
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|VerticaInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|VerticaConfiguration
name|config
init|=
operator|new
name|VerticaConfiguration
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|setInputQuery
argument_list|(
name|inputQuery
argument_list|)
expr_stmt|;
name|config
operator|.
name|setParamsQuery
argument_list|(
name|segmentParamsQuery
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the input query and any number of comma delimited literal list of    * parameters    *     * @param job    * @param inputQuery    *          SQL query that has parameters specified by question marks ("?")    * @param segmentParams    *          any numer of comma delimited strings with literal parameters to    *          substitute in the input query    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|method|setInput (Job job, String inputQuery, String... segmentParams)
specifier|public
specifier|static
name|void
name|setInput
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|inputQuery
parameter_list|,
name|String
modifier|...
name|segmentParams
parameter_list|)
throws|throws
name|IOException
block|{
comment|// transform each param set into array
name|DateFormat
name|datefmt
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|params
init|=
operator|new
name|HashSet
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{     }
decl_stmt|;
for|for
control|(
name|String
name|strParams
range|:
name|segmentParams
control|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|param
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|strParam
range|:
name|strParams
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|strParam
operator|=
name|strParam
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|strParam
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\''
operator|&&
name|strParam
operator|.
name|charAt
argument_list|(
name|strParam
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\''
condition|)
name|param
operator|.
name|add
argument_list|(
name|strParam
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|strParam
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
try|try
block|{
name|param
operator|.
name|add
argument_list|(
name|datefmt
operator|.
name|parse
argument_list|(
name|strParam
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e1
parameter_list|)
block|{
try|try
block|{
name|param
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|strParam
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error parsing argument "
operator|+
name|strParam
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|params
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
name|setInput
argument_list|(
name|job
argument_list|,
name|inputQuery
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the input query and a collection of parameter lists    *     * @param job    * @param inpuQuery    *          SQL query that has parameters specified by question marks ("?")    * @param segmentParams    *          collection of ordered lists to subtitute into the input query    * @throws IOException    */
DECL|method|setInput (Job job, String inpuQuery, Collection<List<Object>> segmentParams)
specifier|public
specifier|static
name|void
name|setInput
parameter_list|(
name|Job
name|job
parameter_list|,
name|String
name|inpuQuery
parameter_list|,
name|Collection
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|segmentParams
parameter_list|)
throws|throws
name|IOException
block|{
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|VerticaInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|VerticaConfiguration
name|config
init|=
operator|new
name|VerticaConfiguration
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|setInputQuery
argument_list|(
name|inpuQuery
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInputParams
argument_list|(
name|segmentParams
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|createRecordReader ( InputSplit split, TaskAttemptContext context)
specifier|public
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|VerticaRecord
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|new
name|VerticaRecordReader
argument_list|(
operator|(
name|VerticaInputSplit
operator|)
name|split
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|getSplits (JobContext context)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|VerticaUtil
operator|.
name|getSplits
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

