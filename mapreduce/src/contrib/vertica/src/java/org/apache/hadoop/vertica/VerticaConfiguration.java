begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vertica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A container for configuration property names for jobs with Vertica  * input/output.  *   * The job can be configured using the static methods in this class,  * {@link VerticaInputFormat}, and {@link VerticaOutputFormat}. Alternatively,  * the properties can be set in the configuration with proper values.  *   * @see VerticaConfiguration#configureVertica(Configuration, String[], String,  *      String, String)  * @see VerticaConfiguration#configureVertica(Configuration, String[], String,  *      String, String, String[], String, String, String)  *   */
end_comment

begin_class
DECL|class|VerticaConfiguration
specifier|public
class|class
name|VerticaConfiguration
block|{
comment|/** Vertica Version Constants */
DECL|field|VERSION_3_5
specifier|public
specifier|static
specifier|final
name|Integer
name|VERSION_3_5
init|=
literal|305
decl_stmt|;
comment|/** Class name for Vertica JDBC Driver */
DECL|field|VERTICA_DRIVER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|VERTICA_DRIVER_CLASS
init|=
literal|"com.vertica.Driver"
decl_stmt|;
comment|/** Host names to connect to, selected from at random */
DECL|field|HOSTNAMES_PROP
specifier|public
specifier|static
specifier|final
name|String
name|HOSTNAMES_PROP
init|=
literal|"mapred.vertica.hostnames"
decl_stmt|;
comment|/** Name of database to connect to */
DECL|field|DATABASE_PROP
specifier|public
specifier|static
specifier|final
name|String
name|DATABASE_PROP
init|=
literal|"mapred.vertica.database"
decl_stmt|;
comment|/** User name for Vertica */
DECL|field|USERNAME_PROP
specifier|public
specifier|static
specifier|final
name|String
name|USERNAME_PROP
init|=
literal|"mapred.vertica.username"
decl_stmt|;
comment|/** Password for Vertica */
DECL|field|PASSWORD_PROP
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD_PROP
init|=
literal|"mapred.vertica.password"
decl_stmt|;
comment|/** Host names to connect to, selected from at random */
DECL|field|OUTPUT_HOSTNAMES_PROP
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_HOSTNAMES_PROP
init|=
literal|"mapred.vertica.hostnames.output"
decl_stmt|;
comment|/** Name of database to connect to */
DECL|field|OUTPUT_DATABASE_PROP
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_DATABASE_PROP
init|=
literal|"mapred.vertica.database.output"
decl_stmt|;
comment|/** User name for Vertica */
DECL|field|OUTPUT_USERNAME_PROP
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_USERNAME_PROP
init|=
literal|"mapred.vertica.username.output"
decl_stmt|;
comment|/** Password for Vertica */
DECL|field|OUTPUT_PASSWORD_PROP
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_PASSWORD_PROP
init|=
literal|"mapred.vertica.password.output"
decl_stmt|;
comment|/** Query to run for input */
DECL|field|QUERY_PROP
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_PROP
init|=
literal|"mapred.vertica.input.query"
decl_stmt|;
comment|/** Query to run to retrieve parameters */
DECL|field|QUERY_PARAM_PROP
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_PARAM_PROP
init|=
literal|"mapred.vertica.input.query.paramquery"
decl_stmt|;
comment|/** Static parameters for query */
DECL|field|QUERY_PARAMS_PROP
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_PARAMS_PROP
init|=
literal|"mapred.vertica.input.query.params"
decl_stmt|;
comment|/** Optional input delimiter for streaming */
DECL|field|INPUT_DELIMITER_PROP
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_DELIMITER_PROP
init|=
literal|"mapred.vertica.input.delimiter"
decl_stmt|;
comment|/** Optional input terminator for streaming */
DECL|field|INPUT_TERMINATOR_PROP
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_TERMINATOR_PROP
init|=
literal|"mapred.vertica.input.terminator"
decl_stmt|;
comment|/** Whether to marshal dates as strings */
DECL|field|DATE_STRING
specifier|public
specifier|static
specifier|final
name|String
name|DATE_STRING
init|=
literal|"mapred.vertica.date_as_string"
decl_stmt|;
comment|/** Output table name */
DECL|field|OUTPUT_TABLE_NAME_PROP
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_TABLE_NAME_PROP
init|=
literal|"mapred.vertica.output.table.name"
decl_stmt|;
comment|/** Definition of output table types */
DECL|field|OUTPUT_TABLE_DEF_PROP
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_TABLE_DEF_PROP
init|=
literal|"mapred.vertica.output.table.def"
decl_stmt|;
comment|/** Whether to drop tables */
DECL|field|OUTPUT_TABLE_DROP
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_TABLE_DROP
init|=
literal|"mapred.vertica.output.table.drop"
decl_stmt|;
comment|/** Optional output format delimiter */
DECL|field|OUTPUT_DELIMITER_PROP
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_DELIMITER_PROP
init|=
literal|"mapred.vertica.output.delimiter"
decl_stmt|;
comment|/** Optional output format terminator */
DECL|field|OUTPUT_TERMINATOR_PROP
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_TERMINATOR_PROP
init|=
literal|"mapred.vertica.output.terminator"
decl_stmt|;
comment|/**    * Override the sleep timer for optimize to poll when new projetions have    * refreshed    */
DECL|field|OPTIMIZE_POLL_TIMER_PROP
specifier|public
specifier|static
specifier|final
name|String
name|OPTIMIZE_POLL_TIMER_PROP
init|=
literal|"mapred.vertica.optimize.poll"
decl_stmt|;
comment|/**    * Sets the Vertica database connection information in the (@link    * Configuration)    *     * @param conf    *          the configuration    * @param hostnames    *          one or more hosts in the Vertica cluster    * @param database    *          the name of the Vertica database    * @param username    *          Vertica database username    * @param password    *          Vertica database password    */
DECL|method|configureVertica (Configuration conf, String[] hostnames, String database, String username, String password)
specifier|public
specifier|static
name|void
name|configureVertica
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|hostnames
parameter_list|,
name|String
name|database
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|HOSTNAMES_PROP
argument_list|,
name|hostnames
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DATABASE_PROP
argument_list|,
name|database
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|USERNAME_PROP
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PASSWORD_PROP
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the Vertica database connection information in the (@link    * Configuration)    *     * @param conf    *          the configuration    * @param hostnames    *          one or more hosts in the source Cluster    * @param database    *          the name of the source Vertica database    * @param username    *          for the source Vertica database    * @param password    *          for he source Vertica database    * @param output_hostnames    *          one or more hosts in the output Cluster    * @param output_database    *          the name of the output VerticaDatabase    * @param output_username    *          for the target Vertica database    * @param output_password    *          for the target Vertica database    */
DECL|method|configureVertica (Configuration conf, String[] hostnames, String database, String username, String password, String[] output_hostnames, String output_database, String output_username, String output_password)
specifier|public
specifier|static
name|void
name|configureVertica
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|hostnames
parameter_list|,
name|String
name|database
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
index|[]
name|output_hostnames
parameter_list|,
name|String
name|output_database
parameter_list|,
name|String
name|output_username
parameter_list|,
name|String
name|output_password
parameter_list|)
block|{
name|configureVertica
argument_list|(
name|conf
argument_list|,
name|hostnames
argument_list|,
name|database
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|OUTPUT_HOSTNAMES_PROP
argument_list|,
name|output_hostnames
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OUTPUT_DATABASE_PROP
argument_list|,
name|output_database
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OUTPUT_USERNAME_PROP
argument_list|,
name|output_username
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OUTPUT_PASSWORD_PROP
argument_list|,
name|output_password
argument_list|)
expr_stmt|;
block|}
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// default record terminator for writing output to Vertica
DECL|field|RECORD_TERMINATER
specifier|public
specifier|static
specifier|final
name|String
name|RECORD_TERMINATER
init|=
literal|"\u0008"
decl_stmt|;
comment|// default delimiter for writing output to Vertica
DECL|field|DELIMITER
specifier|public
specifier|static
specifier|final
name|String
name|DELIMITER
init|=
literal|"\u0007"
decl_stmt|;
comment|// defulat optimize poll timeout
DECL|field|OPTIMIZE_POLL_TIMER
specifier|public
specifier|static
specifier|final
name|int
name|OPTIMIZE_POLL_TIMER
init|=
literal|1000
decl_stmt|;
DECL|method|VerticaConfiguration (Configuration conf)
name|VerticaConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Returns a connection to a random host in the Vertica cluster    *     * @param output    *          true if the connection is for writing    * @throws IOException    * @throws ClassNotFoundException    * @throws SQLException    */
DECL|method|getConnection (boolean output)
name|Connection
name|getConnection
parameter_list|(
name|boolean
name|output
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|SQLException
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|VERTICA_DRIVER_CLASS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
index|[]
name|hosts
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|HOSTNAMES_PROP
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|conf
operator|.
name|get
argument_list|(
name|USERNAME_PROP
argument_list|)
decl_stmt|;
name|String
name|pass
init|=
name|conf
operator|.
name|get
argument_list|(
name|PASSWORD_PROP
argument_list|)
decl_stmt|;
name|String
name|database
init|=
name|conf
operator|.
name|get
argument_list|(
name|DATABASE_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|output
condition|)
block|{
name|hosts
operator|=
name|conf
operator|.
name|getStrings
argument_list|(
name|OUTPUT_HOSTNAMES_PROP
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
name|user
operator|=
name|conf
operator|.
name|get
argument_list|(
name|OUTPUT_USERNAME_PROP
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|pass
operator|=
name|conf
operator|.
name|get
argument_list|(
name|OUTPUT_PASSWORD_PROP
argument_list|,
name|pass
argument_list|)
expr_stmt|;
name|database
operator|=
name|conf
operator|.
name|get
argument_list|(
name|OUTPUT_DATABASE_PROP
argument_list|,
name|database
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hosts
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Vertica requies a hostname defined by "
operator|+
name|HOSTNAMES_PROP
argument_list|)
throw|;
if|if
condition|(
name|hosts
operator|.
name|length
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Vertica requies a hostname defined by "
operator|+
name|HOSTNAMES_PROP
argument_list|)
throw|;
if|if
condition|(
name|database
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Vertica requies a database name defined by "
operator|+
name|DATABASE_PROP
argument_list|)
throw|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Vertica requires a username defined by "
operator|+
name|USERNAME_PROP
argument_list|)
throw|;
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:vertica://"
operator|+
name|hosts
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|hosts
operator|.
name|length
argument_list|)
index|]
operator|+
literal|":5433/"
operator|+
name|database
argument_list|,
name|user
argument_list|,
name|pass
argument_list|)
return|;
block|}
DECL|method|getInputQuery ()
specifier|public
name|String
name|getInputQuery
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|QUERY_PROP
argument_list|)
return|;
block|}
comment|/**    * get Run this query and give the results to mappers.    *     * @param inputQuery    */
DECL|method|setInputQuery (String inputQuery)
specifier|public
name|void
name|setInputQuery
parameter_list|(
name|String
name|inputQuery
parameter_list|)
block|{
name|inputQuery
operator|=
name|inputQuery
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputQuery
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
name|inputQuery
operator|=
name|inputQuery
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|inputQuery
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|QUERY_PROP
argument_list|,
name|inputQuery
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the query used to retrieve parameters for the input query (if set)    *     * @return Returns the query for input parameters    */
DECL|method|getParamsQuery ()
specifier|public
name|String
name|getParamsQuery
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|QUERY_PARAM_PROP
argument_list|)
return|;
block|}
comment|/**    * Query used to retrieve parameters for the input query. The result set must    * match the input query parameters preceisely.    *     * @param segment_params_query    */
DECL|method|setParamsQuery (String segment_params_query)
specifier|public
name|void
name|setParamsQuery
parameter_list|(
name|String
name|segment_params_query
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|QUERY_PARAM_PROP
argument_list|,
name|segment_params_query
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return static input parameters if set    *     * @return Collection of list of objects representing input parameters    * @throws IOException    */
DECL|method|getInputParameters ()
specifier|public
name|Collection
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|getInputParameters
parameter_list|()
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|values
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|query_params
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|QUERY_PARAMS_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|query_params
operator|!=
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|str_params
range|:
name|query_params
control|)
block|{
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|StringUtils
operator|.
name|hexStringToByte
argument_list|(
name|str_params
argument_list|)
argument_list|,
name|str_params
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|VerticaRecord
name|record
init|=
operator|new
name|VerticaRecord
argument_list|()
decl_stmt|;
name|record
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|record
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
return|;
block|}
comment|/**    * Sets a collection of lists. Each list is passed to an input split and used    * as arguments to the input query.    *     * @param segment_params    * @throws IOException    */
DECL|method|setInputParams (Collection<List<Object>> segment_params)
specifier|public
name|void
name|setInputParams
parameter_list|(
name|Collection
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|segment_params
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|segment_params
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Object
argument_list|>
name|params
range|:
name|segment_params
control|)
block|{
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|VerticaRecord
name|record
init|=
operator|new
name|VerticaRecord
argument_list|(
name|params
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|record
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|values
index|[
name|i
operator|++
index|]
operator|=
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setStrings
argument_list|(
name|QUERY_PARAMS_PROP
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
comment|/**    * For streaming return the delimiter to separate values to the mapper    *     * @return Returns delimiter used to format streaming input data    */
DECL|method|getInputDelimiter ()
specifier|public
name|String
name|getInputDelimiter
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|INPUT_DELIMITER_PROP
argument_list|,
name|DELIMITER
argument_list|)
return|;
block|}
comment|/**    * For streaming set the delimiter to separate values to the mapper    */
DECL|method|setInputDelimiter (String delimiter)
specifier|public
name|void
name|setInputDelimiter
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|INPUT_DELIMITER_PROP
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
block|}
comment|/**    * For streaming return the record terminator to separate values to the mapper    *     * @return Returns recorder terminator for input data    */
DECL|method|getInputRecordTerminator ()
specifier|public
name|String
name|getInputRecordTerminator
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|INPUT_TERMINATOR_PROP
argument_list|,
name|RECORD_TERMINATER
argument_list|)
return|;
block|}
comment|/**    * For streaming set the record terminator to separate values to the mapper    */
DECL|method|setInputRecordTerminator (String terminator)
specifier|public
name|void
name|setInputRecordTerminator
parameter_list|(
name|String
name|terminator
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|INPUT_TERMINATOR_PROP
argument_list|,
name|terminator
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the table that is the target of output    *     * @return Returns table name for output    */
DECL|method|getOutputTableName ()
specifier|public
name|String
name|getOutputTableName
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|OUTPUT_TABLE_NAME_PROP
argument_list|)
return|;
block|}
comment|/**    * Set table that is being loaded as output    *     * @param tableName    */
DECL|method|setOutputTableName (String tableName)
specifier|public
name|void
name|setOutputTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|OUTPUT_TABLE_NAME_PROP
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return definition of columns for output table    *     * @return Returns table definition for output table    */
DECL|method|getOutputTableDef ()
specifier|public
name|String
index|[]
name|getOutputTableDef
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getStrings
argument_list|(
name|OUTPUT_TABLE_DEF_PROP
argument_list|)
return|;
block|}
comment|/**    * Set the definition of a table for output if it needs to be created    *     * @param fieldNames    */
DECL|method|setOutputTableDef (String... fieldNames)
specifier|public
name|void
name|setOutputTableDef
parameter_list|(
name|String
modifier|...
name|fieldNames
parameter_list|)
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|OUTPUT_TABLE_DEF_PROP
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return whether output table is truncated before loading    *     * @return Returns true if output table should be dropped before loading    */
DECL|method|getDropTable ()
specifier|public
name|boolean
name|getDropTable
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|OUTPUT_TABLE_DROP
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Set whether to truncate the output table before loading    *     * @param drop_table    */
DECL|method|setDropTable (boolean drop_table)
specifier|public
name|void
name|setDropTable
parameter_list|(
name|boolean
name|drop_table
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|OUTPUT_TABLE_DROP
argument_list|,
name|drop_table
argument_list|)
expr_stmt|;
block|}
comment|/**    * For streaming return the delimiter used by the reducer    *     * @return Returns delimiter to use for output data    */
DECL|method|getOutputDelimiter ()
specifier|public
name|String
name|getOutputDelimiter
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|OUTPUT_DELIMITER_PROP
argument_list|,
name|DELIMITER
argument_list|)
return|;
block|}
comment|/**    * For streaming set the delimiter used by the reducer    *     * @param delimiter    */
DECL|method|setOutputDelimiter (String delimiter)
specifier|public
name|void
name|setOutputDelimiter
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|OUTPUT_DELIMITER_PROP
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
block|}
comment|/**    * For streaming return the record terminator used by the reducer    *     * @return Returns the record terminator for output data    */
DECL|method|getOutputRecordTerminator ()
specifier|public
name|String
name|getOutputRecordTerminator
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|OUTPUT_TERMINATOR_PROP
argument_list|,
name|RECORD_TERMINATER
argument_list|)
return|;
block|}
comment|/**    * For streaming set the record terminator used by the reducer    *     * @param terminator    */
DECL|method|setOutputRecordTerminator (String terminator)
specifier|public
name|void
name|setOutputRecordTerminator
parameter_list|(
name|String
name|terminator
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|OUTPUT_TERMINATOR_PROP
argument_list|,
name|terminator
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns poll timer for optimize loop    *     * @return Returns poll timer for optimize loop    */
DECL|method|getOptimizePollTimeout ()
specifier|public
name|Long
name|getOptimizePollTimeout
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|OPTIMIZE_POLL_TIMER_PROP
argument_list|,
name|OPTIMIZE_POLL_TIMER
argument_list|)
return|;
block|}
comment|/**    * Set the timour for the optimize poll loop    *     * @param timeout    */
DECL|method|setOptimizePollTimeout (Long timeout)
specifier|public
name|void
name|setOptimizePollTimeout
parameter_list|(
name|Long
name|timeout
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|OPTIMIZE_POLL_TIMER_PROP
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

