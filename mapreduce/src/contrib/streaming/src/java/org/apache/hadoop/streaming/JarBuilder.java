begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipException
import|;
end_import

begin_comment
comment|/**  * This class is the main class for generating job.jar  * for Hadoop Streaming jobs. It includes the files specified   * with the -file option and includes them in the jar. Also,  * hadoop-streaming is a user level appplication, so all the classes  * with hadoop-streaming that are needed in the job are also included  * in the job.jar.  */
end_comment

begin_class
DECL|class|JarBuilder
specifier|public
class|class
name|JarBuilder
block|{
DECL|method|JarBuilder ()
specifier|public
name|JarBuilder
parameter_list|()
block|{   }
DECL|method|setVerbose (boolean v)
specifier|public
name|void
name|setVerbose
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|v
expr_stmt|;
block|}
DECL|method|merge (List srcNames, List srcUnjar, String dstJar)
specifier|public
name|void
name|merge
parameter_list|(
name|List
name|srcNames
parameter_list|,
name|List
name|srcUnjar
parameter_list|,
name|String
name|dstJar
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|source
init|=
literal|null
decl_stmt|;
name|JarOutputStream
name|jarOut
init|=
literal|null
decl_stmt|;
name|JarFile
name|jarSource
init|=
literal|null
decl_stmt|;
name|jarOut
operator|=
operator|new
name|JarOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|dstJar
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|throwing
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|srcNames
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|iter
init|=
name|srcNames
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|source
operator|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|File
name|fsource
init|=
operator|new
name|File
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|String
name|base
init|=
name|getBasePathInJarOut
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fsource
operator|.
name|exists
argument_list|()
condition|)
block|{
name|throwing
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|fsource
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fsource
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|addDirectory
argument_list|(
name|jarOut
argument_list|,
name|base
argument_list|,
name|fsource
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFileStream
argument_list|(
name|jarOut
argument_list|,
name|base
argument_list|,
name|fsource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|srcUnjar
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|iter
init|=
name|srcUnjar
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|source
operator|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|jarSource
operator|=
operator|new
name|JarFile
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|addJarEntries
argument_list|(
name|jarOut
argument_list|,
name|jarSource
argument_list|)
expr_stmt|;
name|jarSource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
try|try
block|{
name|jarOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ZipException
name|z
parameter_list|)
block|{
if|if
condition|(
operator|!
name|throwing
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|z
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|fileExtension (String file)
specifier|protected
name|String
name|fileExtension
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|int
name|leafPos
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|leafPos
operator|==
name|file
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
return|return
literal|""
return|;
name|String
name|leafName
init|=
name|file
operator|.
name|substring
argument_list|(
name|leafPos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|dotPos
init|=
name|leafName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotPos
operator|==
operator|-
literal|1
condition|)
return|return
literal|""
return|;
name|String
name|ext
init|=
name|leafName
operator|.
name|substring
argument_list|(
name|dotPos
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|ext
return|;
block|}
comment|/** @return empty or a jar base path. Must not start with '/' */
DECL|method|getBasePathInJarOut (String sourceFile)
specifier|protected
name|String
name|getBasePathInJarOut
parameter_list|(
name|String
name|sourceFile
parameter_list|)
block|{
comment|// TaskRunner will unjar and append to classpath: .:classes/:lib/*
name|String
name|ext
init|=
name|fileExtension
argument_list|(
name|sourceFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|.
name|equals
argument_list|(
literal|"class"
argument_list|)
condition|)
block|{
return|return
literal|"classes/"
return|;
comment|// or ""
block|}
elseif|else
if|if
condition|(
name|ext
operator|.
name|equals
argument_list|(
literal|"jar"
argument_list|)
operator|||
name|ext
operator|.
name|equals
argument_list|(
literal|"zip"
argument_list|)
condition|)
block|{
return|return
literal|"lib/"
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
DECL|method|addJarEntries (JarOutputStream dst, JarFile src)
specifier|private
name|void
name|addJarEntries
parameter_list|(
name|JarOutputStream
name|dst
parameter_list|,
name|JarFile
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|Enumeration
name|entries
init|=
name|src
operator|.
name|entries
argument_list|()
decl_stmt|;
name|JarEntry
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|entry
operator|=
operator|(
name|JarEntry
operator|)
name|entries
operator|.
name|nextElement
argument_list|()
expr_stmt|;
comment|//if (entry.getName().startsWith("META-INF/")) continue;
name|InputStream
name|in
init|=
name|src
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|addNamedStream
argument_list|(
name|dst
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @param name path in jar for this jar element. Must not start with '/' */
DECL|method|addNamedStream (JarOutputStream dst, String name, InputStream in)
name|void
name|addNamedStream
parameter_list|(
name|JarOutputStream
name|dst
parameter_list|,
name|String
name|name
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"JarBuilder.addNamedStream "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|dst
operator|.
name|putNextEntry
argument_list|(
operator|new
name|JarEntry
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|bytesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|BUFF_SIZE
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|dst
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ZipException
name|ze
parameter_list|)
block|{
if|if
condition|(
name|ze
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"duplicate entry"
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ze
operator|+
literal|" Skip duplicate entry "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|ze
throw|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|dst
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dst
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addFileStream (JarOutputStream dst, String jarBaseName, File file)
name|void
name|addFileStream
parameter_list|(
name|JarOutputStream
name|dst
parameter_list|,
name|String
name|jarBaseName
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|name
init|=
name|jarBaseName
operator|+
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|addNamedStream
argument_list|(
name|dst
argument_list|,
name|name
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addDirectory (JarOutputStream dst, String jarBaseName, File dir, int depth)
name|void
name|addDirectory
parameter_list|(
name|JarOutputStream
name|dst
parameter_list|,
name|String
name|jarBaseName
parameter_list|,
name|File
name|dir
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|IOException
block|{
name|File
index|[]
name|contents
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|contents
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|f
init|=
name|contents
index|[
name|i
index|]
decl_stmt|;
name|String
name|fBaseName
init|=
operator|(
name|depth
operator|==
literal|0
operator|)
condition|?
literal|""
else|:
name|dir
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|jarBaseName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fBaseName
operator|=
name|jarBaseName
operator|+
literal|"/"
operator|+
name|fBaseName
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|addDirectory
argument_list|(
name|dst
argument_list|,
name|fBaseName
argument_list|,
name|f
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFileStream
argument_list|(
name|dst
argument_list|,
name|fBaseName
operator|+
literal|"/"
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Test program */
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
comment|// args = new String[] { "C:/Temp/merged.jar", "C:/jdk1.5.0/jre/lib/ext/dnsns.jar",  "/Temp/addtojar2.log", "C:/jdk1.5.0/jre/lib/ext/mtest.jar", "C:/Temp/base"};
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: JarFiles merged.jar [src.jar | dir | file ]+"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JarBuilder
name|jarFiles
init|=
operator|new
name|JarBuilder
argument_list|()
decl_stmt|;
name|List
name|names
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|unjar
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|f
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
name|String
name|ext
init|=
name|jarFiles
operator|.
name|fileExtension
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|boolean
name|expandAsJar
init|=
name|ext
operator|.
name|equals
argument_list|(
literal|"jar"
argument_list|)
operator|||
name|ext
operator|.
name|equals
argument_list|(
literal|"zip"
argument_list|)
decl_stmt|;
if|if
condition|(
name|expandAsJar
condition|)
block|{
name|unjar
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|jarFiles
operator|.
name|merge
argument_list|(
name|names
argument_list|,
name|unjar
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Date
name|lastMod
init|=
operator|new
name|Date
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|.
name|lastModified
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Merge done to "
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|lastMod
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ge
parameter_list|)
block|{
name|ge
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|BUFF_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BUFF_SIZE
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|BUFF_SIZE
index|]
decl_stmt|;
DECL|field|verbose
specifier|protected
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
block|}
end_class

end_unit

