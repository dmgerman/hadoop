begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_comment
comment|/**   * Shared functionality for hadoopStreaming formats.  * A custom reader can be defined to be a RecordReader with the constructor below  * and is selected with the option bin/hadoopStreaming -inputreader ...  * @see StreamXmlRecordReader   */
end_comment

begin_class
DECL|class|StreamBaseRecordReader
specifier|public
specifier|abstract
class|class
name|StreamBaseRecordReader
implements|implements
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StreamBaseRecordReader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// custom JobConf properties for this class are prefixed with this namespace
DECL|field|CONF_NS
specifier|final
specifier|static
name|String
name|CONF_NS
init|=
literal|"stream.recordreader."
decl_stmt|;
DECL|method|StreamBaseRecordReader (FSDataInputStream in, FileSplit split, Reporter reporter, JobConf job, FileSystem fs)
specifier|public
name|StreamBaseRecordReader
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|,
name|FileSplit
name|split
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|in_
operator|=
name|in
expr_stmt|;
name|split_
operator|=
name|split
expr_stmt|;
name|start_
operator|=
name|split_
operator|.
name|getStart
argument_list|()
expr_stmt|;
name|length_
operator|=
name|split_
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|end_
operator|=
name|start_
operator|+
name|length_
expr_stmt|;
name|splitName_
operator|=
name|split_
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|reporter_
operator|=
name|reporter
expr_stmt|;
name|job_
operator|=
name|job
expr_stmt|;
name|fs_
operator|=
name|fs
expr_stmt|;
name|statusMaxRecordChars_
operator|=
name|job_
operator|.
name|getInt
argument_list|(
name|CONF_NS
operator|+
literal|"statuschars"
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
comment|/// RecordReader API
comment|/** Read a record. Implementation should call numRecStats at the end    */
DECL|method|next (Text key, Text value)
specifier|public
specifier|abstract
name|boolean
name|next
parameter_list|(
name|Text
name|key
parameter_list|,
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Returns the current position in the input. */
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in_
operator|.
name|getPos
argument_list|()
return|;
block|}
comment|/** Close this to future operations.*/
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in_
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|end_
operator|==
name|start_
condition|)
block|{
return|return
literal|1.0f
return|;
block|}
else|else
block|{
return|return
operator|(
call|(
name|float
call|)
argument_list|(
name|in_
operator|.
name|getPos
argument_list|()
operator|-
name|start_
argument_list|)
operator|)
operator|/
operator|(
call|(
name|float
call|)
argument_list|(
name|end_
operator|-
name|start_
argument_list|)
operator|)
return|;
block|}
block|}
DECL|method|createKey ()
specifier|public
name|Text
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
DECL|method|createValue ()
specifier|public
name|Text
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
comment|/// StreamBaseRecordReader API
comment|/** Implementation should seek forward in_ to the first byte of the next record.    *  The initial byte offset in the stream is arbitrary.    */
DECL|method|seekNextRecordBoundary ()
specifier|public
specifier|abstract
name|void
name|seekNextRecordBoundary
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|numRecStats (byte[] record, int start, int len)
name|void
name|numRecStats
parameter_list|(
name|byte
index|[]
name|record
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|numRec_
operator|++
expr_stmt|;
if|if
condition|(
name|numRec_
operator|==
name|nextStatusRec_
condition|)
block|{
name|String
name|recordStr
init|=
operator|new
name|String
argument_list|(
name|record
argument_list|,
name|start
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|statusMaxRecordChars_
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|nextStatusRec_
operator|+=
literal|100
expr_stmt|;
comment|//*= 10;
name|String
name|status
init|=
name|getStatus
argument_list|(
name|recordStr
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|reporter_
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|lastMem
name|long
name|lastMem
init|=
literal|0
decl_stmt|;
DECL|method|getStatus (CharSequence record)
name|String
name|getStatus
parameter_list|(
name|CharSequence
name|record
parameter_list|)
block|{
name|long
name|pos
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|pos
operator|=
name|getPos
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{     }
name|String
name|recStr
decl_stmt|;
if|if
condition|(
name|record
operator|.
name|length
argument_list|()
operator|>
name|statusMaxRecordChars_
condition|)
block|{
name|recStr
operator|=
name|record
operator|.
name|subSequence
argument_list|(
literal|0
argument_list|,
name|statusMaxRecordChars_
argument_list|)
operator|+
literal|"..."
expr_stmt|;
block|}
else|else
block|{
name|recStr
operator|=
name|record
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|unqualSplit
init|=
name|split_
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|split_
operator|.
name|getStart
argument_list|()
operator|+
literal|"+"
operator|+
name|split_
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|String
name|status
init|=
literal|"HSTR "
operator|+
name|StreamUtil
operator|.
name|HOST
operator|+
literal|" "
operator|+
name|numRec_
operator|+
literal|". pos="
operator|+
name|pos
operator|+
literal|" "
operator|+
name|unqualSplit
operator|+
literal|" Processing record="
operator|+
name|recStr
decl_stmt|;
name|status
operator|+=
literal|" "
operator|+
name|splitName_
expr_stmt|;
return|return
name|status
return|;
block|}
DECL|field|in_
name|FSDataInputStream
name|in_
decl_stmt|;
DECL|field|split_
name|FileSplit
name|split_
decl_stmt|;
DECL|field|start_
name|long
name|start_
decl_stmt|;
DECL|field|end_
name|long
name|end_
decl_stmt|;
DECL|field|length_
name|long
name|length_
decl_stmt|;
DECL|field|splitName_
name|String
name|splitName_
decl_stmt|;
DECL|field|reporter_
name|Reporter
name|reporter_
decl_stmt|;
DECL|field|job_
name|JobConf
name|job_
decl_stmt|;
DECL|field|fs_
name|FileSystem
name|fs_
decl_stmt|;
DECL|field|numRec_
name|int
name|numRec_
init|=
literal|0
decl_stmt|;
DECL|field|nextStatusRec_
name|int
name|nextStatusRec_
init|=
literal|1
decl_stmt|;
DECL|field|statusMaxRecordChars_
name|int
name|statusMaxRecordChars_
decl_stmt|;
block|}
end_class

end_unit

