begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_comment
comment|/** An input format that selects a RecordReader based on a JobConf property.  *  This should be used only for non-standard record reader such as   *  StreamXmlRecordReader. For all other standard   *  record readers, the appropriate input format classes should be used.  */
end_comment

begin_class
DECL|class|StreamInputFormat
specifier|public
class|class
name|StreamInputFormat
extends|extends
name|KeyValueTextInputFormat
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getRecordReader (final InputSplit genericSplit, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|getRecordReader
parameter_list|(
specifier|final
name|InputSplit
name|genericSplit
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|c
init|=
name|job
operator|.
name|get
argument_list|(
literal|"stream.recordreader.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
operator|||
name|c
operator|.
name|indexOf
argument_list|(
literal|"LineRecordReader"
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
name|super
operator|.
name|getRecordReader
argument_list|(
name|genericSplit
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
return|;
block|}
comment|// handling non-standard record reader (likely StreamXmlRecordReader)
name|FileSplit
name|split
init|=
operator|(
name|FileSplit
operator|)
name|genericSplit
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"getRecordReader start.....split="
operator|+
name|split
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|setStatus
argument_list|(
name|split
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Open the file and seek to the start of the split
name|FileSystem
name|fs
init|=
name|split
operator|.
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|split
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Factory dispatch based on available params..
name|Class
name|readerClass
decl_stmt|;
block|{
name|readerClass
operator|=
name|StreamUtil
operator|.
name|goodClassOrNull
argument_list|(
name|job
argument_list|,
name|c
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|readerClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Class not found: "
operator|+
name|c
argument_list|)
throw|;
block|}
block|}
name|Constructor
name|ctor
decl_stmt|;
try|try
block|{
name|ctor
operator|=
name|readerClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|FSDataInputStream
operator|.
name|class
block|,
name|FileSplit
operator|.
name|class
block|,
name|Reporter
operator|.
name|class
block|,
name|JobConf
operator|.
name|class
block|,
name|FileSystem
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsm
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|nsm
argument_list|)
throw|;
block|}
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|reader
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|(
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
operator|)
name|ctor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|in
block|,
name|split
block|,
name|reporter
block|,
name|job
block|,
name|fs
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|nsm
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|nsm
argument_list|)
throw|;
block|}
return|return
name|reader
return|;
block|}
block|}
end_class

end_unit

