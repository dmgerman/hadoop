begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_class
DECL|class|StreamKeyValUtil
specifier|public
class|class
name|StreamKeyValUtil
block|{
comment|/**    * Find the first occured tab in a UTF-8 encoded string    * @param utf a byte array containing a UTF-8 encoded string    * @param start starting offset    * @param length no. of bytes    * @return position that first tab occures otherwise -1    */
DECL|method|findTab (byte [] utf, int start, int length)
specifier|public
specifier|static
name|int
name|findTab
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|utf
index|[
name|i
index|]
operator|==
operator|(
name|byte
operator|)
literal|'\t'
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Find the first occured tab in a UTF-8 encoded string    * @param utf a byte array containing a UTF-8 encoded string    * @return position that first tab occures otherwise -1    */
DECL|method|findTab (byte [] utf)
specifier|public
specifier|static
name|int
name|findTab
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|)
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|UTF8ByteArrayUtils
operator|.
name|findNthByte
argument_list|(
name|utf
argument_list|,
literal|0
argument_list|,
name|utf
operator|.
name|length
argument_list|,
operator|(
name|byte
operator|)
literal|'\t'
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**    * split a UTF-8 byte array into key and value     * assuming that the delimilator is at splitpos.     * @param utf utf-8 encoded string    * @param start starting offset    * @param length no. of bytes    * @param key contains key upon the method is returned    * @param val contains value upon the method is returned    * @param splitPos the split pos    * @param separatorLength the length of the separator between key and value    * @throws IOException    */
DECL|method|splitKeyVal (byte[] utf, int start, int length, Text key, Text val, int splitPos, int separatorLength)
specifier|public
specifier|static
name|void
name|splitKeyVal
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|Text
name|key
parameter_list|,
name|Text
name|val
parameter_list|,
name|int
name|splitPos
parameter_list|,
name|int
name|separatorLength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|splitPos
operator|<
name|start
operator|||
name|splitPos
operator|>=
operator|(
name|start
operator|+
name|length
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"splitPos must be in the range "
operator|+
literal|"["
operator|+
name|start
operator|+
literal|", "
operator|+
operator|(
name|start
operator|+
name|length
operator|)
operator|+
literal|"]: "
operator|+
name|splitPos
argument_list|)
throw|;
name|int
name|keyLen
init|=
operator|(
name|splitPos
operator|-
name|start
operator|)
decl_stmt|;
name|int
name|valLen
init|=
operator|(
name|start
operator|+
name|length
operator|)
operator|-
name|splitPos
operator|-
name|separatorLength
decl_stmt|;
name|key
operator|.
name|set
argument_list|(
name|utf
argument_list|,
name|start
argument_list|,
name|keyLen
argument_list|)
expr_stmt|;
name|val
operator|.
name|set
argument_list|(
name|utf
argument_list|,
name|splitPos
operator|+
name|separatorLength
argument_list|,
name|valLen
argument_list|)
expr_stmt|;
block|}
comment|/**    * split a UTF-8 byte array into key and value     * assuming that the delimilator is at splitpos.     * @param utf utf-8 encoded string    * @param start starting offset    * @param length no. of bytes    * @param key contains key upon the method is returned    * @param val contains value upon the method is returned    * @param splitPos the split pos    * @throws IOException    */
DECL|method|splitKeyVal (byte[] utf, int start, int length, Text key, Text val, int splitPos)
specifier|public
specifier|static
name|void
name|splitKeyVal
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|Text
name|key
parameter_list|,
name|Text
name|val
parameter_list|,
name|int
name|splitPos
parameter_list|)
throws|throws
name|IOException
block|{
name|splitKeyVal
argument_list|(
name|utf
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|key
argument_list|,
name|val
argument_list|,
name|splitPos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * split a UTF-8 byte array into key and value     * assuming that the delimilator is at splitpos.     * @param utf utf-8 encoded string    * @param key contains key upon the method is returned    * @param val contains value upon the method is returned    * @param splitPos the split pos    * @param separatorLength the length of the separator between key and value    * @throws IOException    */
DECL|method|splitKeyVal (byte[] utf, Text key, Text val, int splitPos, int separatorLength)
specifier|public
specifier|static
name|void
name|splitKeyVal
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|,
name|Text
name|key
parameter_list|,
name|Text
name|val
parameter_list|,
name|int
name|splitPos
parameter_list|,
name|int
name|separatorLength
parameter_list|)
throws|throws
name|IOException
block|{
name|splitKeyVal
argument_list|(
name|utf
argument_list|,
literal|0
argument_list|,
name|utf
operator|.
name|length
argument_list|,
name|key
argument_list|,
name|val
argument_list|,
name|splitPos
argument_list|,
name|separatorLength
argument_list|)
expr_stmt|;
block|}
comment|/**    * split a UTF-8 byte array into key and value     * assuming that the delimilator is at splitpos.     * @param utf utf-8 encoded string    * @param key contains key upon the method is returned    * @param val contains value upon the method is returned    * @param splitPos the split pos    * @throws IOException    */
DECL|method|splitKeyVal (byte[] utf, Text key, Text val, int splitPos)
specifier|public
specifier|static
name|void
name|splitKeyVal
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|,
name|Text
name|key
parameter_list|,
name|Text
name|val
parameter_list|,
name|int
name|splitPos
parameter_list|)
throws|throws
name|IOException
block|{
name|splitKeyVal
argument_list|(
name|utf
argument_list|,
literal|0
argument_list|,
name|utf
operator|.
name|length
argument_list|,
name|key
argument_list|,
name|val
argument_list|,
name|splitPos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Read a utf8 encoded line from a data input stream.     * @param lineReader LineReader to read the line from.    * @param out Text to read into    * @return number of bytes read     * @throws IOException    */
DECL|method|readLine (LineReader lineReader, Text out)
specifier|public
specifier|static
name|int
name|readLine
parameter_list|(
name|LineReader
name|lineReader
parameter_list|,
name|Text
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|lineReader
operator|.
name|readLine
argument_list|(
name|out
argument_list|)
return|;
block|}
block|}
end_class

end_unit

