begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterWithLinuxTaskController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * Test Streaming with LinuxTaskController running the jobs as a user different  * from the user running the cluster. See {@link ClusterWithLinuxTaskController}  */
end_comment

begin_class
DECL|class|TestStreamingAsDifferentUser
specifier|public
class|class
name|TestStreamingAsDifferentUser
extends|extends
name|ClusterWithLinuxTaskController
block|{
DECL|field|inputPath
specifier|private
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
literal|"input"
argument_list|)
decl_stmt|;
DECL|field|outputPath
specifier|private
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
literal|"output"
argument_list|)
decl_stmt|;
DECL|field|input
specifier|private
name|String
name|input
init|=
literal|"roses.are.red\nviolets.are.blue\nbunnies.are.pink\n"
decl_stmt|;
DECL|field|map
specifier|private
name|String
name|map
init|=
name|UtilTest
operator|.
name|makeJavaCommand
argument_list|(
name|TrApp
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"."
block|,
literal|"\\n"
block|}
argument_list|)
decl_stmt|;
DECL|field|reduce
specifier|private
name|String
name|reduce
init|=
name|UtilTest
operator|.
name|makeJavaCommand
argument_list|(
name|UniqApp
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"R"
block|}
argument_list|)
decl_stmt|;
DECL|method|testStreaming ()
specifier|public
name|void
name|testStreaming
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|startCluster
argument_list|()
expr_stmt|;
specifier|final
name|JobConf
name|myConf
init|=
name|getClusterConf
argument_list|()
decl_stmt|;
name|jobOwner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|inFs
init|=
name|inputPath
operator|.
name|getFileSystem
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|FileSystem
name|outFs
init|=
name|outputPath
operator|.
name|getFileSystem
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|outFs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inFs
operator|.
name|mkdirs
argument_list|(
name|inputPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|inFs
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|DataOutputStream
name|file
init|=
name|inFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"part-0"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-input"
block|,
name|inputPath
operator|.
name|makeQualified
argument_list|(
name|inFs
argument_list|)
operator|.
name|toString
argument_list|()
block|,
literal|"-output"
block|,
name|outputPath
operator|.
name|makeQualified
argument_list|(
name|outFs
argument_list|)
operator|.
name|toString
argument_list|()
block|,
literal|"-mapper"
block|,
name|map
block|,
literal|"-reducer"
block|,
name|reduce
block|,
literal|"-jobconf"
block|,
literal|"mapreduce.task.files.preserve.failedtasks=true"
block|,
literal|"-jobconf"
block|,
literal|"stream.tmpdir="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
block|}
decl_stmt|;
name|StreamJob
name|streamJob
init|=
operator|new
name|StreamJob
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|streamJob
operator|.
name|setConf
argument_list|(
name|myConf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job has not succeeded"
argument_list|,
name|streamJob
operator|.
name|go
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertOwnerShip
argument_list|(
name|outputPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify if the permissions of distcache dir contents are valid once the job    * is finished    */
DECL|method|testStreamingWithDistCache ()
specifier|public
name|void
name|testStreamingWithDistCache
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|shouldRun
argument_list|()
condition|)
block|{
return|return;
block|}
name|startCluster
argument_list|()
expr_stmt|;
specifier|final
name|String
index|[]
name|localDirs
init|=
name|mrCluster
operator|.
name|getTaskTrackerLocalDirs
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|JobConf
name|myConf
init|=
name|getClusterConf
argument_list|()
decl_stmt|;
comment|// create file that will go into public distributed cache
name|File
name|publicFile
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"publicFile"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fstream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|publicFile
argument_list|)
decl_stmt|;
name|fstream
operator|.
name|write
argument_list|(
literal|"public file contents"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fstream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// put the file(that should go into public dist cache) in dfs and set
comment|// read and exe permissions for others
name|FileSystem
name|dfs
init|=
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|dfs
operator|.
name|getDefaultUri
argument_list|(
name|myConf
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"/tmp"
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|publicCacheFile
init|=
name|dfs
operator|.
name|getDefaultUri
argument_list|(
name|myConf
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"/tmp/publicFile"
decl_stmt|;
name|dfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|publicFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|publicCacheFile
argument_list|)
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|setPermission
argument_list|(
operator|new
name|Path
argument_list|(
name|publicCacheFile
argument_list|)
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0755
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|taskTrackerUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|jobOwner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|inFs
init|=
name|inputPath
operator|.
name|getFileSystem
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|FileSystem
name|outFs
init|=
name|outputPath
operator|.
name|getFileSystem
argument_list|(
name|myConf
argument_list|)
decl_stmt|;
name|outFs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inFs
operator|.
name|mkdirs
argument_list|(
name|inputPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|inFs
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// create input file
name|DataOutputStream
name|file
init|=
name|inFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inputPath
argument_list|,
literal|"part-0"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Create file that will be passed using -files option.
comment|// This is private dist cache file
name|File
name|privateFile
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"test.sh"
argument_list|)
decl_stmt|;
name|privateFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-files"
block|,
name|privateFile
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|publicCacheFile
block|,
literal|"-Dmapreduce.task.files.preserve.failedtasks=true"
block|,
literal|"-Dstream.tmpdir="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
block|,
literal|"-input"
block|,
name|inputPath
operator|.
name|makeQualified
argument_list|(
name|inFs
argument_list|)
operator|.
name|toString
argument_list|()
block|,
literal|"-output"
block|,
name|outputPath
operator|.
name|makeQualified
argument_list|(
name|outFs
argument_list|)
operator|.
name|toString
argument_list|()
block|,
literal|"-mapper"
block|,
literal|"pwd"
block|,
literal|"-reducer"
block|,
name|StreamJob
operator|.
name|REDUCE_NONE
block|}
decl_stmt|;
name|StreamJob
name|streamJob
init|=
operator|new
name|StreamJob
argument_list|()
decl_stmt|;
name|streamJob
operator|.
name|setConf
argument_list|(
name|myConf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|streamJob
argument_list|,
name|args
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// validate private cache files' permissions
name|checkPermissionsOnPrivateDistCache
argument_list|(
name|localDirs
argument_list|,
name|jobOwner
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|taskTrackerUser
argument_list|,
name|taskTrackerSpecialGroup
argument_list|)
expr_stmt|;
comment|// check the file is present even after the job is over.
comment|// work directory symlink cleanup should not have removed the target
comment|// files.
name|checkPresenceOfPrivateDistCacheFiles
argument_list|(
name|localDirs
argument_list|,
name|jobOwner
operator|.
name|getShortUserName
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"test.sh"
block|}
argument_list|)
expr_stmt|;
comment|// validate private cache files' permissions
name|checkPermissionsOnPublicDistCache
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|myConf
argument_list|)
argument_list|,
name|localDirs
argument_list|,
name|taskTrackerUser
argument_list|,
name|taskTrackerPrimaryGroup
argument_list|)
expr_stmt|;
name|checkPresenceOfPublicDistCacheFiles
argument_list|(
name|localDirs
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"publicFile"
block|}
argument_list|)
expr_stmt|;
name|assertOwnerShip
argument_list|(
name|outputPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

