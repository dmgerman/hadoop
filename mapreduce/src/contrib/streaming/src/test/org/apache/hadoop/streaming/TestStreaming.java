begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * This class tests hadoopStreaming in MapReduce local mode.  */
end_comment

begin_class
DECL|class|TestStreaming
specifier|public
class|class
name|TestStreaming
block|{
comment|// "map" command: grep -E (red|green|blue)
comment|// reduce command: uniq
DECL|field|TEST_DIR
specifier|protected
name|File
name|TEST_DIR
decl_stmt|;
DECL|field|INPUT_FILE
specifier|protected
name|File
name|INPUT_FILE
decl_stmt|;
DECL|field|OUTPUT_DIR
specifier|protected
name|File
name|OUTPUT_DIR
decl_stmt|;
DECL|field|inputFile
specifier|protected
name|String
name|inputFile
decl_stmt|;
DECL|field|outDir
specifier|protected
name|String
name|outDir
decl_stmt|;
DECL|field|input
specifier|protected
name|String
name|input
init|=
literal|"roses.are.red\nviolets.are.blue\nbunnies.are.pink\n"
decl_stmt|;
comment|// map behaves like "/usr/bin/tr . \\n"; (split words into lines)
DECL|field|map
specifier|protected
name|String
name|map
init|=
name|UtilTest
operator|.
name|makeJavaCommand
argument_list|(
name|TrApp
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"."
block|,
literal|"\\n"
block|}
argument_list|)
decl_stmt|;
comment|// reduce behave like /usr/bin/uniq. But also prepend lines with R.
comment|// command-line combiner does not have any effect any more.
DECL|field|reduce
specifier|protected
name|String
name|reduce
init|=
name|UtilTest
operator|.
name|makeJavaCommand
argument_list|(
name|UniqApp
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"R"
block|}
argument_list|)
decl_stmt|;
DECL|field|outputExpect
specifier|protected
name|String
name|outputExpect
init|=
literal|"Rare\t\nRblue\t\nRbunnies\t\nRpink\t\nRred\t\nRroses\t\nRviolets\t\n"
decl_stmt|;
DECL|field|args
specifier|protected
name|ArrayList
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|job
specifier|protected
name|StreamJob
name|job
decl_stmt|;
DECL|method|TestStreaming ()
specifier|public
name|TestStreaming
parameter_list|()
throws|throws
name|IOException
block|{
name|UtilTest
name|utilTest
init|=
operator|new
name|UtilTest
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|utilTest
operator|.
name|checkUserDir
argument_list|()
expr_stmt|;
name|utilTest
operator|.
name|redirectIfAntJunit
argument_list|()
expr_stmt|;
name|TEST_DIR
operator|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|OUTPUT_DIR
operator|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"out"
argument_list|)
expr_stmt|;
name|INPUT_FILE
operator|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"input.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|UtilTest
operator|.
name|recursiveDelete
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Creating "
operator|+
name|TEST_DIR
argument_list|,
name|TEST_DIR
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|UtilTest
operator|.
name|recursiveDelete
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputData ()
specifier|protected
name|String
name|getInputData
parameter_list|()
block|{
return|return
name|input
return|;
block|}
DECL|method|createInput ()
specifier|protected
name|void
name|createInput
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|INPUT_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|getInputData
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setInputOutput ()
specifier|protected
name|void
name|setInputOutput
parameter_list|()
block|{
name|inputFile
operator|=
name|INPUT_FILE
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|outDir
operator|=
name|OUTPUT_DIR
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
DECL|method|genArgs ()
specifier|protected
name|String
index|[]
name|genArgs
parameter_list|()
block|{
name|setInputOutput
argument_list|()
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-input"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-output"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|outDir
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-mapper"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-reducer"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|reduce
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-jobconf"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"mapreduce.task.files.preserve.failedtasks=true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-jobconf"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"stream.tmpdir="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|str
index|[]
init|=
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|args
operator|.
name|toArray
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
DECL|method|getConf ()
specifier|protected
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
return|;
block|}
DECL|method|getFileSystem ()
specifier|protected
name|FileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getExpectedOutput ()
specifier|protected
name|String
name|getExpectedOutput
parameter_list|()
block|{
return|return
name|outputExpect
return|;
block|}
DECL|method|checkOutput ()
specifier|protected
name|void
name|checkOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|outPath
init|=
operator|new
name|Path
argument_list|(
name|OUTPUT_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"part-00000"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|getFileSystem
argument_list|()
decl_stmt|;
name|String
name|output
init|=
name|StreamUtil
operator|.
name|slurpHadoop
argument_list|(
name|outPath
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"outEx1="
operator|+
name|getExpectedOutput
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  out1="
operator|+
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getExpectedOutput
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs a streaming job with the given arguments    * @return the streaming job return status    * @throws IOException    */
DECL|method|runStreamJob ()
specifier|protected
name|int
name|runStreamJob
parameter_list|()
throws|throws
name|IOException
block|{
name|createInput
argument_list|()
expr_stmt|;
name|boolean
name|mayExit
init|=
literal|false
decl_stmt|;
comment|// During tests, the default Configuration will use a local mapred
comment|// So don't specify -config or -cluster
name|job
operator|=
operator|new
name|StreamJob
argument_list|(
name|genArgs
argument_list|()
argument_list|,
name|mayExit
argument_list|)
expr_stmt|;
return|return
name|job
operator|.
name|go
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testCommandLine ()
specifier|public
name|void
name|testCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|ret
init|=
name|runStreamJob
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

