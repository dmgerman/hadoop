begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/** A minimal Java implementation of /usr/bin/uniq     Used to test the usage of external applications without adding     platform-specific dependencies.     Uniques lines and prepends a header on the line.  */
end_comment

begin_class
DECL|class|UniqApp
specifier|public
class|class
name|UniqApp
block|{
DECL|method|UniqApp (String header)
specifier|public
name|UniqApp
parameter_list|(
name|String
name|header
parameter_list|)
block|{
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
block|}
DECL|method|go ()
specifier|public
name|void
name|go
parameter_list|()
throws|throws
name|IOException
block|{
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|String
name|prevLine
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|equals
argument_list|(
name|prevLine
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|header
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
name|prevLine
operator|=
name|line
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|h
init|=
operator|(
name|args
operator|.
name|length
operator|<
literal|1
operator|)
condition|?
literal|""
else|:
name|args
index|[
literal|0
index|]
decl_stmt|;
name|UniqApp
name|app
init|=
operator|new
name|UniqApp
argument_list|(
name|h
argument_list|)
decl_stmt|;
name|app
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
DECL|field|header
name|String
name|header
decl_stmt|;
block|}
end_class

end_unit

