begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.typedbytes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|typedbytes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ArrayWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MapWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VIntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|VLongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|RecRecord0
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|RecRecord1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestIO
specifier|public
class|class
name|TestIO
block|{
DECL|field|tmpfile
specifier|private
name|File
name|tmpfile
decl_stmt|;
DECL|field|tmpdir
specifier|private
name|File
name|tmpdir
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|tmpdir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tmpdir
operator|.
name|exists
argument_list|()
operator|||
name|this
operator|.
name|tmpdir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
name|this
operator|.
name|tmpfile
operator|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|tmpdir
argument_list|,
literal|"typedbytes.bin"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create directory "
operator|+
name|tmpdir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|tmpfile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIO ()
specifier|public
name|void
name|testIO
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|vector
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|vector
operator|.
name|add
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|vector
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|vector
operator|.
name|add
argument_list|(
literal|12345
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"another test"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|123456789L
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"vector"
argument_list|,
name|vector
argument_list|)
expr_stmt|;
name|Buffer
name|buffer
init|=
operator|new
name|Buffer
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|setCapacity
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[]
block|{
name|buffer
block|,
operator|(
name|byte
operator|)
literal|123
block|,
literal|true
block|,
literal|12345
block|,
literal|123456789L
block|,
operator|(
name|float
operator|)
literal|1.2
block|,
literal|1.234
block|,
literal|"random string"
block|,
name|vector
block|,
name|list
block|,
name|map
block|}
decl_stmt|;
name|FileOutputStream
name|ostream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dostream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|ostream
argument_list|)
decl_stmt|;
name|TypedBytesOutput
name|out
init|=
operator|new
name|TypedBytesOutput
argument_list|(
name|dostream
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|objects
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
name|dostream
operator|.
name|close
argument_list|()
expr_stmt|;
name|ostream
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileInputStream
name|istream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|DataInputStream
name|distream
init|=
operator|new
name|DataInputStream
argument_list|(
name|istream
argument_list|)
decl_stmt|;
name|TypedBytesInput
name|in
init|=
operator|new
name|TypedBytesInput
argument_list|(
name|distream
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|objects
control|)
block|{
name|assertEquals
argument_list|(
name|obj
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|distream
operator|.
name|close
argument_list|()
expr_stmt|;
name|istream
operator|.
name|close
argument_list|()
expr_stmt|;
name|istream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|tmpfile
argument_list|)
expr_stmt|;
name|distream
operator|=
operator|new
name|DataInputStream
argument_list|(
name|istream
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|TypedBytesInput
argument_list|(
name|distream
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|objects
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|in
operator|.
name|readRaw
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|obj
argument_list|,
operator|(
operator|new
name|TypedBytesInput
argument_list|(
name|dis
argument_list|)
operator|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|TypedBytesOutput
name|tbout
init|=
operator|new
name|TypedBytesOutput
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
argument_list|)
decl_stmt|;
name|tbout
operator|.
name|writeRaw
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|bais
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|dis
operator|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|obj
argument_list|,
operator|(
operator|new
name|TypedBytesInput
argument_list|(
name|dis
argument_list|)
operator|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|distream
operator|.
name|close
argument_list|()
expr_stmt|;
name|istream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomTypesIO ()
specifier|public
name|void
name|testCustomTypesIO
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rawBytes
init|=
operator|new
name|byte
index|[]
block|{
literal|100
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|3
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|FileOutputStream
name|ostream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dostream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|ostream
argument_list|)
decl_stmt|;
name|TypedBytesOutput
name|out
init|=
operator|new
name|TypedBytesOutput
argument_list|(
name|dostream
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeRaw
argument_list|(
name|rawBytes
argument_list|)
expr_stmt|;
name|dostream
operator|.
name|close
argument_list|()
expr_stmt|;
name|ostream
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileInputStream
name|istream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|DataInputStream
name|distream
init|=
operator|new
name|DataInputStream
argument_list|(
name|istream
argument_list|)
decl_stmt|;
name|TypedBytesInput
name|in
init|=
operator|new
name|TypedBytesInput
argument_list|(
name|distream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|rawBytes
argument_list|,
name|in
operator|.
name|readRaw
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|distream
operator|.
name|close
argument_list|()
expr_stmt|;
name|istream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecordIO ()
specifier|public
name|void
name|testRecordIO
parameter_list|()
throws|throws
name|IOException
block|{
name|RecRecord1
name|r1
init|=
operator|new
name|RecRecord1
argument_list|()
decl_stmt|;
name|r1
operator|.
name|setBoolVal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setByteVal
argument_list|(
operator|(
name|byte
operator|)
literal|0x66
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setFloatVal
argument_list|(
literal|3.145F
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setDoubleVal
argument_list|(
literal|1.5234
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setIntVal
argument_list|(
operator|-
literal|4567
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setLongVal
argument_list|(
operator|-
literal|2367L
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setStringVal
argument_list|(
literal|"random text"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setBufferVal
argument_list|(
operator|new
name|Buffer
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setVectorVal
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setMapVal
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|RecRecord0
name|r0
init|=
operator|new
name|RecRecord0
argument_list|()
decl_stmt|;
name|r0
operator|.
name|setStringVal
argument_list|(
literal|"other random text"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setRecordVal
argument_list|(
name|r0
argument_list|)
expr_stmt|;
name|FileOutputStream
name|ostream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dostream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|ostream
argument_list|)
decl_stmt|;
name|TypedBytesRecordOutput
name|out
init|=
name|TypedBytesRecordOutput
operator|.
name|get
argument_list|(
name|dostream
argument_list|)
decl_stmt|;
name|r1
operator|.
name|serialize
argument_list|(
name|out
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|dostream
operator|.
name|close
argument_list|()
expr_stmt|;
name|ostream
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileInputStream
name|istream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|DataInputStream
name|distream
init|=
operator|new
name|DataInputStream
argument_list|(
name|istream
argument_list|)
decl_stmt|;
name|TypedBytesRecordInput
name|in
init|=
name|TypedBytesRecordInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
decl_stmt|;
name|RecRecord1
name|r2
init|=
operator|new
name|RecRecord1
argument_list|()
decl_stmt|;
name|r2
operator|.
name|deserialize
argument_list|(
name|in
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|distream
operator|.
name|close
argument_list|()
expr_stmt|;
name|istream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWritableIO ()
specifier|public
name|void
name|testWritableIO
parameter_list|()
throws|throws
name|IOException
block|{
name|Writable
index|[]
name|vectorValues
init|=
operator|new
name|Writable
index|[]
block|{
operator|new
name|Text
argument_list|(
literal|"test1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"test2"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"test3"
argument_list|)
block|}
decl_stmt|;
name|ArrayWritable
name|vector
init|=
operator|new
name|ArrayWritable
argument_list|(
name|Text
operator|.
name|class
argument_list|,
name|vectorValues
argument_list|)
decl_stmt|;
name|MapWritable
name|map
init|=
operator|new
name|MapWritable
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"one"
argument_list|)
argument_list|,
operator|new
name|VIntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"two"
argument_list|)
argument_list|,
operator|new
name|VLongWritable
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Writable
index|[]
name|writables
init|=
operator|new
name|Writable
index|[]
block|{
operator|new
name|BytesWritable
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|123
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|,
operator|new
name|VIntWritable
argument_list|(
literal|12345
argument_list|)
block|,
operator|new
name|VLongWritable
argument_list|(
literal|123456789L
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
operator|(
name|float
operator|)
literal|1.2
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
literal|1.234
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"random string"
argument_list|)
block|}
decl_stmt|;
name|TypedBytesWritable
name|tbw
init|=
operator|new
name|TypedBytesWritable
argument_list|()
decl_stmt|;
name|tbw
operator|.
name|setValue
argument_list|(
literal|"typed bytes text"
argument_list|)
expr_stmt|;
name|RecRecord1
name|r1
init|=
operator|new
name|RecRecord1
argument_list|()
decl_stmt|;
name|r1
operator|.
name|setBoolVal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setByteVal
argument_list|(
operator|(
name|byte
operator|)
literal|0x66
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setFloatVal
argument_list|(
literal|3.145F
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setDoubleVal
argument_list|(
literal|1.5234
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setIntVal
argument_list|(
operator|-
literal|4567
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setLongVal
argument_list|(
operator|-
literal|2367L
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setStringVal
argument_list|(
literal|"random text"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setBufferVal
argument_list|(
operator|new
name|Buffer
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setVectorVal
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setMapVal
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|RecRecord0
name|r0
init|=
operator|new
name|RecRecord0
argument_list|()
decl_stmt|;
name|r0
operator|.
name|setStringVal
argument_list|(
literal|"other random text"
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setRecordVal
argument_list|(
name|r0
argument_list|)
expr_stmt|;
name|FileOutputStream
name|ostream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dostream
init|=
operator|new
name|DataOutputStream
argument_list|(
name|ostream
argument_list|)
decl_stmt|;
name|TypedBytesWritableOutput
name|out
init|=
operator|new
name|TypedBytesWritableOutput
argument_list|(
name|dostream
argument_list|)
decl_stmt|;
for|for
control|(
name|Writable
name|w
range|:
name|writables
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|tbw
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|vector
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|dostream
operator|.
name|close
argument_list|()
expr_stmt|;
name|ostream
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileInputStream
name|istream
init|=
operator|new
name|FileInputStream
argument_list|(
name|tmpfile
argument_list|)
decl_stmt|;
name|DataInputStream
name|distream
init|=
operator|new
name|DataInputStream
argument_list|(
name|istream
argument_list|)
decl_stmt|;
name|TypedBytesWritableInput
name|in
init|=
operator|new
name|TypedBytesWritableInput
argument_list|(
name|distream
argument_list|)
decl_stmt|;
for|for
control|(
name|Writable
name|w
range|:
name|writables
control|)
block|{
name|assertEquals
argument_list|(
name|w
argument_list|,
name|in
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|tbw
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|in
operator|.
name|read
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ArrayWritable
operator|.
name|class
argument_list|,
name|in
operator|.
name|readType
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayWritable
name|aw
init|=
name|in
operator|.
name|readArray
argument_list|()
decl_stmt|;
name|Writable
index|[]
name|writables1
init|=
name|vector
operator|.
name|get
argument_list|()
decl_stmt|,
name|writables2
init|=
name|aw
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|writables1
operator|.
name|length
argument_list|,
name|writables2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writables1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|writables1
index|[
name|i
index|]
operator|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
operator|(
name|TypedBytesWritable
operator|)
name|writables2
index|[
name|i
index|]
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MapWritable
operator|.
name|class
argument_list|,
name|in
operator|.
name|readType
argument_list|()
argument_list|)
expr_stmt|;
name|MapWritable
name|mw
init|=
name|in
operator|.
name|readMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|,
name|mw
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|LIST
argument_list|,
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
operator|.
name|readType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|getBoolVal
argument_list|()
argument_list|,
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|getByteVal
argument_list|()
argument_list|,
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|getIntVal
argument_list|()
argument_list|,
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|getLongVal
argument_list|()
argument_list|,
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|getFloatVal
argument_list|()
argument_list|,
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|getDoubleVal
argument_list|()
argument_list|,
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
operator|.
name|getStringVal
argument_list|()
argument_list|,
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|prevObj
init|=
literal|null
decl_stmt|,
name|obj
init|=
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|prevObj
operator|=
name|obj
expr_stmt|;
name|obj
operator|=
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|distream
argument_list|)
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|List
name|recList
init|=
operator|(
name|List
operator|)
name|prevObj
decl_stmt|;
name|assertEquals
argument_list|(
name|r0
operator|.
name|getStringVal
argument_list|()
argument_list|,
name|recList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|distream
operator|.
name|close
argument_list|()
expr_stmt|;
name|istream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

