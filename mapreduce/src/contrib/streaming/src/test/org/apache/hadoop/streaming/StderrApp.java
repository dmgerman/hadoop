begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Output an arbitrary number of stderr lines before or after  * consuming the keys/values from stdin.  */
end_comment

begin_class
DECL|class|StderrApp
specifier|public
class|class
name|StderrApp
block|{
comment|/**    * Print preWriteLines to stderr, pausing sleep ms between each    * output, then consume stdin and echo it to stdout, then write    * postWriteLines to stderr.    */
DECL|method|go (int preWriteLines, int sleep, int postWriteLines)
specifier|public
specifier|static
name|void
name|go
parameter_list|(
name|int
name|preWriteLines
parameter_list|,
name|int
name|sleep
parameter_list|,
name|int
name|postWriteLines
parameter_list|)
throws|throws
name|IOException
block|{
name|go
argument_list|(
name|preWriteLines
argument_list|,
name|sleep
argument_list|,
name|postWriteLines
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|go (int preWriteLines, int sleep, int postWriteLines, boolean status)
specifier|public
specifier|static
name|void
name|go
parameter_list|(
name|int
name|preWriteLines
parameter_list|,
name|int
name|sleep
parameter_list|,
name|int
name|postWriteLines
parameter_list|,
name|boolean
name|status
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
if|if
condition|(
name|status
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"reporter:status:starting echo"
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|preWriteLines
operator|>
literal|0
condition|)
block|{
operator|--
name|preWriteLines
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"some stderr output before reading input, "
operator|+
name|preWriteLines
operator|+
literal|" lines remaining, sleeping "
operator|+
name|sleep
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|postWriteLines
operator|>
literal|0
condition|)
block|{
operator|--
name|postWriteLines
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"some stderr output after reading input, lines remaining "
operator|+
name|postWriteLines
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: StderrApp PREWRITE SLEEP POSTWRITE [STATUS]"
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|preWriteLines
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|sleep
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|postWriteLines
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|boolean
name|status
init|=
name|args
operator|.
name|length
operator|>
literal|3
condition|?
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|args
index|[
literal|3
index|]
argument_list|)
else|:
literal|false
decl_stmt|;
name|go
argument_list|(
name|preWriteLines
argument_list|,
name|sleep
argument_list|,
name|postWriteLines
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

