begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|AutoInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestAutoInputFormat
specifier|public
class|class
name|TestAutoInputFormat
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|LINES_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|LINES_COUNT
init|=
literal|3
decl_stmt|;
DECL|field|RECORDS_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|RECORDS_COUNT
init|=
literal|3
decl_stmt|;
DECL|field|SPLITS_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|SPLITS_COUNT
init|=
literal|2
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"deprecation"
block|}
argument_list|)
annotation|@
name|Test
DECL|method|testFormat ()
specifier|public
name|void
name|testFormat
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
operator|+
literal|"/mapred"
argument_list|)
decl_stmt|;
name|Path
name|txtFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"auto.txt"
argument_list|)
decl_stmt|;
name|Path
name|seqFile
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"auto.seq"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|Writer
name|txtWriter
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|txtFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LINES_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|txtWriter
operator|.
name|write
argument_list|(
literal|""
operator|+
operator|(
literal|10
operator|*
name|i
operator|)
argument_list|)
expr_stmt|;
name|txtWriter
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|txtWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|SequenceFile
operator|.
name|Writer
name|seqWriter
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|seqFile
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RECORDS_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|IntWritable
name|key
init|=
operator|new
name|IntWritable
argument_list|(
literal|11
operator|*
name|i
argument_list|)
decl_stmt|;
name|LongWritable
name|value
init|=
operator|new
name|LongWritable
argument_list|(
literal|12
operator|*
name|i
argument_list|)
decl_stmt|;
name|seqWriter
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|seqWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|AutoInputFormat
name|format
init|=
operator|new
name|AutoInputFormat
argument_list|()
decl_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|format
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|SPLITS_COUNT
argument_list|)
decl_stmt|;
for|for
control|(
name|InputSplit
name|split
range|:
name|splits
control|)
block|{
name|RecordReader
name|reader
init|=
name|format
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|reader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|reader
operator|.
name|createValue
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|LongWritable
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Wrong value class."
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid value"
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|value
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|%
literal|10
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Wrong key class."
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|key
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong value class."
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid key."
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|key
operator|)
operator|.
name|get
argument_list|()
operator|%
literal|11
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid value."
argument_list|,
operator|(
operator|(
name|LongWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
operator|%
literal|12
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

