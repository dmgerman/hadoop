begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A simple Java app that will consume all input from stdin, echoing  * it to stdout, and then optionally throw an exception (which should  * cause a non-zero exit status for the process).  */
end_comment

begin_class
DECL|class|FailApp
specifier|public
class|class
name|FailApp
block|{
DECL|method|FailApp ()
specifier|public
name|FailApp
parameter_list|()
block|{   }
DECL|method|go (boolean fail)
specifier|public
name|void
name|go
parameter_list|(
name|boolean
name|fail
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
comment|// Consume all input (to make sure streaming will still count this
comment|// task as failed even if all input was consumed).
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fail
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Intentionally failing task"
argument_list|)
throw|;
block|}
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|fail
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|1
operator|&&
literal|"false"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|fail
operator|=
literal|false
expr_stmt|;
block|}
name|FailApp
name|app
init|=
operator|new
name|FailApp
argument_list|()
decl_stmt|;
name|app
operator|.
name|go
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

