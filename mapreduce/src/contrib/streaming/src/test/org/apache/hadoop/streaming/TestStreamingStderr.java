begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test that streaming consumes stderr from the streaming process  * (before, during, and after the main processing of mapred input),  * and that stderr messages count as task progress.  */
end_comment

begin_class
DECL|class|TestStreamingStderr
specifier|public
class|class
name|TestStreamingStderr
block|{
DECL|method|TestStreamingStderr ()
specifier|public
name|TestStreamingStderr
parameter_list|()
throws|throws
name|IOException
block|{
name|UtilTest
name|utilTest
init|=
operator|new
name|UtilTest
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|utilTest
operator|.
name|checkUserDir
argument_list|()
expr_stmt|;
name|utilTest
operator|.
name|redirectIfAntJunit
argument_list|()
expr_stmt|;
block|}
DECL|method|genArgs (File input, File output, int preLines, int duringLines, int postLines)
specifier|protected
name|String
index|[]
name|genArgs
parameter_list|(
name|File
name|input
parameter_list|,
name|File
name|output
parameter_list|,
name|int
name|preLines
parameter_list|,
name|int
name|duringLines
parameter_list|,
name|int
name|postLines
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"-input"
block|,
name|input
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-output"
block|,
name|output
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-mapper"
block|,
name|UtilTest
operator|.
name|makeJavaCommand
argument_list|(
name|StderrApp
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
name|Integer
operator|.
name|toString
argument_list|(
name|preLines
argument_list|)
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|duringLines
argument_list|)
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|postLines
argument_list|)
block|}
argument_list|)
block|,
literal|"-reducer"
block|,
name|StreamJob
operator|.
name|REDUCE_NONE
block|,
literal|"-jobconf"
block|,
literal|"mapreduce.task.files.preserve.failedtasks=true"
block|,
literal|"-jobconf"
block|,
literal|"mapreduce.task.timeout=5000"
block|,
literal|"-jobconf"
block|,
literal|"stream.tmpdir="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
block|}
return|;
block|}
DECL|method|setupInput (String base, boolean hasInput)
specifier|protected
name|File
name|setupInput
parameter_list|(
name|String
name|base
parameter_list|,
name|boolean
name|hasInput
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|input
init|=
operator|new
name|File
argument_list|(
name|base
operator|+
literal|"-input.txt"
argument_list|)
decl_stmt|;
name|UtilTest
operator|.
name|recursiveDelete
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|FileOutputStream
name|in
init|=
operator|new
name|FileOutputStream
argument_list|(
name|input
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasInput
condition|)
block|{
name|in
operator|.
name|write
argument_list|(
literal|"hello\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|input
return|;
block|}
DECL|method|setupOutput (String base)
specifier|protected
name|File
name|setupOutput
parameter_list|(
name|String
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|output
init|=
operator|new
name|File
argument_list|(
name|base
operator|+
literal|"-out"
argument_list|)
decl_stmt|;
name|UtilTest
operator|.
name|recursiveDelete
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
DECL|method|runStreamJob (String baseName, boolean hasInput, int preLines, int duringLines, int postLines)
specifier|public
name|void
name|runStreamJob
parameter_list|(
name|String
name|baseName
parameter_list|,
name|boolean
name|hasInput
parameter_list|,
name|int
name|preLines
parameter_list|,
name|int
name|duringLines
parameter_list|,
name|int
name|postLines
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|input
init|=
name|setupInput
argument_list|(
name|baseName
argument_list|,
name|hasInput
argument_list|)
decl_stmt|;
name|File
name|output
init|=
name|setupOutput
argument_list|(
name|baseName
argument_list|)
decl_stmt|;
name|boolean
name|mayExit
init|=
literal|false
decl_stmt|;
name|int
name|returnStatus
init|=
literal|0
decl_stmt|;
name|StreamJob
name|job
init|=
operator|new
name|StreamJob
argument_list|(
name|genArgs
argument_list|(
name|input
argument_list|,
name|output
argument_list|,
name|preLines
argument_list|,
name|duringLines
argument_list|,
name|postLines
argument_list|)
argument_list|,
name|mayExit
argument_list|)
decl_stmt|;
name|returnStatus
operator|=
name|job
operator|.
name|go
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"StreamJob success"
argument_list|,
literal|0
argument_list|,
name|returnStatus
argument_list|)
expr_stmt|;
block|}
comment|// This test will fail by blocking forever if the stderr isn't
comment|// consumed by Hadoop for tasks that don't have any input.
annotation|@
name|Test
DECL|method|testStderrNoInput ()
specifier|public
name|void
name|testStderrNoInput
parameter_list|()
throws|throws
name|Exception
block|{
name|runStreamJob
argument_list|(
literal|"stderr-pre"
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Streaming should continue to read stderr even after all input has
comment|// been consumed.
annotation|@
name|Test
DECL|method|testStderrAfterOutput ()
specifier|public
name|void
name|testStderrAfterOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|runStreamJob
argument_list|(
literal|"stderr-post"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
comment|// This test should produce a task timeout if stderr lines aren't
comment|// counted as progress. This won't actually work until
comment|// LocalJobRunner supports timeouts.
annotation|@
name|Test
DECL|method|testStderrCountsAsProgress ()
specifier|public
name|void
name|testStderrCountsAsProgress
parameter_list|()
throws|throws
name|Exception
block|{
name|runStreamJob
argument_list|(
literal|"stderr-progress"
argument_list|,
literal|true
argument_list|,
literal|10
argument_list|,
literal|1000
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

