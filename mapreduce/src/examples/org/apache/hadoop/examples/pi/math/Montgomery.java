begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi.math
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
package|;
end_package

begin_comment
comment|/** Montgomery method.  *   * References:  *   * [1] Richard Crandall and Carl Pomerance.  Prime Numbers: A Computational   *     Perspective.  Springer-Verlag, 2001.   *   * [2] Peter Montgomery.  Modular multiplication without trial division.  *     Math. Comp., 44:519-521, 1985.  */
end_comment

begin_class
DECL|class|Montgomery
class|class
name|Montgomery
block|{
DECL|field|product
specifier|protected
specifier|final
name|Product
name|product
init|=
operator|new
name|Product
argument_list|()
decl_stmt|;
DECL|field|N
specifier|protected
name|long
name|N
decl_stmt|;
DECL|field|N_I
specifier|protected
name|long
name|N_I
decl_stmt|;
comment|// N'
DECL|field|R
specifier|protected
name|long
name|R
decl_stmt|;
DECL|field|R_1
specifier|protected
name|long
name|R_1
decl_stmt|;
comment|// R - 1
DECL|field|s
specifier|protected
name|int
name|s
decl_stmt|;
comment|/** Set the modular and initialize this object. */
DECL|method|set (long n)
name|Montgomery
name|set
parameter_list|(
name|long
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|%
literal|2
operator|!=
literal|1
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"n % 2 != 1, n="
operator|+
name|n
argument_list|)
throw|;
name|N
operator|=
name|n
expr_stmt|;
name|R
operator|=
name|Long
operator|.
name|highestOneBit
argument_list|(
name|n
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|N_I
operator|=
name|R
operator|-
name|Modular
operator|.
name|modInverse
argument_list|(
name|N
argument_list|,
name|R
argument_list|)
expr_stmt|;
name|R_1
operator|=
name|R
operator|-
literal|1
expr_stmt|;
name|s
operator|=
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|R
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Compute 2^y mod N for N odd. */
DECL|method|mod (final long y)
name|long
name|mod
parameter_list|(
specifier|final
name|long
name|y
parameter_list|)
block|{
name|long
name|p
init|=
name|R
operator|-
name|N
decl_stmt|;
name|long
name|x
init|=
name|p
operator|<<
literal|1
decl_stmt|;
if|if
condition|(
name|x
operator|>=
name|N
condition|)
name|x
operator|-=
name|N
expr_stmt|;
for|for
control|(
name|long
name|mask
init|=
name|Long
operator|.
name|highestOneBit
argument_list|(
name|y
argument_list|)
init|;
name|mask
operator|>
literal|0
condition|;
name|mask
operator|>>>=
literal|1
control|)
block|{
name|p
operator|=
name|product
operator|.
name|m
argument_list|(
name|p
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|mask
operator|&
name|y
operator|)
operator|!=
literal|0
condition|)
name|p
operator|=
name|product
operator|.
name|m
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
return|return
name|product
operator|.
name|m
argument_list|(
name|p
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|class|Product
class|class
name|Product
block|{
DECL|field|x
specifier|private
specifier|final
name|LongLong
name|x
init|=
operator|new
name|LongLong
argument_list|()
decl_stmt|;
DECL|field|xN_I
specifier|private
specifier|final
name|LongLong
name|xN_I
init|=
operator|new
name|LongLong
argument_list|()
decl_stmt|;
DECL|field|aN
specifier|private
specifier|final
name|LongLong
name|aN
init|=
operator|new
name|LongLong
argument_list|()
decl_stmt|;
DECL|method|m (final long c, final long d)
name|long
name|m
parameter_list|(
specifier|final
name|long
name|c
parameter_list|,
specifier|final
name|long
name|d
parameter_list|)
block|{
name|LongLong
operator|.
name|multiplication
argument_list|(
name|x
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
expr_stmt|;
comment|// a = (x * N')&(R - 1) = ((x& R_1) * N')& R_1
specifier|final
name|long
name|a
init|=
name|LongLong
operator|.
name|multiplication
argument_list|(
name|xN_I
argument_list|,
name|x
operator|.
name|and
argument_list|(
name|R_1
argument_list|)
argument_list|,
name|N_I
argument_list|)
operator|.
name|and
argument_list|(
name|R_1
argument_list|)
decl_stmt|;
name|LongLong
operator|.
name|multiplication
argument_list|(
name|aN
argument_list|,
name|a
argument_list|,
name|N
argument_list|)
expr_stmt|;
specifier|final
name|long
name|z
init|=
name|aN
operator|.
name|plusEqual
argument_list|(
name|x
argument_list|)
operator|.
name|shiftRight
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|z
operator|<
name|N
condition|?
name|z
else|:
name|z
operator|-
name|N
return|;
block|}
block|}
block|}
end_class

end_unit

