begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi.math
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|Combinable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|Util
import|;
end_import

begin_comment
comment|/** Represent the summation \sum \frac{2^e \mod n}{n}. */
end_comment

begin_class
DECL|class|Summation
specifier|public
class|class
name|Summation
implements|implements
name|Container
argument_list|<
name|Summation
argument_list|>
implements|,
name|Combinable
argument_list|<
name|Summation
argument_list|>
block|{
comment|/** Variable n in the summation. */
DECL|field|N
specifier|public
specifier|final
name|ArithmeticProgression
name|N
decl_stmt|;
comment|/** Variable e in the summation. */
DECL|field|E
specifier|public
specifier|final
name|ArithmeticProgression
name|E
decl_stmt|;
DECL|field|value
specifier|private
name|Double
name|value
init|=
literal|null
decl_stmt|;
comment|/** Constructor */
DECL|method|Summation (ArithmeticProgression N, ArithmeticProgression E)
specifier|public
name|Summation
parameter_list|(
name|ArithmeticProgression
name|N
parameter_list|,
name|ArithmeticProgression
name|E
parameter_list|)
block|{
if|if
condition|(
name|N
operator|.
name|getSteps
argument_list|()
operator|!=
name|E
operator|.
name|getSteps
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"N.getSteps() != E.getSteps(),"
operator|+
literal|"\n  N.getSteps()="
operator|+
name|N
operator|.
name|getSteps
argument_list|()
operator|+
literal|", N="
operator|+
name|N
operator|+
literal|"\n  E.getSteps()="
operator|+
name|E
operator|.
name|getSteps
argument_list|()
operator|+
literal|", E="
operator|+
name|E
argument_list|)
throw|;
block|}
name|this
operator|.
name|N
operator|=
name|N
expr_stmt|;
name|this
operator|.
name|E
operator|=
name|E
expr_stmt|;
block|}
comment|/** Constructor */
DECL|method|Summation (long valueN, long deltaN, long valueE, long deltaE, long limitE)
name|Summation
parameter_list|(
name|long
name|valueN
parameter_list|,
name|long
name|deltaN
parameter_list|,
name|long
name|valueE
parameter_list|,
name|long
name|deltaE
parameter_list|,
name|long
name|limitE
parameter_list|)
block|{
name|this
argument_list|(
name|valueN
argument_list|,
name|deltaN
argument_list|,
name|valueN
operator|-
name|deltaN
operator|*
operator|(
operator|(
name|valueE
operator|-
name|limitE
operator|)
operator|/
name|deltaE
operator|)
argument_list|,
name|valueE
argument_list|,
name|deltaE
argument_list|,
name|limitE
argument_list|)
expr_stmt|;
block|}
comment|/** Constructor */
DECL|method|Summation (long valueN, long deltaN, long limitN, long valueE, long deltaE, long limitE)
name|Summation
parameter_list|(
name|long
name|valueN
parameter_list|,
name|long
name|deltaN
parameter_list|,
name|long
name|limitN
parameter_list|,
name|long
name|valueE
parameter_list|,
name|long
name|deltaE
parameter_list|,
name|long
name|limitE
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ArithmeticProgression
argument_list|(
literal|'n'
argument_list|,
name|valueN
argument_list|,
name|deltaN
argument_list|,
name|limitN
argument_list|)
argument_list|,
operator|new
name|ArithmeticProgression
argument_list|(
literal|'e'
argument_list|,
name|valueE
argument_list|,
name|deltaE
argument_list|,
name|limitE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getElement ()
specifier|public
name|Summation
name|getElement
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/** Return the number of steps of this summation */
DECL|method|getSteps ()
name|long
name|getSteps
parameter_list|()
block|{
return|return
name|E
operator|.
name|getSteps
argument_list|()
return|;
block|}
comment|/** Return the value of this summation */
DECL|method|getValue ()
specifier|public
name|Double
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/** Set the value of this summation */
DECL|method|setValue (double v)
specifier|public
name|void
name|setValue
parameter_list|(
name|double
name|v
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|v
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|N
operator|+
literal|"; "
operator|+
name|E
operator|+
operator|(
name|value
operator|==
literal|null
condition|?
literal|"]"
else|:
literal|"]value="
operator|+
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|value
argument_list|)
operator|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|Summation
condition|)
block|{
specifier|final
name|Summation
name|that
init|=
operator|(
name|Summation
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|N
operator|.
name|equals
argument_list|(
name|that
operator|.
name|N
argument_list|)
operator|&&
name|this
operator|.
name|E
operator|.
name|equals
argument_list|(
name|that
operator|.
name|E
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|obj
operator|==
literal|null
condition|?
literal|"obj == null"
else|:
literal|"obj.getClass()="
operator|+
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|/** Not supported */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** Covert a String to a Summation. */
DECL|method|valueOf (final String s)
specifier|public
specifier|static
name|Summation
name|valueOf
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
name|int
name|j
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"; "
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"i="
operator|+
name|i
operator|+
literal|", j="
operator|+
name|j
operator|+
literal|"< 0, s="
operator|+
name|s
argument_list|)
throw|;
specifier|final
name|ArithmeticProgression
name|N
init|=
name|ArithmeticProgression
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|=
name|j
operator|+
literal|2
expr_stmt|;
name|j
operator|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"]"
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"i="
operator|+
name|i
operator|+
literal|", j="
operator|+
name|j
operator|+
literal|"< 0, s="
operator|+
name|s
argument_list|)
throw|;
specifier|final
name|ArithmeticProgression
name|E
init|=
name|ArithmeticProgression
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Summation
name|sigma
init|=
operator|new
name|Summation
argument_list|(
name|N
argument_list|,
name|E
argument_list|)
decl_stmt|;
name|i
operator|=
name|j
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|i
condition|)
block|{
specifier|final
name|String
name|value
init|=
name|Util
operator|.
name|parseStringVariable
argument_list|(
literal|"value"
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|sigma
operator|.
name|setValue
argument_list|(
name|value
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|?
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
argument_list|)
else|:
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sigma
return|;
block|}
comment|/** Compute the value of the summation. */
DECL|method|compute ()
specifier|public
name|double
name|compute
parameter_list|()
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|value
operator|=
name|N
operator|.
name|limit
operator|<=
name|MAX_MODULAR
condition|?
name|compute_modular
argument_list|()
else|:
name|compute_montgomery
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
DECL|field|MAX_MODULAR
specifier|private
specifier|static
specifier|final
name|long
name|MAX_MODULAR
init|=
literal|1L
operator|<<
literal|32
decl_stmt|;
comment|/** Compute the value using {@link Modular#mod(long, long)}. */
DECL|method|compute_modular ()
name|double
name|compute_modular
parameter_list|()
block|{
name|long
name|e
init|=
name|E
operator|.
name|value
decl_stmt|;
name|long
name|n
init|=
name|N
operator|.
name|value
decl_stmt|;
name|double
name|s
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|e
operator|>
name|E
operator|.
name|limit
condition|;
name|e
operator|+=
name|E
operator|.
name|delta
control|)
block|{
name|s
operator|=
name|Modular
operator|.
name|addMod
argument_list|(
name|s
argument_list|,
name|Modular
operator|.
name|mod
argument_list|(
name|e
argument_list|,
name|n
argument_list|)
operator|/
operator|(
name|double
operator|)
name|n
argument_list|)
expr_stmt|;
name|n
operator|+=
name|N
operator|.
name|delta
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|field|montgomery
specifier|final
name|Montgomery
name|montgomery
init|=
operator|new
name|Montgomery
argument_list|()
decl_stmt|;
comment|/** Compute the value using {@link Montgomery#mod(long)}. */
DECL|method|compute_montgomery ()
name|double
name|compute_montgomery
parameter_list|()
block|{
name|long
name|e
init|=
name|E
operator|.
name|value
decl_stmt|;
name|long
name|n
init|=
name|N
operator|.
name|value
decl_stmt|;
name|double
name|s
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|e
operator|>
name|E
operator|.
name|limit
condition|;
name|e
operator|+=
name|E
operator|.
name|delta
control|)
block|{
name|s
operator|=
name|Modular
operator|.
name|addMod
argument_list|(
name|s
argument_list|,
name|montgomery
operator|.
name|set
argument_list|(
name|n
argument_list|)
operator|.
name|mod
argument_list|(
name|e
argument_list|)
operator|/
operator|(
name|double
operator|)
name|n
argument_list|)
expr_stmt|;
name|n
operator|+=
name|N
operator|.
name|delta
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|compareTo (Summation that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Summation
name|that
parameter_list|)
block|{
specifier|final
name|int
name|de
init|=
name|this
operator|.
name|E
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|E
argument_list|)
decl_stmt|;
if|if
condition|(
name|de
operator|!=
literal|0
condition|)
return|return
name|de
return|;
return|return
name|this
operator|.
name|N
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|N
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|combine (Summation that)
specifier|public
name|Summation
name|combine
parameter_list|(
name|Summation
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|N
operator|.
name|delta
operator|!=
name|that
operator|.
name|N
operator|.
name|delta
operator|||
name|this
operator|.
name|E
operator|.
name|delta
operator|!=
name|that
operator|.
name|E
operator|.
name|delta
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"this.N.delta != that.N.delta || this.E.delta != that.E.delta"
operator|+
literal|",\n  this="
operator|+
name|this
operator|+
literal|",\n  that="
operator|+
name|that
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|E
operator|.
name|limit
operator|==
name|that
operator|.
name|E
operator|.
name|value
operator|&&
name|this
operator|.
name|N
operator|.
name|limit
operator|==
name|that
operator|.
name|N
operator|.
name|value
condition|)
block|{
specifier|final
name|double
name|v
init|=
name|Modular
operator|.
name|addMod
argument_list|(
name|this
operator|.
name|value
argument_list|,
name|that
operator|.
name|value
argument_list|)
decl_stmt|;
specifier|final
name|Summation
name|s
init|=
operator|new
name|Summation
argument_list|(
operator|new
name|ArithmeticProgression
argument_list|(
name|N
operator|.
name|symbol
argument_list|,
name|N
operator|.
name|value
argument_list|,
name|N
operator|.
name|delta
argument_list|,
name|that
operator|.
name|N
operator|.
name|limit
argument_list|)
argument_list|,
operator|new
name|ArithmeticProgression
argument_list|(
name|E
operator|.
name|symbol
argument_list|,
name|E
operator|.
name|value
argument_list|,
name|E
operator|.
name|delta
argument_list|,
name|that
operator|.
name|E
operator|.
name|limit
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Find the remaining terms. */
DECL|method|remainingTerms (List<T> sorted)
specifier|public
parameter_list|<
name|T
extends|extends
name|Container
argument_list|<
name|Summation
argument_list|>
parameter_list|>
name|List
argument_list|<
name|Summation
argument_list|>
name|remainingTerms
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|sorted
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Summation
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Summation
argument_list|>
argument_list|()
decl_stmt|;
name|Summation
name|remaining
init|=
name|this
decl_stmt|;
if|if
condition|(
name|sorted
operator|!=
literal|null
condition|)
for|for
control|(
name|Container
argument_list|<
name|Summation
argument_list|>
name|c
range|:
name|sorted
control|)
block|{
specifier|final
name|Summation
name|sigma
init|=
name|c
operator|.
name|getElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|remaining
operator|.
name|contains
argument_list|(
name|sigma
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"!remaining.contains(s),"
operator|+
literal|"\n  remaining = "
operator|+
name|remaining
operator|+
literal|"\n  s         = "
operator|+
name|sigma
operator|+
literal|"\n  this      = "
operator|+
name|this
operator|+
literal|"\n  sorted    = "
operator|+
name|sorted
argument_list|)
throw|;
specifier|final
name|Summation
name|s
init|=
operator|new
name|Summation
argument_list|(
name|sigma
operator|.
name|N
operator|.
name|limit
argument_list|,
name|N
operator|.
name|delta
argument_list|,
name|remaining
operator|.
name|N
operator|.
name|limit
argument_list|,
name|sigma
operator|.
name|E
operator|.
name|limit
argument_list|,
name|E
operator|.
name|delta
argument_list|,
name|remaining
operator|.
name|E
operator|.
name|limit
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getSteps
argument_list|()
operator|>
literal|0
condition|)
name|results
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|remaining
operator|=
operator|new
name|Summation
argument_list|(
name|remaining
operator|.
name|N
operator|.
name|value
argument_list|,
name|N
operator|.
name|delta
argument_list|,
name|sigma
operator|.
name|N
operator|.
name|value
argument_list|,
name|remaining
operator|.
name|E
operator|.
name|value
argument_list|,
name|E
operator|.
name|delta
argument_list|,
name|sigma
operator|.
name|E
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remaining
operator|.
name|getSteps
argument_list|()
operator|>
literal|0
condition|)
name|results
operator|.
name|add
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/** Does this contains that? */
DECL|method|contains (Summation that)
specifier|public
name|boolean
name|contains
parameter_list|(
name|Summation
name|that
parameter_list|)
block|{
return|return
name|this
operator|.
name|N
operator|.
name|contains
argument_list|(
name|that
operator|.
name|N
argument_list|)
operator|&&
name|this
operator|.
name|E
operator|.
name|contains
argument_list|(
name|that
operator|.
name|E
argument_list|)
return|;
block|}
comment|/** Partition the summation. */
DECL|method|partition (final int nParts)
specifier|public
name|Summation
index|[]
name|partition
parameter_list|(
specifier|final
name|int
name|nParts
parameter_list|)
block|{
specifier|final
name|Summation
index|[]
name|parts
init|=
operator|new
name|Summation
index|[
name|nParts
index|]
decl_stmt|;
specifier|final
name|long
name|steps
init|=
operator|(
name|E
operator|.
name|limit
operator|-
name|E
operator|.
name|value
operator|)
operator|/
name|E
operator|.
name|delta
operator|+
literal|1
decl_stmt|;
name|long
name|prevN
init|=
name|N
operator|.
name|value
decl_stmt|;
name|long
name|prevE
init|=
name|E
operator|.
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|k
init|=
operator|(
name|i
operator|*
name|steps
operator|)
operator|/
name|parts
operator|.
name|length
decl_stmt|;
specifier|final
name|long
name|currN
init|=
name|N
operator|.
name|skip
argument_list|(
name|k
argument_list|)
decl_stmt|;
specifier|final
name|long
name|currE
init|=
name|E
operator|.
name|skip
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|parts
index|[
name|i
operator|-
literal|1
index|]
operator|=
operator|new
name|Summation
argument_list|(
operator|new
name|ArithmeticProgression
argument_list|(
name|N
operator|.
name|symbol
argument_list|,
name|prevN
argument_list|,
name|N
operator|.
name|delta
argument_list|,
name|currN
argument_list|)
argument_list|,
operator|new
name|ArithmeticProgression
argument_list|(
name|E
operator|.
name|symbol
argument_list|,
name|prevE
argument_list|,
name|E
operator|.
name|delta
argument_list|,
name|currE
argument_list|)
argument_list|)
expr_stmt|;
name|prevN
operator|=
name|currN
expr_stmt|;
name|prevE
operator|=
name|currE
expr_stmt|;
block|}
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
operator|=
operator|new
name|Summation
argument_list|(
operator|new
name|ArithmeticProgression
argument_list|(
name|N
operator|.
name|symbol
argument_list|,
name|prevN
argument_list|,
name|N
operator|.
name|delta
argument_list|,
name|N
operator|.
name|limit
argument_list|)
argument_list|,
operator|new
name|ArithmeticProgression
argument_list|(
name|E
operator|.
name|symbol
argument_list|,
name|prevE
argument_list|,
name|E
operator|.
name|delta
argument_list|,
name|E
operator|.
name|limit
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|parts
return|;
block|}
block|}
end_class

end_unit

