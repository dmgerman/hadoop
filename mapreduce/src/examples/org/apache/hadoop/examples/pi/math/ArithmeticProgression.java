begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.examples.pi.math
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|math
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|examples
operator|.
name|pi
operator|.
name|Util
import|;
end_import

begin_comment
comment|/** An arithmetic progression */
end_comment

begin_class
DECL|class|ArithmeticProgression
specifier|public
class|class
name|ArithmeticProgression
implements|implements
name|Comparable
argument_list|<
name|ArithmeticProgression
argument_list|>
block|{
comment|/** A symbol */
DECL|field|symbol
specifier|public
specifier|final
name|char
name|symbol
decl_stmt|;
comment|/** Starting value */
DECL|field|value
specifier|public
specifier|final
name|long
name|value
decl_stmt|;
comment|/** Difference between terms */
DECL|field|delta
specifier|public
specifier|final
name|long
name|delta
decl_stmt|;
comment|/** Ending value */
DECL|field|limit
specifier|public
specifier|final
name|long
name|limit
decl_stmt|;
comment|/** Constructor */
DECL|method|ArithmeticProgression (char symbol, long value, long delta, long limit)
specifier|public
name|ArithmeticProgression
parameter_list|(
name|char
name|symbol
parameter_list|,
name|long
name|value
parameter_list|,
name|long
name|delta
parameter_list|,
name|long
name|limit
parameter_list|)
block|{
if|if
condition|(
name|delta
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"delta == 0"
argument_list|)
throw|;
name|this
operator|.
name|symbol
operator|=
name|symbol
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|delta
operator|=
name|delta
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|ArithmeticProgression
condition|)
block|{
specifier|final
name|ArithmeticProgression
name|that
init|=
operator|(
name|ArithmeticProgression
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|symbol
operator|!=
name|that
operator|.
name|symbol
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"this.symbol != that.symbol, this="
operator|+
name|this
operator|+
literal|", that="
operator|+
name|that
argument_list|)
throw|;
return|return
name|this
operator|.
name|value
operator|==
name|that
operator|.
name|value
operator|&&
name|this
operator|.
name|delta
operator|==
name|that
operator|.
name|delta
operator|&&
name|this
operator|.
name|limit
operator|==
name|that
operator|.
name|limit
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|obj
operator|==
literal|null
condition|?
literal|"obj == null"
else|:
literal|"obj.getClass()="
operator|+
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|/** Not supported */
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|compareTo (ArithmeticProgression that)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ArithmeticProgression
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|symbol
operator|!=
name|that
operator|.
name|symbol
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"this.symbol != that.symbol, this="
operator|+
name|this
operator|+
literal|", that="
operator|+
name|that
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|delta
operator|!=
name|that
operator|.
name|delta
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"this.delta != that.delta, this="
operator|+
name|this
operator|+
literal|", that="
operator|+
name|that
argument_list|)
throw|;
specifier|final
name|long
name|d
init|=
name|this
operator|.
name|limit
operator|-
name|that
operator|.
name|limit
decl_stmt|;
return|return
name|d
operator|>
literal|0
condition|?
literal|1
else|:
name|d
operator|==
literal|0
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
comment|/** Does this contain that? */
DECL|method|contains (ArithmeticProgression that)
name|boolean
name|contains
parameter_list|(
name|ArithmeticProgression
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|symbol
operator|!=
name|that
operator|.
name|symbol
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"this.symbol != that.symbol, this="
operator|+
name|this
operator|+
literal|", that="
operator|+
name|that
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|delta
operator|==
name|that
operator|.
name|delta
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|value
operator|==
name|that
operator|.
name|value
condition|)
return|return
name|this
operator|.
name|getSteps
argument_list|()
operator|>=
name|that
operator|.
name|getSteps
argument_list|()
return|;
elseif|else
if|if
condition|(
name|this
operator|.
name|delta
operator|<
literal|0
condition|)
return|return
name|this
operator|.
name|value
operator|>
name|that
operator|.
name|value
operator|&&
name|this
operator|.
name|limit
operator|<=
name|that
operator|.
name|limit
return|;
elseif|else
if|if
condition|(
name|this
operator|.
name|delta
operator|>
literal|0
condition|)
return|return
name|this
operator|.
name|value
operator|<
name|that
operator|.
name|value
operator|&&
name|this
operator|.
name|limit
operator|>=
name|that
operator|.
name|limit
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Skip some steps */
DECL|method|skip (long steps)
name|long
name|skip
parameter_list|(
name|long
name|steps
parameter_list|)
block|{
if|if
condition|(
name|steps
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"steps< 0, steps="
operator|+
name|steps
argument_list|)
throw|;
return|return
name|value
operator|+
name|steps
operator|*
name|delta
return|;
block|}
comment|/** Get the number of steps */
DECL|method|getSteps ()
specifier|public
name|long
name|getSteps
parameter_list|()
block|{
return|return
operator|(
name|limit
operator|-
name|value
operator|)
operator|/
name|delta
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|symbol
operator|+
literal|":value="
operator|+
name|value
operator|+
literal|",delta="
operator|+
name|delta
operator|+
literal|",limit="
operator|+
name|limit
return|;
block|}
comment|/** Convert a String to an ArithmeticProgression. */
DECL|method|valueOf (final String s)
specifier|static
name|ArithmeticProgression
name|valueOf
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
name|int
name|i
init|=
literal|2
decl_stmt|;
name|int
name|j
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|",delta="
argument_list|)
decl_stmt|;
specifier|final
name|long
name|value
init|=
name|Util
operator|.
name|parseLongVariable
argument_list|(
literal|"value"
argument_list|,
name|s
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|=
name|j
operator|+
literal|1
expr_stmt|;
name|j
operator|=
name|s
operator|.
name|indexOf
argument_list|(
literal|",limit="
argument_list|)
expr_stmt|;
specifier|final
name|long
name|delta
init|=
name|Util
operator|.
name|parseLongVariable
argument_list|(
literal|"delta"
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|=
name|j
operator|+
literal|1
expr_stmt|;
specifier|final
name|long
name|limit
init|=
name|Util
operator|.
name|parseLongVariable
argument_list|(
literal|"limit"
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ArithmeticProgression
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|value
argument_list|,
name|delta
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
end_class

end_unit

