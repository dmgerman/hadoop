begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.security.token
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_comment
comment|/**  * SecretManager for job token. It can be used to cache generated job tokens.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|JobTokenSecretManager
specifier|public
class|class
name|JobTokenSecretManager
extends|extends
name|SecretManager
argument_list|<
name|JobTokenIdentifier
argument_list|>
block|{
DECL|field|masterKey
specifier|private
specifier|final
name|SecretKey
name|masterKey
decl_stmt|;
DECL|field|currentJobTokens
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SecretKey
argument_list|>
name|currentJobTokens
decl_stmt|;
comment|/**    * Convert the byte[] to a secret key    * @param key the byte[] to create the secret key from    * @return the secret key    */
DECL|method|createSecretKey (byte[] key)
specifier|public
specifier|static
name|SecretKey
name|createSecretKey
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|SecretManager
operator|.
name|createSecretKey
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Compute the HMAC hash of the message using the key    * @param msg the message to hash    * @param key the key to use    * @return the computed hash    */
DECL|method|computeHash (byte[] msg, SecretKey key)
specifier|public
specifier|static
name|byte
index|[]
name|computeHash
parameter_list|(
name|byte
index|[]
name|msg
parameter_list|,
name|SecretKey
name|key
parameter_list|)
block|{
return|return
name|createPassword
argument_list|(
name|msg
argument_list|,
name|key
argument_list|)
return|;
block|}
comment|/**    * Default constructor    */
DECL|method|JobTokenSecretManager ()
specifier|public
name|JobTokenSecretManager
parameter_list|()
block|{
name|this
operator|.
name|masterKey
operator|=
name|generateSecret
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentJobTokens
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|SecretKey
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a new password/secret for the given job token identifier.    * @param identifier the job token identifier    * @return token password/secret    */
annotation|@
name|Override
DECL|method|createPassword (JobTokenIdentifier identifier)
specifier|public
name|byte
index|[]
name|createPassword
parameter_list|(
name|JobTokenIdentifier
name|identifier
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|masterKey
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Add the job token of a job to cache    * @param jobId the job that owns the token    * @param token the job token    */
DECL|method|addTokenForJob (String jobId, Token<JobTokenIdentifier> token)
specifier|public
name|void
name|addTokenForJob
parameter_list|(
name|String
name|jobId
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
name|SecretKey
name|tokenSecret
init|=
name|createSecretKey
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|currentJobTokens
init|)
block|{
name|currentJobTokens
operator|.
name|put
argument_list|(
name|jobId
argument_list|,
name|tokenSecret
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove the cached job token of a job from cache    * @param jobId the job whose token is to be removed    */
DECL|method|removeTokenForJob (String jobId)
specifier|public
name|void
name|removeTokenForJob
parameter_list|(
name|String
name|jobId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|currentJobTokens
init|)
block|{
name|currentJobTokens
operator|.
name|remove
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Look up the token password/secret for the given jobId.    * @param jobId the jobId to look up    * @return token password/secret as SecretKey    * @throws InvalidToken    */
DECL|method|retrieveTokenSecret (String jobId)
specifier|public
name|SecretKey
name|retrieveTokenSecret
parameter_list|(
name|String
name|jobId
parameter_list|)
throws|throws
name|InvalidToken
block|{
name|SecretKey
name|tokenSecret
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|currentJobTokens
init|)
block|{
name|tokenSecret
operator|=
name|currentJobTokens
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenSecret
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidToken
argument_list|(
literal|"Can't find job token for job "
operator|+
name|jobId
operator|+
literal|" !!"
argument_list|)
throw|;
block|}
return|return
name|tokenSecret
return|;
block|}
comment|/**    * Look up the token password/secret for the given job token identifier.    * @param identifier the job token identifier to look up    * @return token password/secret as byte[]    * @throws InvalidToken    */
annotation|@
name|Override
DECL|method|retrievePassword (JobTokenIdentifier identifier)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|JobTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|InvalidToken
block|{
return|return
name|retrieveTokenSecret
argument_list|(
name|identifier
operator|.
name|getJobId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getEncoded
argument_list|()
return|;
block|}
comment|/**    * Create an empty job token identifier    * @return a newly created empty job token identifier    */
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|JobTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|JobTokenIdentifier
argument_list|()
return|;
block|}
block|}
end_class

end_unit

