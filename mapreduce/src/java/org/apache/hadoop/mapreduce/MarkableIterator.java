begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  *<code>MarkableIterator</code> is a wrapper iterator class that   * implements the {@link MarkableIteratorInterface}.  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MarkableIterator
specifier|public
class|class
name|MarkableIterator
parameter_list|<
name|VALUE
parameter_list|>
implements|implements
name|MarkableIteratorInterface
argument_list|<
name|VALUE
argument_list|>
block|{
DECL|field|baseIterator
name|MarkableIteratorInterface
argument_list|<
name|VALUE
argument_list|>
name|baseIterator
decl_stmt|;
comment|/**    * Create a new iterator layered on the input iterator    * @param itr underlying iterator that implements MarkableIteratorInterface    */
DECL|method|MarkableIterator (Iterator<VALUE> itr)
specifier|public
name|MarkableIterator
parameter_list|(
name|Iterator
argument_list|<
name|VALUE
argument_list|>
name|itr
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|itr
operator|instanceof
name|MarkableIteratorInterface
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Input Iterator not markable"
argument_list|)
throw|;
block|}
name|baseIterator
operator|=
operator|(
name|MarkableIteratorInterface
argument_list|<
name|VALUE
argument_list|>
operator|)
name|itr
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mark ()
specifier|public
name|void
name|mark
parameter_list|()
throws|throws
name|IOException
block|{
name|baseIterator
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|baseIterator
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clearMark ()
specifier|public
name|void
name|clearMark
parameter_list|()
throws|throws
name|IOException
block|{
name|baseIterator
operator|.
name|clearMark
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|baseIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|VALUE
name|next
parameter_list|()
block|{
return|return
name|baseIterator
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Remove Not Implemented"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

