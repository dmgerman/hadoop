begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.counters
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
import|;
end_import

begin_comment
comment|/**  * An abstract counter class to provide common implementation of  * the counter interface in both mapred and mapreduce packages.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|AbstractCounter
specifier|public
specifier|abstract
class|class
name|AbstractCounter
implements|implements
name|Counter
block|{
annotation|@
name|Override
annotation|@
name|Deprecated
DECL|method|setDisplayName (String name)
specifier|public
name|void
name|setDisplayName
parameter_list|(
name|String
name|name
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|equals (Object genericRight)
specifier|public
specifier|synchronized
name|boolean
name|equals
parameter_list|(
name|Object
name|genericRight
parameter_list|)
block|{
if|if
condition|(
name|genericRight
operator|instanceof
name|Counter
condition|)
block|{
synchronized|synchronized
init|(
name|genericRight
init|)
block|{
name|Counter
name|right
init|=
operator|(
name|Counter
operator|)
name|genericRight
decl_stmt|;
return|return
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|right
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|getDisplayName
argument_list|()
operator|.
name|equals
argument_list|(
name|right
operator|.
name|getDisplayName
argument_list|()
argument_list|)
operator|&&
name|getValue
argument_list|()
operator|==
name|right
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
specifier|synchronized
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getDisplayName
argument_list|()
argument_list|,
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

