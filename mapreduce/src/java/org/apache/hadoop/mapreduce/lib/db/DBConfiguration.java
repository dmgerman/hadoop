begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.db
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|db
operator|.
name|DBInputFormat
operator|.
name|NullDBWritable
import|;
end_import

begin_comment
comment|/**  * A container for configuration property names for jobs with DB input/output.  *    * The job can be configured using the static methods in this class,   * {@link DBInputFormat}, and {@link DBOutputFormat}.   * Alternatively, the properties can be set in the configuration with proper  * values.   *     * @see DBConfiguration#configureDB(Configuration, String, String, String, String)  * @see DBInputFormat#setInput(Job, Class, String, String)  * @see DBInputFormat#setInput(Job, Class, String, String, String, String...)  * @see DBOutputFormat#setOutput(Job, String, String...)  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|DBConfiguration
specifier|public
class|class
name|DBConfiguration
block|{
comment|/** The JDBC Driver class name */
DECL|field|DRIVER_CLASS_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|DRIVER_CLASS_PROPERTY
init|=
literal|"mapreduce.jdbc.driver.class"
decl_stmt|;
comment|/** JDBC Database access URL */
DECL|field|URL_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|URL_PROPERTY
init|=
literal|"mapreduce.jdbc.url"
decl_stmt|;
comment|/** User name to access the database */
DECL|field|USERNAME_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|USERNAME_PROPERTY
init|=
literal|"mapreduce.jdbc.username"
decl_stmt|;
comment|/** Password to access the database */
DECL|field|PASSWORD_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD_PROPERTY
init|=
literal|"mapreduce.jdbc.password"
decl_stmt|;
comment|/** Input table name */
DECL|field|INPUT_TABLE_NAME_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_TABLE_NAME_PROPERTY
init|=
literal|"mapreduce.jdbc.input.table.name"
decl_stmt|;
comment|/** Field names in the Input table */
DECL|field|INPUT_FIELD_NAMES_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_FIELD_NAMES_PROPERTY
init|=
literal|"mapreduce.jdbc.input.field.names"
decl_stmt|;
comment|/** WHERE clause in the input SELECT statement */
DECL|field|INPUT_CONDITIONS_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_CONDITIONS_PROPERTY
init|=
literal|"mapreduce.jdbc.input.conditions"
decl_stmt|;
comment|/** ORDER BY clause in the input SELECT statement */
DECL|field|INPUT_ORDER_BY_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_ORDER_BY_PROPERTY
init|=
literal|"mapreduce.jdbc.input.orderby"
decl_stmt|;
comment|/** Whole input query, exluding LIMIT...OFFSET */
DECL|field|INPUT_QUERY
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_QUERY
init|=
literal|"mapreduce.jdbc.input.query"
decl_stmt|;
comment|/** Input query to get the count of records */
DECL|field|INPUT_COUNT_QUERY
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_COUNT_QUERY
init|=
literal|"mapreduce.jdbc.input.count.query"
decl_stmt|;
comment|/** Input query to get the max and min values of the jdbc.input.query */
DECL|field|INPUT_BOUNDING_QUERY
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_BOUNDING_QUERY
init|=
literal|"mapred.jdbc.input.bounding.query"
decl_stmt|;
comment|/** Class name implementing DBWritable which will hold input tuples */
DECL|field|INPUT_CLASS_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_CLASS_PROPERTY
init|=
literal|"mapreduce.jdbc.input.class"
decl_stmt|;
comment|/** Output table name */
DECL|field|OUTPUT_TABLE_NAME_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_TABLE_NAME_PROPERTY
init|=
literal|"mapreduce.jdbc.output.table.name"
decl_stmt|;
comment|/** Field names in the Output table */
DECL|field|OUTPUT_FIELD_NAMES_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_FIELD_NAMES_PROPERTY
init|=
literal|"mapreduce.jdbc.output.field.names"
decl_stmt|;
comment|/** Number of fields in the Output table */
DECL|field|OUTPUT_FIELD_COUNT_PROPERTY
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_FIELD_COUNT_PROPERTY
init|=
literal|"mapreduce.jdbc.output.field.count"
decl_stmt|;
comment|/**    * Sets the DB access related fields in the {@link Configuration}.      * @param conf the configuration    * @param driverClass JDBC Driver class name    * @param dbUrl JDBC DB access URL.     * @param userName DB access username     * @param passwd DB access passwd    */
DECL|method|configureDB (Configuration conf, String driverClass, String dbUrl, String userName, String passwd)
specifier|public
specifier|static
name|void
name|configureDB
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|driverClass
parameter_list|,
name|String
name|dbUrl
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|passwd
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DRIVER_CLASS_PROPERTY
argument_list|,
name|driverClass
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|URL_PROPERTY
argument_list|,
name|dbUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|USERNAME_PROPERTY
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|passwd
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|PASSWORD_PROPERTY
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the DB access related fields in the JobConf.      * @param job the job    * @param driverClass JDBC Driver class name    * @param dbUrl JDBC DB access URL.     */
DECL|method|configureDB (Configuration job, String driverClass, String dbUrl)
specifier|public
specifier|static
name|void
name|configureDB
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|String
name|driverClass
parameter_list|,
name|String
name|dbUrl
parameter_list|)
block|{
name|configureDB
argument_list|(
name|job
argument_list|,
name|driverClass
argument_list|,
name|dbUrl
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|DBConfiguration (Configuration job)
specifier|public
name|DBConfiguration
parameter_list|(
name|Configuration
name|job
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|job
expr_stmt|;
block|}
comment|/** Returns a connection object o the DB     * @throws ClassNotFoundException     * @throws SQLException */
DECL|method|getConnection ()
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|SQLException
block|{
name|Class
operator|.
name|forName
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|DRIVER_CLASS_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|USERNAME_PROPERTY
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|URL_PROPERTY
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|URL_PROPERTY
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|USERNAME_PROPERTY
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|PASSWORD_PROPERTY
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|getInputTableName ()
specifier|public
name|String
name|getInputTableName
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_TABLE_NAME_PROPERTY
argument_list|)
return|;
block|}
DECL|method|setInputTableName (String tableName)
specifier|public
name|void
name|setInputTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_TABLE_NAME_PROPERTY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputFieldNames ()
specifier|public
name|String
index|[]
name|getInputFieldNames
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getStrings
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_FIELD_NAMES_PROPERTY
argument_list|)
return|;
block|}
DECL|method|setInputFieldNames (String... fieldNames)
specifier|public
name|void
name|setInputFieldNames
parameter_list|(
name|String
modifier|...
name|fieldNames
parameter_list|)
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_FIELD_NAMES_PROPERTY
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputConditions ()
specifier|public
name|String
name|getInputConditions
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_CONDITIONS_PROPERTY
argument_list|)
return|;
block|}
DECL|method|setInputConditions (String conditions)
specifier|public
name|void
name|setInputConditions
parameter_list|(
name|String
name|conditions
parameter_list|)
block|{
if|if
condition|(
name|conditions
operator|!=
literal|null
operator|&&
name|conditions
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|conf
operator|.
name|set
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_CONDITIONS_PROPERTY
argument_list|,
name|conditions
argument_list|)
expr_stmt|;
block|}
DECL|method|getInputOrderBy ()
specifier|public
name|String
name|getInputOrderBy
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_ORDER_BY_PROPERTY
argument_list|)
return|;
block|}
DECL|method|setInputOrderBy (String orderby)
specifier|public
name|void
name|setInputOrderBy
parameter_list|(
name|String
name|orderby
parameter_list|)
block|{
if|if
condition|(
name|orderby
operator|!=
literal|null
operator|&&
name|orderby
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_ORDER_BY_PROPERTY
argument_list|,
name|orderby
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getInputQuery ()
specifier|public
name|String
name|getInputQuery
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_QUERY
argument_list|)
return|;
block|}
DECL|method|setInputQuery (String query)
specifier|public
name|void
name|setInputQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_QUERY
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getInputCountQuery ()
specifier|public
name|String
name|getInputCountQuery
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_COUNT_QUERY
argument_list|)
return|;
block|}
DECL|method|setInputCountQuery (String query)
specifier|public
name|void
name|setInputCountQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_COUNT_QUERY
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setInputBoundingQuery (String query)
specifier|public
name|void
name|setInputBoundingQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
name|query
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_BOUNDING_QUERY
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getInputBoundingQuery ()
specifier|public
name|String
name|getInputBoundingQuery
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_BOUNDING_QUERY
argument_list|)
return|;
block|}
DECL|method|getInputClass ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getInputClass
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getClass
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_CLASS_PROPERTY
argument_list|,
name|NullDBWritable
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|setInputClass (Class<? extends DBWritable> inputClass)
specifier|public
name|void
name|setInputClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|DBWritable
argument_list|>
name|inputClass
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|DBConfiguration
operator|.
name|INPUT_CLASS_PROPERTY
argument_list|,
name|inputClass
argument_list|,
name|DBWritable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getOutputTableName ()
specifier|public
name|String
name|getOutputTableName
parameter_list|()
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|DBConfiguration
operator|.
name|OUTPUT_TABLE_NAME_PROPERTY
argument_list|)
return|;
block|}
DECL|method|setOutputTableName (String tableName)
specifier|public
name|void
name|setOutputTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|DBConfiguration
operator|.
name|OUTPUT_TABLE_NAME_PROPERTY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
DECL|method|getOutputFieldNames ()
specifier|public
name|String
index|[]
name|getOutputFieldNames
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getStrings
argument_list|(
name|DBConfiguration
operator|.
name|OUTPUT_FIELD_NAMES_PROPERTY
argument_list|)
return|;
block|}
DECL|method|setOutputFieldNames (String... fieldNames)
specifier|public
name|void
name|setOutputFieldNames
parameter_list|(
name|String
modifier|...
name|fieldNames
parameter_list|)
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|DBConfiguration
operator|.
name|OUTPUT_FIELD_NAMES_PROPERTY
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
block|}
DECL|method|setOutputFieldCount (int fieldCount)
specifier|public
name|void
name|setOutputFieldCount
parameter_list|(
name|int
name|fieldCount
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|DBConfiguration
operator|.
name|OUTPUT_FIELD_COUNT_PROPERTY
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
block|}
DECL|method|getOutputFieldCount ()
specifier|public
name|int
name|getOutputFieldCount
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|OUTPUT_FIELD_COUNT_PROPERTY
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

