begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.aggregate
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * This class implements a value aggregator that dedupes a sequence of objects.  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|UniqValueCount
specifier|public
class|class
name|UniqValueCount
implements|implements
name|ValueAggregator
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|MAX_NUM_UNIQUE_VALUES
specifier|public
specifier|static
specifier|final
name|String
name|MAX_NUM_UNIQUE_VALUES
init|=
literal|"mapreduce.aggregate.max.num.unique.values"
decl_stmt|;
DECL|field|uniqItems
specifier|private
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|uniqItems
init|=
literal|null
decl_stmt|;
DECL|field|numItems
specifier|private
name|long
name|numItems
init|=
literal|0
decl_stmt|;
DECL|field|maxNumItems
specifier|private
name|long
name|maxNumItems
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    * the default constructor    *     */
DECL|method|UniqValueCount ()
specifier|public
name|UniqValueCount
parameter_list|()
block|{
name|this
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * constructor    * @param maxNum the limit in the number of unique values to keep.    *      */
DECL|method|UniqValueCount (long maxNum)
specifier|public
name|UniqValueCount
parameter_list|(
name|long
name|maxNum
parameter_list|)
block|{
name|uniqItems
operator|=
operator|new
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|numItems
operator|=
literal|0
expr_stmt|;
name|maxNumItems
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
if|if
condition|(
name|maxNum
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|maxNumItems
operator|=
name|maxNum
expr_stmt|;
block|}
block|}
comment|/**    * Set the limit on the number of unique values    * @param n the desired limit on the number of unique values    * @return the new limit on the number of unique values    */
DECL|method|setMaxItems (long n)
specifier|public
name|long
name|setMaxItems
parameter_list|(
name|long
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>=
name|numItems
condition|)
block|{
name|this
operator|.
name|maxNumItems
operator|=
name|n
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|maxNumItems
operator|>=
name|this
operator|.
name|numItems
condition|)
block|{
name|this
operator|.
name|maxNumItems
operator|=
name|this
operator|.
name|numItems
expr_stmt|;
block|}
return|return
name|this
operator|.
name|maxNumItems
return|;
block|}
comment|/**    * add a value to the aggregator    *     * @param val    *          an object.    *     */
DECL|method|addNextValue (Object val)
specifier|public
name|void
name|addNextValue
parameter_list|(
name|Object
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|numItems
operator|<=
name|this
operator|.
name|maxNumItems
condition|)
block|{
name|uniqItems
operator|.
name|put
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|this
operator|.
name|numItems
operator|=
name|this
operator|.
name|uniqItems
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @return return the number of unique objects aggregated    */
DECL|method|getReport ()
specifier|public
name|String
name|getReport
parameter_list|()
block|{
return|return
literal|""
operator|+
name|uniqItems
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    *     * @return the set of the unique objects    */
DECL|method|getUniqueItems ()
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|getUniqueItems
parameter_list|()
block|{
return|return
name|uniqItems
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    * reset the aggregator    */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|uniqItems
operator|=
operator|new
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return return an array of the unique objects. The return value is    *         expected to be used by the a combiner.    */
DECL|method|getCombinerOutput ()
specifier|public
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|getCombinerOutput
parameter_list|()
block|{
name|Object
name|key
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iter
init|=
name|uniqItems
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|retv
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|key
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|retv
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|retv
return|;
block|}
block|}
end_class

end_unit

