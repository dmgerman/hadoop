begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.input
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_comment
comment|/**  * A sub-collection of input files.   *   * Unlike {@link FileSplit}, CombineFileSplit class does not represent   * a split of a file, but a split of input files into smaller sets.   * A split may contain blocks from different file but all   * the blocks in the same split are probably local to some rack<br>   * CombineFileSplit can be used to implement {@link RecordReader}'s,   * with reading one record per file.  *   * @see FileSplit  * @see CombineFileInputFormat   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|CombineFileSplit
specifier|public
class|class
name|CombineFileSplit
extends|extends
name|InputSplit
implements|implements
name|Writable
block|{
DECL|field|paths
specifier|private
name|Path
index|[]
name|paths
decl_stmt|;
DECL|field|startoffset
specifier|private
name|long
index|[]
name|startoffset
decl_stmt|;
DECL|field|lengths
specifier|private
name|long
index|[]
name|lengths
decl_stmt|;
DECL|field|locations
specifier|private
name|String
index|[]
name|locations
decl_stmt|;
DECL|field|totLength
specifier|private
name|long
name|totLength
decl_stmt|;
comment|/**    * default constructor    */
DECL|method|CombineFileSplit ()
specifier|public
name|CombineFileSplit
parameter_list|()
block|{}
DECL|method|CombineFileSplit (Path[] files, long[] start, long[] lengths, String[] locations)
specifier|public
name|CombineFileSplit
parameter_list|(
name|Path
index|[]
name|files
parameter_list|,
name|long
index|[]
name|start
parameter_list|,
name|long
index|[]
name|lengths
parameter_list|,
name|String
index|[]
name|locations
parameter_list|)
block|{
name|initSplit
argument_list|(
name|files
argument_list|,
name|start
argument_list|,
name|lengths
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
DECL|method|CombineFileSplit (Path[] files, long[] lengths)
specifier|public
name|CombineFileSplit
parameter_list|(
name|Path
index|[]
name|files
parameter_list|,
name|long
index|[]
name|lengths
parameter_list|)
block|{
name|long
index|[]
name|startoffset
init|=
operator|new
name|long
index|[
name|files
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startoffset
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|startoffset
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|String
index|[]
name|locations
init|=
operator|new
name|String
index|[
name|files
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|locations
index|[
name|i
index|]
operator|=
literal|""
expr_stmt|;
block|}
name|initSplit
argument_list|(
name|files
argument_list|,
name|startoffset
argument_list|,
name|lengths
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
DECL|method|initSplit (Path[] files, long[] start, long[] lengths, String[] locations)
specifier|private
name|void
name|initSplit
parameter_list|(
name|Path
index|[]
name|files
parameter_list|,
name|long
index|[]
name|start
parameter_list|,
name|long
index|[]
name|lengths
parameter_list|,
name|String
index|[]
name|locations
parameter_list|)
block|{
name|this
operator|.
name|startoffset
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|lengths
operator|=
name|lengths
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|files
expr_stmt|;
name|this
operator|.
name|totLength
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|locations
operator|=
name|locations
expr_stmt|;
for|for
control|(
name|long
name|length
range|:
name|lengths
control|)
block|{
name|totLength
operator|+=
name|length
expr_stmt|;
block|}
block|}
comment|/**    * Copy constructor    */
DECL|method|CombineFileSplit (CombineFileSplit old)
specifier|public
name|CombineFileSplit
parameter_list|(
name|CombineFileSplit
name|old
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|old
operator|.
name|getPaths
argument_list|()
argument_list|,
name|old
operator|.
name|getStartOffsets
argument_list|()
argument_list|,
name|old
operator|.
name|getLengths
argument_list|()
argument_list|,
name|old
operator|.
name|getLocations
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|totLength
return|;
block|}
comment|/** Returns an array containing the start offsets of the files in the split*/
DECL|method|getStartOffsets ()
specifier|public
name|long
index|[]
name|getStartOffsets
parameter_list|()
block|{
return|return
name|startoffset
return|;
block|}
comment|/** Returns an array containing the lengths of the files in the split*/
DECL|method|getLengths ()
specifier|public
name|long
index|[]
name|getLengths
parameter_list|()
block|{
return|return
name|lengths
return|;
block|}
comment|/** Returns the start offset of the i<sup>th</sup> Path */
DECL|method|getOffset (int i)
specifier|public
name|long
name|getOffset
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|startoffset
index|[
name|i
index|]
return|;
block|}
comment|/** Returns the length of the i<sup>th</sup> Path */
DECL|method|getLength (int i)
specifier|public
name|long
name|getLength
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|lengths
index|[
name|i
index|]
return|;
block|}
comment|/** Returns the number of Paths in the split */
DECL|method|getNumPaths ()
specifier|public
name|int
name|getNumPaths
parameter_list|()
block|{
return|return
name|paths
operator|.
name|length
return|;
block|}
comment|/** Returns the i<sup>th</sup> Path */
DECL|method|getPath (int i)
specifier|public
name|Path
name|getPath
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|paths
index|[
name|i
index|]
return|;
block|}
comment|/** Returns all the Paths in the split */
DECL|method|getPaths ()
specifier|public
name|Path
index|[]
name|getPaths
parameter_list|()
block|{
return|return
name|paths
return|;
block|}
comment|/** Returns all the Paths where this input-split resides */
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|locations
return|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|totLength
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|arrLength
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|lengths
operator|=
operator|new
name|long
index|[
name|arrLength
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arrLength
condition|;
name|i
operator|++
control|)
block|{
name|lengths
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|int
name|filesLength
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|paths
operator|=
operator|new
name|Path
index|[
name|filesLength
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filesLength
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|arrLength
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|startoffset
operator|=
operator|new
name|long
index|[
name|arrLength
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arrLength
condition|;
name|i
operator|++
control|)
block|{
name|startoffset
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|totLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|lengths
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|length
range|:
name|lengths
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|paths
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeInt
argument_list|(
name|startoffset
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|length
range|:
name|startoffset
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Paths:"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|paths
index|[
name|i
index|]
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|":"
operator|+
name|startoffset
index|[
name|i
index|]
operator|+
literal|"+"
operator|+
name|lengths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|paths
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|locations
operator|!=
literal|null
condition|)
block|{
name|String
name|locs
init|=
literal|""
decl_stmt|;
name|StringBuffer
name|locsb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|locsb
operator|.
name|append
argument_list|(
name|locations
index|[
name|i
index|]
operator|+
literal|":"
argument_list|)
expr_stmt|;
block|}
name|locs
operator|=
name|locsb
operator|.
name|toString
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" Locations:"
operator|+
name|locs
operator|+
literal|"; "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

