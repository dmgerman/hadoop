begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputCommitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_comment
comment|/**  * FilterOutputFormat is a convenience class that wraps OutputFormat.   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|FilterOutputFormat
specifier|public
class|class
name|FilterOutputFormat
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|OutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|baseOut
specifier|protected
name|OutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|baseOut
decl_stmt|;
DECL|method|FilterOutputFormat ()
specifier|public
name|FilterOutputFormat
parameter_list|()
block|{
name|this
operator|.
name|baseOut
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Create a FilterOutputFormat based on the underlying output format.    * @param baseOut the underlying OutputFormat    */
DECL|method|FilterOutputFormat (OutputFormat<K,V> baseOut)
specifier|public
name|FilterOutputFormat
parameter_list|(
name|OutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|baseOut
parameter_list|)
block|{
name|this
operator|.
name|baseOut
operator|=
name|baseOut
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRecordWriter (TaskAttemptContext context)
specifier|public
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|getBaseOut
argument_list|()
operator|.
name|getRecordWriter
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkOutputSpecs (JobContext context)
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getBaseOut
argument_list|()
operator|.
name|checkOutputSpecs
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOutputCommitter (TaskAttemptContext context)
specifier|public
name|OutputCommitter
name|getOutputCommitter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|getBaseOut
argument_list|()
operator|.
name|getOutputCommitter
argument_list|(
name|context
argument_list|)
return|;
block|}
DECL|method|getBaseOut ()
specifier|private
name|OutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getBaseOut
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|baseOut
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"OutputFormat not set for FilterOutputFormat"
argument_list|)
throw|;
block|}
return|return
name|baseOut
return|;
block|}
comment|/**    *<code>FilterRecordWriter</code> is a convenience wrapper    * class that extends the {@link RecordWriter}.    */
DECL|class|FilterRecordWriter
specifier|public
specifier|static
class|class
name|FilterRecordWriter
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|rawWriter
specifier|protected
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rawWriter
init|=
literal|null
decl_stmt|;
DECL|method|FilterRecordWriter ()
specifier|public
name|FilterRecordWriter
parameter_list|()
block|{
name|rawWriter
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|FilterRecordWriter (RecordWriter<K,V> rwriter)
specifier|public
name|FilterRecordWriter
parameter_list|(
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|rwriter
parameter_list|)
block|{
name|this
operator|.
name|rawWriter
operator|=
name|rwriter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (K key, V value)
specifier|public
name|void
name|write
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getRawWriter
argument_list|()
operator|.
name|write
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close (TaskAttemptContext context)
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|getRawWriter
argument_list|()
operator|.
name|close
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|getRawWriter ()
specifier|private
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRawWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|rawWriter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Record Writer not set for FilterRecordWriter"
argument_list|)
throw|;
block|}
return|return
name|rawWriter
return|;
block|}
block|}
block|}
end_class

end_unit

