begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * Writable type storing multiple {@link org.apache.hadoop.io.Writable}s.  *  * This is *not* a general-purpose tuple type. In almost all cases, users are  * encouraged to implement their own serializable types, which can perform  * better validation and provide more efficient encodings than this class is  * capable. TupleWritable relies on the join framework for type safety and  * assumes its instances will rarely be persisted, assumptions not only  * incompatible with, but contrary to the general case.  *  * @see org.apache.hadoop.io.Writable  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|TupleWritable
specifier|public
class|class
name|TupleWritable
implements|implements
name|Writable
implements|,
name|Iterable
argument_list|<
name|Writable
argument_list|>
block|{
DECL|field|written
specifier|protected
name|BitSet
name|written
decl_stmt|;
DECL|field|values
specifier|private
name|Writable
index|[]
name|values
decl_stmt|;
comment|/**    * Create an empty tuple with no allocated storage for writables.    */
DECL|method|TupleWritable ()
specifier|public
name|TupleWritable
parameter_list|()
block|{
name|written
operator|=
operator|new
name|BitSet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize tuple with storage; unknown whether any of them contain    *&quot;written&quot; values.    */
DECL|method|TupleWritable (Writable[] vals)
specifier|public
name|TupleWritable
parameter_list|(
name|Writable
index|[]
name|vals
parameter_list|)
block|{
name|written
operator|=
operator|new
name|BitSet
argument_list|(
name|vals
operator|.
name|length
argument_list|)
expr_stmt|;
name|values
operator|=
name|vals
expr_stmt|;
block|}
comment|/**    * Return true if tuple has an element at the position provided.    */
DECL|method|has (int i)
specifier|public
name|boolean
name|has
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|written
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/**    * Get ith Writable from Tuple.    */
DECL|method|get (int i)
specifier|public
name|Writable
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|values
index|[
name|i
index|]
return|;
block|}
comment|/**    * The number of children in this Tuple.    */
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|length
return|;
block|}
comment|/**    * {@inheritDoc}    */
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|TupleWritable
condition|)
block|{
name|TupleWritable
name|that
init|=
operator|(
name|TupleWritable
operator|)
name|other
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|written
operator|.
name|equals
argument_list|(
name|that
operator|.
name|written
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|has
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|values
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|that
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
assert|assert
literal|false
operator|:
literal|"hashCode not designed"
assert|;
return|return
name|written
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Return an iterator over the elements in this tuple.    * Note that this doesn't flatten the tuple; one may receive tuples    * from this iterator.    */
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Writable
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|TupleWritable
name|t
init|=
name|this
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|Writable
argument_list|>
argument_list|()
block|{
name|int
name|bitIndex
init|=
name|written
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|bitIndex
operator|>=
literal|0
return|;
block|}
specifier|public
name|Writable
name|next
parameter_list|()
block|{
name|int
name|returnIndex
init|=
name|bitIndex
decl_stmt|;
if|if
condition|(
name|returnIndex
operator|<
literal|0
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
name|bitIndex
operator|=
name|written
operator|.
name|nextSetBit
argument_list|(
name|bitIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|t
operator|.
name|get
argument_list|(
name|returnIndex
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
operator|!
name|written
operator|.
name|get
argument_list|(
name|bitIndex
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attempt to remove non-existent val"
argument_list|)
throw|;
block|}
name|written
operator|.
name|clear
argument_list|(
name|bitIndex
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Convert Tuple to String as in the following.    *<tt>[<child1>,<child2>,...,<childn>]</tt>    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|has
argument_list|(
name|i
argument_list|)
condition|?
name|values
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|values
operator|.
name|length
operator|!=
literal|0
condition|)
name|buf
operator|.
name|setCharAt
argument_list|(
name|buf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
literal|']'
argument_list|)
expr_stmt|;
else|else
name|buf
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Writable
comment|/** Writes each Writable to<code>out</code>.    * TupleWritable format:    * {@code    *<count><type1><type2>...<typen><obj1><obj2>...<objn>    * }    */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|writeBitSet
argument_list|(
name|out
argument_list|,
name|values
operator|.
name|length
argument_list|,
name|written
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|values
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|has
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|values
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// No static typeinfo on Tuples
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|card
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|values
operator|=
operator|new
name|Writable
index|[
name|card
index|]
expr_stmt|;
name|readBitSet
argument_list|(
name|in
argument_list|,
name|card
argument_list|,
name|written
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
index|[]
name|cls
init|=
operator|new
name|Class
index|[
name|card
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|card
condition|;
operator|++
name|i
control|)
block|{
name|cls
index|[
name|i
index|]
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|card
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|cls
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
condition|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|NullWritable
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|values
index|[
name|i
index|]
operator|=
name|cls
index|[
name|i
index|]
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|has
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|values
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed tuple init"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed tuple init"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed tuple init"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Record that the tuple contains an element at the position provided.    */
DECL|method|setWritten (int i)
name|void
name|setWritten
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|written
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**    * Record that the tuple does not contain an element at the position    * provided.    */
DECL|method|clearWritten (int i)
name|void
name|clearWritten
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|written
operator|.
name|clear
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear any record of which writables have been written to, without    * releasing storage.    */
DECL|method|clearWritten ()
name|void
name|clearWritten
parameter_list|()
block|{
name|written
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Writes the bit set to the stream. The first 64 bit-positions of the bit    * set are written as a VLong for backwards-compatibility with older     * versions of TupleWritable. All bit-positions>= 64 are encoded as a byte    * for every 8 bit-positions.    */
DECL|method|writeBitSet (DataOutput stream, int nbits, BitSet bitSet)
specifier|private
specifier|static
specifier|final
name|void
name|writeBitSet
parameter_list|(
name|DataOutput
name|stream
parameter_list|,
name|int
name|nbits
parameter_list|,
name|BitSet
name|bitSet
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bits
init|=
literal|0L
decl_stmt|;
name|int
name|bitSetIndex
init|=
name|bitSet
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|bitSetIndex
operator|>=
literal|0
operator|&&
name|bitSetIndex
operator|<
name|Long
operator|.
name|SIZE
condition|;
name|bitSetIndex
operator|=
name|bitSet
operator|.
name|nextSetBit
argument_list|(
name|bitSetIndex
operator|+
literal|1
argument_list|)
control|)
block|{
name|bits
operator||=
literal|1L
operator|<<
name|bitSetIndex
expr_stmt|;
block|}
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|stream
argument_list|,
name|bits
argument_list|)
expr_stmt|;
if|if
condition|(
name|nbits
operator|>
name|Long
operator|.
name|SIZE
condition|)
block|{
name|bits
operator|=
literal|0L
expr_stmt|;
for|for
control|(
name|int
name|lastWordWritten
init|=
literal|0
init|;
name|bitSetIndex
operator|>=
literal|0
operator|&&
name|bitSetIndex
operator|<
name|nbits
condition|;
name|bitSetIndex
operator|=
name|bitSet
operator|.
name|nextSetBit
argument_list|(
name|bitSetIndex
operator|+
literal|1
argument_list|)
control|)
block|{
name|int
name|bitsIndex
init|=
name|bitSetIndex
operator|%
name|Byte
operator|.
name|SIZE
decl_stmt|;
name|int
name|word
init|=
operator|(
name|bitSetIndex
operator|-
name|Long
operator|.
name|SIZE
operator|)
operator|/
name|Byte
operator|.
name|SIZE
decl_stmt|;
if|if
condition|(
name|word
operator|>
name|lastWordWritten
condition|)
block|{
name|stream
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|bits
argument_list|)
expr_stmt|;
name|bits
operator|=
literal|0L
expr_stmt|;
for|for
control|(
name|lastWordWritten
operator|++
init|;
name|lastWordWritten
operator|<
name|word
condition|;
name|lastWordWritten
operator|++
control|)
block|{
name|stream
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|bits
argument_list|)
expr_stmt|;
block|}
block|}
name|bits
operator||=
literal|1L
operator|<<
name|bitsIndex
expr_stmt|;
block|}
name|stream
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|bits
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reads a bitset from the stream that has been written with    * {@link #writeBitSet(DataOutput, int, BitSet)}.    */
DECL|method|readBitSet (DataInput stream, int nbits, BitSet bitSet)
specifier|private
specifier|static
specifier|final
name|void
name|readBitSet
parameter_list|(
name|DataInput
name|stream
parameter_list|,
name|int
name|nbits
parameter_list|,
name|BitSet
name|bitSet
parameter_list|)
throws|throws
name|IOException
block|{
name|bitSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|long
name|initialBits
init|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|long
name|last
init|=
literal|0L
decl_stmt|;
while|while
condition|(
literal|0L
operator|!=
name|initialBits
condition|)
block|{
name|last
operator|=
name|Long
operator|.
name|lowestOneBit
argument_list|(
name|initialBits
argument_list|)
expr_stmt|;
name|initialBits
operator|^=
name|last
expr_stmt|;
name|bitSet
operator|.
name|set
argument_list|(
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|offset
init|=
name|Long
operator|.
name|SIZE
init|;
name|offset
operator|<
name|nbits
condition|;
name|offset
operator|+=
name|Byte
operator|.
name|SIZE
control|)
block|{
name|byte
name|bits
init|=
name|stream
operator|.
name|readByte
argument_list|()
decl_stmt|;
while|while
condition|(
literal|0
operator|!=
name|bits
condition|)
block|{
name|last
operator|=
name|Long
operator|.
name|lowestOneBit
argument_list|(
name|bits
argument_list|)
expr_stmt|;
name|bits
operator|^=
name|last
expr_stmt|;
name|bitSet
operator|.
name|set
argument_list|(
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|last
argument_list|)
operator|+
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

