begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.join
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Prefer the&quot;rightmost&quot; data source for this key.  * For example,<tt>override(S1,S2,S3)</tt> will prefer values  * from S3 over S2, and values from S2 over S1 for all keys  * emitted from all sources.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|OverrideRecordReader
specifier|public
class|class
name|OverrideRecordReader
parameter_list|<
name|K
extends|extends
name|WritableComparable
parameter_list|<
name|?
parameter_list|>
parameter_list|,
name|V
extends|extends
name|Writable
parameter_list|>
extends|extends
name|MultiFilterRecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|OverrideRecordReader (int id, Configuration conf, int capacity, Class<? extends WritableComparator> cmpcl)
name|OverrideRecordReader
parameter_list|(
name|int
name|id
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|capacity
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparator
argument_list|>
name|cmpcl
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|id
argument_list|,
name|conf
argument_list|,
name|capacity
argument_list|,
name|cmpcl
argument_list|)
expr_stmt|;
block|}
DECL|field|valueclass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueclass
init|=
literal|null
decl_stmt|;
comment|/**    * Emit the value with the highest position in the tuple.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// No static typeinfo on Tuples
DECL|method|emit (TupleWritable dst)
specifier|protected
name|V
name|emit
parameter_list|(
name|TupleWritable
name|dst
parameter_list|)
block|{
return|return
operator|(
name|V
operator|)
name|dst
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Explicit check for value class agreement
DECL|method|createValue ()
specifier|public
name|V
name|createValue
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|valueclass
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|kids
index|[
name|kids
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|createValue
argument_list|()
operator|.
name|getClass
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|kids
operator|.
name|length
operator|-
literal|1
init|;
name|cls
operator|.
name|equals
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
condition|;
name|i
operator|--
control|)
block|{
name|cls
operator|=
name|kids
index|[
name|i
index|]
operator|.
name|createValue
argument_list|()
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
name|valueclass
operator|=
name|cls
operator|.
name|asSubclass
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueclass
operator|.
name|equals
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|V
operator|)
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
return|return
operator|(
name|V
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|valueclass
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Instead of filling the JoinCollector with iterators from all    * data sources, fill only the rightmost for this key.    * This not only saves space by discarding the other sources, but    * it also emits the number of key-value pairs in the preferred    * RecordReader instead of repeating that stream n times, where    * n is the cardinality of the cross product of the discarded    * streams for the given key.    */
DECL|method|fillJoinCollector (K iterkey)
specifier|protected
name|void
name|fillJoinCollector
parameter_list|(
name|K
name|iterkey
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|PriorityQueue
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
name|q
init|=
name|getRecordReaderQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
operator|&&
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|highpos
init|=
operator|-
literal|1
decl_stmt|;
name|ArrayList
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|(
name|kids
operator|.
name|length
argument_list|)
decl_stmt|;
name|q
operator|.
name|peek
argument_list|()
operator|.
name|key
argument_list|(
name|iterkey
argument_list|)
expr_stmt|;
specifier|final
name|WritableComparator
name|cmp
init|=
name|getComparator
argument_list|()
decl_stmt|;
while|while
condition|(
literal|0
operator|==
name|cmp
operator|.
name|compare
argument_list|(
name|q
operator|.
name|peek
argument_list|()
operator|.
name|key
argument_list|()
argument_list|,
name|iterkey
argument_list|)
condition|)
block|{
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|t
init|=
name|q
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|highpos
operator|||
name|list
operator|.
name|get
argument_list|(
name|highpos
argument_list|)
operator|.
name|id
argument_list|()
operator|<
name|t
operator|.
name|id
argument_list|()
condition|)
block|{
name|highpos
operator|=
name|list
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
block|}
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|t
init|=
name|list
operator|.
name|remove
argument_list|(
name|highpos
argument_list|)
decl_stmt|;
name|t
operator|.
name|accept
argument_list|(
name|jc
argument_list|,
name|iterkey
argument_list|)
expr_stmt|;
for|for
control|(
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|rr
range|:
name|list
control|)
block|{
name|rr
operator|.
name|skip
argument_list|(
name|iterkey
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
for|for
control|(
name|ComposableRecordReader
argument_list|<
name|K
argument_list|,
name|?
argument_list|>
name|rr
range|:
name|list
control|)
block|{
if|if
condition|(
name|rr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

