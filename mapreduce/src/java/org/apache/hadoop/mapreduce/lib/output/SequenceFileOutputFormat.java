begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|DefaultCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/** An {@link OutputFormat} that writes {@link SequenceFile}s. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|SequenceFileOutputFormat
specifier|public
class|class
name|SequenceFileOutputFormat
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|FileOutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|method|getSequenceWriter (TaskAttemptContext context, Class<?> keyClass, Class<?> valueClass)
specifier|protected
name|SequenceFile
operator|.
name|Writer
name|getSequenceWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|keyClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|valueClass
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
name|CompressionType
name|compressionType
init|=
name|CompressionType
operator|.
name|NONE
decl_stmt|;
if|if
condition|(
name|getCompressOutput
argument_list|(
name|context
argument_list|)
condition|)
block|{
comment|// find the kind of compression to do
name|compressionType
operator|=
name|getOutputCompressionType
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// find the right codec
name|Class
argument_list|<
name|?
argument_list|>
name|codecClass
init|=
name|getOutputCompressorClass
argument_list|(
name|context
argument_list|,
name|DefaultCodec
operator|.
name|class
argument_list|)
decl_stmt|;
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// get the path of the temporary output file
name|Path
name|file
init|=
name|getDefaultWorkFile
argument_list|(
name|context
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|file
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|file
argument_list|,
name|keyClass
argument_list|,
name|valueClass
argument_list|,
name|compressionType
argument_list|,
name|codec
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|public
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
DECL|method|getRecordWriter (TaskAttemptContext context )
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|SequenceFile
operator|.
name|Writer
name|out
init|=
name|getSequenceWriter
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getOutputKeyClass
argument_list|()
argument_list|,
name|context
operator|.
name|getOutputValueClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|RecordWriter
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Get the {@link CompressionType} for the output {@link SequenceFile}.    * @param job the {@link Job}    * @return the {@link CompressionType} for the output {@link SequenceFile},     *         defaulting to {@link CompressionType#RECORD}    */
DECL|method|getOutputCompressionType (JobContext job)
specifier|public
specifier|static
name|CompressionType
name|getOutputCompressionType
parameter_list|(
name|JobContext
name|job
parameter_list|)
block|{
name|String
name|val
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_TYPE
argument_list|,
name|CompressionType
operator|.
name|RECORD
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|CompressionType
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
return|;
block|}
comment|/**    * Set the {@link CompressionType} for the output {@link SequenceFile}.    * @param job the {@link Job} to modify    * @param style the {@link CompressionType} for the output    *              {@link SequenceFile}     */
DECL|method|setOutputCompressionType (Job job, CompressionType style)
specifier|public
specifier|static
name|void
name|setOutputCompressionType
parameter_list|(
name|Job
name|job
parameter_list|,
name|CompressionType
name|style
parameter_list|)
block|{
name|setCompressOutput
argument_list|(
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_TYPE
argument_list|,
name|style
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

