begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.lib.output
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|ValueBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InvalidJobConfException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_comment
comment|/**   * An {@link org.apache.hadoop.mapreduce.OutputFormat} that writes keys,   * values to {@link SequenceFile}s in binary(raw) format  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|SequenceFileAsBinaryOutputFormat
specifier|public
class|class
name|SequenceFileAsBinaryOutputFormat
extends|extends
name|SequenceFileOutputFormat
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
block|{
DECL|field|KEY_CLASS
specifier|public
specifier|static
name|String
name|KEY_CLASS
init|=
literal|"mapreduce.output.seqbinaryoutputformat.key.class"
decl_stmt|;
DECL|field|VALUE_CLASS
specifier|public
specifier|static
name|String
name|VALUE_CLASS
init|=
literal|"mapreduce.output.seqbinaryoutputformat.value.class"
decl_stmt|;
comment|/**     * Inner class used for appendRaw    */
DECL|class|WritableValueBytes
specifier|static
specifier|public
class|class
name|WritableValueBytes
implements|implements
name|ValueBytes
block|{
DECL|field|value
specifier|private
name|BytesWritable
name|value
decl_stmt|;
DECL|method|WritableValueBytes ()
specifier|public
name|WritableValueBytes
parameter_list|()
block|{
name|this
operator|.
name|value
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|WritableValueBytes (BytesWritable value)
specifier|public
name|WritableValueBytes
parameter_list|(
name|BytesWritable
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|reset (BytesWritable value)
specifier|public
name|void
name|reset
parameter_list|(
name|BytesWritable
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|writeUncompressedBytes (DataOutputStream outStream)
specifier|public
name|void
name|writeUncompressedBytes
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeCompressedBytes (DataOutputStream outStream)
specifier|public
name|void
name|writeCompressedBytes
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"WritableValueBytes doesn't support RECORD compression"
argument_list|)
throw|;
block|}
DECL|method|getSize ()
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|value
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
comment|/**    * Set the key class for the {@link SequenceFile}    *<p>This allows the user to specify the key class to be different     * from the actual class ({@link BytesWritable}) used for writing</p>    *     * @param job the {@link Job} to modify    * @param theClass the SequenceFile output key class.    */
DECL|method|setSequenceFileOutputKeyClass (Job job, Class<?> theClass)
specifier|static
specifier|public
name|void
name|setSequenceFileOutputKeyClass
parameter_list|(
name|Job
name|job
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|theClass
parameter_list|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
name|KEY_CLASS
argument_list|,
name|theClass
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the value class for the {@link SequenceFile}    *<p>This allows the user to specify the value class to be different     * from the actual class ({@link BytesWritable}) used for writing</p>    *     * @param job the {@link Job} to modify    * @param theClass the SequenceFile output key class.    */
DECL|method|setSequenceFileOutputValueClass (Job job, Class<?> theClass)
specifier|static
specifier|public
name|void
name|setSequenceFileOutputValueClass
parameter_list|(
name|Job
name|job
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|theClass
parameter_list|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
name|VALUE_CLASS
argument_list|,
name|theClass
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the key class for the {@link SequenceFile}    *     * @return the key class of the {@link SequenceFile}    */
specifier|static
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|WritableComparable
argument_list|>
DECL|method|getSequenceFileOutputKeyClass (JobContext job)
name|getSequenceFileOutputKeyClass
parameter_list|(
name|JobContext
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getClass
argument_list|(
name|KEY_CLASS
argument_list|,
name|job
operator|.
name|getOutputKeyClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|WritableComparable
operator|.
name|class
argument_list|)
argument_list|,
name|WritableComparable
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Get the value class for the {@link SequenceFile}    *     * @return the value class of the {@link SequenceFile}    */
DECL|method|getSequenceFileOutputValueClass ( JobContext job)
specifier|static
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSequenceFileOutputValueClass
parameter_list|(
name|JobContext
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getClass
argument_list|(
name|VALUE_CLASS
argument_list|,
name|job
operator|.
name|getOutputValueClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
argument_list|,
name|Writable
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRecordWriter ( TaskAttemptContext context)
specifier|public
name|RecordWriter
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
name|getRecordWriter
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SequenceFile
operator|.
name|Writer
name|out
init|=
name|getSequenceWriter
argument_list|(
name|context
argument_list|,
name|getSequenceFileOutputKeyClass
argument_list|(
name|context
argument_list|)
argument_list|,
name|getSequenceFileOutputValueClass
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|RecordWriter
argument_list|<
name|BytesWritable
argument_list|,
name|BytesWritable
argument_list|>
argument_list|()
block|{
specifier|private
name|WritableValueBytes
name|wvaluebytes
init|=
operator|new
name|WritableValueBytes
argument_list|()
decl_stmt|;
specifier|public
name|void
name|write
parameter_list|(
name|BytesWritable
name|bkey
parameter_list|,
name|BytesWritable
name|bvalue
parameter_list|)
throws|throws
name|IOException
block|{
name|wvaluebytes
operator|.
name|reset
argument_list|(
name|bvalue
argument_list|)
expr_stmt|;
name|out
operator|.
name|appendRaw
argument_list|(
name|bkey
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bkey
operator|.
name|getLength
argument_list|()
argument_list|,
name|wvaluebytes
argument_list|)
expr_stmt|;
name|wvaluebytes
operator|.
name|reset
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|checkOutputSpecs (JobContext job)
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|JobContext
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|checkOutputSpecs
argument_list|(
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCompressOutput
argument_list|(
name|job
argument_list|)
operator|&&
name|getOutputCompressionType
argument_list|(
name|job
argument_list|)
operator|==
name|CompressionType
operator|.
name|RECORD
condition|)
block|{
throw|throw
operator|new
name|InvalidJobConfException
argument_list|(
literal|"SequenceFileAsBinaryOutputFormat "
operator|+
literal|"doesn't support Record Compression"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

