begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.jobhistory
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ChecksumException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * JobHistory is the class that is responsible for creating and maintaining  * job history information.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|JobHistory
specifier|public
class|class
name|JobHistory
block|{
DECL|field|LOG
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JobHistory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|jobHistoryBlockSize
specifier|private
name|long
name|jobHistoryBlockSize
decl_stmt|;
DECL|field|fileMap
specifier|private
specifier|final
name|Map
argument_list|<
name|JobID
argument_list|,
name|MetaInfo
argument_list|>
name|fileMap
init|=
name|Collections
operator|.
expr|<
name|JobID
decl_stmt|,
name|MetaInfo
decl|>
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|JobID
argument_list|,
name|MetaInfo
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|executor
specifier|private
name|ThreadPoolExecutor
name|executor
init|=
literal|null
decl_stmt|;
DECL|field|HISTORY_DIR_PERMISSION
specifier|static
specifier|final
name|FsPermission
name|HISTORY_DIR_PERMISSION
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
decl_stmt|;
comment|// rwxr-x---
DECL|field|HISTORY_FILE_PERMISSION
specifier|public
specifier|static
specifier|final
name|FsPermission
name|HISTORY_FILE_PERMISSION
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0740
argument_list|)
decl_stmt|;
comment|// rwxr-----
DECL|field|jobTracker
specifier|private
name|JobTracker
name|jobTracker
decl_stmt|;
DECL|field|DEFAULT_HISTORY_MAX_AGE
specifier|static
specifier|final
name|long
name|DEFAULT_HISTORY_MAX_AGE
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
comment|//week
DECL|field|logDirFs
specifier|private
name|FileSystem
name|logDirFs
decl_stmt|;
comment|// log Dir FS
DECL|field|doneDirFs
specifier|private
name|FileSystem
name|doneDirFs
decl_stmt|;
comment|// done Dir FS
DECL|field|logDir
specifier|private
name|Path
name|logDir
init|=
literal|null
decl_stmt|;
DECL|field|done
specifier|private
name|Path
name|done
init|=
literal|null
decl_stmt|;
comment|// folder for completed jobs
DECL|field|OLD_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|OLD_SUFFIX
init|=
literal|".old"
decl_stmt|;
comment|// Version string that will prefix all History Files
DECL|field|HISTORY_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|HISTORY_VERSION
init|=
literal|"1.0"
decl_stmt|;
DECL|field|historyCleanerThread
specifier|private
name|HistoryCleaner
name|historyCleanerThread
init|=
literal|null
decl_stmt|;
DECL|field|jobHistoryFileMap
specifier|private
name|Map
argument_list|<
name|JobID
argument_list|,
name|MovedFileInfo
argument_list|>
name|jobHistoryFileMap
init|=
name|Collections
operator|.
expr|<
name|JobID
decl_stmt|,
name|MovedFileInfo
decl|>
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|JobID
argument_list|,
name|MovedFileInfo
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// JobHistory filename regex
DECL|field|JOBHISTORY_FILENAME_REGEX
specifier|public
specifier|static
specifier|final
name|Pattern
name|JOBHISTORY_FILENAME_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"("
operator|+
name|JobID
operator|.
name|JOBID_REGEX
operator|+
literal|")_.+"
argument_list|)
decl_stmt|;
comment|// JobHistory conf-filename regex
DECL|field|CONF_FILENAME_REGEX
specifier|public
specifier|static
specifier|final
name|Pattern
name|CONF_FILENAME_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"("
operator|+
name|JobID
operator|.
name|JOBID_REGEX
operator|+
literal|")_conf.xml(?:\\.[0-9]+\\.old)?"
argument_list|)
decl_stmt|;
DECL|class|MovedFileInfo
specifier|private
specifier|static
class|class
name|MovedFileInfo
block|{
DECL|field|historyFile
specifier|private
specifier|final
name|String
name|historyFile
decl_stmt|;
DECL|field|timestamp
specifier|private
specifier|final
name|long
name|timestamp
decl_stmt|;
DECL|method|MovedFileInfo (String historyFile, long timestamp)
specifier|public
name|MovedFileInfo
parameter_list|(
name|String
name|historyFile
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|historyFile
operator|=
name|historyFile
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
block|}
comment|/**    * Initialize Job History Module    * @param jt Job Tracker handle    * @param conf Configuration    * @param hostname Host name of JT    * @param jobTrackerStartTime Start time of JT    * @throws IOException    */
DECL|method|init (JobTracker jt, JobConf conf, String hostname, long jobTrackerStartTime)
specifier|public
name|void
name|init
parameter_list|(
name|JobTracker
name|jt
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|String
name|hostname
parameter_list|,
name|long
name|jobTrackerStartTime
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get and create the log folder
specifier|final
name|String
name|logDirLoc
init|=
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_LOCATION
argument_list|,
literal|"file:///"
operator|+
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"history"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"History log directory is "
operator|+
name|logDirLoc
argument_list|)
expr_stmt|;
name|logDir
operator|=
operator|new
name|Path
argument_list|(
name|logDirLoc
argument_list|)
expr_stmt|;
name|logDirFs
operator|=
name|logDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|logDirFs
operator|.
name|exists
argument_list|(
name|logDir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|logDirFs
operator|.
name|mkdirs
argument_list|(
name|logDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|HISTORY_DIR_PERMISSION
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|logDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_LOCATION
argument_list|,
name|logDirLoc
argument_list|)
expr_stmt|;
name|jobHistoryBlockSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_BLOCK_SIZE
argument_list|,
literal|3
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jobTracker
operator|=
name|jt
expr_stmt|;
block|}
comment|/** Initialize the done directory and start the history cleaner thread */
DECL|method|initDone (JobConf conf, FileSystem fs)
specifier|public
name|void
name|initDone
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
comment|//if completed job history location is set, use that
name|String
name|doneLocation
init|=
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_COMPLETED_LOCATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|doneLocation
operator|!=
literal|null
condition|)
block|{
name|Path
name|donePath
init|=
operator|new
name|Path
argument_list|(
name|doneLocation
argument_list|)
decl_stmt|;
name|doneDirFs
operator|=
name|donePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|done
operator|=
name|doneDirFs
operator|.
name|makeQualified
argument_list|(
name|donePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
name|logDirFs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|logDir
argument_list|,
literal|"done"
argument_list|)
argument_list|)
expr_stmt|;
name|doneDirFs
operator|=
name|logDirFs
expr_stmt|;
block|}
comment|//If not already present create the done folder with appropriate
comment|//permission
if|if
condition|(
operator|!
name|doneDirFs
operator|.
name|exists
argument_list|(
name|done
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating DONE folder at "
operator|+
name|done
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doneDirFs
operator|.
name|mkdirs
argument_list|(
name|done
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|HISTORY_DIR_PERMISSION
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|done
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Inited the done directory to "
operator|+
name|done
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|moveOldFiles
argument_list|()
expr_stmt|;
name|startFileMoverThreads
argument_list|()
expr_stmt|;
comment|// Start the History Cleaner Thread
name|long
name|maxAgeOfHistoryFiles
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_MAXAGE
argument_list|,
name|DEFAULT_HISTORY_MAX_AGE
argument_list|)
decl_stmt|;
name|historyCleanerThread
operator|=
operator|new
name|HistoryCleaner
argument_list|(
name|maxAgeOfHistoryFiles
argument_list|)
expr_stmt|;
name|historyCleanerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Move the completed job into the completed folder.    * This assumes that the job history file is closed and     * all operations on the job history file is complete.    * This *should* be the last call to job history for a given job.    */
DECL|method|markCompleted (JobID id)
specifier|public
name|void
name|markCompleted
parameter_list|(
name|JobID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|moveToDone
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/** Shut down JobHistory after stopping the History cleaner */
DECL|method|shutDown ()
specifier|public
name|void
name|shutDown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupting History Cleaner"
argument_list|)
expr_stmt|;
name|historyCleanerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|historyCleanerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error with shutting down history thread"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the history location    */
DECL|method|getJobHistoryLocation ()
specifier|public
name|Path
name|getJobHistoryLocation
parameter_list|()
block|{
return|return
name|logDir
return|;
block|}
comment|/**    * Get the history location for completed jobs    */
DECL|method|getCompletedJobHistoryLocation ()
specifier|public
name|Path
name|getCompletedJobHistoryLocation
parameter_list|()
block|{
return|return
name|done
return|;
block|}
comment|/**    * Get the job history file path    */
DECL|method|getJobHistoryFile (Path dir, JobID jobId, String user)
specifier|public
specifier|static
name|Path
name|getJobHistoryFile
parameter_list|(
name|Path
name|dir
parameter_list|,
name|JobID
name|jobId
parameter_list|,
name|String
name|user
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|user
argument_list|)
return|;
block|}
comment|/**    * Get the JobID from the history file's name. See it's companion method    * {@link #getJobHistoryFile(Path, JobID, String)} for how history file's name    * is constructed from a given JobID and userName.    *     * @param jobHistoryFilePath    * @return jobID    */
DECL|method|getJobIDFromHistoryFilePath (Path jobHistoryFilePath)
specifier|public
specifier|static
name|JobID
name|getJobIDFromHistoryFilePath
parameter_list|(
name|Path
name|jobHistoryFilePath
parameter_list|)
block|{
name|String
index|[]
name|jobDetails
init|=
name|jobHistoryFilePath
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|String
name|jobId
init|=
name|jobDetails
index|[
literal|0
index|]
operator|+
literal|"_"
operator|+
name|jobDetails
index|[
literal|1
index|]
operator|+
literal|"_"
operator|+
name|jobDetails
index|[
literal|2
index|]
decl_stmt|;
return|return
name|JobID
operator|.
name|forName
argument_list|(
name|jobId
argument_list|)
return|;
block|}
comment|/**    * Get the user name of the job-submitter from the history file's name. See    * it's companion method {@link #getJobHistoryFile(Path, JobID, String)} for    * how history file's name is constructed from a given JobID and username.    *     * @param jobHistoryFilePath    * @return the user-name    */
DECL|method|getUserFromHistoryFilePath (Path jobHistoryFilePath)
specifier|public
specifier|static
name|String
name|getUserFromHistoryFilePath
parameter_list|(
name|Path
name|jobHistoryFilePath
parameter_list|)
block|{
name|String
index|[]
name|jobDetails
init|=
name|jobHistoryFilePath
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
return|return
name|jobDetails
index|[
literal|3
index|]
return|;
block|}
comment|/**    * Given the job id, return the history file path from the cache    */
DECL|method|getHistoryFilePath (JobID jobId)
specifier|public
name|String
name|getHistoryFilePath
parameter_list|(
name|JobID
name|jobId
parameter_list|)
block|{
name|MovedFileInfo
name|info
init|=
name|jobHistoryFileMap
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|info
operator|.
name|historyFile
return|;
block|}
comment|/**    * Create an event writer for the Job represented by the jobID.    * This should be the first call to history for a job    * @param jobId    * @param jobConf    * @throws IOException    */
DECL|method|setupEventWriter (JobID jobId, JobConf jobConf)
specifier|public
name|void
name|setupEventWriter
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|logFile
init|=
name|getJobHistoryFile
argument_list|(
name|logDir
argument_list|,
name|jobId
argument_list|,
name|getUserName
argument_list|(
name|jobConf
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|logDir
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Log Directory is null, returning"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Missing Log Directory for History"
argument_list|)
throw|;
block|}
name|int
name|defaultBufferSize
init|=
name|logDirFs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SetupWriter, creating file "
operator|+
name|logFile
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|logDirFs
operator|.
name|create
argument_list|(
name|logFile
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobHistory
operator|.
name|HISTORY_FILE_PERMISSION
argument_list|)
argument_list|,
literal|true
argument_list|,
name|defaultBufferSize
argument_list|,
name|logDirFs
operator|.
name|getDefaultReplication
argument_list|()
argument_list|,
name|jobHistoryBlockSize
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|EventWriter
name|writer
init|=
operator|new
name|EventWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
comment|/* Storing the job conf on the log dir */
name|Path
name|logDirConfPath
init|=
name|getConfFile
argument_list|(
name|logDir
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"LogDirConfPath is "
operator|+
name|logDirConfPath
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|jobFileOut
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|logDirConfPath
operator|!=
literal|null
condition|)
block|{
name|defaultBufferSize
operator|=
name|logDirFs
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|logDirFs
operator|.
name|exists
argument_list|(
name|logDirConfPath
argument_list|)
condition|)
block|{
name|jobFileOut
operator|=
name|logDirFs
operator|.
name|create
argument_list|(
name|logDirConfPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobHistory
operator|.
name|HISTORY_FILE_PERMISSION
argument_list|)
argument_list|,
literal|true
argument_list|,
name|defaultBufferSize
argument_list|,
name|logDirFs
operator|.
name|getDefaultReplication
argument_list|()
argument_list|,
name|logDirFs
operator|.
name|getDefaultBlockSize
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|writeXml
argument_list|(
name|jobFileOut
argument_list|)
expr_stmt|;
name|jobFileOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to close the job configuration file "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MetaInfo
name|fi
init|=
operator|new
name|MetaInfo
argument_list|(
name|logFile
argument_list|,
name|logDirConfPath
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|fileMap
operator|.
name|put
argument_list|(
name|jobId
argument_list|,
name|fi
argument_list|)
expr_stmt|;
block|}
comment|/** Close the event writer for this id */
DECL|method|closeWriter (JobID id)
specifier|public
name|void
name|closeWriter
parameter_list|(
name|JobID
name|id
parameter_list|)
block|{
try|try
block|{
specifier|final
name|MetaInfo
name|mi
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|mi
operator|!=
literal|null
condition|)
block|{
name|mi
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error closing writer for JobID: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Method to log the specified event    * @param event The event to log    * @param id The Job ID of the event    */
DECL|method|logEvent (HistoryEvent event, JobID id)
specifier|public
name|void
name|logEvent
parameter_list|(
name|HistoryEvent
name|event
parameter_list|,
name|JobID
name|id
parameter_list|)
block|{
try|try
block|{
specifier|final
name|MetaInfo
name|mi
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|mi
operator|!=
literal|null
condition|)
block|{
name|mi
operator|.
name|writeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error Logging event, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|moveToDoneNow (Path fromPath, Path toPath)
specifier|private
name|void
name|moveToDoneNow
parameter_list|(
name|Path
name|fromPath
parameter_list|,
name|Path
name|toPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|//check if path exists, in case of retries it may not exist
if|if
condition|(
name|logDirFs
operator|.
name|exists
argument_list|(
name|fromPath
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving "
operator|+
name|fromPath
operator|.
name|toString
argument_list|()
operator|+
literal|" to "
operator|+
name|toPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|logDirFs
argument_list|,
name|fromPath
argument_list|,
name|doneDirFs
argument_list|,
name|toPath
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|jobTracker
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|doneDirFs
operator|.
name|setPermission
argument_list|(
name|toPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JobHistory
operator|.
name|HISTORY_FILE_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startFileMoverThreads ()
specifier|private
name|void
name|startFileMoverThreads
parameter_list|()
block|{
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the job conf file for the given jobId    *     * @param logDir    * @param jobId    * @return the jobconf.xml path    */
DECL|method|getConfFile (Path logDir, JobID jobId)
specifier|public
specifier|static
name|Path
name|getConfFile
parameter_list|(
name|Path
name|logDir
parameter_list|,
name|JobID
name|jobId
parameter_list|)
block|{
name|Path
name|jobFilePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|logDir
operator|!=
literal|null
condition|)
block|{
name|jobFilePath
operator|=
operator|new
name|Path
argument_list|(
name|logDir
operator|+
name|File
operator|.
name|separator
operator|+
name|jobId
operator|.
name|toString
argument_list|()
operator|+
literal|"_conf.xml"
argument_list|)
expr_stmt|;
block|}
return|return
name|jobFilePath
return|;
block|}
comment|/**    * Generates a suffix for old/stale jobhistory files    * Pattern : . + identifier + .old    */
DECL|method|getOldFileSuffix (String identifier)
specifier|public
specifier|static
name|String
name|getOldFileSuffix
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
return|return
literal|"."
operator|+
name|identifier
operator|+
name|JobHistory
operator|.
name|OLD_SUFFIX
return|;
block|}
DECL|method|moveOldFiles ()
specifier|private
name|void
name|moveOldFiles
parameter_list|()
throws|throws
name|IOException
block|{
comment|//move the log files remaining from last run to the DONE folder
comment|//suffix the file name based on Job tracker identifier so that history
comment|//files with same job id don't get over written in case of recovery.
name|FileStatus
index|[]
name|files
init|=
name|logDirFs
operator|.
name|listStatus
argument_list|(
name|logDir
argument_list|)
decl_stmt|;
name|String
name|fileSuffix
init|=
name|getOldFileSuffix
argument_list|(
name|jobTracker
operator|.
name|getTrackerIdentifier
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|files
control|)
block|{
name|Path
name|fromPath
init|=
name|fileStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromPath
operator|.
name|equals
argument_list|(
name|done
argument_list|)
condition|)
block|{
comment|//DONE can be a subfolder of log dir
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Moving log file from last run: "
operator|+
name|fromPath
argument_list|)
expr_stmt|;
name|Path
name|toPath
init|=
operator|new
name|Path
argument_list|(
name|done
argument_list|,
name|fromPath
operator|.
name|getName
argument_list|()
operator|+
name|fileSuffix
argument_list|)
decl_stmt|;
try|try
block|{
name|moveToDoneNow
argument_list|(
name|fromPath
argument_list|,
name|toPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChecksumException
name|e
parameter_list|)
block|{
comment|// If there is an exception moving the file to done because of
comment|// a checksum exception, just delete it
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to move "
operator|+
name|fromPath
operator|+
literal|", deleting it"
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|b
init|=
name|logDirFs
operator|.
name|delete
argument_list|(
name|fromPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deletion of corrupt file "
operator|+
name|fromPath
operator|+
literal|" returned "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Cannot delete either? Just log and carry on
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete "
operator|+
name|fromPath
operator|+
literal|"Exception: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Exceptions other than checksum, just log and continue
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error moving file "
operator|+
name|fromPath
operator|+
literal|" to done folder."
operator|+
literal|"Ignoring."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|moveToDone (final JobID id)
specifier|private
name|void
name|moveToDone
parameter_list|(
specifier|final
name|JobID
name|id
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|MetaInfo
name|metaInfo
init|=
name|fileMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No file for job-history with "
operator|+
name|id
operator|+
literal|" found in cache!"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Path
name|historyFile
init|=
name|metaInfo
operator|.
name|getHistoryFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|historyFile
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No file for job-history with "
operator|+
name|id
operator|+
literal|" found in cache!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|.
name|add
argument_list|(
name|historyFile
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|confPath
init|=
name|metaInfo
operator|.
name|getConfFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|confPath
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No file for jobconf with "
operator|+
name|id
operator|+
literal|" found in cache!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|.
name|add
argument_list|(
name|confPath
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|//move the files to DONE folder
try|try
block|{
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|moveToDoneNow
argument_list|(
name|path
argument_list|,
operator|new
name|Path
argument_list|(
name|done
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to move history file to DONE folder."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|String
name|historyFileDonePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|historyFile
operator|!=
literal|null
condition|)
block|{
name|historyFileDonePath
operator|=
operator|new
name|Path
argument_list|(
name|done
argument_list|,
name|historyFile
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|jobHistoryFileMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|MovedFileInfo
argument_list|(
name|historyFileDonePath
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|retireJob
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
operator|.
name|downgrade
argument_list|(
name|id
argument_list|)
argument_list|,
name|historyFileDonePath
argument_list|)
expr_stmt|;
comment|//purge the job from the cache
name|fileMap
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getUserName (JobConf jobConf)
specifier|private
name|String
name|getUserName
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
block|{
name|String
name|user
init|=
name|jobConf
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
DECL|class|MetaInfo
specifier|private
specifier|static
class|class
name|MetaInfo
block|{
DECL|field|historyFile
specifier|private
name|Path
name|historyFile
decl_stmt|;
DECL|field|confFile
specifier|private
name|Path
name|confFile
decl_stmt|;
DECL|field|writer
specifier|private
name|EventWriter
name|writer
decl_stmt|;
DECL|method|MetaInfo (Path historyFile, Path conf, EventWriter writer)
name|MetaInfo
parameter_list|(
name|Path
name|historyFile
parameter_list|,
name|Path
name|conf
parameter_list|,
name|EventWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|historyFile
operator|=
name|historyFile
expr_stmt|;
name|this
operator|.
name|confFile
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
DECL|method|getHistoryFile ()
name|Path
name|getHistoryFile
parameter_list|()
block|{
return|return
name|historyFile
return|;
block|}
DECL|method|getConfFile ()
name|Path
name|getConfFile
parameter_list|()
block|{
return|return
name|confFile
return|;
block|}
DECL|method|closeWriter ()
specifier|synchronized
name|void
name|closeWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|writer
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|writeEvent (HistoryEvent event)
specifier|synchronized
name|void
name|writeEvent
parameter_list|(
name|HistoryEvent
name|event
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Delete history files older than a specified time duration.    */
DECL|class|HistoryCleaner
class|class
name|HistoryCleaner
extends|extends
name|Thread
block|{
DECL|field|ONE_DAY_IN_MS
specifier|static
specifier|final
name|long
name|ONE_DAY_IN_MS
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
DECL|field|cleanupFrequency
specifier|private
name|long
name|cleanupFrequency
decl_stmt|;
DECL|field|maxAgeOfHistoryFiles
specifier|private
name|long
name|maxAgeOfHistoryFiles
decl_stmt|;
DECL|method|HistoryCleaner (long maxAge)
specifier|public
name|HistoryCleaner
parameter_list|(
name|long
name|maxAge
parameter_list|)
block|{
name|setName
argument_list|(
literal|"Thread for cleaning up History files"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxAgeOfHistoryFiles
operator|=
name|maxAge
expr_stmt|;
name|cleanupFrequency
operator|=
name|Math
operator|.
name|min
argument_list|(
name|ONE_DAY_IN_MS
argument_list|,
name|maxAgeOfHistoryFiles
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Job History Cleaner Thread started."
operator|+
literal|" MaxAge is "
operator|+
name|maxAge
operator|+
literal|" ms("
operator|+
operator|(
operator|(
name|float
operator|)
name|maxAge
operator|)
operator|/
operator|(
name|ONE_DAY_IN_MS
operator|)
operator|+
literal|" days),"
operator|+
literal|" Cleanup Frequency is "
operator|+
operator|+
name|cleanupFrequency
operator|+
literal|" ms ("
operator|+
operator|(
operator|(
name|float
operator|)
name|cleanupFrequency
operator|)
operator|/
name|ONE_DAY_IN_MS
operator|+
literal|" days)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|doCleanup
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|cleanupFrequency
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"History Cleaner thread exiting"
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"History cleaner thread threw an exception"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doCleanup ()
specifier|private
name|void
name|doCleanup
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|historyFiles
init|=
name|doneDirFs
operator|.
name|listStatus
argument_list|(
name|done
argument_list|)
decl_stmt|;
if|if
condition|(
name|historyFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileStatus
name|f
range|:
name|historyFiles
control|)
block|{
if|if
condition|(
name|now
operator|-
name|f
operator|.
name|getModificationTime
argument_list|()
operator|>
name|maxAgeOfHistoryFiles
condition|)
block|{
name|doneDirFs
operator|.
name|delete
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting old history file : "
operator|+
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//walking over the map to purge entries from jobHistoryFileMap
synchronized|synchronized
init|(
name|jobHistoryFileMap
init|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|JobID
argument_list|,
name|MovedFileInfo
argument_list|>
argument_list|>
name|it
init|=
name|jobHistoryFileMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MovedFileInfo
name|info
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|info
operator|.
name|timestamp
operator|>
name|maxAgeOfHistoryFiles
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//since entries are in sorted timestamp order, no more entries
comment|//are required to be checked
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error cleaning up history directory"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ie
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

