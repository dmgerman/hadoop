begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Counters
specifier|public
class|class
name|Counters
implements|implements
name|Writable
implements|,
name|Iterable
argument_list|<
name|CounterGroup
argument_list|>
block|{
comment|/**    * A cache from enum values to the associated counter. Dramatically speeds up    * typical usage.    */
DECL|field|cache
specifier|private
name|Map
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|,
name|Counter
argument_list|>
name|cache
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|,
name|Counter
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|groups
specifier|private
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CounterGroup
argument_list|>
name|groups
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|CounterGroup
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|Counters ()
specifier|public
name|Counters
parameter_list|()
block|{   }
comment|/**    * Utility method to  create a Counters object from the     * org.apache.hadoop.mapred counters    * @param counters    */
DECL|method|Counters (org.apache.hadoop.mapred.Counters counters)
specifier|public
name|Counters
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
name|counters
parameter_list|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
operator|.
name|Group
name|group
range|:
name|counters
control|)
block|{
name|String
name|name
init|=
name|group
operator|.
name|getName
argument_list|()
decl_stmt|;
name|CounterGroup
name|newGroup
init|=
operator|new
name|CounterGroup
argument_list|(
name|name
argument_list|,
name|group
operator|.
name|getDisplayName
argument_list|()
argument_list|)
decl_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|group
control|)
block|{
name|newGroup
operator|.
name|addCounter
argument_list|(
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Add a group. */
DECL|method|addGroup (CounterGroup group)
specifier|public
name|void
name|addGroup
parameter_list|(
name|CounterGroup
name|group
parameter_list|)
block|{
name|groups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
DECL|method|findCounter (String groupName, String counterName)
specifier|public
name|Counter
name|findCounter
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|counterName
parameter_list|)
block|{
name|CounterGroup
name|grp
init|=
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
return|return
name|grp
operator|.
name|findCounter
argument_list|(
name|counterName
argument_list|)
return|;
block|}
comment|/**    * Find the counter for the given enum. The same enum will always return the    * same counter.    * @param key the counter key    * @return the matching counter object    */
DECL|method|findCounter (Enum<?> key)
specifier|public
specifier|synchronized
name|Counter
name|findCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|key
parameter_list|)
block|{
name|Counter
name|counter
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
name|counter
operator|=
name|findCounter
argument_list|(
name|key
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
return|return
name|counter
return|;
block|}
comment|/**    * Returns the names of all counter classes.    * @return Set of counter names.    */
DECL|method|getGroupNames ()
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|String
argument_list|>
name|getGroupNames
parameter_list|()
block|{
return|return
name|groups
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|CounterGroup
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|groups
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**    * Returns the named counter group, or an empty group if there is none    * with the specified name.    */
DECL|method|getGroup (String groupName)
specifier|public
specifier|synchronized
name|CounterGroup
name|getGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|CounterGroup
name|grp
init|=
name|groups
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|grp
operator|==
literal|null
condition|)
block|{
name|grp
operator|=
operator|new
name|CounterGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|grp
argument_list|)
expr_stmt|;
block|}
return|return
name|grp
return|;
block|}
comment|/**    * Returns the total number of counters, by summing the number of counters    * in each group.    */
DECL|method|countCounters ()
specifier|public
specifier|synchronized
name|int
name|countCounters
parameter_list|()
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CounterGroup
name|group
range|:
name|this
control|)
block|{
name|result
operator|+=
name|group
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Write the set of groups.    * The external format is:    *     #groups (groupName group)*    *    * i.e. the number of groups followed by 0 or more groups, where each     * group is of the form:    *    *     groupDisplayName #counters (false | true counter)*    *    * where each counter is of the form:    *    *     name (false | true displayName) value    */
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|groups
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
name|group
range|:
name|groups
operator|.
name|values
argument_list|()
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read a set of groups.    */
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
specifier|synchronized
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numClasses
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|groups
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|numClasses
operator|--
operator|>
literal|0
condition|)
block|{
name|String
name|groupName
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|CounterGroup
name|group
init|=
operator|new
name|CounterGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|group
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Return textual representation of the counter values.    */
DECL|method|toString ()
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Counters: "
operator|+
name|countCounters
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CounterGroup
name|group
range|:
name|this
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t"
operator|+
name|group
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|group
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t\t"
operator|+
name|counter
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|"="
operator|+
name|counter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Increments multiple counters by their amounts in another Counters     * instance.    * @param other the other Counters instance    */
DECL|method|incrAllCounters (Counters other)
specifier|public
specifier|synchronized
name|void
name|incrAllCounters
parameter_list|(
name|Counters
name|other
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CounterGroup
argument_list|>
name|rightEntry
range|:
name|other
operator|.
name|groups
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CounterGroup
name|left
init|=
name|groups
operator|.
name|get
argument_list|(
name|rightEntry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|CounterGroup
name|right
init|=
name|rightEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
operator|==
literal|null
condition|)
block|{
name|left
operator|=
operator|new
name|CounterGroup
argument_list|(
name|right
operator|.
name|getName
argument_list|()
argument_list|,
name|right
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|rightEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|left
argument_list|)
expr_stmt|;
block|}
name|left
operator|.
name|incrAllCounters
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|equals (Object genericRight)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|genericRight
parameter_list|)
block|{
if|if
condition|(
name|genericRight
operator|instanceof
name|Counters
condition|)
block|{
name|Iterator
argument_list|<
name|CounterGroup
argument_list|>
name|right
init|=
operator|(
operator|(
name|Counters
operator|)
name|genericRight
operator|)
operator|.
name|groups
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|CounterGroup
argument_list|>
name|left
init|=
name|groups
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|left
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|right
operator|.
name|hasNext
argument_list|()
operator|||
operator|!
name|left
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|right
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
operator|!
name|right
operator|.
name|hasNext
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|groups
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

