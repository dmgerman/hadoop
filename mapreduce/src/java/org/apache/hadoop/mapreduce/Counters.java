begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|Limits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|GenericCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|AbstractCounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|CounterGroupBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|FileSystemCounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|AbstractCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|CounterGroupFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|counters
operator|.
name|FrameworkCounterGroup
import|;
end_import

begin_comment
comment|/**  *<p><code>Counters</code> holds per job/task counters, defined either by the  * Map-Reduce framework or applications. Each<code>Counter</code> can be of  * any {@link Enum} type.</p>  *  *<p><code>Counters</code> are bunched into {@link CounterGroup}s, each  * comprising of counters from a particular<code>Enum</code> class.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Counters
specifier|public
class|class
name|Counters
extends|extends
name|AbstractCounters
argument_list|<
name|Counter
argument_list|,
name|CounterGroup
argument_list|>
block|{
comment|// Mix framework group implementation into CounterGroup interface
DECL|class|FrameworkGroupImpl
specifier|private
specifier|static
class|class
name|FrameworkGroupImpl
parameter_list|<
name|T
extends|extends
name|Enum
parameter_list|<
name|T
parameter_list|>
parameter_list|>
extends|extends
name|FrameworkCounterGroup
argument_list|<
name|T
argument_list|,
name|Counter
argument_list|>
implements|implements
name|CounterGroup
block|{
DECL|method|FrameworkGroupImpl (Class<T> cls)
name|FrameworkGroupImpl
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
name|super
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newCounter (T key)
specifier|protected
name|FrameworkCounter
name|newCounter
parameter_list|(
name|T
name|key
parameter_list|)
block|{
return|return
operator|new
name|FrameworkCounter
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
comment|// Mix generic group implementation into CounterGroup interface
comment|// and provide some mandatory group factory methods.
DECL|class|GenericGroup
specifier|private
specifier|static
class|class
name|GenericGroup
extends|extends
name|AbstractCounterGroup
argument_list|<
name|Counter
argument_list|>
implements|implements
name|CounterGroup
block|{
DECL|method|GenericGroup (String name, String displayName, Limits limits)
name|GenericGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|Limits
name|limits
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|limits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newCounter (String name, String displayName, long value)
specifier|protected
name|Counter
name|newCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
return|return
operator|new
name|GenericCounter
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newCounter ()
specifier|protected
name|Counter
name|newCounter
parameter_list|()
block|{
return|return
operator|new
name|GenericCounter
argument_list|()
return|;
block|}
block|}
comment|// Mix file system group implementation into the CounterGroup interface
DECL|class|FileSystemGroup
specifier|private
specifier|static
class|class
name|FileSystemGroup
extends|extends
name|FileSystemCounterGroup
argument_list|<
name|Counter
argument_list|>
implements|implements
name|CounterGroup
block|{
annotation|@
name|Override
DECL|method|newCounter (String scheme, FileSystemCounter key)
specifier|protected
name|Counter
name|newCounter
parameter_list|(
name|String
name|scheme
parameter_list|,
name|FileSystemCounter
name|key
parameter_list|)
block|{
return|return
operator|new
name|FSCounter
argument_list|(
name|scheme
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
comment|/**    * Provide factory methods for counter group factory implementation.    * See also the GroupFactory in    *  {@link org.apache.hadoop.mapred.Counters mapred.Counters}    */
DECL|class|GroupFactory
specifier|private
specifier|static
class|class
name|GroupFactory
extends|extends
name|CounterGroupFactory
argument_list|<
name|Counter
argument_list|,
name|CounterGroup
argument_list|>
block|{
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
name|FrameworkGroupFactory
argument_list|<
name|CounterGroup
argument_list|>
DECL|method|newFrameworkGroupFactory (final Class<T> cls)
name|newFrameworkGroupFactory
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
return|return
operator|new
name|FrameworkGroupFactory
argument_list|<
name|CounterGroup
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CounterGroup
name|newGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|FrameworkGroupImpl
argument_list|<
name|T
argument_list|>
argument_list|(
name|cls
argument_list|)
return|;
comment|// impl in this package
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|newGenericGroup (String name, String displayName, Limits limits)
specifier|protected
name|CounterGroup
name|newGenericGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|Limits
name|limits
parameter_list|)
block|{
return|return
operator|new
name|GenericGroup
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|limits
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newFileSystemGroup ()
specifier|protected
name|CounterGroup
name|newFileSystemGroup
parameter_list|()
block|{
return|return
operator|new
name|FileSystemGroup
argument_list|()
return|;
block|}
block|}
DECL|field|groupFactory
specifier|private
specifier|static
specifier|final
name|GroupFactory
name|groupFactory
init|=
operator|new
name|GroupFactory
argument_list|()
decl_stmt|;
comment|/**    * Default constructor    */
DECL|method|Counters ()
specifier|public
name|Counters
parameter_list|()
block|{
name|super
argument_list|(
name|groupFactory
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct the Counters object from the another counters object    * @param<C> the type of counter    * @param<G> the type of counter group    * @param counters the old counters object    */
specifier|public
parameter_list|<
name|C
extends|extends
name|Counter
parameter_list|,
name|G
extends|extends
name|CounterGroupBase
argument_list|<
name|C
argument_list|>
parameter_list|>
DECL|method|Counters (AbstractCounters<C, G> counters)
name|Counters
parameter_list|(
name|AbstractCounters
argument_list|<
name|C
argument_list|,
name|G
argument_list|>
name|counters
parameter_list|)
block|{
name|super
argument_list|(
name|counters
argument_list|,
name|groupFactory
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

