begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.filecache
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|DistributedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Helper class of {@link TrackerDistributedCacheManager} that represents  * the cached files of a single task.  This class is used  * by TaskRunner/LocalJobRunner to parse out the job configuration  * and setup the local caches.  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|TaskDistributedCacheManager
specifier|public
class|class
name|TaskDistributedCacheManager
block|{
DECL|field|distributedCacheManager
specifier|private
specifier|final
name|TrackerDistributedCacheManager
name|distributedCacheManager
decl_stmt|;
DECL|field|taskConf
specifier|private
specifier|final
name|Configuration
name|taskConf
decl_stmt|;
DECL|field|cacheFiles
specifier|private
specifier|final
name|List
argument_list|<
name|CacheFile
argument_list|>
name|cacheFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|CacheFile
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|classPaths
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|classPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|setupCalled
specifier|private
name|boolean
name|setupCalled
init|=
literal|false
decl_stmt|;
comment|/**    * Struct representing a single cached file.    * There are four permutations (archive, file) and    * (don't put in classpath, do put in classpath).    */
DECL|class|CacheFile
specifier|static
class|class
name|CacheFile
block|{
comment|/** URI as in the configuration */
DECL|field|uri
specifier|final
name|URI
name|uri
decl_stmt|;
DECL|enum|FileType
enum|enum
name|FileType
block|{
DECL|enumConstant|REGULAR
name|REGULAR
block|,
DECL|enumConstant|ARCHIVE
name|ARCHIVE
block|}
DECL|field|isPublic
name|boolean
name|isPublic
init|=
literal|true
decl_stmt|;
comment|/** Whether to decompress */
DECL|field|type
specifier|final
name|FileType
name|type
decl_stmt|;
DECL|field|timestamp
specifier|final
name|long
name|timestamp
decl_stmt|;
comment|/** Whether this is to be added to the classpath */
DECL|field|shouldBeAddedToClassPath
specifier|final
name|boolean
name|shouldBeAddedToClassPath
decl_stmt|;
DECL|field|localized
name|boolean
name|localized
init|=
literal|false
decl_stmt|;
comment|/** The owner of the localized file. Relevant only on the tasktrackers */
DECL|field|owner
specifier|final
name|String
name|owner
decl_stmt|;
DECL|method|CacheFile (URI uri, FileType type, boolean isPublic, long timestamp, boolean classPath)
specifier|private
name|CacheFile
parameter_list|(
name|URI
name|uri
parameter_list|,
name|FileType
name|type
parameter_list|,
name|boolean
name|isPublic
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|boolean
name|classPath
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|isPublic
operator|=
name|isPublic
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|shouldBeAddedToClassPath
operator|=
name|classPath
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|TrackerDistributedCacheManager
operator|.
name|getLocalizedCacheOwner
argument_list|(
name|isPublic
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts the scheme used by DistributedCache to serialize what files to      * cache in the configuration into CacheFile objects that represent those       * files.      */
DECL|method|makeCacheFiles (URI[] uris, String[] timestamps, String cacheVisibilities[], Path[] paths, FileType type)
specifier|private
specifier|static
name|List
argument_list|<
name|CacheFile
argument_list|>
name|makeCacheFiles
parameter_list|(
name|URI
index|[]
name|uris
parameter_list|,
name|String
index|[]
name|timestamps
parameter_list|,
name|String
name|cacheVisibilities
index|[]
parameter_list|,
name|Path
index|[]
name|paths
parameter_list|,
name|FileType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CacheFile
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|CacheFile
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|uris
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|uris
operator|.
name|length
operator|!=
name|timestamps
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Mismatched uris and timestamps."
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|classPaths
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|paths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Path
name|p
range|:
name|paths
control|)
block|{
name|classPaths
operator|.
name|put
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uris
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|URI
name|u
init|=
name|uris
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|isClassPath
init|=
operator|(
literal|null
operator|!=
name|classPaths
operator|.
name|get
argument_list|(
name|u
operator|.
name|getPath
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|long
name|t
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|timestamps
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|CacheFile
argument_list|(
name|u
argument_list|,
name|type
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|cacheVisibilities
index|[
name|i
index|]
argument_list|)
argument_list|,
name|t
argument_list|,
name|isClassPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|getLocalized ()
name|boolean
name|getLocalized
parameter_list|()
block|{
return|return
name|localized
return|;
block|}
DECL|method|setLocalized (boolean val)
name|void
name|setLocalized
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|localized
operator|=
name|val
expr_stmt|;
block|}
block|}
DECL|method|TaskDistributedCacheManager ( TrackerDistributedCacheManager distributedCacheManager, Configuration taskConf)
name|TaskDistributedCacheManager
parameter_list|(
name|TrackerDistributedCacheManager
name|distributedCacheManager
parameter_list|,
name|Configuration
name|taskConf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|distributedCacheManager
operator|=
name|distributedCacheManager
expr_stmt|;
name|this
operator|.
name|taskConf
operator|=
name|taskConf
expr_stmt|;
name|this
operator|.
name|cacheFiles
operator|.
name|addAll
argument_list|(
name|CacheFile
operator|.
name|makeCacheFiles
argument_list|(
name|DistributedCache
operator|.
name|getCacheFiles
argument_list|(
name|taskConf
argument_list|)
argument_list|,
name|DistributedCache
operator|.
name|getFileTimestamps
argument_list|(
name|taskConf
argument_list|)
argument_list|,
name|TrackerDistributedCacheManager
operator|.
name|getFileVisibilities
argument_list|(
name|taskConf
argument_list|)
argument_list|,
name|DistributedCache
operator|.
name|getFileClassPaths
argument_list|(
name|taskConf
argument_list|)
argument_list|,
name|CacheFile
operator|.
name|FileType
operator|.
name|REGULAR
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheFiles
operator|.
name|addAll
argument_list|(
name|CacheFile
operator|.
name|makeCacheFiles
argument_list|(
name|DistributedCache
operator|.
name|getCacheArchives
argument_list|(
name|taskConf
argument_list|)
argument_list|,
name|DistributedCache
operator|.
name|getArchiveTimestamps
argument_list|(
name|taskConf
argument_list|)
argument_list|,
name|TrackerDistributedCacheManager
operator|.
name|getArchiveVisibilities
argument_list|(
name|taskConf
argument_list|)
argument_list|,
name|DistributedCache
operator|.
name|getArchiveClassPaths
argument_list|(
name|taskConf
argument_list|)
argument_list|,
name|CacheFile
operator|.
name|FileType
operator|.
name|ARCHIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Retrieve files into the local cache and updates the task configuration     * (which has been passed in via the constructor).    *     * It is the caller's responsibility to re-write the task configuration XML    * file, if necessary.    */
DECL|method|setup (LocalDirAllocator lDirAlloc, File workDir, String privateCacheSubdir, String publicCacheSubDir)
specifier|public
name|void
name|setup
parameter_list|(
name|LocalDirAllocator
name|lDirAlloc
parameter_list|,
name|File
name|workDir
parameter_list|,
name|String
name|privateCacheSubdir
parameter_list|,
name|String
name|publicCacheSubDir
parameter_list|)
throws|throws
name|IOException
block|{
name|setupCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cacheFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|localArchives
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|localFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|workdirPath
init|=
operator|new
name|Path
argument_list|(
name|workDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CacheFile
name|cacheFile
range|:
name|cacheFiles
control|)
block|{
name|URI
name|uri
init|=
name|cacheFile
operator|.
name|uri
decl_stmt|;
name|FileSystem
name|fileSystem
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|taskConf
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fileSystem
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|cacheSubdir
init|=
name|publicCacheSubDir
decl_stmt|;
if|if
condition|(
operator|!
name|cacheFile
operator|.
name|isPublic
condition|)
block|{
name|cacheSubdir
operator|=
name|privateCacheSubdir
expr_stmt|;
block|}
name|Path
name|p
init|=
name|distributedCacheManager
operator|.
name|getLocalCache
argument_list|(
name|uri
argument_list|,
name|taskConf
argument_list|,
name|cacheSubdir
argument_list|,
name|fileStatus
argument_list|,
name|cacheFile
operator|.
name|type
operator|==
name|CacheFile
operator|.
name|FileType
operator|.
name|ARCHIVE
argument_list|,
name|cacheFile
operator|.
name|timestamp
argument_list|,
name|workdirPath
argument_list|,
literal|false
argument_list|,
name|cacheFile
operator|.
name|isPublic
argument_list|)
decl_stmt|;
name|cacheFile
operator|.
name|setLocalized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheFile
operator|.
name|type
operator|==
name|CacheFile
operator|.
name|FileType
operator|.
name|ARCHIVE
condition|)
block|{
name|localArchives
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|localFiles
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheFile
operator|.
name|shouldBeAddedToClassPath
condition|)
block|{
name|classPaths
operator|.
name|add
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update the configuration object with localized data.
if|if
condition|(
operator|!
name|localArchives
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TrackerDistributedCacheManager
operator|.
name|setLocalArchives
argument_list|(
name|taskConf
argument_list|,
name|stringifyPathList
argument_list|(
name|localArchives
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|localFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TrackerDistributedCacheManager
operator|.
name|setLocalFiles
argument_list|(
name|taskConf
argument_list|,
name|stringifyPathList
argument_list|(
name|localFiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * This method is called from unit tests.    */
DECL|method|getCacheFiles ()
name|List
argument_list|<
name|CacheFile
argument_list|>
name|getCacheFiles
parameter_list|()
block|{
return|return
name|cacheFiles
return|;
block|}
DECL|method|stringifyPathList (List<Path> p)
specifier|private
specifier|static
name|String
name|stringifyPathList
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|p
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|str
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|p
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**     * Retrieves class paths (as local references) to add.     * Should be called after setup().    *     */
DECL|method|getClassPaths ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getClassPaths
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|setupCalled
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"getClassPaths() should be called after setup()"
argument_list|)
throw|;
block|}
return|return
name|classPaths
return|;
block|}
comment|/**    * Releases the cached files/archives, so that space    * can be reclaimed by the {@link TrackerDistributedCacheManager}.    */
DECL|method|release ()
specifier|public
name|void
name|release
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|CacheFile
name|c
range|:
name|cacheFiles
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getLocalized
argument_list|()
condition|)
block|{
name|distributedCacheManager
operator|.
name|releaseCache
argument_list|(
name|c
operator|.
name|uri
argument_list|,
name|taskConf
argument_list|,
name|c
operator|.
name|timestamp
argument_list|,
name|c
operator|.
name|owner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Creates a class loader that includes the designated    * files and archives.    */
DECL|method|makeClassLoader (final ClassLoader parent)
specifier|public
name|ClassLoader
name|makeClassLoader
parameter_list|(
specifier|final
name|ClassLoader
name|parent
parameter_list|)
throws|throws
name|MalformedURLException
block|{
specifier|final
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[
name|classPaths
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classPaths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|urls
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|classPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClassLoader
name|run
parameter_list|()
block|{
return|return
operator|new
name|URLClassLoader
argument_list|(
name|urls
argument_list|,
name|parent
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

