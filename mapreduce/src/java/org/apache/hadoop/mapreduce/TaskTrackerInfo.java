begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * Information about TaskTracker.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|TaskTrackerInfo
specifier|public
class|class
name|TaskTrackerInfo
implements|implements
name|Writable
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|isBlacklisted
name|boolean
name|isBlacklisted
init|=
literal|false
decl_stmt|;
DECL|field|reasonForBlacklist
name|String
name|reasonForBlacklist
init|=
literal|""
decl_stmt|;
DECL|field|blacklistReport
name|String
name|blacklistReport
init|=
literal|""
decl_stmt|;
DECL|method|TaskTrackerInfo ()
specifier|public
name|TaskTrackerInfo
parameter_list|()
block|{   }
comment|// construct an active tracker
DECL|method|TaskTrackerInfo (String name)
specifier|public
name|TaskTrackerInfo
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|// construct blacklisted tracker
DECL|method|TaskTrackerInfo (String name, String reasonForBlacklist, String report)
specifier|public
name|TaskTrackerInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|reasonForBlacklist
parameter_list|,
name|String
name|report
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|isBlacklisted
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|reasonForBlacklist
operator|=
name|reasonForBlacklist
expr_stmt|;
name|this
operator|.
name|blacklistReport
operator|=
name|report
expr_stmt|;
block|}
comment|/**    * Gets the tasktracker's name.    *     * @return tracker's name.    */
DECL|method|getTaskTrackerName ()
specifier|public
name|String
name|getTaskTrackerName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Whether tracker is blacklisted    * @return true if tracker is blacklisted    *         false otherwise    */
DECL|method|isBlacklisted ()
specifier|public
name|boolean
name|isBlacklisted
parameter_list|()
block|{
return|return
name|isBlacklisted
return|;
block|}
comment|/**    * Gets the reason for which the tasktracker was blacklisted.    *     * @return reason which tracker was blacklisted    */
DECL|method|getReasonForBlacklist ()
specifier|public
name|String
name|getReasonForBlacklist
parameter_list|()
block|{
return|return
name|reasonForBlacklist
return|;
block|}
comment|/**    * Gets a descriptive report about why the tasktracker was blacklisted.    *     * @return report describing why the tasktracker was blacklisted.    */
DECL|method|getBlacklistReport ()
specifier|public
name|String
name|getBlacklistReport
parameter_list|()
block|{
return|return
name|blacklistReport
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|isBlacklisted
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|reasonForBlacklist
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|blacklistReport
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|isBlacklisted
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|reasonForBlacklist
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|blacklistReport
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

