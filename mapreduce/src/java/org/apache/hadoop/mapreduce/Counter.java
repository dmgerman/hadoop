begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * A named counter that tracks the progress of a map/reduce job.  *   *<p><code>Counters</code> represent global counters, defined either by the   * Map-Reduce framework or applications. Each<code>Counter</code> is named by  * an {@link Enum} and has a long for the value.</p>  *   *<p><code>Counters</code> are bunched into Groups, each comprising of  * counters from a particular<code>Enum</code> class.   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Counter
specifier|public
class|class
name|Counter
implements|implements
name|Writable
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|displayName
specifier|private
name|String
name|displayName
decl_stmt|;
DECL|field|value
specifier|private
name|long
name|value
init|=
literal|0
decl_stmt|;
DECL|method|Counter ()
specifier|protected
name|Counter
parameter_list|()
block|{    }
DECL|method|Counter (String name, String displayName)
specifier|protected
name|Counter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
block|}
comment|/** Create a counter.    * @param name the name within the group's enum.    * @param displayName a name to be displayed.    * @param value the counter value.    */
DECL|method|Counter (String name, String displayName, long value)
specifier|public
name|Counter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|setDisplayName (String displayName)
specifier|protected
specifier|synchronized
name|void
name|setDisplayName
parameter_list|(
name|String
name|displayName
parameter_list|)
block|{
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
block|}
comment|/**    * Read the binary representation of the counter    */
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
specifier|synchronized
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|displayName
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|displayName
operator|=
name|name
expr_stmt|;
block|}
name|value
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write the binary representation of the counter    */
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|boolean
name|distinctDisplayName
init|=
operator|!
name|name
operator|.
name|equals
argument_list|(
name|displayName
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|distinctDisplayName
argument_list|)
expr_stmt|;
if|if
condition|(
name|distinctDisplayName
condition|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
block|}
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
specifier|synchronized
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Get the name of the counter.    * @return the user facing name of the counter    */
DECL|method|getDisplayName ()
specifier|public
specifier|synchronized
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|displayName
return|;
block|}
comment|/**    * What is the current value of this counter?    * @return the current value    */
DECL|method|getValue ()
specifier|public
specifier|synchronized
name|long
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**    * Set this counter by the given value    * @param value the value to set    */
DECL|method|setValue (long value)
specifier|public
specifier|synchronized
name|void
name|setValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Increment this counter by the given value    * @param incr the value to increase this counter by    */
DECL|method|increment (long incr)
specifier|public
specifier|synchronized
name|void
name|increment
parameter_list|(
name|long
name|incr
parameter_list|)
block|{
name|value
operator|+=
name|incr
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object genericRight)
specifier|public
specifier|synchronized
name|boolean
name|equals
parameter_list|(
name|Object
name|genericRight
parameter_list|)
block|{
if|if
condition|(
name|genericRight
operator|instanceof
name|Counter
condition|)
block|{
synchronized|synchronized
init|(
name|genericRight
init|)
block|{
name|Counter
name|right
init|=
operator|(
name|Counter
operator|)
name|genericRight
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|right
operator|.
name|name
argument_list|)
operator|&&
name|displayName
operator|.
name|equals
argument_list|(
name|right
operator|.
name|displayName
argument_list|)
operator|&&
name|value
operator|==
name|right
operator|.
name|value
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
specifier|synchronized
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
operator|+
name|displayName
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

