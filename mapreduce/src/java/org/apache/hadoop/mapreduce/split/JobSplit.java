begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.split
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * This class groups the fundamental classes associated with  * reading/writing splits. The split information is divided into  * two parts based on the consumer of the information. The two  * parts are the split meta information, and the raw split   * information. The first part is consumed by the JobTracker to  * create the tasks' locality data structures. The second part is  * used by the maps at runtime to know what to do!  * These pieces of information are written to two separate files.  * The metainformation file is slurped by the JobTracker during   * job initialization. A map task gets the meta information during  * the launch and it reads the raw split bytes directly from the   * file.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|JobSplit
specifier|public
class|class
name|JobSplit
block|{
DECL|field|META_SPLIT_VERSION
specifier|static
specifier|final
name|int
name|META_SPLIT_VERSION
init|=
literal|1
decl_stmt|;
DECL|field|META_SPLIT_FILE_HEADER
specifier|static
specifier|final
name|byte
index|[]
name|META_SPLIT_FILE_HEADER
decl_stmt|;
static|static
block|{
try|try
block|{
name|META_SPLIT_FILE_HEADER
operator|=
literal|"META-SPL"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|u
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|u
argument_list|)
throw|;
block|}
block|}
DECL|field|EMPTY_TASK_SPLIT
specifier|public
specifier|static
specifier|final
name|TaskSplitMetaInfo
name|EMPTY_TASK_SPLIT
init|=
operator|new
name|TaskSplitMetaInfo
argument_list|()
decl_stmt|;
comment|/**    * This represents the meta information about the task split.    * The main fields are     *     - start offset in actual split    *     - data length that will be processed in this split    *     - hosts on which this split is local    */
DECL|class|SplitMetaInfo
specifier|public
specifier|static
class|class
name|SplitMetaInfo
implements|implements
name|Writable
block|{
DECL|field|startOffset
specifier|private
name|long
name|startOffset
decl_stmt|;
DECL|field|inputDataLength
specifier|private
name|long
name|inputDataLength
decl_stmt|;
DECL|field|locations
specifier|private
name|String
index|[]
name|locations
decl_stmt|;
DECL|method|SplitMetaInfo ()
specifier|public
name|SplitMetaInfo
parameter_list|()
block|{}
DECL|method|SplitMetaInfo (String[] locations, long startOffset, long inputDataLength)
specifier|public
name|SplitMetaInfo
parameter_list|(
name|String
index|[]
name|locations
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|long
name|inputDataLength
parameter_list|)
block|{
name|this
operator|.
name|locations
operator|=
name|locations
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
name|this
operator|.
name|inputDataLength
operator|=
name|inputDataLength
expr_stmt|;
block|}
DECL|method|SplitMetaInfo (InputSplit split, long startOffset)
specifier|public
name|SplitMetaInfo
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|long
name|startOffset
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|locations
operator|=
name|split
operator|.
name|getLocations
argument_list|()
expr_stmt|;
name|this
operator|.
name|inputDataLength
operator|=
name|split
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
name|locations
return|;
block|}
DECL|method|getStartOffset ()
specifier|public
name|long
name|getStartOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
DECL|method|getInputDataLength ()
specifier|public
name|long
name|getInputDataLength
parameter_list|()
block|{
return|return
name|inputDataLength
return|;
block|}
DECL|method|setInputDataLocations (String[] locations)
specifier|public
name|void
name|setInputDataLocations
parameter_list|(
name|String
index|[]
name|locations
parameter_list|)
block|{
name|this
operator|.
name|locations
operator|=
name|locations
expr_stmt|;
block|}
DECL|method|setInputDataLength (long length)
specifier|public
name|void
name|setInputDataLength
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|inputDataLength
operator|=
name|length
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|locations
operator|=
operator|new
name|String
index|[
name|len
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|locations
index|[
name|i
index|]
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|startOffset
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|inputDataLength
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|locations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|startOffset
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|inputDataLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"data-size : "
operator|+
name|inputDataLength
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"start-offset : "
operator|+
name|startOffset
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"locations : "
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|loc
range|:
name|locations
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"  "
operator|+
name|loc
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * This represents the meta information about the task split that the     * JobTracker creates    */
DECL|class|TaskSplitMetaInfo
specifier|public
specifier|static
class|class
name|TaskSplitMetaInfo
block|{
DECL|field|splitIndex
specifier|private
name|TaskSplitIndex
name|splitIndex
decl_stmt|;
DECL|field|inputDataLength
specifier|private
name|long
name|inputDataLength
decl_stmt|;
DECL|field|locations
specifier|private
name|String
index|[]
name|locations
decl_stmt|;
DECL|method|TaskSplitMetaInfo ()
specifier|public
name|TaskSplitMetaInfo
parameter_list|()
block|{
name|this
operator|.
name|splitIndex
operator|=
operator|new
name|TaskSplitIndex
argument_list|()
expr_stmt|;
name|this
operator|.
name|locations
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|TaskSplitMetaInfo (TaskSplitIndex splitIndex, String[] locations, long inputDataLength)
specifier|public
name|TaskSplitMetaInfo
parameter_list|(
name|TaskSplitIndex
name|splitIndex
parameter_list|,
name|String
index|[]
name|locations
parameter_list|,
name|long
name|inputDataLength
parameter_list|)
block|{
name|this
operator|.
name|splitIndex
operator|=
name|splitIndex
expr_stmt|;
name|this
operator|.
name|locations
operator|=
name|locations
expr_stmt|;
name|this
operator|.
name|inputDataLength
operator|=
name|inputDataLength
expr_stmt|;
block|}
DECL|method|TaskSplitMetaInfo (InputSplit split, long startOffset)
specifier|public
name|TaskSplitMetaInfo
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|long
name|startOffset
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|this
argument_list|(
operator|new
name|TaskSplitIndex
argument_list|(
literal|""
argument_list|,
name|startOffset
argument_list|)
argument_list|,
name|split
operator|.
name|getLocations
argument_list|()
argument_list|,
name|split
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|TaskSplitMetaInfo (String[] locations, long startOffset, long inputDataLength)
specifier|public
name|TaskSplitMetaInfo
parameter_list|(
name|String
index|[]
name|locations
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|long
name|inputDataLength
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|TaskSplitIndex
argument_list|(
literal|""
argument_list|,
name|startOffset
argument_list|)
argument_list|,
name|locations
argument_list|,
name|inputDataLength
argument_list|)
expr_stmt|;
block|}
DECL|method|getSplitIndex ()
specifier|public
name|TaskSplitIndex
name|getSplitIndex
parameter_list|()
block|{
return|return
name|splitIndex
return|;
block|}
DECL|method|getSplitLocation ()
specifier|public
name|String
name|getSplitLocation
parameter_list|()
block|{
return|return
name|splitIndex
operator|.
name|getSplitLocation
argument_list|()
return|;
block|}
DECL|method|getInputDataLength ()
specifier|public
name|long
name|getInputDataLength
parameter_list|()
block|{
return|return
name|inputDataLength
return|;
block|}
DECL|method|getLocations ()
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
name|locations
return|;
block|}
DECL|method|getStartOffset ()
specifier|public
name|long
name|getStartOffset
parameter_list|()
block|{
return|return
name|splitIndex
operator|.
name|getStartOffset
argument_list|()
return|;
block|}
block|}
comment|/**    * This represents the meta information about the task split that the     * task gets    */
DECL|class|TaskSplitIndex
specifier|public
specifier|static
class|class
name|TaskSplitIndex
block|{
DECL|field|splitLocation
specifier|private
name|String
name|splitLocation
decl_stmt|;
DECL|field|startOffset
specifier|private
name|long
name|startOffset
decl_stmt|;
DECL|method|TaskSplitIndex ()
specifier|public
name|TaskSplitIndex
parameter_list|()
block|{
name|this
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|TaskSplitIndex (String splitLocation, long startOffset)
specifier|public
name|TaskSplitIndex
parameter_list|(
name|String
name|splitLocation
parameter_list|,
name|long
name|startOffset
parameter_list|)
block|{
name|this
operator|.
name|splitLocation
operator|=
name|splitLocation
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
block|}
DECL|method|getStartOffset ()
specifier|public
name|long
name|getStartOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
DECL|method|getSplitLocation ()
specifier|public
name|String
name|getSplitLocation
parameter_list|()
block|{
return|return
name|splitLocation
return|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|splitLocation
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|splitLocation
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|startOffset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

