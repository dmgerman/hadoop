begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|MissingResourceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * A group of {@link Counter}s that logically belong together. Typically,  * it is an {@link Enum} subclass and the counters are the values.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|CounterGroup
specifier|public
class|class
name|CounterGroup
implements|implements
name|Writable
implements|,
name|Iterable
argument_list|<
name|Counter
argument_list|>
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|displayName
specifier|private
name|String
name|displayName
decl_stmt|;
DECL|field|counters
specifier|private
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|counters
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|()
decl_stmt|;
comment|// Optional ResourceBundle for localization of group and counter names.
DECL|field|bundle
specifier|private
name|ResourceBundle
name|bundle
init|=
literal|null
decl_stmt|;
comment|/**    * Returns the specified resource bundle, or throws an exception.    * @throws MissingResourceException if the bundle isn't found    */
DECL|method|getResourceBundle (String enumClassName)
specifier|private
specifier|static
name|ResourceBundle
name|getResourceBundle
parameter_list|(
name|String
name|enumClassName
parameter_list|)
block|{
name|String
name|bundleName
init|=
name|enumClassName
operator|.
name|replace
argument_list|(
literal|'$'
argument_list|,
literal|'_'
argument_list|)
decl_stmt|;
return|return
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|bundleName
argument_list|)
return|;
block|}
DECL|method|CounterGroup (String name)
specifier|protected
name|CounterGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
try|try
block|{
name|bundle
operator|=
name|getResourceBundle
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|neverMind
parameter_list|)
block|{     }
name|displayName
operator|=
name|localize
argument_list|(
literal|"CounterGroupName"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/** Create a CounterGroup.    * @param name the name of the group's enum.    * @param displayName a name to be displayed for the group.    */
DECL|method|CounterGroup (String name, String displayName)
specifier|public
name|CounterGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
block|}
comment|/**    * Get the internal name of the group    * @return the internal name    */
DECL|method|getName ()
specifier|public
specifier|synchronized
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Get the display name of the group.    * @return the human readable name    */
DECL|method|getDisplayName ()
specifier|public
specifier|synchronized
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|displayName
return|;
block|}
comment|/** Add a counter to this group. */
DECL|method|addCounter (Counter counter)
specifier|public
specifier|synchronized
name|void
name|addCounter
parameter_list|(
name|Counter
name|counter
parameter_list|)
block|{
name|counters
operator|.
name|put
argument_list|(
name|counter
operator|.
name|getName
argument_list|()
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find a counter in a group.    * @param counterName the name of the counter    * @param displayName the display name of the counter    * @return the counter that was found or added    */
DECL|method|findCounter (String counterName, String displayName)
specifier|public
name|Counter
name|findCounter
parameter_list|(
name|String
name|counterName
parameter_list|,
name|String
name|displayName
parameter_list|)
block|{
name|Counter
name|result
init|=
name|counters
operator|.
name|get
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Counter
argument_list|(
name|counterName
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|counterName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|findCounter (String counterName)
specifier|public
specifier|synchronized
name|Counter
name|findCounter
parameter_list|(
name|String
name|counterName
parameter_list|)
block|{
name|Counter
name|result
init|=
name|counters
operator|.
name|get
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|String
name|displayName
init|=
name|localize
argument_list|(
name|counterName
argument_list|,
name|counterName
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|Counter
argument_list|(
name|counterName
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|counterName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|iterator ()
specifier|public
specifier|synchronized
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|counters
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|counters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|counters
operator|.
name|values
argument_list|()
control|)
block|{
name|counter
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFields (DataInput in)
specifier|public
specifier|synchronized
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|displayName
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|counters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Counter
name|counter
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
name|counter
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|counter
operator|.
name|getName
argument_list|()
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Looks up key in the ResourceBundle and returns the corresponding value.    * If the bundle or the key doesn't exist, returns the default value.    */
DECL|method|localize (String key, String defaultValue)
specifier|private
name|String
name|localize
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|result
init|=
name|defaultValue
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|=
name|bundle
operator|.
name|getString
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|mre
parameter_list|)
block|{       }
block|}
return|return
name|result
return|;
block|}
comment|/**    * Returns the number of counters in this group.    */
DECL|method|size ()
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|counters
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|equals (Object genericRight)
specifier|public
specifier|synchronized
name|boolean
name|equals
parameter_list|(
name|Object
name|genericRight
parameter_list|)
block|{
if|if
condition|(
name|genericRight
operator|instanceof
name|CounterGroup
condition|)
block|{
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|right
init|=
operator|(
operator|(
name|CounterGroup
operator|)
name|genericRight
operator|)
operator|.
name|counters
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|left
init|=
name|counters
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|left
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|right
operator|.
name|hasNext
argument_list|()
operator|||
operator|!
name|left
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|right
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
operator|!
name|right
operator|.
name|hasNext
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
specifier|public
specifier|synchronized
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|counters
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|incrAllCounters (CounterGroup rightGroup)
specifier|public
specifier|synchronized
name|void
name|incrAllCounters
parameter_list|(
name|CounterGroup
name|rightGroup
parameter_list|)
block|{
for|for
control|(
name|Counter
name|right
range|:
name|rightGroup
operator|.
name|counters
operator|.
name|values
argument_list|()
control|)
block|{
name|Counter
name|left
init|=
name|findCounter
argument_list|(
name|right
operator|.
name|getName
argument_list|()
argument_list|,
name|right
operator|.
name|getDisplayName
argument_list|()
argument_list|)
decl_stmt|;
name|left
operator|.
name|increment
argument_list|(
name|right
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

