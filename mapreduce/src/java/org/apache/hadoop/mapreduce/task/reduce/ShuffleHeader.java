begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.task.reduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|reduce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * Shuffle Header information that is sent by the TaskTracker and   * deciphered by the Fetcher thread of Reduce task  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|ShuffleHeader
specifier|public
class|class
name|ShuffleHeader
implements|implements
name|Writable
block|{
comment|/**    * The longest possible length of task attempt id that we will accept.    */
DECL|field|MAX_ID_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ID_LENGTH
init|=
literal|1000
decl_stmt|;
DECL|field|mapId
name|String
name|mapId
decl_stmt|;
DECL|field|uncompressedLength
name|long
name|uncompressedLength
decl_stmt|;
DECL|field|compressedLength
name|long
name|compressedLength
decl_stmt|;
DECL|field|forReduce
name|int
name|forReduce
decl_stmt|;
DECL|method|ShuffleHeader ()
specifier|public
name|ShuffleHeader
parameter_list|()
block|{ }
DECL|method|ShuffleHeader (String mapId, long compressedLength, long uncompressedLength, int forReduce)
specifier|public
name|ShuffleHeader
parameter_list|(
name|String
name|mapId
parameter_list|,
name|long
name|compressedLength
parameter_list|,
name|long
name|uncompressedLength
parameter_list|,
name|int
name|forReduce
parameter_list|)
block|{
name|this
operator|.
name|mapId
operator|=
name|mapId
expr_stmt|;
name|this
operator|.
name|compressedLength
operator|=
name|compressedLength
expr_stmt|;
name|this
operator|.
name|uncompressedLength
operator|=
name|uncompressedLength
expr_stmt|;
name|this
operator|.
name|forReduce
operator|=
name|forReduce
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|mapId
operator|=
name|WritableUtils
operator|.
name|readStringSafely
argument_list|(
name|in
argument_list|,
name|MAX_ID_LENGTH
argument_list|)
expr_stmt|;
name|compressedLength
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|uncompressedLength
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|forReduce
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|mapId
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|compressedLength
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|uncompressedLength
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|forReduce
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

