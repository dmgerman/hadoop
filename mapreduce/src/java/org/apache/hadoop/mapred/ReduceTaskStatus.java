begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|ReduceTaskStatus
class|class
name|ReduceTaskStatus
extends|extends
name|TaskStatus
block|{
DECL|field|shuffleFinishTime
specifier|private
name|long
name|shuffleFinishTime
decl_stmt|;
DECL|field|sortFinishTime
specifier|private
name|long
name|sortFinishTime
decl_stmt|;
DECL|field|failedFetchTasks
specifier|private
name|List
argument_list|<
name|TaskAttemptID
argument_list|>
name|failedFetchTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|ReduceTaskStatus ()
specifier|public
name|ReduceTaskStatus
parameter_list|()
block|{}
DECL|method|ReduceTaskStatus (TaskAttemptID taskid, float progress, int numSlots, State runState, String diagnosticInfo, String stateString, String taskTracker, Phase phase, Counters counters)
specifier|public
name|ReduceTaskStatus
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|float
name|progress
parameter_list|,
name|int
name|numSlots
parameter_list|,
name|State
name|runState
parameter_list|,
name|String
name|diagnosticInfo
parameter_list|,
name|String
name|stateString
parameter_list|,
name|String
name|taskTracker
parameter_list|,
name|Phase
name|phase
parameter_list|,
name|Counters
name|counters
parameter_list|)
block|{
name|super
argument_list|(
name|taskid
argument_list|,
name|progress
argument_list|,
name|numSlots
argument_list|,
name|runState
argument_list|,
name|diagnosticInfo
argument_list|,
name|stateString
argument_list|,
name|taskTracker
argument_list|,
name|phase
argument_list|,
name|counters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone ()
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|ReduceTaskStatus
name|myClone
init|=
operator|(
name|ReduceTaskStatus
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|myClone
operator|.
name|failedFetchTasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|(
name|failedFetchTasks
argument_list|)
expr_stmt|;
return|return
name|myClone
return|;
block|}
annotation|@
name|Override
DECL|method|getIsMap ()
specifier|public
name|boolean
name|getIsMap
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setFinishTime (long finishTime)
name|void
name|setFinishTime
parameter_list|(
name|long
name|finishTime
parameter_list|)
block|{
if|if
condition|(
name|shuffleFinishTime
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|shuffleFinishTime
operator|=
name|finishTime
expr_stmt|;
block|}
if|if
condition|(
name|sortFinishTime
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|sortFinishTime
operator|=
name|finishTime
expr_stmt|;
block|}
name|super
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getShuffleFinishTime ()
specifier|public
name|long
name|getShuffleFinishTime
parameter_list|()
block|{
return|return
name|shuffleFinishTime
return|;
block|}
annotation|@
name|Override
DECL|method|setShuffleFinishTime (long shuffleFinishTime)
name|void
name|setShuffleFinishTime
parameter_list|(
name|long
name|shuffleFinishTime
parameter_list|)
block|{
name|this
operator|.
name|shuffleFinishTime
operator|=
name|shuffleFinishTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSortFinishTime ()
specifier|public
name|long
name|getSortFinishTime
parameter_list|()
block|{
return|return
name|sortFinishTime
return|;
block|}
annotation|@
name|Override
DECL|method|setSortFinishTime (long sortFinishTime)
name|void
name|setSortFinishTime
parameter_list|(
name|long
name|sortFinishTime
parameter_list|)
block|{
name|this
operator|.
name|sortFinishTime
operator|=
name|sortFinishTime
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|this
operator|.
name|shuffleFinishTime
condition|)
block|{
name|this
operator|.
name|shuffleFinishTime
operator|=
name|sortFinishTime
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMapFinishTime ()
specifier|public
name|long
name|getMapFinishTime
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getMapFinishTime() not supported for ReduceTask"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setMapFinishTime (long shuffleFinishTime)
name|void
name|setMapFinishTime
parameter_list|(
name|long
name|shuffleFinishTime
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"setMapFinishTime() not supported for ReduceTask"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getFetchFailedMaps ()
specifier|public
name|List
argument_list|<
name|TaskAttemptID
argument_list|>
name|getFetchFailedMaps
parameter_list|()
block|{
return|return
name|failedFetchTasks
return|;
block|}
annotation|@
name|Override
DECL|method|addFetchFailedMap (TaskAttemptID mapTaskId)
specifier|public
name|void
name|addFetchFailedMap
parameter_list|(
name|TaskAttemptID
name|mapTaskId
parameter_list|)
block|{
name|failedFetchTasks
operator|.
name|add
argument_list|(
name|mapTaskId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|statusUpdate (TaskStatus status)
specifier|synchronized
name|void
name|statusUpdate
parameter_list|(
name|TaskStatus
name|status
parameter_list|)
block|{
name|super
operator|.
name|statusUpdate
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getShuffleFinishTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|shuffleFinishTime
operator|=
name|status
operator|.
name|getShuffleFinishTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getSortFinishTime
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sortFinishTime
operator|=
name|status
operator|.
name|getSortFinishTime
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|TaskAttemptID
argument_list|>
name|newFetchFailedMaps
init|=
name|status
operator|.
name|getFetchFailedMaps
argument_list|()
decl_stmt|;
if|if
condition|(
name|failedFetchTasks
operator|==
literal|null
condition|)
block|{
name|failedFetchTasks
operator|=
name|newFetchFailedMaps
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newFetchFailedMaps
operator|!=
literal|null
condition|)
block|{
name|failedFetchTasks
operator|.
name|addAll
argument_list|(
name|newFetchFailedMaps
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clearStatus ()
specifier|synchronized
name|void
name|clearStatus
parameter_list|()
block|{
name|super
operator|.
name|clearStatus
argument_list|()
expr_stmt|;
name|failedFetchTasks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shuffleFinishTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|sortFinishTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|noFailedFetchTasks
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|failedFetchTasks
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|(
name|noFailedFetchTasks
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noFailedFetchTasks
condition|;
operator|++
name|i
control|)
block|{
name|TaskAttemptID
name|id
init|=
operator|new
name|TaskAttemptID
argument_list|()
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|failedFetchTasks
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|shuffleFinishTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|sortFinishTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|failedFetchTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskAttemptID
name|taskId
range|:
name|failedFetchTasks
control|)
block|{
name|taskId
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

