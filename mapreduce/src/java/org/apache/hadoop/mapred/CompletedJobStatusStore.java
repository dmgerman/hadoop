begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|DiskChecker
operator|.
name|DiskErrorException
import|;
end_import

begin_comment
comment|/**  * Persists and retrieves the Job info of a job into/from DFS.  *<p/>  * If the retain time is zero jobs are not persisted.  *<p/>  * A daemon thread cleans up job info files older than the retain time  *<p/>  * The retain time can be set with the 'persist.jobstatus.hours'  * configuration variable (it is in hours).  */
end_comment

begin_class
DECL|class|CompletedJobStatusStore
class|class
name|CompletedJobStatusStore
implements|implements
name|Runnable
block|{
DECL|field|active
specifier|private
name|boolean
name|active
decl_stmt|;
DECL|field|jobInfoDir
specifier|private
name|String
name|jobInfoDir
decl_stmt|;
DECL|field|retainTime
specifier|private
name|long
name|retainTime
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|JOB_INFO_STORE_DIR
specifier|private
specifier|static
specifier|final
name|String
name|JOB_INFO_STORE_DIR
init|=
literal|"/jobtracker/jobsInfo"
decl_stmt|;
DECL|field|aclsManager
specifier|private
name|ACLsManager
name|aclsManager
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompletedJobStatusStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|HOUR
specifier|private
specifier|static
name|long
name|HOUR
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|SLEEP_TIME
specifier|private
specifier|static
name|long
name|SLEEP_TIME
init|=
literal|1
operator|*
name|HOUR
decl_stmt|;
DECL|field|JOB_STATUS_STORE_DIR_PERMISSION
specifier|final
specifier|static
name|FsPermission
name|JOB_STATUS_STORE_DIR_PERMISSION
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0750
argument_list|)
decl_stmt|;
comment|// rwxr-x--
DECL|method|CompletedJobStatusStore (Configuration conf, ACLsManager aclsManager)
name|CompletedJobStatusStore
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ACLsManager
name|aclsManager
parameter_list|)
throws|throws
name|IOException
block|{
name|active
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|active
condition|)
block|{
name|retainTime
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS_HOURS
argument_list|,
literal|1
argument_list|)
operator|*
name|HOUR
expr_stmt|;
name|jobInfoDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS_DIR
argument_list|,
name|JOB_INFO_STORE_DIR
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|jobInfoDir
argument_list|)
decl_stmt|;
comment|// set the fs
name|this
operator|.
name|fs
operator|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|JOB_STATUS_STORE_DIR_PERMISSION
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"CompletedJobStatusStore mkdirs failed to create "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FsPermission
name|actual
init|=
name|stat
operator|.
name|getPermission
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|stat
operator|.
name|isDir
argument_list|()
condition|)
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"not a directory: "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
name|FsAction
name|user
init|=
name|actual
operator|.
name|getUserAction
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"directory is not readable: "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|user
operator|.
name|implies
argument_list|(
name|FsAction
operator|.
name|WRITE
argument_list|)
condition|)
throw|throw
operator|new
name|DiskErrorException
argument_list|(
literal|"directory is not writable: "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|retainTime
operator|==
literal|0
condition|)
block|{
comment|// as retain time is zero, all stored jobstatuses are deleted.
name|deleteJobStatusDirs
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|aclsManager
operator|=
name|aclsManager
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed job store activated/configured with retain-time : "
operator|+
name|retainTime
operator|+
literal|" , job-info-dir : "
operator|+
name|jobInfoDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed job store is inactive"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Indicates if job status persistency is active or not.    *    * @return TRUE if active, FALSE otherwise.    */
DECL|method|isActive ()
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|active
return|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|retainTime
operator|>
literal|0
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|deleteJobStatusDirs
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
block|}
DECL|method|deleteJobStatusDirs ()
specifier|private
name|void
name|deleteJobStatusDirs
parameter_list|()
block|{
try|try
block|{
name|long
name|currentTime
init|=
name|JobTracker
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|//noinspection ForLoopReplaceableByForEach
for|for
control|(
name|FileStatus
name|jobInfo
range|:
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|jobInfoDir
argument_list|)
argument_list|)
control|)
block|{
try|try
block|{
if|if
condition|(
operator|(
name|currentTime
operator|-
name|jobInfo
operator|.
name|getModificationTime
argument_list|()
operator|)
operator|>
name|retainTime
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Retiring job status from the store ["
operator|+
name|jobInfo
operator|.
name|getPath
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|jobInfo
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not do housekeeping for [ "
operator|+
name|jobInfo
operator|.
name|getPath
argument_list|()
operator|+
literal|"] job info : "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not obtain job info files : "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getInfoFilePath (JobID jobId)
specifier|private
name|Path
name|getInfoFilePath
parameter_list|(
name|JobID
name|jobId
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|jobInfoDir
argument_list|,
name|jobId
operator|+
literal|".info"
argument_list|)
return|;
block|}
comment|/**    * Persists a job in DFS.    *    * @param job the job about to be 'retired'    */
DECL|method|store (JobInProgress job)
specifier|public
name|void
name|store
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
if|if
condition|(
name|active
operator|&&
name|retainTime
operator|>
literal|0
condition|)
block|{
name|JobID
name|jobId
init|=
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|Path
name|jobStatusFile
init|=
name|getInfoFilePath
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
try|try
block|{
name|FSDataOutputStream
name|dataOut
init|=
name|fs
operator|.
name|create
argument_list|(
name|jobStatusFile
argument_list|)
decl_stmt|;
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|write
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|job
operator|.
name|getProfile
argument_list|()
operator|.
name|write
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|job
operator|.
name|getCounters
argument_list|()
operator|.
name|write
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|TaskCompletionEvent
index|[]
name|events
init|=
name|job
operator|.
name|getTaskCompletionEvents
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|events
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskCompletionEvent
name|event
range|:
name|events
control|)
block|{
name|event
operator|.
name|write
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not store ["
operator|+
name|jobId
operator|+
literal|"] job info : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|jobStatusFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex1
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
DECL|method|getJobInfoFile (JobID jobId)
specifier|private
name|FSDataInputStream
name|getJobInfoFile
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|jobStatusFile
init|=
name|getInfoFilePath
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
return|return
operator|(
name|fs
operator|.
name|exists
argument_list|(
name|jobStatusFile
argument_list|)
operator|)
condition|?
name|fs
operator|.
name|open
argument_list|(
name|jobStatusFile
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|readJobStatus (FSDataInputStream dataIn)
specifier|private
name|JobStatus
name|readJobStatus
parameter_list|(
name|FSDataInputStream
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|JobStatus
name|jobStatus
init|=
operator|new
name|JobStatus
argument_list|()
decl_stmt|;
name|jobStatus
operator|.
name|readFields
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|jobStatus
return|;
block|}
DECL|method|readJobProfile (FSDataInputStream dataIn)
specifier|private
name|JobProfile
name|readJobProfile
parameter_list|(
name|FSDataInputStream
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|JobProfile
name|jobProfile
init|=
operator|new
name|JobProfile
argument_list|()
decl_stmt|;
name|jobProfile
operator|.
name|readFields
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|jobProfile
return|;
block|}
DECL|method|readCounters (FSDataInputStream dataIn)
specifier|private
name|Counters
name|readCounters
parameter_list|(
name|FSDataInputStream
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|readFields
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|counters
return|;
block|}
DECL|method|readEvents (FSDataInputStream dataIn, int offset, int len)
specifier|private
name|TaskCompletionEvent
index|[]
name|readEvents
parameter_list|(
name|FSDataInputStream
name|dataIn
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|>
name|size
condition|)
block|{
return|return
name|TaskCompletionEvent
operator|.
name|EMPTY_ARRAY
return|;
block|}
if|if
condition|(
name|offset
operator|+
name|len
operator|>
name|size
condition|)
block|{
name|len
operator|=
name|size
operator|-
name|offset
expr_stmt|;
block|}
name|TaskCompletionEvent
index|[]
name|events
init|=
operator|new
name|TaskCompletionEvent
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|offset
operator|+
name|len
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|TaskCompletionEvent
name|event
init|=
operator|new
name|TaskCompletionEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|readFields
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|offset
condition|)
block|{
name|events
index|[
name|i
operator|-
name|offset
index|]
operator|=
name|event
expr_stmt|;
block|}
block|}
return|return
name|events
return|;
block|}
comment|/**    * This method retrieves JobStatus information from DFS stored using    * store method.    *    * @param jobId the jobId for which jobStatus is queried    * @return JobStatus object, null if not able to retrieve    */
DECL|method|readJobStatus (JobID jobId)
specifier|public
name|JobStatus
name|readJobStatus
parameter_list|(
name|JobID
name|jobId
parameter_list|)
block|{
name|JobStatus
name|jobStatus
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|jobId
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not read job status for null jobId"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|active
condition|)
block|{
try|try
block|{
name|FSDataInputStream
name|dataIn
init|=
name|getJobInfoFile
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataIn
operator|!=
literal|null
condition|)
block|{
name|jobStatus
operator|=
name|readJobStatus
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|dataIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not read ["
operator|+
name|jobId
operator|+
literal|"] job status : "
operator|+
name|ex
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jobStatus
return|;
block|}
comment|/**    * This method retrieves JobProfile information from DFS stored using    * store method.    *    * @param jobId the jobId for which jobProfile is queried    * @return JobProfile object, null if not able to retrieve    */
DECL|method|readJobProfile (JobID jobId)
specifier|public
name|JobProfile
name|readJobProfile
parameter_list|(
name|JobID
name|jobId
parameter_list|)
block|{
name|JobProfile
name|jobProfile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|active
condition|)
block|{
try|try
block|{
name|FSDataInputStream
name|dataIn
init|=
name|getJobInfoFile
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataIn
operator|!=
literal|null
condition|)
block|{
name|readJobStatus
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|jobProfile
operator|=
name|readJobProfile
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|dataIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not read ["
operator|+
name|jobId
operator|+
literal|"] job profile : "
operator|+
name|ex
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jobProfile
return|;
block|}
comment|/**    * This method retrieves Counters information from file stored using    * store method.    *    * @param jobId the jobId for which Counters is queried    * @return Counters object, null if not able to retrieve    * @throws AccessControlException     */
DECL|method|readCounters (JobID jobId)
specifier|public
name|Counters
name|readCounters
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|Counters
name|counters
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|active
condition|)
block|{
try|try
block|{
name|FSDataInputStream
name|dataIn
init|=
name|getJobInfoFile
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataIn
operator|!=
literal|null
condition|)
block|{
name|JobStatus
name|jobStatus
init|=
name|readJobStatus
argument_list|(
name|dataIn
argument_list|)
decl_stmt|;
name|JobProfile
name|profile
init|=
name|readJobProfile
argument_list|(
name|dataIn
argument_list|)
decl_stmt|;
name|String
name|queue
init|=
name|profile
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
comment|// authorize the user for job view access
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|jobStatus
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|queue
argument_list|,
name|Operation
operator|.
name|VIEW_JOB_COUNTERS
argument_list|)
expr_stmt|;
name|counters
operator|=
name|readCounters
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|dataIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
throw|throw
name|ace
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not read ["
operator|+
name|jobId
operator|+
literal|"] job counters : "
operator|+
name|ex
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counters
return|;
block|}
comment|/**    * This method retrieves TaskCompletionEvents information from DFS stored    * using store method.    *    * @param jobId       the jobId for which TaskCompletionEvents is queried    * @param fromEventId events offset    * @param maxEvents   max number of events    * @return TaskCompletionEvent[], empty array if not able to retrieve    */
DECL|method|readJobTaskCompletionEvents (JobID jobId, int fromEventId, int maxEvents)
specifier|public
name|TaskCompletionEvent
index|[]
name|readJobTaskCompletionEvents
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|int
name|fromEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|)
block|{
name|TaskCompletionEvent
index|[]
name|events
init|=
name|TaskCompletionEvent
operator|.
name|EMPTY_ARRAY
decl_stmt|;
if|if
condition|(
name|active
condition|)
block|{
try|try
block|{
name|FSDataInputStream
name|dataIn
init|=
name|getJobInfoFile
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataIn
operator|!=
literal|null
condition|)
block|{
name|readJobStatus
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|readJobProfile
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|readCounters
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|events
operator|=
name|readEvents
argument_list|(
name|dataIn
argument_list|,
name|fromEventId
argument_list|,
name|maxEvents
argument_list|)
expr_stmt|;
name|dataIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not read ["
operator|+
name|jobId
operator|+
literal|"] job events : "
operator|+
name|ex
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|events
return|;
block|}
block|}
end_class

end_unit

