begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.lib.aggregate
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_comment
comment|/**   * This class implements the common functionalities of   * the subclasses of ValueAggregatorDescriptor class.  *   * @deprecated Use   * {@link org.apache.hadoop.mapreduce.lib.aggregate.ValueAggregatorBaseDescriptor}  * instead  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|ValueAggregatorBaseDescriptor
specifier|public
class|class
name|ValueAggregatorBaseDescriptor
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
implements|implements
name|ValueAggregatorDescriptor
block|{
DECL|field|UNIQ_VALUE_COUNT
specifier|static
specifier|public
specifier|final
name|String
name|UNIQ_VALUE_COUNT
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
operator|.
name|UNIQ_VALUE_COUNT
decl_stmt|;
DECL|field|LONG_VALUE_SUM
specifier|static
specifier|public
specifier|final
name|String
name|LONG_VALUE_SUM
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
operator|.
name|LONG_VALUE_SUM
decl_stmt|;
DECL|field|DOUBLE_VALUE_SUM
specifier|static
specifier|public
specifier|final
name|String
name|DOUBLE_VALUE_SUM
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
operator|.
name|DOUBLE_VALUE_SUM
decl_stmt|;
DECL|field|VALUE_HISTOGRAM
specifier|static
specifier|public
specifier|final
name|String
name|VALUE_HISTOGRAM
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
operator|.
name|VALUE_HISTOGRAM
decl_stmt|;
DECL|field|LONG_VALUE_MAX
specifier|static
specifier|public
specifier|final
name|String
name|LONG_VALUE_MAX
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
operator|.
name|LONG_VALUE_MAX
decl_stmt|;
DECL|field|LONG_VALUE_MIN
specifier|static
specifier|public
specifier|final
name|String
name|LONG_VALUE_MIN
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
operator|.
name|LONG_VALUE_MIN
decl_stmt|;
DECL|field|STRING_VALUE_MAX
specifier|static
specifier|public
specifier|final
name|String
name|STRING_VALUE_MAX
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
operator|.
name|STRING_VALUE_MAX
decl_stmt|;
DECL|field|STRING_VALUE_MIN
specifier|static
specifier|public
specifier|final
name|String
name|STRING_VALUE_MIN
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
operator|.
name|STRING_VALUE_MIN
decl_stmt|;
DECL|field|maxNumItems
specifier|private
specifier|static
name|long
name|maxNumItems
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**    *     * @param type the aggregation type    * @param id the aggregation id    * @param val the val associated with the id to be aggregated    * @return an Entry whose key is the aggregation id prefixed with     * the aggregation type.    */
DECL|method|generateEntry (String type, String id, Text val)
specifier|public
specifier|static
name|Entry
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|generateEntry
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Text
name|val
parameter_list|)
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorBaseDescriptor
operator|.
name|generateEntry
argument_list|(
name|type
argument_list|,
name|id
argument_list|,
name|val
argument_list|)
return|;
block|}
comment|/**    *     * @param type the aggregation type    * @return a value aggregator of the given type.    */
DECL|method|generateValueAggregator (String type)
specifier|static
specifier|public
name|ValueAggregator
name|generateValueAggregator
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|ValueAggregator
name|retv
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|compareToIgnoreCase
argument_list|(
name|LONG_VALUE_SUM
argument_list|)
operator|==
literal|0
condition|)
block|{
name|retv
operator|=
operator|new
name|LongValueSum
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|compareToIgnoreCase
argument_list|(
name|LONG_VALUE_MAX
argument_list|)
operator|==
literal|0
condition|)
block|{
name|retv
operator|=
operator|new
name|LongValueMax
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|compareToIgnoreCase
argument_list|(
name|LONG_VALUE_MIN
argument_list|)
operator|==
literal|0
condition|)
block|{
name|retv
operator|=
operator|new
name|LongValueMin
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|compareToIgnoreCase
argument_list|(
name|STRING_VALUE_MAX
argument_list|)
operator|==
literal|0
condition|)
block|{
name|retv
operator|=
operator|new
name|StringValueMax
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|compareToIgnoreCase
argument_list|(
name|STRING_VALUE_MIN
argument_list|)
operator|==
literal|0
condition|)
block|{
name|retv
operator|=
operator|new
name|StringValueMin
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|compareToIgnoreCase
argument_list|(
name|DOUBLE_VALUE_SUM
argument_list|)
operator|==
literal|0
condition|)
block|{
name|retv
operator|=
operator|new
name|DoubleValueSum
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|compareToIgnoreCase
argument_list|(
name|UNIQ_VALUE_COUNT
argument_list|)
operator|==
literal|0
condition|)
block|{
name|retv
operator|=
operator|new
name|UniqValueCount
argument_list|(
name|maxNumItems
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|compareToIgnoreCase
argument_list|(
name|VALUE_HISTOGRAM
argument_list|)
operator|==
literal|0
condition|)
block|{
name|retv
operator|=
operator|new
name|ValueHistogram
argument_list|()
expr_stmt|;
block|}
return|return
name|retv
return|;
block|}
comment|/**    * get the input file name.    *     * @param job a job configuration object    */
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|maxNumItems
operator|=
name|job
operator|.
name|getLong
argument_list|(
literal|"aggregate.max.num.unique.values"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

