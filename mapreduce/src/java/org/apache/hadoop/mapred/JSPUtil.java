begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|RequestDispatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|jsp
operator|.
name|JspWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HtmlQuoting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistoryParser
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ServletUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
DECL|class|JSPUtil
class|class
name|JSPUtil
block|{
comment|//LRU based cache
DECL|field|jobHistoryCache
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JobInfo
argument_list|>
name|jobHistoryCache
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|JobInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JSPUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Wraps the {@link JobInProgress} object and contains boolean for    * 'job view access' allowed or not.    * This class is only for usage by JSPs and Servlets.    */
DECL|class|JobWithViewAccessCheck
specifier|static
class|class
name|JobWithViewAccessCheck
block|{
DECL|field|job
specifier|private
name|JobInProgress
name|job
init|=
literal|null
decl_stmt|;
comment|// true if user is authorized to view this job
DECL|field|isViewAllowed
specifier|private
name|boolean
name|isViewAllowed
init|=
literal|true
decl_stmt|;
DECL|method|JobWithViewAccessCheck (JobInProgress job)
name|JobWithViewAccessCheck
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
block|}
DECL|method|getJob ()
name|JobInProgress
name|getJob
parameter_list|()
block|{
return|return
name|job
return|;
block|}
DECL|method|isViewJobAllowed ()
name|boolean
name|isViewJobAllowed
parameter_list|()
block|{
return|return
name|isViewAllowed
return|;
block|}
DECL|method|setViewAccess (boolean isViewAllowed)
name|void
name|setViewAccess
parameter_list|(
name|boolean
name|isViewAllowed
parameter_list|)
block|{
name|this
operator|.
name|isViewAllowed
operator|=
name|isViewAllowed
expr_stmt|;
block|}
block|}
comment|/**    * Validates if current user can view the job.    * If user is not authorized to view the job, this method will modify the    * response and forwards to an error page and returns Job with    * viewJobAccess flag set to false.    * @return JobWithViewAccessCheck object(contains JobInProgress object and    *         viewJobAccess flag). Callers of this method will check the flag    *         and decide if view should be allowed or not. Job will be null if    *         the job with given jobid doesnot exist at the JobTracker.    */
DECL|method|checkAccessAndGetJob (final JobTracker jt, JobID jobid, HttpServletRequest request, HttpServletResponse response)
specifier|public
specifier|static
name|JobWithViewAccessCheck
name|checkAccessAndGetJob
parameter_list|(
specifier|final
name|JobTracker
name|jt
parameter_list|,
name|JobID
name|jobid
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
specifier|final
name|JobInProgress
name|job
init|=
name|jt
operator|.
name|getJob
argument_list|(
name|jobid
argument_list|)
decl_stmt|;
name|JobWithViewAccessCheck
name|myJob
init|=
operator|new
name|JobWithViewAccessCheck
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|request
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|job
operator|!=
literal|null
operator|&&
name|jt
operator|.
name|areACLsEnabled
argument_list|()
condition|)
block|{
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
try|try
block|{
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|ServletException
block|{
comment|// checks job view permission
name|jt
operator|.
name|getACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|job
argument_list|,
name|ugi
argument_list|,
name|Operation
operator|.
name|VIEW_JOB_DETAILS
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"User "
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" failed to view "
operator|+
name|jobid
operator|+
literal|"!<br><br>"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"<hr><a href=\"jobtracker.jsp\">Go back to JobTracker</a><br>"
decl_stmt|;
name|JSPUtil
operator|.
name|setErrorAndForward
argument_list|(
name|errMsg
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|myJob
operator|.
name|setViewAccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|" Interrupted while trying to access "
operator|+
name|jobid
operator|+
literal|"<hr><a href=\"jobtracker.jsp\">Go back to JobTracker</a><br>"
decl_stmt|;
name|JSPUtil
operator|.
name|setErrorAndForward
argument_list|(
name|errMsg
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|myJob
operator|.
name|setViewAccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|myJob
return|;
block|}
comment|/**    * Sets error code SC_UNAUTHORIZED in response and forwards to    * error page which contains error message and a back link.    */
DECL|method|setErrorAndForward (String errMsg, HttpServletRequest request, HttpServletResponse response)
specifier|public
specifier|static
name|void
name|setErrorAndForward
parameter_list|(
name|String
name|errMsg
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"error.msg"
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
name|RequestDispatcher
name|dispatcher
init|=
name|request
operator|.
name|getRequestDispatcher
argument_list|(
literal|"/job_authorization_error.jsp"
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|forward
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Method used to process the request from the job page based on the     * request which it has received. For example like changing priority.    *     * @param request HTTP request Object.    * @param response HTTP response object.    * @param tracker {@link JobTracker} instance    * @throws IOException    * @throws InterruptedException    * @throws ServletException    * @return if user is authorized to perform the operation on all the    *         selected jobs or not    */
DECL|method|processButtons (HttpServletRequest request, HttpServletResponse response, final JobTracker tracker)
specifier|public
specifier|static
name|boolean
name|processButtons
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|JobTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ServletException
block|{
name|String
name|user
init|=
name|request
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|privateActionsAllowed
argument_list|(
name|tracker
operator|.
name|conf
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"killJobs"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|jobs
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
literal|"jobCheckBox"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobs
operator|!=
literal|null
condition|)
block|{
name|boolean
name|notAuthorized
init|=
literal|false
decl_stmt|;
name|String
name|errMsg
init|=
literal|"User "
operator|+
name|user
operator|+
literal|" failed to kill the following job(s)!<br><br>"
decl_stmt|;
for|for
control|(
name|String
name|job
range|:
name|jobs
control|)
block|{
specifier|final
name|JobID
name|jobId
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
try|try
block|{
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|tracker
operator|.
name|killJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
comment|// checks job modify permission
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|errMsg
operator|=
name|errMsg
operator|.
name|concat
argument_list|(
literal|"<br>"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|notAuthorized
operator|=
literal|true
expr_stmt|;
comment|// We don't return right away so that we can try killing other
comment|// jobs that are requested to be killed.
continue|continue;
block|}
block|}
else|else
block|{
comment|// no authorization needed
name|tracker
operator|.
name|killJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|notAuthorized
condition|)
block|{
comment|// user is not authorized to kill some/all of jobs
name|errMsg
operator|=
name|errMsg
operator|.
name|concat
argument_list|(
literal|"<br><hr><a href=\"jobtracker.jsp\">Go back to JobTracker</a><br>"
argument_list|)
expr_stmt|;
name|setErrorAndForward
argument_list|(
name|errMsg
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|privateActionsAllowed
argument_list|(
name|tracker
operator|.
name|conf
argument_list|)
operator|&&
name|request
operator|.
name|getParameter
argument_list|(
literal|"changeJobPriority"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|jobs
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
literal|"jobCheckBox"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobs
operator|!=
literal|null
condition|)
block|{
specifier|final
name|JobPriority
name|jobPri
init|=
name|JobPriority
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"setJobPriority"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|notAuthorized
init|=
literal|false
decl_stmt|;
name|String
name|errMsg
init|=
literal|"User "
operator|+
name|user
operator|+
literal|" failed to set priority for the following job(s)!<br><br>"
decl_stmt|;
for|for
control|(
name|String
name|job
range|:
name|jobs
control|)
block|{
specifier|final
name|JobID
name|jobId
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
try|try
block|{
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
comment|// checks job modify permission
name|tracker
operator|.
name|setJobPriority
argument_list|(
name|jobId
argument_list|,
name|jobPri
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|errMsg
operator|=
name|errMsg
operator|.
name|concat
argument_list|(
literal|"<br>"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|notAuthorized
operator|=
literal|true
expr_stmt|;
comment|// We don't return right away so that we can try operating on
comment|// other jobs.
continue|continue;
block|}
block|}
else|else
block|{
comment|// no authorization needed
name|tracker
operator|.
name|setJobPriority
argument_list|(
name|jobId
argument_list|,
name|jobPri
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|notAuthorized
condition|)
block|{
comment|// user is not authorized to kill some/all of jobs
name|errMsg
operator|=
name|errMsg
operator|.
name|concat
argument_list|(
literal|"<br><hr><a href=\"jobtracker.jsp\">Go back to JobTracker</a><br>"
argument_list|)
expr_stmt|;
name|setErrorAndForward
argument_list|(
name|errMsg
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Method used to generate the Job table for Job pages.    *     * @param label display heading to be used in the job table.    * @param jobs vector of jobs to be displayed in table.    * @param refresh refresh interval to be used in jobdetails page.    * @param rowId beginning row id to be used in the table.    * @return    * @throws IOException    */
DECL|method|generateJobTable (String label, Collection<JobInProgress> jobs , int refresh, int rowId, JobConf conf)
specifier|public
specifier|static
name|String
name|generateJobTable
parameter_list|(
name|String
name|label
parameter_list|,
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|jobs
parameter_list|,
name|int
name|refresh
parameter_list|,
name|int
name|rowId
parameter_list|,
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Remove uninitialized jobs because calling JobInProgress synchronized
comment|// methods while job initialization takes long time
for|for
control|(
name|Iterator
argument_list|<
name|JobInProgress
argument_list|>
name|it
init|=
name|jobs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JobInProgress
name|job
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|job
operator|.
name|inited
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|isModifiable
init|=
name|label
operator|.
name|equals
argument_list|(
literal|"Running"
argument_list|)
operator|&&
name|privateActionsAllowed
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isModifiable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<form action=\"/jobtracker.jsp\" onsubmit=\"return confirmAction();\" method=\"POST\">"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><input type=\"Button\" onclick=\"selectAll()\" "
operator|+
literal|"value=\"Select All\" id=\"checkEm\"></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<input type=\"submit\" name=\"killJobs\" value=\"Kill Selected Jobs\">"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</td"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><nobr>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<select name=\"setJobPriority\">"
argument_list|)
expr_stmt|;
for|for
control|(
name|JobPriority
name|prio
range|:
name|JobPriority
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<option"
operator|+
operator|(
name|JobPriority
operator|.
name|NORMAL
operator|==
name|prio
condition|?
literal|" selected=\"selected\">"
else|:
literal|">"
operator|)
operator|+
name|prio
operator|+
literal|"</option>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</select>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<input type=\"submit\" name=\"changeJobPriority\" "
operator|+
literal|"value=\"Change\">"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</nobr></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td colspan=\"10\">&nbsp;</td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td>&nbsp;</td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Jobid</b></td><td><b>Priority"
operator|+
literal|"</b></td><td><b>User</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Name</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Map % Complete</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Map Total</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Maps Completed</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Reduce % Complete</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Reduce Total</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Reduces Completed</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Job Scheduling Information</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</tr>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JobInProgress
argument_list|>
name|it
init|=
name|jobs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
operator|++
name|rowId
control|)
block|{
name|JobInProgress
name|job
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|JobProfile
name|profile
init|=
name|job
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|JobStatus
name|status
init|=
name|job
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|JobID
name|jobid
init|=
name|profile
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|int
name|desiredMaps
init|=
name|job
operator|.
name|desiredMaps
argument_list|()
decl_stmt|;
name|int
name|desiredReduces
init|=
name|job
operator|.
name|desiredReduces
argument_list|()
decl_stmt|;
name|int
name|completedMaps
init|=
name|job
operator|.
name|finishedMaps
argument_list|()
decl_stmt|;
name|int
name|completedReduces
init|=
name|job
operator|.
name|finishedReduces
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|profile
operator|.
name|getJobName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|abbreviatedName
init|=
name|getAbbreviatedJobName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|jobpri
init|=
name|job
operator|.
name|getPriority
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|schedulingInfo
init|=
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isModifiable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<tr><td><input TYPE=\"checkbox\" "
operator|+
literal|"onclick=\"checkButtonVerbage()\" "
operator|+
literal|"name=\"jobCheckBox\" value="
operator|+
name|jobid
operator|+
literal|"></td>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<td id=\"job_"
operator|+
name|rowId
operator|+
literal|"\"><a href=\"jobdetails.jsp?jobid="
operator|+
name|jobid
operator|+
literal|"&refresh="
operator|+
name|refresh
operator|+
literal|"\">"
operator|+
name|jobid
operator|+
literal|"</a></td>"
operator|+
literal|"<td id=\"priority_"
operator|+
name|rowId
operator|+
literal|"\">"
operator|+
name|jobpri
operator|+
literal|"</td>"
operator|+
literal|"<td id=\"user_"
operator|+
name|rowId
operator|+
literal|"\">"
operator|+
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|profile
operator|.
name|getUser
argument_list|()
argument_list|)
operator|+
literal|"</td>"
operator|+
literal|"<td title=\""
operator|+
name|name
operator|+
literal|"\" id=\"name_"
operator|+
name|rowId
operator|+
literal|"\">"
operator|+
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|abbreviatedName
argument_list|)
condition|?
literal|"&nbsp;"
else|:
name|abbreviatedName
operator|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|status
operator|.
name|mapProgress
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|+
name|ServletUtil
operator|.
name|percentageGraph
argument_list|(
name|status
operator|.
name|mapProgress
argument_list|()
operator|*
literal|100
argument_list|,
literal|80
argument_list|)
operator|+
literal|"</td><td>"
operator|+
name|desiredMaps
operator|+
literal|"</td><td>"
operator|+
name|completedMaps
operator|+
literal|"</td><td>"
operator|+
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|status
operator|.
name|reduceProgress
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|+
name|ServletUtil
operator|.
name|percentageGraph
argument_list|(
name|status
operator|.
name|reduceProgress
argument_list|()
operator|*
literal|100
argument_list|,
literal|80
argument_list|)
operator|+
literal|"</td><td>"
operator|+
name|desiredReduces
operator|+
literal|"</td><td> "
operator|+
name|completedReduces
operator|+
literal|"</td><td>"
operator|+
name|schedulingInfo
operator|+
literal|"</td></tr>\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isModifiable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"</form>\n"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<tr><td align=\"center\" colspan=\"8\"><i>none</i>"
operator|+
literal|"</td></tr>\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</table>\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getAbbreviatedJobName (String name)
specifier|static
name|String
name|getAbbreviatedJobName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|80
condition|?
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|76
argument_list|)
operator|+
literal|"..."
else|:
name|name
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|generateRetiredJobTable (JobTracker tracker, int rowId)
specifier|public
specifier|static
name|String
name|generateRetiredJobTable
parameter_list|(
name|JobTracker
name|tracker
parameter_list|,
name|int
name|rowId
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|JobStatus
argument_list|>
name|iterator
init|=
name|tracker
operator|.
name|retireJobs
operator|.
name|getAll
argument_list|()
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<tr><td align=\"center\" colspan=\"8\"><i>none</i>"
operator|+
literal|"</td></tr>\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Jobid</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Priority</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>User</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Name</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>State</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Start Time</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Finish Time</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Map % Complete</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Reduce % Complete</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td><b>Job Scheduling Information</b></td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</tr>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JobStatus
name|status
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td id=\"job_"
operator|+
name|rowId
operator|+
literal|"\">"
operator|+
literal|"<a href=\"jobdetailshistory.jsp?logFile="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|status
operator|.
name|getHistoryFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|"\">"
operator|+
name|status
operator|.
name|getJobId
argument_list|()
operator|+
literal|"</a></td>"
operator|+
literal|"<td id=\"priority_"
operator|+
name|rowId
operator|+
literal|"\">"
operator|+
name|status
operator|.
name|getJobPriority
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"</td>"
operator|+
literal|"<td id=\"user_"
operator|+
name|rowId
operator|+
literal|"\">"
operator|+
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|status
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|+
literal|"</td>"
operator|+
literal|"<td title=\""
operator|+
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|status
operator|.
name|getJobName
argument_list|()
argument_list|)
operator|+
literal|"\" id=\"name_"
operator|+
name|rowId
operator|+
literal|"\">"
operator|+
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|getAbbreviatedJobName
argument_list|(
name|status
operator|.
name|getJobName
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|status
operator|.
name|getRunState
argument_list|()
argument_list|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
operator|new
name|Date
argument_list|(
name|status
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
operator|new
name|Date
argument_list|(
name|status
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|status
operator|.
name|mapProgress
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|+
name|ServletUtil
operator|.
name|percentageGraph
argument_list|(
name|status
operator|.
name|mapProgress
argument_list|()
operator|*
literal|100
argument_list|,
literal|80
argument_list|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|status
operator|.
name|reduceProgress
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|+
name|ServletUtil
operator|.
name|percentageGraph
argument_list|(
name|status
operator|.
name|reduceProgress
argument_list|()
operator|*
literal|100
argument_list|,
literal|80
argument_list|)
operator|+
literal|"</td>"
operator|+
literal|"<td>"
operator|+
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|status
operator|.
name|getSchedulingInfo
argument_list|()
argument_list|)
operator|+
literal|"</td>"
operator|+
literal|"</tr>\n"
argument_list|)
expr_stmt|;
name|rowId
operator|++
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</table>\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|generateRetiredJobXml (JspWriter out, JobTracker tracker, int rowId)
specifier|public
specifier|static
name|void
name|generateRetiredJobXml
parameter_list|(
name|JspWriter
name|out
parameter_list|,
name|JobTracker
name|tracker
parameter_list|,
name|int
name|rowId
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|JobStatus
argument_list|>
name|iterator
init|=
name|tracker
operator|.
name|retireJobs
operator|.
name|getAll
argument_list|()
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JobStatus
name|status
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<retired_job rowid=\""
operator|+
name|rowId
operator|+
literal|"\" jobid=\""
operator|+
name|status
operator|.
name|getJobId
argument_list|()
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<jobid>"
operator|+
name|status
operator|.
name|getJobId
argument_list|()
operator|+
literal|"</jobid>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<history_url>jobdetailshistory.jsp?logFile="
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|status
operator|.
name|getHistoryFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|"</history_url>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<priority>"
operator|+
name|status
operator|.
name|getJobPriority
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"</priority>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<user>"
operator|+
name|status
operator|.
name|getUsername
argument_list|()
operator|+
literal|"</user>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<name>"
operator|+
name|status
operator|.
name|getJobName
argument_list|()
operator|+
literal|"</name>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<run_state>"
operator|+
name|JobStatus
operator|.
name|getJobRunState
argument_list|(
name|status
operator|.
name|getRunState
argument_list|()
argument_list|)
operator|+
literal|"</run_state>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<start_time>"
operator|+
operator|new
name|Date
argument_list|(
name|status
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"</start_time>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<finish_time>"
operator|+
operator|new
name|Date
argument_list|(
name|status
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|+
literal|"</finish_time>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<map_complete>"
operator|+
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|status
operator|.
name|mapProgress
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|+
literal|"</map_complete>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<reduce_complete>"
operator|+
name|StringUtils
operator|.
name|formatPercent
argument_list|(
name|status
operator|.
name|reduceProgress
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|+
literal|"</reduce_complete>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<scheduling_info>"
operator|+
name|status
operator|.
name|getSchedulingInfo
argument_list|()
operator|+
literal|"</scheduling_info>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</retired_job>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rowId
operator|++
expr_stmt|;
block|}
block|}
DECL|method|privateActionsAllowed (JobConf conf)
specifier|static
name|boolean
name|privateActionsAllowed
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|JTConfig
operator|.
name|PRIVATE_ACTIONS_KEY
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getJobConfFilePath (Path logFile)
specifier|static
name|Path
name|getJobConfFilePath
parameter_list|(
name|Path
name|logFile
parameter_list|)
block|{
name|Path
name|logDir
init|=
name|logFile
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobId
init|=
name|JobHistory
operator|.
name|getJobIDFromHistoryFilePath
argument_list|(
name|logFile
argument_list|)
decl_stmt|;
return|return
name|JobHistory
operator|.
name|getConfFile
argument_list|(
name|logDir
argument_list|,
name|jobId
argument_list|)
return|;
block|}
comment|/**    * Read a job-history log file and construct the corresponding {@link JobInfo}    * . Also cache the {@link JobInfo} for quick serving further requests.    *     * @param logFile      the job history log file    * @param fs           job tracker file system    * @param jobTracker   the job tracker    * @return JobInfo     job's basic information    * @throws IOException    */
DECL|method|getJobInfo (Path logFile, FileSystem fs, JobTracker jobTracker)
specifier|static
name|JobInfo
name|getJobInfo
parameter_list|(
name|Path
name|logFile
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|JobTracker
name|jobTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jobid
init|=
name|JobHistory
operator|.
name|getJobIDFromHistoryFilePath
argument_list|(
name|logFile
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|JobInfo
name|jobInfo
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|jobHistoryCache
init|)
block|{
name|jobInfo
operator|=
name|jobHistoryCache
operator|.
name|remove
argument_list|(
name|jobid
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobInfo
operator|==
literal|null
condition|)
block|{
name|JobHistoryParser
name|parser
init|=
operator|new
name|JobHistoryParser
argument_list|(
name|fs
argument_list|,
name|logFile
argument_list|)
decl_stmt|;
name|jobInfo
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading Job History file "
operator|+
name|jobid
operator|+
literal|".   Cache size is "
operator|+
name|jobHistoryCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jobHistoryCache
operator|.
name|put
argument_list|(
name|jobid
argument_list|,
name|jobInfo
argument_list|)
expr_stmt|;
name|int
name|CACHE_SIZE
init|=
name|jobTracker
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|JTConfig
operator|.
name|JT_JOBHISTORY_CACHE_SIZE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobHistoryCache
operator|.
name|size
argument_list|()
operator|>
name|CACHE_SIZE
condition|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JobInfo
argument_list|>
argument_list|>
name|it
init|=
name|jobHistoryCache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|removeJobId
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Job History file removed form cache "
operator|+
name|removeJobId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jobInfo
return|;
block|}
comment|/**    * Check the access for users to view job-history pages and return    * {@link JobInfo}.    *     * @param request     http servlet request    * @param response    http servlet response    * @param jobTracker  the job tracker    * @param fs          job tracker file system    * @param logFile     the job history log file    * @return the job if authorization is disabled or if the authorization checks    *         pass. Otherwise return null.    * @throws IOException    * @throws InterruptedException    * @throws ServletException    */
DECL|method|checkAccessAndGetJobInfo (HttpServletRequest request, HttpServletResponse response, final JobTracker jobTracker, final FileSystem fs, final Path logFile)
specifier|static
name|JobInfo
name|checkAccessAndGetJobInfo
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
specifier|final
name|JobTracker
name|jobTracker
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|logFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ServletException
block|{
name|String
name|jobid
init|=
name|JobHistory
operator|.
name|getJobIDFromHistoryFilePath
argument_list|(
name|logFile
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|request
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|JobInfo
name|jobInfo
init|=
name|JSPUtil
operator|.
name|getJobInfo
argument_list|(
name|logFile
argument_list|,
name|fs
argument_list|,
name|jobTracker
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
comment|// authorize user for job-view access
try|try
block|{
specifier|final
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|AccessControlList
name|viewJobAcl
init|=
name|jobInfo
operator|.
name|getJobACLs
argument_list|()
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
decl_stmt|;
if|if
condition|(
name|viewJobAcl
operator|==
literal|null
condition|)
block|{
comment|// may be older job history file of earlier unsecure cluster
name|viewJobAcl
operator|=
operator|new
name|AccessControlList
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
name|jobTracker
operator|.
name|getACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|jobid
argument_list|,
name|ugi
argument_list|,
name|jobInfo
operator|.
name|getJobQueueName
argument_list|()
argument_list|,
name|Operation
operator|.
name|VIEW_JOB_DETAILS
argument_list|,
name|jobInfo
operator|.
name|getUsername
argument_list|()
argument_list|,
name|viewJobAcl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"User %s failed to view %s!<br><br>%s"
operator|+
literal|"<hr>"
operator|+
literal|"<a href=\"jobhistory.jsp\">Go back to JobHistory</a><br>"
operator|+
literal|"<a href=\"jobtracker.jsp\">Go back to JobTracker</a>"
argument_list|,
name|user
argument_list|,
name|jobid
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|JSPUtil
operator|.
name|setErrorAndForward
argument_list|(
name|errMsg
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// else { no authorization needed }
return|return
name|jobInfo
return|;
block|}
comment|/**    * Nicely print the Job-ACLs    * @param tracker    * @param jobAcls    * @param out    * @throws IOException    */
DECL|method|printJobACLs (JobTracker tracker, Map<JobACL, AccessControlList> jobAcls, JspWriter out)
specifier|static
name|void
name|printJobACLs
parameter_list|(
name|JobTracker
name|tracker
parameter_list|,
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobAcls
parameter_list|,
name|JspWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tracker
operator|.
name|areACLsEnabled
argument_list|()
condition|)
block|{
comment|// Display job-view-acls and job-modify-acls configured for this job
name|out
operator|.
name|print
argument_list|(
literal|"<b>Job-ACLs:</b><br>"
argument_list|)
expr_stmt|;
for|for
control|(
name|JobACL
name|aclName
range|:
name|JobACL
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|aclConfigName
init|=
name|aclName
operator|.
name|getAclName
argument_list|()
decl_stmt|;
name|AccessControlList
name|aclConfigured
init|=
name|jobAcls
operator|.
name|get
argument_list|(
name|aclName
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclConfigured
operator|!=
literal|null
condition|)
block|{
name|String
name|aclStr
init|=
name|aclConfigured
operator|.
name|toString
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|aclConfigName
operator|+
literal|": "
operator|+
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|aclStr
argument_list|)
operator|+
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<b>Job-ACLs: "
operator|+
operator|new
name|AccessControlList
argument_list|(
literal|"*"
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"</b><br>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

