begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JSPUtil
operator|.
name|JobWithViewAccessCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/** The servlet that outputs svg graphics for map / reduce task  *  statuses  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TaskGraphServlet
specifier|public
class|class
name|TaskGraphServlet
extends|extends
name|HttpServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1365683739392460020L
decl_stmt|;
comment|/**height of the graph w/o margins*/
DECL|field|width
specifier|public
specifier|static
specifier|final
name|int
name|width
init|=
literal|600
decl_stmt|;
comment|/**height of the graph w/o margins*/
DECL|field|height
specifier|public
specifier|static
specifier|final
name|int
name|height
init|=
literal|200
decl_stmt|;
comment|/**margin space on y axis */
DECL|field|ymargin
specifier|public
specifier|static
specifier|final
name|int
name|ymargin
init|=
literal|20
decl_stmt|;
comment|/**margin space on x axis */
DECL|field|xmargin
specifier|public
specifier|static
specifier|final
name|int
name|xmargin
init|=
literal|80
decl_stmt|;
DECL|field|oneThird
specifier|private
specifier|static
specifier|final
name|float
name|oneThird
init|=
literal|1f
operator|/
literal|3f
decl_stmt|;
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"image/svg+xml"
argument_list|)
expr_stmt|;
specifier|final
name|JobTracker
name|tracker
init|=
operator|(
name|JobTracker
operator|)
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"job.tracker"
argument_list|)
decl_stmt|;
name|String
name|jobIdStr
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"jobid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobIdStr
operator|==
literal|null
condition|)
return|return;
specifier|final
name|JobID
name|jobId
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobIdStr
argument_list|)
decl_stmt|;
comment|// verify if user has view access for this job
name|JobWithViewAccessCheck
name|myJob
init|=
name|JSPUtil
operator|.
name|checkAccessAndGetJob
argument_list|(
name|tracker
argument_list|,
name|jobId
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|myJob
operator|.
name|isViewJobAllowed
argument_list|()
condition|)
block|{
return|return;
comment|// user is not authorized to view this job
block|}
specifier|final
name|boolean
name|isMap
init|=
literal|"map"
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TaskReport
index|[]
name|reports
init|=
name|isMap
condition|?
name|tracker
operator|.
name|getMapTaskReports
argument_list|(
name|jobId
argument_list|)
else|:
name|tracker
operator|.
name|getReduceTaskReports
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|reports
operator|==
literal|null
operator|||
name|reports
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|numTasks
init|=
name|reports
operator|.
name|length
decl_stmt|;
name|int
name|tasksPerBar
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|numTasks
operator|/
literal|600d
argument_list|)
decl_stmt|;
name|int
name|numBars
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|numTasks
operator|/
name|tasksPerBar
argument_list|)
decl_stmt|;
name|int
name|w
init|=
name|Math
operator|.
name|max
argument_list|(
literal|600
argument_list|,
name|numBars
argument_list|)
decl_stmt|;
name|int
name|barWidth
init|=
name|Math
operator|.
name|min
argument_list|(
literal|10
argument_list|,
name|w
operator|/
name|numBars
argument_list|)
decl_stmt|;
comment|//min 1px, max 10px
name|int
name|barsPerNotch
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|10d
operator|/
name|barWidth
argument_list|)
decl_stmt|;
name|w
operator|=
name|w
operator|+
name|numBars
operator|/
name|barsPerNotch
expr_stmt|;
name|int
name|totalWidth
init|=
name|w
operator|+
literal|2
operator|*
name|xmargin
decl_stmt|;
comment|//draw a white rectangle
specifier|final
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<?xml version=\"1.0\" standalone=\"no\"?>\n"
operator|+
literal|"<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \n"
operator|+
literal|"\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n"
operator|+
literal|"<?xml-stylesheet type=\"text/css\" href=\"/static/hadoop.css\"?>\n\n"
operator|+
literal|"<svg width=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|totalWidth
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" height=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|height
operator|+
literal|2
operator|*
name|ymargin
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" version=\"1.1\"\n"
operator|+
literal|"xmlns=\"http://www.w3.org/2000/svg\">\n\n"
argument_list|)
expr_stmt|;
comment|//axes
name|printLine
argument_list|(
name|out
argument_list|,
name|xmargin
operator|-
literal|1
argument_list|,
name|xmargin
operator|-
literal|1
argument_list|,
name|height
operator|+
name|ymargin
operator|+
literal|1
argument_list|,
name|ymargin
operator|-
literal|1
argument_list|,
literal|"black"
argument_list|)
expr_stmt|;
name|printLine
argument_list|(
name|out
argument_list|,
name|xmargin
operator|-
literal|1
argument_list|,
name|w
operator|+
name|xmargin
operator|+
literal|1
argument_list|,
name|height
operator|+
name|ymargin
operator|+
literal|1
argument_list|,
name|height
operator|+
name|ymargin
operator|+
literal|1
argument_list|,
literal|"black"
argument_list|)
expr_stmt|;
comment|//borderlines
name|printLine
argument_list|(
name|out
argument_list|,
name|w
operator|+
name|xmargin
operator|+
literal|1
argument_list|,
name|w
operator|+
name|xmargin
operator|+
literal|1
argument_list|,
name|height
operator|+
name|ymargin
operator|+
literal|1
argument_list|,
name|ymargin
operator|-
literal|1
argument_list|,
literal|"#CCCCCC"
argument_list|)
expr_stmt|;
name|printLine
argument_list|(
name|out
argument_list|,
name|xmargin
operator|-
literal|1
argument_list|,
name|w
operator|+
name|xmargin
operator|+
literal|1
argument_list|,
name|ymargin
operator|-
literal|1
argument_list|,
name|ymargin
operator|-
literal|1
argument_list|,
literal|"#CCCCCC"
argument_list|)
expr_stmt|;
name|String
index|[]
name|colors
init|=
operator|new
name|String
index|[]
block|{
literal|"#00DD00"
block|,
literal|"#E50000"
block|,
literal|"#AAAAFF"
block|}
decl_stmt|;
comment|//determine the notch interval using the number of digits for numTasks
name|int
name|xNotchInterval
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
name|numTasks
operator|/
literal|10d
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|xOffset
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|xNotchCount
init|=
literal|0
decl_stmt|;
comment|//task bar graph
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|barCnt
init|=
literal|0
init|;
condition|;
name|i
operator|+=
name|tasksPerBar
operator|,
name|barCnt
operator|++
control|)
block|{
if|if
condition|(
name|barCnt
operator|%
name|barsPerNotch
operator|==
literal|0
condition|)
block|{
name|xOffset
operator|++
expr_stmt|;
block|}
name|int
name|x
init|=
name|barCnt
operator|*
name|barWidth
operator|+
name|xmargin
operator|+
name|xOffset
decl_stmt|;
comment|//x axis notches
if|if
condition|(
name|i
operator|>=
name|xNotchInterval
operator|*
name|xNotchCount
condition|)
block|{
name|printLine
argument_list|(
name|out
argument_list|,
name|x
argument_list|,
name|x
argument_list|,
name|height
operator|+
name|ymargin
operator|+
literal|3
argument_list|,
name|height
operator|+
name|ymargin
operator|-
literal|2
argument_list|,
literal|"black"
argument_list|)
expr_stmt|;
name|printText
argument_list|(
name|out
argument_list|,
name|x
argument_list|,
name|height
operator|+
name|ymargin
operator|+
literal|15
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|xNotchInterval
operator|*
name|xNotchCount
operator|++
argument_list|)
argument_list|,
literal|"middle"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
name|reports
operator|.
name|length
condition|)
break|break;
if|if
condition|(
name|isMap
condition|)
block|{
name|float
name|progress
init|=
name|getMapAvarageProgress
argument_list|(
name|tasksPerBar
argument_list|,
name|i
argument_list|,
name|reports
argument_list|)
decl_stmt|;
name|int
name|barHeight
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|height
operator|*
name|progress
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|height
operator|-
name|barHeight
operator|+
name|ymargin
decl_stmt|;
name|printRect
argument_list|(
name|out
argument_list|,
name|barWidth
argument_list|,
name|barHeight
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|colors
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|float
index|[]
name|progresses
init|=
name|getReduceAvarageProgresses
argument_list|(
name|tasksPerBar
argument_list|,
name|i
argument_list|,
name|reports
argument_list|)
decl_stmt|;
comment|//draw three bars stacked, for copy, sort, reduce
name|int
name|prevHeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|int
name|barHeight
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|height
operator|/
literal|3
operator|)
operator|*
name|progresses
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|barHeight
operator|>
name|height
operator|/
literal|3
operator|-
literal|3
condition|)
comment|//fix rounding error
name|barHeight
operator|=
name|height
operator|/
literal|3
operator|+
literal|1
expr_stmt|;
name|int
name|y
init|=
name|height
operator|-
name|barHeight
operator|+
name|ymargin
operator|-
name|prevHeight
decl_stmt|;
name|prevHeight
operator|+=
name|barHeight
expr_stmt|;
name|printRect
argument_list|(
name|out
argument_list|,
name|barWidth
argument_list|,
name|barHeight
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|colors
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//y axis notches
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|printLine
argument_list|(
name|out
argument_list|,
name|xmargin
operator|-
literal|3
argument_list|,
name|xmargin
operator|+
literal|2
argument_list|,
name|ymargin
operator|+
operator|(
name|i
operator|*
name|height
operator|)
operator|/
literal|10
argument_list|,
name|ymargin
operator|+
operator|(
name|i
operator|*
name|height
operator|)
operator|/
literal|10
argument_list|,
literal|"black"
argument_list|)
expr_stmt|;
name|printText
argument_list|(
name|out
argument_list|,
name|xmargin
operator|-
literal|10
argument_list|,
name|ymargin
operator|+
literal|4
operator|+
operator|(
name|i
operator|*
name|height
operator|)
operator|/
literal|10
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|100
operator|-
name|i
operator|*
literal|10
argument_list|)
argument_list|,
literal|"end"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isMap
condition|)
block|{
comment|//print color codes for copy, sort, reduce
name|printRect
argument_list|(
name|out
argument_list|,
literal|14
argument_list|,
literal|14
argument_list|,
name|xmargin
operator|+
name|w
operator|+
literal|4
argument_list|,
name|ymargin
operator|+
literal|20
argument_list|,
name|colors
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|printText
argument_list|(
name|out
argument_list|,
name|xmargin
operator|+
name|w
operator|+
literal|24
argument_list|,
name|ymargin
operator|+
literal|30
argument_list|,
literal|"copy"
argument_list|,
literal|"start"
argument_list|)
expr_stmt|;
name|printRect
argument_list|(
name|out
argument_list|,
literal|14
argument_list|,
literal|14
argument_list|,
name|xmargin
operator|+
name|w
operator|+
literal|4
argument_list|,
name|ymargin
operator|+
literal|50
argument_list|,
name|colors
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|printText
argument_list|(
name|out
argument_list|,
name|xmargin
operator|+
name|w
operator|+
literal|24
argument_list|,
name|ymargin
operator|+
literal|60
argument_list|,
literal|"sort"
argument_list|,
literal|"start"
argument_list|)
expr_stmt|;
name|printRect
argument_list|(
name|out
argument_list|,
literal|14
argument_list|,
literal|14
argument_list|,
name|xmargin
operator|+
name|w
operator|+
literal|4
argument_list|,
name|ymargin
operator|+
literal|80
argument_list|,
name|colors
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|printText
argument_list|(
name|out
argument_list|,
name|xmargin
operator|+
name|w
operator|+
literal|24
argument_list|,
name|ymargin
operator|+
literal|90
argument_list|,
literal|"reduce"
argument_list|,
literal|"start"
argument_list|)
expr_stmt|;
block|}
comment|//firefox curently does not support vertical text
comment|//out.print("<text x=\"");out.print(6);
comment|//out.print("\" y=\""); out.print(ymargin + height / 2);
comment|//out.print("\" style=\"text-anchor:middle;writing-mode:tb\">"
comment|//+"Percent</text>\n");
name|out
operator|.
name|print
argument_list|(
literal|"</svg>"
argument_list|)
expr_stmt|;
block|}
comment|/**Computes average progress per bar*/
DECL|method|getMapAvarageProgress (int tasksPerBar, int index , TaskReport[] reports )
specifier|private
name|float
name|getMapAvarageProgress
parameter_list|(
name|int
name|tasksPerBar
parameter_list|,
name|int
name|index
parameter_list|,
name|TaskReport
index|[]
name|reports
parameter_list|)
block|{
name|float
name|progress
init|=
literal|0f
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|k
operator|<
name|tasksPerBar
operator|&&
name|index
operator|+
name|k
operator|<
name|reports
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|progress
operator|+=
name|reports
index|[
name|index
operator|+
name|k
index|]
operator|.
name|getProgress
argument_list|()
expr_stmt|;
block|}
name|progress
operator|/=
name|k
expr_stmt|;
return|return
name|progress
return|;
block|}
comment|/**Computes average progresses per bar*/
DECL|method|getReduceAvarageProgresses (int tasksPerBar, int index , TaskReport[] reports )
specifier|private
name|float
index|[]
name|getReduceAvarageProgresses
parameter_list|(
name|int
name|tasksPerBar
parameter_list|,
name|int
name|index
parameter_list|,
name|TaskReport
index|[]
name|reports
parameter_list|)
block|{
name|float
index|[]
name|progresses
init|=
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|k
operator|<
name|tasksPerBar
operator|&&
name|index
operator|+
name|k
operator|<
name|reports
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|float
name|progress
init|=
name|reports
index|[
name|index
operator|+
name|k
index|]
operator|.
name|getProgress
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|progress
operator|>
literal|0
condition|;
name|j
operator|++
operator|,
name|progress
operator|-=
name|oneThird
control|)
block|{
if|if
condition|(
name|progress
operator|>
name|oneThird
condition|)
name|progresses
index|[
name|j
index|]
operator|+=
literal|1f
expr_stmt|;
else|else
name|progresses
index|[
name|j
index|]
operator|+=
name|progress
operator|*
literal|3
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|progresses
index|[
name|j
index|]
operator|/=
name|k
expr_stmt|;
block|}
return|return
name|progresses
return|;
block|}
DECL|method|printRect (PrintWriter out, int width, int height , int x, int y, String color)
specifier|private
name|void
name|printRect
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|String
name|color
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|height
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<rect width=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" height=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" x=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" y=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" style=\"fill:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printLine (PrintWriter out, int x1, int x2 , int y1, int y2, String color)
specifier|private
name|void
name|printLine
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|int
name|x1
parameter_list|,
name|int
name|x2
parameter_list|,
name|int
name|y1
parameter_list|,
name|int
name|y2
parameter_list|,
name|String
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<line x1=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|x1
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" x2=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|x2
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" y1=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|y1
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" y2=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|y2
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" class=\"taskgraphline\" style=\"stroke:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|printText (PrintWriter out, int x, int y, String text , String anchor)
specifier|private
name|void
name|printText
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|anchor
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<text x=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" y=\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\" style=\"fill:black;font-family:sans-serif;"
operator|+
literal|"text-anchor:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|anchor
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</text>\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

