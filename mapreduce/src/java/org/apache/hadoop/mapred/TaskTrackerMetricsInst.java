begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|Updater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|jvm
operator|.
name|JvmMetrics
import|;
end_import

begin_class
DECL|class|TaskTrackerMetricsInst
class|class
name|TaskTrackerMetricsInst
extends|extends
name|TaskTrackerInstrumentation
implements|implements
name|Updater
block|{
DECL|field|metricsRecord
specifier|private
specifier|final
name|MetricsRecord
name|metricsRecord
decl_stmt|;
DECL|field|numCompletedTasks
specifier|private
name|int
name|numCompletedTasks
init|=
literal|0
decl_stmt|;
DECL|field|timedoutTasks
specifier|private
name|int
name|timedoutTasks
init|=
literal|0
decl_stmt|;
DECL|field|tasksFailedPing
specifier|private
name|int
name|tasksFailedPing
init|=
literal|0
decl_stmt|;
DECL|method|TaskTrackerMetricsInst (TaskTracker t)
specifier|public
name|TaskTrackerMetricsInst
parameter_list|(
name|TaskTracker
name|t
parameter_list|)
block|{
name|super
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
name|tt
operator|.
name|getJobConf
argument_list|()
decl_stmt|;
name|String
name|sessionId
init|=
name|conf
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
comment|// Initiate Java VM Metrics
name|JvmMetrics
operator|.
name|init
argument_list|(
literal|"TaskTracker"
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
comment|// Create a record for Task Tracker metrics
name|MetricsContext
name|context
init|=
name|MetricsUtil
operator|.
name|getContext
argument_list|(
literal|"mapred"
argument_list|)
decl_stmt|;
name|metricsRecord
operator|=
name|MetricsUtil
operator|.
name|createRecord
argument_list|(
name|context
argument_list|,
literal|"tasktracker"
argument_list|)
expr_stmt|;
comment|//guaranteed never null
name|metricsRecord
operator|.
name|setTag
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerUpdater
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|completeTask (TaskAttemptID t)
specifier|public
specifier|synchronized
name|void
name|completeTask
parameter_list|(
name|TaskAttemptID
name|t
parameter_list|)
block|{
operator|++
name|numCompletedTasks
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|timedoutTask (TaskAttemptID t)
specifier|public
specifier|synchronized
name|void
name|timedoutTask
parameter_list|(
name|TaskAttemptID
name|t
parameter_list|)
block|{
operator|++
name|timedoutTasks
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|taskFailedPing (TaskAttemptID t)
specifier|public
specifier|synchronized
name|void
name|taskFailedPing
parameter_list|(
name|TaskAttemptID
name|t
parameter_list|)
block|{
operator|++
name|tasksFailedPing
expr_stmt|;
block|}
comment|/**    * Since this object is a registered updater, this method will be called    * periodically, e.g. every 5 seconds.    */
annotation|@
name|Override
DECL|method|doUpdates (MetricsContext unused)
specifier|public
name|void
name|doUpdates
parameter_list|(
name|MetricsContext
name|unused
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|metricsRecord
operator|.
name|setMetric
argument_list|(
literal|"maps_running"
argument_list|,
name|tt
operator|.
name|mapTotal
argument_list|)
expr_stmt|;
name|metricsRecord
operator|.
name|setMetric
argument_list|(
literal|"reduces_running"
argument_list|,
name|tt
operator|.
name|reduceTotal
argument_list|)
expr_stmt|;
name|metricsRecord
operator|.
name|setMetric
argument_list|(
literal|"mapTaskSlots"
argument_list|,
operator|(
name|short
operator|)
name|tt
operator|.
name|getMaxCurrentMapTasks
argument_list|()
argument_list|)
expr_stmt|;
name|metricsRecord
operator|.
name|setMetric
argument_list|(
literal|"reduceTaskSlots"
argument_list|,
operator|(
name|short
operator|)
name|tt
operator|.
name|getMaxCurrentReduceTasks
argument_list|()
argument_list|)
expr_stmt|;
name|metricsRecord
operator|.
name|incrMetric
argument_list|(
literal|"tasks_completed"
argument_list|,
name|numCompletedTasks
argument_list|)
expr_stmt|;
name|metricsRecord
operator|.
name|incrMetric
argument_list|(
literal|"tasks_failed_timeout"
argument_list|,
name|timedoutTasks
argument_list|)
expr_stmt|;
name|metricsRecord
operator|.
name|incrMetric
argument_list|(
literal|"tasks_failed_ping"
argument_list|,
name|tasksFailedPing
argument_list|)
expr_stmt|;
name|numCompletedTasks
operator|=
literal|0
expr_stmt|;
name|timedoutTasks
operator|=
literal|0
expr_stmt|;
name|tasksFailedPing
operator|=
literal|0
expr_stmt|;
block|}
name|metricsRecord
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

