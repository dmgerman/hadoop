begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.pipes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|pipes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * Handles the upward (C++ to Java) messages from the application.  */
end_comment

begin_class
DECL|class|OutputHandler
class|class
name|OutputHandler
parameter_list|<
name|K
extends|extends
name|WritableComparable
parameter_list|,
name|V
extends|extends
name|Writable
parameter_list|>
implements|implements
name|UpwardProtocol
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|reporter
specifier|private
name|Reporter
name|reporter
decl_stmt|;
DECL|field|collector
specifier|private
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|collector
decl_stmt|;
DECL|field|progressValue
specifier|private
name|float
name|progressValue
init|=
literal|0.0f
decl_stmt|;
DECL|field|done
specifier|private
name|boolean
name|done
init|=
literal|false
decl_stmt|;
DECL|field|exception
specifier|private
name|Throwable
name|exception
init|=
literal|null
decl_stmt|;
DECL|field|recordReader
name|RecordReader
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|>
name|recordReader
init|=
literal|null
decl_stmt|;
DECL|field|registeredCounters
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|Counters
operator|.
name|Counter
argument_list|>
name|registeredCounters
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Counters
operator|.
name|Counter
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|expectedDigest
specifier|private
name|String
name|expectedDigest
init|=
literal|null
decl_stmt|;
DECL|field|digestReceived
specifier|private
name|boolean
name|digestReceived
init|=
literal|false
decl_stmt|;
comment|/**    * Create a handler that will handle any records output from the application.    * @param collector the "real" collector that takes the output    * @param reporter the reporter for reporting progress    */
DECL|method|OutputHandler (OutputCollector<K, V> collector, Reporter reporter, RecordReader<FloatWritable,NullWritable> recordReader, String expectedDigest)
specifier|public
name|OutputHandler
parameter_list|(
name|OutputCollector
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|collector
parameter_list|,
name|Reporter
name|reporter
parameter_list|,
name|RecordReader
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|>
name|recordReader
parameter_list|,
name|String
name|expectedDigest
parameter_list|)
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
name|this
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
name|this
operator|.
name|recordReader
operator|=
name|recordReader
expr_stmt|;
name|this
operator|.
name|expectedDigest
operator|=
name|expectedDigest
expr_stmt|;
block|}
comment|/**    * The task output a normal record.    */
DECL|method|output (K key, V value)
specifier|public
name|void
name|output
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|collector
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * The task output a record with a partition number attached.    */
DECL|method|partitionedOutput (int reduce, K key, V value)
specifier|public
name|void
name|partitionedOutput
parameter_list|(
name|int
name|reduce
parameter_list|,
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|PipesPartitioner
operator|.
name|setNextPartition
argument_list|(
name|reduce
argument_list|)
expr_stmt|;
name|collector
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update the status message for the task.    */
DECL|method|status (String msg)
specifier|public
name|void
name|status
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|reporter
operator|.
name|setStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|field|progressKey
specifier|private
name|FloatWritable
name|progressKey
init|=
operator|new
name|FloatWritable
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
DECL|field|nullValue
specifier|private
name|NullWritable
name|nullValue
init|=
name|NullWritable
operator|.
name|get
argument_list|()
decl_stmt|;
comment|/**    * Update the amount done and call progress on the reporter.    */
DECL|method|progress (float progress)
specifier|public
name|void
name|progress
parameter_list|(
name|float
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|progressValue
operator|=
name|progress
expr_stmt|;
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
if|if
condition|(
name|recordReader
operator|!=
literal|null
condition|)
block|{
name|progressKey
operator|.
name|set
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|recordReader
operator|.
name|next
argument_list|(
name|progressKey
argument_list|,
name|nullValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The task finished successfully.    */
DECL|method|done ()
specifier|public
name|void
name|done
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get the current amount done.    * @return a float between 0.0 and 1.0    */
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|progressValue
return|;
block|}
comment|/**    * The task failed with an exception.    */
DECL|method|failed (Throwable e)
specifier|public
name|void
name|failed
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Wait for the task to finish or abort.    * @return did the task finish correctly?    * @throws Throwable    */
DECL|method|waitForFinish ()
specifier|public
specifier|synchronized
name|boolean
name|waitForFinish
parameter_list|()
throws|throws
name|Throwable
block|{
while|while
condition|(
operator|!
name|done
operator|&&
name|exception
operator|==
literal|null
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
return|return
name|done
return|;
block|}
DECL|method|registerCounter (int id, String group, String name)
specifier|public
name|void
name|registerCounter
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Counters
operator|.
name|Counter
name|counter
init|=
name|reporter
operator|.
name|getCounter
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|registeredCounters
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
DECL|method|incrementCounter (int id, long amount)
specifier|public
name|void
name|incrementCounter
parameter_list|(
name|int
name|id
parameter_list|,
name|long
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|id
operator|<
name|registeredCounters
operator|.
name|size
argument_list|()
condition|)
block|{
name|Counters
operator|.
name|Counter
name|counter
init|=
name|registeredCounters
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|counter
operator|.
name|increment
argument_list|(
name|amount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid counter with id: "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
DECL|method|authenticate (String digest)
specifier|public
specifier|synchronized
name|boolean
name|authenticate
parameter_list|(
name|String
name|digest
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|expectedDigest
operator|.
name|equals
argument_list|(
name|digest
argument_list|)
condition|)
block|{
name|exception
operator|=
operator|new
name|IOException
argument_list|(
literal|"Authentication Failed: Expected digest="
operator|+
name|expectedDigest
operator|+
literal|", received="
operator|+
name|digestReceived
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
name|digestReceived
operator|=
literal|true
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
return|return
name|success
return|;
block|}
comment|/**    * This is called by Application and blocks the thread until    * authentication response is received.    * @throws IOException    * @throws InterruptedException    */
DECL|method|waitForAuthentication ()
specifier|synchronized
name|void
name|waitForAuthentication
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
while|while
condition|(
name|digestReceived
operator|==
literal|false
operator|&&
name|exception
operator|==
literal|null
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

