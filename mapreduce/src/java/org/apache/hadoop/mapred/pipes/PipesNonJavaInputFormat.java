begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.pipes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|pipes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Dummy input format used when non-Java a {@link RecordReader} is used by  * the Pipes' application.  *  * The only useful thing this does is set up the Map-Reduce job to get the  * {@link PipesDummyRecordReader}, everything else left for the 'actual'  * InputFormat specified by the user which is given by   *<i>mapreduce.pipes.inputformat</i>.  */
end_comment

begin_class
DECL|class|PipesNonJavaInputFormat
class|class
name|PipesNonJavaInputFormat
implements|implements
name|InputFormat
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|method|getRecordReader ( InputSplit genericSplit, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|genericSplit
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|PipesDummyRecordReader
argument_list|(
name|job
argument_list|,
name|genericSplit
argument_list|)
return|;
block|}
DECL|method|getSplits (JobConf job, int numSplits)
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Delegate the generation of input splits to the 'original' InputFormat
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|job
operator|.
name|getClass
argument_list|(
name|Submitter
operator|.
name|INPUT_FORMAT
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|,
name|InputFormat
operator|.
name|class
argument_list|)
argument_list|,
name|job
argument_list|)
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|numSplits
argument_list|)
return|;
block|}
comment|/**    * A dummy {@link org.apache.hadoop.mapred.RecordReader} to help track the    * progress of Hadoop Pipes' applications when they are using a non-Java    *<code>RecordReader</code>.    *    * The<code>PipesDummyRecordReader</code> is informed of the 'progress' of    * the task by the {@link OutputHandler#progress(float)} which calls the    * {@link #next(FloatWritable, NullWritable)} with the progress as the    *<code>key</code>.    */
DECL|class|PipesDummyRecordReader
specifier|static
class|class
name|PipesDummyRecordReader
implements|implements
name|RecordReader
argument_list|<
name|FloatWritable
argument_list|,
name|NullWritable
argument_list|>
block|{
DECL|field|progress
name|float
name|progress
init|=
literal|0.0f
decl_stmt|;
DECL|method|PipesDummyRecordReader (Configuration job, InputSplit split)
specifier|public
name|PipesDummyRecordReader
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|InputSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{     }
DECL|method|createKey ()
specifier|public
name|FloatWritable
name|createKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|createValue ()
specifier|public
name|NullWritable
name|createValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{}
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|progress
return|;
block|}
DECL|method|next (FloatWritable key, NullWritable value)
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|FloatWritable
name|key
parameter_list|,
name|NullWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|progress
operator|=
name|key
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

