begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * A generic directive from the {@link org.apache.hadoop.mapred.JobTracker}  * to the {@link org.apache.hadoop.mapred.TaskTracker} to take some 'action'.   *   */
end_comment

begin_class
DECL|class|TaskTrackerAction
specifier|abstract
class|class
name|TaskTrackerAction
implements|implements
name|Writable
block|{
comment|/**    * Ennumeration of various 'actions' that the {@link JobTracker}    * directs the {@link TaskTracker} to perform periodically.    *     */
DECL|enum|ActionType
specifier|public
specifier|static
enum|enum
name|ActionType
block|{
comment|/** Launch a new task. */
DECL|enumConstant|LAUNCH_TASK
name|LAUNCH_TASK
block|,
comment|/** Kill a task. */
DECL|enumConstant|KILL_TASK
name|KILL_TASK
block|,
comment|/** Kill any tasks of this job and cleanup. */
DECL|enumConstant|KILL_JOB
name|KILL_JOB
block|,
comment|/** Reinitialize the tasktracker. */
DECL|enumConstant|REINIT_TRACKER
name|REINIT_TRACKER
block|,
comment|/** Ask a task to save its output. */
DECL|enumConstant|COMMIT_TASK
name|COMMIT_TASK
block|}
empty_stmt|;
comment|/**    * A factory-method to create objects of given {@link ActionType}.     * @param actionType the {@link ActionType} of object to create.    * @return an object of {@link ActionType}.    */
DECL|method|createAction (ActionType actionType)
specifier|public
specifier|static
name|TaskTrackerAction
name|createAction
parameter_list|(
name|ActionType
name|actionType
parameter_list|)
block|{
name|TaskTrackerAction
name|action
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|actionType
condition|)
block|{
case|case
name|LAUNCH_TASK
case|:
block|{
name|action
operator|=
operator|new
name|LaunchTaskAction
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|KILL_TASK
case|:
block|{
name|action
operator|=
operator|new
name|KillTaskAction
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|KILL_JOB
case|:
block|{
name|action
operator|=
operator|new
name|KillJobAction
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|REINIT_TRACKER
case|:
block|{
name|action
operator|=
operator|new
name|ReinitTrackerAction
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|COMMIT_TASK
case|:
block|{
name|action
operator|=
operator|new
name|CommitTaskAction
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
return|return
name|action
return|;
block|}
DECL|field|actionType
specifier|private
name|ActionType
name|actionType
decl_stmt|;
DECL|method|TaskTrackerAction (ActionType actionType)
specifier|protected
name|TaskTrackerAction
parameter_list|(
name|ActionType
name|actionType
parameter_list|)
block|{
name|this
operator|.
name|actionType
operator|=
name|actionType
expr_stmt|;
block|}
comment|/**    * Return the {@link ActionType}.    * @return the {@link ActionType}.    */
DECL|method|getActionId ()
name|ActionType
name|getActionId
parameter_list|()
block|{
return|return
name|actionType
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|out
argument_list|,
name|actionType
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|actionType
operator|=
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|in
argument_list|,
name|ActionType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

