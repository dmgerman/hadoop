begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JvmTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitIndex
import|;
end_import

begin_comment
comment|/**  * IsolationRunner is intended to facilitate debugging by re-running a specific  * task, given left-over task files for a (typically failed) past job.    * Currently, it is limited to re-running map tasks.  *  * Users may coerce MapReduce to keep task files around by setting   * mapreduce.task.files.preserve.failedtasks.  See mapred_tutorial.xml for more documentation.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|IsolationRunner
specifier|public
class|class
name|IsolationRunner
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IsolationRunner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|class|FakeUmbilical
specifier|static
class|class
name|FakeUmbilical
implements|implements
name|TaskUmbilicalProtocol
block|{
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
block|{
return|return
name|TaskUmbilicalProtocol
operator|.
name|versionID
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|this
argument_list|,
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
return|;
block|}
DECL|method|done (TaskAttemptID taskid)
specifier|public
name|void
name|done
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|taskid
operator|+
literal|" reporting done."
argument_list|)
expr_stmt|;
block|}
DECL|method|fsError (TaskAttemptID taskId, String message)
specifier|public
name|void
name|fsError
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|taskId
operator|+
literal|" reporting file system error: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|shuffleError (TaskAttemptID taskId, String message)
specifier|public
name|void
name|shuffleError
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|taskId
operator|+
literal|" reporting shuffle error: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|fatalError (TaskAttemptID taskId, String msg)
specifier|public
name|void
name|fatalError
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|taskId
operator|+
literal|" reporting fatal error: "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|method|getTask (JvmContext context)
specifier|public
name|JvmTask
name|getTask
parameter_list|(
name|JvmContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
DECL|method|ping (TaskAttemptID taskid)
specifier|public
name|boolean
name|ping
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
DECL|method|commitPending (TaskAttemptID taskId, TaskStatus taskStatus)
specifier|public
name|void
name|commitPending
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|TaskStatus
name|taskStatus
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|statusUpdate
argument_list|(
name|taskId
argument_list|,
name|taskStatus
argument_list|)
expr_stmt|;
block|}
DECL|method|canCommit (TaskAttemptID taskid)
specifier|public
name|boolean
name|canCommit
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
DECL|method|statusUpdate (TaskAttemptID taskId, TaskStatus taskStatus)
specifier|public
name|boolean
name|statusUpdate
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|TaskStatus
name|taskStatus
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"Task "
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|taskId
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" making progress to "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|taskStatus
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|state
init|=
name|taskStatus
operator|.
name|getStateString
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" and state of "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// ignore phase
comment|// ignore counters
return|return
literal|true
return|;
block|}
DECL|method|reportDiagnosticInfo (TaskAttemptID taskid, String trace)
specifier|public
name|void
name|reportDiagnosticInfo
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|String
name|trace
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|taskid
operator|+
literal|" has problem "
operator|+
name|trace
argument_list|)
expr_stmt|;
block|}
DECL|method|getMapCompletionEvents (JobID jobId, int fromEventId, int maxLocs, TaskAttemptID id)
specifier|public
name|MapTaskCompletionEventsUpdate
name|getMapCompletionEvents
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|int
name|fromEventId
parameter_list|,
name|int
name|maxLocs
parameter_list|,
name|TaskAttemptID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MapTaskCompletionEventsUpdate
argument_list|(
name|TaskCompletionEvent
operator|.
name|EMPTY_ARRAY
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|reportNextRecordRange (TaskAttemptID taskid, SortedRanges.Range range)
specifier|public
name|void
name|reportNextRecordRange
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|SortedRanges
operator|.
name|Range
name|range
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|taskid
operator|+
literal|" reportedNextRecordRange "
operator|+
name|range
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeClassLoader (JobConf conf, File workDir)
specifier|private
name|ClassLoader
name|makeClassLoader
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|File
name|workDir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|classPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add jar clas files (includes lib/* and classes/*)
name|String
name|jar
init|=
name|conf
operator|.
name|getJar
argument_list|()
decl_stmt|;
if|if
condition|(
name|jar
operator|!=
literal|null
condition|)
block|{
name|TaskRunner
operator|.
name|appendJobJarClasspaths
argument_list|(
name|conf
operator|.
name|getJar
argument_list|()
argument_list|,
name|classPaths
argument_list|)
expr_stmt|;
block|}
comment|// Add the workdir, too.
name|classPaths
operator|.
name|add
argument_list|(
name|workDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Note: TaskRunner.run() does more, including DistributedCache files.
comment|// Convert to URLs
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[
name|classPaths
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classPaths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|urls
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|classPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|URLClassLoader
argument_list|(
name|urls
argument_list|)
return|;
block|}
comment|/**    * Main method.    */
DECL|method|run (String[] args)
name|boolean
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: IsolationRunner<path>/job.xml "
operator|+
literal|"<optional-user-name>"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|File
name|jobFilename
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jobFilename
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|jobFilename
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|jobFilename
operator|+
literal|" is not a valid job file."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|user
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|user
operator|=
name|args
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
operator|new
name|Path
argument_list|(
name|jobFilename
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|TaskAttemptID
name|taskId
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskId
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"mapreduce.task.attempt.id not found in configuration;"
operator|+
literal|" job.xml is not a task config"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isMap
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|JobContext
operator|.
name|TASK_ISMAP
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isMap
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Only map tasks are supported."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|partition
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|JobContext
operator|.
name|TASK_PARTITION
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// setup the local and user working directories
name|FileSystem
name|local
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LocalDirAllocator
name|lDirAlloc
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
decl_stmt|;
name|File
name|workDirName
init|=
name|TaskRunner
operator|.
name|formWorkDir
argument_list|(
name|lDirAlloc
argument_list|,
name|taskId
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|local
operator|.
name|setWorkingDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|workDirName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
operator|.
name|setWorkingDirectory
argument_list|(
name|conf
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|// set up a classloader with the right classpath
name|ClassLoader
name|classLoader
init|=
name|makeClassLoader
argument_list|(
name|conf
argument_list|,
operator|new
name|File
argument_list|(
name|workDirName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
comment|// split.dta/split.meta files are used only by IsolationRunner.
comment|// The file can now be in any of the configured local disks,
comment|// so use LocalDirAllocator to find out where it is.
name|Path
name|localMetaSplit
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
operator|.
name|getLocalPathToRead
argument_list|(
name|TaskTracker
operator|.
name|getLocalSplitMetaFile
argument_list|(
name|conf
operator|.
name|getUser
argument_list|()
argument_list|,
name|taskId
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|taskId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DataInputStream
name|splitFile
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|open
argument_list|(
name|localMetaSplit
argument_list|)
decl_stmt|;
name|TaskSplitIndex
name|splitIndex
init|=
operator|new
name|TaskSplitIndex
argument_list|()
decl_stmt|;
name|splitIndex
operator|.
name|readFields
argument_list|(
name|splitFile
argument_list|)
expr_stmt|;
name|splitFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|Task
name|task
init|=
operator|new
name|MapTask
argument_list|(
name|jobFilename
operator|.
name|toString
argument_list|()
argument_list|,
name|taskId
argument_list|,
name|partition
argument_list|,
name|splitIndex
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|task
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|task
operator|.
name|run
argument_list|(
name|conf
argument_list|,
operator|new
name|FakeUmbilical
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Run a single task.    *    * @param args the first argument is the task directory    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
operator|!
operator|new
name|IsolationRunner
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

