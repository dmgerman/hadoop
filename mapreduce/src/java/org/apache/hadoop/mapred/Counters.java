begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|MissingResourceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormatCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A set of named counters.  *   *<p><code>Counters</code> represent global counters, defined either by the   * Map-Reduce framework or applications. Each<code>Counter</code> can be of  * any {@link Enum} type.</p>  *   *<p><code>Counters</code> are bunched into {@link Group}s, each comprising of  * counters from a particular<code>Enum</code> class.   * @deprecated Use {@link org.apache.hadoop.mapreduce.Counters} instead.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Counters
specifier|public
class|class
name|Counters
implements|implements
name|Writable
implements|,
name|Iterable
argument_list|<
name|Counters
operator|.
name|Group
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Counters
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GROUP_OPEN
specifier|private
specifier|static
specifier|final
name|char
name|GROUP_OPEN
init|=
literal|'{'
decl_stmt|;
DECL|field|GROUP_CLOSE
specifier|private
specifier|static
specifier|final
name|char
name|GROUP_CLOSE
init|=
literal|'}'
decl_stmt|;
DECL|field|COUNTER_OPEN
specifier|private
specifier|static
specifier|final
name|char
name|COUNTER_OPEN
init|=
literal|'['
decl_stmt|;
DECL|field|COUNTER_CLOSE
specifier|private
specifier|static
specifier|final
name|char
name|COUNTER_CLOSE
init|=
literal|']'
decl_stmt|;
DECL|field|UNIT_OPEN
specifier|private
specifier|static
specifier|final
name|char
name|UNIT_OPEN
init|=
literal|'('
decl_stmt|;
DECL|field|UNIT_CLOSE
specifier|private
specifier|static
specifier|final
name|char
name|UNIT_CLOSE
init|=
literal|')'
decl_stmt|;
DECL|field|charsToEscape
specifier|private
specifier|static
name|char
index|[]
name|charsToEscape
init|=
block|{
name|GROUP_OPEN
block|,
name|GROUP_CLOSE
block|,
name|COUNTER_OPEN
block|,
name|COUNTER_CLOSE
block|,
name|UNIT_OPEN
block|,
name|UNIT_CLOSE
block|}
decl_stmt|;
comment|//private static Log log = LogFactory.getLog("Counters.class");
comment|/**    * Downgrade new {@link org.apache.hadoop.mapreduce.Counters} to old Counters    * @param newCounters new Counters    * @return old Counters instance corresponding to newCounters    */
DECL|method|downgrade (org.apache.hadoop.mapreduce.Counters newCounters)
specifier|static
name|Counters
name|downgrade
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|newCounters
parameter_list|)
block|{
name|Counters
name|oldCounters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|CounterGroup
name|newGroup
range|:
name|newCounters
control|)
block|{
name|String
name|groupName
init|=
name|newGroup
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Group
name|oldGroup
init|=
name|oldCounters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|newCounter
range|:
name|newGroup
control|)
block|{
name|Counter
name|oldCounter
init|=
name|oldGroup
operator|.
name|getCounterForName
argument_list|(
name|newCounter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|oldCounter
operator|.
name|setDisplayName
argument_list|(
name|newCounter
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|oldCounter
operator|.
name|increment
argument_list|(
name|newCounter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oldCounters
return|;
block|}
comment|/**    * A counter record, comprising its name and value.     */
DECL|class|Counter
specifier|public
specifier|static
class|class
name|Counter
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
block|{
DECL|method|Counter ()
name|Counter
parameter_list|()
block|{      }
DECL|method|Counter (String name, String displayName, long value)
name|Counter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
name|increment
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setDisplayName (String newName)
specifier|public
name|void
name|setDisplayName
parameter_list|(
name|String
name|newName
parameter_list|)
block|{
name|super
operator|.
name|setDisplayName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the compact stringified version of the counter in the format      * [(actual-name)(display-name)(value)]      */
DECL|method|makeEscapedCompactString ()
specifier|public
specifier|synchronized
name|String
name|makeEscapedCompactString
parameter_list|()
block|{
comment|// First up, obtain the strings that need escaping. This will help us
comment|// determine the buffer length apriori.
name|String
name|escapedName
init|=
name|escape
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|escapedDispName
init|=
name|escape
argument_list|(
name|getDisplayName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|currentValue
init|=
name|this
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|escapedName
operator|.
name|length
argument_list|()
operator|+
name|escapedDispName
operator|.
name|length
argument_list|()
operator|+
literal|4
decl_stmt|;
name|length
operator|+=
literal|8
expr_stmt|;
comment|// For the following delimiting characters
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|COUNTER_OPEN
argument_list|)
expr_stmt|;
comment|// Add the counter name
name|builder
operator|.
name|append
argument_list|(
name|UNIT_OPEN
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|escapedName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|UNIT_CLOSE
argument_list|)
expr_stmt|;
comment|// Add the display name
name|builder
operator|.
name|append
argument_list|(
name|UNIT_OPEN
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|escapedDispName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|UNIT_CLOSE
argument_list|)
expr_stmt|;
comment|// Add the value
name|builder
operator|.
name|append
argument_list|(
name|UNIT_OPEN
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|currentValue
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|UNIT_CLOSE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|COUNTER_CLOSE
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Checks for (content) equality of two (basic) counters
annotation|@
name|Deprecated
DECL|method|contentEquals (Counter c)
specifier|synchronized
name|boolean
name|contentEquals
parameter_list|(
name|Counter
name|c
parameter_list|)
block|{
return|return
name|this
operator|.
name|equals
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|/**      * What is the current value of this counter?      * @return the current value      */
DECL|method|getCounter ()
specifier|public
specifier|synchronized
name|long
name|getCounter
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
return|;
block|}
block|}
comment|/**    *<code>Group</code> of counters, comprising of counters from a particular     *  counter {@link Enum} class.      *    *<p><code>Group</code>handles localization of the class name and the     *  counter names.</p>    */
DECL|class|Group
specifier|public
specifier|static
class|class
name|Group
implements|implements
name|Writable
implements|,
name|Iterable
argument_list|<
name|Counter
argument_list|>
block|{
DECL|field|groupName
specifier|private
name|String
name|groupName
decl_stmt|;
DECL|field|displayName
specifier|private
name|String
name|displayName
decl_stmt|;
DECL|field|subcounters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|subcounters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
argument_list|()
decl_stmt|;
comment|// Optional ResourceBundle for localization of group and counter names.
DECL|field|bundle
specifier|private
name|ResourceBundle
name|bundle
init|=
literal|null
decl_stmt|;
DECL|method|Group (String groupName)
name|Group
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
try|try
block|{
name|bundle
operator|=
name|getResourceBundle
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|neverMind
parameter_list|)
block|{       }
name|this
operator|.
name|groupName
operator|=
name|groupName
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|localize
argument_list|(
literal|"CounterGroupName"
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating group "
operator|+
name|groupName
operator|+
literal|" with "
operator|+
operator|(
name|bundle
operator|==
literal|null
condition|?
literal|"nothing"
else|:
literal|"bundle"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the specified resource bundle, or throws an exception.      * @throws MissingResourceException if the bundle isn't found      */
DECL|method|getResourceBundle (String enumClassName)
specifier|private
specifier|static
name|ResourceBundle
name|getResourceBundle
parameter_list|(
name|String
name|enumClassName
parameter_list|)
block|{
name|String
name|bundleName
init|=
name|enumClassName
operator|.
name|replace
argument_list|(
literal|'$'
argument_list|,
literal|'_'
argument_list|)
decl_stmt|;
return|return
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|bundleName
argument_list|)
return|;
block|}
comment|/**      * Returns raw name of the group.  This is the name of the enum class      * for this group of counters.      */
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|groupName
return|;
block|}
comment|/**      * Returns localized name of the group.  This is the same as getName() by      * default, but different if an appropriate ResourceBundle is found.      */
DECL|method|getDisplayName ()
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|displayName
return|;
block|}
comment|/**      * Set the display name      */
DECL|method|setDisplayName (String displayName)
specifier|public
name|void
name|setDisplayName
parameter_list|(
name|String
name|displayName
parameter_list|)
block|{
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
block|}
comment|/**      * Returns the compact stringified version of the group in the format      * {(actual-name)(display-name)(value)[][][]} where [] are compact strings for the      * counters within.      */
DECL|method|makeEscapedCompactString ()
specifier|public
name|String
name|makeEscapedCompactString
parameter_list|()
block|{
name|String
index|[]
name|subcountersArray
init|=
operator|new
name|String
index|[
name|subcounters
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|// First up, obtain the strings that need escaping. This will help us
comment|// determine the buffer length apriori.
name|String
name|escapedName
init|=
name|escape
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|escapedDispName
init|=
name|escape
argument_list|(
name|getDisplayName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|length
init|=
name|escapedName
operator|.
name|length
argument_list|()
operator|+
name|escapedDispName
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|subcounters
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|escapedStr
init|=
name|counter
operator|.
name|makeEscapedCompactString
argument_list|()
decl_stmt|;
name|subcountersArray
index|[
name|i
operator|++
index|]
operator|=
name|escapedStr
expr_stmt|;
name|length
operator|+=
name|escapedStr
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|length
operator|+=
literal|6
expr_stmt|;
comment|// for all the delimiting characters below
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|GROUP_OPEN
argument_list|)
expr_stmt|;
comment|// group start
comment|// Add the group name
name|builder
operator|.
name|append
argument_list|(
name|UNIT_OPEN
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|escapedName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|UNIT_CLOSE
argument_list|)
expr_stmt|;
comment|// Add the display name
name|builder
operator|.
name|append
argument_list|(
name|UNIT_OPEN
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|escapedDispName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|UNIT_CLOSE
argument_list|)
expr_stmt|;
comment|// write the value
for|for
control|(
name|Counter
name|counter
range|:
name|subcounters
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|counter
operator|.
name|makeEscapedCompactString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|GROUP_CLOSE
argument_list|)
expr_stmt|;
comment|// group end
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|subcounters
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**       * Checks for (content) equality of Groups      */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|isEqual
init|=
literal|false
decl_stmt|;
name|Group
name|g
init|=
operator|(
name|Group
operator|)
name|obj
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|==
name|g
operator|.
name|size
argument_list|()
condition|)
block|{
name|isEqual
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|subcounters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Counter
name|c1
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Counter
name|c2
init|=
name|g
operator|.
name|getCounterForName
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c1
operator|.
name|contentEquals
argument_list|(
name|c2
argument_list|)
condition|)
block|{
name|isEqual
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|isEqual
return|;
block|}
comment|/**      * Returns the value of the specified counter, or 0 if the counter does      * not exist.      */
DECL|method|getCounter (String counterName)
specifier|public
specifier|synchronized
name|long
name|getCounter
parameter_list|(
name|String
name|counterName
parameter_list|)
block|{
for|for
control|(
name|Counter
name|counter
range|:
name|subcounters
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|counter
operator|!=
literal|null
operator|&&
name|counter
operator|.
name|getDisplayName
argument_list|()
operator|.
name|equals
argument_list|(
name|counterName
argument_list|)
condition|)
block|{
return|return
name|counter
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|0L
return|;
block|}
comment|/**      * Get the counter for the given id and create it if it doesn't exist.      * @param id the numeric id of the counter within the group      * @param name the internal counter name      * @return the counter      * @deprecated use {@link #getCounter(String)} instead      */
annotation|@
name|Deprecated
DECL|method|getCounter (int id, String name)
specifier|public
specifier|synchronized
name|Counter
name|getCounter
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|getCounterForName
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Get the counter for the given name and create it if it doesn't exist.      * @param name the internal counter name      * @return the counter      */
DECL|method|getCounterForName (String name)
specifier|public
specifier|synchronized
name|Counter
name|getCounterForName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Counter
name|result
init|=
name|subcounters
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
operator|new
name|Counter
argument_list|(
name|name
argument_list|,
name|localize
argument_list|(
name|name
operator|+
literal|".name"
argument_list|,
name|name
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|subcounters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Returns the number of counters in this group.      */
DECL|method|size ()
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|subcounters
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Looks up key in the ResourceBundle and returns the corresponding value.      * If the bundle or the key doesn't exist, returns the default value.      */
DECL|method|localize (String key, String defaultValue)
specifier|private
name|String
name|localize
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|result
init|=
name|defaultValue
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|=
name|bundle
operator|.
name|getString
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|mre
parameter_list|)
block|{         }
block|}
return|return
name|result
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|subcounters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|subcounters
operator|.
name|values
argument_list|()
control|)
block|{
name|counter
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readFields (DataInput in)
specifier|public
specifier|synchronized
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|displayName
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|subcounters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Counter
name|counter
init|=
operator|new
name|Counter
argument_list|()
decl_stmt|;
name|counter
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|subcounters
operator|.
name|put
argument_list|(
name|counter
operator|.
name|getName
argument_list|()
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|iterator ()
specifier|public
specifier|synchronized
name|Iterator
argument_list|<
name|Counter
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Counter
argument_list|>
argument_list|(
name|subcounters
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
comment|// Map from group name (enum class name) to map of int (enum ordinal) to
comment|// counter record (name-value pair).
DECL|field|counters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Group
argument_list|>
name|counters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Group
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * A cache from enum values to the associated counter. Dramatically speeds up    * typical usage.    */
DECL|field|cache
specifier|private
name|Map
argument_list|<
name|Enum
argument_list|,
name|Counter
argument_list|>
name|cache
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Enum
argument_list|,
name|Counter
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Returns the names of all counter classes.    * @return Set of counter names.    */
DECL|method|getGroupNames ()
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|String
argument_list|>
name|getGroupNames
parameter_list|()
block|{
return|return
name|counters
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|iterator ()
specifier|public
specifier|synchronized
name|Iterator
argument_list|<
name|Group
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|counters
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**    * Returns the named counter group, or an empty group if there is none    * with the specified name.    */
DECL|method|getGroup (String groupName)
specifier|public
specifier|synchronized
name|Group
name|getGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
comment|// To provide support for deprecated group names
if|if
condition|(
name|groupName
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|)
condition|)
block|{
name|groupName
operator|=
literal|"org.apache.hadoop.mapreduce.TaskCounter"
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Group org.apache.hadoop.mapred.Task$Counter is deprecated."
operator|+
literal|" Use org.apache.hadoop.mapreduce.TaskCounter instead"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupName
operator|.
name|equals
argument_list|(
literal|"org.apache.hadoop.mapred.JobInProgress$Counter"
argument_list|)
condition|)
block|{
name|groupName
operator|=
literal|"org.apache.hadoop.mapreduce.JobCounter"
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Group org.apache.hadoop.mapred.JobInProgress$Counter "
operator|+
literal|"is deprecated. Use "
operator|+
literal|"org.apache.hadoop.mapreduce.JobCounter instead"
argument_list|)
expr_stmt|;
block|}
name|Group
name|result
init|=
name|counters
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Group
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Find the counter for the given enum. The same enum will always return the    * same counter.    * @param key the counter key    * @return the matching counter object    */
DECL|method|findCounter (Enum key)
specifier|public
specifier|synchronized
name|Counter
name|findCounter
parameter_list|(
name|Enum
name|key
parameter_list|)
block|{
name|Counter
name|counter
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
name|Group
name|group
init|=
name|getGroup
argument_list|(
name|key
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|counter
operator|=
name|group
operator|.
name|getCounterForName
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
return|return
name|counter
return|;
block|}
comment|/**    * Find a counter given the group and the name.    * @param group the name of the group    * @param name the internal name of the counter    * @return the counter for that name    */
DECL|method|findCounter (String group, String name)
specifier|public
specifier|synchronized
name|Counter
name|findCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"MAP_INPUT_BYTES"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Counter name MAP_INPUT_BYTES is deprecated. "
operator|+
literal|"Use FileInputFormatCounters as group name and "
operator|+
literal|" BYTES_READ as counter name instead"
argument_list|)
expr_stmt|;
return|return
name|findCounter
argument_list|(
name|FileInputFormatCounter
operator|.
name|BYTES_READ
argument_list|)
return|;
block|}
return|return
name|getGroup
argument_list|(
name|group
argument_list|)
operator|.
name|getCounterForName
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Find a counter by using strings    * @param group the name of the group    * @param id the id of the counter within the group (0 to N-1)    * @param name the internal name of the counter    * @return the counter for that name    * @deprecated    */
annotation|@
name|Deprecated
DECL|method|findCounter (String group, int id, String name)
specifier|public
specifier|synchronized
name|Counter
name|findCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Increments the specified counter by the specified amount, creating it if    * it didn't already exist.    * @param key identifies a counter    * @param amount amount by which counter is to be incremented    */
DECL|method|incrCounter (Enum key, long amount)
specifier|public
specifier|synchronized
name|void
name|incrCounter
parameter_list|(
name|Enum
name|key
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
name|findCounter
argument_list|(
name|key
argument_list|)
operator|.
name|increment
argument_list|(
name|amount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Increments the specified counter by the specified amount, creating it if    * it didn't already exist.    * @param group the name of the group    * @param counter the internal name of the counter    * @param amount amount by which counter is to be incremented    */
DECL|method|incrCounter (String group, String counter, long amount)
specifier|public
specifier|synchronized
name|void
name|incrCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|counter
parameter_list|,
name|long
name|amount
parameter_list|)
block|{
name|findCounter
argument_list|(
name|group
argument_list|,
name|counter
argument_list|)
operator|.
name|increment
argument_list|(
name|amount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns current value of the specified counter, or 0 if the counter    * does not exist.    */
DECL|method|getCounter (Enum key)
specifier|public
specifier|synchronized
name|long
name|getCounter
parameter_list|(
name|Enum
name|key
parameter_list|)
block|{
return|return
name|findCounter
argument_list|(
name|key
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**    * Increments multiple counters by their amounts in another Counters     * instance.    * @param other the other Counters instance    */
DECL|method|incrAllCounters (Counters other)
specifier|public
specifier|synchronized
name|void
name|incrAllCounters
parameter_list|(
name|Counters
name|other
parameter_list|)
block|{
for|for
control|(
name|Group
name|otherGroup
range|:
name|other
control|)
block|{
name|Group
name|group
init|=
name|getGroup
argument_list|(
name|otherGroup
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|group
operator|.
name|displayName
operator|=
name|otherGroup
operator|.
name|displayName
expr_stmt|;
for|for
control|(
name|Counter
name|otherCounter
range|:
name|otherGroup
control|)
block|{
name|Counter
name|counter
init|=
name|group
operator|.
name|getCounterForName
argument_list|(
name|otherCounter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|counter
operator|.
name|setDisplayName
argument_list|(
name|otherCounter
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|(
name|otherCounter
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Convenience method for computing the sum of two sets of counters.    */
DECL|method|sum (Counters a, Counters b)
specifier|public
specifier|static
name|Counters
name|sum
parameter_list|(
name|Counters
name|a
parameter_list|,
name|Counters
name|b
parameter_list|)
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|counters
operator|.
name|incrAllCounters
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrAllCounters
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|counters
return|;
block|}
comment|/**    * Returns the total number of counters, by summing the number of counters    * in each group.    */
DECL|method|size ()
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|this
control|)
block|{
name|result
operator|+=
name|group
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Write the set of groups.    * The external format is:    *     #groups (groupName group)*    *    * i.e. the number of groups followed by 0 or more groups, where each     * group is of the form:    *    *     groupDisplayName #counters (false | true counter)*    *    * where each counter is of the form:    *    *     name (false | true displayName) value    */
DECL|method|write (DataOutput out)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|counters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|counters
operator|.
name|values
argument_list|()
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read a set of groups.    */
DECL|method|readFields (DataInput in)
specifier|public
specifier|synchronized
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numClasses
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|counters
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|numClasses
operator|--
operator|>
literal|0
condition|)
block|{
name|String
name|groupName
init|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Group
name|group
init|=
operator|new
name|Group
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|group
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Logs the current counter values.    * @param log The log to use.    */
DECL|method|log (Log log)
specifier|public
name|void
name|log
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Counters: "
operator|+
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|this
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|group
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|group
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"    "
operator|+
name|counter
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|"="
operator|+
name|counter
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return textual representation of the counter values.    */
DECL|method|toString ()
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Counters: "
operator|+
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|this
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t"
operator|+
name|group
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Counter
name|counter
range|:
name|group
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t\t"
operator|+
name|counter
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|"="
operator|+
name|counter
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Convert a counters object into a single line that is easy to parse.    * @return the string with "name=value" for each counter and separated by ","    */
DECL|method|makeCompactString ()
specifier|public
specifier|synchronized
name|String
name|makeCompactString
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|this
control|)
block|{
for|for
control|(
name|Counter
name|counter
range|:
name|group
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|group
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|counter
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|counter
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Represent the counter in a textual format that can be converted back to     * its object form    * @return the string in the following format    * {(groupname)(group-displayname)[(countername)(displayname)(value)][][]}{}{}    */
DECL|method|makeEscapedCompactString ()
specifier|public
specifier|synchronized
name|String
name|makeEscapedCompactString
parameter_list|()
block|{
name|String
index|[]
name|groupsArray
init|=
operator|new
name|String
index|[
name|counters
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|// First up, obtain the escaped string for each group so that we can
comment|// determine the buffer length apriori.
for|for
control|(
name|Group
name|group
range|:
name|this
control|)
block|{
name|String
name|escapedString
init|=
name|group
operator|.
name|makeEscapedCompactString
argument_list|()
decl_stmt|;
name|groupsArray
index|[
name|i
operator|++
index|]
operator|=
name|escapedString
expr_stmt|;
name|length
operator|+=
name|escapedString
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
comment|// Now construct the buffer
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|group
range|:
name|groupsArray
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Extracts a block (data enclosed within delimeters) ignoring escape
comment|// sequences. Throws ParseException if an incomplete block is found else
comment|// returns null.
DECL|method|getBlock (String str, char open, char close, IntWritable index)
specifier|private
specifier|static
name|String
name|getBlock
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|open
parameter_list|,
name|char
name|close
parameter_list|,
name|IntWritable
name|index
parameter_list|)
throws|throws
name|ParseException
block|{
name|StringBuilder
name|split
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|next
init|=
name|StringUtils
operator|.
name|findNext
argument_list|(
name|str
argument_list|,
name|open
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
name|index
operator|.
name|get
argument_list|()
argument_list|,
name|split
argument_list|)
decl_stmt|;
name|split
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// clear the buffer
if|if
condition|(
name|next
operator|>=
literal|0
condition|)
block|{
operator|++
name|next
expr_stmt|;
comment|// move over '('
name|next
operator|=
name|StringUtils
operator|.
name|findNext
argument_list|(
name|str
argument_list|,
name|close
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
name|next
argument_list|,
name|split
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|>=
literal|0
condition|)
block|{
operator|++
name|next
expr_stmt|;
comment|// move over ')'
name|index
operator|.
name|set
argument_list|(
name|next
argument_list|)
expr_stmt|;
return|return
name|split
operator|.
name|toString
argument_list|()
return|;
comment|// found a block
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Unexpected end of block"
argument_list|,
name|next
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
comment|// found nothing
block|}
comment|/**    * Convert a stringified counter representation into a counter object. Note     * that the counter can be recovered if its stringified using     * {@link #makeEscapedCompactString()}.     * @return a Counter    */
DECL|method|fromEscapedCompactString (String compactString)
specifier|public
specifier|static
name|Counters
name|fromEscapedCompactString
parameter_list|(
name|String
name|compactString
parameter_list|)
throws|throws
name|ParseException
block|{
name|Counters
name|counters
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
name|IntWritable
name|index
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Get the group to work on
name|String
name|groupString
init|=
name|getBlock
argument_list|(
name|compactString
argument_list|,
name|GROUP_OPEN
argument_list|,
name|GROUP_CLOSE
argument_list|,
name|index
argument_list|)
decl_stmt|;
while|while
condition|(
name|groupString
operator|!=
literal|null
condition|)
block|{
name|IntWritable
name|groupIndex
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Get the actual name
name|String
name|groupName
init|=
name|getBlock
argument_list|(
name|groupString
argument_list|,
name|UNIT_OPEN
argument_list|,
name|UNIT_CLOSE
argument_list|,
name|groupIndex
argument_list|)
decl_stmt|;
name|groupName
operator|=
name|unescape
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
comment|// Get the display name
name|String
name|groupDisplayName
init|=
name|getBlock
argument_list|(
name|groupString
argument_list|,
name|UNIT_OPEN
argument_list|,
name|UNIT_CLOSE
argument_list|,
name|groupIndex
argument_list|)
decl_stmt|;
name|groupDisplayName
operator|=
name|unescape
argument_list|(
name|groupDisplayName
argument_list|)
expr_stmt|;
comment|// Get the counters
name|Group
name|group
init|=
name|counters
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|group
operator|.
name|setDisplayName
argument_list|(
name|groupDisplayName
argument_list|)
expr_stmt|;
name|String
name|counterString
init|=
name|getBlock
argument_list|(
name|groupString
argument_list|,
name|COUNTER_OPEN
argument_list|,
name|COUNTER_CLOSE
argument_list|,
name|groupIndex
argument_list|)
decl_stmt|;
while|while
condition|(
name|counterString
operator|!=
literal|null
condition|)
block|{
name|IntWritable
name|counterIndex
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Get the actual name
name|String
name|counterName
init|=
name|getBlock
argument_list|(
name|counterString
argument_list|,
name|UNIT_OPEN
argument_list|,
name|UNIT_CLOSE
argument_list|,
name|counterIndex
argument_list|)
decl_stmt|;
name|counterName
operator|=
name|unescape
argument_list|(
name|counterName
argument_list|)
expr_stmt|;
comment|// Get the display name
name|String
name|counterDisplayName
init|=
name|getBlock
argument_list|(
name|counterString
argument_list|,
name|UNIT_OPEN
argument_list|,
name|UNIT_CLOSE
argument_list|,
name|counterIndex
argument_list|)
decl_stmt|;
name|counterDisplayName
operator|=
name|unescape
argument_list|(
name|counterDisplayName
argument_list|)
expr_stmt|;
comment|// Get the value
name|long
name|value
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|getBlock
argument_list|(
name|counterString
argument_list|,
name|UNIT_OPEN
argument_list|,
name|UNIT_CLOSE
argument_list|,
name|counterIndex
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add the counter
name|Counter
name|counter
init|=
name|group
operator|.
name|getCounterForName
argument_list|(
name|counterName
argument_list|)
decl_stmt|;
name|counter
operator|.
name|setDisplayName
argument_list|(
name|counterDisplayName
argument_list|)
expr_stmt|;
name|counter
operator|.
name|increment
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Get the next counter
name|counterString
operator|=
name|getBlock
argument_list|(
name|groupString
argument_list|,
name|COUNTER_OPEN
argument_list|,
name|COUNTER_CLOSE
argument_list|,
name|groupIndex
argument_list|)
expr_stmt|;
block|}
name|groupString
operator|=
name|getBlock
argument_list|(
name|compactString
argument_list|,
name|GROUP_OPEN
argument_list|,
name|GROUP_CLOSE
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|counters
return|;
block|}
comment|// Escapes all the delimiters for counters i.e {,[,(,),],}
DECL|method|escape (String string)
specifier|private
specifier|static
name|String
name|escape
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|string
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
name|charsToEscape
argument_list|)
return|;
block|}
comment|// Unescapes all the delimiters for counters i.e {,[,(,),],}
DECL|method|unescape (String string)
specifier|private
specifier|static
name|String
name|unescape
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|string
argument_list|,
name|StringUtils
operator|.
name|ESCAPE_CHAR
argument_list|,
name|charsToEscape
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
specifier|synchronized
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|counters
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|isEqual
init|=
literal|false
decl_stmt|;
name|Counters
name|other
init|=
operator|(
name|Counters
operator|)
name|obj
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|==
name|other
operator|.
name|size
argument_list|()
condition|)
block|{
name|isEqual
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Group
argument_list|>
name|entry
range|:
name|this
operator|.
name|counters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Group
name|sourceGroup
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Group
name|targetGroup
init|=
name|other
operator|.
name|getGroup
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceGroup
operator|.
name|equals
argument_list|(
name|targetGroup
argument_list|)
condition|)
block|{
name|isEqual
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|isEqual
return|;
block|}
block|}
end_class

end_unit

