begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|OutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|ValueBytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Sorter
operator|.
name|RawKeyValueIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/** This class implements the sort interface using primitive int arrays as   * the data structures (that is why this class is called 'BasicType'SorterBase)  */
end_comment

begin_class
DECL|class|BasicTypeSorterBase
specifier|abstract
class|class
name|BasicTypeSorterBase
implements|implements
name|BufferSorter
block|{
DECL|field|keyValBuffer
specifier|protected
name|OutputBuffer
name|keyValBuffer
decl_stmt|;
comment|//the buffer used for storing
comment|//key/values
DECL|field|startOffsets
specifier|protected
name|int
index|[]
name|startOffsets
decl_stmt|;
comment|//the array used to store the start offsets of
comment|//keys in keyValBuffer
DECL|field|keyLengths
specifier|protected
name|int
index|[]
name|keyLengths
decl_stmt|;
comment|//the array used to store the lengths of
comment|//keys
DECL|field|valueLengths
specifier|protected
name|int
index|[]
name|valueLengths
decl_stmt|;
comment|//the array used to store the value lengths
DECL|field|pointers
specifier|protected
name|int
index|[]
name|pointers
decl_stmt|;
comment|//the array of startOffsets's indices. This will
comment|//be sorted at the end to contain a sorted array of
comment|//indices to offsets
DECL|field|comparator
specifier|protected
name|RawComparator
name|comparator
decl_stmt|;
comment|//the comparator for the map output
DECL|field|count
specifier|protected
name|int
name|count
decl_stmt|;
comment|//the number of key/values
comment|//the overhead of the arrays in memory
comment|//12 => 4 for keyoffsets, 4 for keylengths, 4 for valueLengths, and
comment|//4 for indices into startOffsets array in the
comment|//pointers array (ignored the partpointers list itself)
DECL|field|BUFFERED_KEY_VAL_OVERHEAD
specifier|static
specifier|private
specifier|final
name|int
name|BUFFERED_KEY_VAL_OVERHEAD
init|=
literal|16
decl_stmt|;
DECL|field|INITIAL_ARRAY_SIZE
specifier|static
specifier|private
specifier|final
name|int
name|INITIAL_ARRAY_SIZE
init|=
literal|5
decl_stmt|;
comment|//we maintain the max lengths of the key/val that we encounter.  During
comment|//iteration of the sorted results, we will create a DataOutputBuffer to
comment|//return the keys. The max size of the DataOutputBuffer will be the max
comment|//keylength that we encounter. Expose this value to model memory more
comment|//accurately.
DECL|field|maxKeyLength
specifier|private
name|int
name|maxKeyLength
init|=
literal|0
decl_stmt|;
DECL|field|maxValLength
specifier|private
name|int
name|maxValLength
init|=
literal|0
decl_stmt|;
comment|//Reference to the Progressable object for sending KeepAlive
DECL|field|reporter
specifier|protected
name|Progressable
name|reporter
decl_stmt|;
comment|//Implementation of methods of the SorterBase interface
comment|//
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|comparator
operator|=
name|conf
operator|.
name|getOutputKeyComparator
argument_list|()
expr_stmt|;
block|}
DECL|method|setProgressable (Progressable reporter)
specifier|public
name|void
name|setProgressable
parameter_list|(
name|Progressable
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
DECL|method|addKeyValue (int recordOffset, int keyLength, int valLength)
specifier|public
name|void
name|addKeyValue
parameter_list|(
name|int
name|recordOffset
parameter_list|,
name|int
name|keyLength
parameter_list|,
name|int
name|valLength
parameter_list|)
block|{
comment|//Add the start offset of the key in the startOffsets array and the
comment|//length in the keyLengths array.
if|if
condition|(
name|startOffsets
operator|==
literal|null
operator|||
name|count
operator|==
name|startOffsets
operator|.
name|length
condition|)
name|grow
argument_list|()
expr_stmt|;
name|startOffsets
index|[
name|count
index|]
operator|=
name|recordOffset
expr_stmt|;
name|keyLengths
index|[
name|count
index|]
operator|=
name|keyLength
expr_stmt|;
if|if
condition|(
name|keyLength
operator|>
name|maxKeyLength
condition|)
block|{
name|maxKeyLength
operator|=
name|keyLength
expr_stmt|;
block|}
if|if
condition|(
name|valLength
operator|>
name|maxValLength
condition|)
block|{
name|maxValLength
operator|=
name|valLength
expr_stmt|;
block|}
name|valueLengths
index|[
name|count
index|]
operator|=
name|valLength
expr_stmt|;
name|pointers
index|[
name|count
index|]
operator|=
name|count
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
DECL|method|setInputBuffer (OutputBuffer buffer)
specifier|public
name|void
name|setInputBuffer
parameter_list|(
name|OutputBuffer
name|buffer
parameter_list|)
block|{
comment|//store a reference to the keyValBuffer that we need to read during sort
name|this
operator|.
name|keyValBuffer
operator|=
name|buffer
expr_stmt|;
block|}
DECL|method|getMemoryUtilized ()
specifier|public
name|long
name|getMemoryUtilized
parameter_list|()
block|{
comment|//the total length of the arrays + the max{Key,Val}Length (this will be the
comment|//max size of the DataOutputBuffers during the iteration of the sorted
comment|//keys).
if|if
condition|(
name|startOffsets
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|startOffsets
operator|.
name|length
operator|)
operator|*
name|BUFFERED_KEY_VAL_OVERHEAD
operator|+
name|maxKeyLength
operator|+
name|maxValLength
return|;
block|}
else|else
block|{
comment|//nothing from this yet
return|return
literal|0
return|;
block|}
block|}
DECL|method|sort ()
specifier|public
specifier|abstract
name|RawKeyValueIterator
name|sort
parameter_list|()
function_decl|;
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//set count to 0; also, we don't reuse the arrays since we want to maintain
comment|//consistency in the memory model
name|count
operator|=
literal|0
expr_stmt|;
name|startOffsets
operator|=
literal|null
expr_stmt|;
name|keyLengths
operator|=
literal|null
expr_stmt|;
name|valueLengths
operator|=
literal|null
expr_stmt|;
name|pointers
operator|=
literal|null
expr_stmt|;
name|maxKeyLength
operator|=
literal|0
expr_stmt|;
name|maxValLength
operator|=
literal|0
expr_stmt|;
comment|//release the large key-value buffer so that the GC, if necessary,
comment|//can collect it away
name|keyValBuffer
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|grow ()
specifier|private
name|void
name|grow
parameter_list|()
block|{
name|int
name|currLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|startOffsets
operator|!=
literal|null
condition|)
block|{
name|currLength
operator|=
name|startOffsets
operator|.
name|length
expr_stmt|;
block|}
name|int
name|newLength
init|=
call|(
name|int
call|)
argument_list|(
name|currLength
operator|*
literal|1.1
argument_list|)
operator|+
literal|1
decl_stmt|;
name|startOffsets
operator|=
name|grow
argument_list|(
name|startOffsets
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|keyLengths
operator|=
name|grow
argument_list|(
name|keyLengths
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|valueLengths
operator|=
name|grow
argument_list|(
name|valueLengths
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
name|pointers
operator|=
name|grow
argument_list|(
name|pointers
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
block|}
DECL|method|grow (int[] old, int newLength)
specifier|private
name|int
index|[]
name|grow
parameter_list|(
name|int
index|[]
name|old
parameter_list|,
name|int
name|newLength
parameter_list|)
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|newLength
index|]
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|old
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|old
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

begin_comment
comment|//BasicTypeSorterBase
end_comment

begin_comment
comment|//Implementation of methods of the RawKeyValueIterator interface. These
end_comment

begin_comment
comment|//methods must be invoked to iterate over key/vals after sort is done.
end_comment

begin_comment
comment|//
end_comment

begin_class
DECL|class|MRSortResultIterator
class|class
name|MRSortResultIterator
implements|implements
name|RawKeyValueIterator
block|{
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|pointers
specifier|private
name|int
index|[]
name|pointers
decl_stmt|;
DECL|field|startOffsets
specifier|private
name|int
index|[]
name|startOffsets
decl_stmt|;
DECL|field|keyLengths
specifier|private
name|int
index|[]
name|keyLengths
decl_stmt|;
DECL|field|valLengths
specifier|private
name|int
index|[]
name|valLengths
decl_stmt|;
DECL|field|currStartOffsetIndex
specifier|private
name|int
name|currStartOffsetIndex
decl_stmt|;
DECL|field|currIndexInPointers
specifier|private
name|int
name|currIndexInPointers
decl_stmt|;
DECL|field|keyValBuffer
specifier|private
name|OutputBuffer
name|keyValBuffer
decl_stmt|;
DECL|field|key
specifier|private
name|DataOutputBuffer
name|key
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
DECL|field|value
specifier|private
name|InMemUncompressedBytes
name|value
init|=
operator|new
name|InMemUncompressedBytes
argument_list|()
decl_stmt|;
DECL|method|MRSortResultIterator (OutputBuffer keyValBuffer, int []pointers, int []startOffsets, int []keyLengths, int []valLengths)
specifier|public
name|MRSortResultIterator
parameter_list|(
name|OutputBuffer
name|keyValBuffer
parameter_list|,
name|int
index|[]
name|pointers
parameter_list|,
name|int
index|[]
name|startOffsets
parameter_list|,
name|int
index|[]
name|keyLengths
parameter_list|,
name|int
index|[]
name|valLengths
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|pointers
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|pointers
operator|=
name|pointers
expr_stmt|;
name|this
operator|.
name|startOffsets
operator|=
name|startOffsets
expr_stmt|;
name|this
operator|.
name|keyLengths
operator|=
name|keyLengths
expr_stmt|;
name|this
operator|.
name|valLengths
operator|=
name|valLengths
expr_stmt|;
name|this
operator|.
name|keyValBuffer
operator|=
name|keyValBuffer
expr_stmt|;
block|}
DECL|method|getProgress ()
specifier|public
name|Progress
name|getProgress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getKey ()
specifier|public
name|DataOutputBuffer
name|getKey
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|currKeyOffset
init|=
name|startOffsets
index|[
name|currStartOffsetIndex
index|]
decl_stmt|;
name|int
name|currKeyLength
init|=
name|keyLengths
index|[
name|currStartOffsetIndex
index|]
decl_stmt|;
comment|//reuse the same key
name|key
operator|.
name|reset
argument_list|()
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|keyValBuffer
operator|.
name|getData
argument_list|()
argument_list|,
name|currKeyOffset
argument_list|,
name|currKeyLength
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
DECL|method|getValue ()
specifier|public
name|ValueBytes
name|getValue
parameter_list|()
throws|throws
name|IOException
block|{
comment|//value[i] is stored in the following byte range:
comment|//startOffsets[i] + keyLengths[i] through valLengths[i]
name|value
operator|.
name|reset
argument_list|(
name|keyValBuffer
argument_list|,
name|startOffsets
index|[
name|currStartOffsetIndex
index|]
operator|+
name|keyLengths
index|[
name|currStartOffsetIndex
index|]
argument_list|,
name|valLengths
index|[
name|currStartOffsetIndex
index|]
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
DECL|method|next ()
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|==
name|currIndexInPointers
condition|)
return|return
literal|false
return|;
name|currStartOffsetIndex
operator|=
name|pointers
index|[
name|currIndexInPointers
index|]
expr_stmt|;
name|currIndexInPointers
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
return|return;
block|}
comment|//An implementation of the ValueBytes interface for the in-memory value
comment|//buffers.
DECL|class|InMemUncompressedBytes
specifier|private
specifier|static
class|class
name|InMemUncompressedBytes
implements|implements
name|ValueBytes
block|{
DECL|field|data
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
DECL|field|start
name|int
name|start
decl_stmt|;
DECL|field|dataSize
name|int
name|dataSize
decl_stmt|;
DECL|method|reset (OutputBuffer d, int start, int length)
specifier|private
name|void
name|reset
parameter_list|(
name|OutputBuffer
name|d
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|=
name|d
operator|.
name|getData
argument_list|()
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|dataSize
operator|=
name|length
expr_stmt|;
block|}
DECL|method|getSize ()
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|dataSize
return|;
block|}
DECL|method|writeUncompressedBytes (DataOutputStream outStream)
specifier|public
name|void
name|writeUncompressedBytes
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|start
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
block|}
DECL|method|writeCompressedBytes (DataOutputStream outStream)
specifier|public
name|void
name|writeCompressedBytes
parameter_list|(
name|DataOutputStream
name|outStream
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IOException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"UncompressedBytes cannot be compressed!"
argument_list|)
throw|;
block|}
block|}
comment|// InMemUncompressedBytes
block|}
end_class

begin_comment
comment|//MRSortResultIterator
end_comment

end_unit

