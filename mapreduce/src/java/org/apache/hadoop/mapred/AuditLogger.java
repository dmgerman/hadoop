begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_comment
comment|/** Manages MapReduce audit logs. Audit logs provides information about  * authorization/authentication events (success/failure).  *  * Audit log format is written as key=value pairs.  */
end_comment

begin_class
DECL|class|AuditLogger
class|class
name|AuditLogger
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AuditLogger
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|Keys
DECL|enumConstant|USER
DECL|enumConstant|OPERATION
DECL|enumConstant|TARGET
DECL|enumConstant|RESULT
DECL|enumConstant|IP
DECL|enumConstant|PERMISSIONS
specifier|static
enum|enum
name|Keys
block|{
name|USER
block|,
name|OPERATION
block|,
name|TARGET
block|,
name|RESULT
block|,
name|IP
block|,
name|PERMISSIONS
block|,
DECL|enumConstant|DESCRIPTION
name|DESCRIPTION
block|}
DECL|class|Constants
specifier|static
class|class
name|Constants
block|{
DECL|field|SUCCESS
specifier|static
specifier|final
name|String
name|SUCCESS
init|=
literal|"SUCCESS"
decl_stmt|;
DECL|field|FAILURE
specifier|static
specifier|final
name|String
name|FAILURE
init|=
literal|"FAILURE"
decl_stmt|;
DECL|field|KEY_VAL_SEPARATOR
specifier|static
specifier|final
name|String
name|KEY_VAL_SEPARATOR
init|=
literal|"="
decl_stmt|;
DECL|field|PAIR_SEPARATOR
specifier|static
specifier|final
name|char
name|PAIR_SEPARATOR
init|=
literal|'\t'
decl_stmt|;
comment|// Some constants used by others using AuditLogger.
comment|// Some commonly used targets
DECL|field|JOBTRACKER
specifier|static
specifier|final
name|String
name|JOBTRACKER
init|=
literal|"JobTracker"
decl_stmt|;
comment|// Some commonly used operations
DECL|field|REFRESH_QUEUE
specifier|static
specifier|final
name|String
name|REFRESH_QUEUE
init|=
literal|"REFRESH_QUEUE"
decl_stmt|;
DECL|field|REFRESH_NODES
specifier|static
specifier|final
name|String
name|REFRESH_NODES
init|=
literal|"REFRESH_NODES"
decl_stmt|;
comment|// Some commonly used descriptions
DECL|field|UNAUTHORIZED_USER
specifier|static
specifier|final
name|String
name|UNAUTHORIZED_USER
init|=
literal|"Unauthorized user"
decl_stmt|;
block|}
comment|/**    * A helper api for creating an audit log for a successful event.    * This is factored out for testing purpose.    */
DECL|method|createSuccessLog (String user, String operation, String target)
specifier|static
name|String
name|createSuccessLog
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|target
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|start
argument_list|(
name|Keys
operator|.
name|USER
argument_list|,
name|user
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|addRemoteIP
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Keys
operator|.
name|OPERATION
argument_list|,
name|operation
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Keys
operator|.
name|TARGET
argument_list|,
name|target
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Keys
operator|.
name|RESULT
argument_list|,
name|Constants
operator|.
name|SUCCESS
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Create a readable and parseable audit log string for a successful event.    *    * @param user User who made the service request to the JobTracker.    * @param operation Operation requested by the user    * @param target The target on which the operation is being performed. Most    *               commonly operated targets are jobs, JobTracker, queues etc    *    *<br><br>    * Note that the {@link AuditLogger} uses tabs ('\t') as a key-val delimiter    * and hence the value fields should not contains tabs ('\t').    */
DECL|method|logSuccess (String user, String operation, String target)
specifier|static
name|void
name|logSuccess
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|target
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|createSuccessLog
argument_list|(
name|user
argument_list|,
name|operation
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A helper api for creating an audit log for a failure event.    * This is factored out for testing purpose.    */
DECL|method|createFailureLog (String user, String operation, String perm, String target, String description)
specifier|static
name|String
name|createFailureLog
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|perm
parameter_list|,
name|String
name|target
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|start
argument_list|(
name|Keys
operator|.
name|USER
argument_list|,
name|user
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|addRemoteIP
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Keys
operator|.
name|OPERATION
argument_list|,
name|operation
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Keys
operator|.
name|TARGET
argument_list|,
name|target
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Keys
operator|.
name|RESULT
argument_list|,
name|Constants
operator|.
name|FAILURE
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Keys
operator|.
name|DESCRIPTION
argument_list|,
name|description
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Keys
operator|.
name|PERMISSIONS
argument_list|,
name|perm
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Create a readable and parseable audit log string for a failed event.    *    * @param user User who made the service request to the JobTracker.    * @param operation Operation requested by the user    * @param perm Target permissions like JobACLs for jobs, QueueACLs for queues.    * @param target The target on which the operation is being performed. Most    *               commonly operated targets are jobs, JobTracker, queues etc    * @param description Some additional information as to why the operation    *                    failed.    *    *<br><br>    * Note that the {@link AuditLogger} uses tabs ('\t') as a key-val delimiter    * and hence the value fields should not contains tabs ('\t').    */
DECL|method|logFailure (String user, String operation, String perm, String target, String description)
specifier|static
name|void
name|logFailure
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|perm
parameter_list|,
name|String
name|target
parameter_list|,
name|String
name|description
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|createFailureLog
argument_list|(
name|user
argument_list|,
name|operation
argument_list|,
name|perm
argument_list|,
name|target
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A helper api to add remote IP address    */
DECL|method|addRemoteIP (StringBuilder b)
specifier|static
name|void
name|addRemoteIP
parameter_list|(
name|StringBuilder
name|b
parameter_list|)
block|{
name|InetAddress
name|ip
init|=
name|Server
operator|.
name|getRemoteIp
argument_list|()
decl_stmt|;
comment|// ip address can be null for testcases
if|if
condition|(
name|ip
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|Keys
operator|.
name|IP
argument_list|,
name|ip
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds the first key-val pair to the passed builder in the following format    * key=value    */
DECL|method|start (Keys key, String value, StringBuilder b)
specifier|static
name|void
name|start
parameter_list|(
name|Keys
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|StringBuilder
name|b
parameter_list|)
block|{
name|b
operator|.
name|append
argument_list|(
name|key
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|KEY_VAL_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Appends the key-val pair to the passed builder in the following format    *<pair-delim>key=value    */
DECL|method|add (Keys key, String value, StringBuilder b)
specifier|static
name|void
name|add
parameter_list|(
name|Keys
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|StringBuilder
name|b
parameter_list|)
block|{
name|b
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|PAIR_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|key
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|KEY_VAL_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

