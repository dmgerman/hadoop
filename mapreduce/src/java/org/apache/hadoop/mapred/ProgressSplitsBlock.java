begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/*  * This object gathers the [currently four] PeriodStatset's that we  * are gathering for a particular task attempt for packaging and  * handling as a single object.  */
end_comment

begin_class
DECL|class|ProgressSplitsBlock
specifier|public
class|class
name|ProgressSplitsBlock
block|{
DECL|field|progressWallclockTime
specifier|final
name|PeriodicStatsAccumulator
name|progressWallclockTime
decl_stmt|;
DECL|field|progressCPUTime
specifier|final
name|PeriodicStatsAccumulator
name|progressCPUTime
decl_stmt|;
DECL|field|progressVirtualMemoryKbytes
specifier|final
name|PeriodicStatsAccumulator
name|progressVirtualMemoryKbytes
decl_stmt|;
DECL|field|progressPhysicalMemoryKbytes
specifier|final
name|PeriodicStatsAccumulator
name|progressPhysicalMemoryKbytes
decl_stmt|;
DECL|field|NULL_ARRAY
specifier|static
specifier|final
name|int
index|[]
name|NULL_ARRAY
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
DECL|field|WALLCLOCK_TIME_INDEX
specifier|static
specifier|final
name|int
name|WALLCLOCK_TIME_INDEX
init|=
literal|0
decl_stmt|;
DECL|field|CPU_TIME_INDEX
specifier|static
specifier|final
name|int
name|CPU_TIME_INDEX
init|=
literal|1
decl_stmt|;
DECL|field|VIRTUAL_MEMORY_KBYTES_INDEX
specifier|static
specifier|final
name|int
name|VIRTUAL_MEMORY_KBYTES_INDEX
init|=
literal|2
decl_stmt|;
DECL|field|PHYSICAL_MEMORY_KBYTES_INDEX
specifier|static
specifier|final
name|int
name|PHYSICAL_MEMORY_KBYTES_INDEX
init|=
literal|3
decl_stmt|;
DECL|field|DEFAULT_NUMBER_PROGRESS_SPLITS
specifier|static
specifier|final
name|int
name|DEFAULT_NUMBER_PROGRESS_SPLITS
init|=
literal|12
decl_stmt|;
DECL|method|ProgressSplitsBlock (int numberSplits)
name|ProgressSplitsBlock
parameter_list|(
name|int
name|numberSplits
parameter_list|)
block|{
name|progressWallclockTime
operator|=
operator|new
name|CumulativePeriodicStats
argument_list|(
name|numberSplits
argument_list|)
expr_stmt|;
name|progressCPUTime
operator|=
operator|new
name|CumulativePeriodicStats
argument_list|(
name|numberSplits
argument_list|)
expr_stmt|;
name|progressVirtualMemoryKbytes
operator|=
operator|new
name|StatePeriodicStats
argument_list|(
name|numberSplits
argument_list|)
expr_stmt|;
name|progressPhysicalMemoryKbytes
operator|=
operator|new
name|StatePeriodicStats
argument_list|(
name|numberSplits
argument_list|)
expr_stmt|;
block|}
comment|// this coordinates with LoggedTaskAttempt.SplitVectorKind
DECL|method|burst ()
name|int
index|[]
index|[]
name|burst
parameter_list|()
block|{
name|int
index|[]
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|4
index|]
index|[]
decl_stmt|;
name|result
index|[
name|WALLCLOCK_TIME_INDEX
index|]
operator|=
name|progressWallclockTime
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|result
index|[
name|CPU_TIME_INDEX
index|]
operator|=
name|progressCPUTime
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|result
index|[
name|VIRTUAL_MEMORY_KBYTES_INDEX
index|]
operator|=
name|progressVirtualMemoryKbytes
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|result
index|[
name|PHYSICAL_MEMORY_KBYTES_INDEX
index|]
operator|=
name|progressPhysicalMemoryKbytes
operator|.
name|getValues
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|arrayGet (int[][] burstedBlock, int index)
specifier|static
specifier|public
name|int
index|[]
name|arrayGet
parameter_list|(
name|int
index|[]
index|[]
name|burstedBlock
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|burstedBlock
operator|==
literal|null
condition|?
name|NULL_ARRAY
else|:
name|burstedBlock
index|[
name|index
index|]
return|;
block|}
DECL|method|arrayGetWallclockTime (int[][] burstedBlock)
specifier|static
specifier|public
name|int
index|[]
name|arrayGetWallclockTime
parameter_list|(
name|int
index|[]
index|[]
name|burstedBlock
parameter_list|)
block|{
return|return
name|arrayGet
argument_list|(
name|burstedBlock
argument_list|,
name|WALLCLOCK_TIME_INDEX
argument_list|)
return|;
block|}
DECL|method|arrayGetCPUTime (int[][] burstedBlock)
specifier|static
specifier|public
name|int
index|[]
name|arrayGetCPUTime
parameter_list|(
name|int
index|[]
index|[]
name|burstedBlock
parameter_list|)
block|{
return|return
name|arrayGet
argument_list|(
name|burstedBlock
argument_list|,
name|CPU_TIME_INDEX
argument_list|)
return|;
block|}
DECL|method|arrayGetVMemKbytes (int[][] burstedBlock)
specifier|static
specifier|public
name|int
index|[]
name|arrayGetVMemKbytes
parameter_list|(
name|int
index|[]
index|[]
name|burstedBlock
parameter_list|)
block|{
return|return
name|arrayGet
argument_list|(
name|burstedBlock
argument_list|,
name|VIRTUAL_MEMORY_KBYTES_INDEX
argument_list|)
return|;
block|}
DECL|method|arrayGetPhysMemKbytes (int[][] burstedBlock)
specifier|static
specifier|public
name|int
index|[]
name|arrayGetPhysMemKbytes
parameter_list|(
name|int
index|[]
index|[]
name|burstedBlock
parameter_list|)
block|{
return|return
name|arrayGet
argument_list|(
name|burstedBlock
argument_list|,
name|PHYSICAL_MEMORY_KBYTES_INDEX
argument_list|)
return|;
block|}
block|}
end_class

end_unit

