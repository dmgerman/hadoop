begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Utility class for skip bad records functionality. It contains various   * settings related to skipping of bad records.  *   *<p>Hadoop provides an optional mode of execution in which the bad records  * are detected and skipped in further attempts.  *   *<p>This feature can be used when map/reduce tasks crashes deterministically on   * certain input. This happens due to bugs in the map/reduce function. The usual  * course would be to fix these bugs. But sometimes this is not possible;   * perhaps the bug is in third party libraries for which the source code is   * not available. Due to this, the task never reaches to completion even with   * multiple attempts and complete data for that task is lost.</p>  *    *<p>With this feature, only a small portion of data is lost surrounding   * the bad record, which may be acceptable for some user applications.  * see {@link SkipBadRecords#setMapperMaxSkipRecords(Configuration, long)}</p>  *   *<p>The skipping mode gets kicked off after certain no of failures   * see {@link SkipBadRecords#setAttemptsToStartSkipping(Configuration, int)}</p>  *    *<p>In the skipping mode, the map/reduce task maintains the record range which   * is getting processed at all times. Before giving the input to the  * map/reduce function, it sends this record range to the Task tracker.  * If task crashes, the Task tracker knows which one was the last reported  * range. On further attempts that range get skipped.</p>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|SkipBadRecords
specifier|public
class|class
name|SkipBadRecords
block|{
comment|/**    * Special counters which are written by the application and are     * used by the framework for detecting bad records. For detecting bad records     * these counters must be incremented by the application.    */
DECL|field|COUNTER_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|COUNTER_GROUP
init|=
literal|"SkippingTaskCounters"
decl_stmt|;
comment|/**    * Number of processed map records.    * @see SkipBadRecords#getAutoIncrMapperProcCount(Configuration)    */
DECL|field|COUNTER_MAP_PROCESSED_RECORDS
specifier|public
specifier|static
specifier|final
name|String
name|COUNTER_MAP_PROCESSED_RECORDS
init|=
literal|"MapProcessedRecords"
decl_stmt|;
comment|/**    * Number of processed reduce groups.    * @see SkipBadRecords#getAutoIncrReducerProcCount(Configuration)    */
DECL|field|COUNTER_REDUCE_PROCESSED_GROUPS
specifier|public
specifier|static
specifier|final
name|String
name|COUNTER_REDUCE_PROCESSED_GROUPS
init|=
literal|"ReduceProcessedGroups"
decl_stmt|;
DECL|field|ATTEMPTS_TO_START_SKIPPING
specifier|private
specifier|static
specifier|final
name|String
name|ATTEMPTS_TO_START_SKIPPING
init|=
name|JobContext
operator|.
name|SKIP_START_ATTEMPTS
decl_stmt|;
DECL|field|AUTO_INCR_MAP_PROC_COUNT
specifier|private
specifier|static
specifier|final
name|String
name|AUTO_INCR_MAP_PROC_COUNT
init|=
name|JobContext
operator|.
name|MAP_SKIP_INCR_PROC_COUNT
decl_stmt|;
DECL|field|AUTO_INCR_REDUCE_PROC_COUNT
specifier|private
specifier|static
specifier|final
name|String
name|AUTO_INCR_REDUCE_PROC_COUNT
init|=
name|JobContext
operator|.
name|REDUCE_SKIP_INCR_PROC_COUNT
decl_stmt|;
DECL|field|OUT_PATH
specifier|private
specifier|static
specifier|final
name|String
name|OUT_PATH
init|=
name|JobContext
operator|.
name|SKIP_OUTDIR
decl_stmt|;
DECL|field|MAPPER_MAX_SKIP_RECORDS
specifier|private
specifier|static
specifier|final
name|String
name|MAPPER_MAX_SKIP_RECORDS
init|=
name|JobContext
operator|.
name|MAP_SKIP_MAX_RECORDS
decl_stmt|;
DECL|field|REDUCER_MAX_SKIP_GROUPS
specifier|private
specifier|static
specifier|final
name|String
name|REDUCER_MAX_SKIP_GROUPS
init|=
name|JobContext
operator|.
name|REDUCE_SKIP_MAXGROUPS
decl_stmt|;
comment|/**    * Get the number of Task attempts AFTER which skip mode     * will be kicked off. When skip mode is kicked off, the     * tasks reports the range of records which it will process     * next to the TaskTracker. So that on failures, TT knows which     * ones are possibly the bad records. On further executions,     * those are skipped.    * Default value is 2.    *     * @param conf the configuration    * @return attemptsToStartSkipping no of task attempts    */
DECL|method|getAttemptsToStartSkipping (Configuration conf)
specifier|public
specifier|static
name|int
name|getAttemptsToStartSkipping
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|ATTEMPTS_TO_START_SKIPPING
argument_list|,
literal|2
argument_list|)
return|;
block|}
comment|/**    * Set the number of Task attempts AFTER which skip mode     * will be kicked off. When skip mode is kicked off, the     * tasks reports the range of records which it will process     * next to the TaskTracker. So that on failures, TT knows which     * ones are possibly the bad records. On further executions,     * those are skipped.    * Default value is 2.    *     * @param conf the configuration    * @param attemptsToStartSkipping no of task attempts    */
DECL|method|setAttemptsToStartSkipping (Configuration conf, int attemptsToStartSkipping)
specifier|public
specifier|static
name|void
name|setAttemptsToStartSkipping
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|attemptsToStartSkipping
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|ATTEMPTS_TO_START_SKIPPING
argument_list|,
name|attemptsToStartSkipping
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the flag which if set to true,     * {@link SkipBadRecords#COUNTER_MAP_PROCESSED_RECORDS} is incremented     * by MapRunner after invoking the map function. This value must be set to     * false for applications which process the records asynchronously     * or buffer the input records. For example streaming.     * In such cases applications should increment this counter on their own.    * Default value is true.    *     * @param conf the configuration    * @return<code>true</code> if auto increment     *                       {@link SkipBadRecords#COUNTER_MAP_PROCESSED_RECORDS}.    *<code>false</code> otherwise.    */
DECL|method|getAutoIncrMapperProcCount (Configuration conf)
specifier|public
specifier|static
name|boolean
name|getAutoIncrMapperProcCount
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|AUTO_INCR_MAP_PROC_COUNT
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Set the flag which if set to true,     * {@link SkipBadRecords#COUNTER_MAP_PROCESSED_RECORDS} is incremented     * by MapRunner after invoking the map function. This value must be set to     * false for applications which process the records asynchronously     * or buffer the input records. For example streaming.     * In such cases applications should increment this counter on their own.    * Default value is true.    *     * @param conf the configuration    * @param autoIncr whether to auto increment     *        {@link SkipBadRecords#COUNTER_MAP_PROCESSED_RECORDS}.    */
DECL|method|setAutoIncrMapperProcCount (Configuration conf, boolean autoIncr)
specifier|public
specifier|static
name|void
name|setAutoIncrMapperProcCount
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|autoIncr
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|AUTO_INCR_MAP_PROC_COUNT
argument_list|,
name|autoIncr
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the flag which if set to true,     * {@link SkipBadRecords#COUNTER_REDUCE_PROCESSED_GROUPS} is incremented     * by framework after invoking the reduce function. This value must be set to     * false for applications which process the records asynchronously     * or buffer the input records. For example streaming.     * In such cases applications should increment this counter on their own.    * Default value is true.    *     * @param conf the configuration    * @return<code>true</code> if auto increment     *                    {@link SkipBadRecords#COUNTER_REDUCE_PROCESSED_GROUPS}.    *<code>false</code> otherwise.    */
DECL|method|getAutoIncrReducerProcCount (Configuration conf)
specifier|public
specifier|static
name|boolean
name|getAutoIncrReducerProcCount
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|AUTO_INCR_REDUCE_PROC_COUNT
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Set the flag which if set to true,     * {@link SkipBadRecords#COUNTER_REDUCE_PROCESSED_GROUPS} is incremented     * by framework after invoking the reduce function. This value must be set to     * false for applications which process the records asynchronously     * or buffer the input records. For example streaming.     * In such cases applications should increment this counter on their own.    * Default value is true.    *     * @param conf the configuration    * @param autoIncr whether to auto increment     *        {@link SkipBadRecords#COUNTER_REDUCE_PROCESSED_GROUPS}.    */
DECL|method|setAutoIncrReducerProcCount (Configuration conf, boolean autoIncr)
specifier|public
specifier|static
name|void
name|setAutoIncrReducerProcCount
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|autoIncr
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|AUTO_INCR_REDUCE_PROC_COUNT
argument_list|,
name|autoIncr
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the directory to which skipped records are written. By default it is     * the sub directory of the output _logs directory.    * User can stop writing skipped records by setting the value null.    *     * @param conf the configuration.    * @return path skip output directory. Null is returned if this is not set     * and output directory is also not set.    */
DECL|method|getSkipOutputPath (Configuration conf)
specifier|public
specifier|static
name|Path
name|getSkipOutputPath
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|name
init|=
name|conf
operator|.
name|get
argument_list|(
name|OUT_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"none"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|name
argument_list|)
return|;
block|}
name|Path
name|outPath
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|outPath
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Path
argument_list|(
name|outPath
argument_list|,
literal|"_logs"
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"skip"
argument_list|)
return|;
block|}
comment|/**    * Set the directory to which skipped records are written. By default it is     * the sub directory of the output _logs directory.    * User can stop writing skipped records by setting the value null.    *     * @param conf the configuration.    * @param path skip output directory path    */
DECL|method|setSkipOutputPath (JobConf conf, Path path)
specifier|public
specifier|static
name|void
name|setSkipOutputPath
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|String
name|pathStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|pathStr
operator|=
literal|"none"
expr_stmt|;
block|}
else|else
block|{
name|pathStr
operator|=
name|path
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|OUT_PATH
argument_list|,
name|pathStr
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of acceptable skip records surrounding the bad record PER     * bad record in mapper. The number includes the bad record as well.    * To turn the feature of detection/skipping of bad records off, set the     * value to 0.    * The framework tries to narrow down the skipped range by retrying      * until this threshold is met OR all attempts get exhausted for this task.     * Set the value to Long.MAX_VALUE to indicate that framework need not try to     * narrow down. Whatever records(depends on application) get skipped are     * acceptable.    * Default value is 0.    *     * @param conf the configuration    * @return maxSkipRecs acceptable skip records.    */
DECL|method|getMapperMaxSkipRecords (Configuration conf)
specifier|public
specifier|static
name|long
name|getMapperMaxSkipRecords
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|MAPPER_MAX_SKIP_RECORDS
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Set the number of acceptable skip records surrounding the bad record PER     * bad record in mapper. The number includes the bad record as well.    * To turn the feature of detection/skipping of bad records off, set the     * value to 0.    * The framework tries to narrow down the skipped range by retrying      * until this threshold is met OR all attempts get exhausted for this task.     * Set the value to Long.MAX_VALUE to indicate that framework need not try to     * narrow down. Whatever records(depends on application) get skipped are     * acceptable.    * Default value is 0.    *     * @param conf the configuration    * @param maxSkipRecs acceptable skip records.    */
DECL|method|setMapperMaxSkipRecords (Configuration conf, long maxSkipRecs)
specifier|public
specifier|static
name|void
name|setMapperMaxSkipRecords
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|maxSkipRecs
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|MAPPER_MAX_SKIP_RECORDS
argument_list|,
name|maxSkipRecs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the number of acceptable skip groups surrounding the bad group PER     * bad group in reducer. The number includes the bad group as well.    * To turn the feature of detection/skipping of bad groups off, set the     * value to 0.    * The framework tries to narrow down the skipped range by retrying      * until this threshold is met OR all attempts get exhausted for this task.     * Set the value to Long.MAX_VALUE to indicate that framework need not try to     * narrow down. Whatever groups(depends on application) get skipped are     * acceptable.    * Default value is 0.    *     * @param conf the configuration    * @return maxSkipGrps acceptable skip groups.    */
DECL|method|getReducerMaxSkipGroups (Configuration conf)
specifier|public
specifier|static
name|long
name|getReducerMaxSkipGroups
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|REDUCER_MAX_SKIP_GROUPS
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Set the number of acceptable skip groups surrounding the bad group PER     * bad group in reducer. The number includes the bad group as well.    * To turn the feature of detection/skipping of bad groups off, set the     * value to 0.    * The framework tries to narrow down the skipped range by retrying      * until this threshold is met OR all attempts get exhausted for this task.     * Set the value to Long.MAX_VALUE to indicate that framework need not try to     * narrow down. Whatever groups(depends on application) get skipped are     * acceptable.    * Default value is 0.    *     * @param conf the configuration    * @param maxSkipGrps acceptable skip groups.    */
DECL|method|setReducerMaxSkipGroups (Configuration conf, long maxSkipGrps)
specifier|public
specifier|static
name|void
name|setReducerMaxSkipGroups
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|maxSkipGrps
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|REDUCER_MAX_SKIP_GROUPS
argument_list|,
name|maxSkipGrps
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

