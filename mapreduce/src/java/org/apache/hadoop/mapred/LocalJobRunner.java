begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskTrackerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
operator|.
name|JobTrackerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|DistributedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|TaskDistributedCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|TrackerDistributedCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|SplitMetaInfoReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
operator|.
name|TaskSplitMetaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_comment
comment|/** Implements MapReduce locally, in-process, for debugging. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|LocalJobRunner
specifier|public
class|class
name|LocalJobRunner
implements|implements
name|ClientProtocol
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LocalJobRunner
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** The maximum number of map tasks to run in parallel in LocalJobRunner */
DECL|field|LOCAL_MAX_MAPS
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_MAX_MAPS
init|=
literal|"mapreduce.local.map.tasks.maximum"
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|jobs
specifier|private
name|HashMap
argument_list|<
name|JobID
argument_list|,
name|Job
argument_list|>
name|jobs
init|=
operator|new
name|HashMap
argument_list|<
name|JobID
argument_list|,
name|Job
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|JobConf
name|conf
decl_stmt|;
DECL|field|map_tasks
specifier|private
name|AtomicInteger
name|map_tasks
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|reduce_tasks
specifier|private
name|int
name|reduce_tasks
init|=
literal|0
decl_stmt|;
DECL|field|rand
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|myMetrics
specifier|private
name|JobTrackerInstrumentation
name|myMetrics
init|=
literal|null
decl_stmt|;
DECL|field|jobDir
specifier|private
specifier|static
specifier|final
name|String
name|jobDir
init|=
literal|"localRunner/"
decl_stmt|;
DECL|field|EMPTY_COUNTERS
specifier|private
specifier|static
specifier|final
name|Counters
name|EMPTY_COUNTERS
init|=
operator|new
name|Counters
argument_list|()
decl_stmt|;
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
block|{
return|return
name|ClientProtocol
operator|.
name|versionID
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|this
argument_list|,
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
return|;
block|}
DECL|class|Job
specifier|private
class|class
name|Job
extends|extends
name|Thread
implements|implements
name|TaskUmbilicalProtocol
block|{
comment|// The job directory on the system: JobClient places job configurations here.
comment|// This is analogous to JobTracker's system directory.
DECL|field|systemJobDir
specifier|private
name|Path
name|systemJobDir
decl_stmt|;
DECL|field|systemJobFile
specifier|private
name|Path
name|systemJobFile
decl_stmt|;
comment|// The job directory for the task.  Analagous to a task's job directory.
DECL|field|localJobDir
specifier|private
name|Path
name|localJobDir
decl_stmt|;
DECL|field|localJobFile
specifier|private
name|Path
name|localJobFile
decl_stmt|;
DECL|field|id
specifier|private
name|JobID
name|id
decl_stmt|;
DECL|field|job
specifier|private
name|JobConf
name|job
decl_stmt|;
DECL|field|numMapTasks
specifier|private
name|int
name|numMapTasks
decl_stmt|;
DECL|field|partialMapProgress
specifier|private
name|float
index|[]
name|partialMapProgress
decl_stmt|;
DECL|field|mapCounters
specifier|private
name|Counters
index|[]
name|mapCounters
decl_stmt|;
DECL|field|reduceCounters
specifier|private
name|Counters
name|reduceCounters
decl_stmt|;
DECL|field|status
specifier|private
name|JobStatus
name|status
decl_stmt|;
DECL|field|mapIds
specifier|private
name|List
argument_list|<
name|TaskAttemptID
argument_list|>
name|mapIds
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|TaskAttemptID
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|profile
specifier|private
name|JobProfile
name|profile
decl_stmt|;
DECL|field|localFs
specifier|private
name|FileSystem
name|localFs
decl_stmt|;
DECL|field|killed
name|boolean
name|killed
init|=
literal|false
decl_stmt|;
DECL|field|trackerDistributerdCacheManager
specifier|private
name|TrackerDistributedCacheManager
name|trackerDistributerdCacheManager
decl_stmt|;
DECL|field|taskDistributedCacheManager
specifier|private
name|TaskDistributedCacheManager
name|taskDistributedCacheManager
decl_stmt|;
DECL|method|getProtocolVersion (String protocol, long clientVersion)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
block|{
return|return
name|TaskUmbilicalProtocol
operator|.
name|versionID
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature (String protocol, long clientVersion, int clientMethodsHash)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|this
argument_list|,
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
return|;
block|}
DECL|method|Job (JobID jobid, String jobSubmitDir)
specifier|public
name|Job
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|String
name|jobSubmitDir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|systemJobDir
operator|=
operator|new
name|Path
argument_list|(
name|jobSubmitDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|systemJobFile
operator|=
operator|new
name|Path
argument_list|(
name|systemJobDir
argument_list|,
literal|"job.xml"
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|jobid
expr_stmt|;
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|systemJobFile
argument_list|)
decl_stmt|;
name|this
operator|.
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|localJobDir
operator|=
name|localFs
operator|.
name|makeQualified
argument_list|(
name|conf
operator|.
name|getLocalPath
argument_list|(
name|jobDir
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|localJobFile
operator|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|localJobDir
argument_list|,
name|id
operator|+
literal|".xml"
argument_list|)
expr_stmt|;
comment|// Manage the distributed cache.  If there are files to be copied,
comment|// this will trigger localFile to be re-written again.
name|this
operator|.
name|trackerDistributerdCacheManager
operator|=
operator|new
name|TrackerDistributedCacheManager
argument_list|(
name|conf
argument_list|,
operator|new
name|DefaultTaskController
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskDistributedCacheManager
operator|=
name|trackerDistributerdCacheManager
operator|.
name|newTaskDistributedCacheManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|taskDistributedCacheManager
operator|.
name|setup
argument_list|(
operator|new
name|LocalDirAllocator
argument_list|(
name|MRConfig
operator|.
name|LOCAL_DIR
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|systemJobDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"archive"
argument_list|,
literal|"archive"
argument_list|)
expr_stmt|;
if|if
condition|(
name|DistributedCache
operator|.
name|getSymlink
argument_list|(
name|conf
argument_list|)
condition|)
block|{
comment|// This is not supported largely because,
comment|// for a Child subprocess, the cwd in LocalJobRunner
comment|// is not a fresh slate, but rather the user's working directory.
comment|// This is further complicated because the logic in
comment|// setupWorkDir only creates symlinks if there's a jarfile
comment|// in the configuration.
name|LOG
operator|.
name|warn
argument_list|(
literal|"LocalJobRunner does not support "
operator|+
literal|"symlinking into current working dir."
argument_list|)
expr_stmt|;
block|}
comment|// Setup the symlinks for the distributed cache.
name|TaskRunner
operator|.
name|setupWorkDir
argument_list|(
name|conf
argument_list|,
operator|new
name|File
argument_list|(
name|localJobDir
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write out configuration file.  Instead of copying it from
comment|// systemJobFile, we re-write it, since setup(), above, may have
comment|// updated it.
name|OutputStream
name|out
init|=
name|localFs
operator|.
name|create
argument_list|(
name|localJobFile
argument_list|)
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|writeXml
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|job
operator|=
operator|new
name|JobConf
argument_list|(
name|localJobFile
argument_list|)
expr_stmt|;
comment|// Job (the current object) is a Thread, so we wrap its class loader.
if|if
condition|(
operator|!
name|taskDistributedCacheManager
operator|.
name|getClassPaths
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setContextClassLoader
argument_list|(
name|taskDistributedCacheManager
operator|.
name|makeClassLoader
argument_list|(
name|getContextClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|profile
operator|=
operator|new
name|JobProfile
argument_list|(
name|job
operator|.
name|getUser
argument_list|()
argument_list|,
name|id
argument_list|,
name|systemJobFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|"http://localhost:8080/"
argument_list|,
name|job
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|=
operator|new
name|JobStatus
argument_list|(
name|id
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
name|JobStatus
operator|.
name|RUNNING
argument_list|,
name|profile
operator|.
name|getUser
argument_list|()
argument_list|,
name|profile
operator|.
name|getJobName
argument_list|()
argument_list|,
name|profile
operator|.
name|getJobFile
argument_list|()
argument_list|,
name|profile
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|jobs
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|getProfile ()
name|JobProfile
name|getProfile
parameter_list|()
block|{
return|return
name|profile
return|;
block|}
comment|/**      * A Runnable instance that handles a map task to be run by an executor.      */
DECL|class|MapTaskRunnable
specifier|protected
class|class
name|MapTaskRunnable
implements|implements
name|Runnable
block|{
DECL|field|taskId
specifier|private
specifier|final
name|int
name|taskId
decl_stmt|;
DECL|field|info
specifier|private
specifier|final
name|TaskSplitMetaInfo
name|info
decl_stmt|;
DECL|field|jobId
specifier|private
specifier|final
name|JobID
name|jobId
decl_stmt|;
DECL|field|localConf
specifier|private
specifier|final
name|JobConf
name|localConf
decl_stmt|;
comment|// This is a reference to a shared object passed in by the
comment|// external context; this delivers state to the reducers regarding
comment|// where to fetch mapper outputs.
DECL|field|mapOutputFiles
specifier|private
specifier|final
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|MapOutputFile
argument_list|>
name|mapOutputFiles
decl_stmt|;
DECL|field|storedException
specifier|public
specifier|volatile
name|Throwable
name|storedException
decl_stmt|;
DECL|method|MapTaskRunnable (TaskSplitMetaInfo info, int taskId, JobID jobId, Map<TaskAttemptID, MapOutputFile> mapOutputFiles)
specifier|public
name|MapTaskRunnable
parameter_list|(
name|TaskSplitMetaInfo
name|info
parameter_list|,
name|int
name|taskId
parameter_list|,
name|JobID
name|jobId
parameter_list|,
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|MapOutputFile
argument_list|>
name|mapOutputFiles
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|taskId
operator|=
name|taskId
expr_stmt|;
name|this
operator|.
name|mapOutputFiles
operator|=
name|mapOutputFiles
expr_stmt|;
name|this
operator|.
name|jobId
operator|=
name|jobId
expr_stmt|;
name|this
operator|.
name|localConf
operator|=
operator|new
name|JobConf
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|TaskAttemptID
name|mapId
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
name|taskId
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting task: "
operator|+
name|mapId
argument_list|)
expr_stmt|;
name|mapIds
operator|.
name|add
argument_list|(
name|mapId
argument_list|)
expr_stmt|;
name|MapTask
name|map
init|=
operator|new
name|MapTask
argument_list|(
name|systemJobFile
operator|.
name|toString
argument_list|()
argument_list|,
name|mapId
argument_list|,
name|taskId
argument_list|,
name|info
operator|.
name|getSplitIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|map
operator|.
name|setUser
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|TaskRunner
operator|.
name|setupChildMapredLocalDirs
argument_list|(
name|map
argument_list|,
name|localConf
argument_list|)
expr_stmt|;
name|MapOutputFile
name|mapOutput
init|=
operator|new
name|MapOutputFile
argument_list|()
decl_stmt|;
name|mapOutput
operator|.
name|setConf
argument_list|(
name|localConf
argument_list|)
expr_stmt|;
name|mapOutputFiles
operator|.
name|put
argument_list|(
name|mapId
argument_list|,
name|mapOutput
argument_list|)
expr_stmt|;
name|map
operator|.
name|setJobFile
argument_list|(
name|localJobFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|localConf
operator|.
name|setUser
argument_list|(
name|map
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|localizeConfiguration
argument_list|(
name|localConf
argument_list|)
expr_stmt|;
name|map
operator|.
name|setConf
argument_list|(
name|localConf
argument_list|)
expr_stmt|;
try|try
block|{
name|map_tasks
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|myMetrics
operator|.
name|launchMap
argument_list|(
name|mapId
argument_list|)
expr_stmt|;
name|map
operator|.
name|run
argument_list|(
name|localConf
argument_list|,
name|Job
operator|.
name|this
argument_list|)
expr_stmt|;
name|myMetrics
operator|.
name|completeMap
argument_list|(
name|mapId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|map_tasks
operator|.
name|getAndDecrement
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finishing task: "
operator|+
name|mapId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|this
operator|.
name|storedException
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Create Runnables to encapsulate map tasks for use by the executor      * service.      * @param taskInfo Info about the map task splits      * @param jobId the job id      * @param mapOutputFiles a mapping from task attempts to output files      * @return a List of Runnables, one per map task.      */
DECL|method|getMapTaskRunnables ( TaskSplitMetaInfo [] taskInfo, JobID jobId, Map<TaskAttemptID, MapOutputFile> mapOutputFiles)
specifier|protected
name|List
argument_list|<
name|MapTaskRunnable
argument_list|>
name|getMapTaskRunnables
parameter_list|(
name|TaskSplitMetaInfo
index|[]
name|taskInfo
parameter_list|,
name|JobID
name|jobId
parameter_list|,
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|MapOutputFile
argument_list|>
name|mapOutputFiles
parameter_list|)
block|{
name|int
name|numTasks
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|MapTaskRunnable
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|MapTaskRunnable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskSplitMetaInfo
name|task
range|:
name|taskInfo
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|MapTaskRunnable
argument_list|(
name|task
argument_list|,
name|numTasks
operator|++
argument_list|,
name|jobId
argument_list|,
name|mapOutputFiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**      * Initialize the counters that will hold partial-progress from      * the various task attempts.      * @param numMaps the number of map tasks in this job.      */
DECL|method|initCounters (int numMaps)
specifier|private
specifier|synchronized
name|void
name|initCounters
parameter_list|(
name|int
name|numMaps
parameter_list|)
block|{
comment|// Initialize state trackers for all map tasks.
name|this
operator|.
name|partialMapProgress
operator|=
operator|new
name|float
index|[
name|numMaps
index|]
expr_stmt|;
name|this
operator|.
name|mapCounters
operator|=
operator|new
name|Counters
index|[
name|numMaps
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMaps
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|mapCounters
index|[
name|i
index|]
operator|=
name|EMPTY_COUNTERS
expr_stmt|;
block|}
name|this
operator|.
name|reduceCounters
operator|=
name|EMPTY_COUNTERS
expr_stmt|;
block|}
comment|/**      * Creates the executor service used to run map tasks.      *      * @param numMapTasks the total number of map tasks to be run      * @return an ExecutorService instance that handles map tasks      */
DECL|method|createMapExecutor (int numMapTasks)
specifier|protected
name|ExecutorService
name|createMapExecutor
parameter_list|(
name|int
name|numMapTasks
parameter_list|)
block|{
comment|// Determine the size of the thread pool to use
name|int
name|maxMapThreads
init|=
name|job
operator|.
name|getInt
argument_list|(
name|LOCAL_MAX_MAPS
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxMapThreads
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configured "
operator|+
name|LOCAL_MAX_MAPS
operator|+
literal|" must be>= 1"
argument_list|)
throw|;
block|}
name|this
operator|.
name|numMapTasks
operator|=
name|numMapTasks
expr_stmt|;
name|maxMapThreads
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxMapThreads
argument_list|,
name|this
operator|.
name|numMapTasks
argument_list|)
expr_stmt|;
name|maxMapThreads
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxMapThreads
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// In case of no tasks.
name|initCounters
argument_list|(
name|this
operator|.
name|numMapTasks
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting thread pool executor."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Max local threads: "
operator|+
name|maxMapThreads
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Map tasks to process: "
operator|+
name|this
operator|.
name|numMapTasks
argument_list|)
expr_stmt|;
comment|// Create a new executor service to drain the work queue.
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|maxMapThreads
argument_list|)
decl_stmt|;
return|return
name|executor
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|JobID
name|jobId
init|=
name|profile
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|JobContext
name|jContext
init|=
operator|new
name|JobContextImpl
argument_list|(
name|job
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|OutputCommitter
name|outputCommitter
init|=
name|job
operator|.
name|getOutputCommitter
argument_list|()
decl_stmt|;
try|try
block|{
name|TaskSplitMetaInfo
index|[]
name|taskSplitMetaInfos
init|=
name|SplitMetaInfoReader
operator|.
name|readSplitMetaInfo
argument_list|(
name|jobId
argument_list|,
name|localFs
argument_list|,
name|conf
argument_list|,
name|systemJobDir
argument_list|)
decl_stmt|;
name|int
name|numReduceTasks
init|=
name|job
operator|.
name|getNumReduceTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|numReduceTasks
operator|>
literal|1
operator|||
name|numReduceTasks
operator|<
literal|0
condition|)
block|{
comment|// we only allow 0 or 1 reducer in local mode
name|numReduceTasks
operator|=
literal|1
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|outputCommitter
operator|.
name|setupJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|status
operator|.
name|setSetupProgress
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TaskAttemptID
argument_list|,
name|MapOutputFile
argument_list|>
name|mapOutputFiles
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|MapOutputFile
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MapTaskRunnable
argument_list|>
name|taskRunnables
init|=
name|getMapTaskRunnables
argument_list|(
name|taskSplitMetaInfos
argument_list|,
name|jobId
argument_list|,
name|mapOutputFiles
argument_list|)
decl_stmt|;
name|ExecutorService
name|mapService
init|=
name|createMapExecutor
argument_list|(
name|taskRunnables
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Start populating the executor with work units.
comment|// They may begin running immediately (in other threads).
for|for
control|(
name|Runnable
name|r
range|:
name|taskRunnables
control|)
block|{
name|mapService
operator|.
name|submit
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|mapService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Instructs queue to drain.
comment|// Wait for tasks to finish; do not use a time-based timeout.
comment|// (See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6179024)
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for map tasks"
argument_list|)
expr_stmt|;
name|mapService
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Cancel all threads.
name|mapService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
throw|throw
name|ie
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Map task executor complete."
argument_list|)
expr_stmt|;
comment|// After waiting for the map tasks to complete, if any of these
comment|// have thrown an exception, rethrow it now in the main thread context.
for|for
control|(
name|MapTaskRunnable
name|r
range|:
name|taskRunnables
control|)
block|{
if|if
condition|(
name|r
operator|.
name|storedException
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|r
operator|.
name|storedException
argument_list|)
throw|;
block|}
block|}
name|TaskAttemptID
name|reduceId
init|=
operator|new
name|TaskAttemptID
argument_list|(
operator|new
name|TaskID
argument_list|(
name|jobId
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|numReduceTasks
operator|>
literal|0
condition|)
block|{
name|ReduceTask
name|reduce
init|=
operator|new
name|ReduceTask
argument_list|(
name|systemJobFile
operator|.
name|toString
argument_list|()
argument_list|,
name|reduceId
argument_list|,
literal|0
argument_list|,
name|mapIds
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|reduce
operator|.
name|setUser
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|JobConf
name|localConf
init|=
operator|new
name|JobConf
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|localConf
operator|.
name|set
argument_list|(
literal|"mapreduce.jobtracker.address"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|TaskRunner
operator|.
name|setupChildMapredLocalDirs
argument_list|(
name|reduce
argument_list|,
name|localConf
argument_list|)
expr_stmt|;
comment|// move map output to reduce input
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|TaskAttemptID
name|mapId
init|=
name|mapIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Path
name|mapOut
init|=
name|mapOutputFiles
operator|.
name|get
argument_list|(
name|mapId
argument_list|)
operator|.
name|getOutputFile
argument_list|()
decl_stmt|;
name|MapOutputFile
name|localOutputFile
init|=
operator|new
name|MapOutputFile
argument_list|()
decl_stmt|;
name|localOutputFile
operator|.
name|setConf
argument_list|(
name|localConf
argument_list|)
expr_stmt|;
name|Path
name|reduceIn
init|=
name|localOutputFile
operator|.
name|getInputFileForWrite
argument_list|(
name|mapId
operator|.
name|getTaskID
argument_list|()
argument_list|,
name|localFs
operator|.
name|getFileStatus
argument_list|(
name|mapOut
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|localFs
operator|.
name|mkdirs
argument_list|(
name|reduceIn
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|reduceIn
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|localFs
operator|.
name|rename
argument_list|(
name|mapOut
argument_list|,
name|reduceIn
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't rename "
operator|+
name|mapOut
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|()
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|reduce
operator|.
name|setJobFile
argument_list|(
name|localJobFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|localConf
operator|.
name|setUser
argument_list|(
name|reduce
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|localizeConfiguration
argument_list|(
name|localConf
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|setConf
argument_list|(
name|localConf
argument_list|)
expr_stmt|;
name|reduce_tasks
operator|+=
literal|1
expr_stmt|;
name|myMetrics
operator|.
name|launchReduce
argument_list|(
name|reduce
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|reduce
operator|.
name|run
argument_list|(
name|localConf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|myMetrics
operator|.
name|completeReduce
argument_list|(
name|reduce
operator|.
name|getTaskID
argument_list|()
argument_list|)
expr_stmt|;
name|reduce_tasks
operator|-=
literal|1
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|()
throw|;
block|}
block|}
block|}
finally|finally
block|{
for|for
control|(
name|MapOutputFile
name|output
range|:
name|mapOutputFiles
operator|.
name|values
argument_list|()
control|)
block|{
name|output
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|// delete the temporary directory in output directory
name|outputCommitter
operator|.
name|commitJob
argument_list|(
name|jContext
argument_list|)
expr_stmt|;
name|status
operator|.
name|setCleanupProgress
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
if|if
condition|(
name|killed
condition|)
block|{
name|this
operator|.
name|status
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|status
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
name|JobEndNotifier
operator|.
name|localRunnerNotification
argument_list|(
name|job
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|outputCommitter
operator|.
name|abortJob
argument_list|(
name|jContext
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error cleaning up job:"
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|status
operator|.
name|setCleanupProgress
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
if|if
condition|(
name|killed
condition|)
block|{
name|this
operator|.
name|status
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|status
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
name|id
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|JobEndNotifier
operator|.
name|localRunnerNotification
argument_list|(
name|job
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|systemJobFile
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// delete submit dir
name|localFs
operator|.
name|delete
argument_list|(
name|localJobFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// delete local copy
comment|// Cleanup distributed cache
name|taskDistributedCacheManager
operator|.
name|release
argument_list|()
expr_stmt|;
name|trackerDistributerdCacheManager
operator|.
name|purgeCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error cleaning up "
operator|+
name|id
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// TaskUmbilicalProtocol methods
DECL|method|getTask (JvmContext context)
specifier|public
name|JvmTask
name|getTask
parameter_list|(
name|JvmContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|statusUpdate (TaskAttemptID taskId, TaskStatus taskStatus)
specifier|public
specifier|synchronized
name|boolean
name|statusUpdate
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|TaskStatus
name|taskStatus
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|taskStatus
operator|.
name|getStateString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|taskIndex
init|=
name|mapIds
operator|.
name|indexOf
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskIndex
operator|>=
literal|0
condition|)
block|{
comment|// mapping
name|float
name|numTasks
init|=
operator|(
name|float
operator|)
name|this
operator|.
name|numMapTasks
decl_stmt|;
name|partialMapProgress
index|[
name|taskIndex
index|]
operator|=
name|taskStatus
operator|.
name|getProgress
argument_list|()
expr_stmt|;
name|mapCounters
index|[
name|taskIndex
index|]
operator|=
name|taskStatus
operator|.
name|getCounters
argument_list|()
expr_stmt|;
name|float
name|partialProgress
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|float
name|f
range|:
name|partialMapProgress
control|)
block|{
name|partialProgress
operator|+=
name|f
expr_stmt|;
block|}
name|status
operator|.
name|setMapProgress
argument_list|(
name|partialProgress
operator|/
name|numTasks
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reduceCounters
operator|=
name|taskStatus
operator|.
name|getCounters
argument_list|()
expr_stmt|;
name|status
operator|.
name|setReduceProgress
argument_list|(
name|taskStatus
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ignore phase
return|return
literal|true
return|;
block|}
comment|/** Return the current values of the counters for this job,      * including tasks that are in progress.      */
DECL|method|getCurrentCounters ()
specifier|public
specifier|synchronized
name|Counters
name|getCurrentCounters
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|mapCounters
condition|)
block|{
comment|// Counters not yet initialized for job.
return|return
name|EMPTY_COUNTERS
return|;
block|}
name|Counters
name|current
init|=
name|EMPTY_COUNTERS
decl_stmt|;
for|for
control|(
name|Counters
name|c
range|:
name|mapCounters
control|)
block|{
name|current
operator|=
name|Counters
operator|.
name|sum
argument_list|(
name|current
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|current
operator|=
name|Counters
operator|.
name|sum
argument_list|(
name|current
argument_list|,
name|reduceCounters
argument_list|)
expr_stmt|;
return|return
name|current
return|;
block|}
comment|/**      * Task is reporting that it is in commit_pending      * and it is waiting for the commit Response      */
DECL|method|commitPending (TaskAttemptID taskid, TaskStatus taskStatus)
specifier|public
name|void
name|commitPending
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|TaskStatus
name|taskStatus
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|statusUpdate
argument_list|(
name|taskid
argument_list|,
name|taskStatus
argument_list|)
expr_stmt|;
block|}
DECL|method|reportDiagnosticInfo (TaskAttemptID taskid, String trace)
specifier|public
name|void
name|reportDiagnosticInfo
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|String
name|trace
parameter_list|)
block|{
comment|// Ignore for now
block|}
DECL|method|reportNextRecordRange (TaskAttemptID taskid, SortedRanges.Range range)
specifier|public
name|void
name|reportNextRecordRange
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|SortedRanges
operator|.
name|Range
name|range
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Task "
operator|+
name|taskid
operator|+
literal|" reportedNextRecordRange "
operator|+
name|range
argument_list|)
expr_stmt|;
block|}
DECL|method|ping (TaskAttemptID taskid)
specifier|public
name|boolean
name|ping
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
DECL|method|canCommit (TaskAttemptID taskid)
specifier|public
name|boolean
name|canCommit
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
DECL|method|done (TaskAttemptID taskId)
specifier|public
name|void
name|done
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|taskIndex
init|=
name|mapIds
operator|.
name|indexOf
argument_list|(
name|taskId
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskIndex
operator|>=
literal|0
condition|)
block|{
comment|// mapping
name|status
operator|.
name|setMapProgress
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|.
name|setReduceProgress
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fsError (TaskAttemptID taskId, String message)
specifier|public
specifier|synchronized
name|void
name|fsError
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"FSError: "
operator|+
name|message
operator|+
literal|"from task: "
operator|+
name|taskId
argument_list|)
expr_stmt|;
block|}
DECL|method|shuffleError (TaskAttemptID taskId, String message)
specifier|public
name|void
name|shuffleError
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"shuffleError: "
operator|+
name|message
operator|+
literal|"from task: "
operator|+
name|taskId
argument_list|)
expr_stmt|;
block|}
DECL|method|fatalError (TaskAttemptID taskId, String msg)
specifier|public
specifier|synchronized
name|void
name|fatalError
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Fatal: "
operator|+
name|msg
operator|+
literal|"from task: "
operator|+
name|taskId
argument_list|)
expr_stmt|;
block|}
DECL|method|getMapCompletionEvents (JobID jobId, int fromEventId, int maxLocs, TaskAttemptID id)
specifier|public
name|MapTaskCompletionEventsUpdate
name|getMapCompletionEvents
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|int
name|fromEventId
parameter_list|,
name|int
name|maxLocs
parameter_list|,
name|TaskAttemptID
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MapTaskCompletionEventsUpdate
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskCompletionEvent
operator|.
name|EMPTY_ARRAY
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
DECL|method|LocalJobRunner (Configuration conf)
specifier|public
name|LocalJobRunner
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|LocalJobRunner (JobConf conf)
specifier|public
name|LocalJobRunner
parameter_list|(
name|JobConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|myMetrics
operator|=
operator|new
name|JobTrackerMetricsInst
argument_list|(
literal|null
argument_list|,
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// JobSubmissionProtocol methods
DECL|field|jobid
specifier|private
specifier|static
name|int
name|jobid
init|=
literal|0
decl_stmt|;
DECL|method|getNewJobID ()
specifier|public
specifier|synchronized
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|getNewJobID
parameter_list|()
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
argument_list|(
literal|"local"
argument_list|,
operator|++
name|jobid
argument_list|)
return|;
block|}
DECL|method|submitJob ( org.apache.hadoop.mapreduce.JobID jobid, String jobSubmitDir, Credentials credentials)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
name|submitJob
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|String
name|jobSubmitDir
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|jobid
argument_list|)
argument_list|,
name|jobSubmitDir
argument_list|)
decl_stmt|;
name|job
operator|.
name|job
operator|.
name|setCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
return|return
name|job
operator|.
name|status
return|;
block|}
DECL|method|killJob (org.apache.hadoop.mapreduce.JobID id)
specifier|public
name|void
name|killJob
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|id
parameter_list|)
block|{
name|jobs
operator|.
name|get
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|killed
operator|=
literal|true
expr_stmt|;
name|jobs
operator|.
name|get
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
DECL|method|setJobPriority (org.apache.hadoop.mapreduce.JobID id, String jp)
specifier|public
name|void
name|setJobPriority
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|id
parameter_list|,
name|String
name|jp
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Changing job priority "
operator|+
literal|"in LocalJobRunner is not supported."
argument_list|)
throw|;
block|}
comment|/** Throws {@link UnsupportedOperationException} */
DECL|method|killTask (org.apache.hadoop.mapreduce.TaskAttemptID taskId, boolean shouldFail)
specifier|public
name|boolean
name|killTask
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|taskId
parameter_list|,
name|boolean
name|shouldFail
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Killing tasks in "
operator|+
literal|"LocalJobRunner is not supported"
argument_list|)
throw|;
block|}
DECL|method|getTaskReports ( org.apache.hadoop.mapreduce.JobID id, TaskType type)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
index|[]
name|getTaskReports
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|id
parameter_list|,
name|TaskType
name|type
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskReport
index|[
literal|0
index|]
return|;
block|}
DECL|method|getJobStatus ( org.apache.hadoop.mapreduce.JobID id)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
name|getJobStatus
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|id
parameter_list|)
block|{
name|Job
name|job
init|=
name|jobs
operator|.
name|get
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|!=
literal|null
condition|)
return|return
name|job
operator|.
name|status
return|;
else|else
return|return
literal|null
return|;
block|}
DECL|method|getJobCounters ( org.apache.hadoop.mapreduce.JobID id)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
name|getJobCounters
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|id
parameter_list|)
block|{
name|Job
name|job
init|=
name|jobs
operator|.
name|get
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
argument_list|(
name|job
operator|.
name|getCurrentCounters
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getFilesystemName ()
specifier|public
name|String
name|getFilesystemName
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getClusterMetrics ()
specifier|public
name|ClusterMetrics
name|getClusterMetrics
parameter_list|()
block|{
name|int
name|numMapTasks
init|=
name|map_tasks
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|new
name|ClusterMetrics
argument_list|(
name|numMapTasks
argument_list|,
name|reduce_tasks
argument_list|,
name|numMapTasks
argument_list|,
name|reduce_tasks
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|jobs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * @deprecated Use {@link #getJobTrackerStatus()} instead.    */
annotation|@
name|Deprecated
DECL|method|getJobTrackerState ()
specifier|public
name|State
name|getJobTrackerState
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|State
operator|.
name|RUNNING
return|;
block|}
DECL|method|getJobTrackerStatus ()
specifier|public
name|JobTrackerStatus
name|getJobTrackerStatus
parameter_list|()
block|{
return|return
name|JobTrackerStatus
operator|.
name|RUNNING
return|;
block|}
DECL|method|getTaskTrackerExpiryInterval ()
specifier|public
name|long
name|getTaskTrackerExpiryInterval
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|0
return|;
block|}
comment|/**     * Get all active trackers in cluster.     * @return array of TaskTrackerInfo    */
DECL|method|getActiveTrackers ()
specifier|public
name|TaskTrackerInfo
index|[]
name|getActiveTrackers
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
comment|/**     * Get all blacklisted trackers in cluster.     * @return array of TaskTrackerInfo    */
DECL|method|getBlacklistedTrackers ()
specifier|public
name|TaskTrackerInfo
index|[]
name|getBlacklistedTrackers
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
DECL|method|getTaskCompletionEvents ( org.apache.hadoop.mapreduce.JobID jobid , int fromEventId, int maxEvents)
specifier|public
name|TaskCompletionEvent
index|[]
name|getTaskCompletionEvents
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
name|jobid
parameter_list|,
name|int
name|fromEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|TaskCompletionEvent
operator|.
name|EMPTY_ARRAY
return|;
block|}
DECL|method|getAllJobs ()
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
index|[]
name|getAllJobs
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Returns the diagnostic information for a particular task in the given job.    * To be implemented    */
DECL|method|getTaskDiagnostics ( org.apache.hadoop.mapreduce.TaskAttemptID taskid)
specifier|public
name|String
index|[]
name|getTaskDiagnostics
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
comment|/**    * @see org.apache.hadoop.mapreduce.protocol.ClientProtocol#getSystemDir()    */
DECL|method|getSystemDir ()
specifier|public
name|String
name|getSystemDir
parameter_list|()
block|{
name|Path
name|sysDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_SYSTEM_DIR
argument_list|,
literal|"/tmp/hadoop/mapred/system"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|makeQualified
argument_list|(
name|sysDir
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @see org.apache.hadoop.mapred.JobSubmissionProtocol#getQueueAdmins()    */
DECL|method|getQueueAdmins (String queueName)
specifier|public
name|AccessControlList
name|getQueueAdmins
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|AccessControlList
argument_list|(
literal|" "
argument_list|)
return|;
comment|// no queue admins for local job runner
block|}
comment|/**    * @see org.apache.hadoop.mapreduce.protocol.ClientProtocol#getStagingAreaDir()    */
DECL|method|getStagingAreaDir ()
specifier|public
name|String
name|getStagingAreaDir
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|stagingRootDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_STAGING_AREA_ROOT
argument_list|,
literal|"/tmp/hadoop/mapred/staging"
argument_list|)
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|String
name|user
decl_stmt|;
if|if
condition|(
name|ugi
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
operator|+
name|rand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|user
operator|=
literal|"dummy"
operator|+
name|rand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
return|return
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|stagingRootDir
argument_list|,
name|user
operator|+
literal|"/.staging"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getJobHistoryDir ()
specifier|public
name|String
name|getJobHistoryDir
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getChildQueues (String queueName)
specifier|public
name|QueueInfo
index|[]
name|getChildQueues
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getRootQueues ()
specifier|public
name|QueueInfo
index|[]
name|getRootQueues
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getQueues ()
specifier|public
name|QueueInfo
index|[]
name|getQueues
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getQueue (String queue)
specifier|public
name|QueueInfo
name|getQueue
parameter_list|(
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueAclsInfo
index|[]
DECL|method|getQueueAclsForCurrentUser ()
name|getQueueAclsForCurrentUser
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Set the max number of map tasks to run concurrently in the LocalJobRunner.    * @param job the job to configure    * @param maxMaps the maximum number of map tasks to allow.    */
DECL|method|setLocalMaxRunningMaps ( org.apache.hadoop.mapreduce.JobContext job, int maxMaps)
specifier|public
specifier|static
name|void
name|setLocalMaxRunningMaps
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
name|job
parameter_list|,
name|int
name|maxMaps
parameter_list|)
block|{
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|LOCAL_MAX_MAPS
argument_list|,
name|maxMaps
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return the max number of map tasks to run concurrently in the    * LocalJobRunner.    */
DECL|method|getLocalMaxRunningMaps ( org.apache.hadoop.mapreduce.JobContext job)
specifier|public
specifier|static
name|int
name|getLocalMaxRunningMaps
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|LOCAL_MAX_MAPS
argument_list|,
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken (Token<DelegationTokenIdentifier> token )
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{   }
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
DECL|method|getDelegationToken (Text renewer)
name|getDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken (Token<DelegationTokenIdentifier> token )
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

