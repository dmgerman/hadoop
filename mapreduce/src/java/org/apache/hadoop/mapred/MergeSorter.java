begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|MergeSort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|Sorter
operator|.
name|RawKeyValueIterator
import|;
end_import

begin_comment
comment|/** This class implements the sort method from BasicTypeSorterBase class as  * MergeSort. Note that this class is really a wrapper over the actual  * mergesort implementation that is there in the util package. The main intent  * of providing this class is to setup the input data for the util.MergeSort  * algo so that the latter doesn't need to bother about the various data   * structures that have been created for the Map output but rather concentrate   * on the core algorithm (thereby allowing easy integration of a mergesort  * implementation). The bridge between this class and the util.MergeSort class  * is the Comparator.  */
end_comment

begin_class
DECL|class|MergeSorter
class|class
name|MergeSorter
extends|extends
name|BasicTypeSorterBase
implements|implements
name|Comparator
argument_list|<
name|IntWritable
argument_list|>
block|{
DECL|field|progressUpdateFrequency
specifier|private
specifier|static
name|int
name|progressUpdateFrequency
init|=
literal|10000
decl_stmt|;
DECL|field|progressCalls
specifier|private
name|int
name|progressCalls
init|=
literal|0
decl_stmt|;
comment|/** The sort method derived from BasicTypeSorterBase and overridden here*/
DECL|method|sort ()
specifier|public
name|RawKeyValueIterator
name|sort
parameter_list|()
block|{
name|MergeSort
name|m
init|=
operator|new
name|MergeSort
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|super
operator|.
name|count
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|int
index|[]
name|pointers
init|=
name|super
operator|.
name|pointers
decl_stmt|;
name|int
index|[]
name|pointersCopy
init|=
operator|new
name|int
index|[
name|count
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pointers
argument_list|,
literal|0
argument_list|,
name|pointersCopy
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|m
operator|.
name|mergeSort
argument_list|(
name|pointers
argument_list|,
name|pointersCopy
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
operator|new
name|MRSortResultIterator
argument_list|(
name|super
operator|.
name|keyValBuffer
argument_list|,
name|pointersCopy
argument_list|,
name|super
operator|.
name|startOffsets
argument_list|,
name|super
operator|.
name|keyLengths
argument_list|,
name|super
operator|.
name|valueLengths
argument_list|)
return|;
block|}
comment|/** The implementation of the compare method from Comparator. Note that    * Comparator.compare takes objects as inputs and so the int values are    * wrapped in (reusable) IntWritables from the class util.MergeSort    * @param i    * @param j    * @return int as per the specification of Comparator.compare    */
DECL|method|compare (IntWritable i, IntWritable j)
specifier|public
name|int
name|compare
parameter_list|(
name|IntWritable
name|i
parameter_list|,
name|IntWritable
name|j
parameter_list|)
block|{
comment|// indicate we're making progress but do a batch update
if|if
condition|(
name|progressCalls
operator|<
name|progressUpdateFrequency
condition|)
block|{
name|progressCalls
operator|++
expr_stmt|;
block|}
else|else
block|{
name|progressCalls
operator|=
literal|0
expr_stmt|;
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
return|return
name|comparator
operator|.
name|compare
argument_list|(
name|keyValBuffer
operator|.
name|getData
argument_list|()
argument_list|,
name|startOffsets
index|[
name|i
operator|.
name|get
argument_list|()
index|]
argument_list|,
name|keyLengths
index|[
name|i
operator|.
name|get
argument_list|()
index|]
argument_list|,
name|keyValBuffer
operator|.
name|getData
argument_list|()
argument_list|,
name|startOffsets
index|[
name|j
operator|.
name|get
argument_list|()
index|]
argument_list|,
name|keyLengths
index|[
name|j
operator|.
name|get
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/** Add the extra memory that will be utilized by the sort method */
DECL|method|getMemoryUtilized ()
specifier|public
name|long
name|getMemoryUtilized
parameter_list|()
block|{
comment|//this is memory that will be actually utilized (considering the temp
comment|//array that will be allocated by the sort() method (mergesort))
return|return
name|super
operator|.
name|getMemoryUtilized
argument_list|()
operator|+
name|super
operator|.
name|count
operator|*
literal|4
return|;
block|}
block|}
end_class

end_unit

