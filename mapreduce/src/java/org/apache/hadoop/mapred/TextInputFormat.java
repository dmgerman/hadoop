begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|*
import|;
end_import

begin_comment
comment|/** An {@link InputFormat} for plain text files.  Files are broken into lines.  * Either linefeed or carriage-return are used to signal end of line.  Keys are  * the position in the file, and values are the line of text..   * @deprecated Use {@link org.apache.hadoop.mapreduce.lib.input.TextInputFormat}  *  instead.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|TextInputFormat
specifier|public
class|class
name|TextInputFormat
extends|extends
name|FileInputFormat
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
implements|implements
name|JobConfigurable
block|{
DECL|field|compressionCodecs
specifier|private
name|CompressionCodecFactory
name|compressionCodecs
init|=
literal|null
decl_stmt|;
DECL|method|configure (JobConf conf)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|conf
parameter_list|)
block|{
name|compressionCodecs
operator|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|isSplitable (FileSystem fs, Path file)
specifier|protected
name|boolean
name|isSplitable
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|)
block|{
specifier|final
name|CompressionCodec
name|codec
init|=
name|compressionCodecs
operator|.
name|getCodec
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|codec
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|codec
operator|instanceof
name|SplittableCompressionCodec
return|;
block|}
DECL|method|getRecordReader ( InputSplit genericSplit, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|genericSplit
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|reporter
operator|.
name|setStatus
argument_list|(
name|genericSplit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|delimiter
init|=
name|job
operator|.
name|get
argument_list|(
literal|"textinputformat.record.delimiter"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|recordDelimiterBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|delimiter
condition|)
name|recordDelimiterBytes
operator|=
name|delimiter
operator|.
name|getBytes
argument_list|()
expr_stmt|;
return|return
operator|new
name|LineRecordReader
argument_list|(
name|job
argument_list|,
operator|(
name|FileSplit
operator|)
name|genericSplit
argument_list|,
name|recordDelimiterBytes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

