begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * An abstract {@link InputFormat} that returns {@link MultiFileSplit}'s  * in {@link #getSplits(JobConf, int)} method. Splits are constructed from   * the files under the input paths. Each split returned contains<i>nearly</i>  * equal content length.<br>    * Subclasses implement {@link #getRecordReader(InputSplit, JobConf, Reporter)}  * to construct<code>RecordReader</code>'s for<code>MultiFileSplit</code>'s.  * @see MultiFileSplit  * @deprecated Use {@link org.apache.hadoop.mapred.lib.CombineFileInputFormat} instead  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|MultiFileInputFormat
specifier|public
specifier|abstract
class|class
name|MultiFileInputFormat
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|FileInputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getSplits (JobConf job, int numSplits)
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
index|[]
name|paths
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|listStatus
argument_list|(
name|job
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MultiFileSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|MultiFileSplit
argument_list|>
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|numSplits
argument_list|,
name|paths
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
comment|// HADOOP-1818: Manage splits only if there are paths
name|long
index|[]
name|lengths
init|=
operator|new
name|long
index|[
name|paths
operator|.
name|length
index|]
decl_stmt|;
name|long
name|totLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileSystem
name|fs
init|=
name|paths
index|[
name|i
index|]
operator|.
name|getFileSystem
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|lengths
index|[
name|i
index|]
operator|=
name|fs
operator|.
name|getContentSummary
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|totLength
operator|+=
name|lengths
index|[
name|i
index|]
expr_stmt|;
block|}
name|double
name|avgLengthPerSplit
init|=
operator|(
operator|(
name|double
operator|)
name|totLength
operator|)
operator|/
name|numSplits
decl_stmt|;
name|long
name|cumulativeLength
init|=
literal|0
decl_stmt|;
name|int
name|startIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplits
condition|;
name|i
operator|++
control|)
block|{
name|int
name|splitSize
init|=
name|findSize
argument_list|(
name|i
argument_list|,
name|avgLengthPerSplit
argument_list|,
name|cumulativeLength
argument_list|,
name|startIndex
argument_list|,
name|lengths
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitSize
operator|!=
literal|0
condition|)
block|{
comment|// HADOOP-1818: Manage split only if split size is not equals to 0
name|Path
index|[]
name|splitPaths
init|=
operator|new
name|Path
index|[
name|splitSize
index|]
decl_stmt|;
name|long
index|[]
name|splitLengths
init|=
operator|new
name|long
index|[
name|splitSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|paths
argument_list|,
name|startIndex
argument_list|,
name|splitPaths
argument_list|,
literal|0
argument_list|,
name|splitSize
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|lengths
argument_list|,
name|startIndex
argument_list|,
name|splitLengths
argument_list|,
literal|0
argument_list|,
name|splitSize
argument_list|)
expr_stmt|;
name|splits
operator|.
name|add
argument_list|(
operator|new
name|MultiFileSplit
argument_list|(
name|job
argument_list|,
name|splitPaths
argument_list|,
name|splitLengths
argument_list|)
argument_list|)
expr_stmt|;
name|startIndex
operator|+=
name|splitSize
expr_stmt|;
for|for
control|(
name|long
name|l
range|:
name|splitLengths
control|)
block|{
name|cumulativeLength
operator|+=
name|l
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|splits
operator|.
name|toArray
argument_list|(
operator|new
name|MultiFileSplit
index|[
name|splits
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|findSize (int splitIndex, double avgLengthPerSplit , long cumulativeLength , int startIndex, long[] lengths)
specifier|private
name|int
name|findSize
parameter_list|(
name|int
name|splitIndex
parameter_list|,
name|double
name|avgLengthPerSplit
parameter_list|,
name|long
name|cumulativeLength
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|long
index|[]
name|lengths
parameter_list|)
block|{
if|if
condition|(
name|splitIndex
operator|==
name|lengths
operator|.
name|length
operator|-
literal|1
condition|)
return|return
name|lengths
operator|.
name|length
operator|-
name|startIndex
return|;
name|long
name|goalLength
init|=
call|(
name|long
call|)
argument_list|(
operator|(
name|splitIndex
operator|+
literal|1
operator|)
operator|*
name|avgLengthPerSplit
argument_list|)
decl_stmt|;
name|long
name|partialLength
init|=
literal|0
decl_stmt|;
comment|// accumulate till just above the goal length;
for|for
control|(
name|int
name|i
init|=
name|startIndex
init|;
name|i
operator|<
name|lengths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|partialLength
operator|+=
name|lengths
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|partialLength
operator|+
name|cumulativeLength
operator|>=
name|goalLength
condition|)
block|{
return|return
name|i
operator|-
name|startIndex
operator|+
literal|1
return|;
block|}
block|}
return|return
name|lengths
operator|.
name|length
operator|-
name|startIndex
return|;
block|}
annotation|@
name|Override
DECL|method|getRecordReader (InputSplit split, JobConf job, Reporter reporter)
specifier|public
specifier|abstract
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

