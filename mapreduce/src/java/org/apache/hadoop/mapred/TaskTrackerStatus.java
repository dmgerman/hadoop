begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A TaskTrackerStatus is a MapReduce primitive.  Keeps info on a TaskTracker.  * The JobTracker maintains a set of the most recent TaskTrackerStatus objects  * for each unique TaskTracker it knows about.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TaskTrackerStatus
specifier|public
class|class
name|TaskTrackerStatus
implements|implements
name|Writable
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TaskTrackerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|TaskTrackerStatus
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|TaskTrackerStatus
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|field|trackerName
name|String
name|trackerName
decl_stmt|;
DECL|field|host
name|String
name|host
decl_stmt|;
DECL|field|httpPort
name|int
name|httpPort
decl_stmt|;
DECL|field|failures
name|int
name|failures
decl_stmt|;
DECL|field|taskReports
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|taskReports
decl_stmt|;
DECL|field|lastSeen
specifier|volatile
name|long
name|lastSeen
decl_stmt|;
DECL|field|maxMapTasks
specifier|private
name|int
name|maxMapTasks
decl_stmt|;
DECL|field|maxReduceTasks
specifier|private
name|int
name|maxReduceTasks
decl_stmt|;
DECL|field|healthStatus
specifier|private
name|TaskTrackerHealthStatus
name|healthStatus
decl_stmt|;
DECL|field|UNAVAILABLE
specifier|public
specifier|static
specifier|final
name|int
name|UNAVAILABLE
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Class representing a collection of resources on this tasktracker.    */
DECL|class|ResourceStatus
specifier|static
class|class
name|ResourceStatus
implements|implements
name|Writable
block|{
DECL|field|totalVirtualMemory
specifier|private
name|long
name|totalVirtualMemory
decl_stmt|;
DECL|field|totalPhysicalMemory
specifier|private
name|long
name|totalPhysicalMemory
decl_stmt|;
DECL|field|mapSlotMemorySizeOnTT
specifier|private
name|long
name|mapSlotMemorySizeOnTT
decl_stmt|;
DECL|field|reduceSlotMemorySizeOnTT
specifier|private
name|long
name|reduceSlotMemorySizeOnTT
decl_stmt|;
DECL|field|availableSpace
specifier|private
name|long
name|availableSpace
decl_stmt|;
DECL|field|availableVirtualMemory
specifier|private
name|long
name|availableVirtualMemory
init|=
name|UNAVAILABLE
decl_stmt|;
comment|// in byte
DECL|field|availablePhysicalMemory
specifier|private
name|long
name|availablePhysicalMemory
init|=
name|UNAVAILABLE
decl_stmt|;
comment|// in byte
DECL|field|numProcessors
specifier|private
name|int
name|numProcessors
init|=
name|UNAVAILABLE
decl_stmt|;
DECL|field|cumulativeCpuTime
specifier|private
name|long
name|cumulativeCpuTime
init|=
name|UNAVAILABLE
decl_stmt|;
comment|// in millisecond
DECL|field|cpuFrequency
specifier|private
name|long
name|cpuFrequency
init|=
name|UNAVAILABLE
decl_stmt|;
comment|// in kHz
DECL|field|cpuUsage
specifier|private
name|float
name|cpuUsage
init|=
name|UNAVAILABLE
decl_stmt|;
comment|// in %
DECL|method|ResourceStatus ()
name|ResourceStatus
parameter_list|()
block|{
name|totalVirtualMemory
operator|=
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
expr_stmt|;
name|totalPhysicalMemory
operator|=
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
expr_stmt|;
name|mapSlotMemorySizeOnTT
operator|=
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
expr_stmt|;
name|reduceSlotMemorySizeOnTT
operator|=
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
expr_stmt|;
name|availableSpace
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
comment|/**      * Set the maximum amount of virtual memory on the tasktracker.      *       * @param vmem maximum amount of virtual memory on the tasktracker in bytes.      */
DECL|method|setTotalVirtualMemory (long totalMem)
name|void
name|setTotalVirtualMemory
parameter_list|(
name|long
name|totalMem
parameter_list|)
block|{
name|totalVirtualMemory
operator|=
name|totalMem
expr_stmt|;
block|}
comment|/**      * Get the maximum amount of virtual memory on the tasktracker.      *       * If this is {@link JobConf#DISABLED_MEMORY_LIMIT}, it should be ignored      * and not used in any computation.      *       * @return the maximum amount of virtual memory on the tasktracker in bytes.      */
DECL|method|getTotalVirtualMemory ()
name|long
name|getTotalVirtualMemory
parameter_list|()
block|{
return|return
name|totalVirtualMemory
return|;
block|}
comment|/**      * Set the maximum amount of physical memory on the tasktracker.      *       * @param totalRAM maximum amount of physical memory on the tasktracker in      *          bytes.      */
DECL|method|setTotalPhysicalMemory (long totalRAM)
name|void
name|setTotalPhysicalMemory
parameter_list|(
name|long
name|totalRAM
parameter_list|)
block|{
name|totalPhysicalMemory
operator|=
name|totalRAM
expr_stmt|;
block|}
comment|/**      * Get the maximum amount of physical memory on the tasktracker.      *       * If this is {@link JobConf#DISABLED_MEMORY_LIMIT}, it should be ignored      * and not used in any computation.      *       * @return maximum amount of physical memory on the tasktracker in bytes.      */
DECL|method|getTotalPhysicalMemory ()
name|long
name|getTotalPhysicalMemory
parameter_list|()
block|{
return|return
name|totalPhysicalMemory
return|;
block|}
comment|/**      * Set the memory size of each map slot on this TT. This will be used by JT      * for accounting more slots for jobs that use more memory.      *       * @param mem      */
DECL|method|setMapSlotMemorySizeOnTT (long mem)
name|void
name|setMapSlotMemorySizeOnTT
parameter_list|(
name|long
name|mem
parameter_list|)
block|{
name|mapSlotMemorySizeOnTT
operator|=
name|mem
expr_stmt|;
block|}
comment|/**      * Get the memory size of each map slot on this TT. See      * {@link #setMapSlotMemorySizeOnTT(long)}      *       * @return      */
DECL|method|getMapSlotMemorySizeOnTT ()
name|long
name|getMapSlotMemorySizeOnTT
parameter_list|()
block|{
return|return
name|mapSlotMemorySizeOnTT
return|;
block|}
comment|/**      * Set the memory size of each reduce slot on this TT. This will be used by      * JT for accounting more slots for jobs that use more memory.      *       * @param mem      */
DECL|method|setReduceSlotMemorySizeOnTT (long mem)
name|void
name|setReduceSlotMemorySizeOnTT
parameter_list|(
name|long
name|mem
parameter_list|)
block|{
name|reduceSlotMemorySizeOnTT
operator|=
name|mem
expr_stmt|;
block|}
comment|/**      * Get the memory size of each reduce slot on this TT. See      * {@link #setReduceSlotMemorySizeOnTT(long)}      *       * @return      */
DECL|method|getReduceSlotMemorySizeOnTT ()
name|long
name|getReduceSlotMemorySizeOnTT
parameter_list|()
block|{
return|return
name|reduceSlotMemorySizeOnTT
return|;
block|}
comment|/**      * Set the available disk space on the TT      * @param availSpace      */
DECL|method|setAvailableSpace (long availSpace)
name|void
name|setAvailableSpace
parameter_list|(
name|long
name|availSpace
parameter_list|)
block|{
name|availableSpace
operator|=
name|availSpace
expr_stmt|;
block|}
comment|/**      * Will return LONG_MAX if space hasn't been measured yet.      * @return bytes of available local disk space on this tasktracker.      */
DECL|method|getAvailableSpace ()
name|long
name|getAvailableSpace
parameter_list|()
block|{
return|return
name|availableSpace
return|;
block|}
comment|/**      * Set the amount of available virtual memory on the tasktracker.      * If the input is not a valid number, it will be set to UNAVAILABLE      *      * @param vmem amount of available virtual memory on the tasktracker      *                    in bytes.      */
DECL|method|setAvailableVirtualMemory (long availableMem)
name|void
name|setAvailableVirtualMemory
parameter_list|(
name|long
name|availableMem
parameter_list|)
block|{
name|availableVirtualMemory
operator|=
name|availableMem
operator|>
literal|0
condition|?
name|availableMem
else|:
name|UNAVAILABLE
expr_stmt|;
block|}
comment|/**      * Get the amount of available virtual memory on the tasktracker.      * Will return UNAVAILABLE if it cannot be obtained      *      * @return the amount of available virtual memory on the tasktracker      *             in bytes.      */
DECL|method|getAvailabelVirtualMemory ()
name|long
name|getAvailabelVirtualMemory
parameter_list|()
block|{
return|return
name|availableVirtualMemory
return|;
block|}
comment|/**      * Set the amount of available physical memory on the tasktracker.      * If the input is not a valid number, it will be set to UNAVAILABLE      *      * @param availableRAM amount of available physical memory on the      *                     tasktracker in bytes.      */
DECL|method|setAvailablePhysicalMemory (long availableRAM)
name|void
name|setAvailablePhysicalMemory
parameter_list|(
name|long
name|availableRAM
parameter_list|)
block|{
name|availablePhysicalMemory
operator|=
name|availableRAM
operator|>
literal|0
condition|?
name|availableRAM
else|:
name|UNAVAILABLE
expr_stmt|;
block|}
comment|/**      * Get the amount of available physical memory on the tasktracker.      * Will return UNAVAILABLE if it cannot be obtained      *      * @return amount of available physical memory on the tasktracker in bytes.      */
DECL|method|getAvailablePhysicalMemory ()
name|long
name|getAvailablePhysicalMemory
parameter_list|()
block|{
return|return
name|availablePhysicalMemory
return|;
block|}
comment|/**      * Set the CPU frequency of this TaskTracker      * If the input is not a valid number, it will be set to UNAVAILABLE      *      * @param cpuFrequency CPU frequency in kHz      */
DECL|method|setCpuFrequency (long cpuFrequency)
specifier|public
name|void
name|setCpuFrequency
parameter_list|(
name|long
name|cpuFrequency
parameter_list|)
block|{
name|this
operator|.
name|cpuFrequency
operator|=
name|cpuFrequency
operator|>
literal|0
condition|?
name|cpuFrequency
else|:
name|UNAVAILABLE
expr_stmt|;
block|}
comment|/**      * Get the CPU frequency of this TaskTracker      * Will return UNAVAILABLE if it cannot be obtained      *      * @return CPU frequency in kHz      */
DECL|method|getCpuFrequency ()
specifier|public
name|long
name|getCpuFrequency
parameter_list|()
block|{
return|return
name|cpuFrequency
return|;
block|}
comment|/**      * Set the number of processors on this TaskTracker      * If the input is not a valid number, it will be set to UNAVAILABLE      *      * @param numProcessors number of processors      */
DECL|method|setNumProcessors (int numProcessors)
specifier|public
name|void
name|setNumProcessors
parameter_list|(
name|int
name|numProcessors
parameter_list|)
block|{
name|this
operator|.
name|numProcessors
operator|=
name|numProcessors
operator|>
literal|0
condition|?
name|numProcessors
else|:
name|UNAVAILABLE
expr_stmt|;
block|}
comment|/**      * Get the number of processors on this TaskTracker      * Will return UNAVAILABLE if it cannot be obtained      *      * @return number of processors      */
DECL|method|getNumProcessors ()
specifier|public
name|int
name|getNumProcessors
parameter_list|()
block|{
return|return
name|numProcessors
return|;
block|}
comment|/**      * Set the cumulative CPU time on this TaskTracker since it is up      * It can be set to UNAVAILABLE if it is currently unavailable.      *      * @param cumulativeCpuTime Used CPU time in millisecond      */
DECL|method|setCumulativeCpuTime (long cumulativeCpuTime)
specifier|public
name|void
name|setCumulativeCpuTime
parameter_list|(
name|long
name|cumulativeCpuTime
parameter_list|)
block|{
name|this
operator|.
name|cumulativeCpuTime
operator|=
name|cumulativeCpuTime
operator|>
literal|0
condition|?
name|cumulativeCpuTime
else|:
name|UNAVAILABLE
expr_stmt|;
block|}
comment|/**      * Get the cumulative CPU time on this TaskTracker since it is up      * Will return UNAVAILABLE if it cannot be obtained      *      * @return used CPU time in milliseconds      */
DECL|method|getCumulativeCpuTime ()
specifier|public
name|long
name|getCumulativeCpuTime
parameter_list|()
block|{
return|return
name|cumulativeCpuTime
return|;
block|}
comment|/**      * Set the CPU usage on this TaskTracker      *       * @param cpuUsage CPU usage in %      */
DECL|method|setCpuUsage (float cpuUsage)
specifier|public
name|void
name|setCpuUsage
parameter_list|(
name|float
name|cpuUsage
parameter_list|)
block|{
name|this
operator|.
name|cpuUsage
operator|=
name|cpuUsage
expr_stmt|;
block|}
comment|/**      * Get the CPU usage on this TaskTracker      * Will return UNAVAILABLE if it cannot be obtained      *      * @return CPU usage in %      */
DECL|method|getCpuUsage ()
specifier|public
name|float
name|getCpuUsage
parameter_list|()
block|{
return|return
name|cpuUsage
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|totalVirtualMemory
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|totalPhysicalMemory
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|availableVirtualMemory
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|availablePhysicalMemory
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|mapSlotMemorySizeOnTT
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|reduceSlotMemorySizeOnTT
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|availableSpace
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|cumulativeCpuTime
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|cpuFrequency
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|numProcessors
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|getCpuUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|totalVirtualMemory
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|totalPhysicalMemory
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|availableVirtualMemory
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|availablePhysicalMemory
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|mapSlotMemorySizeOnTT
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|reduceSlotMemorySizeOnTT
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|availableSpace
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|cumulativeCpuTime
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|cpuFrequency
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|numProcessors
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|setCpuUsage
argument_list|(
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|resStatus
specifier|private
name|ResourceStatus
name|resStatus
decl_stmt|;
comment|/**    */
DECL|method|TaskTrackerStatus ()
specifier|public
name|TaskTrackerStatus
parameter_list|()
block|{
name|taskReports
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
expr_stmt|;
name|resStatus
operator|=
operator|new
name|ResourceStatus
argument_list|()
expr_stmt|;
name|this
operator|.
name|healthStatus
operator|=
operator|new
name|TaskTrackerHealthStatus
argument_list|()
expr_stmt|;
block|}
DECL|method|TaskTrackerStatus (String trackerName, String host)
specifier|public
name|TaskTrackerStatus
parameter_list|(
name|String
name|trackerName
parameter_list|,
name|String
name|host
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|trackerName
operator|=
name|trackerName
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
comment|/**    */
DECL|method|TaskTrackerStatus (String trackerName, String host, int httpPort, List<TaskStatus> taskReports, int failures, int maxMapTasks, int maxReduceTasks)
specifier|public
name|TaskTrackerStatus
parameter_list|(
name|String
name|trackerName
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|taskReports
parameter_list|,
name|int
name|failures
parameter_list|,
name|int
name|maxMapTasks
parameter_list|,
name|int
name|maxReduceTasks
parameter_list|)
block|{
name|this
operator|.
name|trackerName
operator|=
name|trackerName
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|httpPort
operator|=
name|httpPort
expr_stmt|;
name|this
operator|.
name|taskReports
operator|=
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|(
name|taskReports
argument_list|)
expr_stmt|;
name|this
operator|.
name|failures
operator|=
name|failures
expr_stmt|;
name|this
operator|.
name|maxMapTasks
operator|=
name|maxMapTasks
expr_stmt|;
name|this
operator|.
name|maxReduceTasks
operator|=
name|maxReduceTasks
expr_stmt|;
name|this
operator|.
name|resStatus
operator|=
operator|new
name|ResourceStatus
argument_list|()
expr_stmt|;
name|this
operator|.
name|healthStatus
operator|=
operator|new
name|TaskTrackerHealthStatus
argument_list|()
expr_stmt|;
block|}
comment|/**    */
DECL|method|getTrackerName ()
specifier|public
name|String
name|getTrackerName
parameter_list|()
block|{
return|return
name|trackerName
return|;
block|}
comment|/**    */
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**    * Get the port that this task tracker is serving http requests on.    * @return the http port    */
DECL|method|getHttpPort ()
specifier|public
name|int
name|getHttpPort
parameter_list|()
block|{
return|return
name|httpPort
return|;
block|}
comment|/**    * Get the number of tasks that have failed on this tracker.    * @return The number of failed tasks    */
DECL|method|getFailures ()
specifier|public
name|int
name|getFailures
parameter_list|()
block|{
return|return
name|failures
return|;
block|}
comment|/**    * Get the current tasks at the TaskTracker.    * Tasks are tracked by a {@link TaskStatus} object.    *     * @return a list of {@link TaskStatus} representing     *         the current tasks at the TaskTracker.    */
DECL|method|getTaskReports ()
specifier|public
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|getTaskReports
parameter_list|()
block|{
return|return
name|taskReports
return|;
block|}
comment|/**    * Is the given task considered as 'running' ?    * @param taskStatus    * @return    */
DECL|method|isTaskRunning (TaskStatus taskStatus)
specifier|private
name|boolean
name|isTaskRunning
parameter_list|(
name|TaskStatus
name|taskStatus
parameter_list|)
block|{
name|TaskStatus
operator|.
name|State
name|state
init|=
name|taskStatus
operator|.
name|getRunState
argument_list|()
decl_stmt|;
return|return
operator|(
name|state
operator|==
name|State
operator|.
name|RUNNING
operator|||
name|state
operator|==
name|State
operator|.
name|UNASSIGNED
operator|||
name|taskStatus
operator|.
name|inTaskCleanupPhase
argument_list|()
operator|)
return|;
block|}
comment|/**    * Get the number of running map tasks.    * @return the number of running map tasks    */
DECL|method|countMapTasks ()
specifier|public
name|int
name|countMapTasks
parameter_list|()
block|{
name|int
name|mapCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskStatus
name|ts
range|:
name|taskReports
control|)
block|{
if|if
condition|(
name|ts
operator|.
name|getIsMap
argument_list|()
operator|&&
name|isTaskRunning
argument_list|(
name|ts
argument_list|)
condition|)
block|{
name|mapCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|mapCount
return|;
block|}
comment|/**    * Get the number of occupied map slots.    * @return the number of occupied map slots    */
DECL|method|countOccupiedMapSlots ()
specifier|public
name|int
name|countOccupiedMapSlots
parameter_list|()
block|{
name|int
name|mapSlotsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskStatus
name|ts
range|:
name|taskReports
control|)
block|{
if|if
condition|(
name|ts
operator|.
name|getIsMap
argument_list|()
operator|&&
name|isTaskRunning
argument_list|(
name|ts
argument_list|)
condition|)
block|{
name|mapSlotsCount
operator|+=
name|ts
operator|.
name|getNumSlots
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mapSlotsCount
return|;
block|}
comment|/**    * Get available map slots.    * @return available map slots    */
DECL|method|getAvailableMapSlots ()
specifier|public
name|int
name|getAvailableMapSlots
parameter_list|()
block|{
return|return
name|getMaxMapSlots
argument_list|()
operator|-
name|countOccupiedMapSlots
argument_list|()
return|;
block|}
comment|/**    * Get the number of running reduce tasks.    * @return the number of running reduce tasks    */
DECL|method|countReduceTasks ()
specifier|public
name|int
name|countReduceTasks
parameter_list|()
block|{
name|int
name|reduceCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskStatus
name|ts
range|:
name|taskReports
control|)
block|{
if|if
condition|(
operator|(
operator|!
name|ts
operator|.
name|getIsMap
argument_list|()
operator|)
operator|&&
name|isTaskRunning
argument_list|(
name|ts
argument_list|)
condition|)
block|{
name|reduceCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|reduceCount
return|;
block|}
comment|/**    * Get the number of occupied reduce slots.    * @return the number of occupied reduce slots    */
DECL|method|countOccupiedReduceSlots ()
specifier|public
name|int
name|countOccupiedReduceSlots
parameter_list|()
block|{
name|int
name|reduceSlotsCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskStatus
name|ts
range|:
name|taskReports
control|)
block|{
if|if
condition|(
operator|(
operator|!
name|ts
operator|.
name|getIsMap
argument_list|()
operator|)
operator|&&
name|isTaskRunning
argument_list|(
name|ts
argument_list|)
condition|)
block|{
name|reduceSlotsCount
operator|+=
name|ts
operator|.
name|getNumSlots
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|reduceSlotsCount
return|;
block|}
comment|/**    * Get available reduce slots.    * @return available reduce slots    */
DECL|method|getAvailableReduceSlots ()
specifier|public
name|int
name|getAvailableReduceSlots
parameter_list|()
block|{
return|return
name|getMaxReduceSlots
argument_list|()
operator|-
name|countOccupiedReduceSlots
argument_list|()
return|;
block|}
comment|/**    */
DECL|method|getLastSeen ()
specifier|public
name|long
name|getLastSeen
parameter_list|()
block|{
return|return
name|lastSeen
return|;
block|}
comment|/**    */
DECL|method|setLastSeen (long lastSeen)
specifier|public
name|void
name|setLastSeen
parameter_list|(
name|long
name|lastSeen
parameter_list|)
block|{
name|this
operator|.
name|lastSeen
operator|=
name|lastSeen
expr_stmt|;
block|}
comment|/**    * Get the maximum map slots for this node.    * @return the maximum map slots for this node    */
DECL|method|getMaxMapSlots ()
specifier|public
name|int
name|getMaxMapSlots
parameter_list|()
block|{
return|return
name|maxMapTasks
return|;
block|}
comment|/**    * Get the maximum reduce slots for this node.    * @return the maximum reduce slots for this node    */
DECL|method|getMaxReduceSlots ()
specifier|public
name|int
name|getMaxReduceSlots
parameter_list|()
block|{
return|return
name|maxReduceTasks
return|;
block|}
comment|/**    * Return the {@link ResourceStatus} object configured with this    * status.    *     * @return the resource status    */
DECL|method|getResourceStatus ()
name|ResourceStatus
name|getResourceStatus
parameter_list|()
block|{
return|return
name|resStatus
return|;
block|}
comment|/**    * Returns health status of the task tracker.    * @return health status of Task Tracker    */
DECL|method|getHealthStatus ()
specifier|public
name|TaskTrackerHealthStatus
name|getHealthStatus
parameter_list|()
block|{
return|return
name|healthStatus
return|;
block|}
comment|/**    * Static class which encapsulates the Node health    * related fields.    *     */
comment|/**    * Static class which encapsulates the Node health    * related fields.    *     */
DECL|class|TaskTrackerHealthStatus
specifier|static
class|class
name|TaskTrackerHealthStatus
implements|implements
name|Writable
block|{
DECL|field|isNodeHealthy
specifier|private
name|boolean
name|isNodeHealthy
decl_stmt|;
DECL|field|healthReport
specifier|private
name|String
name|healthReport
decl_stmt|;
DECL|field|lastReported
specifier|private
name|long
name|lastReported
decl_stmt|;
DECL|method|TaskTrackerHealthStatus (boolean isNodeHealthy, String healthReport, long lastReported)
specifier|public
name|TaskTrackerHealthStatus
parameter_list|(
name|boolean
name|isNodeHealthy
parameter_list|,
name|String
name|healthReport
parameter_list|,
name|long
name|lastReported
parameter_list|)
block|{
name|this
operator|.
name|isNodeHealthy
operator|=
name|isNodeHealthy
expr_stmt|;
name|this
operator|.
name|healthReport
operator|=
name|healthReport
expr_stmt|;
name|this
operator|.
name|lastReported
operator|=
name|lastReported
expr_stmt|;
block|}
DECL|method|TaskTrackerHealthStatus ()
specifier|public
name|TaskTrackerHealthStatus
parameter_list|()
block|{
name|this
operator|.
name|isNodeHealthy
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|healthReport
operator|=
literal|""
expr_stmt|;
name|this
operator|.
name|lastReported
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets whether or not a task tracker is healthy or not, based on the      * output from the node health script.      *       * @param isNodeHealthy      */
DECL|method|setNodeHealthy (boolean isNodeHealthy)
name|void
name|setNodeHealthy
parameter_list|(
name|boolean
name|isNodeHealthy
parameter_list|)
block|{
name|this
operator|.
name|isNodeHealthy
operator|=
name|isNodeHealthy
expr_stmt|;
block|}
comment|/**      * Returns if node is healthy or not based on result from node health      * script.      *       * @return true if the node is healthy.      */
DECL|method|isNodeHealthy ()
name|boolean
name|isNodeHealthy
parameter_list|()
block|{
return|return
name|isNodeHealthy
return|;
block|}
comment|/**      * Sets the health report based on the output from the health script.      *       * @param healthReport      *          String listing cause of failure.      */
DECL|method|setHealthReport (String healthReport)
name|void
name|setHealthReport
parameter_list|(
name|String
name|healthReport
parameter_list|)
block|{
name|this
operator|.
name|healthReport
operator|=
name|healthReport
expr_stmt|;
block|}
comment|/**      * Returns the health report of the node if any, The health report is      * only populated when the node is not healthy.      *       * @return health report of the node if any      */
DECL|method|getHealthReport ()
name|String
name|getHealthReport
parameter_list|()
block|{
return|return
name|healthReport
return|;
block|}
comment|/**      * Sets when the TT got its health information last       * from node health monitoring service.      *       * @param lastReported last reported time by node       * health script      */
DECL|method|setLastReported (long lastReported)
specifier|public
name|void
name|setLastReported
parameter_list|(
name|long
name|lastReported
parameter_list|)
block|{
name|this
operator|.
name|lastReported
operator|=
name|lastReported
expr_stmt|;
block|}
comment|/**      * Gets time of most recent node health update.      *       * @return time stamp of most recent health update.      */
DECL|method|getLastReported ()
specifier|public
name|long
name|getLastReported
parameter_list|()
block|{
return|return
name|lastReported
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|isNodeHealthy
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|healthReport
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|lastReported
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|isNodeHealthy
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|healthReport
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|lastReported
argument_list|)
expr_stmt|;
block|}
block|}
comment|///////////////////////////////////////////
comment|// Writable
comment|///////////////////////////////////////////
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|trackerName
argument_list|)
expr_stmt|;
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|httpPort
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|failures
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|maxMapTasks
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|maxReduceTasks
argument_list|)
expr_stmt|;
name|resStatus
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|taskReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskStatus
name|taskStatus
range|:
name|taskReports
control|)
block|{
name|TaskStatus
operator|.
name|writeTaskStatus
argument_list|(
name|out
argument_list|,
name|taskStatus
argument_list|)
expr_stmt|;
block|}
name|getHealthStatus
argument_list|()
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|trackerName
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpPort
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|failures
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxMapTasks
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxReduceTasks
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|resStatus
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|taskReports
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|numTasks
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTasks
condition|;
name|i
operator|++
control|)
block|{
name|taskReports
operator|.
name|add
argument_list|(
name|TaskStatus
operator|.
name|readTaskStatus
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getHealthStatus
argument_list|()
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

