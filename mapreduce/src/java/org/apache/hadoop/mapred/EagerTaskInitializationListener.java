begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatusChangeEvent
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_comment
comment|/**  * A {@link JobInProgressListener} which initializes the tasks for a job as soon  * as the job is added (using the {@link #jobAdded(JobInProgress)} method).  */
end_comment

begin_class
DECL|class|EagerTaskInitializationListener
class|class
name|EagerTaskInitializationListener
extends|extends
name|JobInProgressListener
block|{
DECL|field|DEFAULT_NUM_THREADS
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_THREADS
init|=
literal|4
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EagerTaskInitializationListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/////////////////////////////////////////////////////////////////
comment|//  Used to init new jobs that have just been created
comment|/////////////////////////////////////////////////////////////////
DECL|class|JobInitManager
class|class
name|JobInitManager
implements|implements
name|Runnable
block|{
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|JobInProgress
name|job
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|jobInitQueue
init|)
block|{
while|while
condition|(
name|jobInitQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jobInitQueue
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
name|job
operator|=
name|jobInitQueue
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|threadPool
operator|.
name|execute
argument_list|(
operator|new
name|InitJob
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JobInitManagerThread interrupted."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down thread pool"
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|InitJob
class|class
name|InitJob
implements|implements
name|Runnable
block|{
DECL|field|job
specifier|private
name|JobInProgress
name|job
decl_stmt|;
DECL|method|InitJob (JobInProgress job)
specifier|public
name|InitJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ttm
operator|.
name|initJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|jobInitManager
specifier|private
name|JobInitManager
name|jobInitManager
init|=
operator|new
name|JobInitManager
argument_list|()
decl_stmt|;
DECL|field|jobInitManagerThread
specifier|private
name|Thread
name|jobInitManagerThread
decl_stmt|;
DECL|field|jobInitQueue
specifier|private
name|List
argument_list|<
name|JobInProgress
argument_list|>
name|jobInitQueue
init|=
operator|new
name|ArrayList
argument_list|<
name|JobInProgress
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|threadPool
specifier|private
name|ExecutorService
name|threadPool
decl_stmt|;
DECL|field|numThreads
specifier|private
name|int
name|numThreads
decl_stmt|;
DECL|field|ttm
name|TaskTrackerManager
name|ttm
decl_stmt|;
DECL|method|EagerTaskInitializationListener (Configuration conf)
specifier|public
name|EagerTaskInitializationListener
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|numThreads
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|JTConfig
operator|.
name|JT_JOBINIT_THREADS
argument_list|,
name|DEFAULT_NUM_THREADS
argument_list|)
expr_stmt|;
name|threadPool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
block|}
DECL|method|setTaskTrackerManager (TaskTrackerManager ttm)
specifier|public
name|void
name|setTaskTrackerManager
parameter_list|(
name|TaskTrackerManager
name|ttm
parameter_list|)
block|{
name|this
operator|.
name|ttm
operator|=
name|ttm
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|jobInitManagerThread
operator|=
operator|new
name|Thread
argument_list|(
name|jobInitManager
argument_list|,
literal|"jobInitManager"
argument_list|)
expr_stmt|;
name|jobInitManagerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|jobInitManagerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|terminate ()
specifier|public
name|void
name|terminate
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|jobInitManagerThread
operator|!=
literal|null
operator|&&
name|jobInitManagerThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping Job Init Manager thread"
argument_list|)
expr_stmt|;
name|jobInitManagerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|jobInitManagerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * We add the JIP to the jobInitQueue, which is processed     * asynchronously to handle split-computation and build up    * the right TaskTracker/Block mapping.    */
annotation|@
name|Override
DECL|method|jobAdded (JobInProgress job)
specifier|public
name|void
name|jobAdded
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
synchronized|synchronized
init|(
name|jobInitQueue
init|)
block|{
name|jobInitQueue
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|resortInitQueue
argument_list|()
expr_stmt|;
name|jobInitQueue
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Sort jobs by priority and then by start time.    */
DECL|method|resortInitQueue ()
specifier|private
specifier|synchronized
name|void
name|resortInitQueue
parameter_list|()
block|{
name|Comparator
argument_list|<
name|JobInProgress
argument_list|>
name|comp
init|=
operator|new
name|Comparator
argument_list|<
name|JobInProgress
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobInProgress
name|o1
parameter_list|,
name|JobInProgress
name|o2
parameter_list|)
block|{
name|int
name|res
init|=
name|o1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|o1
operator|.
name|getStartTime
argument_list|()
operator|<
name|o2
operator|.
name|getStartTime
argument_list|()
condition|)
name|res
operator|=
operator|-
literal|1
expr_stmt|;
else|else
name|res
operator|=
operator|(
name|o1
operator|.
name|getStartTime
argument_list|()
operator|==
name|o2
operator|.
name|getStartTime
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
decl_stmt|;
synchronized|synchronized
init|(
name|jobInitQueue
init|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|jobInitQueue
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|jobRemoved (JobInProgress job)
specifier|public
name|void
name|jobRemoved
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
synchronized|synchronized
init|(
name|jobInitQueue
init|)
block|{
name|jobInitQueue
operator|.
name|remove
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|jobUpdated (JobChangeEvent event)
specifier|public
name|void
name|jobUpdated
parameter_list|(
name|JobChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|JobStatusChangeEvent
condition|)
block|{
name|jobStateChanged
argument_list|(
operator|(
name|JobStatusChangeEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|// called when the job's status is changed
DECL|method|jobStateChanged (JobStatusChangeEvent event)
specifier|private
name|void
name|jobStateChanged
parameter_list|(
name|JobStatusChangeEvent
name|event
parameter_list|)
block|{
comment|// Resort the job queue if the job-start-time or job-priority changes
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|START_TIME_CHANGED
operator|||
name|event
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|PRIORITY_CHANGED
condition|)
block|{
synchronized|synchronized
init|(
name|jobInitQueue
init|)
block|{
name|resortInitQueue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

