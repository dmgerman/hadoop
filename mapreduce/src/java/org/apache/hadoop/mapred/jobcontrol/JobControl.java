begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.jobcontrol
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|jobcontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|jobcontrol
operator|.
name|ControlledJob
import|;
end_import

begin_comment
comment|/**  *@deprecated Use   *{@link org.apache.hadoop.mapreduce.lib.jobcontrol.JobControl} instead  **/
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|JobControl
specifier|public
class|class
name|JobControl
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|jobcontrol
operator|.
name|JobControl
block|{
comment|/**     * Construct a job control for a group of jobs.    * @param groupName a name identifying this group    */
DECL|method|JobControl (String groupName)
specifier|public
name|JobControl
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|super
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
DECL|method|castToJobList (List<ControlledJob> cjobs)
specifier|static
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|castToJobList
parameter_list|(
name|List
argument_list|<
name|ControlledJob
argument_list|>
name|cjobs
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Job
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ControlledJob
name|job
range|:
name|cjobs
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|(
name|Job
operator|)
name|job
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * @return the jobs in the waiting state    */
DECL|method|getWaitingJobs ()
specifier|public
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|getWaitingJobs
parameter_list|()
block|{
return|return
name|castToJobList
argument_list|(
name|super
operator|.
name|getWaitingJobList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return the jobs in the running state    */
DECL|method|getRunningJobs ()
specifier|public
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|getRunningJobs
parameter_list|()
block|{
return|return
name|castToJobList
argument_list|(
name|super
operator|.
name|getRunningJobList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return the jobs in the ready state    */
DECL|method|getReadyJobs ()
specifier|public
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|getReadyJobs
parameter_list|()
block|{
return|return
name|castToJobList
argument_list|(
name|super
operator|.
name|getReadyJobsList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return the jobs in the success state    */
DECL|method|getSuccessfulJobs ()
specifier|public
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|getSuccessfulJobs
parameter_list|()
block|{
return|return
name|castToJobList
argument_list|(
name|super
operator|.
name|getSuccessfulJobList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getFailedJobs ()
specifier|public
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|getFailedJobs
parameter_list|()
block|{
return|return
name|castToJobList
argument_list|(
name|super
operator|.
name|getFailedJobList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Add a collection of jobs    *     * @param jobs    */
DECL|method|addJobs (Collection <Job> jobs)
specifier|public
name|void
name|addJobs
parameter_list|(
name|Collection
argument_list|<
name|Job
argument_list|>
name|jobs
parameter_list|)
block|{
for|for
control|(
name|Job
name|job
range|:
name|jobs
control|)
block|{
name|addJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return the thread state    */
DECL|method|getState ()
specifier|public
name|int
name|getState
parameter_list|()
block|{
name|ThreadState
name|state
init|=
name|super
operator|.
name|getThreadState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|ThreadState
operator|.
name|RUNNING
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|state
operator|==
name|ThreadState
operator|.
name|SUSPENDED
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|state
operator|==
name|ThreadState
operator|.
name|STOPPED
condition|)
block|{
return|return
literal|2
return|;
block|}
if|if
condition|(
name|state
operator|==
name|ThreadState
operator|.
name|STOPPING
condition|)
block|{
return|return
literal|3
return|;
block|}
if|if
condition|(
name|state
operator|==
name|ThreadState
operator|.
name|READY
condition|)
block|{
return|return
literal|4
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

