begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/** An {@link RecordReader} for {@link SequenceFile}s. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|SequenceFileRecordReader
specifier|public
class|class
name|SequenceFileRecordReader
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|in
specifier|private
name|SequenceFile
operator|.
name|Reader
name|in
decl_stmt|;
DECL|field|start
specifier|private
name|long
name|start
decl_stmt|;
DECL|field|end
specifier|private
name|long
name|end
decl_stmt|;
DECL|field|more
specifier|private
name|boolean
name|more
init|=
literal|true
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|method|SequenceFileRecordReader (Configuration conf, FileSplit split)
specifier|public
name|SequenceFileRecordReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSplit
name|split
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|split
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|in
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|split
operator|.
name|getStart
argument_list|()
operator|+
name|split
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
if|if
condition|(
name|split
operator|.
name|getStart
argument_list|()
operator|>
name|in
operator|.
name|getPosition
argument_list|()
condition|)
name|in
operator|.
name|sync
argument_list|(
name|split
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
comment|// sync to start
name|this
operator|.
name|start
operator|=
name|in
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|more
operator|=
name|start
operator|<
name|end
expr_stmt|;
block|}
comment|/** The class of key that must be passed to {@link    * #next(Object, Object)}.. */
DECL|method|getKeyClass ()
specifier|public
name|Class
name|getKeyClass
parameter_list|()
block|{
return|return
name|in
operator|.
name|getKeyClass
argument_list|()
return|;
block|}
comment|/** The class of value that must be passed to {@link    * #next(Object, Object)}.. */
DECL|method|getValueClass ()
specifier|public
name|Class
name|getValueClass
parameter_list|()
block|{
return|return
name|in
operator|.
name|getValueClass
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createKey ()
specifier|public
name|K
name|createKey
parameter_list|()
block|{
return|return
operator|(
name|K
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|getKeyClass
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createValue ()
specifier|public
name|V
name|createValue
parameter_list|()
block|{
return|return
operator|(
name|V
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|getValueClass
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|next (K key, V value)
specifier|public
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|more
condition|)
return|return
literal|false
return|;
name|long
name|pos
init|=
name|in
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|boolean
name|remaining
init|=
operator|(
name|in
operator|.
name|next
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|remaining
condition|)
block|{
name|getCurrentValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|>=
name|end
operator|&&
name|in
operator|.
name|syncSeen
argument_list|()
condition|)
block|{
name|more
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|more
operator|=
name|remaining
expr_stmt|;
block|}
return|return
name|more
return|;
block|}
DECL|method|next (K key)
specifier|protected
specifier|synchronized
name|boolean
name|next
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|more
condition|)
return|return
literal|false
return|;
name|long
name|pos
init|=
name|in
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|boolean
name|remaining
init|=
operator|(
name|in
operator|.
name|next
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
name|end
operator|&&
name|in
operator|.
name|syncSeen
argument_list|()
condition|)
block|{
name|more
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|more
operator|=
name|remaining
expr_stmt|;
block|}
return|return
name|more
return|;
block|}
DECL|method|getCurrentValue (V value)
specifier|protected
specifier|synchronized
name|void
name|getCurrentValue
parameter_list|(
name|V
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|getCurrentValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the progress within the input split    * @return 0.0 to 1.0 of the input byte range    */
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|end
operator|==
name|start
condition|)
block|{
return|return
literal|0.0f
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
literal|1.0f
argument_list|,
operator|(
name|in
operator|.
name|getPosition
argument_list|()
operator|-
name|start
operator|)
operator|/
call|(
name|float
call|)
argument_list|(
name|end
operator|-
name|start
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getPosition
argument_list|()
return|;
block|}
DECL|method|seek (long pos)
specifier|protected
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

