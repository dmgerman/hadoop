begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Class responsible for modeling the resource consumption of running tasks.  *   * For now, we just do temp space for maps  *   * There is one ResourceEstimator per JobInProgress  *  */
end_comment

begin_class
DECL|class|ResourceEstimator
class|class
name|ResourceEstimator
block|{
comment|//Log with JobInProgress
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.mapred.ResourceEstimator"
argument_list|)
decl_stmt|;
DECL|field|completedMapsInputSize
specifier|private
name|long
name|completedMapsInputSize
decl_stmt|;
DECL|field|completedMapsOutputSize
specifier|private
name|long
name|completedMapsOutputSize
decl_stmt|;
DECL|field|completedMapsUpdates
specifier|private
name|int
name|completedMapsUpdates
decl_stmt|;
DECL|field|job
specifier|final
specifier|private
name|JobInProgress
name|job
decl_stmt|;
DECL|field|threshholdToUse
specifier|final
specifier|private
name|int
name|threshholdToUse
decl_stmt|;
DECL|method|ResourceEstimator (JobInProgress job)
specifier|public
name|ResourceEstimator
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|threshholdToUse
operator|=
name|job
operator|.
name|desiredMaps
argument_list|()
operator|/
literal|10
expr_stmt|;
block|}
DECL|method|updateWithCompletedTask (TaskStatus ts, TaskInProgress tip)
specifier|protected
specifier|synchronized
name|void
name|updateWithCompletedTask
parameter_list|(
name|TaskStatus
name|ts
parameter_list|,
name|TaskInProgress
name|tip
parameter_list|)
block|{
comment|//-1 indicates error, which we don't average in.
if|if
condition|(
name|tip
operator|.
name|isMapTask
argument_list|()
operator|&&
name|ts
operator|.
name|getOutputSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|completedMapsUpdates
operator|++
expr_stmt|;
name|completedMapsInputSize
operator|+=
operator|(
name|tip
operator|.
name|getMapInputSize
argument_list|()
operator|+
literal|1
operator|)
expr_stmt|;
name|completedMapsOutputSize
operator|+=
name|ts
operator|.
name|getOutputSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"completedMapsUpdates:"
operator|+
name|completedMapsUpdates
operator|+
literal|"  "
operator|+
literal|"completedMapsInputSize:"
operator|+
name|completedMapsInputSize
operator|+
literal|"  "
operator|+
literal|"completedMapsOutputSize:"
operator|+
name|completedMapsOutputSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @return estimated length of this job's total map output    */
DECL|method|getEstimatedTotalMapOutputSize ()
specifier|protected
specifier|synchronized
name|long
name|getEstimatedTotalMapOutputSize
parameter_list|()
block|{
if|if
condition|(
name|completedMapsUpdates
operator|<
name|threshholdToUse
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
name|long
name|inputSize
init|=
name|job
operator|.
name|getInputLength
argument_list|()
operator|+
name|job
operator|.
name|desiredMaps
argument_list|()
decl_stmt|;
comment|//add desiredMaps() so that randomwriter case doesn't blow up
name|long
name|estimate
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|inputSize
operator|*
name|completedMapsOutputSize
operator|*
literal|2.0
operator|)
operator|/
name|completedMapsInputSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"estimate total map output will be "
operator|+
name|estimate
argument_list|)
expr_stmt|;
block|}
return|return
name|estimate
return|;
block|}
block|}
comment|/**    * @return estimated length of this job's average map output    */
DECL|method|getEstimatedMapOutputSize ()
name|long
name|getEstimatedMapOutputSize
parameter_list|()
block|{
name|long
name|estimate
init|=
literal|0L
decl_stmt|;
if|if
condition|(
name|job
operator|.
name|desiredMaps
argument_list|()
operator|>
literal|0
condition|)
block|{
name|estimate
operator|=
name|getEstimatedTotalMapOutputSize
argument_list|()
operator|/
name|job
operator|.
name|desiredMaps
argument_list|()
expr_stmt|;
block|}
return|return
name|estimate
return|;
block|}
comment|/**    *     * @return estimated length of this job's average reduce input    */
DECL|method|getEstimatedReduceInputSize ()
name|long
name|getEstimatedReduceInputSize
parameter_list|()
block|{
if|if
condition|(
name|job
operator|.
name|desiredReduces
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//no reduce output, so no size
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|getEstimatedTotalMapOutputSize
argument_list|()
operator|/
name|job
operator|.
name|desiredReduces
argument_list|()
return|;
comment|//estimate that each reduce gets an equal share of total map output
block|}
block|}
block|}
end_class

end_unit

