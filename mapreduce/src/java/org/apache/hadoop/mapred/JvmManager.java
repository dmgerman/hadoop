begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskController
operator|.
name|TaskControllerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
operator|.
name|TaskInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|ProcessTree
import|;
end_import

begin_class
DECL|class|JvmManager
class|class
name|JvmManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JvmManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mapJvmManager
specifier|private
name|JvmManagerForType
name|mapJvmManager
decl_stmt|;
DECL|field|reduceJvmManager
specifier|private
name|JvmManagerForType
name|reduceJvmManager
decl_stmt|;
DECL|method|constructJvmEnv (List<String> setup, Vector<String>vargs, File stdout,File stderr,long logSize, File workDir, Map<String,String> env, JobConf conf)
specifier|public
name|JvmEnv
name|constructJvmEnv
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|setup
parameter_list|,
name|Vector
argument_list|<
name|String
argument_list|>
name|vargs
parameter_list|,
name|File
name|stdout
parameter_list|,
name|File
name|stderr
parameter_list|,
name|long
name|logSize
parameter_list|,
name|File
name|workDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|JobConf
name|conf
parameter_list|)
block|{
return|return
operator|new
name|JvmEnv
argument_list|(
name|setup
argument_list|,
name|vargs
argument_list|,
name|stdout
argument_list|,
name|stderr
argument_list|,
name|logSize
argument_list|,
name|workDir
argument_list|,
name|env
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|JvmManager (TaskTracker tracker)
specifier|public
name|JvmManager
parameter_list|(
name|TaskTracker
name|tracker
parameter_list|)
block|{
name|mapJvmManager
operator|=
operator|new
name|JvmManagerForType
argument_list|(
name|tracker
operator|.
name|getMaxCurrentMapTasks
argument_list|()
argument_list|,
literal|true
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
name|reduceJvmManager
operator|=
operator|new
name|JvmManagerForType
argument_list|(
name|tracker
operator|.
name|getMaxCurrentReduceTasks
argument_list|()
argument_list|,
literal|false
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
DECL|method|getJvmManagerForType (TaskType type)
name|JvmManagerForType
name|getJvmManagerForType
parameter_list|(
name|TaskType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
condition|)
block|{
return|return
name|mapJvmManager
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
condition|)
block|{
return|return
name|reduceJvmManager
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|mapJvmManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|reduceJvmManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|isJvmKnown (JVMId jvmId)
specifier|public
name|boolean
name|isJvmKnown
parameter_list|(
name|JVMId
name|jvmId
parameter_list|)
block|{
if|if
condition|(
name|jvmId
operator|.
name|isMapJVM
argument_list|()
condition|)
block|{
return|return
name|mapJvmManager
operator|.
name|isJvmknown
argument_list|(
name|jvmId
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|reduceJvmManager
operator|.
name|isJvmknown
argument_list|(
name|jvmId
argument_list|)
return|;
block|}
block|}
comment|/*    * Saves pid of the given taskJvm    */
DECL|method|setPidToJvm (JVMId jvmId, String pid)
name|void
name|setPidToJvm
parameter_list|(
name|JVMId
name|jvmId
parameter_list|,
name|String
name|pid
parameter_list|)
block|{
if|if
condition|(
name|jvmId
operator|.
name|isMapJVM
argument_list|()
condition|)
block|{
name|mapJvmManager
operator|.
name|setPidForJvm
argument_list|(
name|jvmId
argument_list|,
name|pid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reduceJvmManager
operator|.
name|setPidForJvm
argument_list|(
name|jvmId
argument_list|,
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Returns the pid of the task    */
DECL|method|getPid (TaskRunner t)
name|String
name|getPid
parameter_list|(
name|TaskRunner
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|getTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|getTask
argument_list|()
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
return|return
name|mapJvmManager
operator|.
name|getPidByRunningTask
argument_list|(
name|t
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|reduceJvmManager
operator|.
name|getPidByRunningTask
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|launchJvm (TaskRunner t, JvmEnv env)
specifier|public
name|void
name|launchJvm
parameter_list|(
name|TaskRunner
name|t
parameter_list|,
name|JvmEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|getTask
argument_list|()
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
name|mapJvmManager
operator|.
name|reapJvm
argument_list|(
name|t
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reduceJvmManager
operator|.
name|reapJvm
argument_list|(
name|t
argument_list|,
name|env
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTaskForJvm (JVMId jvmId)
specifier|public
name|TaskInProgress
name|getTaskForJvm
parameter_list|(
name|JVMId
name|jvmId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|jvmId
operator|.
name|isMapJVM
argument_list|()
condition|)
block|{
return|return
name|mapJvmManager
operator|.
name|getTaskForJvm
argument_list|(
name|jvmId
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|reduceJvmManager
operator|.
name|getTaskForJvm
argument_list|(
name|jvmId
argument_list|)
return|;
block|}
block|}
DECL|method|taskFinished (TaskRunner tr)
specifier|public
name|void
name|taskFinished
parameter_list|(
name|TaskRunner
name|tr
parameter_list|)
block|{
if|if
condition|(
name|tr
operator|.
name|getTask
argument_list|()
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
name|mapJvmManager
operator|.
name|taskFinished
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reduceJvmManager
operator|.
name|taskFinished
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|taskKilled (TaskRunner tr)
specifier|public
name|void
name|taskKilled
parameter_list|(
name|TaskRunner
name|tr
parameter_list|)
block|{
if|if
condition|(
name|tr
operator|.
name|getTask
argument_list|()
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
name|mapJvmManager
operator|.
name|taskKilled
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reduceJvmManager
operator|.
name|taskKilled
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dumpStack (TaskRunner tr)
name|void
name|dumpStack
parameter_list|(
name|TaskRunner
name|tr
parameter_list|)
block|{
if|if
condition|(
name|tr
operator|.
name|getTask
argument_list|()
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
name|mapJvmManager
operator|.
name|dumpStack
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reduceJvmManager
operator|.
name|dumpStack
argument_list|(
name|tr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|killJvm (JVMId jvmId)
specifier|public
name|void
name|killJvm
parameter_list|(
name|JVMId
name|jvmId
parameter_list|)
block|{
if|if
condition|(
name|jvmId
operator|.
name|isMap
condition|)
block|{
name|mapJvmManager
operator|.
name|killJvm
argument_list|(
name|jvmId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reduceJvmManager
operator|.
name|killJvm
argument_list|(
name|jvmId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds the task's work dir to the cleanup queue of taskTracker for    * asynchronous deletion of work dir.    * @param tracker taskTracker    * @param task    the task whose work dir needs to be deleted    * @throws IOException    */
DECL|method|deleteWorkDir (TaskTracker tracker, Task task)
specifier|static
name|void
name|deleteWorkDir
parameter_list|(
name|TaskTracker
name|tracker
parameter_list|,
name|Task
name|task
parameter_list|)
throws|throws
name|IOException
block|{
name|tracker
operator|.
name|getCleanupThread
argument_list|()
operator|.
name|addToQueue
argument_list|(
name|TaskTracker
operator|.
name|buildTaskControllerTaskPathDeletionContexts
argument_list|(
name|tracker
operator|.
name|getLocalFileSystem
argument_list|()
argument_list|,
name|tracker
operator|.
name|getLocalFiles
argument_list|(
name|tracker
operator|.
name|getJobConf
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|,
name|task
argument_list|,
literal|true
comment|/* workDir */
argument_list|,
name|tracker
operator|.
name|getTaskController
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|JvmManagerForType
specifier|static
class|class
name|JvmManagerForType
block|{
comment|//Mapping from the JVM IDs to running Tasks
DECL|field|jvmToRunningTask
name|Map
argument_list|<
name|JVMId
argument_list|,
name|TaskRunner
argument_list|>
name|jvmToRunningTask
init|=
operator|new
name|HashMap
argument_list|<
name|JVMId
argument_list|,
name|TaskRunner
argument_list|>
argument_list|()
decl_stmt|;
comment|//Mapping from the tasks to JVM IDs
DECL|field|runningTaskToJvm
name|Map
argument_list|<
name|TaskRunner
argument_list|,
name|JVMId
argument_list|>
name|runningTaskToJvm
init|=
operator|new
name|HashMap
argument_list|<
name|TaskRunner
argument_list|,
name|JVMId
argument_list|>
argument_list|()
decl_stmt|;
comment|//Mapping from the JVM IDs to Reduce JVM processes
DECL|field|jvmIdToRunner
name|Map
argument_list|<
name|JVMId
argument_list|,
name|JvmRunner
argument_list|>
name|jvmIdToRunner
init|=
operator|new
name|HashMap
argument_list|<
name|JVMId
argument_list|,
name|JvmRunner
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|maxJvms
name|int
name|maxJvms
decl_stmt|;
DECL|field|isMap
name|boolean
name|isMap
decl_stmt|;
DECL|field|tracker
name|TaskTracker
name|tracker
decl_stmt|;
DECL|field|rand
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|JvmManagerForType (int maxJvms, boolean isMap, TaskTracker tracker)
specifier|public
name|JvmManagerForType
parameter_list|(
name|int
name|maxJvms
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|TaskTracker
name|tracker
parameter_list|)
block|{
name|this
operator|.
name|maxJvms
operator|=
name|maxJvms
expr_stmt|;
name|this
operator|.
name|isMap
operator|=
name|isMap
expr_stmt|;
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
block|}
DECL|method|setRunningTaskForJvm (JVMId jvmId, TaskRunner t)
specifier|synchronized
specifier|public
name|void
name|setRunningTaskForJvm
parameter_list|(
name|JVMId
name|jvmId
parameter_list|,
name|TaskRunner
name|t
parameter_list|)
block|{
name|jvmToRunningTask
operator|.
name|put
argument_list|(
name|jvmId
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|runningTaskToJvm
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|jvmId
argument_list|)
expr_stmt|;
name|jvmIdToRunner
operator|.
name|get
argument_list|(
name|jvmId
argument_list|)
operator|.
name|setTaskRunner
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
DECL|method|getTaskForJvm (JVMId jvmId)
specifier|synchronized
specifier|public
name|TaskInProgress
name|getTaskForJvm
parameter_list|(
name|JVMId
name|jvmId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|jvmToRunningTask
operator|.
name|containsKey
argument_list|(
name|jvmId
argument_list|)
condition|)
block|{
comment|//Incase of JVM reuse, tasks are returned to previously launched
comment|//JVM via this method. However when a new task is launched
comment|//the task being returned has to be initialized.
name|TaskRunner
name|taskRunner
init|=
name|jvmToRunningTask
operator|.
name|get
argument_list|(
name|jvmId
argument_list|)
decl_stmt|;
name|JvmRunner
name|jvmRunner
init|=
name|jvmIdToRunner
operator|.
name|get
argument_list|(
name|jvmId
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
name|taskRunner
operator|.
name|getTaskInProgress
argument_list|()
operator|.
name|getTask
argument_list|()
decl_stmt|;
comment|// Initialize task dirs
name|TaskControllerContext
name|context
init|=
operator|new
name|TaskController
operator|.
name|TaskControllerContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|env
operator|=
name|jvmRunner
operator|.
name|env
expr_stmt|;
name|context
operator|.
name|task
operator|=
name|task
expr_stmt|;
comment|// If we are returning the same task as which the JVM was launched
comment|// we don't initialize task once again.
if|if
condition|(
operator|!
name|jvmRunner
operator|.
name|env
operator|.
name|conf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|TASK_ATTEMPT_ID
argument_list|)
operator|.
name|equals
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|tracker
operator|.
name|getTaskController
argument_list|()
operator|.
name|initializeTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to initialize the new task "
operator|+
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" to be given to JVM with id "
operator|+
name|jvmId
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|taskRunner
operator|.
name|getTaskInProgress
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getPidByRunningTask (TaskRunner t)
specifier|synchronized
name|String
name|getPidByRunningTask
parameter_list|(
name|TaskRunner
name|t
parameter_list|)
block|{
name|JVMId
name|id
init|=
name|runningTaskToJvm
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
return|return
name|jvmIdToRunner
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|.
name|getPid
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|setPidForJvm (JVMId jvmId, String pid)
specifier|synchronized
name|void
name|setPidForJvm
parameter_list|(
name|JVMId
name|jvmId
parameter_list|,
name|String
name|pid
parameter_list|)
block|{
name|JvmRunner
name|runner
init|=
name|jvmIdToRunner
operator|.
name|get
argument_list|(
name|jvmId
argument_list|)
decl_stmt|;
assert|assert
name|runner
operator|!=
literal|null
operator|:
literal|"Task must have a runner to set a pid"
assert|;
name|runner
operator|.
name|setPid
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
DECL|method|isJvmknown (JVMId jvmId)
specifier|synchronized
specifier|public
name|boolean
name|isJvmknown
parameter_list|(
name|JVMId
name|jvmId
parameter_list|)
block|{
return|return
name|jvmIdToRunner
operator|.
name|containsKey
argument_list|(
name|jvmId
argument_list|)
return|;
block|}
DECL|method|taskFinished (TaskRunner tr)
specifier|synchronized
specifier|public
name|void
name|taskFinished
parameter_list|(
name|TaskRunner
name|tr
parameter_list|)
block|{
name|JVMId
name|jvmId
init|=
name|runningTaskToJvm
operator|.
name|remove
argument_list|(
name|tr
argument_list|)
decl_stmt|;
if|if
condition|(
name|jvmId
operator|!=
literal|null
condition|)
block|{
name|jvmToRunningTask
operator|.
name|remove
argument_list|(
name|jvmId
argument_list|)
expr_stmt|;
name|JvmRunner
name|jvmRunner
decl_stmt|;
if|if
condition|(
operator|(
name|jvmRunner
operator|=
name|jvmIdToRunner
operator|.
name|get
argument_list|(
name|jvmId
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|jvmRunner
operator|.
name|taskRan
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|taskKilled (TaskRunner tr)
specifier|synchronized
specifier|public
name|void
name|taskKilled
parameter_list|(
name|TaskRunner
name|tr
parameter_list|)
block|{
name|JVMId
name|jvmId
init|=
name|runningTaskToJvm
operator|.
name|remove
argument_list|(
name|tr
argument_list|)
decl_stmt|;
if|if
condition|(
name|jvmId
operator|!=
literal|null
condition|)
block|{
name|jvmToRunningTask
operator|.
name|remove
argument_list|(
name|jvmId
argument_list|)
expr_stmt|;
name|killJvm
argument_list|(
name|jvmId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|killJvm (JVMId jvmId)
specifier|synchronized
specifier|public
name|void
name|killJvm
parameter_list|(
name|JVMId
name|jvmId
parameter_list|)
block|{
name|JvmRunner
name|jvmRunner
decl_stmt|;
if|if
condition|(
operator|(
name|jvmRunner
operator|=
name|jvmIdToRunner
operator|.
name|get
argument_list|(
name|jvmId
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|killJvmRunner
argument_list|(
name|jvmRunner
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|killJvmRunner (JvmRunner jvmRunner)
specifier|private
specifier|synchronized
name|void
name|killJvmRunner
parameter_list|(
name|JvmRunner
name|jvmRunner
parameter_list|)
block|{
name|jvmRunner
operator|.
name|kill
argument_list|()
expr_stmt|;
name|removeJvm
argument_list|(
name|jvmRunner
operator|.
name|jvmId
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpStack (TaskRunner tr)
name|void
name|dumpStack
parameter_list|(
name|TaskRunner
name|tr
parameter_list|)
block|{
name|JvmRunner
name|jvmRunner
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|JVMId
name|jvmId
init|=
name|runningTaskToJvm
operator|.
name|get
argument_list|(
name|tr
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|jvmId
condition|)
block|{
name|jvmRunner
operator|=
name|jvmIdToRunner
operator|.
name|get
argument_list|(
name|jvmId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Don't want to hold JvmManager lock while dumping stacks for one
comment|// task.
if|if
condition|(
literal|null
operator|!=
name|jvmRunner
condition|)
block|{
name|jvmRunner
operator|.
name|dumpChildStacks
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|synchronized
specifier|public
name|void
name|stop
parameter_list|()
block|{
comment|//since the kill() method invoked later on would remove
comment|//an entry from the jvmIdToRunner map, we create a
comment|//copy of the values and iterate over it (if we don't
comment|//make a copy, we will encounter concurrentModification
comment|//exception
name|List
argument_list|<
name|JvmRunner
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|JvmRunner
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|jvmIdToRunner
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JvmRunner
name|jvm
range|:
name|list
control|)
block|{
name|killJvmRunner
argument_list|(
name|jvm
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeJvm (JVMId jvmId)
specifier|synchronized
specifier|private
name|void
name|removeJvm
parameter_list|(
name|JVMId
name|jvmId
parameter_list|)
block|{
name|jvmIdToRunner
operator|.
name|remove
argument_list|(
name|jvmId
argument_list|)
expr_stmt|;
block|}
DECL|method|reapJvm ( TaskRunner t, JvmEnv env)
specifier|private
specifier|synchronized
name|void
name|reapJvm
parameter_list|(
name|TaskRunner
name|t
parameter_list|,
name|JvmEnv
name|env
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|getTaskInProgress
argument_list|()
operator|.
name|wasKilled
argument_list|()
condition|)
block|{
comment|//the task was killed in-flight
comment|//no need to do the rest of the operations
return|return;
block|}
name|boolean
name|spawnNewJvm
init|=
literal|false
decl_stmt|;
name|JobID
name|jobId
init|=
name|t
operator|.
name|getTask
argument_list|()
operator|.
name|getJobID
argument_list|()
decl_stmt|;
comment|//Check whether there is a free slot to start a new JVM.
comment|//,or, Kill a (idle) JVM and launch a new one
comment|//When this method is called, we *must*
comment|// (1) spawn a new JVM (if we are below the max)
comment|// (2) find an idle JVM (that belongs to the same job), or,
comment|// (3) kill an idle JVM (from a different job)
comment|// (the order of return is in the order above)
name|int
name|numJvmsSpawned
init|=
name|jvmIdToRunner
operator|.
name|size
argument_list|()
decl_stmt|;
name|JvmRunner
name|runnerToKill
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|numJvmsSpawned
operator|>=
name|maxJvms
condition|)
block|{
comment|//go through the list of JVMs for all jobs.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|JVMId
argument_list|,
name|JvmRunner
argument_list|>
argument_list|>
name|jvmIter
init|=
name|jvmIdToRunner
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|jvmIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JvmRunner
name|jvmRunner
init|=
name|jvmIter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|JobID
name|jId
init|=
name|jvmRunner
operator|.
name|jvmId
operator|.
name|getJobId
argument_list|()
decl_stmt|;
comment|//look for a free JVM for this job; if one exists then just break
if|if
condition|(
name|jId
operator|.
name|equals
argument_list|(
name|jobId
argument_list|)
operator|&&
operator|!
name|jvmRunner
operator|.
name|isBusy
argument_list|()
operator|&&
operator|!
name|jvmRunner
operator|.
name|ranAll
argument_list|()
condition|)
block|{
name|setRunningTaskForJvm
argument_list|(
name|jvmRunner
operator|.
name|jvmId
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|//reserve the JVM
name|LOG
operator|.
name|info
argument_list|(
literal|"No new JVM spawned for jobId/taskid: "
operator|+
name|jobId
operator|+
literal|"/"
operator|+
name|t
operator|.
name|getTask
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|+
literal|". Attempting to reuse: "
operator|+
name|jvmRunner
operator|.
name|jvmId
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//Cases when a JVM is killed:
comment|// (1) the JVM under consideration belongs to the same job
comment|//     (passed in the argument). In this case, kill only when
comment|//     the JVM ran all the tasks it was scheduled to run (in terms
comment|//     of count).
comment|// (2) the JVM under consideration belongs to a different job and is
comment|//     currently not busy
comment|//But in both the above cases, we see if we can assign the current
comment|//task to an idle JVM (hence we continue the loop even on a match)
if|if
condition|(
operator|(
name|jId
operator|.
name|equals
argument_list|(
name|jobId
argument_list|)
operator|&&
name|jvmRunner
operator|.
name|ranAll
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|jId
operator|.
name|equals
argument_list|(
name|jobId
argument_list|)
operator|&&
operator|!
name|jvmRunner
operator|.
name|isBusy
argument_list|()
operator|)
condition|)
block|{
name|runnerToKill
operator|=
name|jvmRunner
expr_stmt|;
name|spawnNewJvm
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|spawnNewJvm
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|spawnNewJvm
condition|)
block|{
if|if
condition|(
name|runnerToKill
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing JVM: "
operator|+
name|runnerToKill
operator|.
name|jvmId
argument_list|)
expr_stmt|;
name|killJvmRunner
argument_list|(
name|runnerToKill
argument_list|)
expr_stmt|;
block|}
name|spawnNewJvm
argument_list|(
name|jobId
argument_list|,
name|env
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//*MUST* never reach this
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Inconsistent state!!! "
operator|+
literal|"JVM Manager reached an unstable state "
operator|+
literal|"while reaping a JVM for task: "
operator|+
name|t
operator|.
name|getTask
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|+
literal|" "
operator|+
name|getDetails
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|getDetails ()
specifier|private
specifier|synchronized
name|String
name|getDetails
parameter_list|()
block|{
name|StringBuffer
name|details
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|details
operator|.
name|append
argument_list|(
literal|"Number of active JVMs:"
argument_list|)
operator|.
name|append
argument_list|(
name|jvmIdToRunner
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|JVMId
argument_list|>
name|jvmIter
init|=
name|jvmIdToRunner
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|jvmIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JVMId
name|jvmId
init|=
name|jvmIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|details
operator|.
name|append
argument_list|(
literal|"\n  JVMId "
argument_list|)
operator|.
name|append
argument_list|(
name|jvmId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" #Tasks ran: "
argument_list|)
operator|.
name|append
argument_list|(
name|jvmIdToRunner
operator|.
name|get
argument_list|(
name|jvmId
argument_list|)
operator|.
name|numTasksRan
argument_list|)
operator|.
name|append
argument_list|(
literal|" Currently busy? "
argument_list|)
operator|.
name|append
argument_list|(
name|jvmIdToRunner
operator|.
name|get
argument_list|(
name|jvmId
argument_list|)
operator|.
name|isBusy
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" Currently running: "
argument_list|)
operator|.
name|append
argument_list|(
name|jvmToRunningTask
operator|.
name|get
argument_list|(
name|jvmId
argument_list|)
operator|.
name|getTask
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|details
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|spawnNewJvm (JobID jobId, JvmEnv env, TaskRunner t)
specifier|private
specifier|synchronized
name|void
name|spawnNewJvm
parameter_list|(
name|JobID
name|jobId
parameter_list|,
name|JvmEnv
name|env
parameter_list|,
name|TaskRunner
name|t
parameter_list|)
block|{
name|JvmRunner
name|jvmRunner
init|=
operator|new
name|JvmRunner
argument_list|(
name|env
argument_list|,
name|jobId
argument_list|)
decl_stmt|;
name|jvmIdToRunner
operator|.
name|put
argument_list|(
name|jvmRunner
operator|.
name|jvmId
argument_list|,
name|jvmRunner
argument_list|)
expr_stmt|;
comment|//spawn the JVM in a new thread. Note that there will be very little
comment|//extra overhead of launching the new thread for a new JVM since
comment|//most of the cost is involved in launching the process. Moreover,
comment|//since we are going to be using the JVM for running many tasks,
comment|//the thread launch cost becomes trivial when amortized over all
comment|//tasks. Doing it this way also keeps code simple.
name|jvmRunner
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jvmRunner
operator|.
name|setName
argument_list|(
literal|"JVM Runner "
operator|+
name|jvmRunner
operator|.
name|jvmId
operator|+
literal|" spawned."
argument_list|)
expr_stmt|;
name|setRunningTaskForJvm
argument_list|(
name|jvmRunner
operator|.
name|jvmId
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|jvmRunner
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|jvmRunner
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|updateOnJvmExit (JVMId jvmId, int exitCode)
specifier|synchronized
specifier|private
name|void
name|updateOnJvmExit
parameter_list|(
name|JVMId
name|jvmId
parameter_list|,
name|int
name|exitCode
parameter_list|)
block|{
name|removeJvm
argument_list|(
name|jvmId
argument_list|)
expr_stmt|;
name|TaskRunner
name|t
init|=
name|jvmToRunningTask
operator|.
name|remove
argument_list|(
name|jvmId
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|runningTaskToJvm
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|t
operator|.
name|setExitCode
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|signalDone
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|JvmRunner
class|class
name|JvmRunner
extends|extends
name|Thread
block|{
DECL|field|env
name|JvmEnv
name|env
decl_stmt|;
DECL|field|killed
specifier|volatile
name|boolean
name|killed
init|=
literal|false
decl_stmt|;
DECL|field|numTasksRan
specifier|volatile
name|int
name|numTasksRan
decl_stmt|;
DECL|field|numTasksToRun
specifier|final
name|int
name|numTasksToRun
decl_stmt|;
DECL|field|jvmId
name|JVMId
name|jvmId
decl_stmt|;
DECL|field|shexec
specifier|private
name|ShellCommandExecutor
name|shexec
decl_stmt|;
comment|// shell terminal for running the task
comment|//context used for starting JVM
DECL|field|initalContext
specifier|private
name|TaskControllerContext
name|initalContext
decl_stmt|;
DECL|method|JvmRunner (JvmEnv env, JobID jobId)
specifier|public
name|JvmRunner
parameter_list|(
name|JvmEnv
name|env
parameter_list|,
name|JobID
name|jobId
parameter_list|)
block|{
name|this
operator|.
name|env
operator|=
name|env
expr_stmt|;
name|this
operator|.
name|jvmId
operator|=
operator|new
name|JVMId
argument_list|(
name|jobId
argument_list|,
name|isMap
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|numTasksToRun
operator|=
name|env
operator|.
name|conf
operator|.
name|getNumTasksToExecutePerJvm
argument_list|()
expr_stmt|;
name|this
operator|.
name|initalContext
operator|=
operator|new
name|TaskControllerContext
argument_list|()
expr_stmt|;
name|initalContext
operator|.
name|sleeptimeBeforeSigkill
operator|=
name|tracker
operator|.
name|getJobConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|TTConfig
operator|.
name|TT_SLEEP_TIME_BEFORE_SIG_KILL
argument_list|,
name|ProcessTree
operator|.
name|DEFAULT_SLEEPTIME_BEFORE_SIGKILL
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"In JvmRunner constructed JVM ID: "
operator|+
name|jvmId
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runChild
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
DECL|method|runChild (JvmEnv env)
specifier|public
name|void
name|runChild
parameter_list|(
name|JvmEnv
name|env
parameter_list|)
block|{
try|try
block|{
name|env
operator|.
name|vargs
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|jvmId
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//Launch the task controller to run task JVM
name|initalContext
operator|.
name|env
operator|=
name|env
expr_stmt|;
name|tracker
operator|.
name|getTaskController
argument_list|()
operator|.
name|launchTaskJVM
argument_list|(
name|initalContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// do nothing
comment|// error and output are appropriately redirected
block|}
finally|finally
block|{
comment|// handle the exit code
name|shexec
operator|=
name|initalContext
operator|.
name|shExec
expr_stmt|;
if|if
condition|(
name|shexec
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|kill
argument_list|()
expr_stmt|;
name|int
name|exitCode
init|=
name|shexec
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
name|updateOnJvmExit
argument_list|(
name|jvmId
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JVM : "
operator|+
name|jvmId
operator|+
literal|" exited with exit code "
operator|+
name|exitCode
operator|+
literal|". Number of tasks it ran: "
operator|+
name|numTasksRan
argument_list|)
expr_stmt|;
try|try
block|{
comment|// In case of jvm-reuse,
comment|//the task jvm cleans up the common workdir for every
comment|//task at the beginning of each task in the task JVM.
comment|//For the last task, we do it here.
if|if
condition|(
name|env
operator|.
name|conf
operator|.
name|getNumTasksToExecutePerJvm
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|deleteWorkDir
argument_list|(
name|tracker
argument_list|,
name|initalContext
operator|.
name|task
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{}
block|}
block|}
DECL|method|setPid (String pid)
specifier|synchronized
name|void
name|setPid
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
assert|assert
name|initalContext
operator|!=
literal|null
assert|;
name|initalContext
operator|.
name|pid
operator|=
name|pid
expr_stmt|;
block|}
DECL|method|getPid ()
specifier|synchronized
name|String
name|getPid
parameter_list|()
block|{
if|if
condition|(
name|initalContext
operator|!=
literal|null
condition|)
block|{
return|return
name|initalContext
operator|.
name|pid
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**         * Kills the process. Also kills its subprocesses if the process(root of subtree        * of processes) is created using setsid.        */
DECL|method|kill ()
specifier|synchronized
name|void
name|kill
parameter_list|()
block|{
if|if
condition|(
operator|!
name|killed
condition|)
block|{
name|TaskController
name|controller
init|=
name|tracker
operator|.
name|getTaskController
argument_list|()
decl_stmt|;
comment|// Check inital context before issuing a kill to prevent situations
comment|// where kill is issued before task is launched.
if|if
condition|(
name|initalContext
operator|!=
literal|null
operator|&&
name|initalContext
operator|.
name|env
operator|!=
literal|null
condition|)
block|{
comment|// Destroy the task jvm
name|controller
operator|.
name|destroyTaskJVM
argument_list|(
name|initalContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"JVM Not killed %s but just removed"
argument_list|,
name|jvmId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|killed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** Send a signal to the JVM requesting that it dump a stack trace,        * and wait for a timeout interval to give this signal time to be        * processed.        */
DECL|method|dumpChildStacks ()
name|void
name|dumpChildStacks
parameter_list|()
block|{
if|if
condition|(
operator|!
name|killed
condition|)
block|{
name|TaskController
name|controller
init|=
name|tracker
operator|.
name|getTaskController
argument_list|()
decl_stmt|;
comment|// Check inital context before issuing a signal to prevent situations
comment|// where signal is issued before task is launched.
if|if
condition|(
name|initalContext
operator|!=
literal|null
operator|&&
name|initalContext
operator|.
name|env
operator|!=
literal|null
condition|)
block|{
comment|// signal the task jvm
name|controller
operator|.
name|dumpTaskStack
argument_list|(
name|initalContext
argument_list|)
expr_stmt|;
comment|// We're going to kill the jvm with SIGKILL after this,
comment|// so we should wait for a few seconds first to ensure that
comment|// the SIGQUIT has time to be processed.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|initalContext
operator|.
name|sleeptimeBeforeSigkill
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Sleep interrupted : "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|taskRan ()
specifier|public
specifier|synchronized
name|void
name|taskRan
parameter_list|()
block|{
name|initalContext
operator|.
name|task
operator|=
literal|null
expr_stmt|;
name|numTasksRan
operator|++
expr_stmt|;
block|}
DECL|method|ranAll ()
specifier|public
name|boolean
name|ranAll
parameter_list|()
block|{
return|return
operator|(
name|numTasksRan
operator|==
name|numTasksToRun
operator|)
return|;
block|}
DECL|method|setTaskRunner (TaskRunner runner)
specifier|public
specifier|synchronized
name|void
name|setTaskRunner
parameter_list|(
name|TaskRunner
name|runner
parameter_list|)
block|{
name|initalContext
operator|.
name|task
operator|=
name|runner
operator|.
name|getTask
argument_list|()
expr_stmt|;
assert|assert
name|initalContext
operator|.
name|task
operator|!=
literal|null
assert|;
block|}
DECL|method|isBusy ()
specifier|public
specifier|synchronized
name|boolean
name|isBusy
parameter_list|()
block|{
return|return
name|initalContext
operator|.
name|task
operator|!=
literal|null
return|;
block|}
block|}
block|}
DECL|class|JvmEnv
specifier|static
class|class
name|JvmEnv
block|{
comment|//Helper class
DECL|field|vargs
name|List
argument_list|<
name|String
argument_list|>
name|vargs
decl_stmt|;
DECL|field|setup
name|List
argument_list|<
name|String
argument_list|>
name|setup
decl_stmt|;
DECL|field|stdout
name|File
name|stdout
decl_stmt|;
DECL|field|stderr
name|File
name|stderr
decl_stmt|;
DECL|field|workDir
name|File
name|workDir
decl_stmt|;
DECL|field|logSize
name|long
name|logSize
decl_stmt|;
DECL|field|conf
name|JobConf
name|conf
decl_stmt|;
DECL|field|env
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
decl_stmt|;
DECL|method|JvmEnv (List<String> setup, Vector<String> vargs, File stdout, File stderr, long logSize, File workDir, Map<String,String> env, JobConf conf)
specifier|public
name|JvmEnv
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|setup
parameter_list|,
name|Vector
argument_list|<
name|String
argument_list|>
name|vargs
parameter_list|,
name|File
name|stdout
parameter_list|,
name|File
name|stderr
parameter_list|,
name|long
name|logSize
parameter_list|,
name|File
name|workDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|JobConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|setup
operator|=
name|setup
expr_stmt|;
name|this
operator|.
name|vargs
operator|=
name|vargs
expr_stmt|;
name|this
operator|.
name|stdout
operator|=
name|stdout
expr_stmt|;
name|this
operator|.
name|stderr
operator|=
name|stderr
expr_stmt|;
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
name|this
operator|.
name|env
operator|=
name|env
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

