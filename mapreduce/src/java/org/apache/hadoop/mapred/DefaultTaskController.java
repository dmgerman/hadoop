begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|CleanupQueue
operator|.
name|PathDeletionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JvmManager
operator|.
name|JvmEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|ProcessTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * The default implementation for controlling tasks.  *   * This class provides an implementation for launching and killing   * tasks that need to be run as the tasktracker itself. Hence,  * many of the initializing or cleanup methods are not required here.  *   *<br/>  *   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|DefaultTaskController
specifier|public
class|class
name|DefaultTaskController
extends|extends
name|TaskController
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultTaskController
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Launch a new JVM for the task.    *     * This method launches the new JVM for the task by executing the    * the JVM command using the {@link Shell.ShellCommandExecutor}    */
DECL|method|launchTaskJVM (TaskController.TaskControllerContext context)
name|void
name|launchTaskJVM
parameter_list|(
name|TaskController
operator|.
name|TaskControllerContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|initializeTask
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|JvmEnv
name|env
init|=
name|context
operator|.
name|env
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|wrappedCommand
init|=
name|TaskLog
operator|.
name|captureOutAndError
argument_list|(
name|env
operator|.
name|setup
argument_list|,
name|env
operator|.
name|vargs
argument_list|,
name|env
operator|.
name|stdout
argument_list|,
name|env
operator|.
name|stderr
argument_list|,
name|env
operator|.
name|logSize
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|wrappedCommand
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|env
operator|.
name|workDir
argument_list|,
name|env
operator|.
name|env
argument_list|)
decl_stmt|;
comment|// set the ShellCommandExecutor for later use.
name|context
operator|.
name|shExec
operator|=
name|shexec
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
comment|/**    * Initialize the task environment.    *     * Since tasks are launched as the tasktracker user itself, this    * method has no action to perform.    */
DECL|method|initializeTask (TaskController.TaskControllerContext context)
name|void
name|initializeTask
parameter_list|(
name|TaskController
operator|.
name|TaskControllerContext
name|context
parameter_list|)
block|{
comment|// The default task controller does not need to set up
comment|// any permissions for proper execution.
comment|// So this is a dummy method.
return|return;
block|}
comment|/*    * No need to do anything as we don't need to do as we dont need anything    * extra from what TaskTracker has done.    */
annotation|@
name|Override
DECL|method|initializeJob (JobInitializationContext context)
name|void
name|initializeJob
parameter_list|(
name|JobInitializationContext
name|context
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|terminateTask (TaskControllerContext context)
name|void
name|terminateTask
parameter_list|(
name|TaskControllerContext
name|context
parameter_list|)
block|{
name|ShellCommandExecutor
name|shexec
init|=
name|context
operator|.
name|shExec
decl_stmt|;
if|if
condition|(
name|shexec
operator|!=
literal|null
condition|)
block|{
name|Process
name|process
init|=
name|shexec
operator|.
name|getProcess
argument_list|()
decl_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// Currently we don't use setsid on WINDOWS.
comment|//So kill the process alone.
if|if
condition|(
name|process
operator|!=
literal|null
condition|)
block|{
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// In addition to the task JVM, kill its subprocesses also.
name|String
name|pid
init|=
name|context
operator|.
name|pid
decl_stmt|;
if|if
condition|(
name|pid
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ProcessTree
operator|.
name|isSetsidAvailable
condition|)
block|{
name|ProcessTree
operator|.
name|terminateProcessGroup
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ProcessTree
operator|.
name|terminateProcess
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|killTask (TaskControllerContext context)
name|void
name|killTask
parameter_list|(
name|TaskControllerContext
name|context
parameter_list|)
block|{
name|ShellCommandExecutor
name|shexec
init|=
name|context
operator|.
name|shExec
decl_stmt|;
if|if
condition|(
name|shexec
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|//We don't do send kill process signal in case of windows as
comment|//already we have done a process.destroy() in terminateTaskJVM()
return|return;
block|}
name|String
name|pid
init|=
name|context
operator|.
name|pid
decl_stmt|;
if|if
condition|(
name|pid
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ProcessTree
operator|.
name|isSetsidAvailable
condition|)
block|{
name|ProcessTree
operator|.
name|killProcessGroup
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ProcessTree
operator|.
name|killProcess
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|dumpTaskStack (TaskControllerContext context)
name|void
name|dumpTaskStack
parameter_list|(
name|TaskControllerContext
name|context
parameter_list|)
block|{
name|ShellCommandExecutor
name|shexec
init|=
name|context
operator|.
name|shExec
decl_stmt|;
if|if
condition|(
name|shexec
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// We don't use signals in Windows.
return|return;
block|}
name|String
name|pid
init|=
name|context
operator|.
name|pid
decl_stmt|;
if|if
condition|(
name|pid
operator|!=
literal|null
condition|)
block|{
comment|// Send SIGQUIT to get a stack dump
if|if
condition|(
name|ProcessTree
operator|.
name|isSetsidAvailable
condition|)
block|{
name|ProcessTree
operator|.
name|sigQuitProcessGroup
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ProcessTree
operator|.
name|sigQuitProcess
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|initializeDistributedCacheFile (DistributedCacheFileContext context)
specifier|public
name|void
name|initializeDistributedCacheFile
parameter_list|(
name|DistributedCacheFileContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|localizedUniqueDir
init|=
name|context
operator|.
name|getLocalizedUniqueDir
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Setting recursive execute permission on localized dir
name|LOG
operator|.
name|info
argument_list|(
literal|"Doing chmod on localdir :"
operator|+
name|localizedUniqueDir
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|chmod
argument_list|(
name|localizedUniqueDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"+x"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception in doing chmod on"
operator|+
name|localizedUniqueDir
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|initializeUser (InitializationContext context)
specifier|public
name|void
name|initializeUser
parameter_list|(
name|InitializationContext
name|context
parameter_list|)
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
DECL|method|runDebugScript (DebugScriptContext context)
name|void
name|runDebugScript
parameter_list|(
name|DebugScriptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|wrappedCommand
init|=
name|TaskLog
operator|.
name|captureDebugOut
argument_list|(
name|context
operator|.
name|args
argument_list|,
name|context
operator|.
name|stdout
argument_list|)
decl_stmt|;
comment|// run the script.
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|wrappedCommand
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|context
operator|.
name|workDir
argument_list|)
decl_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
name|int
name|exitCode
init|=
name|shexec
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Task debug script exit with nonzero status of "
operator|+
name|exitCode
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Enables the task for cleanup by changing permissions of the specified path    * in the local filesystem    */
annotation|@
name|Override
DECL|method|enableTaskForCleanup (PathDeletionContext context)
name|void
name|enableTaskForCleanup
parameter_list|(
name|PathDeletionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|enablePathForCleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enables the job for cleanup by changing permissions of the specified path    * in the local filesystem    */
annotation|@
name|Override
DECL|method|enableJobForCleanup (PathDeletionContext context)
name|void
name|enableJobForCleanup
parameter_list|(
name|PathDeletionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|enablePathForCleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enables the path for cleanup by changing permissions of the specified path    * in the local filesystem    */
DECL|method|enablePathForCleanup (PathDeletionContext context)
specifier|private
name|void
name|enablePathForCleanup
parameter_list|(
name|PathDeletionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FileUtil
operator|.
name|chmod
argument_list|(
name|context
operator|.
name|fullPath
argument_list|,
literal|"u+rwx"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while setting permissions for "
operator|+
name|context
operator|.
name|fullPath
operator|+
literal|" for deletion."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to change permissions of "
operator|+
name|context
operator|.
name|fullPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

