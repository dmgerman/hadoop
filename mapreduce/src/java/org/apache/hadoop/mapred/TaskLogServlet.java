begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManager
operator|.
name|toFullPropertyName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HtmlQuoting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A servlet that is run by the TaskTrackers to provide the task logs via http.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TaskLogServlet
specifier|public
class|class
name|TaskLogServlet
extends|extends
name|HttpServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6615764817774487321L
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TaskLog
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|haveTaskLog (TaskAttemptID taskId, boolean isCleanup, TaskLog.LogName type)
specifier|private
name|boolean
name|haveTaskLog
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|boolean
name|isCleanup
parameter_list|,
name|TaskLog
operator|.
name|LogName
name|type
parameter_list|)
block|{
name|File
name|f
init|=
name|TaskLog
operator|.
name|getTaskLogFile
argument_list|(
name|taskId
argument_list|,
name|isCleanup
argument_list|,
name|type
argument_list|)
decl_stmt|;
return|return
name|f
operator|.
name|canRead
argument_list|()
return|;
block|}
comment|/**    * Construct the taskLogUrl    * @param taskTrackerHostName    * @param httpPort    * @param taskAttemptID    * @return the taskLogUrl    */
DECL|method|getTaskLogUrl (String taskTrackerHostName, String httpPort, String taskAttemptID)
specifier|public
specifier|static
name|String
name|getTaskLogUrl
parameter_list|(
name|String
name|taskTrackerHostName
parameter_list|,
name|String
name|httpPort
parameter_list|,
name|String
name|taskAttemptID
parameter_list|)
block|{
return|return
operator|(
literal|"http://"
operator|+
name|taskTrackerHostName
operator|+
literal|":"
operator|+
name|httpPort
operator|+
literal|"/tasklog?attemptid="
operator|+
name|taskAttemptID
operator|)
return|;
block|}
DECL|method|printTaskLog (HttpServletResponse response, OutputStream out, TaskAttemptID taskId, long start, long end, boolean plainText, TaskLog.LogName filter, boolean isCleanup)
specifier|private
name|void
name|printTaskLog
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|TaskAttemptID
name|taskId
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|,
name|boolean
name|plainText
parameter_list|,
name|TaskLog
operator|.
name|LogName
name|filter
parameter_list|,
name|boolean
name|isCleanup
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|plainText
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
operator|(
literal|"<br><b><u>"
operator|+
name|filter
operator|+
literal|" logs</u></b><br>\n"
operator|+
literal|"<pre>\n"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|InputStream
name|taskLogReader
init|=
operator|new
name|TaskLog
operator|.
name|Reader
argument_list|(
name|taskId
argument_list|,
name|filter
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|isCleanup
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|65536
index|]
decl_stmt|;
name|int
name|result
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|result
operator|=
name|taskLogReader
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|plainText
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|out
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
name|taskLogReader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|plainText
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"</pre></td></tr></table><hr><br>\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|==
name|TaskLog
operator|.
name|LogName
operator|.
name|DEBUGOUT
condition|)
block|{
if|if
condition|(
operator|!
name|plainText
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"</pre><hr><br>\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// do nothing
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Failed to retrieve "
operator|+
name|filter
operator|+
literal|" log for task: "
operator|+
name|taskId
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_GONE
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Validates if the given user has job view permissions for this job.    * conf contains jobOwner and job-view-ACLs.    * We allow jobOwner, superUser(i.e. mrOwner) and cluster administrators and    * users and groups specified in configuration using    * mapreduce.job.acl-view-job to view job.    */
DECL|method|checkAccessForTaskLogs (JobConf conf, String user, String jobId, TaskTracker tracker)
specifier|private
name|void
name|checkAccessForTaskLogs
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|jobId
parameter_list|,
name|TaskTracker
name|tracker
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
operator|!
name|tracker
operator|.
name|areACLsEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// buiild job view ACL by reading from conf
name|AccessControlList
name|jobViewACL
init|=
name|tracker
operator|.
name|getJobACLsManager
argument_list|()
operator|.
name|constructJobACLs
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
name|JobACL
operator|.
name|VIEW_JOB
argument_list|)
decl_stmt|;
comment|// read job queue name from conf
name|String
name|queue
init|=
name|conf
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
comment|// build queue admins ACL by reading from conf
name|AccessControlList
name|queueAdminsACL
init|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|toFullPropertyName
argument_list|(
name|queue
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_JOBS
operator|.
name|getAclName
argument_list|()
argument_list|)
argument_list|,
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|jobOwner
init|=
name|conf
operator|.
name|get
argument_list|(
name|JobContext
operator|.
name|USER_NAME
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
comment|// check if user is queue admin or cluster admin or jobOwner or member of
comment|// job-view-acl
if|if
condition|(
operator|!
name|queueAdminsACL
operator|.
name|isUserAllowed
argument_list|(
name|callerUGI
argument_list|)
condition|)
block|{
name|tracker
operator|.
name|getACLsManager
argument_list|()
operator|.
name|checkAccess
argument_list|(
name|jobId
argument_list|,
name|callerUGI
argument_list|,
name|queue
argument_list|,
name|Operation
operator|.
name|VIEW_TASK_LOGS
argument_list|,
name|jobOwner
argument_list|,
name|jobViewACL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Builds a JobConf object by reading the job-acls.xml file.    * This doesn't load the default resources.    *    * Returns null if job-acls.xml is not there in userlogs/$jobid on    * local file system. This can happen when we restart the cluster with job    * level authorization enabled(but was disabled on earlier cluster) and    * viewing task logs of old jobs(i.e. jobs finished on earlier unsecure    * cluster).    */
DECL|method|getConfFromJobACLsFile (JobID jobId)
specifier|static
name|JobConf
name|getConfFromJobACLsFile
parameter_list|(
name|JobID
name|jobId
parameter_list|)
block|{
name|Path
name|jobAclsFilePath
init|=
operator|new
name|Path
argument_list|(
name|TaskLog
operator|.
name|getJobDir
argument_list|(
name|jobId
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|TaskTracker
operator|.
name|jobACLsFile
argument_list|)
decl_stmt|;
name|JobConf
name|conf
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|new
name|File
argument_list|(
name|jobAclsFilePath
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|conf
operator|=
operator|new
name|JobConf
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|jobAclsFilePath
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
comment|/**    * Get the logs via http.    */
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest request, HttpServletResponse response )
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|long
name|start
init|=
literal|0
decl_stmt|;
name|long
name|end
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|plainText
init|=
literal|false
decl_stmt|;
name|TaskLog
operator|.
name|LogName
name|filter
init|=
literal|null
decl_stmt|;
name|boolean
name|isCleanup
init|=
literal|false
decl_stmt|;
name|String
name|attemptIdStr
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"attemptid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptIdStr
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Argument attemptid is required"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|logFilter
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"filter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|logFilter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|filter
operator|=
name|TaskLog
operator|.
name|LogName
operator|.
name|valueOf
argument_list|(
name|TaskLog
operator|.
name|LogName
operator|.
name|class
argument_list|,
name|logFilter
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Illegal value for filter: "
operator|+
name|logFilter
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|String
name|sLogOff
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"start"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sLogOff
operator|!=
literal|null
condition|)
block|{
name|start
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|sLogOff
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
name|String
name|sLogEnd
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"end"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sLogEnd
operator|!=
literal|null
condition|)
block|{
name|end
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|sLogEnd
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
name|String
name|sPlainText
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"plaintext"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sPlainText
operator|!=
literal|null
condition|)
block|{
name|plainText
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|sPlainText
argument_list|)
expr_stmt|;
block|}
name|String
name|sCleanup
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"cleanup"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sCleanup
operator|!=
literal|null
condition|)
block|{
name|isCleanup
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|sCleanup
argument_list|)
expr_stmt|;
block|}
name|TaskAttemptID
name|attemptId
init|=
name|TaskAttemptID
operator|.
name|forName
argument_list|(
name|attemptIdStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TaskLog
operator|.
name|getAttemptDir
argument_list|(
name|attemptId
argument_list|,
name|isCleanup
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_GONE
argument_list|,
literal|"Task log directory for task "
operator|+
name|attemptId
operator|+
literal|" does not exist. May be cleaned up by Task Tracker, if older logs."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// get user name who is accessing
name|String
name|user
init|=
name|request
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|ServletContext
name|context
init|=
name|getServletContext
argument_list|()
decl_stmt|;
name|TaskTracker
name|taskTracker
init|=
operator|(
name|TaskTracker
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
literal|"task.tracker"
argument_list|)
decl_stmt|;
name|JobID
name|jobId
init|=
name|attemptId
operator|.
name|getJobID
argument_list|()
decl_stmt|;
comment|// get jobACLConf from ACLs file
name|JobConf
name|jobACLConf
init|=
name|getConfFromJobACLsFile
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
comment|// Ignore authorization if job-acls.xml is not found
if|if
condition|(
name|jobACLConf
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|checkAccessForTaskLogs
argument_list|(
name|jobACLConf
argument_list|,
name|user
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|,
name|taskTracker
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"User "
operator|+
name|user
operator|+
literal|" failed to view tasklogs of job "
operator|+
name|jobId
operator|+
literal|"!\n\n"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|,
name|errMsg
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|OutputStream
name|out
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|plainText
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html; charset=utf-8"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
operator|(
literal|"<html>\n"
operator|+
literal|"<title>Task Logs: '"
operator|+
name|attemptId
operator|+
literal|"'</title>\n"
operator|+
literal|"<body>\n"
operator|+
literal|"<h1>Task Logs: '"
operator|+
name|attemptId
operator|+
literal|"'</h1><br>\n"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|printTaskLog
argument_list|(
name|response
argument_list|,
name|out
argument_list|,
name|attemptId
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|plainText
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDOUT
argument_list|,
name|isCleanup
argument_list|)
expr_stmt|;
name|printTaskLog
argument_list|(
name|response
argument_list|,
name|out
argument_list|,
name|attemptId
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|plainText
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|STDERR
argument_list|,
name|isCleanup
argument_list|)
expr_stmt|;
name|printTaskLog
argument_list|(
name|response
argument_list|,
name|out
argument_list|,
name|attemptId
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|plainText
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|SYSLOG
argument_list|,
name|isCleanup
argument_list|)
expr_stmt|;
if|if
condition|(
name|haveTaskLog
argument_list|(
name|attemptId
argument_list|,
name|isCleanup
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|DEBUGOUT
argument_list|)
condition|)
block|{
name|printTaskLog
argument_list|(
name|response
argument_list|,
name|out
argument_list|,
name|attemptId
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|plainText
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|DEBUGOUT
argument_list|,
name|isCleanup
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|haveTaskLog
argument_list|(
name|attemptId
argument_list|,
name|isCleanup
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|PROFILE
argument_list|)
condition|)
block|{
name|printTaskLog
argument_list|(
name|response
argument_list|,
name|out
argument_list|,
name|attemptId
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|plainText
argument_list|,
name|TaskLog
operator|.
name|LogName
operator|.
name|PROFILE
argument_list|,
name|isCleanup
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|printTaskLog
argument_list|(
name|response
argument_list|,
name|out
argument_list|,
name|attemptId
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|plainText
argument_list|,
name|filter
argument_list|,
name|isCleanup
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"</body></html>\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"You must supply a value for `filter' (STDOUT, STDERR, or SYSLOG) if you set plainText = true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/plain; charset=utf-8"
argument_list|)
expr_stmt|;
name|printTaskLog
argument_list|(
name|response
argument_list|,
name|out
argument_list|,
name|attemptId
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|plainText
argument_list|,
name|filter
argument_list|,
name|isCleanup
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

