begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_comment
comment|/**  * The response sent by the {@link JobTracker} to the hearbeat sent  * periodically by the {@link TaskTracker}  *   */
end_comment

begin_class
DECL|class|HeartbeatResponse
class|class
name|HeartbeatResponse
implements|implements
name|Writable
implements|,
name|Configurable
block|{
DECL|field|conf
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|responseId
name|short
name|responseId
decl_stmt|;
DECL|field|heartbeatInterval
name|int
name|heartbeatInterval
decl_stmt|;
DECL|field|actions
name|TaskTrackerAction
index|[]
name|actions
decl_stmt|;
DECL|method|HeartbeatResponse ()
name|HeartbeatResponse
parameter_list|()
block|{}
DECL|method|HeartbeatResponse (short responseId, TaskTrackerAction[] actions)
name|HeartbeatResponse
parameter_list|(
name|short
name|responseId
parameter_list|,
name|TaskTrackerAction
index|[]
name|actions
parameter_list|)
block|{
name|this
operator|.
name|responseId
operator|=
name|responseId
expr_stmt|;
name|this
operator|.
name|actions
operator|=
name|actions
expr_stmt|;
name|this
operator|.
name|heartbeatInterval
operator|=
name|JTConfig
operator|.
name|JT_HEARTBEAT_INTERVAL_MIN_DEFAULT
expr_stmt|;
block|}
DECL|method|setResponseId (short responseId)
specifier|public
name|void
name|setResponseId
parameter_list|(
name|short
name|responseId
parameter_list|)
block|{
name|this
operator|.
name|responseId
operator|=
name|responseId
expr_stmt|;
block|}
DECL|method|getResponseId ()
specifier|public
name|short
name|getResponseId
parameter_list|()
block|{
return|return
name|responseId
return|;
block|}
DECL|method|setActions (TaskTrackerAction[] actions)
specifier|public
name|void
name|setActions
parameter_list|(
name|TaskTrackerAction
index|[]
name|actions
parameter_list|)
block|{
name|this
operator|.
name|actions
operator|=
name|actions
expr_stmt|;
block|}
DECL|method|getActions ()
specifier|public
name|TaskTrackerAction
index|[]
name|getActions
parameter_list|()
block|{
return|return
name|actions
return|;
block|}
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|setHeartbeatInterval (int interval)
specifier|public
name|void
name|setHeartbeatInterval
parameter_list|(
name|int
name|interval
parameter_list|)
block|{
name|this
operator|.
name|heartbeatInterval
operator|=
name|interval
expr_stmt|;
block|}
DECL|method|getHeartbeatInterval ()
specifier|public
name|int
name|getHeartbeatInterval
parameter_list|()
block|{
return|return
name|heartbeatInterval
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeShort
argument_list|(
name|responseId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|heartbeatInterval
argument_list|)
expr_stmt|;
if|if
condition|(
name|actions
operator|==
literal|null
condition|)
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|actions
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskTrackerAction
name|action
range|:
name|actions
control|)
block|{
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|out
argument_list|,
name|action
operator|.
name|getActionId
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|responseId
operator|=
name|in
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|this
operator|.
name|heartbeatInterval
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|length
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|actions
operator|=
operator|new
name|TaskTrackerAction
index|[
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|TaskTrackerAction
operator|.
name|ActionType
name|actionType
init|=
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|in
argument_list|,
name|TaskTrackerAction
operator|.
name|ActionType
operator|.
name|class
argument_list|)
decl_stmt|;
name|actions
index|[
name|i
index|]
operator|=
name|TaskTrackerAction
operator|.
name|createAction
argument_list|(
name|actionType
argument_list|)
expr_stmt|;
name|actions
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|actions
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

