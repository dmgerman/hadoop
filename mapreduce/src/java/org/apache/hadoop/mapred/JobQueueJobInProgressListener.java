begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatusChangeEvent
operator|.
name|EventType
import|;
end_import

begin_comment
comment|/**  * A {@link JobInProgressListener} that maintains the jobs being managed in  * a queue. By default the queue is FIFO, but it is possible to use custom  * queue ordering by using the  * {@link #JobQueueJobInProgressListener(Map)} constructor.  */
end_comment

begin_class
DECL|class|JobQueueJobInProgressListener
class|class
name|JobQueueJobInProgressListener
extends|extends
name|JobInProgressListener
block|{
comment|/** A class that groups all the information from a {@link JobInProgress} that     * is necessary for scheduling a job.    */
DECL|class|JobSchedulingInfo
specifier|static
class|class
name|JobSchedulingInfo
block|{
DECL|field|priority
specifier|private
name|JobPriority
name|priority
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|id
specifier|private
name|JobID
name|id
decl_stmt|;
DECL|method|JobSchedulingInfo (JobInProgress jip)
specifier|public
name|JobSchedulingInfo
parameter_list|(
name|JobInProgress
name|jip
parameter_list|)
block|{
name|this
argument_list|(
name|jip
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|JobSchedulingInfo (JobStatus status)
specifier|public
name|JobSchedulingInfo
parameter_list|(
name|JobStatus
name|status
parameter_list|)
block|{
name|priority
operator|=
name|status
operator|.
name|getJobPriority
argument_list|()
expr_stmt|;
name|startTime
operator|=
name|status
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|id
operator|=
name|status
operator|.
name|getJobID
argument_list|()
expr_stmt|;
block|}
DECL|method|getPriority ()
name|JobPriority
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
DECL|method|getStartTime ()
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|getJobID ()
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
DECL|field|FIFO_JOB_QUEUE_COMPARATOR
specifier|static
specifier|final
name|Comparator
argument_list|<
name|JobSchedulingInfo
argument_list|>
name|FIFO_JOB_QUEUE_COMPARATOR
init|=
operator|new
name|Comparator
argument_list|<
name|JobSchedulingInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|JobSchedulingInfo
name|o1
parameter_list|,
name|JobSchedulingInfo
name|o2
parameter_list|)
block|{
name|int
name|res
init|=
name|o1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|o1
operator|.
name|getStartTime
argument_list|()
operator|<
name|o2
operator|.
name|getStartTime
argument_list|()
condition|)
block|{
name|res
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
operator|(
name|o1
operator|.
name|getStartTime
argument_list|()
operator|==
name|o2
operator|.
name|getStartTime
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
name|res
operator|=
name|o1
operator|.
name|getJobID
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getJobID
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
decl_stmt|;
DECL|field|jobQueue
specifier|private
name|Map
argument_list|<
name|JobSchedulingInfo
argument_list|,
name|JobInProgress
argument_list|>
name|jobQueue
decl_stmt|;
DECL|method|JobQueueJobInProgressListener ()
specifier|public
name|JobQueueJobInProgressListener
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|JobSchedulingInfo
argument_list|,
name|JobInProgress
argument_list|>
argument_list|(
name|FIFO_JOB_QUEUE_COMPARATOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * For clients that want to provide their own job priorities.    * @param jobQueue A collection whose iterator returns jobs in priority order.    */
DECL|method|JobQueueJobInProgressListener (Map<JobSchedulingInfo, JobInProgress> jobQueue)
specifier|protected
name|JobQueueJobInProgressListener
parameter_list|(
name|Map
argument_list|<
name|JobSchedulingInfo
argument_list|,
name|JobInProgress
argument_list|>
name|jobQueue
parameter_list|)
block|{
name|this
operator|.
name|jobQueue
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
name|jobQueue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a synchronized view of the job queue.    */
DECL|method|getJobQueue ()
specifier|public
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|getJobQueue
parameter_list|()
block|{
return|return
name|jobQueue
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|jobAdded (JobInProgress job)
specifier|public
name|void
name|jobAdded
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
name|jobQueue
operator|.
name|put
argument_list|(
operator|new
name|JobSchedulingInfo
argument_list|(
name|job
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
comment|// Job will be removed once the job completes
annotation|@
name|Override
DECL|method|jobRemoved (JobInProgress job)
specifier|public
name|void
name|jobRemoved
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{}
DECL|method|jobCompleted (JobSchedulingInfo oldInfo)
specifier|private
name|void
name|jobCompleted
parameter_list|(
name|JobSchedulingInfo
name|oldInfo
parameter_list|)
block|{
name|jobQueue
operator|.
name|remove
argument_list|(
name|oldInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|jobUpdated (JobChangeEvent event)
specifier|public
specifier|synchronized
name|void
name|jobUpdated
parameter_list|(
name|JobChangeEvent
name|event
parameter_list|)
block|{
name|JobInProgress
name|job
init|=
name|event
operator|.
name|getJobInProgress
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|JobStatusChangeEvent
condition|)
block|{
comment|// Check if the ordering of the job has changed
comment|// For now priority and start-time can change the job ordering
name|JobStatusChangeEvent
name|statusEvent
init|=
operator|(
name|JobStatusChangeEvent
operator|)
name|event
decl_stmt|;
name|JobSchedulingInfo
name|oldInfo
init|=
operator|new
name|JobSchedulingInfo
argument_list|(
name|statusEvent
operator|.
name|getOldStatus
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusEvent
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|PRIORITY_CHANGED
operator|||
name|statusEvent
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|START_TIME_CHANGED
condition|)
block|{
comment|// Make a priority change
name|reorderJobs
argument_list|(
name|job
argument_list|,
name|oldInfo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statusEvent
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|RUN_STATE_CHANGED
condition|)
block|{
comment|// Check if the job is complete
name|int
name|runState
init|=
name|statusEvent
operator|.
name|getNewStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
decl_stmt|;
if|if
condition|(
name|runState
operator|==
name|JobStatus
operator|.
name|SUCCEEDED
operator|||
name|runState
operator|==
name|JobStatus
operator|.
name|FAILED
operator|||
name|runState
operator|==
name|JobStatus
operator|.
name|KILLED
condition|)
block|{
name|jobCompleted
argument_list|(
name|oldInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|reorderJobs (JobInProgress job, JobSchedulingInfo oldInfo)
specifier|private
name|void
name|reorderJobs
parameter_list|(
name|JobInProgress
name|job
parameter_list|,
name|JobSchedulingInfo
name|oldInfo
parameter_list|)
block|{
synchronized|synchronized
init|(
name|jobQueue
init|)
block|{
name|jobQueue
operator|.
name|remove
argument_list|(
name|oldInfo
argument_list|)
expr_stmt|;
name|jobQueue
operator|.
name|put
argument_list|(
operator|new
name|JobSchedulingInfo
argument_list|(
name|job
argument_list|)
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

