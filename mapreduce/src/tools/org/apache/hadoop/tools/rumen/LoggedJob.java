begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  *   */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonAnySetter
import|;
end_import

begin_comment
comment|/**  * A {@link LoggedDiscreteCDF} is a representation of an hadoop job, with the  * details of this class set up to meet the requirements of the Jackson JSON  * parser/generator.  *   * All of the public methods are simply accessors for the instance variables we  * want to write out in the JSON files.  *   */
end_comment

begin_class
DECL|class|LoggedJob
specifier|public
class|class
name|LoggedJob
implements|implements
name|DeepCompare
block|{
DECL|enum|JobType
specifier|public
enum|enum
name|JobType
block|{
DECL|enumConstant|JAVA
DECL|enumConstant|PIG
DECL|enumConstant|STREAMING
DECL|enumConstant|PIPES
DECL|enumConstant|OVERALL
name|JAVA
block|,
name|PIG
block|,
name|STREAMING
block|,
name|PIPES
block|,
name|OVERALL
block|}
empty_stmt|;
DECL|enum|JobPriority
specifier|public
enum|enum
name|JobPriority
block|{
DECL|enumConstant|VERY_LOW
DECL|enumConstant|LOW
DECL|enumConstant|NORMAL
DECL|enumConstant|HIGH
DECL|enumConstant|VERY_HIGH
name|VERY_LOW
block|,
name|LOW
block|,
name|NORMAL
block|,
name|HIGH
block|,
name|VERY_HIGH
block|}
empty_stmt|;
DECL|field|alreadySeenAnySetterAttributes
specifier|static
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|alreadySeenAnySetterAttributes
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobID
name|String
name|jobID
decl_stmt|;
DECL|field|user
name|String
name|user
decl_stmt|;
DECL|field|computonsPerMapInputByte
name|long
name|computonsPerMapInputByte
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|computonsPerMapOutputByte
name|long
name|computonsPerMapOutputByte
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|computonsPerReduceInputByte
name|long
name|computonsPerReduceInputByte
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|computonsPerReduceOutputByte
name|long
name|computonsPerReduceOutputByte
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|submitTime
name|long
name|submitTime
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|launchTime
name|long
name|launchTime
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|finishTime
name|long
name|finishTime
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|heapMegabytes
name|int
name|heapMegabytes
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|totalMaps
name|int
name|totalMaps
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|totalReduces
name|int
name|totalReduces
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|outcome
name|Pre21JobHistoryConstants
operator|.
name|Values
name|outcome
init|=
literal|null
decl_stmt|;
DECL|field|jobtype
name|JobType
name|jobtype
init|=
name|JobType
operator|.
name|JAVA
decl_stmt|;
DECL|field|priority
name|JobPriority
name|priority
init|=
name|JobPriority
operator|.
name|NORMAL
decl_stmt|;
DECL|field|directDependantJobs
name|List
argument_list|<
name|String
argument_list|>
name|directDependantJobs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mapTasks
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|mapTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|LoggedTask
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reduceTasks
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|reduceTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|LoggedTask
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|otherTasks
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|otherTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|LoggedTask
argument_list|>
argument_list|()
decl_stmt|;
comment|// There are CDFs for each level of locality -- most local first
DECL|field|successfulMapAttemptCDFs
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|successfulMapAttemptCDFs
decl_stmt|;
comment|// There are CDFs for each level of locality -- most local first
DECL|field|failedMapAttemptCDFs
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|failedMapAttemptCDFs
decl_stmt|;
DECL|field|successfulReduceAttemptCDF
name|LoggedDiscreteCDF
name|successfulReduceAttemptCDF
decl_stmt|;
DECL|field|failedReduceAttemptCDF
name|LoggedDiscreteCDF
name|failedReduceAttemptCDF
decl_stmt|;
DECL|field|queue
name|String
name|queue
init|=
literal|null
decl_stmt|;
DECL|field|jobName
name|String
name|jobName
init|=
literal|null
decl_stmt|;
DECL|field|clusterMapMB
name|int
name|clusterMapMB
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|clusterReduceMB
name|int
name|clusterReduceMB
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|jobMapMB
name|int
name|jobMapMB
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|jobReduceMB
name|int
name|jobReduceMB
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|relativeTime
name|long
name|relativeTime
init|=
literal|0
decl_stmt|;
DECL|field|mapperTriesToSucceed
name|double
index|[]
name|mapperTriesToSucceed
decl_stmt|;
DECL|field|failedMapperFraction
name|double
name|failedMapperFraction
decl_stmt|;
comment|// !!!!!
DECL|field|jobProperties
specifier|private
name|Properties
name|jobProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|method|LoggedJob ()
name|LoggedJob
parameter_list|()
block|{    }
DECL|method|LoggedJob (String jobID)
name|LoggedJob
parameter_list|(
name|String
name|jobID
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setJobID
argument_list|(
name|jobID
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the configuration properties of the job.    */
DECL|method|setJobProperties (Properties conf)
name|void
name|setJobProperties
parameter_list|(
name|Properties
name|conf
parameter_list|)
block|{
name|this
operator|.
name|jobProperties
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * Get the configuration properties of the job.    */
DECL|method|getJobProperties ()
specifier|public
name|Properties
name|getJobProperties
parameter_list|()
block|{
return|return
name|jobProperties
return|;
block|}
DECL|method|adjustTimes (long adjustment)
name|void
name|adjustTimes
parameter_list|(
name|long
name|adjustment
parameter_list|)
block|{
name|submitTime
operator|+=
name|adjustment
expr_stmt|;
name|launchTime
operator|+=
name|adjustment
expr_stmt|;
name|finishTime
operator|+=
name|adjustment
expr_stmt|;
for|for
control|(
name|LoggedTask
name|task
range|:
name|mapTasks
control|)
block|{
name|task
operator|.
name|adjustTimes
argument_list|(
name|adjustment
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LoggedTask
name|task
range|:
name|reduceTasks
control|)
block|{
name|task
operator|.
name|adjustTimes
argument_list|(
name|adjustment
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LoggedTask
name|task
range|:
name|otherTasks
control|)
block|{
name|task
operator|.
name|adjustTimes
argument_list|(
name|adjustment
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// for input parameter ignored.
annotation|@
name|JsonAnySetter
DECL|method|setUnknownAttribute (String attributeName, Object ignored)
specifier|public
name|void
name|setUnknownAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|Object
name|ignored
parameter_list|)
block|{
if|if
condition|(
operator|!
name|alreadySeenAnySetterAttributes
operator|.
name|contains
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
name|alreadySeenAnySetterAttributes
operator|.
name|add
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"In LoggedJob, we saw the unknown attribute "
operator|+
name|attributeName
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|setUser (String user)
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
DECL|method|getJobID ()
specifier|public
name|String
name|getJobID
parameter_list|()
block|{
return|return
name|jobID
return|;
block|}
DECL|method|setJobID (String jobID)
name|void
name|setJobID
parameter_list|(
name|String
name|jobID
parameter_list|)
block|{
name|this
operator|.
name|jobID
operator|=
name|jobID
expr_stmt|;
block|}
DECL|method|getPriority ()
specifier|public
name|JobPriority
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
DECL|method|setPriority (JobPriority priority)
name|void
name|setPriority
parameter_list|(
name|JobPriority
name|priority
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
DECL|method|getComputonsPerMapInputByte ()
specifier|public
name|long
name|getComputonsPerMapInputByte
parameter_list|()
block|{
return|return
name|computonsPerMapInputByte
return|;
block|}
DECL|method|setComputonsPerMapInputByte (long computonsPerMapInputByte)
name|void
name|setComputonsPerMapInputByte
parameter_list|(
name|long
name|computonsPerMapInputByte
parameter_list|)
block|{
name|this
operator|.
name|computonsPerMapInputByte
operator|=
name|computonsPerMapInputByte
expr_stmt|;
block|}
DECL|method|getComputonsPerMapOutputByte ()
specifier|public
name|long
name|getComputonsPerMapOutputByte
parameter_list|()
block|{
return|return
name|computonsPerMapOutputByte
return|;
block|}
DECL|method|setComputonsPerMapOutputByte (long computonsPerMapOutputByte)
name|void
name|setComputonsPerMapOutputByte
parameter_list|(
name|long
name|computonsPerMapOutputByte
parameter_list|)
block|{
name|this
operator|.
name|computonsPerMapOutputByte
operator|=
name|computonsPerMapOutputByte
expr_stmt|;
block|}
DECL|method|getComputonsPerReduceInputByte ()
specifier|public
name|long
name|getComputonsPerReduceInputByte
parameter_list|()
block|{
return|return
name|computonsPerReduceInputByte
return|;
block|}
DECL|method|setComputonsPerReduceInputByte (long computonsPerReduceInputByte)
name|void
name|setComputonsPerReduceInputByte
parameter_list|(
name|long
name|computonsPerReduceInputByte
parameter_list|)
block|{
name|this
operator|.
name|computonsPerReduceInputByte
operator|=
name|computonsPerReduceInputByte
expr_stmt|;
block|}
DECL|method|getComputonsPerReduceOutputByte ()
specifier|public
name|long
name|getComputonsPerReduceOutputByte
parameter_list|()
block|{
return|return
name|computonsPerReduceOutputByte
return|;
block|}
DECL|method|setComputonsPerReduceOutputByte (long computonsPerReduceOutputByte)
name|void
name|setComputonsPerReduceOutputByte
parameter_list|(
name|long
name|computonsPerReduceOutputByte
parameter_list|)
block|{
name|this
operator|.
name|computonsPerReduceOutputByte
operator|=
name|computonsPerReduceOutputByte
expr_stmt|;
comment|// !!!!!
block|}
DECL|method|getSubmitTime ()
specifier|public
name|long
name|getSubmitTime
parameter_list|()
block|{
return|return
name|submitTime
return|;
block|}
DECL|method|setSubmitTime (long submitTime)
name|void
name|setSubmitTime
parameter_list|(
name|long
name|submitTime
parameter_list|)
block|{
name|this
operator|.
name|submitTime
operator|=
name|submitTime
expr_stmt|;
block|}
DECL|method|getLaunchTime ()
specifier|public
name|long
name|getLaunchTime
parameter_list|()
block|{
return|return
name|launchTime
return|;
block|}
DECL|method|setLaunchTime (long startTime)
name|void
name|setLaunchTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|launchTime
operator|=
name|startTime
expr_stmt|;
block|}
DECL|method|getFinishTime ()
specifier|public
name|long
name|getFinishTime
parameter_list|()
block|{
return|return
name|finishTime
return|;
block|}
DECL|method|setFinishTime (long finishTime)
name|void
name|setFinishTime
parameter_list|(
name|long
name|finishTime
parameter_list|)
block|{
name|this
operator|.
name|finishTime
operator|=
name|finishTime
expr_stmt|;
block|}
DECL|method|getHeapMegabytes ()
specifier|public
name|int
name|getHeapMegabytes
parameter_list|()
block|{
return|return
name|heapMegabytes
return|;
block|}
DECL|method|setHeapMegabytes (int heapMegabytes)
name|void
name|setHeapMegabytes
parameter_list|(
name|int
name|heapMegabytes
parameter_list|)
block|{
name|this
operator|.
name|heapMegabytes
operator|=
name|heapMegabytes
expr_stmt|;
block|}
DECL|method|getTotalMaps ()
specifier|public
name|int
name|getTotalMaps
parameter_list|()
block|{
return|return
name|totalMaps
return|;
block|}
DECL|method|setTotalMaps (int totalMaps)
name|void
name|setTotalMaps
parameter_list|(
name|int
name|totalMaps
parameter_list|)
block|{
name|this
operator|.
name|totalMaps
operator|=
name|totalMaps
expr_stmt|;
block|}
DECL|method|getTotalReduces ()
specifier|public
name|int
name|getTotalReduces
parameter_list|()
block|{
return|return
name|totalReduces
return|;
block|}
DECL|method|setTotalReduces (int totalReduces)
name|void
name|setTotalReduces
parameter_list|(
name|int
name|totalReduces
parameter_list|)
block|{
name|this
operator|.
name|totalReduces
operator|=
name|totalReduces
expr_stmt|;
block|}
DECL|method|getOutcome ()
specifier|public
name|Pre21JobHistoryConstants
operator|.
name|Values
name|getOutcome
parameter_list|()
block|{
return|return
name|outcome
return|;
block|}
DECL|method|setOutcome (Pre21JobHistoryConstants.Values outcome)
name|void
name|setOutcome
parameter_list|(
name|Pre21JobHistoryConstants
operator|.
name|Values
name|outcome
parameter_list|)
block|{
name|this
operator|.
name|outcome
operator|=
name|outcome
expr_stmt|;
block|}
DECL|method|getJobtype ()
specifier|public
name|JobType
name|getJobtype
parameter_list|()
block|{
return|return
name|jobtype
return|;
block|}
DECL|method|setJobtype (JobType jobtype)
name|void
name|setJobtype
parameter_list|(
name|JobType
name|jobtype
parameter_list|)
block|{
name|this
operator|.
name|jobtype
operator|=
name|jobtype
expr_stmt|;
block|}
DECL|method|getDirectDependantJobs ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDirectDependantJobs
parameter_list|()
block|{
return|return
name|directDependantJobs
return|;
block|}
DECL|method|setDirectDependantJobs (List<String> directDependantJobs)
name|void
name|setDirectDependantJobs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|directDependantJobs
parameter_list|)
block|{
name|this
operator|.
name|directDependantJobs
operator|=
name|directDependantJobs
expr_stmt|;
block|}
DECL|method|getMapTasks ()
specifier|public
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|getMapTasks
parameter_list|()
block|{
return|return
name|mapTasks
return|;
block|}
DECL|method|setMapTasks (List<LoggedTask> mapTasks)
name|void
name|setMapTasks
parameter_list|(
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|mapTasks
parameter_list|)
block|{
name|this
operator|.
name|mapTasks
operator|=
name|mapTasks
expr_stmt|;
block|}
DECL|method|getReduceTasks ()
specifier|public
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|getReduceTasks
parameter_list|()
block|{
return|return
name|reduceTasks
return|;
block|}
DECL|method|setReduceTasks (List<LoggedTask> reduceTasks)
name|void
name|setReduceTasks
parameter_list|(
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|reduceTasks
parameter_list|)
block|{
name|this
operator|.
name|reduceTasks
operator|=
name|reduceTasks
expr_stmt|;
block|}
DECL|method|getOtherTasks ()
specifier|public
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|getOtherTasks
parameter_list|()
block|{
return|return
name|otherTasks
return|;
block|}
DECL|method|setOtherTasks (List<LoggedTask> otherTasks)
name|void
name|setOtherTasks
parameter_list|(
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|otherTasks
parameter_list|)
block|{
name|this
operator|.
name|otherTasks
operator|=
name|otherTasks
expr_stmt|;
block|}
DECL|method|getSuccessfulMapAttemptCDFs ()
specifier|public
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|getSuccessfulMapAttemptCDFs
parameter_list|()
block|{
return|return
name|successfulMapAttemptCDFs
return|;
block|}
DECL|method|setSuccessfulMapAttemptCDFs ( ArrayList<LoggedDiscreteCDF> successfulMapAttemptCDFs)
name|void
name|setSuccessfulMapAttemptCDFs
parameter_list|(
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|successfulMapAttemptCDFs
parameter_list|)
block|{
name|this
operator|.
name|successfulMapAttemptCDFs
operator|=
name|successfulMapAttemptCDFs
expr_stmt|;
block|}
DECL|method|getFailedMapAttemptCDFs ()
specifier|public
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|getFailedMapAttemptCDFs
parameter_list|()
block|{
return|return
name|failedMapAttemptCDFs
return|;
block|}
DECL|method|setFailedMapAttemptCDFs (ArrayList<LoggedDiscreteCDF> failedMapAttemptCDFs)
name|void
name|setFailedMapAttemptCDFs
parameter_list|(
name|ArrayList
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|failedMapAttemptCDFs
parameter_list|)
block|{
name|this
operator|.
name|failedMapAttemptCDFs
operator|=
name|failedMapAttemptCDFs
expr_stmt|;
block|}
DECL|method|getSuccessfulReduceAttemptCDF ()
specifier|public
name|LoggedDiscreteCDF
name|getSuccessfulReduceAttemptCDF
parameter_list|()
block|{
return|return
name|successfulReduceAttemptCDF
return|;
block|}
DECL|method|setSuccessfulReduceAttemptCDF ( LoggedDiscreteCDF successfulReduceAttemptCDF)
name|void
name|setSuccessfulReduceAttemptCDF
parameter_list|(
name|LoggedDiscreteCDF
name|successfulReduceAttemptCDF
parameter_list|)
block|{
name|this
operator|.
name|successfulReduceAttemptCDF
operator|=
name|successfulReduceAttemptCDF
expr_stmt|;
block|}
DECL|method|getFailedReduceAttemptCDF ()
specifier|public
name|LoggedDiscreteCDF
name|getFailedReduceAttemptCDF
parameter_list|()
block|{
return|return
name|failedReduceAttemptCDF
return|;
block|}
DECL|method|setFailedReduceAttemptCDF (LoggedDiscreteCDF failedReduceAttemptCDF)
name|void
name|setFailedReduceAttemptCDF
parameter_list|(
name|LoggedDiscreteCDF
name|failedReduceAttemptCDF
parameter_list|)
block|{
name|this
operator|.
name|failedReduceAttemptCDF
operator|=
name|failedReduceAttemptCDF
expr_stmt|;
block|}
DECL|method|getMapperTriesToSucceed ()
specifier|public
name|double
index|[]
name|getMapperTriesToSucceed
parameter_list|()
block|{
return|return
name|mapperTriesToSucceed
return|;
block|}
DECL|method|setMapperTriesToSucceed (double[] mapperTriesToSucceed)
name|void
name|setMapperTriesToSucceed
parameter_list|(
name|double
index|[]
name|mapperTriesToSucceed
parameter_list|)
block|{
name|this
operator|.
name|mapperTriesToSucceed
operator|=
name|mapperTriesToSucceed
expr_stmt|;
block|}
DECL|method|getFailedMapperFraction ()
specifier|public
name|double
name|getFailedMapperFraction
parameter_list|()
block|{
return|return
name|failedMapperFraction
return|;
block|}
DECL|method|setFailedMapperFraction (double failedMapperFraction)
name|void
name|setFailedMapperFraction
parameter_list|(
name|double
name|failedMapperFraction
parameter_list|)
block|{
name|this
operator|.
name|failedMapperFraction
operator|=
name|failedMapperFraction
expr_stmt|;
block|}
DECL|method|getRelativeTime ()
specifier|public
name|long
name|getRelativeTime
parameter_list|()
block|{
return|return
name|relativeTime
return|;
block|}
DECL|method|setRelativeTime (long relativeTime)
name|void
name|setRelativeTime
parameter_list|(
name|long
name|relativeTime
parameter_list|)
block|{
name|this
operator|.
name|relativeTime
operator|=
name|relativeTime
expr_stmt|;
block|}
DECL|method|getQueue ()
specifier|public
name|String
name|getQueue
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
DECL|method|setQueue (String queue)
name|void
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
DECL|method|getJobName ()
specifier|public
name|String
name|getJobName
parameter_list|()
block|{
return|return
name|jobName
return|;
block|}
DECL|method|setJobName (String jobName)
name|void
name|setJobName
parameter_list|(
name|String
name|jobName
parameter_list|)
block|{
name|this
operator|.
name|jobName
operator|=
name|jobName
expr_stmt|;
block|}
DECL|method|getClusterMapMB ()
specifier|public
name|int
name|getClusterMapMB
parameter_list|()
block|{
return|return
name|clusterMapMB
return|;
block|}
DECL|method|setClusterMapMB (int clusterMapMB)
name|void
name|setClusterMapMB
parameter_list|(
name|int
name|clusterMapMB
parameter_list|)
block|{
name|this
operator|.
name|clusterMapMB
operator|=
name|clusterMapMB
expr_stmt|;
block|}
DECL|method|getClusterReduceMB ()
specifier|public
name|int
name|getClusterReduceMB
parameter_list|()
block|{
return|return
name|clusterReduceMB
return|;
block|}
DECL|method|setClusterReduceMB (int clusterReduceMB)
name|void
name|setClusterReduceMB
parameter_list|(
name|int
name|clusterReduceMB
parameter_list|)
block|{
name|this
operator|.
name|clusterReduceMB
operator|=
name|clusterReduceMB
expr_stmt|;
block|}
DECL|method|getJobMapMB ()
specifier|public
name|int
name|getJobMapMB
parameter_list|()
block|{
return|return
name|jobMapMB
return|;
block|}
DECL|method|setJobMapMB (int jobMapMB)
name|void
name|setJobMapMB
parameter_list|(
name|int
name|jobMapMB
parameter_list|)
block|{
name|this
operator|.
name|jobMapMB
operator|=
name|jobMapMB
expr_stmt|;
block|}
DECL|method|getJobReduceMB ()
specifier|public
name|int
name|getJobReduceMB
parameter_list|()
block|{
return|return
name|jobReduceMB
return|;
block|}
DECL|method|setJobReduceMB (int jobReduceMB)
name|void
name|setJobReduceMB
parameter_list|(
name|int
name|jobReduceMB
parameter_list|)
block|{
name|this
operator|.
name|jobReduceMB
operator|=
name|jobReduceMB
expr_stmt|;
block|}
DECL|method|compare1 (String c1, String c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|String
name|c1
parameter_list|,
name|String
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
operator|||
operator|!
name|c1
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (long c1, long c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|long
name|c1
parameter_list|,
name|long
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (Pre21JobHistoryConstants.Values c1, Pre21JobHistoryConstants.Values c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|Pre21JobHistoryConstants
operator|.
name|Values
name|c1
parameter_list|,
name|Pre21JobHistoryConstants
operator|.
name|Values
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (JobType c1, JobType c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|JobType
name|c1
parameter_list|,
name|JobType
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (JobPriority c1, JobPriority c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|JobPriority
name|c1
parameter_list|,
name|JobPriority
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (int c1, int c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|int
name|c1
parameter_list|,
name|int
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (double c1, double c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|double
name|c1
parameter_list|,
name|double
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (double[] c1, double[] c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|double
index|[]
name|c1
parameter_list|,
name|double
index|[]
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TreePath
name|recursePath
init|=
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
operator|||
name|c1
operator|.
name|length
operator|!=
name|c2
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
name|recursePath
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c1
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|c1
index|[
name|i
index|]
operator|!=
name|c2
index|[
name|i
index|]
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|,
name|i
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|compare1 (DeepCompare c1, DeepCompare c2, TreePath loc, String eltname, int index)
specifier|private
name|void
name|compare1
parameter_list|(
name|DeepCompare
name|c1
parameter_list|,
name|DeepCompare
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TreePath
name|recursePath
init|=
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
name|recursePath
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|"["
operator|+
name|index
operator|+
literal|"] miscompared"
argument_list|,
name|recursePath
argument_list|)
throw|;
block|}
block|}
name|c1
operator|.
name|deepCompare
argument_list|(
name|c2
argument_list|,
name|recursePath
argument_list|)
expr_stmt|;
block|}
comment|// I'll treat this as an atomic object type
DECL|method|compareStrings (List<String> c1, List<String> c2, TreePath loc, String eltname)
specifier|private
name|void
name|compareStrings
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|c1
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TreePath
name|recursePath
init|=
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
operator|||
operator|!
name|c1
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
name|recursePath
argument_list|)
throw|;
block|}
block|}
DECL|method|compareLoggedTasks (List<LoggedTask> c1, List<LoggedTask> c2, TreePath loc, String eltname)
specifier|private
name|void
name|compareLoggedTasks
parameter_list|(
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|c1
parameter_list|,
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
operator|||
name|c1
operator|.
name|size
argument_list|()
operator|!=
name|c2
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|c1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|deepCompare
argument_list|(
name|c2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compareCDFs (List<LoggedDiscreteCDF> c1, List<LoggedDiscreteCDF> c2, TreePath loc, String eltname)
specifier|private
name|void
name|compareCDFs
parameter_list|(
name|List
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|c1
parameter_list|,
name|List
argument_list|<
name|LoggedDiscreteCDF
argument_list|>
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
operator|||
name|c1
operator|.
name|size
argument_list|()
operator|!=
name|c2
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|c1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|deepCompare
argument_list|(
name|c2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compareJobProperties (Properties prop1, Properties prop2, TreePath loc, String eltname)
specifier|private
name|void
name|compareJobProperties
parameter_list|(
name|Properties
name|prop1
parameter_list|,
name|Properties
name|prop2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|prop1
operator|==
literal|null
operator|&&
name|prop2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|prop1
operator|==
literal|null
operator|||
name|prop2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared [null]"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|prop1
operator|.
name|size
argument_list|()
operator|!=
name|prop2
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared [size]"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|prop1
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|v1
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|v2
init|=
name|prop2
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|==
literal|null
operator|||
name|v2
operator|==
literal|null
operator|||
operator|!
name|v1
operator|.
name|equals
argument_list|(
name|v2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared for value of key : "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|deepCompare (DeepCompare comparand, TreePath loc)
specifier|public
name|void
name|deepCompare
parameter_list|(
name|DeepCompare
name|comparand
parameter_list|,
name|TreePath
name|loc
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
operator|!
operator|(
name|comparand
operator|instanceof
name|LoggedJob
operator|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
literal|"comparand has wrong type"
argument_list|,
name|loc
argument_list|)
throw|;
block|}
name|LoggedJob
name|other
init|=
operator|(
name|LoggedJob
operator|)
name|comparand
decl_stmt|;
name|compare1
argument_list|(
name|jobID
argument_list|,
name|other
operator|.
name|jobID
argument_list|,
name|loc
argument_list|,
literal|"jobID"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|user
argument_list|,
name|other
operator|.
name|user
argument_list|,
name|loc
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|computonsPerMapInputByte
argument_list|,
name|other
operator|.
name|computonsPerMapInputByte
argument_list|,
name|loc
argument_list|,
literal|"computonsPerMapInputByte"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|computonsPerMapOutputByte
argument_list|,
name|other
operator|.
name|computonsPerMapOutputByte
argument_list|,
name|loc
argument_list|,
literal|"computonsPerMapOutputByte"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|computonsPerReduceInputByte
argument_list|,
name|other
operator|.
name|computonsPerReduceInputByte
argument_list|,
name|loc
argument_list|,
literal|"computonsPerReduceInputByte"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|computonsPerReduceOutputByte
argument_list|,
name|other
operator|.
name|computonsPerReduceOutputByte
argument_list|,
name|loc
argument_list|,
literal|"computonsPerReduceOutputByte"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|submitTime
argument_list|,
name|other
operator|.
name|submitTime
argument_list|,
name|loc
argument_list|,
literal|"submitTime"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|launchTime
argument_list|,
name|other
operator|.
name|launchTime
argument_list|,
name|loc
argument_list|,
literal|"launchTime"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|finishTime
argument_list|,
name|other
operator|.
name|finishTime
argument_list|,
name|loc
argument_list|,
literal|"finishTime"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|heapMegabytes
argument_list|,
name|other
operator|.
name|heapMegabytes
argument_list|,
name|loc
argument_list|,
literal|"heapMegabytes"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|totalMaps
argument_list|,
name|other
operator|.
name|totalMaps
argument_list|,
name|loc
argument_list|,
literal|"totalMaps"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|totalReduces
argument_list|,
name|other
operator|.
name|totalReduces
argument_list|,
name|loc
argument_list|,
literal|"totalReduces"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|outcome
argument_list|,
name|other
operator|.
name|outcome
argument_list|,
name|loc
argument_list|,
literal|"outcome"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|jobtype
argument_list|,
name|other
operator|.
name|jobtype
argument_list|,
name|loc
argument_list|,
literal|"jobtype"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|priority
argument_list|,
name|other
operator|.
name|priority
argument_list|,
name|loc
argument_list|,
literal|"priority"
argument_list|)
expr_stmt|;
name|compareStrings
argument_list|(
name|directDependantJobs
argument_list|,
name|other
operator|.
name|directDependantJobs
argument_list|,
name|loc
argument_list|,
literal|"directDependantJobs"
argument_list|)
expr_stmt|;
name|compareLoggedTasks
argument_list|(
name|mapTasks
argument_list|,
name|other
operator|.
name|mapTasks
argument_list|,
name|loc
argument_list|,
literal|"mapTasks"
argument_list|)
expr_stmt|;
name|compareLoggedTasks
argument_list|(
name|reduceTasks
argument_list|,
name|other
operator|.
name|reduceTasks
argument_list|,
name|loc
argument_list|,
literal|"reduceTasks"
argument_list|)
expr_stmt|;
name|compareLoggedTasks
argument_list|(
name|otherTasks
argument_list|,
name|other
operator|.
name|otherTasks
argument_list|,
name|loc
argument_list|,
literal|"otherTasks"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|relativeTime
argument_list|,
name|other
operator|.
name|relativeTime
argument_list|,
name|loc
argument_list|,
literal|"relativeTime"
argument_list|)
expr_stmt|;
name|compareCDFs
argument_list|(
name|successfulMapAttemptCDFs
argument_list|,
name|other
operator|.
name|successfulMapAttemptCDFs
argument_list|,
name|loc
argument_list|,
literal|"successfulMapAttemptCDFs"
argument_list|)
expr_stmt|;
name|compareCDFs
argument_list|(
name|failedMapAttemptCDFs
argument_list|,
name|other
operator|.
name|failedMapAttemptCDFs
argument_list|,
name|loc
argument_list|,
literal|"failedMapAttemptCDFs"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|successfulReduceAttemptCDF
argument_list|,
name|other
operator|.
name|successfulReduceAttemptCDF
argument_list|,
name|loc
argument_list|,
literal|"successfulReduceAttemptCDF"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|failedReduceAttemptCDF
argument_list|,
name|other
operator|.
name|failedReduceAttemptCDF
argument_list|,
name|loc
argument_list|,
literal|"failedReduceAttemptCDF"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|mapperTriesToSucceed
argument_list|,
name|other
operator|.
name|mapperTriesToSucceed
argument_list|,
name|loc
argument_list|,
literal|"mapperTriesToSucceed"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|failedMapperFraction
argument_list|,
name|other
operator|.
name|failedMapperFraction
argument_list|,
name|loc
argument_list|,
literal|"failedMapperFraction"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|queue
argument_list|,
name|other
operator|.
name|queue
argument_list|,
name|loc
argument_list|,
literal|"queue"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|jobName
argument_list|,
name|other
operator|.
name|jobName
argument_list|,
name|loc
argument_list|,
literal|"jobName"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|clusterMapMB
argument_list|,
name|other
operator|.
name|clusterMapMB
argument_list|,
name|loc
argument_list|,
literal|"clusterMapMB"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|clusterReduceMB
argument_list|,
name|other
operator|.
name|clusterReduceMB
argument_list|,
name|loc
argument_list|,
literal|"clusterReduceMB"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|jobMapMB
argument_list|,
name|other
operator|.
name|jobMapMB
argument_list|,
name|loc
argument_list|,
literal|"jobMapMB"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|jobReduceMB
argument_list|,
name|other
operator|.
name|jobReduceMB
argument_list|,
name|loc
argument_list|,
literal|"jobReduceMB"
argument_list|)
expr_stmt|;
comment|// compare the job configuration parameters
name|compareJobProperties
argument_list|(
name|jobProperties
argument_list|,
name|other
operator|.
name|getJobProperties
argument_list|()
argument_list|,
name|loc
argument_list|,
literal|"JobProperties"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

