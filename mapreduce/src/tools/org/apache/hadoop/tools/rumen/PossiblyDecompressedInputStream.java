begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CodecPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_class
DECL|class|PossiblyDecompressedInputStream
class|class
name|PossiblyDecompressedInputStream
extends|extends
name|InputStream
block|{
DECL|field|decompressor
specifier|private
specifier|final
name|Decompressor
name|decompressor
decl_stmt|;
DECL|field|coreInputStream
specifier|private
specifier|final
name|InputStream
name|coreInputStream
decl_stmt|;
DECL|method|PossiblyDecompressedInputStream (Path inputPath, Configuration conf)
specifier|public
name|PossiblyDecompressedInputStream
parameter_list|(
name|Path
name|inputPath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|CompressionCodecFactory
name|codecs
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompressionCodec
name|inputCodec
init|=
name|codecs
operator|.
name|getCodec
argument_list|(
name|inputPath
argument_list|)
decl_stmt|;
name|FileSystem
name|ifs
init|=
name|inputPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fileIn
init|=
name|ifs
operator|.
name|open
argument_list|(
name|inputPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputCodec
operator|==
literal|null
condition|)
block|{
name|decompressor
operator|=
literal|null
expr_stmt|;
name|coreInputStream
operator|=
name|fileIn
expr_stmt|;
block|}
else|else
block|{
name|decompressor
operator|=
name|CodecPool
operator|.
name|getDecompressor
argument_list|(
name|inputCodec
argument_list|)
expr_stmt|;
name|coreInputStream
operator|=
name|inputCodec
operator|.
name|createInputStream
argument_list|(
name|fileIn
argument_list|,
name|decompressor
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|coreInputStream
operator|.
name|read
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|coreInputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// coreInputStream.close() is called before returning of decompressor to the
comment|// pool because coreInputStream.close() could(though currently it doesn't)
comment|// access the decompressor.
name|coreInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|decompressor
operator|!=
literal|null
condition|)
block|{
name|CodecPool
operator|.
name|returnDecompressor
argument_list|(
name|decompressor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

