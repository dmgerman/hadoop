begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_class
DECL|class|CDFPiecewiseLinearRandomGenerator
specifier|public
class|class
name|CDFPiecewiseLinearRandomGenerator
extends|extends
name|CDFRandomGenerator
block|{
comment|/**    * @param cdf    *          builds a CDFRandomValue engine around this    *          {@link LoggedDiscreteCDF}, with a defaultly seeded RNG    */
DECL|method|CDFPiecewiseLinearRandomGenerator (LoggedDiscreteCDF cdf)
specifier|public
name|CDFPiecewiseLinearRandomGenerator
parameter_list|(
name|LoggedDiscreteCDF
name|cdf
parameter_list|)
block|{
name|super
argument_list|(
name|cdf
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param cdf    *          builds a CDFRandomValue engine around this    *          {@link LoggedDiscreteCDF}, with an explicitly seeded RNG    * @param seed    *          the random number generator seed    */
DECL|method|CDFPiecewiseLinearRandomGenerator (LoggedDiscreteCDF cdf, long seed)
specifier|public
name|CDFPiecewiseLinearRandomGenerator
parameter_list|(
name|LoggedDiscreteCDF
name|cdf
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|super
argument_list|(
name|cdf
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
comment|/**    * TODO This code assumes that the empirical minimum resp. maximum is the    * epistomological minimum resp. maximum. This is probably okay for the    * minimum, because that likely represents a task where everything went well,    * but for the maximum we may want to develop a way of extrapolating past the    * maximum.    */
annotation|@
name|Override
DECL|method|valueAt (double probability)
specifier|public
name|long
name|valueAt
parameter_list|(
name|double
name|probability
parameter_list|)
block|{
name|int
name|rangeFloor
init|=
name|floorIndex
argument_list|(
name|probability
argument_list|)
decl_stmt|;
name|double
name|segmentProbMin
init|=
name|getRankingAt
argument_list|(
name|rangeFloor
argument_list|)
decl_stmt|;
name|double
name|segmentProbMax
init|=
name|getRankingAt
argument_list|(
name|rangeFloor
operator|+
literal|1
argument_list|)
decl_stmt|;
name|long
name|segmentMinValue
init|=
name|getDatumAt
argument_list|(
name|rangeFloor
argument_list|)
decl_stmt|;
name|long
name|segmentMaxValue
init|=
name|getDatumAt
argument_list|(
name|rangeFloor
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// If this is zero, this object is based on an ill-formed cdf
name|double
name|segmentProbRange
init|=
name|segmentProbMax
operator|-
name|segmentProbMin
decl_stmt|;
name|long
name|segmentDatumRange
init|=
name|segmentMaxValue
operator|-
name|segmentMinValue
decl_stmt|;
name|long
name|result
init|=
call|(
name|long
call|)
argument_list|(
operator|(
name|probability
operator|-
name|segmentProbMin
operator|)
operator|/
name|segmentProbRange
operator|*
name|segmentDatumRange
argument_list|)
operator|+
name|segmentMinValue
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

