begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  *   */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * {@link Histogram} represents an ordered summary of a sequence of {@code long}  * s which can be queried to produce a discrete approximation of its cumulative  * distribution function  *   */
end_comment

begin_class
DECL|class|Histogram
class|class
name|Histogram
implements|implements
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
block|{
DECL|field|content
specifier|private
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|content
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|totalCount
specifier|private
name|long
name|totalCount
decl_stmt|;
DECL|method|Histogram ()
specifier|public
name|Histogram
parameter_list|()
block|{
name|this
argument_list|(
literal|"(anonymous)"
argument_list|)
expr_stmt|;
block|}
DECL|method|Histogram (String name)
specifier|public
name|Histogram
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|totalCount
operator|=
literal|0L
expr_stmt|;
block|}
DECL|method|dump (PrintStream stream)
specifier|public
name|void
name|dump
parameter_list|(
name|PrintStream
name|stream
parameter_list|)
block|{
name|stream
operator|.
name|print
argument_list|(
literal|"dumping Histogram "
operator|+
name|name
operator|+
literal|":\n"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iter
init|=
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|ent
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|stream
operator|.
name|print
argument_list|(
literal|"val/count pair: "
operator|+
operator|(
name|long
operator|)
name|ent
operator|.
name|getKey
argument_list|()
operator|+
literal|", "
operator|+
operator|(
name|long
operator|)
name|ent
operator|.
name|getValue
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|print
argument_list|(
literal|"*** end *** \n"
argument_list|)
expr_stmt|;
block|}
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|content
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|get (long key)
specifier|public
name|long
name|get
parameter_list|(
name|long
name|key
parameter_list|)
block|{
name|Long
name|result
init|=
name|content
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|null
condition|?
literal|0
else|:
name|result
return|;
block|}
DECL|method|getTotalCount ()
specifier|public
name|long
name|getTotalCount
parameter_list|()
block|{
return|return
name|totalCount
return|;
block|}
DECL|method|enter (long value)
specifier|public
name|void
name|enter
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|Long
name|existingValue
init|=
name|content
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingValue
operator|==
literal|null
condition|)
block|{
name|content
operator|.
name|put
argument_list|(
name|value
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|content
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|existingValue
operator|+
literal|1L
argument_list|)
expr_stmt|;
block|}
operator|++
name|totalCount
expr_stmt|;
block|}
comment|/**    * Produces a discrete approximation of the CDF. The user provides the points    * on the {@code Y} axis he wants, and we give the corresponding points on the    * {@code X} axis, plus the minimum and maximum from the data.    *     * @param scale    *          the denominator applied to every element of buckets. For example,    *          if {@code scale} is {@code 1000}, a {@code buckets} element of 500    *          will specify the median in that output slot.    * @param buckets    *          an array of int, all less than scale and each strictly greater    *          than its predecessor if any. We don't check these requirements.    * @return a {@code long[]}, with two more elements than {@code buckets} has.    *         The first resp. last element is the minimum resp. maximum value    *         that was ever {@code enter}ed. The rest of the elements correspond    *         to the elements of {@code buckets} and carry the first element    *         whose rank is no less than {@code #content elements * scale /    *         bucket}.    *     */
DECL|method|getCDF (int scale, int[] buckets)
specifier|public
name|long
index|[]
name|getCDF
parameter_list|(
name|int
name|scale
parameter_list|,
name|int
index|[]
name|buckets
parameter_list|)
block|{
if|if
condition|(
name|totalCount
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
index|[]
name|result
init|=
operator|new
name|long
index|[
name|buckets
operator|.
name|length
operator|+
literal|2
index|]
decl_stmt|;
comment|// fill in the min and the max
name|result
index|[
literal|0
index|]
operator|=
name|content
operator|.
name|firstEntry
argument_list|()
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|result
index|[
name|buckets
operator|.
name|length
operator|+
literal|1
index|]
operator|=
name|content
operator|.
name|lastEntry
argument_list|()
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iter
init|=
name|content
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|cumulativeCount
init|=
literal|0
decl_stmt|;
name|int
name|bucketCursor
init|=
literal|0
decl_stmt|;
comment|// Loop invariant: the item at buckets[bucketCursor] can still be reached
comment|// from iter, and the number of logged elements no longer available from
comment|// iter is cumulativeCount.
comment|//
comment|// cumulativeCount/totalCount is therefore strictly less than
comment|// buckets[bucketCursor]/scale .
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|long
name|targetCumulativeCount
init|=
name|buckets
index|[
name|bucketCursor
index|]
operator|*
name|totalCount
operator|/
name|scale
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|elt
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|cumulativeCount
operator|+=
name|elt
operator|.
name|getValue
argument_list|()
expr_stmt|;
while|while
condition|(
name|cumulativeCount
operator|>=
name|targetCumulativeCount
condition|)
block|{
name|result
index|[
name|bucketCursor
operator|+
literal|1
index|]
operator|=
name|elt
operator|.
name|getKey
argument_list|()
expr_stmt|;
operator|++
name|bucketCursor
expr_stmt|;
if|if
condition|(
name|bucketCursor
operator|<
name|buckets
operator|.
name|length
condition|)
block|{
name|targetCumulativeCount
operator|=
name|buckets
index|[
name|bucketCursor
index|]
operator|*
name|totalCount
operator|/
name|scale
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|bucketCursor
operator|==
name|buckets
operator|.
name|length
condition|)
block|{
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

