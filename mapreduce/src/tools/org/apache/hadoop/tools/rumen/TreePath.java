begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_comment
comment|/**  * This describes a path from a node to the root. We use it when we compare two  * trees during rumen unit tests. If the trees are not identical, this chain  * will be converted to a string which describes the path from the root to the  * fields that did not compare.  *   */
end_comment

begin_class
DECL|class|TreePath
specifier|public
class|class
name|TreePath
block|{
DECL|field|parent
specifier|final
name|TreePath
name|parent
decl_stmt|;
DECL|field|fieldName
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|index
specifier|final
name|int
name|index
decl_stmt|;
DECL|method|TreePath (TreePath parent, String fieldName)
specifier|public
name|TreePath
parameter_list|(
name|TreePath
name|parent
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|index
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|TreePath (TreePath parent, String fieldName, int index)
specifier|public
name|TreePath
parameter_list|(
name|TreePath
name|parent
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|mySegment
init|=
name|fieldName
operator|+
operator|(
name|index
operator|==
operator|-
literal|1
condition|?
literal|""
else|:
operator|(
literal|"["
operator|+
name|index
operator|+
literal|"]"
operator|)
operator|)
decl_stmt|;
return|return
operator|(
operator|(
name|parent
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|parent
operator|.
name|toString
argument_list|()
operator|+
literal|"-->"
operator|)
operator|+
name|mySegment
return|;
block|}
block|}
end_class

end_unit

