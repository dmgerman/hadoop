begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * {@link AbstractClusterStory} provides a partial implementation of  * {@link ClusterStory} by parsing the topology tree.  */
end_comment

begin_class
DECL|class|AbstractClusterStory
specifier|public
specifier|abstract
class|class
name|AbstractClusterStory
implements|implements
name|ClusterStory
block|{
DECL|field|machineNodes
specifier|protected
name|Set
argument_list|<
name|MachineNode
argument_list|>
name|machineNodes
decl_stmt|;
DECL|field|rackNodes
specifier|protected
name|Set
argument_list|<
name|RackNode
argument_list|>
name|rackNodes
decl_stmt|;
DECL|field|mNodesFlattened
specifier|protected
name|MachineNode
index|[]
name|mNodesFlattened
decl_stmt|;
DECL|field|mNodeMap
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|MachineNode
argument_list|>
name|mNodeMap
decl_stmt|;
DECL|field|rNodeMap
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|RackNode
argument_list|>
name|rNodeMap
decl_stmt|;
DECL|field|maximumDistance
specifier|protected
name|int
name|maximumDistance
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|getMachines ()
specifier|public
name|Set
argument_list|<
name|MachineNode
argument_list|>
name|getMachines
parameter_list|()
block|{
name|parseTopologyTree
argument_list|()
expr_stmt|;
return|return
name|machineNodes
return|;
block|}
annotation|@
name|Override
DECL|method|getRacks ()
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|RackNode
argument_list|>
name|getRacks
parameter_list|()
block|{
name|parseTopologyTree
argument_list|()
expr_stmt|;
return|return
name|rackNodes
return|;
block|}
annotation|@
name|Override
DECL|method|getRandomMachines (int expected, Random random)
specifier|public
specifier|synchronized
name|MachineNode
index|[]
name|getRandomMachines
parameter_list|(
name|int
name|expected
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|MachineNode
index|[
literal|0
index|]
return|;
block|}
name|parseTopologyTree
argument_list|()
expr_stmt|;
name|int
name|total
init|=
name|machineNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|select
init|=
name|Math
operator|.
name|min
argument_list|(
name|expected
argument_list|,
name|total
argument_list|)
decl_stmt|;
if|if
condition|(
name|mNodesFlattened
operator|==
literal|null
condition|)
block|{
name|mNodesFlattened
operator|=
name|machineNodes
operator|.
name|toArray
argument_list|(
operator|new
name|MachineNode
index|[
name|total
index|]
argument_list|)
expr_stmt|;
block|}
name|MachineNode
index|[]
name|retval
init|=
operator|new
name|MachineNode
index|[
name|select
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|!=
name|select
operator|)
operator|&&
operator|(
name|total
operator|!=
name|i
operator|+
name|select
operator|)
condition|)
block|{
name|int
name|index
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|total
operator|-
name|i
argument_list|)
decl_stmt|;
name|MachineNode
name|tmp
init|=
name|mNodesFlattened
index|[
name|index
index|]
decl_stmt|;
name|mNodesFlattened
index|[
name|index
index|]
operator|=
name|mNodesFlattened
index|[
name|total
operator|-
name|i
operator|-
literal|1
index|]
expr_stmt|;
name|mNodesFlattened
index|[
name|total
operator|-
name|i
operator|-
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|select
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|mNodesFlattened
argument_list|,
name|total
operator|-
name|i
argument_list|,
name|retval
argument_list|,
literal|0
argument_list|,
name|select
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|mNodesFlattened
argument_list|,
literal|0
argument_list|,
name|retval
argument_list|,
literal|0
argument_list|,
name|select
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
DECL|method|buildMachineNodeMap ()
specifier|protected
specifier|synchronized
name|void
name|buildMachineNodeMap
parameter_list|()
block|{
if|if
condition|(
name|mNodeMap
operator|==
literal|null
condition|)
block|{
name|mNodeMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MachineNode
argument_list|>
argument_list|(
name|machineNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MachineNode
name|mn
range|:
name|machineNodes
control|)
block|{
name|mNodeMap
operator|.
name|put
argument_list|(
name|mn
operator|.
name|getName
argument_list|()
argument_list|,
name|mn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getMachineByName (String name)
specifier|public
name|MachineNode
name|getMachineByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|buildMachineNodeMap
argument_list|()
expr_stmt|;
return|return
name|mNodeMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|distance (Node a, Node b)
specifier|public
name|int
name|distance
parameter_list|(
name|Node
name|a
parameter_list|,
name|Node
name|b
parameter_list|)
block|{
name|int
name|lvl_a
init|=
name|a
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|int
name|lvl_b
init|=
name|b
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|int
name|retval
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lvl_a
operator|>
name|lvl_b
condition|)
block|{
name|retval
operator|=
name|lvl_a
operator|-
name|lvl_b
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retval
condition|;
operator|++
name|i
control|)
block|{
name|a
operator|=
name|a
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lvl_a
operator|<
name|lvl_b
condition|)
block|{
name|retval
operator|=
name|lvl_b
operator|-
name|lvl_a
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retval
condition|;
operator|++
name|i
control|)
block|{
name|b
operator|=
name|b
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
while|while
condition|(
name|a
operator|!=
name|b
condition|)
block|{
name|a
operator|=
name|a
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|b
operator|=
name|b
operator|.
name|getParent
argument_list|()
expr_stmt|;
operator|++
name|retval
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
DECL|method|buildRackNodeMap ()
specifier|protected
specifier|synchronized
name|void
name|buildRackNodeMap
parameter_list|()
block|{
if|if
condition|(
name|rNodeMap
operator|==
literal|null
condition|)
block|{
name|rNodeMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RackNode
argument_list|>
argument_list|(
name|rackNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RackNode
name|rn
range|:
name|rackNodes
control|)
block|{
name|rNodeMap
operator|.
name|put
argument_list|(
name|rn
operator|.
name|getName
argument_list|()
argument_list|,
name|rn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getRackByName (String name)
specifier|public
name|RackNode
name|getRackByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|buildRackNodeMap
argument_list|()
expr_stmt|;
return|return
name|rNodeMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMaximumDistance ()
specifier|public
name|int
name|getMaximumDistance
parameter_list|()
block|{
name|parseTopologyTree
argument_list|()
expr_stmt|;
return|return
name|maximumDistance
return|;
block|}
DECL|method|parseTopologyTree ()
specifier|protected
specifier|synchronized
name|void
name|parseTopologyTree
parameter_list|()
block|{
if|if
condition|(
name|machineNodes
operator|==
literal|null
condition|)
block|{
name|Node
name|root
init|=
name|getClusterTopology
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|MachineNode
argument_list|>
name|mNodes
init|=
operator|new
name|TreeSet
argument_list|<
name|MachineNode
argument_list|>
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|RackNode
argument_list|>
name|rNodes
init|=
operator|new
name|TreeSet
argument_list|<
name|RackNode
argument_list|>
argument_list|()
decl_stmt|;
comment|// dfs search of the tree.
name|Deque
argument_list|<
name|Node
argument_list|>
name|unvisited
init|=
operator|new
name|ArrayDeque
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|Deque
argument_list|<
name|Integer
argument_list|>
name|distUnvisited
init|=
operator|new
name|ArrayDeque
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|unvisited
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|distUnvisited
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|n
init|=
name|unvisited
operator|.
name|poll
argument_list|()
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|unvisited
operator|.
name|poll
argument_list|()
control|)
block|{
name|int
name|distance
init|=
name|distUnvisited
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|instanceof
name|RackNode
condition|)
block|{
name|rNodes
operator|.
name|add
argument_list|(
operator|(
name|RackNode
operator|)
name|n
argument_list|)
expr_stmt|;
name|mNodes
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|RackNode
operator|)
name|n
operator|)
operator|.
name|getMachinesInRack
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|distance
operator|+
literal|1
operator|>
name|maximumDistance
condition|)
block|{
name|maximumDistance
operator|=
name|distance
operator|+
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|MachineNode
condition|)
block|{
name|mNodes
operator|.
name|add
argument_list|(
operator|(
name|MachineNode
operator|)
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|distance
operator|>
name|maximumDistance
condition|)
block|{
name|maximumDistance
operator|=
name|distance
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Node
name|child
range|:
name|n
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|unvisited
operator|.
name|addFirst
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|distUnvisited
operator|.
name|addFirst
argument_list|(
name|distance
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|machineNodes
operator|=
name|Collections
operator|.
name|unmodifiableSortedSet
argument_list|(
name|mNodes
argument_list|)
expr_stmt|;
name|rackNodes
operator|=
name|Collections
operator|.
name|unmodifiableSortedSet
argument_list|(
name|rNodes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

