begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|HistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobInfoChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobInitedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobPriorityChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobStatusChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobSubmittedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_class
DECL|class|Job20LineHistoryEventEmitter
specifier|public
class|class
name|Job20LineHistoryEventEmitter
extends|extends
name|HistoryEventEmitter
block|{
DECL|field|nonFinals
specifier|static
name|List
argument_list|<
name|SingleEventEmitter
argument_list|>
name|nonFinals
init|=
operator|new
name|LinkedList
argument_list|<
name|SingleEventEmitter
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|finals
specifier|static
name|List
argument_list|<
name|SingleEventEmitter
argument_list|>
name|finals
init|=
operator|new
name|LinkedList
argument_list|<
name|SingleEventEmitter
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|originalSubmitTime
name|Long
name|originalSubmitTime
init|=
literal|null
decl_stmt|;
static|static
block|{
name|nonFinals
operator|.
name|add
argument_list|(
operator|new
name|JobSubmittedEventEmitter
argument_list|()
argument_list|)
expr_stmt|;
name|nonFinals
operator|.
name|add
argument_list|(
operator|new
name|JobPriorityChangeEventEmitter
argument_list|()
argument_list|)
expr_stmt|;
name|nonFinals
operator|.
name|add
argument_list|(
operator|new
name|JobStatusChangedEventEmitter
argument_list|()
argument_list|)
expr_stmt|;
name|nonFinals
operator|.
name|add
argument_list|(
operator|new
name|JobInitedEventEmitter
argument_list|()
argument_list|)
expr_stmt|;
name|nonFinals
operator|.
name|add
argument_list|(
operator|new
name|JobInfoChangeEventEmitter
argument_list|()
argument_list|)
expr_stmt|;
name|finals
operator|.
name|add
argument_list|(
operator|new
name|JobUnsuccessfulCompletionEventEmitter
argument_list|()
argument_list|)
expr_stmt|;
name|finals
operator|.
name|add
argument_list|(
operator|new
name|JobFinishedEventEmitter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Job20LineHistoryEventEmitter ()
name|Job20LineHistoryEventEmitter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|class|JobSubmittedEventEmitter
specifier|static
specifier|private
class|class
name|JobSubmittedEventEmitter
extends|extends
name|SingleEventEmitter
block|{
DECL|method|maybeEmitEvent (ParsedLine line, String jobIDName, HistoryEventEmitter thatg)
name|HistoryEvent
name|maybeEmitEvent
parameter_list|(
name|ParsedLine
name|line
parameter_list|,
name|String
name|jobIDName
parameter_list|,
name|HistoryEventEmitter
name|thatg
parameter_list|)
block|{
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobIDName
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobIDName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|submitTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"SUBMIT_TIME"
argument_list|)
decl_stmt|;
name|String
name|jobConf
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOBCONF"
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|line
operator|.
name|get
argument_list|(
literal|"USER"
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
literal|"nulluser"
expr_stmt|;
block|}
name|String
name|jobName
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOBNAME"
argument_list|)
decl_stmt|;
name|String
name|jobQueueName
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOB_QUEUE"
argument_list|)
decl_stmt|;
comment|// could be null
if|if
condition|(
name|submitTime
operator|!=
literal|null
condition|)
block|{
name|Job20LineHistoryEventEmitter
name|that
init|=
operator|(
name|Job20LineHistoryEventEmitter
operator|)
name|thatg
decl_stmt|;
name|that
operator|.
name|originalSubmitTime
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|submitTime
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
name|jobACLs
init|=
operator|new
name|HashMap
argument_list|<
name|JobACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
return|return
operator|new
name|JobSubmittedEvent
argument_list|(
name|jobID
argument_list|,
name|jobName
argument_list|,
name|user
argument_list|,
name|that
operator|.
name|originalSubmitTime
argument_list|,
name|jobConf
argument_list|,
name|jobACLs
argument_list|,
name|jobQueueName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|JobPriorityChangeEventEmitter
specifier|static
specifier|private
class|class
name|JobPriorityChangeEventEmitter
extends|extends
name|SingleEventEmitter
block|{
DECL|method|maybeEmitEvent (ParsedLine line, String jobIDName, HistoryEventEmitter thatg)
name|HistoryEvent
name|maybeEmitEvent
parameter_list|(
name|ParsedLine
name|line
parameter_list|,
name|String
name|jobIDName
parameter_list|,
name|HistoryEventEmitter
name|thatg
parameter_list|)
block|{
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobIDName
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobIDName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|priority
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOB_PRIORITY"
argument_list|)
decl_stmt|;
if|if
condition|(
name|priority
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JobPriorityChangeEvent
argument_list|(
name|jobID
argument_list|,
name|JobPriority
operator|.
name|valueOf
argument_list|(
name|priority
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|JobInitedEventEmitter
specifier|static
specifier|private
class|class
name|JobInitedEventEmitter
extends|extends
name|SingleEventEmitter
block|{
DECL|method|maybeEmitEvent (ParsedLine line, String jobIDName, HistoryEventEmitter thatg)
name|HistoryEvent
name|maybeEmitEvent
parameter_list|(
name|ParsedLine
name|line
parameter_list|,
name|String
name|jobIDName
parameter_list|,
name|HistoryEventEmitter
name|thatg
parameter_list|)
block|{
if|if
condition|(
name|jobIDName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobIDName
argument_list|)
decl_stmt|;
name|String
name|launchTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"LAUNCH_TIME"
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOB_STATUS"
argument_list|)
decl_stmt|;
name|String
name|totalMaps
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TOTAL_MAPS"
argument_list|)
decl_stmt|;
name|String
name|totalReduces
init|=
name|line
operator|.
name|get
argument_list|(
literal|"TOTAL_REDUCES"
argument_list|)
decl_stmt|;
if|if
condition|(
name|launchTime
operator|!=
literal|null
operator|&&
name|totalMaps
operator|!=
literal|null
operator|&&
name|totalReduces
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JobInitedEvent
argument_list|(
name|jobID
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|launchTime
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|totalMaps
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|totalReduces
argument_list|)
argument_list|,
name|status
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|JobStatusChangedEventEmitter
specifier|static
specifier|private
class|class
name|JobStatusChangedEventEmitter
extends|extends
name|SingleEventEmitter
block|{
DECL|method|maybeEmitEvent (ParsedLine line, String jobIDName, HistoryEventEmitter thatg)
name|HistoryEvent
name|maybeEmitEvent
parameter_list|(
name|ParsedLine
name|line
parameter_list|,
name|String
name|jobIDName
parameter_list|,
name|HistoryEventEmitter
name|thatg
parameter_list|)
block|{
if|if
condition|(
name|jobIDName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobIDName
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOB_STATUS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JobStatusChangedEvent
argument_list|(
name|jobID
argument_list|,
name|status
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|JobInfoChangeEventEmitter
specifier|static
specifier|private
class|class
name|JobInfoChangeEventEmitter
extends|extends
name|SingleEventEmitter
block|{
DECL|method|maybeEmitEvent (ParsedLine line, String jobIDName, HistoryEventEmitter thatg)
name|HistoryEvent
name|maybeEmitEvent
parameter_list|(
name|ParsedLine
name|line
parameter_list|,
name|String
name|jobIDName
parameter_list|,
name|HistoryEventEmitter
name|thatg
parameter_list|)
block|{
if|if
condition|(
name|jobIDName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobIDName
argument_list|)
decl_stmt|;
name|String
name|launchTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"LAUNCH_TIME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|launchTime
operator|!=
literal|null
condition|)
block|{
name|Job20LineHistoryEventEmitter
name|that
init|=
operator|(
name|Job20LineHistoryEventEmitter
operator|)
name|thatg
decl_stmt|;
return|return
operator|new
name|JobInfoChangeEvent
argument_list|(
name|jobID
argument_list|,
name|that
operator|.
name|originalSubmitTime
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|launchTime
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|JobUnsuccessfulCompletionEventEmitter
specifier|static
specifier|private
class|class
name|JobUnsuccessfulCompletionEventEmitter
extends|extends
name|SingleEventEmitter
block|{
DECL|method|maybeEmitEvent (ParsedLine line, String jobIDName, HistoryEventEmitter thatg)
name|HistoryEvent
name|maybeEmitEvent
parameter_list|(
name|ParsedLine
name|line
parameter_list|,
name|String
name|jobIDName
parameter_list|,
name|HistoryEventEmitter
name|thatg
parameter_list|)
block|{
if|if
condition|(
name|jobIDName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobIDName
argument_list|)
decl_stmt|;
name|String
name|finishTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FINISH_TIME"
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOB_STATUS"
argument_list|)
decl_stmt|;
name|String
name|finishedMaps
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FINISHED_MAPS"
argument_list|)
decl_stmt|;
name|String
name|finishedReduces
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FINISHED_REDUCES"
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"success"
argument_list|)
operator|&&
name|finishTime
operator|!=
literal|null
operator|&&
name|finishedMaps
operator|!=
literal|null
operator|&&
name|finishedReduces
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JobUnsuccessfulCompletionEvent
argument_list|(
name|jobID
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|finishTime
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|finishedMaps
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|finishedReduces
argument_list|)
argument_list|,
name|status
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|JobFinishedEventEmitter
specifier|static
specifier|private
class|class
name|JobFinishedEventEmitter
extends|extends
name|SingleEventEmitter
block|{
DECL|method|maybeEmitEvent (ParsedLine line, String jobIDName, HistoryEventEmitter thatg)
name|HistoryEvent
name|maybeEmitEvent
parameter_list|(
name|ParsedLine
name|line
parameter_list|,
name|String
name|jobIDName
parameter_list|,
name|HistoryEventEmitter
name|thatg
parameter_list|)
block|{
if|if
condition|(
name|jobIDName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JobID
name|jobID
init|=
name|JobID
operator|.
name|forName
argument_list|(
name|jobIDName
argument_list|)
decl_stmt|;
name|String
name|finishTime
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FINISH_TIME"
argument_list|)
decl_stmt|;
name|String
name|status
init|=
name|line
operator|.
name|get
argument_list|(
literal|"JOB_STATUS"
argument_list|)
decl_stmt|;
name|String
name|finishedMaps
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FINISHED_MAPS"
argument_list|)
decl_stmt|;
name|String
name|finishedReduces
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FINISHED_REDUCES"
argument_list|)
decl_stmt|;
name|String
name|failedMaps
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FAILED_MAPS"
argument_list|)
decl_stmt|;
name|String
name|failedReduces
init|=
name|line
operator|.
name|get
argument_list|(
literal|"FAILED_REDUCES"
argument_list|)
decl_stmt|;
name|String
name|counters
init|=
name|line
operator|.
name|get
argument_list|(
literal|"COUNTERS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"success"
argument_list|)
operator|&&
name|finishTime
operator|!=
literal|null
operator|&&
name|finishedMaps
operator|!=
literal|null
operator|&&
name|finishedReduces
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JobFinishedEvent
argument_list|(
name|jobID
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|finishTime
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|finishedMaps
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|finishedReduces
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|failedMaps
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|failedReduces
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|maybeParseCounters
argument_list|(
name|counters
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|finalSEEs ()
name|List
argument_list|<
name|SingleEventEmitter
argument_list|>
name|finalSEEs
parameter_list|()
block|{
return|return
name|finals
return|;
block|}
annotation|@
name|Override
DECL|method|nonFinalSEEs ()
name|List
argument_list|<
name|SingleEventEmitter
argument_list|>
name|nonFinalSEEs
parameter_list|()
block|{
return|return
name|nonFinals
return|;
block|}
block|}
end_class

end_unit

