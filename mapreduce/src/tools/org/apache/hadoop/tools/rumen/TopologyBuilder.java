begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|HistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskAttemptUnsuccessfulCompletionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|TaskStartedEvent
import|;
end_import

begin_comment
comment|/**  * Building the cluster topology.  */
end_comment

begin_class
DECL|class|TopologyBuilder
specifier|public
class|class
name|TopologyBuilder
block|{
DECL|field|allHosts
specifier|private
name|Set
argument_list|<
name|ParsedHost
argument_list|>
name|allHosts
init|=
operator|new
name|HashSet
argument_list|<
name|ParsedHost
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Process one {@link HistoryEvent}    *     * @param event    *          The {@link HistoryEvent} to be processed.    */
DECL|method|process (HistoryEvent event)
specifier|public
name|void
name|process
parameter_list|(
name|HistoryEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptFinishedEvent
condition|)
block|{
name|processTaskAttemptFinishedEvent
argument_list|(
operator|(
name|TaskAttemptFinishedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskAttemptUnsuccessfulCompletionEvent
condition|)
block|{
name|processTaskAttemptUnsuccessfulCompletionEvent
argument_list|(
operator|(
name|TaskAttemptUnsuccessfulCompletionEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TaskStartedEvent
condition|)
block|{
name|processTaskStartedEvent
argument_list|(
operator|(
name|TaskStartedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
comment|// I do NOT expect these if statements to be exhaustive.
block|}
comment|/**    * Process a collection of JobConf {@link Properties}. We do not restrict it    * to be called once.    *     * @param conf    *          The job conf properties to be added.    */
DECL|method|process (Properties conf)
specifier|public
name|void
name|process
parameter_list|(
name|Properties
name|conf
parameter_list|)
block|{
comment|// no code
block|}
comment|/**    * Request the builder to build the final object. Once called, the    * {@link TopologyBuilder} would accept no more events or job-conf properties.    *     * @return Parsed {@link LoggedNetworkTopology} object.    */
DECL|method|build ()
specifier|public
name|LoggedNetworkTopology
name|build
parameter_list|()
block|{
return|return
operator|new
name|LoggedNetworkTopology
argument_list|(
name|allHosts
argument_list|)
return|;
block|}
DECL|method|processTaskStartedEvent (TaskStartedEvent event)
specifier|private
name|void
name|processTaskStartedEvent
parameter_list|(
name|TaskStartedEvent
name|event
parameter_list|)
block|{
name|preferredLocationForSplits
argument_list|(
name|event
operator|.
name|getSplitLocations
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processTaskAttemptUnsuccessfulCompletionEvent ( TaskAttemptUnsuccessfulCompletionEvent event)
specifier|private
name|void
name|processTaskAttemptUnsuccessfulCompletionEvent
parameter_list|(
name|TaskAttemptUnsuccessfulCompletionEvent
name|event
parameter_list|)
block|{
name|recordParsedHost
argument_list|(
name|event
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processTaskAttemptFinishedEvent (TaskAttemptFinishedEvent event)
specifier|private
name|void
name|processTaskAttemptFinishedEvent
parameter_list|(
name|TaskAttemptFinishedEvent
name|event
parameter_list|)
block|{
name|recordParsedHost
argument_list|(
name|event
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|recordParsedHost (String hostName)
specifier|private
name|void
name|recordParsedHost
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|ParsedHost
name|result
init|=
name|ParsedHost
operator|.
name|parse
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|allHosts
operator|.
name|contains
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|allHosts
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|preferredLocationForSplits (String splits)
specifier|private
name|void
name|preferredLocationForSplits
parameter_list|(
name|String
name|splits
parameter_list|)
block|{
if|if
condition|(
name|splits
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|splits
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|nextSplit
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|recordParsedHost
argument_list|(
name|nextSplit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

