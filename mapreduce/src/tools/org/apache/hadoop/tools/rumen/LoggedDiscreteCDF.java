begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A {@link LoggedDiscreteCDF} is a discrete approximation of a cumulative  * distribution function, with this class set up to meet the requirements of the  * Jackson JSON parser/generator.  *   * All of the public methods are simply accessors for the instance variables we  * want to write out in the JSON files.  *   */
end_comment

begin_class
DECL|class|LoggedDiscreteCDF
specifier|public
class|class
name|LoggedDiscreteCDF
implements|implements
name|DeepCompare
block|{
comment|/**    * The number of values this CDF is built on    */
DECL|field|numberValues
name|long
name|numberValues
init|=
operator|-
literal|1L
decl_stmt|;
comment|/**    * The least {@code X} value    */
DECL|field|minimum
name|long
name|minimum
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
comment|/**    * The coordinates of the bulk of the CDF    */
DECL|field|rankings
name|List
argument_list|<
name|LoggedSingleRelativeRanking
argument_list|>
name|rankings
init|=
operator|new
name|ArrayList
argument_list|<
name|LoggedSingleRelativeRanking
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The greatest {@code X} value    */
DECL|field|maximum
name|long
name|maximum
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|method|setCDF (Histogram data, int[] steps, int modulus)
name|void
name|setCDF
parameter_list|(
name|Histogram
name|data
parameter_list|,
name|int
index|[]
name|steps
parameter_list|,
name|int
name|modulus
parameter_list|)
block|{
name|numberValues
operator|=
name|data
operator|.
name|getTotalCount
argument_list|()
expr_stmt|;
name|long
index|[]
name|CDF
init|=
name|data
operator|.
name|getCDF
argument_list|(
name|modulus
argument_list|,
name|steps
argument_list|)
decl_stmt|;
if|if
condition|(
name|CDF
operator|!=
literal|null
condition|)
block|{
name|minimum
operator|=
name|CDF
index|[
literal|0
index|]
expr_stmt|;
name|maximum
operator|=
name|CDF
index|[
name|CDF
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
name|rankings
operator|=
operator|new
name|ArrayList
argument_list|<
name|LoggedSingleRelativeRanking
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|CDF
operator|.
name|length
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|LoggedSingleRelativeRanking
name|srr
init|=
operator|new
name|LoggedSingleRelativeRanking
argument_list|()
decl_stmt|;
name|srr
operator|.
name|setRelativeRanking
argument_list|(
operator|(
operator|(
name|double
operator|)
name|steps
index|[
name|i
operator|-
literal|1
index|]
operator|)
operator|/
name|modulus
argument_list|)
expr_stmt|;
name|srr
operator|.
name|setDatum
argument_list|(
name|CDF
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|rankings
operator|.
name|add
argument_list|(
name|srr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getMinimum ()
specifier|public
name|long
name|getMinimum
parameter_list|()
block|{
return|return
name|minimum
return|;
block|}
DECL|method|setMinimum (long minimum)
name|void
name|setMinimum
parameter_list|(
name|long
name|minimum
parameter_list|)
block|{
name|this
operator|.
name|minimum
operator|=
name|minimum
expr_stmt|;
block|}
DECL|method|getRankings ()
specifier|public
name|List
argument_list|<
name|LoggedSingleRelativeRanking
argument_list|>
name|getRankings
parameter_list|()
block|{
return|return
name|rankings
return|;
block|}
DECL|method|setRankings (List<LoggedSingleRelativeRanking> rankings)
name|void
name|setRankings
parameter_list|(
name|List
argument_list|<
name|LoggedSingleRelativeRanking
argument_list|>
name|rankings
parameter_list|)
block|{
name|this
operator|.
name|rankings
operator|=
name|rankings
expr_stmt|;
block|}
DECL|method|getMaximum ()
specifier|public
name|long
name|getMaximum
parameter_list|()
block|{
return|return
name|maximum
return|;
block|}
DECL|method|setMaximum (long maximum)
name|void
name|setMaximum
parameter_list|(
name|long
name|maximum
parameter_list|)
block|{
name|this
operator|.
name|maximum
operator|=
name|maximum
expr_stmt|;
block|}
DECL|method|getNumberValues ()
specifier|public
name|long
name|getNumberValues
parameter_list|()
block|{
return|return
name|numberValues
return|;
block|}
DECL|method|setNumberValues (long numberValues)
name|void
name|setNumberValues
parameter_list|(
name|long
name|numberValues
parameter_list|)
block|{
name|this
operator|.
name|numberValues
operator|=
name|numberValues
expr_stmt|;
block|}
DECL|method|compare1 (long c1, long c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|long
name|c1
parameter_list|,
name|long
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (List<LoggedSingleRelativeRanking> c1, List<LoggedSingleRelativeRanking> c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|List
argument_list|<
name|LoggedSingleRelativeRanking
argument_list|>
name|c1
parameter_list|,
name|List
argument_list|<
name|LoggedSingleRelativeRanking
argument_list|>
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
operator|||
name|c1
operator|.
name|size
argument_list|()
operator|!=
name|c2
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|c1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|deepCompare
argument_list|(
name|c2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deepCompare (DeepCompare comparand, TreePath loc)
specifier|public
name|void
name|deepCompare
parameter_list|(
name|DeepCompare
name|comparand
parameter_list|,
name|TreePath
name|loc
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
operator|!
operator|(
name|comparand
operator|instanceof
name|LoggedDiscreteCDF
operator|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
literal|"comparand has wrong type"
argument_list|,
name|loc
argument_list|)
throw|;
block|}
name|LoggedDiscreteCDF
name|other
init|=
operator|(
name|LoggedDiscreteCDF
operator|)
name|comparand
decl_stmt|;
name|compare1
argument_list|(
name|numberValues
argument_list|,
name|other
operator|.
name|numberValues
argument_list|,
name|loc
argument_list|,
literal|"numberValues"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|minimum
argument_list|,
name|other
operator|.
name|minimum
argument_list|,
name|loc
argument_list|,
literal|"minimum"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|maximum
argument_list|,
name|other
operator|.
name|maximum
argument_list|,
name|loc
argument_list|,
literal|"maximum"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|rankings
argument_list|,
name|other
operator|.
name|rankings
argument_list|,
name|loc
argument_list|,
literal|"rankings"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

