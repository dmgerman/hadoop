begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * A simple wrapper class to make any input stream "rewindable". It could be  * made more memory efficient by grow the internal buffer adaptively.  */
end_comment

begin_class
DECL|class|RewindableInputStream
specifier|public
class|class
name|RewindableInputStream
extends|extends
name|InputStream
block|{
DECL|field|input
specifier|private
name|InputStream
name|input
decl_stmt|;
comment|/**    * Constructor.    *     * @param input    */
DECL|method|RewindableInputStream (InputStream input)
specifier|public
name|RewindableInputStream
parameter_list|(
name|InputStream
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor    *     * @param input    *          input stream.    * @param maxBytesToRemember    *          Maximum number of bytes we need to remember at the beginning of    *          the stream. If {@link #rewind()} is called after so many bytes are    *          read from the stream, {@link #rewind()} would fail.    */
DECL|method|RewindableInputStream (InputStream input, int maxBytesToRemember)
specifier|public
name|RewindableInputStream
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|int
name|maxBytesToRemember
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|input
argument_list|,
name|maxBytesToRemember
argument_list|)
expr_stmt|;
name|this
operator|.
name|input
operator|.
name|mark
argument_list|(
name|maxBytesToRemember
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|input
operator|.
name|read
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|rewind ()
specifier|public
name|InputStream
name|rewind
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rewind the stream"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

