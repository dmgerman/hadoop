begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * Captures the resource usage metrics.  */
end_comment

begin_class
DECL|class|ResourceUsageMetrics
specifier|public
class|class
name|ResourceUsageMetrics
implements|implements
name|Writable
implements|,
name|DeepCompare
block|{
DECL|field|cumulativeCpuUsage
specifier|private
name|long
name|cumulativeCpuUsage
decl_stmt|;
DECL|field|virtualMemoryUsage
specifier|private
name|long
name|virtualMemoryUsage
decl_stmt|;
DECL|field|physicalMemoryUsage
specifier|private
name|long
name|physicalMemoryUsage
decl_stmt|;
DECL|field|heapUsage
specifier|private
name|long
name|heapUsage
decl_stmt|;
DECL|method|ResourceUsageMetrics ()
specifier|public
name|ResourceUsageMetrics
parameter_list|()
block|{   }
comment|/**    * Get the cumulative CPU usage.    */
DECL|method|getCumulativeCpuUsage ()
specifier|public
name|long
name|getCumulativeCpuUsage
parameter_list|()
block|{
return|return
name|cumulativeCpuUsage
return|;
block|}
comment|/**    * Set the cumulative CPU usage.    */
DECL|method|setCumulativeCpuUsage (long usage)
specifier|public
name|void
name|setCumulativeCpuUsage
parameter_list|(
name|long
name|usage
parameter_list|)
block|{
name|cumulativeCpuUsage
operator|=
name|usage
expr_stmt|;
block|}
comment|/**    * Get the virtual memory usage.    */
DECL|method|getVirtualMemoryUsage ()
specifier|public
name|long
name|getVirtualMemoryUsage
parameter_list|()
block|{
return|return
name|virtualMemoryUsage
return|;
block|}
comment|/**    * Set the virtual memory usage.    */
DECL|method|setVirtualMemoryUsage (long usage)
specifier|public
name|void
name|setVirtualMemoryUsage
parameter_list|(
name|long
name|usage
parameter_list|)
block|{
name|virtualMemoryUsage
operator|=
name|usage
expr_stmt|;
block|}
comment|/**    * Get the physical memory usage.    */
DECL|method|getPhysicalMemoryUsage ()
specifier|public
name|long
name|getPhysicalMemoryUsage
parameter_list|()
block|{
return|return
name|physicalMemoryUsage
return|;
block|}
comment|/**    * Set the physical memory usage.    */
DECL|method|setPhysicalMemoryUsage (long usage)
specifier|public
name|void
name|setPhysicalMemoryUsage
parameter_list|(
name|long
name|usage
parameter_list|)
block|{
name|physicalMemoryUsage
operator|=
name|usage
expr_stmt|;
block|}
comment|/**    * Get the total heap usage.    */
DECL|method|getHeapUsage ()
specifier|public
name|long
name|getHeapUsage
parameter_list|()
block|{
return|return
name|heapUsage
return|;
block|}
comment|/**    * Set the total heap usage.    */
DECL|method|setHeapUsage (long usage)
specifier|public
name|void
name|setHeapUsage
parameter_list|(
name|long
name|usage
parameter_list|)
block|{
name|heapUsage
operator|=
name|usage
expr_stmt|;
block|}
comment|/**    * Returns the size of the serialized data    */
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
name|size
operator|+=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|cumulativeCpuUsage
argument_list|)
expr_stmt|;
comment|// long #1
name|size
operator|+=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|virtualMemoryUsage
argument_list|)
expr_stmt|;
comment|// long #2
name|size
operator|+=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|physicalMemoryUsage
argument_list|)
expr_stmt|;
comment|// long #3
name|size
operator|+=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|heapUsage
argument_list|)
expr_stmt|;
comment|// long #4
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|cumulativeCpuUsage
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// long #1
name|virtualMemoryUsage
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// long #2
name|physicalMemoryUsage
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// long #3
name|heapUsage
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// long #4
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO Write resources version no too
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|cumulativeCpuUsage
argument_list|)
expr_stmt|;
comment|// long #1
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|virtualMemoryUsage
argument_list|)
expr_stmt|;
comment|// long #2
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|physicalMemoryUsage
argument_list|)
expr_stmt|;
comment|// long #3
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|heapUsage
argument_list|)
expr_stmt|;
comment|// long #4
block|}
DECL|method|compareMetric (long m1, long m2, TreePath loc)
specifier|private
specifier|static
name|void
name|compareMetric
parameter_list|(
name|long
name|m1
parameter_list|,
name|long
name|m2
parameter_list|,
name|TreePath
name|loc
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|m1
operator|!=
name|m2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
literal|"Value miscompared:"
operator|+
name|loc
operator|.
name|toString
argument_list|()
argument_list|,
name|loc
argument_list|)
throw|;
block|}
block|}
DECL|method|compareSize (ResourceUsageMetrics m1, ResourceUsageMetrics m2, TreePath loc)
specifier|private
specifier|static
name|void
name|compareSize
parameter_list|(
name|ResourceUsageMetrics
name|m1
parameter_list|,
name|ResourceUsageMetrics
name|m2
parameter_list|,
name|TreePath
name|loc
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|m1
operator|.
name|size
argument_list|()
operator|!=
name|m2
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
literal|"Size miscompared: "
operator|+
name|loc
operator|.
name|toString
argument_list|()
argument_list|,
name|loc
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|deepCompare (DeepCompare other, TreePath loc)
specifier|public
name|void
name|deepCompare
parameter_list|(
name|DeepCompare
name|other
parameter_list|,
name|TreePath
name|loc
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ResourceUsageMetrics
operator|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
literal|"Comparand has wrong type"
argument_list|,
name|loc
argument_list|)
throw|;
block|}
name|ResourceUsageMetrics
name|metrics2
init|=
operator|(
name|ResourceUsageMetrics
operator|)
name|other
decl_stmt|;
name|compareMetric
argument_list|(
name|getCumulativeCpuUsage
argument_list|()
argument_list|,
name|metrics2
operator|.
name|getCumulativeCpuUsage
argument_list|()
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
literal|"cumulativeCpu"
argument_list|)
argument_list|)
expr_stmt|;
name|compareMetric
argument_list|(
name|getVirtualMemoryUsage
argument_list|()
argument_list|,
name|metrics2
operator|.
name|getVirtualMemoryUsage
argument_list|()
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
literal|"virtualMemory"
argument_list|)
argument_list|)
expr_stmt|;
name|compareMetric
argument_list|(
name|getPhysicalMemoryUsage
argument_list|()
argument_list|,
name|metrics2
operator|.
name|getPhysicalMemoryUsage
argument_list|()
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
literal|"physicalMemory"
argument_list|)
argument_list|)
expr_stmt|;
name|compareMetric
argument_list|(
name|getHeapUsage
argument_list|()
argument_list|,
name|metrics2
operator|.
name|getHeapUsage
argument_list|()
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
literal|"heapUsage"
argument_list|)
argument_list|)
expr_stmt|;
name|compareSize
argument_list|(
name|this
argument_list|,
name|metrics2
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
literal|"size"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

