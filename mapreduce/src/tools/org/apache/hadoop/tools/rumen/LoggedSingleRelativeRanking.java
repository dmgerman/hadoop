begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonAnySetter
import|;
end_import

begin_comment
comment|/**  * A {@link LoggedSingleRelativeRanking} represents an X-Y coordinate of a  * single point in a discrete CDF.  *   * All of the public methods are simply accessors for the instance variables we  * want to write out in the JSON files.  *   */
end_comment

begin_class
DECL|class|LoggedSingleRelativeRanking
specifier|public
class|class
name|LoggedSingleRelativeRanking
implements|implements
name|DeepCompare
block|{
comment|/**    * The Y coordinate, as a fraction {@code ( 0.0D, 1.0D )}. The default value    * is there to mark an unfilled-in value.    */
DECL|field|relativeRanking
name|double
name|relativeRanking
init|=
operator|-
literal|1.0D
decl_stmt|;
comment|/**    * The X coordinate    */
DECL|field|datum
name|long
name|datum
init|=
operator|-
literal|1L
decl_stmt|;
DECL|field|alreadySeenAnySetterAttributes
specifier|static
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|alreadySeenAnySetterAttributes
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// for input parameter ignored.
annotation|@
name|JsonAnySetter
DECL|method|setUnknownAttribute (String attributeName, Object ignored)
specifier|public
name|void
name|setUnknownAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|Object
name|ignored
parameter_list|)
block|{
if|if
condition|(
operator|!
name|alreadySeenAnySetterAttributes
operator|.
name|contains
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
name|alreadySeenAnySetterAttributes
operator|.
name|add
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"In LoggedJob, we saw the unknown attribute "
operator|+
name|attributeName
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRelativeRanking ()
specifier|public
name|double
name|getRelativeRanking
parameter_list|()
block|{
return|return
name|relativeRanking
return|;
block|}
DECL|method|setRelativeRanking (double relativeRanking)
name|void
name|setRelativeRanking
parameter_list|(
name|double
name|relativeRanking
parameter_list|)
block|{
name|this
operator|.
name|relativeRanking
operator|=
name|relativeRanking
expr_stmt|;
block|}
DECL|method|getDatum ()
specifier|public
name|long
name|getDatum
parameter_list|()
block|{
return|return
name|datum
return|;
block|}
DECL|method|setDatum (long datum)
name|void
name|setDatum
parameter_list|(
name|long
name|datum
parameter_list|)
block|{
name|this
operator|.
name|datum
operator|=
name|datum
expr_stmt|;
block|}
DECL|method|compare1 (long c1, long c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|long
name|c1
parameter_list|,
name|long
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|compare1 (double c1, double c2, TreePath loc, String eltname)
specifier|private
name|void
name|compare1
parameter_list|(
name|double
name|c1
parameter_list|,
name|double
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|deepCompare (DeepCompare comparand, TreePath loc)
specifier|public
name|void
name|deepCompare
parameter_list|(
name|DeepCompare
name|comparand
parameter_list|,
name|TreePath
name|loc
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
operator|!
operator|(
name|comparand
operator|instanceof
name|LoggedSingleRelativeRanking
operator|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
literal|"comparand has wrong type"
argument_list|,
name|loc
argument_list|)
throw|;
block|}
name|LoggedSingleRelativeRanking
name|other
init|=
operator|(
name|LoggedSingleRelativeRanking
operator|)
name|comparand
decl_stmt|;
name|compare1
argument_list|(
name|relativeRanking
argument_list|,
name|other
operator|.
name|relativeRanking
argument_list|,
name|loc
argument_list|,
literal|"relativeRanking"
argument_list|)
expr_stmt|;
name|compare1
argument_list|(
name|datum
argument_list|,
name|other
operator|.
name|datum
argument_list|,
name|loc
argument_list|,
literal|"datum"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

