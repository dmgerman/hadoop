begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen.datatypes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|anonymization
operator|.
name|WordList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|anonymization
operator|.
name|WordListAnonymizerUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
operator|.
name|StatePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Represents a file's location.  *   * Currently, only filenames that can be represented using {@link Path} are   * supported.  */
end_comment

begin_class
DECL|class|FileName
specifier|public
class|class
name|FileName
implements|implements
name|AnonymizableDataType
argument_list|<
name|String
argument_list|>
block|{
DECL|field|fileName
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
DECL|field|anonymizedFileName
specifier|private
name|String
name|anonymizedFileName
decl_stmt|;
DECL|field|PREV_DIR
specifier|private
specifier|static
specifier|final
name|String
name|PREV_DIR
init|=
literal|".."
decl_stmt|;
DECL|field|KNOWN_SUFFIXES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|KNOWN_SUFFIXES
init|=
operator|new
name|String
index|[]
block|{
literal|".xml"
block|,
literal|".jar"
block|,
literal|".txt"
block|,
literal|".tar"
block|,
literal|".zip"
block|,
literal|".json"
block|,
literal|".gzip"
block|,
literal|".lzo"
block|}
decl_stmt|;
comment|/**    * A composite state for filename.    */
DECL|class|FileNameState
specifier|public
specifier|static
class|class
name|FileNameState
implements|implements
name|State
block|{
DECL|field|dirState
specifier|private
name|WordList
name|dirState
init|=
operator|new
name|WordList
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
DECL|field|fileNameState
specifier|private
name|WordList
name|fileNameState
init|=
operator|new
name|WordList
argument_list|(
literal|"file"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|isUpdated ()
specifier|public
name|boolean
name|isUpdated
parameter_list|()
block|{
return|return
name|dirState
operator|.
name|isUpdated
argument_list|()
operator|||
name|fileNameState
operator|.
name|isUpdated
argument_list|()
return|;
block|}
DECL|method|getDirectoryState ()
specifier|public
name|WordList
name|getDirectoryState
parameter_list|()
block|{
return|return
name|dirState
return|;
block|}
DECL|method|getFileNameState ()
specifier|public
name|WordList
name|getFileNameState
parameter_list|()
block|{
return|return
name|fileNameState
return|;
block|}
DECL|method|setDirectoryState (WordList state)
specifier|public
name|void
name|setDirectoryState
parameter_list|(
name|WordList
name|state
parameter_list|)
block|{
name|this
operator|.
name|dirState
operator|=
name|state
expr_stmt|;
block|}
DECL|method|setFileNameState (WordList state)
specifier|public
name|void
name|setFileNameState
parameter_list|(
name|WordList
name|state
parameter_list|)
block|{
name|this
operator|.
name|fileNameState
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"path"
return|;
block|}
annotation|@
name|Override
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// for now, simply assert since this class has a hardcoded name
if|if
condition|(
operator|!
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"State name mismatch! Expected '"
operator|+
name|getName
argument_list|()
operator|+
literal|"' but found '"
operator|+
name|name
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|FileName (String fileName)
specifier|public
name|FileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
annotation|@
name|Override
DECL|method|getAnonymizedValue (StatePool statePool, Configuration conf)
specifier|public
name|String
name|getAnonymizedValue
parameter_list|(
name|StatePool
name|statePool
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|anonymizedFileName
operator|==
literal|null
condition|)
block|{
name|anonymize
argument_list|(
name|statePool
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|anonymizedFileName
return|;
block|}
DECL|method|anonymize (StatePool statePool, Configuration conf)
specifier|private
name|void
name|anonymize
parameter_list|(
name|StatePool
name|statePool
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|FileNameState
name|fState
init|=
operator|(
name|FileNameState
operator|)
name|statePool
operator|.
name|getState
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fState
operator|==
literal|null
condition|)
block|{
name|fState
operator|=
operator|new
name|FileNameState
argument_list|()
expr_stmt|;
name|statePool
operator|.
name|addState
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|fState
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|files
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|String
index|[]
name|anonymizedFileNames
init|=
operator|new
name|String
index|[
name|files
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|files
control|)
block|{
name|anonymizedFileNames
index|[
name|i
operator|++
index|]
operator|=
name|anonymize
argument_list|(
name|statePool
argument_list|,
name|conf
argument_list|,
name|fState
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
name|anonymizedFileName
operator|=
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|anonymizedFileNames
argument_list|)
expr_stmt|;
block|}
DECL|method|anonymize (StatePool statePool, Configuration conf, FileNameState fState, String fileName)
specifier|private
specifier|static
name|String
name|anonymize
parameter_list|(
name|StatePool
name|statePool
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileNameState
name|fState
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|String
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// anonymize the path i.e without the authority& scheme
name|ret
operator|=
name|anonymizePath
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|,
name|fState
operator|.
name|getDirectoryState
argument_list|()
argument_list|,
name|fState
operator|.
name|getFileNameState
argument_list|()
argument_list|)
expr_stmt|;
comment|// anonymize the authority and scheme
name|String
name|authority
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|!=
literal|null
condition|)
block|{
name|String
name|anonymizedAuthority
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|authority
operator|!=
literal|null
condition|)
block|{
comment|// anonymize the authority
name|NodeName
name|hostName
init|=
operator|new
name|NodeName
argument_list|(
literal|null
argument_list|,
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|anonymizedAuthority
operator|=
name|hostName
operator|.
name|getAnonymizedValue
argument_list|(
name|statePool
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|scheme
operator|+
literal|"://"
operator|+
name|anonymizedAuthority
operator|+
name|ret
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|use
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|use
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
comment|// Anonymize the file-path
DECL|method|anonymizePath (String path, WordList dState, WordList fState)
specifier|private
specifier|static
name|String
name|anonymizePath
parameter_list|(
name|String
name|path
parameter_list|,
name|WordList
name|dState
parameter_list|,
name|WordList
name|fState
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
argument_list|,
name|Path
operator|.
name|SEPARATOR
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|Path
operator|.
name|SEPARATOR
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Path
operator|.
name|CUR_DIR
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PREV_DIR
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
comment|// this component is a directory
name|buffer
operator|.
name|append
argument_list|(
name|anonymize
argument_list|(
name|token
argument_list|,
name|dState
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this component is a file
name|buffer
operator|.
name|append
argument_list|(
name|anonymize
argument_list|(
name|token
argument_list|,
name|fState
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//TODO There is no caching for saving memory.
DECL|method|anonymize (String data, WordList wordList)
specifier|private
specifier|static
name|String
name|anonymize
parameter_list|(
name|String
name|data
parameter_list|,
name|WordList
name|wordList
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|WordListAnonymizerUtility
operator|.
name|needsAnonymization
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|String
name|suffix
init|=
literal|""
decl_stmt|;
name|String
name|coreData
init|=
name|data
decl_stmt|;
comment|// check and extract suffix
if|if
condition|(
name|WordListAnonymizerUtility
operator|.
name|hasSuffix
argument_list|(
name|data
argument_list|,
name|KNOWN_SUFFIXES
argument_list|)
condition|)
block|{
comment|// check if the data ends with a known suffix
name|String
index|[]
name|split
init|=
name|WordListAnonymizerUtility
operator|.
name|extractSuffix
argument_list|(
name|data
argument_list|,
name|KNOWN_SUFFIXES
argument_list|)
decl_stmt|;
name|suffix
operator|=
name|split
index|[
literal|1
index|]
expr_stmt|;
name|coreData
operator|=
name|split
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// check if the data is known content
comment|//TODO [Chunking] Do this for sub-strings of data
name|String
name|anonymizedData
init|=
name|coreData
decl_stmt|;
if|if
condition|(
operator|!
name|WordListAnonymizerUtility
operator|.
name|isKnownData
argument_list|(
name|coreData
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wordList
operator|.
name|contains
argument_list|(
name|coreData
argument_list|)
condition|)
block|{
name|wordList
operator|.
name|add
argument_list|(
name|coreData
argument_list|)
expr_stmt|;
block|}
name|anonymizedData
operator|=
name|wordList
operator|.
name|getName
argument_list|()
operator|+
name|wordList
operator|.
name|indexOf
argument_list|(
name|coreData
argument_list|)
expr_stmt|;
block|}
return|return
name|anonymizedData
operator|+
name|suffix
return|;
block|}
else|else
block|{
return|return
name|data
return|;
block|}
block|}
block|}
end_class

end_unit

