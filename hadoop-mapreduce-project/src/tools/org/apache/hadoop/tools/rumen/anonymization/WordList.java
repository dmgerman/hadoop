begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.tools.rumen.anonymization
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|anonymization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
operator|.
name|State
import|;
end_import

begin_comment
comment|/**  * Represents the list of words used in list-backed anonymizers.  */
end_comment

begin_class
DECL|class|WordList
specifier|public
class|class
name|WordList
implements|implements
name|State
block|{
DECL|field|list
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|list
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|isUpdated
specifier|private
name|boolean
name|isUpdated
init|=
literal|false
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|WordList ()
specifier|public
name|WordList
parameter_list|()
block|{
name|this
argument_list|(
literal|"word"
argument_list|)
expr_stmt|;
block|}
DECL|method|WordList (String name)
specifier|public
name|WordList
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * Adds the specified word to the list if the word is not already added.    */
DECL|method|add (String word)
specifier|public
name|void
name|add
parameter_list|(
name|String
name|word
parameter_list|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|word
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|getSize
argument_list|()
decl_stmt|;
name|list
operator|.
name|put
argument_list|(
name|word
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|isUpdated
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Returns 'true' if the list contains the specified word.    */
DECL|method|contains (String word)
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|word
parameter_list|)
block|{
return|return
name|list
operator|.
name|containsKey
argument_list|(
name|word
argument_list|)
return|;
block|}
comment|/**    * Returns the index of the specified word in the list.    */
DECL|method|indexOf (String word)
specifier|public
name|int
name|indexOf
parameter_list|(
name|String
name|word
parameter_list|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|word
argument_list|)
return|;
block|}
comment|/**    * Returns the size of the list.    */
DECL|method|getSize ()
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Returns 'true' if the list is updated since creation (and reload).    */
annotation|@
name|Override
DECL|method|isUpdated ()
specifier|public
name|boolean
name|isUpdated
parameter_list|()
block|{
return|return
name|isUpdated
return|;
block|}
comment|/**    * Setters and getters for Jackson JSON    */
comment|/**    * Sets the size of the list.    *     * Note: That this API is only for Jackson JSON deserialization.    */
DECL|method|setSize (int size)
specifier|public
name|void
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|list
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Note: That this API is only for Jackson JSON deserialization.    */
annotation|@
name|Override
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**    * Gets the words.    *     * Note: That this API is only for Jackson JSON serialization.    */
DECL|method|getWords ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getWords
parameter_list|()
block|{
return|return
name|list
return|;
block|}
comment|/**    * Sets the words.     *     * Note: That this API is only for Jackson JSON deserialization.    */
DECL|method|setWords (Map<String, Integer> list)
specifier|public
name|void
name|setWords
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
block|}
end_class

end_unit

