begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistory
import|;
end_import

begin_comment
comment|/**  * Job History related utils for handling multiple formats of history logs of  * different hadoop versions like Pre21 history logs, current history logs.  */
end_comment

begin_class
DECL|class|JobHistoryUtils
specifier|public
class|class
name|JobHistoryUtils
block|{
DECL|method|applyParser (String fileName, Pattern pattern)
specifier|private
specifier|static
name|String
name|applyParser
parameter_list|(
name|String
name|fileName
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Extracts jobID string from the given job history log file name or    * job history configuration file name.    * @param fileName name of job history file or job history configuration file    * @return a valid jobID String, parsed out of the file name. Otherwise,    *         [especially for .crc files] returns null.    */
DECL|method|extractJobID (String fileName)
specifier|static
name|String
name|extractJobID
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
comment|// Get jobID if fileName is a config file name.
name|String
name|jobId
init|=
name|extractJobIDFromConfFileName
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobId
operator|==
literal|null
condition|)
block|{
comment|// Get JobID if fileName is a job history file name
name|jobId
operator|=
name|extractJobIDFromHistoryFileName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
return|return
name|jobId
return|;
block|}
comment|/**    * Extracts jobID string from the given job history file name.    * @param fileName name of the job history file    * @return JobID if the given<code>fileName</code> is a valid job history    *         file name,<code>null</code> otherwise.    */
DECL|method|extractJobIDFromHistoryFileName (String fileName)
specifier|private
specifier|static
name|String
name|extractJobIDFromHistoryFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
comment|// History file name could be in one of the following formats
comment|// (1) old pre21 job history file name format
comment|// (2) new pre21 job history file name format
comment|// (3) current job history file name format i.e. 0.22
name|String
name|pre21JobID
init|=
name|applyParser
argument_list|(
name|fileName
argument_list|,
name|Pre21JobHistoryConstants
operator|.
name|JOBHISTORY_FILENAME_REGEX_V1
argument_list|)
decl_stmt|;
if|if
condition|(
name|pre21JobID
operator|==
literal|null
condition|)
block|{
name|pre21JobID
operator|=
name|applyParser
argument_list|(
name|fileName
argument_list|,
name|Pre21JobHistoryConstants
operator|.
name|JOBHISTORY_FILENAME_REGEX_V2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pre21JobID
operator|!=
literal|null
condition|)
block|{
return|return
name|pre21JobID
return|;
block|}
return|return
name|applyParser
argument_list|(
name|fileName
argument_list|,
name|JobHistory
operator|.
name|JOBHISTORY_FILENAME_REGEX
argument_list|)
return|;
block|}
comment|/**    * Extracts jobID string from the given job conf xml file name.    * @param fileName name of the job conf xml file    * @return job id if the given<code>fileName</code> is a valid job conf xml    *         file name,<code>null</code> otherwise.    */
DECL|method|extractJobIDFromConfFileName (String fileName)
specifier|private
specifier|static
name|String
name|extractJobIDFromConfFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
comment|// History conf file name could be in one of the following formats
comment|// (1) old pre21 job history file name format
comment|// (2) new pre21 job history file name format
comment|// (3) current job history file name format i.e. 0.22
name|String
name|pre21JobID
init|=
name|applyParser
argument_list|(
name|fileName
argument_list|,
name|Pre21JobHistoryConstants
operator|.
name|CONF_FILENAME_REGEX_V1
argument_list|)
decl_stmt|;
if|if
condition|(
name|pre21JobID
operator|==
literal|null
condition|)
block|{
name|pre21JobID
operator|=
name|applyParser
argument_list|(
name|fileName
argument_list|,
name|Pre21JobHistoryConstants
operator|.
name|CONF_FILENAME_REGEX_V2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pre21JobID
operator|!=
literal|null
condition|)
block|{
return|return
name|pre21JobID
return|;
block|}
return|return
name|applyParser
argument_list|(
name|fileName
argument_list|,
name|JobHistory
operator|.
name|CONF_FILENAME_REGEX
argument_list|)
return|;
block|}
comment|/**    * Checks if the given<code>fileName</code> is a valid job conf xml file name    * @param fileName name of the file to be validated    * @return<code>true</code> if the given<code>fileName</code> is a valid    *         job conf xml file name.    */
DECL|method|isJobConfXml (String fileName)
specifier|static
name|boolean
name|isJobConfXml
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|String
name|jobId
init|=
name|extractJobIDFromConfFileName
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
return|return
name|jobId
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

