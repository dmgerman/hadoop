begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|NodeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonAnySetter
import|;
end_import

begin_comment
comment|/**  * A {@link LoggedLocation} is a representation of a point in an hierarchical  * network, represented as a series of membership names, broadest first.  *   * For example, if your network has<i>hosts</i> grouped into<i>racks</i>, then  * in onecluster you might have a node {@code node1} on rack {@code rack1}. This  * would be represented with a ArrayList of two layers, with two {@link String}  * s being {@code "rack1"} and {@code "node1"}.  *   * The details of this class are set up to meet the requirements of the Jackson  * JSON parser/generator.  *   * All of the public methods are simply accessors for the instance variables we  * want to write out in the JSON files.  *   */
end_comment

begin_class
DECL|class|LoggedLocation
specifier|public
class|class
name|LoggedLocation
implements|implements
name|DeepCompare
block|{
DECL|field|layersCache
specifier|static
specifier|final
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|NodeName
argument_list|>
argument_list|>
name|layersCache
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|NodeName
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The full path from the root of the network to the host.    *     * NOTE that this assumes that the network topology is a tree.    */
DECL|field|layers
name|List
argument_list|<
name|NodeName
argument_list|>
name|layers
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|alreadySeenAnySetterAttributes
specifier|static
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|alreadySeenAnySetterAttributes
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getLayers ()
specifier|public
name|List
argument_list|<
name|NodeName
argument_list|>
name|getLayers
parameter_list|()
block|{
return|return
name|layers
return|;
block|}
DECL|method|setLayers (List<String> layers)
name|void
name|setLayers
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|layers
parameter_list|)
block|{
if|if
condition|(
name|layers
operator|==
literal|null
operator|||
name|layers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|layers
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|layersCache
init|)
block|{
name|List
argument_list|<
name|NodeName
argument_list|>
name|found
init|=
name|layersCache
operator|.
name|get
argument_list|(
name|layers
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|==
literal|null
condition|)
block|{
comment|// make a copy with interned string.
name|List
argument_list|<
name|NodeName
argument_list|>
name|clone
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeName
argument_list|>
argument_list|(
name|layers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|clone
operator|.
name|add
argument_list|(
operator|new
name|NodeName
argument_list|(
name|layers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|intern
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|clone
operator|.
name|add
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|null
argument_list|,
name|layers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|intern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// making it read-only as we are sharing them.
name|List
argument_list|<
name|NodeName
argument_list|>
name|readonlyLayers
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|clone
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|readonlyLayersKey
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|layers
argument_list|)
decl_stmt|;
name|layersCache
operator|.
name|put
argument_list|(
name|readonlyLayersKey
argument_list|,
name|readonlyLayers
argument_list|)
expr_stmt|;
name|this
operator|.
name|layers
operator|=
name|readonlyLayers
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|layers
operator|=
name|found
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// for input parameter ignored.
annotation|@
name|JsonAnySetter
DECL|method|setUnknownAttribute (String attributeName, Object ignored)
specifier|public
name|void
name|setUnknownAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|Object
name|ignored
parameter_list|)
block|{
if|if
condition|(
operator|!
name|alreadySeenAnySetterAttributes
operator|.
name|contains
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
name|alreadySeenAnySetterAttributes
operator|.
name|add
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"In LoggedJob, we saw the unknown attribute "
operator|+
name|attributeName
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// I'll treat this as an atomic object type
DECL|method|compareStrings (List<NodeName> c1, List<NodeName> c2, TreePath loc, String eltname)
specifier|private
name|void
name|compareStrings
parameter_list|(
name|List
argument_list|<
name|NodeName
argument_list|>
name|c1
parameter_list|,
name|List
argument_list|<
name|NodeName
argument_list|>
name|c2
parameter_list|,
name|TreePath
name|loc
parameter_list|,
name|String
name|eltname
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|&&
name|c2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TreePath
name|recursePath
init|=
operator|new
name|TreePath
argument_list|(
name|loc
argument_list|,
name|eltname
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c2
operator|==
literal|null
operator|||
operator|(
name|c1
operator|.
name|size
argument_list|()
operator|!=
name|c2
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared"
argument_list|,
name|recursePath
argument_list|)
throw|;
block|}
for|for
control|(
name|NodeName
name|n1
range|:
name|c1
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|NodeName
name|n2
range|:
name|c2
control|)
block|{
if|if
condition|(
name|n1
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|n2
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
name|eltname
operator|+
literal|" miscompared ["
operator|+
name|n1
operator|.
name|getValue
argument_list|()
operator|+
literal|"]"
argument_list|,
name|recursePath
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|deepCompare (DeepCompare comparand, TreePath loc)
specifier|public
name|void
name|deepCompare
parameter_list|(
name|DeepCompare
name|comparand
parameter_list|,
name|TreePath
name|loc
parameter_list|)
throws|throws
name|DeepInequalityException
block|{
if|if
condition|(
operator|!
operator|(
name|comparand
operator|instanceof
name|LoggedLocation
operator|)
condition|)
block|{
throw|throw
operator|new
name|DeepInequalityException
argument_list|(
literal|"comparand has wrong type"
argument_list|,
name|loc
argument_list|)
throw|;
block|}
name|LoggedLocation
name|other
init|=
operator|(
name|LoggedLocation
operator|)
name|comparand
decl_stmt|;
name|compareStrings
argument_list|(
name|layers
argument_list|,
name|other
operator|.
name|layers
argument_list|,
name|loc
argument_list|,
literal|"layers"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

