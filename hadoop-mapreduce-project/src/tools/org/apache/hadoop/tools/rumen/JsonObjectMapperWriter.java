begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|SerializationConfig
import|;
end_import

begin_comment
comment|/**  * Simple wrapper around {@link JsonGenerator} to write objects in JSON format.  * @param<T> The type of the objects to be written.  */
end_comment

begin_class
DECL|class|JsonObjectMapperWriter
specifier|public
class|class
name|JsonObjectMapperWriter
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Closeable
block|{
DECL|field|writer
specifier|private
name|JsonGenerator
name|writer
decl_stmt|;
DECL|method|JsonObjectMapperWriter (OutputStream output, boolean prettyPrint)
specifier|public
name|JsonObjectMapperWriter
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|SerializationConfig
operator|.
name|Feature
operator|.
name|CAN_OVERRIDE_ACCESS_MODIFIERS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|getJsonFactory
argument_list|()
expr_stmt|;
name|writer
operator|=
name|mapper
operator|.
name|getJsonFactory
argument_list|()
operator|.
name|createJsonGenerator
argument_list|(
name|output
argument_list|,
name|JsonEncoding
operator|.
name|UTF8
argument_list|)
expr_stmt|;
if|if
condition|(
name|prettyPrint
condition|)
block|{
name|writer
operator|.
name|useDefaultPrettyPrinter
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|write (T object)
specifier|public
name|void
name|write
parameter_list|(
name|T
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

