begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen.datatypes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|util
operator|.
name|JobPropertyParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|util
operator|.
name|MapReduceJobPropertiesParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
operator|.
name|StatePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * This represents the job configuration properties.  */
end_comment

begin_class
DECL|class|JobProperties
specifier|public
class|class
name|JobProperties
implements|implements
name|AnonymizableDataType
argument_list|<
name|Properties
argument_list|>
block|{
DECL|field|PARSERS_CONFIG_KEY
specifier|public
specifier|static
specifier|final
name|String
name|PARSERS_CONFIG_KEY
init|=
literal|"rumen.datatypes.jobproperties.parsers"
decl_stmt|;
DECL|field|jobProperties
specifier|private
specifier|final
name|Properties
name|jobProperties
decl_stmt|;
DECL|method|JobProperties ()
specifier|public
name|JobProperties
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|JobProperties (Properties properties)
specifier|public
name|JobProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|jobProperties
operator|=
name|properties
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|Properties
name|getValue
parameter_list|()
block|{
return|return
name|jobProperties
return|;
block|}
annotation|@
name|Override
DECL|method|getAnonymizedValue (StatePool statePool, Configuration conf)
specifier|public
name|Properties
name|getAnonymizedValue
parameter_list|(
name|StatePool
name|statePool
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Properties
name|filteredProperties
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|JobPropertyParser
argument_list|>
name|pList
init|=
operator|new
name|ArrayList
argument_list|<
name|JobPropertyParser
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// load the parsers
name|String
name|config
init|=
name|conf
operator|.
name|get
argument_list|(
name|PARSERS_CONFIG_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|JobPropertyParser
argument_list|>
index|[]
name|parsers
init|=
operator|(
name|Class
index|[]
operator|)
name|conf
operator|.
name|getClasses
argument_list|(
name|PARSERS_CONFIG_KEY
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|JobPropertyParser
argument_list|>
name|c
range|:
name|parsers
control|)
block|{
name|JobPropertyParser
name|parser
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|c
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|pList
operator|.
name|add
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// add the default MapReduce filter
name|JobPropertyParser
name|parser
init|=
operator|new
name|MapReduceJobPropertiesParser
argument_list|()
decl_stmt|;
name|pList
operator|.
name|add
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
comment|// filter out the desired config key-value pairs
if|if
condition|(
name|jobProperties
operator|!=
literal|null
condition|)
block|{
name|filteredProperties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
comment|// define a configuration object and load it with original job properties
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|jobProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|//TODO Check for null key/value?
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// find a parser for this key
for|for
control|(
name|JobPropertyParser
name|p
range|:
name|pList
control|)
block|{
name|DataType
argument_list|<
name|?
argument_list|>
name|pValue
init|=
name|p
operator|.
name|parseJobProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|pValue
operator|!=
literal|null
condition|)
block|{
name|filteredProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|pValue
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|filteredProperties
return|;
block|}
block|}
end_class

end_unit

