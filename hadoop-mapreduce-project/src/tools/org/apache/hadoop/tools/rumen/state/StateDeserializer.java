begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen.state
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
operator|.
name|StatePool
operator|.
name|StatePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|DeserializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|deser
operator|.
name|StdDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_comment
comment|/**  * Rumen JSON deserializer for deserializing the {@link State} object.  */
end_comment

begin_class
DECL|class|StateDeserializer
specifier|public
class|class
name|StateDeserializer
extends|extends
name|StdDeserializer
argument_list|<
name|StatePair
argument_list|>
block|{
DECL|method|StateDeserializer ()
specifier|public
name|StateDeserializer
parameter_list|()
block|{
name|super
argument_list|(
name|StatePair
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deserialize (JsonParser parser, DeserializationContext context)
specifier|public
name|StatePair
name|deserialize
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|DeserializationContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonProcessingException
block|{
name|ObjectMapper
name|mapper
init|=
operator|(
name|ObjectMapper
operator|)
name|parser
operator|.
name|getCodec
argument_list|()
decl_stmt|;
comment|// set the state-pair object tree
name|ObjectNode
name|statePairObject
init|=
operator|(
name|ObjectNode
operator|)
name|mapper
operator|.
name|readTree
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|stateClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stateClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|statePairObject
operator|.
name|get
argument_list|(
literal|"className"
argument_list|)
operator|.
name|getTextValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid classname!"
argument_list|,
name|cnfe
argument_list|)
throw|;
block|}
name|String
name|stateJsonString
init|=
name|statePairObject
operator|.
name|get
argument_list|(
literal|"state"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|State
name|state
init|=
operator|(
name|State
operator|)
name|mapper
operator|.
name|readValue
argument_list|(
name|stateJsonString
argument_list|,
name|stateClass
argument_list|)
decl_stmt|;
return|return
operator|new
name|StatePair
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
end_class

end_unit

