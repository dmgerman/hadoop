begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.index.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|index
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * The record writer of this output format simply puts a message in an output  * path when a shard update is done.  */
end_comment

begin_class
DECL|class|IndexUpdateOutputFormat
specifier|public
class|class
name|IndexUpdateOutputFormat
extends|extends
name|FileOutputFormat
argument_list|<
name|Shard
argument_list|,
name|Text
argument_list|>
block|{
comment|/* (non-Javadoc)    * @see FileOutputFormat#getRecordWriter(FileSystem, JobConf, String, Progressable)    */
DECL|method|getRecordWriter (final FileSystem fs, JobConf job, String name, final Progressable progress)
specifier|public
name|RecordWriter
argument_list|<
name|Shard
argument_list|,
name|Text
argument_list|>
name|getRecordWriter
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|,
specifier|final
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|perm
init|=
operator|new
name|Path
argument_list|(
name|getWorkOutputPath
argument_list|(
name|job
argument_list|)
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
operator|new
name|RecordWriter
argument_list|<
name|Shard
argument_list|,
name|Text
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|Shard
name|key
parameter_list|,
name|Text
name|value
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|IndexUpdateReducer
operator|.
name|DONE
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|)
assert|;
name|String
name|shardName
init|=
name|key
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|shardName
operator|=
name|shardName
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|Path
name|doneFile
init|=
operator|new
name|Path
argument_list|(
name|perm
argument_list|,
name|IndexUpdateReducer
operator|.
name|DONE
operator|+
literal|"_"
operator|+
name|shardName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|doneFile
argument_list|)
condition|)
block|{
name|fs
operator|.
name|createNewFile
argument_list|(
name|doneFile
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|(
specifier|final
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{       }
block|}
return|;
block|}
block|}
end_class

end_unit

