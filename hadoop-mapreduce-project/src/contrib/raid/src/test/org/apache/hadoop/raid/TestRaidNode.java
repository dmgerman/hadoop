begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyInfo
operator|.
name|ErasureCodeType
import|;
end_import

begin_comment
comment|/**   * Test the generation of parity blocks for files with different block   * sizes. Also test that a data block can be regenerated from a raid stripe   * using the parity block   */
end_comment

begin_class
DECL|class|TestRaidNode
specifier|public
class|class
name|TestRaidNode
extends|extends
name|TestCase
block|{
DECL|field|TEST_DIR
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/contrib/raid/test/data"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG_FILE
specifier|final
specifier|static
name|String
name|CONFIG_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-raid.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|RELOAD_INTERVAL
specifier|final
specifier|static
name|long
name|RELOAD_INTERVAL
init|=
literal|1000
decl_stmt|;
DECL|field|LOG
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.TestRaidNode"
argument_list|)
decl_stmt|;
DECL|field|rand
specifier|final
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|namenode
name|String
name|namenode
init|=
literal|null
decl_stmt|;
DECL|field|hftp
name|String
name|hftp
init|=
literal|null
decl_stmt|;
DECL|field|dfs
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|mr
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
DECL|field|fileSys
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
DECL|field|jobTrackerName
name|String
name|jobTrackerName
init|=
literal|null
decl_stmt|;
comment|/**    * create mapreduce and dfs clusters    */
DECL|method|createClusters (boolean local)
specifier|private
name|void
name|createClusters
parameter_list|(
name|boolean
name|local
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Make sure data directory exists
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"raid.config.file"
argument_list|,
name|CONFIG_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RaidNode
operator|.
name|RAID_LOCATION_KEY
argument_list|,
literal|"/destraid"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"raid.config.reload"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"raid.config.reload.interval"
argument_list|,
name|RELOAD_INTERVAL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.permissions.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// scan all policies once every 5 second
name|conf
operator|.
name|setLong
argument_list|(
literal|"raid.policy.rescan.interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// make all deletions not go through Trash
name|conf
operator|.
name|set
argument_list|(
literal|"fs.shell.delete.classname"
argument_list|,
literal|"org.apache.hadoop.hdfs.DFSClient"
argument_list|)
expr_stmt|;
comment|// the RaidNode does the raiding inline (instead of submitting to map/reduce)
if|if
condition|(
name|local
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"raid.classname"
argument_list|,
literal|"org.apache.hadoop.raid.LocalRaidNode"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"raid.classname"
argument_list|,
literal|"org.apache.hadoop.raid.DistRaidNode"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"raid.server.address"
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
comment|// create a dfs and map-reduce cluster
name|MiniDFSCluster
operator|.
name|Builder
name|builder
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|builder
operator|.
name|numDataNodes
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|builder
operator|.
name|format
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dfs
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|dfs
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|namenode
operator|=
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|int
name|taskTrackers
init|=
literal|4
decl_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|taskTrackers
argument_list|,
name|namenode
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|jobTrackerName
operator|=
literal|"localhost:"
operator|+
name|mr
operator|.
name|getJobTrackerPort
argument_list|()
expr_stmt|;
name|hftp
operator|=
literal|"hftp://localhost.localdomain:"
operator|+
name|dfs
operator|.
name|getNameNodePort
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
name|jobTrackerName
argument_list|)
expr_stmt|;
block|}
DECL|class|ConfigBuilder
class|class
name|ConfigBuilder
block|{
DECL|field|policies
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|policies
decl_stmt|;
DECL|method|ConfigBuilder ()
specifier|public
name|ConfigBuilder
parameter_list|()
block|{
name|policies
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|addPolicy (String name, String path, String parent)
specifier|public
name|void
name|addPolicy
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|parent
parameter_list|)
block|{
name|String
name|str
init|=
literal|"<srcPath prefix=\""
operator|+
name|path
operator|+
literal|"\"> "
operator|+
literal|"<policy name = \""
operator|+
name|name
operator|+
literal|"\"> "
operator|+
literal|"<parentPolicy>"
operator|+
name|parent
operator|+
literal|"</parentPolicy>"
operator|+
literal|"</policy>"
operator|+
literal|"</srcPath>"
decl_stmt|;
name|policies
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
DECL|method|addPolicy (String name, short srcReplication, long targetReplication, long metaReplication, long stripeLength)
specifier|public
name|void
name|addPolicy
parameter_list|(
name|String
name|name
parameter_list|,
name|short
name|srcReplication
parameter_list|,
name|long
name|targetReplication
parameter_list|,
name|long
name|metaReplication
parameter_list|,
name|long
name|stripeLength
parameter_list|)
block|{
name|String
name|str
init|=
literal|"<srcPath prefix=\"/user/dhruba/raidtest\"> "
operator|+
literal|"<policy name = \""
operator|+
name|name
operator|+
literal|"\"> "
operator|+
literal|"<erasureCode>xor</erasureCode> "
operator|+
literal|"<property> "
operator|+
literal|"<name>srcReplication</name> "
operator|+
literal|"<value>"
operator|+
name|srcReplication
operator|+
literal|"</value> "
operator|+
literal|"<description> pick only files whole replFactor is greater than or equal to "
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>targetReplication</name> "
operator|+
literal|"<value>"
operator|+
name|targetReplication
operator|+
literal|"</value> "
operator|+
literal|"<description>after RAIDing, decrease the replication factor of a file to this value."
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>metaReplication</name> "
operator|+
literal|"<value>"
operator|+
name|metaReplication
operator|+
literal|"</value> "
operator|+
literal|"<description> replication factor of parity file"
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>stripeLength</name> "
operator|+
literal|"<value>"
operator|+
name|stripeLength
operator|+
literal|"</value> "
operator|+
literal|"<description> the max number of blocks in a file to RAID together "
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>modTimePeriod</name> "
operator|+
literal|"<value>2000</value> "
operator|+
literal|"<description> time (milliseconds) after a file is modified to make it "
operator|+
literal|"a candidate for RAIDing "
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"</policy>"
operator|+
literal|"</srcPath>"
decl_stmt|;
name|policies
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
DECL|method|addPolicy (String name, String path, short srcReplication, long targetReplication, long metaReplication, long stripeLength)
specifier|public
name|void
name|addPolicy
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|,
name|short
name|srcReplication
parameter_list|,
name|long
name|targetReplication
parameter_list|,
name|long
name|metaReplication
parameter_list|,
name|long
name|stripeLength
parameter_list|)
block|{
name|String
name|str
init|=
literal|"<srcPath prefix=\""
operator|+
name|path
operator|+
literal|"\"> "
operator|+
literal|"<policy name = \""
operator|+
name|name
operator|+
literal|"\"> "
operator|+
literal|"<erasureCode>xor</erasureCode> "
operator|+
literal|"<property> "
operator|+
literal|"<name>srcReplication</name> "
operator|+
literal|"<value>"
operator|+
name|srcReplication
operator|+
literal|"</value> "
operator|+
literal|"<description> pick only files whole replFactor is greater than or equal to "
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>targetReplication</name> "
operator|+
literal|"<value>"
operator|+
name|targetReplication
operator|+
literal|"</value> "
operator|+
literal|"<description>after RAIDing, decrease the replication factor of a file to this value."
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>metaReplication</name> "
operator|+
literal|"<value>"
operator|+
name|metaReplication
operator|+
literal|"</value> "
operator|+
literal|"<description> replication factor of parity file"
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>stripeLength</name> "
operator|+
literal|"<value>"
operator|+
name|stripeLength
operator|+
literal|"</value> "
operator|+
literal|"<description> the max number of blocks in a file to RAID together "
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"<property> "
operator|+
literal|"<name>modTimePeriod</name> "
operator|+
literal|"<value>2000</value> "
operator|+
literal|"<description> time (milliseconds) after a file is modified to make it "
operator|+
literal|"a candidate for RAIDing "
operator|+
literal|"</description> "
operator|+
literal|"</property> "
operator|+
literal|"</policy>"
operator|+
literal|"</srcPath>"
decl_stmt|;
name|policies
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
DECL|method|persist ()
specifier|public
name|void
name|persist
parameter_list|()
throws|throws
name|IOException
block|{
name|FileWriter
name|fileWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|CONFIG_FILE
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"<configuration>"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|policy
range|:
name|policies
control|)
block|{
name|fileWriter
operator|.
name|write
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
name|fileWriter
operator|.
name|write
argument_list|(
literal|"</configuration>"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * stop clusters created earlier    */
DECL|method|stopClusters ()
specifier|private
name|void
name|stopClusters
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test to run a filter    */
DECL|method|testPathFilter ()
specifier|public
name|void
name|testPathFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testPathFilter started."
argument_list|)
expr_stmt|;
name|long
name|blockSizes
index|[]
init|=
block|{
literal|1024L
block|}
decl_stmt|;
name|long
name|stripeLengths
index|[]
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|5
block|,
literal|6
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|}
decl_stmt|;
name|long
name|targetReplication
init|=
literal|1
decl_stmt|;
name|long
name|metaReplication
init|=
literal|1
decl_stmt|;
name|int
name|numBlock
init|=
literal|11
decl_stmt|;
name|int
name|iter
init|=
literal|0
decl_stmt|;
name|createClusters
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|long
name|blockSize
range|:
name|blockSizes
control|)
block|{
for|for
control|(
name|long
name|stripeLength
range|:
name|stripeLengths
control|)
block|{
name|doTestPathFilter
argument_list|(
name|iter
argument_list|,
name|targetReplication
argument_list|,
name|metaReplication
argument_list|,
name|stripeLength
argument_list|,
name|blockSize
argument_list|,
name|numBlock
argument_list|)
expr_stmt|;
name|iter
operator|++
expr_stmt|;
block|}
block|}
name|doCheckPolicy
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stopClusters
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testPathFilter completed."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to run a filter    */
DECL|method|doTestPathFilter (int iter, long targetReplication, long metaReplication, long stripeLength, long blockSize, int numBlock)
specifier|private
name|void
name|doTestPathFilter
parameter_list|(
name|int
name|iter
parameter_list|,
name|long
name|targetReplication
parameter_list|,
name|long
name|metaReplication
parameter_list|,
name|long
name|stripeLength
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|int
name|numBlock
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter started---------------------------:"
operator|+
literal|" iter "
operator|+
name|iter
operator|+
literal|" blockSize="
operator|+
name|blockSize
operator|+
literal|" stripeLength="
operator|+
name|stripeLength
argument_list|)
expr_stmt|;
name|ConfigBuilder
name|cb
init|=
operator|new
name|ConfigBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|addPolicy
argument_list|(
literal|"policy1"
argument_list|,
literal|"/user/dhruba/raidtest"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|,
name|targetReplication
argument_list|,
name|metaReplication
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
name|cb
operator|.
name|persist
argument_list|()
expr_stmt|;
name|RaidShell
name|shell
init|=
literal|null
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/user/dhruba/raidtest/"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir
operator|+
literal|"/file"
operator|+
name|iter
argument_list|)
decl_stmt|;
name|RaidNode
name|cnode
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
literal|"/destraid/user/dhruba/raidtest"
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|destPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|crc1
init|=
name|createOldFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
literal|1
argument_list|,
name|numBlock
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter created test files for iteration "
operator|+
name|iter
argument_list|)
expr_stmt|;
comment|// create an instance of the RaidNode
name|cnode
operator|=
name|RaidNode
operator|.
name|createRaidNode
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|listPaths
init|=
literal|null
decl_stmt|;
comment|// wait till file is raided
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|listPaths
operator|=
name|fileSys
operator|.
name|listStatus
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|listPaths
operator|!=
literal|null
operator|&&
name|listPaths
operator|.
name|length
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|FileStatus
name|s
range|:
name|listPaths
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter found path "
operator|+
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".tmp"
argument_list|)
operator|&&
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file1
argument_list|)
operator|.
name|getReplication
argument_list|()
operator|==
name|targetReplication
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter waiting for files to be raided. Found "
operator|+
operator|(
name|listPaths
operator|==
literal|null
condition|?
literal|"none"
else|:
name|listPaths
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// keep waiting
block|}
comment|// assertEquals(listPaths.length, 1); // all files raided
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter all files found in Raid."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
comment|// Without this wait, unit test crashes
comment|// check for error at beginning of file
name|shell
operator|=
operator|new
name|RaidShell
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|shell
operator|.
name|initializeRpc
argument_list|(
name|conf
argument_list|,
name|cnode
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|numBlock
operator|>=
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter Check error at beginning of file."
argument_list|)
expr_stmt|;
name|simulateError
argument_list|(
name|shell
argument_list|,
name|fileSys
argument_list|,
name|file1
argument_list|,
name|crc1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// check for error at the beginning of second block
if|if
condition|(
name|numBlock
operator|>=
literal|2
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter Check error at beginning of second block."
argument_list|)
expr_stmt|;
name|simulateError
argument_list|(
name|shell
argument_list|,
name|fileSys
argument_list|,
name|file1
argument_list|,
name|crc1
argument_list|,
name|blockSize
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// check for error at the middle of third block
if|if
condition|(
name|numBlock
operator|>=
literal|3
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter Check error at middle of third block."
argument_list|)
expr_stmt|;
name|simulateError
argument_list|(
name|shell
argument_list|,
name|fileSys
argument_list|,
name|file1
argument_list|,
name|crc1
argument_list|,
literal|2
operator|*
name|blockSize
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// check for error at the middle of second stripe
if|if
condition|(
name|numBlock
operator|>=
name|stripeLength
operator|+
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter Check error at middle of second stripe."
argument_list|)
expr_stmt|;
name|simulateError
argument_list|(
name|shell
argument_list|,
name|fileSys
argument_list|,
name|file1
argument_list|,
name|crc1
argument_list|,
name|stripeLength
operator|*
name|blockSize
operator|+
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter Exception "
operator|+
name|e
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|shell
operator|!=
literal|null
condition|)
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cnode
operator|!=
literal|null
condition|)
block|{
name|cnode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cnode
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter delete file "
operator|+
name|file1
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter completed:"
operator|+
literal|" blockSize="
operator|+
name|blockSize
operator|+
literal|" stripeLength="
operator|+
name|stripeLength
argument_list|)
expr_stmt|;
block|}
comment|// Check that raid occurs only on files that have a replication factor
comment|// greater than or equal to the specified value
DECL|method|doCheckPolicy ()
specifier|private
name|void
name|doCheckPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doCheckPolicy started---------------------------:"
argument_list|)
expr_stmt|;
name|short
name|srcReplication
init|=
literal|1
decl_stmt|;
name|long
name|targetReplication
init|=
literal|2
decl_stmt|;
name|long
name|metaReplication
init|=
literal|1
decl_stmt|;
name|long
name|stripeLength
init|=
literal|2
decl_stmt|;
name|long
name|blockSize
init|=
literal|1024
decl_stmt|;
name|int
name|numBlock
init|=
literal|3
decl_stmt|;
name|ConfigBuilder
name|cb
init|=
operator|new
name|ConfigBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|addPolicy
argument_list|(
literal|"policy1"
argument_list|,
literal|"/user/dhruba/policytest"
argument_list|,
name|srcReplication
argument_list|,
name|targetReplication
argument_list|,
name|metaReplication
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
name|cb
operator|.
name|persist
argument_list|()
expr_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"/user/dhruba/policytest/"
argument_list|)
decl_stmt|;
name|Path
name|file1
init|=
operator|new
name|Path
argument_list|(
name|dir
operator|+
literal|"/file1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
operator|new
name|Path
argument_list|(
name|dir
operator|+
literal|"/file2"
argument_list|)
decl_stmt|;
name|RaidNode
name|cnode
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
literal|"/destraid/user/dhruba/policytest"
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|destPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create an instance of the RaidNode
name|Configuration
name|localConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localConf
operator|.
name|set
argument_list|(
name|RaidNode
operator|.
name|RAID_LOCATION_KEY
argument_list|,
literal|"/destraid"
argument_list|)
expr_stmt|;
name|cnode
operator|=
name|RaidNode
operator|.
name|createRaidNode
argument_list|(
literal|null
argument_list|,
name|localConf
argument_list|)
expr_stmt|;
comment|// this file should be picked up RaidNode
name|createOldFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
literal|2
argument_list|,
name|numBlock
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|listPaths
init|=
literal|null
decl_stmt|;
name|long
name|firstmodtime
init|=
literal|0
decl_stmt|;
comment|// wait till file is raided
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// waiting
try|try
block|{
name|listPaths
operator|=
name|fileSys
operator|.
name|listStatus
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File not found "
operator|+
name|destPath
argument_list|)
expr_stmt|;
comment|// The directory have been deleted by the purge thread.
continue|continue;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|listPaths
operator|!=
literal|null
operator|&&
name|listPaths
operator|.
name|length
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|FileStatus
name|s
range|:
name|listPaths
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doCheckPolicy found path "
operator|+
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".tmp"
argument_list|)
operator|&&
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file2
argument_list|)
operator|.
name|getReplication
argument_list|()
operator|==
name|targetReplication
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|firstmodtime
operator|=
name|s
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"doCheckPolicy waiting for files to be raided. Found "
operator|+
operator|(
name|listPaths
operator|==
literal|null
condition|?
literal|"none"
else|:
name|listPaths
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|listPaths
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"doCheckPolicy all files found in Raid the first time."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"doCheckPolicy: recreating source file"
argument_list|)
expr_stmt|;
name|createOldFile
argument_list|(
name|fileSys
argument_list|,
name|file2
argument_list|,
literal|2
argument_list|,
name|numBlock
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|FileStatus
name|st
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|st
operator|.
name|getModificationTime
argument_list|()
operator|>
name|firstmodtime
argument_list|)
expr_stmt|;
comment|// wait till file is raided
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|20000L
argument_list|)
expr_stmt|;
comment|// waiting
name|listPaths
operator|=
name|fileSys
operator|.
name|listStatus
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|listPaths
operator|!=
literal|null
operator|&&
name|listPaths
operator|.
name|length
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|FileStatus
name|s
range|:
name|listPaths
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doCheckPolicy found path "
operator|+
name|s
operator|.
name|getPath
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".tmp"
argument_list|)
operator|&&
name|s
operator|.
name|getModificationTime
argument_list|()
operator|>
name|firstmodtime
operator|&&
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|file2
argument_list|)
operator|.
name|getReplication
argument_list|()
operator|==
name|targetReplication
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"doCheckPolicy waiting for files to be raided. Found "
operator|+
operator|(
name|listPaths
operator|==
literal|null
condition|?
literal|"none"
else|:
name|listPaths
operator|.
name|length
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|listPaths
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"doCheckPolicy: file got re-raided as expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doCheckPolicy Exception "
operator|+
name|e
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|cnode
operator|!=
literal|null
condition|)
block|{
name|cnode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cnode
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"doTestPathFilter delete file "
operator|+
name|file1
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|file1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"doCheckPolicy completed:"
argument_list|)
expr_stmt|;
block|}
DECL|method|createTestFiles (String path, String destpath)
specifier|private
name|void
name|createTestFiles
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|destpath
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|blockSize
init|=
literal|1024L
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
name|destpath
argument_list|)
decl_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|destPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|path
operator|+
literal|"file"
operator|+
name|i
argument_list|)
decl_stmt|;
name|createOldFile
argument_list|(
name|fileSys
argument_list|,
name|file
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test dist Raid    */
DECL|method|testDistRaid ()
specifier|public
name|void
name|testDistRaid
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testDistRaid started."
argument_list|)
expr_stmt|;
name|long
name|targetReplication
init|=
literal|2
decl_stmt|;
name|long
name|metaReplication
init|=
literal|2
decl_stmt|;
name|long
name|stripeLength
init|=
literal|3
decl_stmt|;
name|short
name|srcReplication
init|=
literal|1
decl_stmt|;
name|createClusters
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConfigBuilder
name|cb
init|=
operator|new
name|ConfigBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|addPolicy
argument_list|(
literal|"policy1"
argument_list|,
literal|"/user/dhruba/raidtest"
argument_list|,
name|srcReplication
argument_list|,
name|targetReplication
argument_list|,
name|metaReplication
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
name|cb
operator|.
name|addPolicy
argument_list|(
literal|"policy2"
argument_list|,
literal|"/user/dhruba/raidtest2"
argument_list|,
name|srcReplication
argument_list|,
name|targetReplication
argument_list|,
name|metaReplication
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
name|cb
operator|.
name|persist
argument_list|()
expr_stmt|;
name|RaidNode
name|cnode
init|=
literal|null
decl_stmt|;
try|try
block|{
name|createTestFiles
argument_list|(
literal|"/user/dhruba/raidtest/"
argument_list|,
literal|"/destraid/user/dhruba/raidtest"
argument_list|)
expr_stmt|;
name|createTestFiles
argument_list|(
literal|"/user/dhruba/raidtest2/"
argument_list|,
literal|"/destraid/user/dhruba/raidtest2"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testDistRaid created test files"
argument_list|)
expr_stmt|;
name|Configuration
name|localConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localConf
operator|.
name|set
argument_list|(
name|RaidNode
operator|.
name|RAID_LOCATION_KEY
argument_list|,
literal|"/destraid"
argument_list|)
expr_stmt|;
name|cnode
operator|=
name|RaidNode
operator|.
name|createRaidNode
argument_list|(
literal|null
argument_list|,
name|localConf
argument_list|)
expr_stmt|;
comment|// Verify the policies are parsed correctly
for|for
control|(
name|PolicyList
name|policyList
range|:
name|cnode
operator|.
name|getAllPolicies
argument_list|()
control|)
block|{
for|for
control|(
name|PolicyInfo
name|p
range|:
name|policyList
operator|.
name|getAll
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"policy1"
argument_list|)
condition|)
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
literal|"/user/dhruba/raidtest"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getSrcPath
argument_list|()
operator|.
name|equals
argument_list|(
name|srcPath
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"policy2"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
literal|"/user/dhruba/raidtest2"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getSrcPath
argument_list|()
operator|.
name|equals
argument_list|(
name|srcPath
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|targetReplication
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"targetReplication"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metaReplication
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"metaReplication"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stripeLength
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"stripeLength"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|int
name|MAX_WAITTIME
init|=
literal|300000
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cnode is not DistRaidNode"
argument_list|,
name|cnode
operator|instanceof
name|DistRaidNode
argument_list|)
expr_stmt|;
name|DistRaidNode
name|dcnode
init|=
operator|(
name|DistRaidNode
operator|)
name|cnode
decl_stmt|;
while|while
condition|(
name|dcnode
operator|.
name|jobMonitor
operator|.
name|jobsMonitored
argument_list|()
operator|<
literal|2
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|MAX_WAITTIME
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|dcnode
operator|.
name|jobMonitor
operator|.
name|jobsMonitored
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
while|while
condition|(
name|dcnode
operator|.
name|jobMonitor
operator|.
name|jobsSucceeded
argument_list|()
operator|<
literal|2
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|MAX_WAITTIME
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|dcnode
operator|.
name|jobMonitor
operator|.
name|jobsSucceeded
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testDistRaid successful."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistRaid Exception "
operator|+
name|e
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|cnode
operator|!=
literal|null
condition|)
block|{
name|cnode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cnode
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|stopClusters
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testDistRaid completed."
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// simulate a corruption at specified offset and verify that eveyrthing is good
comment|//
DECL|method|simulateError (RaidShell shell, FileSystem fileSys, Path file1, long crc, long corruptOffset)
name|void
name|simulateError
parameter_list|(
name|RaidShell
name|shell
parameter_list|,
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|file1
parameter_list|,
name|long
name|crc
parameter_list|,
name|long
name|corruptOffset
parameter_list|)
throws|throws
name|IOException
block|{
comment|// recover the file assuming that we encountered a corruption at offset 0
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-recover"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|file1
operator|.
name|toString
argument_list|()
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|corruptOffset
argument_list|)
expr_stmt|;
name|Path
name|recover1
init|=
name|shell
operator|.
name|recover
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|args
argument_list|,
literal|1
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
comment|// compare that the recovered file is identical to the original one
name|LOG
operator|.
name|info
argument_list|(
literal|"Comparing file "
operator|+
name|file1
operator|+
literal|" with recovered file "
operator|+
name|recover1
argument_list|)
expr_stmt|;
name|validateFile
argument_list|(
name|fileSys
argument_list|,
name|file1
argument_list|,
name|recover1
argument_list|,
name|crc
argument_list|)
expr_stmt|;
name|fileSys
operator|.
name|delete
argument_list|(
name|recover1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// creates a file and populate it with random data. Returns its crc.
comment|//
DECL|method|createOldFile (FileSystem fileSys, Path name, int repl, int numBlocks, long blocksize)
specifier|static
name|long
name|createOldFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name
parameter_list|,
name|int
name|repl
parameter_list|,
name|int
name|numBlocks
parameter_list|,
name|long
name|blocksize
parameter_list|)
throws|throws
name|IOException
block|{
name|CRC32
name|crc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|stm
init|=
name|fileSys
operator|.
name|create
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|fileSys
operator|.
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
operator|(
name|short
operator|)
name|repl
argument_list|,
name|blocksize
argument_list|)
decl_stmt|;
comment|// fill random data into file
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|blocksize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
operator|(
name|numBlocks
operator|-
literal|1
operator|)
condition|)
block|{
name|b
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|blocksize
operator|/
literal|2
index|]
expr_stmt|;
block|}
name|rand
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|stm
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|crc
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|//
comment|// validates that file matches the crc.
comment|//
DECL|method|validateFile (FileSystem fileSys, Path name1, Path name2, long crc)
specifier|private
name|void
name|validateFile
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|Path
name|name1
parameter_list|,
name|Path
name|name2
parameter_list|,
name|long
name|crc
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|stat1
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|name1
argument_list|)
decl_stmt|;
name|FileStatus
name|stat2
init|=
name|fileSys
operator|.
name|getFileStatus
argument_list|(
name|name2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|" Length of file "
operator|+
name|name1
operator|+
literal|" is "
operator|+
name|stat1
operator|.
name|getLen
argument_list|()
operator|+
literal|" is different from length of file "
operator|+
name|name1
operator|+
literal|" "
operator|+
name|stat2
operator|.
name|getLen
argument_list|()
argument_list|,
name|stat1
operator|.
name|getLen
argument_list|()
operator|==
name|stat2
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|CRC32
name|newcrc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|stm
init|=
name|fileSys
operator|.
name|open
argument_list|(
name|name2
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|4192
index|]
decl_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|num
operator|>=
literal|0
condition|)
block|{
name|num
operator|=
name|stm
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|num
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|newcrc
operator|.
name|update
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|newcrc
operator|.
name|getValue
argument_list|()
operator|!=
name|crc
condition|)
block|{
name|fail
argument_list|(
literal|"CRC mismatch of files "
operator|+
name|name1
operator|+
literal|" with file "
operator|+
name|name2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSuspendTraversal ()
specifier|public
name|void
name|testSuspendTraversal
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testSuspendTraversal started."
argument_list|)
expr_stmt|;
name|long
name|targetReplication
init|=
literal|2
decl_stmt|;
name|long
name|metaReplication
init|=
literal|2
decl_stmt|;
name|long
name|stripeLength
init|=
literal|3
decl_stmt|;
name|short
name|srcReplication
init|=
literal|1
decl_stmt|;
name|createClusters
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConfigBuilder
name|cb
init|=
operator|new
name|ConfigBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|addPolicy
argument_list|(
literal|"policy1"
argument_list|,
literal|"/user/dhruba/raidtest"
argument_list|,
name|srcReplication
argument_list|,
name|targetReplication
argument_list|,
name|metaReplication
argument_list|,
name|stripeLength
argument_list|)
expr_stmt|;
name|cb
operator|.
name|persist
argument_list|()
expr_stmt|;
name|RaidNode
name|cnode
init|=
literal|null
decl_stmt|;
try|try
block|{
name|createTestFiles
argument_list|(
literal|"/user/dhruba/raidtest/1/"
argument_list|,
literal|"/destraid/user/dhruba/raidtest/1"
argument_list|)
expr_stmt|;
name|createTestFiles
argument_list|(
literal|"/user/dhruba/raidtest/2/"
argument_list|,
literal|"/destraid/user/dhruba/raidtest/2"
argument_list|)
expr_stmt|;
name|createTestFiles
argument_list|(
literal|"/user/dhruba/raidtest/3/"
argument_list|,
literal|"/destraid/user/dhruba/raidtest/3"
argument_list|)
expr_stmt|;
name|createTestFiles
argument_list|(
literal|"/user/dhruba/raidtest/4/"
argument_list|,
literal|"/destraid/user/dhruba/raidtest/4"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testSuspendTraversal created test files"
argument_list|)
expr_stmt|;
name|Configuration
name|localConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localConf
operator|.
name|set
argument_list|(
name|RaidNode
operator|.
name|RAID_LOCATION_KEY
argument_list|,
literal|"/destraid"
argument_list|)
expr_stmt|;
name|localConf
operator|.
name|setInt
argument_list|(
literal|"raid.distraid.max.files"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|localConf
operator|.
name|setInt
argument_list|(
literal|"raid.directorytraversal.threads"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// This is too dependent on the implementation of getFilteredFiles().
comment|// It relies on the threading behavior where two directories are traversed
comment|// before returning because the list of files is modified in a separate
comment|// thread from the one that decides if there are enough files.
specifier|final
name|int
name|numJobsExpected
init|=
literal|2
decl_stmt|;
name|cnode
operator|=
name|RaidNode
operator|.
name|createRaidNode
argument_list|(
literal|null
argument_list|,
name|localConf
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|int
name|MAX_WAITTIME
init|=
literal|300000
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cnode is not DistRaidNode"
argument_list|,
name|cnode
operator|instanceof
name|DistRaidNode
argument_list|)
expr_stmt|;
name|DistRaidNode
name|dcnode
init|=
operator|(
name|DistRaidNode
operator|)
name|cnode
decl_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
while|while
condition|(
name|dcnode
operator|.
name|jobMonitor
operator|.
name|jobsSucceeded
argument_list|()
operator|<
name|numJobsExpected
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|MAX_WAITTIME
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|dcnode
operator|.
name|jobMonitor
operator|.
name|jobsMonitored
argument_list|()
argument_list|,
name|numJobsExpected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dcnode
operator|.
name|jobMonitor
operator|.
name|jobsSucceeded
argument_list|()
argument_list|,
name|numJobsExpected
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testSuspendTraversal successful."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSuspendTraversal Exception "
operator|+
name|e
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|cnode
operator|!=
literal|null
condition|)
block|{
name|cnode
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cnode
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|stopClusters
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Test testSuspendTraversal completed."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

