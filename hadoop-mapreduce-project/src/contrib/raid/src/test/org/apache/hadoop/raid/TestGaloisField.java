begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestGaloisField
specifier|public
class|class
name|TestGaloisField
extends|extends
name|TestCase
block|{
DECL|field|TEST_TIMES
specifier|final
name|int
name|TEST_TIMES
init|=
literal|10000
decl_stmt|;
DECL|field|RAND
specifier|final
name|Random
name|RAND
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|GF
specifier|final
specifier|static
name|GaloisField
name|GF
init|=
name|GaloisField
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|method|randGF ()
specifier|private
name|int
name|randGF
parameter_list|()
block|{
return|return
literal|0x000000FF
operator|&
name|RAND
operator|.
name|nextInt
argument_list|(
name|GF
operator|.
name|getFieldSize
argument_list|()
argument_list|)
return|;
block|}
DECL|method|randGFPoly (int len)
specifier|private
name|int
index|[]
name|randGFPoly
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|randGF
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|testGetInstance ()
specifier|public
name|void
name|testGetInstance
parameter_list|()
block|{
name|GaloisField
name|gf1
init|=
name|GaloisField
operator|.
name|getInstance
argument_list|(
literal|256
argument_list|,
literal|285
argument_list|)
decl_stmt|;
name|GaloisField
name|gf2
init|=
name|GaloisField
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|GaloisField
name|gf3
init|=
name|GaloisField
operator|.
name|getInstance
argument_list|(
literal|128
argument_list|,
literal|137
argument_list|)
decl_stmt|;
name|GaloisField
name|gf4
init|=
name|GaloisField
operator|.
name|getInstance
argument_list|(
literal|128
argument_list|,
literal|137
argument_list|)
decl_stmt|;
name|GaloisField
name|gf5
init|=
name|GaloisField
operator|.
name|getInstance
argument_list|(
literal|512
argument_list|,
literal|529
argument_list|)
decl_stmt|;
name|GaloisField
name|gf6
init|=
name|GaloisField
operator|.
name|getInstance
argument_list|(
literal|512
argument_list|,
literal|529
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|gf1
operator|==
name|gf2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gf3
operator|==
name|gf4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gf5
operator|==
name|gf6
argument_list|)
expr_stmt|;
block|}
DECL|method|testDistributivity ()
specifier|public
name|void
name|testDistributivity
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_TIMES
condition|;
name|i
operator|++
control|)
block|{
name|int
name|a
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|GF
operator|.
name|getFieldSize
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|GF
operator|.
name|getFieldSize
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|GF
operator|.
name|getFieldSize
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|result1
init|=
name|GF
operator|.
name|multiply
argument_list|(
name|a
argument_list|,
name|GF
operator|.
name|add
argument_list|(
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|result2
init|=
name|GF
operator|.
name|add
argument_list|(
name|GF
operator|.
name|multiply
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|GF
operator|.
name|multiply
argument_list|(
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Distributivity test #"
operator|+
name|i
operator|+
literal|" failed: "
operator|+
name|a
operator|+
literal|", "
operator|+
name|b
operator|+
literal|", "
operator|+
name|c
argument_list|,
name|result1
operator|==
name|result2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDevision ()
specifier|public
name|void
name|testDevision
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_TIMES
condition|;
name|i
operator|++
control|)
block|{
name|int
name|a
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|GF
operator|.
name|getFieldSize
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
name|GF
operator|.
name|getFieldSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|int
name|c
init|=
name|GF
operator|.
name|divide
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Division test #"
operator|+
name|i
operator|+
literal|" failed: "
operator|+
name|a
operator|+
literal|"/"
operator|+
name|b
operator|+
literal|" = "
operator|+
name|c
argument_list|,
name|a
operator|==
name|GF
operator|.
name|multiply
argument_list|(
name|c
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPower ()
specifier|public
name|void
name|testPower
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_TIMES
condition|;
name|i
operator|++
control|)
block|{
name|int
name|a
init|=
name|randGF
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|RAND
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|result1
init|=
name|GF
operator|.
name|power
argument_list|(
name|a
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|int
name|result2
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
name|result2
operator|=
name|GF
operator|.
name|multiply
argument_list|(
name|result2
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|(
name|result1
operator|==
name|result2
operator|)
assert|;
block|}
block|}
DECL|method|testPolynomialDistributivity ()
specifier|public
name|void
name|testPolynomialDistributivity
parameter_list|()
block|{
specifier|final
name|int
name|TEST_LEN
init|=
literal|15
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_TIMES
condition|;
name|i
operator|++
control|)
block|{
name|int
index|[]
name|a
init|=
name|randGFPoly
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|TEST_LEN
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
index|[]
name|b
init|=
name|randGFPoly
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|TEST_LEN
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
index|[]
name|c
init|=
name|randGFPoly
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|TEST_LEN
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
index|[]
name|result1
init|=
name|GF
operator|.
name|multiply
argument_list|(
name|a
argument_list|,
name|GF
operator|.
name|add
argument_list|(
name|b
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|int
index|[]
name|result2
init|=
name|GF
operator|.
name|add
argument_list|(
name|GF
operator|.
name|multiply
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|GF
operator|.
name|multiply
argument_list|(
name|a
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Distributivity test on polynomials failed"
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|equals
argument_list|(
name|result1
argument_list|,
name|result2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSubstitute ()
specifier|public
name|void
name|testSubstitute
parameter_list|()
block|{
specifier|final
name|int
name|TEST_LEN
init|=
literal|15
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_TIMES
condition|;
name|i
operator|++
control|)
block|{
name|int
index|[]
name|a
init|=
name|randGFPoly
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|TEST_LEN
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
index|[]
name|b
init|=
name|randGFPoly
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|TEST_LEN
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
index|[]
name|c
init|=
name|randGFPoly
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|TEST_LEN
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|randGF
argument_list|()
decl_stmt|;
comment|// (a * b * c)(x)
name|int
name|result1
init|=
name|GF
operator|.
name|substitute
argument_list|(
name|GF
operator|.
name|multiply
argument_list|(
name|GF
operator|.
name|multiply
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|,
name|c
argument_list|)
argument_list|,
name|x
argument_list|)
decl_stmt|;
comment|// a(x) * b(x) * c(x)
name|int
name|result2
init|=
name|GF
operator|.
name|multiply
argument_list|(
name|GF
operator|.
name|multiply
argument_list|(
name|GF
operator|.
name|substitute
argument_list|(
name|a
argument_list|,
name|x
argument_list|)
argument_list|,
name|GF
operator|.
name|substitute
argument_list|(
name|b
argument_list|,
name|x
argument_list|)
argument_list|)
argument_list|,
name|GF
operator|.
name|substitute
argument_list|(
name|c
argument_list|,
name|x
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Substitute test on polynomial failed"
argument_list|,
name|result1
operator|==
name|result2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSolveVandermondeSystem ()
specifier|public
name|void
name|testSolveVandermondeSystem
parameter_list|()
block|{
specifier|final
name|int
name|TEST_LEN
init|=
literal|15
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_TIMES
condition|;
name|i
operator|++
control|)
block|{
name|int
index|[]
name|z
init|=
name|randGFPoly
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|TEST_LEN
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// generate distinct values for x
name|int
index|[]
name|x
init|=
operator|new
name|int
index|[
name|z
operator|.
name|length
index|]
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|s
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|size
argument_list|()
operator|!=
name|z
operator|.
name|length
condition|)
block|{
name|s
operator|.
name|add
argument_list|(
name|randGF
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|t
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|v
range|:
name|s
control|)
block|{
name|x
index|[
name|t
operator|++
index|]
operator|=
name|v
expr_stmt|;
block|}
comment|// compute the output for the Vandermonde system
name|int
index|[]
name|y
init|=
operator|new
name|int
index|[
name|x
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|x
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|y
index|[
name|j
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|x
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
comment|//y[j] = y[j] + z[k] * pow(x[k], j);
name|y
index|[
name|j
index|]
operator|=
name|GF
operator|.
name|add
argument_list|(
name|y
index|[
name|j
index|]
argument_list|,
name|GF
operator|.
name|multiply
argument_list|(
name|GF
operator|.
name|power
argument_list|(
name|x
index|[
name|k
index|]
argument_list|,
name|j
argument_list|)
argument_list|,
name|z
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|GF
operator|.
name|solveVandermondeSystem
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Solving Vandermonde system failed"
argument_list|,
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|equals
argument_list|(
name|y
argument_list|,
name|z
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemainder ()
specifier|public
name|void
name|testRemainder
parameter_list|()
block|{
specifier|final
name|int
name|TEST_LEN
init|=
literal|15
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_TIMES
condition|;
name|i
operator|++
control|)
block|{
name|int
index|[]
name|quotient
init|=
literal|null
decl_stmt|;
name|int
index|[]
name|divisor
init|=
literal|null
decl_stmt|;
name|int
index|[]
name|remainder
init|=
literal|null
decl_stmt|;
name|int
index|[]
name|dividend
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|quotient
operator|=
name|randGFPoly
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|TEST_LEN
operator|-
literal|3
argument_list|)
operator|+
literal|3
argument_list|)
expr_stmt|;
name|divisor
operator|=
name|randGFPoly
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|quotient
operator|.
name|length
operator|-
literal|2
argument_list|)
operator|+
literal|2
argument_list|)
expr_stmt|;
name|remainder
operator|=
name|randGFPoly
argument_list|(
name|RAND
operator|.
name|nextInt
argument_list|(
name|divisor
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dividend
operator|=
name|GF
operator|.
name|add
argument_list|(
name|remainder
argument_list|,
name|GF
operator|.
name|multiply
argument_list|(
name|quotient
argument_list|,
name|divisor
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|quotient
index|[
name|quotient
operator|.
name|length
operator|-
literal|1
index|]
operator|!=
literal|0
operator|&&
name|divisor
index|[
name|divisor
operator|.
name|length
operator|-
literal|1
index|]
operator|!=
literal|0
operator|&&
name|remainder
index|[
name|remainder
operator|.
name|length
operator|-
literal|1
index|]
operator|!=
literal|0
condition|)
block|{
comment|// make sure all the leading terms are not zero
break|break;
block|}
block|}
name|GF
operator|.
name|remainder
argument_list|(
name|dividend
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|remainder
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Distributivity test on polynomials failed"
argument_list|,
name|dividend
index|[
name|j
index|]
operator|==
name|remainder
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

