begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PositionedReadable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Seekable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_class
DECL|class|RaidUtils
specifier|public
class|class
name|RaidUtils
block|{
comment|/**    * A {@link Progressable} that does nothing.    *    * We could have used Reporter.NULL here but that would introduce    * a dependency on mapreduce.    */
DECL|class|DummyProgressable
specifier|public
specifier|static
class|class
name|DummyProgressable
implements|implements
name|Progressable
block|{
comment|/**      * Do nothing.      */
annotation|@
name|Override
DECL|method|progress ()
specifier|public
name|void
name|progress
parameter_list|()
block|{     }
block|}
comment|/**    * Removes files matching the trash file pattern.    */
DECL|method|filterTrash (Configuration conf, List<Path> files)
specifier|public
specifier|static
name|void
name|filterTrash
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|files
parameter_list|)
block|{
comment|// Remove files under Trash.
name|String
name|trashPattern
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"raid.blockfixer.trash.pattern"
argument_list|,
literal|"^/user/.*/\\.Trash.*"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Path
argument_list|>
name|it
init|=
name|files
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pathStr
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|Pattern
operator|.
name|matches
argument_list|(
name|trashPattern
argument_list|,
name|pathStr
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|readTillEnd (InputStream in, byte[] buf, boolean eofOK)
specifier|public
specifier|static
name|void
name|readTillEnd
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|boolean
name|eofOK
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|toRead
init|=
name|buf
operator|.
name|length
decl_stmt|;
name|int
name|numRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numRead
operator|<
name|toRead
condition|)
block|{
name|int
name|nread
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|numRead
argument_list|,
name|toRead
operator|-
name|numRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|nread
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|eofOK
condition|)
block|{
comment|// EOF hit, fill with zeros
name|Arrays
operator|.
name|fill
argument_list|(
name|buf
argument_list|,
name|numRead
argument_list|,
name|toRead
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|numRead
operator|=
name|toRead
expr_stmt|;
block|}
else|else
block|{
comment|// EOF hit, throw.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Premature EOF"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|numRead
operator|+=
name|nread
expr_stmt|;
block|}
block|}
block|}
DECL|method|copyBytes ( InputStream in, OutputStream out, byte[] buf, long count)
specifier|public
specifier|static
name|void
name|copyBytes
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|long
name|count
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|bytesRead
init|=
literal|0
init|;
name|bytesRead
operator|<
name|count
condition|;
control|)
block|{
name|int
name|toRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|buf
operator|.
name|length
argument_list|,
call|(
name|int
call|)
argument_list|(
name|count
operator|-
name|bytesRead
argument_list|)
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
name|bytesRead
operator|+=
name|toRead
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ZeroInputStream
specifier|public
specifier|static
class|class
name|ZeroInputStream
extends|extends
name|InputStream
implements|implements
name|Seekable
implements|,
name|PositionedReadable
block|{
DECL|field|endOffset
specifier|private
name|long
name|endOffset
decl_stmt|;
DECL|field|pos
specifier|private
name|long
name|pos
decl_stmt|;
DECL|method|ZeroInputStream (long endOffset)
specifier|public
name|ZeroInputStream
parameter_list|(
name|long
name|endOffset
parameter_list|)
block|{
name|this
operator|.
name|endOffset
operator|=
name|endOffset
expr_stmt|;
name|this
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|<
name|endOffset
condition|)
block|{
name|pos
operator|++
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|endOffset
operator|-
name|pos
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|seek (long seekOffset)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|seekOffset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|seekOffset
operator|<
name|endOffset
condition|)
block|{
name|pos
operator|=
name|seekOffset
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal Offset"
operator|+
name|pos
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|read (long position, byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|position
operator|<
name|endOffset
operator|&&
name|count
operator|<
name|length
condition|;
name|position
operator|++
control|)
block|{
name|buffer
index|[
name|offset
operator|+
name|count
index|]
operator|=
literal|0
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer, int offset, int length)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|position
operator|<
name|endOffset
operator|&&
name|count
operator|<
name|length
condition|;
name|position
operator|++
control|)
block|{
name|buffer
index|[
name|offset
operator|+
name|count
index|]
operator|=
literal|0
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|<
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Premature EOF"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFully (long position, byte[] buffer)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|readFully
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

