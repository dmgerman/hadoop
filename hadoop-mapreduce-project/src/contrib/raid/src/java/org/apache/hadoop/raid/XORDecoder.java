begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_class
DECL|class|XORDecoder
specifier|public
class|class
name|XORDecoder
extends|extends
name|Decoder
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.XORDecoder"
argument_list|)
decl_stmt|;
DECL|method|XORDecoder ( Configuration conf, int stripeSize)
specifier|public
name|XORDecoder
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|stripeSize
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|stripeSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fixErasedBlock ( FileSystem fs, Path srcFile, FileSystem parityFs, Path parityFile, long blockSize, long errorOffset, long bytesToSkip, long limit, OutputStream out)
specifier|protected
name|void
name|fixErasedBlock
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|srcFile
parameter_list|,
name|FileSystem
name|parityFs
parameter_list|,
name|Path
name|parityFile
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|long
name|errorOffset
parameter_list|,
name|long
name|bytesToSkip
parameter_list|,
name|long
name|limit
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fixing block at "
operator|+
name|srcFile
operator|+
literal|":"
operator|+
name|errorOffset
operator|+
literal|", skipping "
operator|+
name|bytesToSkip
operator|+
literal|", limit "
operator|+
name|limit
argument_list|)
expr_stmt|;
name|FileStatus
name|srcStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|srcFile
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|FSDataInputStream
argument_list|>
name|xorinputs
init|=
operator|new
name|ArrayList
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|parityFileIn
init|=
name|parityFs
operator|.
name|open
argument_list|(
name|parityFile
argument_list|)
decl_stmt|;
name|parityFileIn
operator|.
name|seek
argument_list|(
name|parityOffset
argument_list|(
name|errorOffset
argument_list|,
name|blockSize
argument_list|)
argument_list|)
expr_stmt|;
name|xorinputs
operator|.
name|add
argument_list|(
name|parityFileIn
argument_list|)
expr_stmt|;
name|long
name|errorBlockOffset
init|=
operator|(
name|errorOffset
operator|/
name|blockSize
operator|)
operator|*
name|blockSize
decl_stmt|;
name|long
index|[]
name|srcOffsets
init|=
name|stripeOffsets
argument_list|(
name|errorOffset
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcOffsets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|srcOffsets
index|[
name|i
index|]
operator|==
name|errorBlockOffset
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Skipping block at "
operator|+
name|srcFile
operator|+
literal|":"
operator|+
name|errorBlockOffset
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|srcOffsets
index|[
name|i
index|]
operator|<
name|srcStat
operator|.
name|getLen
argument_list|()
condition|)
block|{
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|srcFile
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|srcOffsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|xorinputs
operator|.
name|add
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
name|FSDataInputStream
index|[]
name|inputs
init|=
name|xorinputs
operator|.
name|toArray
argument_list|(
operator|new
name|FSDataInputStream
index|[]
block|{
literal|null
block|}
argument_list|)
decl_stmt|;
name|ParityInputStream
name|recovered
init|=
operator|new
name|ParityInputStream
argument_list|(
name|inputs
argument_list|,
name|limit
argument_list|,
name|readBufs
index|[
literal|0
index|]
argument_list|,
name|writeBufs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|recovered
operator|.
name|skip
argument_list|(
name|bytesToSkip
argument_list|)
expr_stmt|;
name|recovered
operator|.
name|drain
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|stripeOffsets (long errorOffset, long blockSize)
specifier|protected
name|long
index|[]
name|stripeOffsets
parameter_list|(
name|long
name|errorOffset
parameter_list|,
name|long
name|blockSize
parameter_list|)
block|{
name|long
index|[]
name|offsets
init|=
operator|new
name|long
index|[
name|stripeSize
index|]
decl_stmt|;
name|long
name|stripeIdx
init|=
name|errorOffset
operator|/
operator|(
name|blockSize
operator|*
name|stripeSize
operator|)
decl_stmt|;
name|long
name|startOffsetOfStripe
init|=
name|stripeIdx
operator|*
name|stripeSize
operator|*
name|blockSize
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripeSize
condition|;
name|i
operator|++
control|)
block|{
name|offsets
index|[
name|i
index|]
operator|=
name|startOffsetOfStripe
operator|+
name|i
operator|*
name|blockSize
expr_stmt|;
block|}
return|return
name|offsets
return|;
block|}
DECL|method|parityOffset (long errorOffset, long blockSize)
specifier|protected
name|long
name|parityOffset
parameter_list|(
name|long
name|errorOffset
parameter_list|,
name|long
name|blockSize
parameter_list|)
block|{
name|long
name|stripeIdx
init|=
name|errorOffset
operator|/
operator|(
name|blockSize
operator|*
name|stripeSize
operator|)
decl_stmt|;
return|return
name|stripeIdx
operator|*
name|blockSize
return|;
block|}
block|}
end_class

end_unit

