begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_class
DECL|class|ReedSolomonCode
specifier|public
class|class
name|ReedSolomonCode
implements|implements
name|ErasureCode
block|{
DECL|field|stripeSize
specifier|private
specifier|final
name|int
name|stripeSize
decl_stmt|;
DECL|field|paritySize
specifier|private
specifier|final
name|int
name|paritySize
decl_stmt|;
DECL|field|generatingPolynomial
specifier|private
specifier|final
name|int
index|[]
name|generatingPolynomial
decl_stmt|;
DECL|field|PRIMITIVE_ROOT
specifier|private
specifier|final
name|int
name|PRIMITIVE_ROOT
init|=
literal|2
decl_stmt|;
DECL|field|primitivePower
specifier|private
specifier|final
name|int
index|[]
name|primitivePower
decl_stmt|;
DECL|field|GF
specifier|private
specifier|final
name|GaloisField
name|GF
init|=
name|GaloisField
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|field|errSignature
specifier|private
name|int
index|[]
name|errSignature
decl_stmt|;
DECL|field|paritySymbolLocations
specifier|private
specifier|final
name|int
index|[]
name|paritySymbolLocations
decl_stmt|;
DECL|field|dataBuff
specifier|private
specifier|final
name|int
index|[]
name|dataBuff
decl_stmt|;
DECL|method|ReedSolomonCode (int stripeSize, int paritySize)
specifier|public
name|ReedSolomonCode
parameter_list|(
name|int
name|stripeSize
parameter_list|,
name|int
name|paritySize
parameter_list|)
block|{
assert|assert
operator|(
name|stripeSize
operator|+
name|paritySize
operator|<
name|GF
operator|.
name|getFieldSize
argument_list|()
operator|)
assert|;
name|this
operator|.
name|stripeSize
operator|=
name|stripeSize
expr_stmt|;
name|this
operator|.
name|paritySize
operator|=
name|paritySize
expr_stmt|;
name|this
operator|.
name|errSignature
operator|=
operator|new
name|int
index|[
name|paritySize
index|]
expr_stmt|;
name|this
operator|.
name|paritySymbolLocations
operator|=
operator|new
name|int
index|[
name|paritySize
index|]
expr_stmt|;
name|this
operator|.
name|dataBuff
operator|=
operator|new
name|int
index|[
name|paritySize
operator|+
name|stripeSize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paritySize
condition|;
name|i
operator|++
control|)
block|{
name|paritySymbolLocations
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
name|this
operator|.
name|primitivePower
operator|=
operator|new
name|int
index|[
name|stripeSize
operator|+
name|paritySize
index|]
expr_stmt|;
comment|// compute powers of the primitive root
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripeSize
operator|+
name|paritySize
condition|;
name|i
operator|++
control|)
block|{
name|primitivePower
index|[
name|i
index|]
operator|=
name|GF
operator|.
name|power
argument_list|(
name|PRIMITIVE_ROOT
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|// compute generating polynomial
name|int
index|[]
name|gen
init|=
block|{
literal|1
block|}
decl_stmt|;
name|int
index|[]
name|poly
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paritySize
condition|;
name|i
operator|++
control|)
block|{
name|poly
index|[
literal|0
index|]
operator|=
name|primitivePower
index|[
name|i
index|]
expr_stmt|;
name|poly
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
name|gen
operator|=
name|GF
operator|.
name|multiply
argument_list|(
name|gen
argument_list|,
name|poly
argument_list|)
expr_stmt|;
block|}
comment|// generating polynomial has all generating roots
name|generatingPolynomial
operator|=
name|gen
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|encode (int[] message, int[] parity)
specifier|public
name|void
name|encode
parameter_list|(
name|int
index|[]
name|message
parameter_list|,
name|int
index|[]
name|parity
parameter_list|)
block|{
assert|assert
operator|(
name|message
operator|.
name|length
operator|==
name|stripeSize
operator|&&
name|parity
operator|.
name|length
operator|==
name|paritySize
operator|)
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paritySize
condition|;
name|i
operator|++
control|)
block|{
name|dataBuff
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stripeSize
condition|;
name|i
operator|++
control|)
block|{
name|dataBuff
index|[
name|i
operator|+
name|paritySize
index|]
operator|=
name|message
index|[
name|i
index|]
expr_stmt|;
block|}
name|GF
operator|.
name|remainder
argument_list|(
name|dataBuff
argument_list|,
name|generatingPolynomial
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paritySize
condition|;
name|i
operator|++
control|)
block|{
name|parity
index|[
name|i
index|]
operator|=
name|dataBuff
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|decode (int[] data, int[] erasedLocation, int[] erasedValue)
specifier|public
name|void
name|decode
parameter_list|(
name|int
index|[]
name|data
parameter_list|,
name|int
index|[]
name|erasedLocation
parameter_list|,
name|int
index|[]
name|erasedValue
parameter_list|)
block|{
if|if
condition|(
name|erasedLocation
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
assert|assert
operator|(
name|erasedLocation
operator|.
name|length
operator|==
name|erasedValue
operator|.
name|length
operator|)
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedLocation
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|erasedLocation
index|[
name|i
index|]
index|]
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|erasedLocation
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|errSignature
index|[
name|i
index|]
operator|=
name|primitivePower
index|[
name|erasedLocation
index|[
name|i
index|]
index|]
expr_stmt|;
name|erasedValue
index|[
name|i
index|]
operator|=
name|GF
operator|.
name|substitute
argument_list|(
name|data
argument_list|,
name|primitivePower
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|GF
operator|.
name|solveVandermondeSystem
argument_list|(
name|errSignature
argument_list|,
name|erasedValue
argument_list|,
name|erasedLocation
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stripeSize ()
specifier|public
name|int
name|stripeSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|stripeSize
return|;
block|}
annotation|@
name|Override
DECL|method|paritySize ()
specifier|public
name|int
name|paritySize
parameter_list|()
block|{
return|return
name|this
operator|.
name|paritySize
return|;
block|}
annotation|@
name|Override
DECL|method|symbolSize ()
specifier|public
name|int
name|symbolSize
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|GF
operator|.
name|getFieldSize
argument_list|()
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

