begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Represents the contents of a HAR Index file. The HAR is assumed to be  * comprising of RAID parity files only and no directories.  */
end_comment

begin_class
DECL|class|HarIndex
specifier|public
class|class
name|HarIndex
block|{
DECL|field|indexFileName
specifier|public
specifier|static
specifier|final
name|String
name|indexFileName
init|=
literal|"_index"
decl_stmt|;
DECL|field|entries
specifier|private
name|List
argument_list|<
name|IndexEntry
argument_list|>
name|entries
init|=
operator|new
name|LinkedList
argument_list|<
name|IndexEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Represents information in a single line of the HAR index file.    */
DECL|class|IndexEntry
specifier|public
specifier|static
class|class
name|IndexEntry
block|{
DECL|field|fileName
name|String
name|fileName
decl_stmt|;
comment|// Name of the file in the part file.
DECL|field|startOffset
name|long
name|startOffset
decl_stmt|;
comment|// Start offset within the part file.
DECL|field|length
name|long
name|length
decl_stmt|;
comment|// Length of this file within the part file.
DECL|field|mtime
name|long
name|mtime
decl_stmt|;
comment|// Modification time of the file.
DECL|field|partFileName
name|String
name|partFileName
decl_stmt|;
comment|// Name of the part file.
DECL|method|IndexEntry (String fileName, long startOffset, long length, long mtime, String partFileName)
name|IndexEntry
parameter_list|(
name|String
name|fileName
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|long
name|length
parameter_list|,
name|long
name|mtime
parameter_list|,
name|String
name|partFileName
parameter_list|)
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|mtime
operator|=
name|mtime
expr_stmt|;
name|this
operator|.
name|partFileName
operator|=
name|partFileName
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"fileName="
operator|+
name|fileName
operator|+
literal|", startOffset="
operator|+
name|startOffset
operator|+
literal|", length="
operator|+
name|length
operator|+
literal|", mtime="
operator|+
name|mtime
operator|+
literal|", partFileName="
operator|+
name|partFileName
return|;
block|}
block|}
comment|/**    * Constructor that reads the contents of the index file.    * @param in An input stream to the index file.    * @param max The size of the index file.    * @throws IOException    */
DECL|method|HarIndex (InputStream in, long max)
specifier|public
name|HarIndex
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|long
name|max
parameter_list|)
throws|throws
name|IOException
block|{
name|LineReader
name|lineReader
init|=
operator|new
name|LineReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Text
name|text
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|long
name|nread
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nread
operator|<
name|max
condition|)
block|{
name|int
name|n
init|=
name|lineReader
operator|.
name|readLine
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|nread
operator|+=
name|n
expr_stmt|;
name|String
name|line
init|=
name|text
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|parseLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"UnsupportedEncodingException after reading "
operator|+
name|nread
operator|+
literal|"bytes"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Parses each line and extracts relevant information.    * @param line    * @throws UnsupportedEncodingException    */
DECL|method|parseLine (String line)
name|void
name|parseLine
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|String
index|[]
name|splits
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|boolean
name|isDir
init|=
literal|"dir"
operator|.
name|equals
argument_list|(
name|splits
index|[
literal|1
index|]
argument_list|)
condition|?
literal|true
else|:
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|isDir
operator|&&
name|splits
operator|.
name|length
operator|>=
literal|6
condition|)
block|{
name|String
name|name
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|splits
index|[
literal|2
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|long
name|startIndex
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|splits
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|splits
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|newsplits
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|splits
index|[
literal|5
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|newsplits
operator|!=
literal|null
operator|&&
name|newsplits
operator|.
name|length
operator|>=
literal|4
condition|)
block|{
name|long
name|mtime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|newsplits
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|IndexEntry
name|entry
init|=
operator|new
name|IndexEntry
argument_list|(
name|name
argument_list|,
name|startIndex
argument_list|,
name|length
argument_list|,
name|mtime
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Finds the index entry corresponding to a HAR partFile at an offset.    * @param partName The name of the part file (part-*).    * @param partFileOffset The offset into the part file.    * @return The entry corresponding to partName:partFileOffset.    */
DECL|method|findEntry (String partName, long partFileOffset)
specifier|public
name|IndexEntry
name|findEntry
parameter_list|(
name|String
name|partName
parameter_list|,
name|long
name|partFileOffset
parameter_list|)
block|{
for|for
control|(
name|IndexEntry
name|e
range|:
name|entries
control|)
block|{
name|boolean
name|nameMatch
init|=
name|partName
operator|.
name|equals
argument_list|(
name|e
operator|.
name|partFileName
argument_list|)
decl_stmt|;
name|boolean
name|inRange
init|=
operator|(
name|partFileOffset
operator|>=
name|e
operator|.
name|startOffset
operator|)
operator|&&
operator|(
name|partFileOffset
operator|<
name|e
operator|.
name|startOffset
operator|+
name|e
operator|.
name|length
operator|)
decl_stmt|;
if|if
condition|(
name|nameMatch
operator|&&
name|inRange
condition|)
block|{
return|return
name|e
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Finds the index entry corresponding to a file in the archive    */
DECL|method|findEntryByFileName (String fileName)
specifier|public
name|IndexEntry
name|findEntryByFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
for|for
control|(
name|IndexEntry
name|e
range|:
name|entries
control|)
block|{
if|if
condition|(
name|fileName
operator|.
name|equals
argument_list|(
name|e
operator|.
name|fileName
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

