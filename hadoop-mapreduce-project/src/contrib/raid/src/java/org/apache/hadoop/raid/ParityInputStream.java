begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * Wraps over multiple input streams and provides an input stream that is  * an XOR of the streams.  */
end_comment

begin_class
DECL|class|ParityInputStream
class|class
name|ParityInputStream
extends|extends
name|InputStream
block|{
DECL|field|DEFAULT_BUFSIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFSIZE
init|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|streams
specifier|private
name|InputStream
index|[]
name|streams
decl_stmt|;
DECL|field|xor
specifier|private
name|byte
index|[]
name|xor
decl_stmt|;
DECL|field|buf
specifier|private
name|byte
index|[]
name|buf
decl_stmt|;
DECL|field|bufSize
specifier|private
name|int
name|bufSize
decl_stmt|;
DECL|field|remaining
specifier|private
name|long
name|remaining
decl_stmt|;
DECL|field|available
specifier|private
name|int
name|available
init|=
literal|0
decl_stmt|;
DECL|field|readPos
specifier|private
name|int
name|readPos
init|=
literal|0
decl_stmt|;
DECL|method|ParityInputStream ( InputStream[] streams, long parityBlockSize, byte[] buf, byte[] xor)
specifier|public
name|ParityInputStream
parameter_list|(
name|InputStream
index|[]
name|streams
parameter_list|,
name|long
name|parityBlockSize
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|byte
index|[]
name|xor
parameter_list|)
block|{
assert|assert
name|buf
operator|.
name|length
operator|==
name|xor
operator|.
name|length
assert|;
name|bufSize
operator|=
name|buf
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|streams
operator|=
name|streams
expr_stmt|;
name|remaining
operator|=
name|parityBlockSize
expr_stmt|;
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|xor
operator|=
name|xor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|makeAvailable
argument_list|()
expr_stmt|;
if|if
condition|(
name|available
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|ret
init|=
name|xor
index|[
name|readPos
index|]
decl_stmt|;
name|readPos
operator|++
expr_stmt|;
name|available
operator|--
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte b[], int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|makeAvailable
argument_list|()
expr_stmt|;
if|if
condition|(
name|available
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|ret
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|available
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ret
condition|;
operator|++
name|i
control|)
block|{
name|b
index|[
name|off
operator|+
name|i
index|]
operator|=
name|xor
index|[
name|readPos
operator|+
name|i
index|]
expr_stmt|;
block|}
name|readPos
operator|+=
name|ret
expr_stmt|;
name|available
operator|-=
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|InputStream
name|i
range|:
name|streams
control|)
block|{
name|i
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Send the contents of the stream to the sink.    * @param sink    * @param reporter    * @throws IOException    */
DECL|method|drain (OutputStream sink, Progressable reporter)
specifier|public
name|void
name|drain
parameter_list|(
name|OutputStream
name|sink
parameter_list|,
name|Progressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|makeAvailable
argument_list|()
expr_stmt|;
if|if
condition|(
name|available
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|sink
operator|.
name|write
argument_list|(
name|xor
argument_list|,
name|readPos
argument_list|,
name|available
argument_list|)
expr_stmt|;
name|available
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|reporter
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make some bytes available for reading in the internal buffer.    * @throws IOException    */
DECL|method|makeAvailable ()
specifier|private
name|void
name|makeAvailable
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|available
operator|>
literal|0
operator|||
name|remaining
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
comment|// Read some bytes from the first stream.
name|int
name|xorlen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|bufSize
argument_list|)
decl_stmt|;
name|readExact
argument_list|(
name|streams
index|[
literal|0
index|]
argument_list|,
name|xor
argument_list|,
name|xorlen
argument_list|)
expr_stmt|;
comment|// Read bytes from all the other streams and xor them.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|streams
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|readExact
argument_list|(
name|streams
index|[
name|i
index|]
argument_list|,
name|buf
argument_list|,
name|xorlen
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|xorlen
condition|;
name|j
operator|++
control|)
block|{
name|xor
index|[
name|j
index|]
operator|^=
name|buf
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
name|remaining
operator|-=
name|xorlen
expr_stmt|;
name|available
operator|=
name|xorlen
expr_stmt|;
name|readPos
operator|=
literal|0
expr_stmt|;
name|readPos
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|readExact (InputStream in, byte[] bufs, int toRead)
specifier|private
specifier|static
name|void
name|readExact
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|byte
index|[]
name|bufs
parameter_list|,
name|int
name|toRead
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|tread
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tread
operator|<
name|toRead
condition|)
block|{
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|(
name|bufs
argument_list|,
name|tread
argument_list|,
name|toRead
operator|-
name|tread
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
comment|// If the stream ends, fill in zeros.
name|Arrays
operator|.
name|fill
argument_list|(
name|bufs
argument_list|,
name|tread
argument_list|,
name|toRead
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|tread
operator|=
name|toRead
expr_stmt|;
block|}
else|else
block|{
name|tread
operator|+=
name|read
expr_stmt|;
block|}
block|}
assert|assert
name|tread
operator|==
name|toRead
assert|;
block|}
block|}
end_class

end_unit

