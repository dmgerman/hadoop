begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.raid
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|raid
operator|.
name|protocol
operator|.
name|PolicyList
import|;
end_import

begin_comment
comment|/**  * Maintains the configuration xml file that is read into memory.  */
end_comment

begin_class
DECL|class|ConfigManager
class|class
name|ConfigManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.raid.ConfigManager"
argument_list|)
decl_stmt|;
comment|/** Time to wait between checks of the config file */
DECL|field|RELOAD_INTERVAL
specifier|public
specifier|static
specifier|final
name|long
name|RELOAD_INTERVAL
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|/** Time to wait between successive runs of all policies */
DECL|field|RESCAN_INTERVAL
specifier|public
specifier|static
specifier|final
name|long
name|RESCAN_INTERVAL
init|=
literal|3600
operator|*
literal|1000
decl_stmt|;
DECL|field|HAR_PARTFILE_SIZE
specifier|public
specifier|static
specifier|final
name|long
name|HAR_PARTFILE_SIZE
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024l
decl_stmt|;
DECL|field|DISTRAID_MAX_JOBS
specifier|public
specifier|static
specifier|final
name|int
name|DISTRAID_MAX_JOBS
init|=
literal|10
decl_stmt|;
DECL|field|DISTRAID_MAX_FILES
specifier|public
specifier|static
specifier|final
name|int
name|DISTRAID_MAX_FILES
init|=
literal|10000
decl_stmt|;
comment|/**    * Time to wait after the config file has been modified before reloading it    * (this is done to prevent loading a file that hasn't been fully written).    */
DECL|field|RELOAD_WAIT
specifier|public
specifier|static
specifier|final
name|long
name|RELOAD_WAIT
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// Hadoop configuration
DECL|field|configFileName
specifier|private
name|String
name|configFileName
decl_stmt|;
comment|// Path to config XML file
DECL|field|lastReloadAttempt
specifier|private
name|long
name|lastReloadAttempt
decl_stmt|;
comment|// Last time we tried to reload the config file
DECL|field|lastSuccessfulReload
specifier|private
name|long
name|lastSuccessfulReload
decl_stmt|;
comment|// Last time we successfully reloaded config
DECL|field|lastReloadAttemptFailed
specifier|private
name|boolean
name|lastReloadAttemptFailed
init|=
literal|false
decl_stmt|;
DECL|field|reloadInterval
specifier|private
name|long
name|reloadInterval
init|=
name|RELOAD_INTERVAL
decl_stmt|;
DECL|field|periodicity
specifier|private
name|long
name|periodicity
decl_stmt|;
comment|// time between runs of all policies
DECL|field|harPartfileSize
specifier|private
name|long
name|harPartfileSize
decl_stmt|;
DECL|field|maxJobsPerPolicy
specifier|private
name|int
name|maxJobsPerPolicy
decl_stmt|;
comment|// Max no. of jobs running simultaneously for
comment|// a job.
DECL|field|maxFilesPerJob
specifier|private
name|int
name|maxFilesPerJob
decl_stmt|;
comment|// Max no. of files raided by a job.
comment|// Reload the configuration
DECL|field|doReload
specifier|private
name|boolean
name|doReload
decl_stmt|;
DECL|field|reloadThread
specifier|private
name|Thread
name|reloadThread
decl_stmt|;
DECL|field|running
specifier|private
specifier|volatile
name|boolean
name|running
init|=
literal|false
decl_stmt|;
comment|// Collection of all configured policies.
DECL|field|allPolicies
name|Collection
argument_list|<
name|PolicyList
argument_list|>
name|allPolicies
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyList
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ConfigManager (Configuration conf)
specifier|public
name|ConfigManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|RaidConfigurationException
throws|,
name|ClassNotFoundException
throws|,
name|ParserConfigurationException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|configFileName
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"raid.config.file"
argument_list|)
expr_stmt|;
name|this
operator|.
name|doReload
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"raid.config.reload"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|reloadInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"raid.config.reload.interval"
argument_list|,
name|RELOAD_INTERVAL
argument_list|)
expr_stmt|;
name|this
operator|.
name|periodicity
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"raid.policy.rescan.interval"
argument_list|,
name|RESCAN_INTERVAL
argument_list|)
expr_stmt|;
name|this
operator|.
name|harPartfileSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"raid.har.partfile.size"
argument_list|,
name|HAR_PARTFILE_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxJobsPerPolicy
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"raid.distraid.max.jobs"
argument_list|,
name|DISTRAID_MAX_JOBS
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxFilesPerJob
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"raid.distraid.max.files"
argument_list|,
name|DISTRAID_MAX_FILES
argument_list|)
expr_stmt|;
if|if
condition|(
name|configFileName
operator|==
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"No raid.config.file given in conf - "
operator|+
literal|"the Hadoop Raid utility cannot run. Aborting...."
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|reloadConfigs
argument_list|()
expr_stmt|;
name|lastSuccessfulReload
operator|=
name|RaidNode
operator|.
name|now
argument_list|()
expr_stmt|;
name|lastReloadAttempt
operator|=
name|RaidNode
operator|.
name|now
argument_list|()
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Reload config file if it hasn't been loaded in a while    * Returns true if the file was reloaded.    */
DECL|method|reloadConfigsIfNecessary ()
specifier|public
specifier|synchronized
name|boolean
name|reloadConfigsIfNecessary
parameter_list|()
block|{
name|long
name|time
init|=
name|RaidNode
operator|.
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|>
name|lastReloadAttempt
operator|+
name|reloadInterval
condition|)
block|{
name|lastReloadAttempt
operator|=
name|time
expr_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|configFileName
argument_list|)
decl_stmt|;
name|long
name|lastModified
init|=
name|file
operator|.
name|lastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastModified
operator|>
name|lastSuccessfulReload
operator|&&
name|time
operator|>
name|lastModified
operator|+
name|RELOAD_WAIT
condition|)
block|{
name|reloadConfigs
argument_list|()
expr_stmt|;
name|lastSuccessfulReload
operator|=
name|time
expr_stmt|;
name|lastReloadAttemptFailed
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|lastReloadAttemptFailed
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to reload config file - "
operator|+
literal|"will use existing configuration."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|lastReloadAttemptFailed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Updates the in-memory data structures from the config file. This file is    * expected to be in the following whitespace-separated format:    *<configuration><srcPath prefix="hdfs://hadoop.myhost.com:9000/user/warehouse/u_full/*"><policy name = RaidScanWeekly><destPath> hdfs://dfsname.myhost.com:9000/archive/</destPath><parentPolicy> RaidScanMonthly</parentPolicy><property><name>targetReplication</name><value>2</value><description> after RAIDing, decrease the replication factor of the file to                          this value.</description></property><property><name>metaReplication</name><value>2</value><description> the replication factor of the RAID meta file</description></property><property><name>stripeLength</name><value>10</value><description> the number of blocks to RAID together</description></property></policy></srcPath></configuration>    *    * Blank lines and lines starting with # are ignored.    *      * @throws IOException if the config file cannot be read.    * @throws RaidConfigurationException if configuration entries are invalid.    * @throws ClassNotFoundException if user-defined policy classes cannot be loaded    * @throws ParserConfigurationException if XML parser is misconfigured.    * @throws SAXException if config file is malformed.    * @returns A new set of policy categories.    */
DECL|method|reloadConfigs ()
name|void
name|reloadConfigs
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|ClassNotFoundException
throws|,
name|RaidConfigurationException
block|{
if|if
condition|(
name|configFileName
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|configFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RaidConfigurationException
argument_list|(
literal|"Configuration file "
operator|+
name|configFileName
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
comment|// Create some temporary hashmaps to hold the new allocs, and we only save
comment|// them in our fields if we have parsed the entire allocs file successfully.
name|List
argument_list|<
name|PolicyList
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyList
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|periodicityValue
init|=
name|periodicity
decl_stmt|;
comment|// Read and parse the configuration file.
comment|// allow include files in configuration file
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|docBuilderFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|docBuilderFactory
operator|.
name|setXIncludeAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to set setXIncludeAware(true) for raid parser "
operator|+
name|docBuilderFactory
operator|+
literal|":"
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Reloading config file "
operator|+
name|file
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"configuration"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|RaidConfigurationException
argument_list|(
literal|"Bad configuration file: "
operator|+
literal|"top-level element not<configuration>"
argument_list|)
throw|;
name|NodeList
name|elements
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PolicyInfo
argument_list|>
name|existingPolicies
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PolicyInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// loop through all the configured source paths.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|elements
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|Element
operator|)
condition|)
block|{
continue|continue;
block|}
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
name|String
name|elementTagName
init|=
name|element
operator|.
name|getTagName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"srcPath"
operator|.
name|equalsIgnoreCase
argument_list|(
name|elementTagName
argument_list|)
condition|)
block|{
name|String
name|srcPathPrefix
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"prefix"
argument_list|)
decl_stmt|;
name|PolicyList
name|policyList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|srcPathPrefix
operator|!=
literal|null
operator|&&
name|srcPathPrefix
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// Empty srcPath will have no effect but policies will be processed
comment|// This allow us to define some "abstract" policies
name|policyList
operator|=
operator|new
name|PolicyList
argument_list|()
expr_stmt|;
name|all
operator|.
name|add
argument_list|(
name|policyList
argument_list|)
expr_stmt|;
name|policyList
operator|.
name|setSrcPath
argument_list|(
name|conf
argument_list|,
name|srcPathPrefix
argument_list|)
expr_stmt|;
block|}
comment|// loop through all the policies for this source path
name|NodeList
name|policies
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|policies
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|node1
init|=
name|policies
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|node1
operator|instanceof
name|Element
operator|)
condition|)
block|{
continue|continue;
block|}
name|Element
name|policy
init|=
operator|(
name|Element
operator|)
name|node1
decl_stmt|;
if|if
condition|(
operator|!
literal|"policy"
operator|.
name|equalsIgnoreCase
argument_list|(
name|policy
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RaidConfigurationException
argument_list|(
literal|"Bad configuration file: "
operator|+
literal|"Expecting<policy> for srcPath "
operator|+
name|srcPathPrefix
argument_list|)
throw|;
block|}
name|String
name|policyName
init|=
name|policy
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|PolicyInfo
name|curr
init|=
operator|new
name|PolicyInfo
argument_list|(
name|policyName
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcPathPrefix
operator|!=
literal|null
operator|&&
name|srcPathPrefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|curr
operator|.
name|setSrcPath
argument_list|(
name|srcPathPrefix
argument_list|)
expr_stmt|;
block|}
comment|// loop through all the properties of this policy
name|NodeList
name|properties
init|=
name|policy
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|PolicyInfo
name|parent
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|properties
operator|.
name|getLength
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Node
name|node2
init|=
name|properties
operator|.
name|item
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|node2
operator|instanceof
name|Element
operator|)
condition|)
block|{
continue|continue;
block|}
name|Element
name|property
init|=
operator|(
name|Element
operator|)
name|node2
decl_stmt|;
name|String
name|propertyName
init|=
name|property
operator|.
name|getTagName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"erasureCode"
operator|.
name|equalsIgnoreCase
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|property
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|policyName
operator|+
literal|".erasureCode = "
operator|+
name|text
argument_list|)
expr_stmt|;
name|curr
operator|.
name|setErasureCode
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"description"
operator|.
name|equalsIgnoreCase
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|property
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|curr
operator|.
name|setDescription
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"parentPolicy"
operator|.
name|equalsIgnoreCase
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|property
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|parent
operator|=
name|existingPolicies
operator|.
name|get
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"property"
operator|.
name|equalsIgnoreCase
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|NodeList
name|nl
init|=
name|property
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|String
name|pname
init|=
literal|null
decl_stmt|,
name|pvalue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
name|nl
operator|.
name|getLength
argument_list|()
condition|;
name|l
operator|++
control|)
block|{
name|Node
name|node3
init|=
name|nl
operator|.
name|item
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|node3
operator|instanceof
name|Element
operator|)
condition|)
block|{
continue|continue;
block|}
name|Element
name|item
init|=
operator|(
name|Element
operator|)
name|node3
decl_stmt|;
name|String
name|itemName
init|=
name|item
operator|.
name|getTagName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"name"
operator|.
name|equalsIgnoreCase
argument_list|(
name|itemName
argument_list|)
condition|)
block|{
name|pname
operator|=
operator|(
operator|(
name|Text
operator|)
name|item
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"value"
operator|.
name|equalsIgnoreCase
argument_list|(
name|itemName
argument_list|)
condition|)
block|{
name|pvalue
operator|=
operator|(
operator|(
name|Text
operator|)
name|item
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pname
operator|!=
literal|null
operator|&&
name|pvalue
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|policyName
operator|+
literal|"."
operator|+
name|pname
operator|+
literal|" = "
operator|+
name|pvalue
argument_list|)
expr_stmt|;
name|curr
operator|.
name|setProperty
argument_list|(
name|pname
argument_list|,
name|pvalue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found bad property "
operator|+
name|propertyName
operator|+
literal|" for srcPath"
operator|+
name|srcPathPrefix
operator|+
literal|" policy name "
operator|+
name|policyName
operator|+
literal|". Ignoring."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// done with all properties of this policy
name|PolicyInfo
name|pinfo
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|pinfo
operator|=
operator|new
name|PolicyInfo
argument_list|(
name|policyName
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|pinfo
operator|.
name|copyFrom
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|pinfo
operator|.
name|copyFrom
argument_list|(
name|curr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pinfo
operator|=
name|curr
expr_stmt|;
block|}
if|if
condition|(
name|policyList
operator|!=
literal|null
condition|)
block|{
name|policyList
operator|.
name|add
argument_list|(
name|pinfo
argument_list|)
expr_stmt|;
block|}
name|existingPolicies
operator|.
name|put
argument_list|(
name|policyName
argument_list|,
name|pinfo
argument_list|)
expr_stmt|;
block|}
comment|// done with all policies for this srcpath
block|}
block|}
comment|// done with all srcPaths
name|setAllPolicies
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|periodicity
operator|=
name|periodicityValue
expr_stmt|;
return|return;
block|}
DECL|method|getPeriodicity ()
specifier|public
specifier|synchronized
name|long
name|getPeriodicity
parameter_list|()
block|{
return|return
name|periodicity
return|;
block|}
DECL|method|getHarPartfileSize ()
specifier|public
specifier|synchronized
name|long
name|getHarPartfileSize
parameter_list|()
block|{
return|return
name|harPartfileSize
return|;
block|}
DECL|method|getMaxJobsPerPolicy ()
specifier|public
specifier|synchronized
name|int
name|getMaxJobsPerPolicy
parameter_list|()
block|{
return|return
name|maxJobsPerPolicy
return|;
block|}
DECL|method|getMaxFilesPerJob ()
specifier|public
specifier|synchronized
name|int
name|getMaxFilesPerJob
parameter_list|()
block|{
return|return
name|maxFilesPerJob
return|;
block|}
comment|/**    * Get a collection of all policies    */
DECL|method|getAllPolicies ()
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|PolicyList
argument_list|>
name|getAllPolicies
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|(
name|allPolicies
argument_list|)
return|;
block|}
comment|/**    * Set a collection of all policies    */
DECL|method|setAllPolicies (Collection<PolicyList> value)
specifier|protected
specifier|synchronized
name|void
name|setAllPolicies
parameter_list|(
name|Collection
argument_list|<
name|PolicyList
argument_list|>
name|value
parameter_list|)
block|{
name|this
operator|.
name|allPolicies
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Start a background thread to reload the config file    */
DECL|method|startReload ()
name|void
name|startReload
parameter_list|()
block|{
if|if
condition|(
name|doReload
condition|)
block|{
name|reloadThread
operator|=
operator|new
name|UpdateThread
argument_list|()
expr_stmt|;
name|reloadThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Stop the background thread that reload the config file    */
DECL|method|stopReload ()
name|void
name|stopReload
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|reloadThread
operator|!=
literal|null
condition|)
block|{
name|running
operator|=
literal|false
expr_stmt|;
name|reloadThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|reloadThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|reloadThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * A thread which reloads the config file.    */
DECL|class|UpdateThread
specifier|private
class|class
name|UpdateThread
extends|extends
name|Thread
block|{
DECL|method|UpdateThread ()
specifier|private
name|UpdateThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"Raid update thread"
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|reloadInterval
argument_list|)
expr_stmt|;
name|reloadConfigsIfNecessary
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to reload config file "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

