begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|TestSimulatorEngine
specifier|public
class|class
name|TestSimulatorEngine
block|{
DECL|field|TIME_WARP
specifier|private
specifier|static
specifier|final
name|int
name|TIME_WARP
init|=
literal|1000
decl_stmt|;
DECL|field|random
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|class|TestSimpleEvent
specifier|public
specifier|static
class|class
name|TestSimpleEvent
extends|extends
name|SimulatorEvent
block|{
DECL|method|TestSimpleEvent (SimulatorEventListener listener, long timestamp)
specifier|public
name|TestSimpleEvent
parameter_list|(
name|SimulatorEventListener
name|listener
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|super
argument_list|(
name|listener
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Handling each {@link TestComplexEvent1} of level n will produce another    * {@link TestComplexEvent1} of level n-1 and 4 {@link TestSimpleEvent}s when    * n>0, produce no event if n=0. All events are created with a random time    * stamp within 1000 units into the future.    */
DECL|class|TestComplexEvent1
specifier|public
specifier|static
class|class
name|TestComplexEvent1
extends|extends
name|SimulatorEvent
block|{
DECL|field|level
specifier|private
name|int
name|level
decl_stmt|;
DECL|method|TestComplexEvent1 (SimulatorEventListener listener, long timeStamp, int level)
specifier|public
name|TestComplexEvent1
parameter_list|(
name|SimulatorEventListener
name|listener
parameter_list|,
name|long
name|timeStamp
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|super
argument_list|(
name|listener
argument_list|,
name|timeStamp
argument_list|)
expr_stmt|;
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
DECL|method|getLevel ()
specifier|public
name|int
name|getLevel
parameter_list|()
block|{
return|return
name|level
return|;
block|}
block|}
comment|/**    * Handling each {@link TestComplexEvent2} of level n will produce 2    * {@link TestComplexEvent2}s of level n-1 and 1 {@link TestSimpleEvent} when    * n>0, produce no event if n=0. All events are created with a random time    * stamp within 1000 units into the future.    */
DECL|class|TestComplexEvent2
specifier|public
class|class
name|TestComplexEvent2
extends|extends
name|TestComplexEvent1
block|{
DECL|method|TestComplexEvent2 (SimulatorEventListener listener, long timeStamp, int level)
specifier|public
name|TestComplexEvent2
parameter_list|(
name|SimulatorEventListener
name|listener
parameter_list|,
name|long
name|timeStamp
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|super
argument_list|(
name|listener
argument_list|,
name|timeStamp
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestListener
class|class
name|TestListener
implements|implements
name|SimulatorEventListener
block|{
annotation|@
name|Override
DECL|method|accept (SimulatorEvent event)
specifier|public
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|accept
parameter_list|(
name|SimulatorEvent
name|event
parameter_list|)
block|{
name|SimulatorEventListener
name|listener
init|=
name|event
operator|.
name|getListener
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|event
operator|.
name|getTimeStamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|TestComplexEvent2
condition|)
block|{
comment|// ce2(n) -> 2*ce2(n-1) + se
name|int
name|level
init|=
operator|(
operator|(
name|TestComplexEvent2
operator|)
name|event
operator|)
operator|.
name|getLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|level
operator|==
literal|0
condition|)
return|return
name|SimulatorEventQueue
operator|.
name|EMPTY_EVENTS
return|;
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|response
init|=
operator|new
name|ArrayList
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
name|response
operator|.
name|add
argument_list|(
operator|new
name|TestComplexEvent2
argument_list|(
name|listener
argument_list|,
name|now
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|TIME_WARP
argument_list|)
argument_list|,
name|level
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|add
argument_list|(
operator|new
name|TestSimpleEvent
argument_list|(
name|listener
argument_list|,
name|now
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|TIME_WARP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TestComplexEvent1
condition|)
block|{
name|TestComplexEvent1
name|e
init|=
operator|(
name|TestComplexEvent1
operator|)
name|event
decl_stmt|;
comment|// ce1(n) -> ce1(n-1) + 4*se
if|if
condition|(
name|e
operator|.
name|getLevel
argument_list|()
operator|==
literal|0
condition|)
return|return
name|SimulatorEventQueue
operator|.
name|EMPTY_EVENTS
return|;
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|response
init|=
operator|new
name|ArrayList
argument_list|<
name|SimulatorEvent
argument_list|>
argument_list|()
decl_stmt|;
name|response
operator|.
name|add
argument_list|(
operator|new
name|TestComplexEvent1
argument_list|(
name|listener
argument_list|,
name|now
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|TIME_WARP
argument_list|)
argument_list|,
name|e
operator|.
name|getLevel
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|response
operator|.
name|add
argument_list|(
operator|new
name|TestSimpleEvent
argument_list|(
name|listener
argument_list|,
name|now
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|TIME_WARP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|TestSimpleEvent
condition|)
block|{
return|return
name|SimulatorEventQueue
operator|.
name|EMPTY_EVENTS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown event type: "
operator|+
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (long when)
specifier|public
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|init
parameter_list|(
name|long
name|when
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|TestSimulator1
specifier|public
class|class
name|TestSimulator1
extends|extends
name|SimulatorEngine
block|{
DECL|field|level
specifier|private
name|int
name|level
init|=
literal|10
decl_stmt|;
annotation|@
name|Override
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
block|{
name|this
operator|.
name|queue
operator|.
name|add
argument_list|(
operator|new
name|TestComplexEvent1
argument_list|(
operator|new
name|TestListener
argument_list|()
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|TIME_WARP
argument_list|)
argument_list|,
name|level
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|summary (PrintStream out)
specifier|protected
name|void
name|summary
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|queue
operator|.
name|getCurrentTime
argument_list|()
operator|+
literal|", "
operator|+
name|queue
operator|.
name|getEventCount
argument_list|()
operator|+
literal|", "
operator|+
name|queue
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
operator|*
name|level
operator|+
literal|1
argument_list|,
name|queue
operator|.
name|getEventCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestSimulator2
specifier|public
class|class
name|TestSimulator2
extends|extends
name|SimulatorEngine
block|{
DECL|field|level
specifier|private
name|int
name|level
init|=
literal|10
decl_stmt|;
annotation|@
name|Override
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
block|{
name|this
operator|.
name|queue
operator|.
name|add
argument_list|(
operator|new
name|TestComplexEvent2
argument_list|(
operator|new
name|TestListener
argument_list|()
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|TIME_WARP
argument_list|)
argument_list|,
name|level
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|summary (PrintStream out)
specifier|protected
name|void
name|summary
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|queue
operator|.
name|getCurrentTime
argument_list|()
operator|+
literal|", "
operator|+
name|queue
operator|.
name|getEventCount
argument_list|()
operator|+
literal|", "
operator|+
name|queue
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
operator|(
literal|1
operator|<<
name|level
operator|)
operator|-
literal|2
argument_list|,
name|queue
operator|.
name|getEventCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link SimulatorEngine} using {@link TestSimulator1}. Insert a     * {@link TestComplexEvent1} in the beginning. The simulation stops when the    * {@link SimulatorEventQueue} is empty. Total number of events processed is checked    * against expected number (5*level+1).    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
DECL|method|testComplex1 ()
specifier|public
name|void
name|testComplex1
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|SimulatorEngine
name|simulation
init|=
operator|new
name|TestSimulator1
argument_list|()
decl_stmt|;
name|simulation
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test {@link SimulatorEngine} using {@link TestSimulator2}. Insert a     * {@link TestComplexEvent2} in the beginning. The simulation stops when the    * {@link SimulatorEventQueue} is empty. Total number of events processed is checked    * against expected number (3 * 2^level - 2).    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
DECL|method|testComplex2 ()
specifier|public
name|void
name|testComplex2
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|SimulatorEngine
name|simulation
init|=
operator|new
name|TestSimulator2
argument_list|()
decl_stmt|;
name|simulation
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

