begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|//
end_comment

begin_comment
comment|// collection of heartbeat() parameters whose correctness we care about
end_comment

begin_comment
comment|// and the response we give if they are correct
end_comment

begin_comment
comment|//
end_comment

begin_class
DECL|class|HeartbeatHelper
specifier|public
class|class
name|HeartbeatHelper
block|{
DECL|field|status
specifier|public
name|TaskTrackerStatus
name|status
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
literal|"dummytracker"
argument_list|,
literal|"dummyhost"
argument_list|)
decl_stmt|;
DECL|field|acceptNewTasks
specifier|public
name|boolean
name|acceptNewTasks
init|=
literal|true
decl_stmt|;
DECL|field|actions
specifier|public
name|List
argument_list|<
name|TaskTrackerAction
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskTrackerAction
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HeartbeatHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|addTaskTrackerAction (TaskTrackerAction action)
specifier|public
name|void
name|addTaskTrackerAction
parameter_list|(
name|TaskTrackerAction
name|action
parameter_list|)
block|{
name|actions
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
comment|// adds an expected TaskStatus report
DECL|method|addTaskReport (TaskStatus report)
specifier|public
name|void
name|addTaskReport
parameter_list|(
name|TaskStatus
name|report
parameter_list|)
block|{
comment|// there is no setTaskReports() in TaskTrackerStatus, so we need to
comment|// create a new status object with a copy of all the other fields
name|String
name|trackerName
init|=
name|status
operator|.
name|getTrackerName
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|status
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|httpPort
init|=
name|status
operator|.
name|getHttpPort
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|taskReports
init|=
name|status
operator|.
name|getTaskReports
argument_list|()
decl_stmt|;
name|int
name|failures
init|=
name|status
operator|.
name|getFailures
argument_list|()
decl_stmt|;
name|int
name|maxMapTasks
init|=
name|status
operator|.
name|getMaxMapSlots
argument_list|()
decl_stmt|;
name|int
name|maxReduceTasks
init|=
name|status
operator|.
name|getMaxReduceSlots
argument_list|()
decl_stmt|;
name|taskReports
operator|.
name|add
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|status
operator|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|trackerName
argument_list|,
name|host
argument_list|,
name|httpPort
argument_list|,
name|taskReports
argument_list|,
name|failures
argument_list|,
name|maxMapTasks
argument_list|,
name|maxReduceTasks
argument_list|)
expr_stmt|;
block|}
DECL|method|getTaskTrackerActions ()
specifier|public
name|TaskTrackerAction
index|[]
name|getTaskTrackerActions
parameter_list|()
block|{
return|return
name|actions
operator|.
name|toArray
argument_list|(
operator|new
name|TaskTrackerAction
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|// checks most incoming parameters we care about
DECL|method|checkHeartbeatParameters (TaskTrackerStatus otherStatus, boolean otherAcceptNewTasks)
specifier|public
name|void
name|checkHeartbeatParameters
parameter_list|(
name|TaskTrackerStatus
name|otherStatus
parameter_list|,
name|boolean
name|otherAcceptNewTasks
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatch in acceptNewTask"
argument_list|,
name|this
operator|.
name|acceptNewTasks
argument_list|,
name|otherAcceptNewTasks
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|taskReports
init|=
name|this
operator|.
name|status
operator|.
name|getTaskReports
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TaskStatus
argument_list|>
name|otherTaskReports
init|=
name|otherStatus
operator|.
name|getTaskReports
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatch in number of reported tasks"
argument_list|,
name|taskReports
operator|.
name|size
argument_list|()
argument_list|,
name|otherTaskReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskStatus
name|report
range|:
name|taskReports
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TaskStatus
name|otherReport
range|:
name|otherTaskReports
control|)
block|{
if|if
condition|(
name|report
operator|.
name|getTaskID
argument_list|()
operator|==
name|otherReport
operator|.
name|getTaskID
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Map/reduce task mismatch"
argument_list|,
name|report
operator|.
name|getIsMap
argument_list|()
argument_list|,
name|otherReport
operator|.
name|getIsMap
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatch in run state"
argument_list|,
name|report
operator|.
name|getRunState
argument_list|()
argument_list|,
name|otherReport
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatch in run phase"
argument_list|,
name|report
operator|.
name|getPhase
argument_list|()
argument_list|,
name|otherReport
operator|.
name|getPhase
argument_list|()
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Task status report not found, taskID="
operator|+
name|report
operator|.
name|getTaskID
argument_list|()
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

