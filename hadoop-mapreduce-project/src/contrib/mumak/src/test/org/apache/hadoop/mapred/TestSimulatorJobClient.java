begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStoryProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Pre21JobHistoryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskInfo
import|;
end_import

begin_class
DECL|class|TestSimulatorJobClient
specifier|public
class|class
name|TestSimulatorJobClient
block|{
DECL|field|jobTracker
name|MockSimulatorJobTracker
name|jobTracker
init|=
literal|null
decl_stmt|;
DECL|field|eventQueue
name|CheckedEventQueue
name|eventQueue
init|=
literal|null
decl_stmt|;
DECL|field|jobClient
name|SimulatorJobClient
name|jobClient
init|=
literal|null
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSimulatorJobClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|simulationStartTime
name|long
name|simulationStartTime
init|=
literal|100000
decl_stmt|;
DECL|field|heartbeatInterval
specifier|final
name|int
name|heartbeatInterval
init|=
literal|5000
decl_stmt|;
comment|// not used other than initializing SimJT
DECL|field|jobSubmissionTimes
specifier|final
name|long
index|[]
name|jobSubmissionTimes
init|=
operator|new
name|long
index|[]
block|{
literal|1240335960685L
block|,
literal|1240335962848L
block|,
literal|1240336843916L
block|,
literal|1240336853354L
block|,
literal|1240336893801L
block|,
literal|1240337079617L
block|,   }
decl_stmt|;
comment|// assume reading from trace is correct
annotation|@
name|Test
DECL|method|testRelativeStartTime ()
specifier|public
specifier|final
name|void
name|testRelativeStartTime
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|relativeStartTime
init|=
name|jobSubmissionTimes
index|[
literal|0
index|]
operator|-
name|simulationStartTime
decl_stmt|;
name|MockJobStoryProducer
name|jobStoryProducer
init|=
operator|new
name|MockJobStoryProducer
argument_list|(
name|jobSubmissionTimes
argument_list|,
name|relativeStartTime
argument_list|)
decl_stmt|;
try|try
block|{
name|jobTracker
operator|=
operator|new
name|MockSimulatorJobTracker
argument_list|(
name|simulationStartTime
argument_list|,
name|heartbeatInterval
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Couldn't set up the mock job tracker: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|eventQueue
operator|=
operator|new
name|CheckedEventQueue
argument_list|(
name|simulationStartTime
argument_list|)
expr_stmt|;
name|jobClient
operator|=
operator|new
name|SimulatorJobClient
argument_list|(
name|jobTracker
argument_list|,
name|jobStoryProducer
argument_list|)
expr_stmt|;
comment|// add all expected events
name|eventQueue
operator|.
name|addExpected
argument_list|(
name|simulationStartTime
argument_list|,
operator|new
name|JobSubmissionEvent
argument_list|(
name|jobClient
argument_list|,
name|simulationStartTime
argument_list|,
name|jobStoryProducer
operator|.
name|getJob
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|jobSubmissionTimes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|eventQueue
operator|.
name|addExpected
argument_list|(
name|jobSubmissionTimes
index|[
name|i
operator|-
literal|1
index|]
operator|-
name|relativeStartTime
argument_list|,
operator|new
name|JobSubmissionEvent
argument_list|(
name|jobClient
argument_list|,
name|jobSubmissionTimes
index|[
name|i
index|]
operator|-
name|relativeStartTime
argument_list|,
name|jobStoryProducer
operator|.
name|getJob
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|runUntil
init|=
name|eventQueue
operator|.
name|getLastCheckTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running until simulation time="
operator|+
name|runUntil
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SimulatorEvent
argument_list|>
name|events
init|=
name|jobClient
operator|.
name|init
argument_list|(
name|simulationStartTime
argument_list|)
decl_stmt|;
name|eventQueue
operator|.
name|addAll
argument_list|(
name|events
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// can't be empty as it must go past runUntil for verifiability
comment|// besides it is never empty because of HeartbeatEvent
name|SimulatorEvent
name|currentEvent
init|=
name|eventQueue
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// copy time, make sure TT does not modify it
name|long
name|now
init|=
name|currentEvent
operator|.
name|getTimeStamp
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Number of events to deliver="
operator|+
operator|(
name|eventQueue
operator|.
name|getSize
argument_list|()
operator|+
literal|1
operator|)
operator|+
literal|", now="
operator|+
name|now
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Calling accept(), event="
operator|+
name|currentEvent
operator|+
literal|", now="
operator|+
name|now
argument_list|)
expr_stmt|;
name|events
operator|=
name|jobClient
operator|.
name|accept
argument_list|(
name|currentEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|now
operator|>
name|runUntil
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Accept() returned "
operator|+
name|events
operator|.
name|size
argument_list|()
operator|+
literal|" new event(s)"
argument_list|)
expr_stmt|;
for|for
control|(
name|SimulatorEvent
name|newEvent
range|:
name|events
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"New event "
operator|+
name|newEvent
argument_list|)
expr_stmt|;
block|}
name|eventQueue
operator|.
name|addAll
argument_list|(
name|events
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done checking and enqueuing new events"
argument_list|)
expr_stmt|;
block|}
comment|// make sure we have seen all expected events, even for the last
comment|// time checked
name|LOG
operator|.
name|debug
argument_list|(
literal|"going to check if all expected events have been processed"
argument_list|)
expr_stmt|;
name|eventQueue
operator|.
name|checkMissingExpected
argument_list|()
expr_stmt|;
comment|// TODO: Mock JT should have consumed all entries from its job submission table
comment|//jobTracker.checkMissingJobSubmission();
block|}
DECL|class|MockJobStoryProducer
specifier|static
class|class
name|MockJobStoryProducer
implements|implements
name|JobStoryProducer
block|{
DECL|field|times
specifier|private
name|long
index|[]
name|times
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|field|jobs
specifier|private
name|List
argument_list|<
name|MockJobStory
argument_list|>
name|jobs
init|=
operator|new
name|ArrayList
argument_list|<
name|MockJobStory
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|method|MockJobStoryProducer (long[] times, long relativeStartTime)
specifier|public
name|MockJobStoryProducer
parameter_list|(
name|long
index|[]
name|times
parameter_list|,
name|long
name|relativeStartTime
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|times
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|times
operator|=
name|times
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|long
name|time
range|:
name|times
control|)
block|{
name|jobs
operator|.
name|add
argument_list|(
operator|new
name|MockJobStory
argument_list|(
name|random
argument_list|,
name|time
operator|-
name|relativeStartTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNextJob ()
specifier|public
name|JobStory
name|getNextJob
parameter_list|()
block|{
if|if
condition|(
name|index
operator|>=
name|times
operator|.
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|jobs
operator|.
name|get
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
DECL|method|getJob (int i)
specifier|public
name|JobStory
name|getJob
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|jobs
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
DECL|class|MockJobStory
specifier|static
class|class
name|MockJobStory
implements|implements
name|JobStory
block|{
DECL|field|random
specifier|private
name|Random
name|random
decl_stmt|;
DECL|field|submissionTime
specifier|private
name|long
name|submissionTime
decl_stmt|;
DECL|method|MockJobStory (Random random, long submissionTime)
specifier|public
name|MockJobStory
parameter_list|(
name|Random
name|random
parameter_list|,
name|long
name|submissionTime
parameter_list|)
block|{
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
name|this
operator|.
name|submissionTime
operator|=
name|submissionTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInputSplits ()
specifier|public
name|InputSplit
index|[]
name|getInputSplits
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getJobConf ()
specifier|public
name|JobConf
name|getJobConf
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getMapTaskAttemptInfoAdjusted (int taskNumber, int taskAttemptNumber, int locality)
specifier|public
name|TaskAttemptInfo
name|getMapTaskAttemptInfoAdjusted
parameter_list|(
name|int
name|taskNumber
parameter_list|,
name|int
name|taskAttemptNumber
parameter_list|,
name|int
name|locality
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberMaps ()
specifier|public
name|int
name|getNumberMaps
parameter_list|()
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberReduces ()
specifier|public
name|int
name|getNumberReduces
parameter_list|()
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSubmissionTime ()
specifier|public
name|long
name|getSubmissionTime
parameter_list|()
block|{
return|return
name|submissionTime
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskAttemptInfo (TaskType taskType, int taskNumber, int taskAttemptNumber)
specifier|public
name|TaskAttemptInfo
name|getTaskAttemptInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|,
name|int
name|taskAttemptNumber
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getTaskInfo (TaskType taskType, int taskNumber)
specifier|public
name|TaskInfo
name|getTaskInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getOutcome ()
specifier|public
name|Pre21JobHistoryConstants
operator|.
name|Values
name|getOutcome
parameter_list|()
block|{
return|return
name|Pre21JobHistoryConstants
operator|.
name|Values
operator|.
name|SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|JobConf
operator|.
name|DEFAULT_QUEUE_NAME
return|;
block|}
block|}
block|}
end_class

end_unit

