begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|StatusReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskInputOutputContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|MapContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
operator|.
name|ProcResourceValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ResourceUsageMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|DummyResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|LoadJob
operator|.
name|ResourceUsageMatcherRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|emulators
operator|.
name|resourceusage
operator|.
name|CumulativeCpuUsageEmulatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|emulators
operator|.
name|resourceusage
operator|.
name|ResourceUsageEmulatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|emulators
operator|.
name|resourceusage
operator|.
name|ResourceUsageMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|emulators
operator|.
name|resourceusage
operator|.
name|CumulativeCpuUsageEmulatorPlugin
operator|.
name|DefaultCpuUsageEmulator
import|;
end_import

begin_comment
comment|/**  * Test Gridmix's resource emulator framework and supported plugins.  */
end_comment

begin_class
DECL|class|TestResourceUsageEmulators
specifier|public
class|class
name|TestResourceUsageEmulators
block|{
comment|/**    * A {@link ResourceUsageEmulatorPlugin} implementation for testing purpose.    * It essentially creates a file named 'test' in the test directory.    */
DECL|class|TestResourceUsageEmulatorPlugin
specifier|static
class|class
name|TestResourceUsageEmulatorPlugin
implements|implements
name|ResourceUsageEmulatorPlugin
block|{
DECL|field|rootTempDir
specifier|static
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|tempDir
specifier|static
specifier|final
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestResourceUsageEmulatorPlugin"
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_IDENTIFIER
specifier|static
specifier|final
name|String
name|DEFAULT_IDENTIFIER
init|=
literal|"test"
decl_stmt|;
DECL|field|touchPath
specifier|private
name|Path
name|touchPath
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|emulate ()
specifier|public
name|void
name|emulate
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// add some time between 2 calls to emulate()
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// sleep for 1s
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|touchPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// delete the touch file
comment|//TODO Search for a better touch utility
name|fs
operator|.
name|create
argument_list|(
name|touchPath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// recreate it
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getIdentifier ()
specifier|protected
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|DEFAULT_IDENTIFIER
return|;
block|}
DECL|method|getFilePath (String id)
specifier|private
specifier|static
name|Path
name|getFilePath
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|getInitFilePath (String id)
specifier|private
specifier|static
name|Path
name|getInitFilePath
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
name|id
operator|+
literal|".init"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (Configuration conf, ResourceUsageMetrics metrics, ResourceCalculatorPlugin monitor, Progressive progress)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ResourceUsageMetrics
name|metrics
parameter_list|,
name|ResourceCalculatorPlugin
name|monitor
parameter_list|,
name|Progressive
name|progress
parameter_list|)
block|{
comment|// add some time between 2 calls to initialize()
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// sleep for 1s
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|initPath
init|=
name|getInitFilePath
argument_list|(
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|initPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// delete the old file
name|fs
operator|.
name|create
argument_list|(
name|initPath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create a new one
name|touchPath
operator|=
name|getFilePath
argument_list|(
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|touchPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                }
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|deleteOnExit
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
block|}
block|}
block|}
comment|// test if the emulation framework successfully loaded this plugin
DECL|method|testInitialization (String id, Configuration conf)
specifier|static
name|long
name|testInitialization
parameter_list|(
name|String
name|id
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|testPath
init|=
name|getInitFilePath
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|testPath
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
operator|.
name|getModificationTime
argument_list|()
else|:
literal|0
return|;
block|}
comment|// test if the emulation framework successfully loaded this plugin
DECL|method|testEmulation (String id, Configuration conf)
specifier|static
name|long
name|testEmulation
parameter_list|(
name|String
name|id
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|testPath
init|=
name|getFilePath
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|exists
argument_list|(
name|testPath
argument_list|)
condition|?
name|fs
operator|.
name|getFileStatus
argument_list|(
name|testPath
argument_list|)
operator|.
name|getModificationTime
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
try|try
block|{
return|return
name|fs
operator|.
name|exists
argument_list|(
name|touchPath
argument_list|)
condition|?
literal|1.0f
else|:
literal|0f
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{}
return|return
literal|0f
return|;
block|}
block|}
comment|/**    * Test implementation of {@link ResourceUsageEmulatorPlugin} which creates    * a file named 'others' in the test directory.    */
DECL|class|TestOthers
specifier|static
class|class
name|TestOthers
extends|extends
name|TestResourceUsageEmulatorPlugin
block|{
DECL|field|ID
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"others"
decl_stmt|;
annotation|@
name|Override
DECL|method|getIdentifier ()
specifier|protected
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
block|}
comment|/**    * Test implementation of {@link ResourceUsageEmulatorPlugin} which creates    * a file named 'cpu' in the test directory.    */
DECL|class|TestCpu
specifier|static
class|class
name|TestCpu
extends|extends
name|TestResourceUsageEmulatorPlugin
block|{
DECL|field|ID
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"cpu"
decl_stmt|;
annotation|@
name|Override
DECL|method|getIdentifier ()
specifier|protected
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
block|}
comment|/**    * Test {@link ResourceUsageMatcher}.    */
annotation|@
name|Test
DECL|method|testResourceUsageMatcher ()
specifier|public
name|void
name|testResourceUsageMatcher
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceUsageMatcher
name|matcher
init|=
operator|new
name|ResourceUsageMatcher
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|ResourceUsageMatcher
operator|.
name|RESOURCE_USAGE_EMULATION_PLUGINS
argument_list|,
name|TestResourceUsageEmulatorPlugin
operator|.
name|class
argument_list|,
name|ResourceUsageEmulatorPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|matcher
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|matchResourceUsage
argument_list|()
expr_stmt|;
name|String
name|id
init|=
name|TestResourceUsageEmulatorPlugin
operator|.
name|DEFAULT_IDENTIFIER
decl_stmt|;
name|long
name|result
init|=
name|TestResourceUsageEmulatorPlugin
operator|.
name|testInitialization
argument_list|(
name|id
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Resource usage matcher failed to initialize the configured"
operator|+
literal|" plugin"
argument_list|,
name|result
operator|>
name|currentTime
argument_list|)
expr_stmt|;
name|result
operator|=
name|TestResourceUsageEmulatorPlugin
operator|.
name|testEmulation
argument_list|(
name|id
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Resource usage matcher failed to load and emulate the"
operator|+
literal|" configured plugin"
argument_list|,
name|result
operator|>
name|currentTime
argument_list|)
expr_stmt|;
comment|// test plugin order to first emulate cpu and then others
name|conf
operator|.
name|setStrings
argument_list|(
name|ResourceUsageMatcher
operator|.
name|RESOURCE_USAGE_EMULATION_PLUGINS
argument_list|,
name|TestCpu
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|TestOthers
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// test the initialization order
name|long
name|time1
init|=
name|TestResourceUsageEmulatorPlugin
operator|.
name|testInitialization
argument_list|(
name|TestCpu
operator|.
name|ID
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|time2
init|=
name|TestResourceUsageEmulatorPlugin
operator|.
name|testInitialization
argument_list|(
name|TestOthers
operator|.
name|ID
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Resource usage matcher failed to initialize the configured"
operator|+
literal|" plugins in order"
argument_list|,
name|time1
operator|<
name|time2
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|matchResourceUsage
argument_list|()
expr_stmt|;
comment|// Note that the cpu usage emulator plugin is configured 1st and then the
comment|// others plugin.
name|time1
operator|=
name|TestResourceUsageEmulatorPlugin
operator|.
name|testInitialization
argument_list|(
name|TestCpu
operator|.
name|ID
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|time2
operator|=
name|TestResourceUsageEmulatorPlugin
operator|.
name|testInitialization
argument_list|(
name|TestOthers
operator|.
name|ID
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Resource usage matcher failed to load the configured plugins"
argument_list|,
name|time1
operator|<
name|time2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fakes the cumulative usage using {@link FakeCpuUsageEmulatorCore}.    */
DECL|class|FakeResourceUsageMonitor
specifier|static
class|class
name|FakeResourceUsageMonitor
extends|extends
name|DummyResourceCalculatorPlugin
block|{
DECL|field|core
specifier|private
name|FakeCpuUsageEmulatorCore
name|core
decl_stmt|;
DECL|method|FakeResourceUsageMonitor (FakeCpuUsageEmulatorCore core)
specifier|public
name|FakeResourceUsageMonitor
parameter_list|(
name|FakeCpuUsageEmulatorCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
block|}
comment|/**      * A dummy CPU usage monitor. Every call to       * {@link ResourceCalculatorPlugin#getCumulativeCpuTime()} will return the       * value of {@link FakeCpuUsageEmulatorCore#getNumCalls()}.      */
annotation|@
name|Override
DECL|method|getCumulativeCpuTime ()
specifier|public
name|long
name|getCumulativeCpuTime
parameter_list|()
block|{
return|return
name|core
operator|.
name|getCpuUsage
argument_list|()
return|;
block|}
comment|/**      * Returns a {@link ProcResourceValues} with cumulative cpu usage        * computed using {@link #getCumulativeCpuTime()}.      */
annotation|@
name|Override
DECL|method|getProcResourceValues ()
specifier|public
name|ProcResourceValues
name|getProcResourceValues
parameter_list|()
block|{
name|long
name|usageValue
init|=
name|getCumulativeCpuTime
argument_list|()
decl_stmt|;
return|return
operator|new
name|ProcResourceValues
argument_list|(
name|usageValue
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
comment|/**    * A dummy {@link Progressive} implementation that allows users to set the    * progress for testing. The {@link Progressive#getProgress()} call will     * return the last progress value set using     * {@link FakeProgressive#setProgress(float)}.    */
DECL|class|FakeProgressive
specifier|static
class|class
name|FakeProgressive
implements|implements
name|Progressive
block|{
DECL|field|progress
specifier|private
name|float
name|progress
init|=
literal|0F
decl_stmt|;
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|progress
return|;
block|}
DECL|method|setProgress (float progress)
name|void
name|setProgress
parameter_list|(
name|float
name|progress
parameter_list|)
block|{
name|this
operator|.
name|progress
operator|=
name|progress
expr_stmt|;
block|}
block|}
comment|/**    * A dummy reporter for {@link LoadJob.ResourceUsageMatcherRunner}.    */
DECL|class|DummyReporter
specifier|private
specifier|static
class|class
name|DummyReporter
extends|extends
name|StatusReporter
block|{
DECL|field|progress
specifier|private
name|Progressive
name|progress
decl_stmt|;
DECL|method|DummyReporter (Progressive progress)
name|DummyReporter
parameter_list|(
name|Progressive
name|progress
parameter_list|)
block|{
name|this
operator|.
name|progress
operator|=
name|progress
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCounter (Enum<?> name)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|getCounter
parameter_list|(
name|Enum
argument_list|<
name|?
argument_list|>
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getCounter (String group, String name)
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Counter
name|getCounter
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|progress ()
specifier|public
name|void
name|progress
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
name|progress
operator|.
name|getProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setStatus (String status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{     }
block|}
comment|// Extends ResourceUsageMatcherRunner for testing.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|FakeResourceUsageMatcherRunner
specifier|private
specifier|static
class|class
name|FakeResourceUsageMatcherRunner
extends|extends
name|ResourceUsageMatcherRunner
block|{
DECL|method|FakeResourceUsageMatcherRunner (TaskInputOutputContext context, ResourceUsageMetrics metrics)
name|FakeResourceUsageMatcherRunner
parameter_list|(
name|TaskInputOutputContext
name|context
parameter_list|,
name|ResourceUsageMetrics
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
comment|// test ResourceUsageMatcherRunner
DECL|method|test ()
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|match
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link LoadJob.ResourceUsageMatcherRunner}.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testResourceUsageMatcherRunner ()
specifier|public
name|void
name|testResourceUsageMatcherRunner
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FakeProgressive
name|progress
init|=
operator|new
name|FakeProgressive
argument_list|()
decl_stmt|;
comment|// set the resource calculator plugin
name|conf
operator|.
name|setClass
argument_list|(
name|TTConfig
operator|.
name|TT_RESOURCE_CALCULATOR_PLUGIN
argument_list|,
name|DummyResourceCalculatorPlugin
operator|.
name|class
argument_list|,
name|ResourceCalculatorPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// set the resources
comment|// set the resource implementation class
name|conf
operator|.
name|setClass
argument_list|(
name|ResourceUsageMatcher
operator|.
name|RESOURCE_USAGE_EMULATION_PLUGINS
argument_list|,
name|TestResourceUsageEmulatorPlugin
operator|.
name|class
argument_list|,
name|ResourceUsageEmulatorPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// initialize the matcher class
name|TaskAttemptID
name|id
init|=
operator|new
name|TaskAttemptID
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|StatusReporter
name|reporter
init|=
operator|new
name|DummyReporter
argument_list|(
name|progress
argument_list|)
decl_stmt|;
name|TaskInputOutputContext
name|context
init|=
operator|new
name|MapContextImpl
argument_list|(
name|conf
argument_list|,
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|reporter
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FakeResourceUsageMatcherRunner
name|matcher
init|=
operator|new
name|FakeResourceUsageMatcherRunner
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// check if the matcher initialized the plugin
name|String
name|identifier
init|=
name|TestResourceUsageEmulatorPlugin
operator|.
name|DEFAULT_IDENTIFIER
decl_stmt|;
name|long
name|initTime
init|=
name|TestResourceUsageEmulatorPlugin
operator|.
name|testInitialization
argument_list|(
name|identifier
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ResourceUsageMatcherRunner failed to initialize the"
operator|+
literal|" configured plugin"
argument_list|,
name|initTime
operator|>
name|currentTime
argument_list|)
expr_stmt|;
comment|// check the progress
name|assertEquals
argument_list|(
literal|"Progress mismatch in ResourceUsageMatcherRunner"
argument_list|,
literal|0
argument_list|,
name|progress
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
comment|// call match() and check progress
name|progress
operator|.
name|setProgress
argument_list|(
literal|0.01f
argument_list|)
expr_stmt|;
name|currentTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|matcher
operator|.
name|test
argument_list|()
expr_stmt|;
name|long
name|emulateTime
init|=
name|TestResourceUsageEmulatorPlugin
operator|.
name|testEmulation
argument_list|(
name|identifier
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ProgressBasedResourceUsageMatcher failed to load and emulate"
operator|+
literal|" the configured plugin"
argument_list|,
name|emulateTime
operator|>
name|currentTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link CumulativeCpuUsageEmulatorPlugin}'s core CPU usage emulation     * engine.    */
annotation|@
name|Test
DECL|method|testCpuUsageEmulator ()
specifier|public
name|void
name|testCpuUsageEmulator
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test CpuUsageEmulator calibration with fake resource calculator plugin
name|long
name|target
init|=
literal|100000L
decl_stmt|;
comment|// 100 secs
name|int
name|unitUsage
init|=
literal|50
decl_stmt|;
name|FakeCpuUsageEmulatorCore
name|fakeCpuEmulator
init|=
operator|new
name|FakeCpuUsageEmulatorCore
argument_list|()
decl_stmt|;
name|fakeCpuEmulator
operator|.
name|setUnitUsage
argument_list|(
name|unitUsage
argument_list|)
expr_stmt|;
name|FakeResourceUsageMonitor
name|fakeMonitor
init|=
operator|new
name|FakeResourceUsageMonitor
argument_list|(
name|fakeCpuEmulator
argument_list|)
decl_stmt|;
comment|// calibrate for 100ms
name|fakeCpuEmulator
operator|.
name|calibrate
argument_list|(
name|fakeMonitor
argument_list|,
name|target
argument_list|)
expr_stmt|;
comment|// by default, CpuUsageEmulator.calibrate() will consume 100ms of CPU usage
name|assertEquals
argument_list|(
literal|"Fake calibration failed"
argument_list|,
literal|100
argument_list|,
name|fakeMonitor
operator|.
name|getCumulativeCpuTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fake calibration failed"
argument_list|,
literal|100
argument_list|,
name|fakeCpuEmulator
operator|.
name|getCpuUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// by default, CpuUsageEmulator.performUnitComputation() will be called
comment|// twice
name|assertEquals
argument_list|(
literal|"Fake calibration failed"
argument_list|,
literal|2
argument_list|,
name|fakeCpuEmulator
operator|.
name|getNumCalls
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is a dummy class that fakes CPU usage.    */
DECL|class|FakeCpuUsageEmulatorCore
specifier|private
specifier|static
class|class
name|FakeCpuUsageEmulatorCore
extends|extends
name|DefaultCpuUsageEmulator
block|{
DECL|field|numCalls
specifier|private
name|int
name|numCalls
init|=
literal|0
decl_stmt|;
DECL|field|unitUsage
specifier|private
name|int
name|unitUsage
init|=
literal|1
decl_stmt|;
DECL|field|cpuUsage
specifier|private
name|int
name|cpuUsage
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|performUnitComputation ()
specifier|protected
name|void
name|performUnitComputation
parameter_list|()
block|{
operator|++
name|numCalls
expr_stmt|;
name|cpuUsage
operator|+=
name|unitUsage
expr_stmt|;
block|}
DECL|method|getNumCalls ()
name|int
name|getNumCalls
parameter_list|()
block|{
return|return
name|numCalls
return|;
block|}
DECL|method|getCpuUsage ()
name|int
name|getCpuUsage
parameter_list|()
block|{
return|return
name|cpuUsage
return|;
block|}
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
name|numCalls
operator|=
literal|0
expr_stmt|;
name|cpuUsage
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|setUnitUsage (int unitUsage)
name|void
name|setUnitUsage
parameter_list|(
name|int
name|unitUsage
parameter_list|)
block|{
name|this
operator|.
name|unitUsage
operator|=
name|unitUsage
expr_stmt|;
block|}
block|}
comment|// Creates a ResourceUsageMetrics object from the target usage
DECL|method|createMetrics (long target)
specifier|static
name|ResourceUsageMetrics
name|createMetrics
parameter_list|(
name|long
name|target
parameter_list|)
block|{
name|ResourceUsageMetrics
name|metrics
init|=
operator|new
name|ResourceUsageMetrics
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|setCumulativeCpuUsage
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setVirtualMemoryUsage
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setPhysicalMemoryUsage
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setHeapUsage
argument_list|(
name|target
argument_list|)
expr_stmt|;
return|return
name|metrics
return|;
block|}
comment|/**    * Test {@link CumulativeCpuUsageEmulatorPlugin}.    */
annotation|@
name|Test
DECL|method|testCumulativeCpuUsageEmulatorPlugin ()
specifier|public
name|void
name|testCumulativeCpuUsageEmulatorPlugin
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|long
name|targetCpuUsage
init|=
literal|1000L
decl_stmt|;
name|int
name|unitCpuUsage
init|=
literal|50
decl_stmt|;
comment|// fake progress indicator
name|FakeProgressive
name|fakeProgress
init|=
operator|new
name|FakeProgressive
argument_list|()
decl_stmt|;
comment|// fake cpu usage generator
name|FakeCpuUsageEmulatorCore
name|fakeCore
init|=
operator|new
name|FakeCpuUsageEmulatorCore
argument_list|()
decl_stmt|;
name|fakeCore
operator|.
name|setUnitUsage
argument_list|(
name|unitCpuUsage
argument_list|)
expr_stmt|;
comment|// a cumulative cpu usage emulator with fake core
name|CumulativeCpuUsageEmulatorPlugin
name|cpuPlugin
init|=
operator|new
name|CumulativeCpuUsageEmulatorPlugin
argument_list|(
name|fakeCore
argument_list|)
decl_stmt|;
comment|// test with invalid or missing resource usage value
name|ResourceUsageMetrics
name|invalidUsage
init|=
name|createMetrics
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cpuPlugin
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|invalidUsage
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// test if disabled cpu emulation plugin's emulate() call is a no-operation
comment|// this will test if the emulation plugin is disabled or not
name|int
name|numCallsPre
init|=
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
decl_stmt|;
name|long
name|cpuUsagePre
init|=
name|fakeCore
operator|.
name|getCpuUsage
argument_list|()
decl_stmt|;
name|cpuPlugin
operator|.
name|emulate
argument_list|()
expr_stmt|;
name|int
name|numCallsPost
init|=
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
decl_stmt|;
name|long
name|cpuUsagePost
init|=
name|fakeCore
operator|.
name|getCpuUsage
argument_list|()
decl_stmt|;
comment|//  test if no calls are made cpu usage emulator core
name|assertEquals
argument_list|(
literal|"Disabled cumulative CPU usage emulation plugin works!"
argument_list|,
name|numCallsPre
argument_list|,
name|numCallsPost
argument_list|)
expr_stmt|;
comment|//  test if no calls are made cpu usage emulator core
name|assertEquals
argument_list|(
literal|"Disabled cumulative CPU usage emulation plugin works!"
argument_list|,
name|cpuUsagePre
argument_list|,
name|cpuUsagePost
argument_list|)
expr_stmt|;
comment|// test with valid resource usage value
name|ResourceUsageMetrics
name|metrics
init|=
name|createMetrics
argument_list|(
name|targetCpuUsage
argument_list|)
decl_stmt|;
comment|// fake monitor
name|ResourceCalculatorPlugin
name|monitor
init|=
operator|new
name|FakeResourceUsageMonitor
argument_list|(
name|fakeCore
argument_list|)
decl_stmt|;
comment|// test with default emulation interval
name|testEmulationAccuracy
argument_list|(
name|conf
argument_list|,
name|fakeCore
argument_list|,
name|monitor
argument_list|,
name|metrics
argument_list|,
name|cpuPlugin
argument_list|,
name|targetCpuUsage
argument_list|,
name|targetCpuUsage
operator|/
name|unitCpuUsage
argument_list|)
expr_stmt|;
comment|// test with custom value for emulation interval of 20%
name|conf
operator|.
name|setFloat
argument_list|(
name|CumulativeCpuUsageEmulatorPlugin
operator|.
name|CPU_EMULATION_PROGRESS_INTERVAL
argument_list|,
literal|0.2F
argument_list|)
expr_stmt|;
name|testEmulationAccuracy
argument_list|(
name|conf
argument_list|,
name|fakeCore
argument_list|,
name|monitor
argument_list|,
name|metrics
argument_list|,
name|cpuPlugin
argument_list|,
name|targetCpuUsage
argument_list|,
name|targetCpuUsage
operator|/
name|unitCpuUsage
argument_list|)
expr_stmt|;
comment|// test if emulation interval boundary is respected (unit usage = 1)
comment|//  test the case where the current progress is less than threshold
name|fakeProgress
operator|=
operator|new
name|FakeProgressive
argument_list|()
expr_stmt|;
comment|// initialize
name|fakeCore
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fakeCore
operator|.
name|setUnitUsage
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|CumulativeCpuUsageEmulatorPlugin
operator|.
name|CPU_EMULATION_PROGRESS_INTERVAL
argument_list|,
literal|0.25F
argument_list|)
expr_stmt|;
name|cpuPlugin
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|metrics
argument_list|,
name|monitor
argument_list|,
name|fakeProgress
argument_list|)
expr_stmt|;
comment|// take a snapshot after the initialization
name|long
name|initCpuUsage
init|=
name|monitor
operator|.
name|getCumulativeCpuTime
argument_list|()
decl_stmt|;
name|long
name|initNumCalls
init|=
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
decl_stmt|;
comment|// test with 0 progress
name|testEmulationBoundary
argument_list|(
literal|0F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|cpuPlugin
argument_list|,
name|initCpuUsage
argument_list|,
name|initNumCalls
argument_list|,
literal|"[no-op, 0 progress]"
argument_list|)
expr_stmt|;
comment|// test with 24% progress
name|testEmulationBoundary
argument_list|(
literal|0.24F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|cpuPlugin
argument_list|,
name|initCpuUsage
argument_list|,
name|initNumCalls
argument_list|,
literal|"[no-op, 24% progress]"
argument_list|)
expr_stmt|;
comment|// test with 25% progress
comment|//  target = 1000ms, target emulation at 25% = 250ms,
comment|//  weighed target = 1000 * 0.25^4 (we are using progress^4 as the weight)
comment|//                 ~ 4
comment|//  but current usage = init-usage = 100, hence expected = 100
name|testEmulationBoundary
argument_list|(
literal|0.25F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|cpuPlugin
argument_list|,
name|initCpuUsage
argument_list|,
name|initNumCalls
argument_list|,
literal|"[op, 25% progress]"
argument_list|)
expr_stmt|;
comment|// test with 80% progress
comment|//  target = 1000ms, target emulation at 80% = 800ms,
comment|//  weighed target = 1000 * 0.25^4 (we are using progress^4 as the weight)
comment|//                 ~ 410
comment|//  current-usage = init-usage = 100, hence expected-usage = 410
name|testEmulationBoundary
argument_list|(
literal|0.80F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|cpuPlugin
argument_list|,
literal|410
argument_list|,
literal|410
argument_list|,
literal|"[op, 80% progress]"
argument_list|)
expr_stmt|;
comment|// now test if the final call with 100% progress ramps up the CPU usage
name|testEmulationBoundary
argument_list|(
literal|1F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|cpuPlugin
argument_list|,
name|targetCpuUsage
argument_list|,
name|targetCpuUsage
argument_list|,
literal|"[op, 100% progress]"
argument_list|)
expr_stmt|;
comment|// test if emulation interval boundary is respected (unit usage = 50)
comment|//  test the case where the current progress is less than threshold
name|fakeProgress
operator|=
operator|new
name|FakeProgressive
argument_list|()
expr_stmt|;
comment|// initialize
name|fakeCore
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fakeCore
operator|.
name|setUnitUsage
argument_list|(
name|unitCpuUsage
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|CumulativeCpuUsageEmulatorPlugin
operator|.
name|CPU_EMULATION_PROGRESS_INTERVAL
argument_list|,
literal|0.40F
argument_list|)
expr_stmt|;
name|cpuPlugin
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|metrics
argument_list|,
name|monitor
argument_list|,
name|fakeProgress
argument_list|)
expr_stmt|;
comment|// take a snapshot after the initialization
name|initCpuUsage
operator|=
name|monitor
operator|.
name|getCumulativeCpuTime
argument_list|()
expr_stmt|;
name|initNumCalls
operator|=
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
expr_stmt|;
comment|// test with 0 progress
name|testEmulationBoundary
argument_list|(
literal|0F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|cpuPlugin
argument_list|,
name|initCpuUsage
argument_list|,
name|initNumCalls
argument_list|,
literal|"[no-op, 0 progress]"
argument_list|)
expr_stmt|;
comment|// test with 39% progress
name|testEmulationBoundary
argument_list|(
literal|0.39F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|cpuPlugin
argument_list|,
name|initCpuUsage
argument_list|,
name|initNumCalls
argument_list|,
literal|"[no-op, 39% progress]"
argument_list|)
expr_stmt|;
comment|// test with 40% progress
comment|//  target = 1000ms, target emulation at 40% = 4000ms,
comment|//  weighed target = 1000 * 0.40^4 (we are using progress^4 as the weight)
comment|//                 ~ 26
comment|// current-usage = init-usage = 100, hence expected-usage = 100
name|testEmulationBoundary
argument_list|(
literal|0.40F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|cpuPlugin
argument_list|,
name|initCpuUsage
argument_list|,
name|initNumCalls
argument_list|,
literal|"[op, 40% progress]"
argument_list|)
expr_stmt|;
comment|// test with 90% progress
comment|//  target = 1000ms, target emulation at 90% = 900ms,
comment|//  weighed target = 1000 * 0.90^4 (we are using progress^4 as the weight)
comment|//                 ~ 657
comment|//  current-usage = init-usage = 100, hence expected-usage = 657 but
comment|//  the fake-core increases in steps of 50, hence final target = 700
name|testEmulationBoundary
argument_list|(
literal|0.90F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|cpuPlugin
argument_list|,
literal|700
argument_list|,
literal|700
operator|/
name|unitCpuUsage
argument_list|,
literal|"[op, 90% progress]"
argument_list|)
expr_stmt|;
comment|// now test if the final call with 100% progress ramps up the CPU usage
name|testEmulationBoundary
argument_list|(
literal|1F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|cpuPlugin
argument_list|,
name|targetCpuUsage
argument_list|,
name|targetCpuUsage
operator|/
name|unitCpuUsage
argument_list|,
literal|"[op, 100% progress]"
argument_list|)
expr_stmt|;
block|}
comment|// test whether the CPU usage emulator achieves the desired target using
comment|// desired calls to the underling core engine.
DECL|method|testEmulationAccuracy (Configuration conf, FakeCpuUsageEmulatorCore fakeCore, ResourceCalculatorPlugin monitor, ResourceUsageMetrics metrics, CumulativeCpuUsageEmulatorPlugin cpuPlugin, long expectedTotalCpuUsage, long expectedTotalNumCalls)
specifier|private
specifier|static
name|void
name|testEmulationAccuracy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FakeCpuUsageEmulatorCore
name|fakeCore
parameter_list|,
name|ResourceCalculatorPlugin
name|monitor
parameter_list|,
name|ResourceUsageMetrics
name|metrics
parameter_list|,
name|CumulativeCpuUsageEmulatorPlugin
name|cpuPlugin
parameter_list|,
name|long
name|expectedTotalCpuUsage
parameter_list|,
name|long
name|expectedTotalNumCalls
parameter_list|)
throws|throws
name|Exception
block|{
name|FakeProgressive
name|fakeProgress
init|=
operator|new
name|FakeProgressive
argument_list|()
decl_stmt|;
name|fakeCore
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cpuPlugin
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|metrics
argument_list|,
name|monitor
argument_list|,
name|fakeProgress
argument_list|)
expr_stmt|;
name|int
name|numLoops
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|fakeProgress
operator|.
name|getProgress
argument_list|()
operator|<
literal|1
condition|)
block|{
operator|++
name|numLoops
expr_stmt|;
name|float
name|progress
init|=
operator|(
name|float
operator|)
name|numLoops
operator|/
literal|100
decl_stmt|;
name|fakeProgress
operator|.
name|setProgress
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|cpuPlugin
operator|.
name|emulate
argument_list|()
expr_stmt|;
block|}
comment|// test if the resource plugin shows the expected invocations
name|assertEquals
argument_list|(
literal|"Cumulative cpu usage emulator plugin failed (num calls)!"
argument_list|,
name|expectedTotalNumCalls
argument_list|,
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// test if the resource plugin shows the expected usage
name|assertEquals
argument_list|(
literal|"Cumulative cpu usage emulator plugin failed (total usage)!"
argument_list|,
name|expectedTotalCpuUsage
argument_list|,
name|fakeCore
operator|.
name|getCpuUsage
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|// tests if the CPU usage emulation plugin emulates only at the expected
comment|// progress gaps
DECL|method|testEmulationBoundary (float progress, FakeCpuUsageEmulatorCore fakeCore, FakeProgressive fakeProgress, CumulativeCpuUsageEmulatorPlugin cpuPlugin, long expectedTotalCpuUsage, long expectedTotalNumCalls, String info)
specifier|private
specifier|static
name|void
name|testEmulationBoundary
parameter_list|(
name|float
name|progress
parameter_list|,
name|FakeCpuUsageEmulatorCore
name|fakeCore
parameter_list|,
name|FakeProgressive
name|fakeProgress
parameter_list|,
name|CumulativeCpuUsageEmulatorPlugin
name|cpuPlugin
parameter_list|,
name|long
name|expectedTotalCpuUsage
parameter_list|,
name|long
name|expectedTotalNumCalls
parameter_list|,
name|String
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|fakeProgress
operator|.
name|setProgress
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|cpuPlugin
operator|.
name|emulate
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Emulation interval test for cpu usage failed "
operator|+
name|info
operator|+
literal|"!"
argument_list|,
name|expectedTotalCpuUsage
argument_list|,
name|fakeCore
operator|.
name|getCpuUsage
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Emulation interval test for num calls failed "
operator|+
name|info
operator|+
literal|"!"
argument_list|,
name|expectedTotalNumCalls
argument_list|,
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

