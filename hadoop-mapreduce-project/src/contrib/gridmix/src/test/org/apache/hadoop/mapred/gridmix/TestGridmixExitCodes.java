begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Test Gridmix exit codes for different error types */
end_comment

begin_class
DECL|class|TestGridmixExitCodes
specifier|public
class|class
name|TestGridmixExitCodes
block|{
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|TestGridmixSubmission
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutDown ()
specifier|public
specifier|static
name|void
name|shutDown
parameter_list|()
throws|throws
name|IOException
block|{
name|TestGridmixSubmission
operator|.
name|shutDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test Gridmix exit codes for different error types like    *<li> when less than 2 arguments are provided to Gridmix    *<li> when input data dir already exists and -generate option is specified    *<li> Specifying negative input-data-size using -generate option    *<li> specifying a non-existing option to Gridmix command-line    *<li> Wrong combination of arguments to Gridmix run    *<li> Unable to create ioPath dir    *<li> Bad class specified as a user resolver    */
annotation|@
name|Test
DECL|method|testGridmixExitCodes ()
specifier|public
name|void
name|testGridmixExitCodes
parameter_list|()
throws|throws
name|Exception
block|{
name|testTooFewArgs
argument_list|()
expr_stmt|;
name|testNegativeInputDataSize
argument_list|()
expr_stmt|;
name|testNonexistingOption
argument_list|()
expr_stmt|;
name|testWrongArgs
argument_list|()
expr_stmt|;
name|testBadUserResolvers
argument_list|()
expr_stmt|;
name|testBadIOPath
argument_list|()
expr_stmt|;
name|testExistingInputDataDir
argument_list|()
expr_stmt|;
block|}
comment|/**    * Specify less than 2 arguments to Gridmix and verify the exit code    */
DECL|method|testTooFewArgs ()
specifier|private
name|void
name|testTooFewArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedExitCode
init|=
name|Gridmix
operator|.
name|ARGS_ERROR
decl_stmt|;
comment|// Provide only 1 argument to Gridmix
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"ioPath"
expr_stmt|;
name|TestGridmixSubmission
operator|.
name|testGridmixExitCode
argument_list|(
literal|true
argument_list|,
name|argv
argument_list|,
name|expectedExitCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Specify -ve input data size to be generated and verify the exit code    */
DECL|method|testNegativeInputDataSize ()
specifier|private
name|void
name|testNegativeInputDataSize
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedExitCode
init|=
name|Gridmix
operator|.
name|ARGS_ERROR
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-generate"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"-5m"
expr_stmt|;
comment|// -ve size
name|argv
index|[
literal|2
index|]
operator|=
literal|"ioPath"
expr_stmt|;
name|argv
index|[
literal|3
index|]
operator|=
literal|"-"
expr_stmt|;
name|TestGridmixSubmission
operator|.
name|testGridmixExitCode
argument_list|(
literal|true
argument_list|,
name|argv
argument_list|,
name|expectedExitCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Specify a non-existing option to Gridmix command-line and verify    * the exit code    */
DECL|method|testNonexistingOption ()
specifier|private
name|void
name|testNonexistingOption
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedExitCode
init|=
name|Gridmix
operator|.
name|ARGS_ERROR
decl_stmt|;
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|argv
index|[
literal|0
index|]
operator|=
literal|"-unknownOption"
expr_stmt|;
name|argv
index|[
literal|1
index|]
operator|=
literal|"dummyArg1"
expr_stmt|;
name|argv
index|[
literal|2
index|]
operator|=
literal|"dummyArg2"
expr_stmt|;
comment|// No need to call prepareArgs() as -unknownOption should make Gridmix fail
name|TestGridmixSubmission
operator|.
name|testGridmixExitCode
argument_list|(
literal|true
argument_list|,
name|argv
argument_list|,
name|expectedExitCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Specify wrong combination of arguments to Gridmix run and verify    * the exit code. This is done by specifying RoundRobinUserResolver and not    * specifying -users option    */
DECL|method|testWrongArgs ()
specifier|private
name|void
name|testWrongArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedExitCode
init|=
name|Gridmix
operator|.
name|ARGS_ERROR
decl_stmt|;
name|String
index|[]
name|argv
init|=
name|TestGridmixSubmission
operator|.
name|prepareArgs
argument_list|(
literal|true
argument_list|,
name|RoundRobinUserResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|TestGridmixSubmission
operator|.
name|testGridmixExitCode
argument_list|(
literal|true
argument_list|,
name|argv
argument_list|,
name|expectedExitCode
argument_list|)
expr_stmt|;
block|}
comment|/**    *<li> Specify a non-existing class as a userResolver class and validate the    * exit code    *<li> Specify an existing class which doesn't implement {@link UserResolver}    * as a userResolver class and validate the exit code    */
DECL|method|testBadUserResolvers ()
specifier|private
name|void
name|testBadUserResolvers
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expectedExitCode
init|=
name|Gridmix
operator|.
name|ARGS_ERROR
decl_stmt|;
comment|// Verify the case of an existing class that doesn't implement the
comment|// interface UserResolver
name|String
index|[]
name|argv
init|=
name|TestGridmixSubmission
operator|.
name|prepareArgs
argument_list|(
literal|true
argument_list|,
name|WrongUserResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|TestGridmixSubmission
operator|.
name|testGridmixExitCode
argument_list|(
literal|true
argument_list|,
name|argv
argument_list|,
name|expectedExitCode
argument_list|)
expr_stmt|;
comment|// Verify the case of a nonexisting class name as user resolver class
name|argv
operator|=
name|TestGridmixSubmission
operator|.
name|prepareArgs
argument_list|(
literal|true
argument_list|,
literal|"NonExistingUserResolver"
argument_list|)
expr_stmt|;
name|TestGridmixSubmission
operator|.
name|testGridmixExitCode
argument_list|(
literal|true
argument_list|,
name|argv
argument_list|,
name|expectedExitCode
argument_list|)
expr_stmt|;
block|}
comment|/** A class which doesn't implement the interface {@link UserResolver} */
DECL|class|WrongUserResolver
specifier|static
class|class
name|WrongUserResolver
block|{}
comment|/**    * Setup such that creation of ioPath dir fails and verify the exit code    */
DECL|method|testBadIOPath ()
specifier|private
name|void
name|testBadIOPath
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create foo as a file (not as a directory).
name|GridmixTestUtils
operator|.
name|dfs
operator|.
name|create
argument_list|(
name|TestGridmixSubmission
operator|.
name|ioPath
argument_list|)
expr_stmt|;
comment|// This ioPath cannot be created as a directory now.
name|int
name|expectedExitCode
init|=
name|Gridmix
operator|.
name|STARTUP_FAILED_ERROR
decl_stmt|;
name|String
index|[]
name|argv
init|=
name|TestGridmixSubmission
operator|.
name|prepareArgs
argument_list|(
literal|true
argument_list|,
name|EchoUserResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|TestGridmixSubmission
operator|.
name|testGridmixExitCode
argument_list|(
literal|true
argument_list|,
name|argv
argument_list|,
name|expectedExitCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create input data dir and specify -generate option verify the exit code    */
DECL|method|testExistingInputDataDir ()
specifier|private
name|void
name|testExistingInputDataDir
parameter_list|()
throws|throws
name|Exception
block|{
name|createInputDataDirectory
argument_list|(
name|TestGridmixSubmission
operator|.
name|ioPath
argument_list|)
expr_stmt|;
name|int
name|expectedExitCode
init|=
name|Gridmix
operator|.
name|STARTUP_FAILED_ERROR
decl_stmt|;
name|String
index|[]
name|argv
init|=
name|TestGridmixSubmission
operator|.
name|prepareArgs
argument_list|(
literal|true
argument_list|,
name|EchoUserResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|TestGridmixSubmission
operator|.
name|testGridmixExitCode
argument_list|(
literal|true
argument_list|,
name|argv
argument_list|,
name|expectedExitCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create input data directory of Gridmix run    * @param ioPath ioPath argument of Gridmix run    */
DECL|method|createInputDataDirectory (Path ioPath)
specifier|private
specifier|static
name|void
name|createInputDataDirectory
parameter_list|(
name|Path
name|ioPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|inputDir
init|=
name|Gridmix
operator|.
name|getGridmixInputDataPath
argument_list|(
name|ioPath
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|GridmixTestUtils
operator|.
name|dfs
argument_list|,
name|inputDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

