begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|DummyResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|DebugJobProducer
operator|.
name|MockJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|TestHighRamJob
operator|.
name|DummyGridmixJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|TestResourceUsageEmulators
operator|.
name|FakeProgressive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|emulators
operator|.
name|resourceusage
operator|.
name|TotalHeapUsageEmulatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|emulators
operator|.
name|resourceusage
operator|.
name|TotalHeapUsageEmulatorPlugin
operator|.
name|DefaultHeapUsageEmulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|ResourceCalculatorPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ResourceUsageMetrics
import|;
end_import

begin_comment
comment|/**  * Test Gridmix memory emulation.  */
end_comment

begin_class
DECL|class|TestGridmixMemoryEmulation
specifier|public
class|class
name|TestGridmixMemoryEmulation
block|{
comment|/**    * This is a dummy class that fakes heap usage.    */
DECL|class|FakeHeapUsageEmulatorCore
specifier|private
specifier|static
class|class
name|FakeHeapUsageEmulatorCore
extends|extends
name|DefaultHeapUsageEmulator
block|{
DECL|field|numCalls
specifier|private
name|int
name|numCalls
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|load (long sizeInMB)
specifier|public
name|void
name|load
parameter_list|(
name|long
name|sizeInMB
parameter_list|)
block|{
operator|++
name|numCalls
expr_stmt|;
name|super
operator|.
name|load
argument_list|(
name|sizeInMB
argument_list|)
expr_stmt|;
block|}
comment|// Get the total number of times load() was invoked
DECL|method|getNumCalls ()
name|int
name|getNumCalls
parameter_list|()
block|{
return|return
name|numCalls
return|;
block|}
comment|// Get the total number of 1mb objects stored within
DECL|method|getHeapUsageInMB ()
name|long
name|getHeapUsageInMB
parameter_list|()
block|{
return|return
name|heapSpace
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|// no op to stop emulate() from resetting
block|}
comment|/**      * For re-testing purpose.      */
DECL|method|resetFake ()
name|void
name|resetFake
parameter_list|()
block|{
name|numCalls
operator|=
literal|0
expr_stmt|;
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This is a dummy class that fakes the heap usage emulator plugin.    */
DECL|class|FakeHeapUsageEmulatorPlugin
specifier|private
specifier|static
class|class
name|FakeHeapUsageEmulatorPlugin
extends|extends
name|TotalHeapUsageEmulatorPlugin
block|{
DECL|field|core
specifier|private
name|FakeHeapUsageEmulatorCore
name|core
decl_stmt|;
DECL|method|FakeHeapUsageEmulatorPlugin (FakeHeapUsageEmulatorCore core)
specifier|public
name|FakeHeapUsageEmulatorPlugin
parameter_list|(
name|FakeHeapUsageEmulatorCore
name|core
parameter_list|)
block|{
name|super
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMaxHeapUsageInMB ()
specifier|protected
name|long
name|getMaxHeapUsageInMB
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
operator|/
name|ONE_MB
return|;
block|}
annotation|@
name|Override
DECL|method|getTotalHeapUsageInMB ()
specifier|protected
name|long
name|getTotalHeapUsageInMB
parameter_list|()
block|{
return|return
name|core
operator|.
name|getHeapUsageInMB
argument_list|()
return|;
block|}
block|}
comment|/**    * Test {@link TotalHeapUsageEmulatorPlugin}'s core heap usage emulation     * engine.    */
annotation|@
name|Test
DECL|method|testHeapUsageEmulator ()
specifier|public
name|void
name|testHeapUsageEmulator
parameter_list|()
throws|throws
name|IOException
block|{
name|FakeHeapUsageEmulatorCore
name|heapEmulator
init|=
operator|new
name|FakeHeapUsageEmulatorCore
argument_list|()
decl_stmt|;
name|long
name|testSizeInMB
init|=
literal|10
decl_stmt|;
comment|// 10 mb
name|long
name|previousHeap
init|=
name|heapEmulator
operator|.
name|getHeapUsageInMB
argument_list|()
decl_stmt|;
name|heapEmulator
operator|.
name|load
argument_list|(
name|testSizeInMB
argument_list|)
expr_stmt|;
name|long
name|currentHeap
init|=
name|heapEmulator
operator|.
name|getHeapUsageInMB
argument_list|()
decl_stmt|;
comment|// check if the heap has increased by expected value
name|assertEquals
argument_list|(
literal|"Default heap emulator failed to load 10mb"
argument_list|,
name|previousHeap
operator|+
name|testSizeInMB
argument_list|,
name|currentHeap
argument_list|)
expr_stmt|;
comment|// test reset
name|heapEmulator
operator|.
name|resetFake
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default heap emulator failed to reset"
argument_list|,
literal|0
argument_list|,
name|heapEmulator
operator|.
name|getHeapUsageInMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link TotalHeapUsageEmulatorPlugin}.    */
annotation|@
name|Test
DECL|method|testTotalHeapUsageEmulatorPlugin ()
specifier|public
name|void
name|testTotalHeapUsageEmulatorPlugin
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// set the dummy resource calculator for testing
name|ResourceCalculatorPlugin
name|monitor
init|=
operator|new
name|DummyResourceCalculatorPlugin
argument_list|()
decl_stmt|;
name|long
name|maxHeapUsage
init|=
literal|1024
operator|*
name|TotalHeapUsageEmulatorPlugin
operator|.
name|ONE_MB
decl_stmt|;
comment|// 1GB
name|conf
operator|.
name|setLong
argument_list|(
name|DummyResourceCalculatorPlugin
operator|.
name|MAXPMEM_TESTING_PROPERTY
argument_list|,
name|maxHeapUsage
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// no buffer to be reserved
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|MIN_HEAP_FREE_RATIO
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
comment|// only 1 call to be made per cycle
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|HEAP_LOAD_RATIO
argument_list|,
literal|1F
argument_list|)
expr_stmt|;
name|long
name|targetHeapUsageInMB
init|=
literal|200
decl_stmt|;
comment|// 200mb
comment|// fake progress indicator
name|FakeProgressive
name|fakeProgress
init|=
operator|new
name|FakeProgressive
argument_list|()
decl_stmt|;
comment|// fake heap usage generator
name|FakeHeapUsageEmulatorCore
name|fakeCore
init|=
operator|new
name|FakeHeapUsageEmulatorCore
argument_list|()
decl_stmt|;
comment|// a heap usage emulator with fake core
name|FakeHeapUsageEmulatorPlugin
name|heapPlugin
init|=
operator|new
name|FakeHeapUsageEmulatorPlugin
argument_list|(
name|fakeCore
argument_list|)
decl_stmt|;
comment|// test with invalid or missing resource usage value
name|ResourceUsageMetrics
name|invalidUsage
init|=
name|TestResourceUsageEmulators
operator|.
name|createMetrics
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|heapPlugin
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|invalidUsage
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// test if disabled heap emulation plugin's emulate() call is a no-operation
comment|// this will test if the emulation plugin is disabled or not
name|int
name|numCallsPre
init|=
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
decl_stmt|;
name|long
name|heapUsagePre
init|=
name|fakeCore
operator|.
name|getHeapUsageInMB
argument_list|()
decl_stmt|;
name|heapPlugin
operator|.
name|emulate
argument_list|()
expr_stmt|;
name|int
name|numCallsPost
init|=
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
decl_stmt|;
name|long
name|heapUsagePost
init|=
name|fakeCore
operator|.
name|getHeapUsageInMB
argument_list|()
decl_stmt|;
comment|//  test if no calls are made heap usage emulator core
name|assertEquals
argument_list|(
literal|"Disabled heap usage emulation plugin works!"
argument_list|,
name|numCallsPre
argument_list|,
name|numCallsPost
argument_list|)
expr_stmt|;
comment|//  test if no calls are made heap usage emulator core
name|assertEquals
argument_list|(
literal|"Disabled heap usage emulation plugin works!"
argument_list|,
name|heapUsagePre
argument_list|,
name|heapUsagePost
argument_list|)
expr_stmt|;
comment|// test with get progress
name|float
name|progress
init|=
name|heapPlugin
operator|.
name|getProgress
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid progress of disabled cumulative heap usage emulation "
operator|+
literal|"plugin!"
argument_list|,
literal|1.0f
argument_list|,
name|progress
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
comment|// test with wrong/invalid configuration
name|Boolean
name|failed
init|=
literal|null
decl_stmt|;
name|invalidUsage
operator|=
name|TestResourceUsageEmulators
operator|.
name|createMetrics
argument_list|(
name|maxHeapUsage
operator|+
name|TotalHeapUsageEmulatorPlugin
operator|.
name|ONE_MB
argument_list|)
expr_stmt|;
try|try
block|{
name|heapPlugin
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|invalidUsage
argument_list|,
name|monitor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Fail case failure!"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected failure!"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
comment|// test with valid resource usage value
name|ResourceUsageMetrics
name|metrics
init|=
name|TestResourceUsageEmulators
operator|.
name|createMetrics
argument_list|(
name|targetHeapUsageInMB
operator|*
name|TotalHeapUsageEmulatorPlugin
operator|.
name|ONE_MB
argument_list|)
decl_stmt|;
comment|// test with default emulation interval
comment|// in every interval, the emulator will add 100% of the expected usage
comment|// (since gridmix.emulators.resource-usage.heap.load-ratio=1)
comment|// so at 10%, emulator will add 10% (difference), at 20% it will add 10% ...
comment|// So to emulate 200MB, it will add
comment|//   20mb + 20mb + 20mb + 20mb + .. = 200mb
name|testEmulationAccuracy
argument_list|(
name|conf
argument_list|,
name|fakeCore
argument_list|,
name|monitor
argument_list|,
name|metrics
argument_list|,
name|heapPlugin
argument_list|,
literal|200
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// test with custom value for emulation interval of 20%
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|HEAP_EMULATION_PROGRESS_INTERVAL
argument_list|,
literal|0.2F
argument_list|)
expr_stmt|;
comment|//  40mb + 40mb + 40mb + 40mb + 40mb = 200mb
name|testEmulationAccuracy
argument_list|(
name|conf
argument_list|,
name|fakeCore
argument_list|,
name|monitor
argument_list|,
name|metrics
argument_list|,
name|heapPlugin
argument_list|,
literal|200
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// test with custom value of free heap ratio and load ratio = 1
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|HEAP_LOAD_RATIO
argument_list|,
literal|1F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|MIN_HEAP_FREE_RATIO
argument_list|,
literal|0.5F
argument_list|)
expr_stmt|;
comment|//  40mb + 0mb + 80mb + 0mb + 0mb = 120mb
name|testEmulationAccuracy
argument_list|(
name|conf
argument_list|,
name|fakeCore
argument_list|,
name|monitor
argument_list|,
name|metrics
argument_list|,
name|heapPlugin
argument_list|,
literal|120
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test with custom value of heap load ratio and min free heap ratio = 0
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|HEAP_LOAD_RATIO
argument_list|,
literal|0.5F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|MIN_HEAP_FREE_RATIO
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
comment|// 20mb (call#1) + 20mb (call#1) + 20mb (call#2) + 20mb (call#2) +.. = 200mb
name|testEmulationAccuracy
argument_list|(
name|conf
argument_list|,
name|fakeCore
argument_list|,
name|monitor
argument_list|,
name|metrics
argument_list|,
name|heapPlugin
argument_list|,
literal|200
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// test with custom value of free heap ratio = 0.3 and load ratio = 0.5
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|MIN_HEAP_FREE_RATIO
argument_list|,
literal|0.25F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|HEAP_LOAD_RATIO
argument_list|,
literal|0.5F
argument_list|)
expr_stmt|;
comment|// 20mb (call#1) + 20mb (call#1) + 30mb (call#2) + 0mb (call#2)
comment|// + 30mb (call#3) + 0mb (call#3) + 35mb (call#4) + 0mb (call#4)
comment|// + 37mb (call#5) + 0mb (call#5) = 162mb
name|testEmulationAccuracy
argument_list|(
name|conf
argument_list|,
name|fakeCore
argument_list|,
name|monitor
argument_list|,
name|metrics
argument_list|,
name|heapPlugin
argument_list|,
literal|162
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// test if emulation interval boundary is respected
name|fakeProgress
operator|=
operator|new
name|FakeProgressive
argument_list|()
expr_stmt|;
comment|// initialize
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|MIN_HEAP_FREE_RATIO
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|HEAP_LOAD_RATIO
argument_list|,
literal|1F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|TotalHeapUsageEmulatorPlugin
operator|.
name|HEAP_EMULATION_PROGRESS_INTERVAL
argument_list|,
literal|0.25F
argument_list|)
expr_stmt|;
name|heapPlugin
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|metrics
argument_list|,
name|monitor
argument_list|,
name|fakeProgress
argument_list|)
expr_stmt|;
name|fakeCore
operator|.
name|resetFake
argument_list|()
expr_stmt|;
comment|// take a snapshot after the initialization
name|long
name|initHeapUsage
init|=
name|fakeCore
operator|.
name|getHeapUsageInMB
argument_list|()
decl_stmt|;
name|long
name|initNumCallsUsage
init|=
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
decl_stmt|;
comment|// test with 0 progress
name|testEmulationBoundary
argument_list|(
literal|0F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|heapPlugin
argument_list|,
name|initHeapUsage
argument_list|,
name|initNumCallsUsage
argument_list|,
literal|"[no-op, 0 progress]"
argument_list|)
expr_stmt|;
comment|// test with 24% progress
name|testEmulationBoundary
argument_list|(
literal|0.24F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|heapPlugin
argument_list|,
name|initHeapUsage
argument_list|,
name|initNumCallsUsage
argument_list|,
literal|"[no-op, 24% progress]"
argument_list|)
expr_stmt|;
comment|// test with 25% progress
name|testEmulationBoundary
argument_list|(
literal|0.25F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|heapPlugin
argument_list|,
name|targetHeapUsageInMB
operator|/
literal|4
argument_list|,
literal|1
argument_list|,
literal|"[op, 25% progress]"
argument_list|)
expr_stmt|;
comment|// test with 80% progress
name|testEmulationBoundary
argument_list|(
literal|0.80F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|heapPlugin
argument_list|,
operator|(
name|targetHeapUsageInMB
operator|*
literal|4
operator|)
operator|/
literal|5
argument_list|,
literal|2
argument_list|,
literal|"[op, 80% progress]"
argument_list|)
expr_stmt|;
comment|// now test if the final call with 100% progress ramps up the heap usage
name|testEmulationBoundary
argument_list|(
literal|1F
argument_list|,
name|fakeCore
argument_list|,
name|fakeProgress
argument_list|,
name|heapPlugin
argument_list|,
name|targetHeapUsageInMB
argument_list|,
literal|3
argument_list|,
literal|"[op, 100% progress]"
argument_list|)
expr_stmt|;
block|}
comment|// test whether the heap usage emulator achieves the desired target using
comment|// desired calls to the underling core engine.
DECL|method|testEmulationAccuracy (Configuration conf, FakeHeapUsageEmulatorCore fakeCore, ResourceCalculatorPlugin monitor, ResourceUsageMetrics metrics, TotalHeapUsageEmulatorPlugin heapPlugin, long expectedTotalHeapUsageInMB, long expectedTotalNumCalls)
specifier|private
specifier|static
name|void
name|testEmulationAccuracy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FakeHeapUsageEmulatorCore
name|fakeCore
parameter_list|,
name|ResourceCalculatorPlugin
name|monitor
parameter_list|,
name|ResourceUsageMetrics
name|metrics
parameter_list|,
name|TotalHeapUsageEmulatorPlugin
name|heapPlugin
parameter_list|,
name|long
name|expectedTotalHeapUsageInMB
parameter_list|,
name|long
name|expectedTotalNumCalls
parameter_list|)
throws|throws
name|Exception
block|{
name|FakeProgressive
name|fakeProgress
init|=
operator|new
name|FakeProgressive
argument_list|()
decl_stmt|;
name|fakeCore
operator|.
name|resetFake
argument_list|()
expr_stmt|;
name|heapPlugin
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|metrics
argument_list|,
name|monitor
argument_list|,
name|fakeProgress
argument_list|)
expr_stmt|;
name|int
name|numLoops
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|fakeProgress
operator|.
name|getProgress
argument_list|()
operator|<
literal|1
condition|)
block|{
operator|++
name|numLoops
expr_stmt|;
name|float
name|progress
init|=
name|numLoops
operator|/
literal|100.0F
decl_stmt|;
name|fakeProgress
operator|.
name|setProgress
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|heapPlugin
operator|.
name|emulate
argument_list|()
expr_stmt|;
block|}
comment|// test if the resource plugin shows the expected usage
name|assertEquals
argument_list|(
literal|"Cumulative heap usage emulator plugin failed (total usage)!"
argument_list|,
name|expectedTotalHeapUsageInMB
argument_list|,
name|fakeCore
operator|.
name|getHeapUsageInMB
argument_list|()
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
comment|// test if the resource plugin shows the expected num calls
name|assertEquals
argument_list|(
literal|"Cumulative heap usage emulator plugin failed (num calls)!"
argument_list|,
name|expectedTotalNumCalls
argument_list|,
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|// tests if the heap usage emulation plugin emulates only at the expected
comment|// progress gaps
DECL|method|testEmulationBoundary (float progress, FakeHeapUsageEmulatorCore fakeCore, FakeProgressive fakeProgress, TotalHeapUsageEmulatorPlugin heapPlugin, long expectedTotalHeapUsageInMB, long expectedTotalNumCalls, String info)
specifier|private
specifier|static
name|void
name|testEmulationBoundary
parameter_list|(
name|float
name|progress
parameter_list|,
name|FakeHeapUsageEmulatorCore
name|fakeCore
parameter_list|,
name|FakeProgressive
name|fakeProgress
parameter_list|,
name|TotalHeapUsageEmulatorPlugin
name|heapPlugin
parameter_list|,
name|long
name|expectedTotalHeapUsageInMB
parameter_list|,
name|long
name|expectedTotalNumCalls
parameter_list|,
name|String
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|fakeProgress
operator|.
name|setProgress
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|heapPlugin
operator|.
name|emulate
argument_list|()
expr_stmt|;
comment|// test heap usage
name|assertEquals
argument_list|(
literal|"Emulation interval test for heap usage failed "
operator|+
name|info
operator|+
literal|"!"
argument_list|,
name|expectedTotalHeapUsageInMB
argument_list|,
name|fakeCore
operator|.
name|getHeapUsageInMB
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
comment|// test num calls
name|assertEquals
argument_list|(
literal|"Emulation interval test for heap usage failed "
operator|+
name|info
operator|+
literal|"!"
argument_list|,
name|expectedTotalNumCalls
argument_list|,
name|fakeCore
operator|.
name|getNumCalls
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the specified task java heap options.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testJavaHeapOptions (String mapOptions, String reduceOptions, String taskOptions, String defaultMapOptions, String defaultReduceOptions, String defaultTaskOptions, String expectedMapOptions, String expectedReduceOptions, String expectedTaskOptions)
specifier|private
name|void
name|testJavaHeapOptions
parameter_list|(
name|String
name|mapOptions
parameter_list|,
name|String
name|reduceOptions
parameter_list|,
name|String
name|taskOptions
parameter_list|,
name|String
name|defaultMapOptions
parameter_list|,
name|String
name|defaultReduceOptions
parameter_list|,
name|String
name|defaultTaskOptions
parameter_list|,
name|String
name|expectedMapOptions
parameter_list|,
name|String
name|expectedReduceOptions
parameter_list|,
name|String
name|expectedTaskOptions
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|simulatedConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// reset the configuration parameters
name|simulatedConf
operator|.
name|unset
argument_list|(
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|)
expr_stmt|;
name|simulatedConf
operator|.
name|unset
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|)
expr_stmt|;
name|simulatedConf
operator|.
name|unset
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|)
expr_stmt|;
comment|// set the default map task options
if|if
condition|(
name|defaultMapOptions
operator|!=
literal|null
condition|)
block|{
name|simulatedConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|,
name|defaultMapOptions
argument_list|)
expr_stmt|;
block|}
comment|// set the default reduce task options
if|if
condition|(
name|defaultReduceOptions
operator|!=
literal|null
condition|)
block|{
name|simulatedConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|,
name|defaultReduceOptions
argument_list|)
expr_stmt|;
block|}
comment|// set the default task options
if|if
condition|(
name|defaultTaskOptions
operator|!=
literal|null
condition|)
block|{
name|simulatedConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|,
name|defaultTaskOptions
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|originalConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// reset the configuration parameters
name|originalConf
operator|.
name|unset
argument_list|(
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|)
expr_stmt|;
name|originalConf
operator|.
name|unset
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|)
expr_stmt|;
name|originalConf
operator|.
name|unset
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|)
expr_stmt|;
comment|// set the map task options
if|if
condition|(
name|mapOptions
operator|!=
literal|null
condition|)
block|{
name|originalConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|,
name|mapOptions
argument_list|)
expr_stmt|;
block|}
comment|// set the reduce task options
if|if
condition|(
name|reduceOptions
operator|!=
literal|null
condition|)
block|{
name|originalConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|,
name|reduceOptions
argument_list|)
expr_stmt|;
block|}
comment|// set the task options
if|if
condition|(
name|taskOptions
operator|!=
literal|null
condition|)
block|{
name|originalConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|,
name|taskOptions
argument_list|)
expr_stmt|;
block|}
comment|// configure the task jvm's heap options
name|GridmixJob
operator|.
name|configureTaskJVMOptions
argument_list|(
name|originalConf
argument_list|,
name|simulatedConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Map heap options mismatch!"
argument_list|,
name|expectedMapOptions
argument_list|,
name|simulatedConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reduce heap options mismatch!"
argument_list|,
name|expectedReduceOptions
argument_list|,
name|simulatedConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Task heap options mismatch!"
argument_list|,
name|expectedTaskOptions
argument_list|,
name|simulatedConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test task-level java heap options configuration in {@link GridmixJob}.    */
annotation|@
name|Test
DECL|method|testJavaHeapOptions ()
specifier|public
name|void
name|testJavaHeapOptions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test missing opts
name|testJavaHeapOptions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// test original heap opts and missing default opts
name|testJavaHeapOptions
argument_list|(
literal|"-Xms10m"
argument_list|,
literal|"-Xms20m"
argument_list|,
literal|"-Xms30m"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// test missing opts with default opts
name|testJavaHeapOptions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"-Xms10m"
argument_list|,
literal|"-Xms20m"
argument_list|,
literal|"-Xms30m"
argument_list|,
literal|"-Xms10m"
argument_list|,
literal|"-Xms20m"
argument_list|,
literal|"-Xms30m"
argument_list|)
expr_stmt|;
comment|// test empty option
name|testJavaHeapOptions
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// test empty default option and no original heap options
name|testJavaHeapOptions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// test empty opts and default opts
name|testJavaHeapOptions
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|"-Xmx10m -Xms1m"
argument_list|,
literal|"-Xmx50m -Xms2m"
argument_list|,
literal|"-Xms2m -Xmx100m"
argument_list|,
literal|"-Xmx10m -Xms1m"
argument_list|,
literal|"-Xmx50m -Xms2m"
argument_list|,
literal|"-Xms2m -Xmx100m"
argument_list|)
expr_stmt|;
comment|// test custom heap opts with no default opts
name|testJavaHeapOptions
argument_list|(
literal|"-Xmx10m"
argument_list|,
literal|"-Xmx20m"
argument_list|,
literal|"-Xmx30m"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"-Xmx10m"
argument_list|,
literal|"-Xmx20m"
argument_list|,
literal|"-Xmx30m"
argument_list|)
expr_stmt|;
comment|// test heap opts with default opts (multiple value)
name|testJavaHeapOptions
argument_list|(
literal|"-Xms5m -Xmx200m"
argument_list|,
literal|"-Xms15m -Xmx300m"
argument_list|,
literal|"-Xms25m -Xmx50m"
argument_list|,
literal|"-XXabc"
argument_list|,
literal|"-XXxyz"
argument_list|,
literal|"-XXdef"
argument_list|,
literal|"-XXabc -Xmx200m"
argument_list|,
literal|"-XXxyz -Xmx300m"
argument_list|,
literal|"-XXdef -Xmx50m"
argument_list|)
expr_stmt|;
comment|// test heap opts with default opts (duplication of -Xmx)
name|testJavaHeapOptions
argument_list|(
literal|"-Xms5m -Xmx200m"
argument_list|,
literal|"-Xms15m -Xmx300m"
argument_list|,
literal|"-Xms25m -Xmx50m"
argument_list|,
literal|"-XXabc -Xmx500m"
argument_list|,
literal|"-XXxyz -Xmx600m"
argument_list|,
literal|"-XXdef -Xmx700m"
argument_list|,
literal|"-XXabc -Xmx200m"
argument_list|,
literal|"-XXxyz -Xmx300m"
argument_list|,
literal|"-XXdef -Xmx50m"
argument_list|)
expr_stmt|;
comment|// test heap opts with default opts (single value)
name|testJavaHeapOptions
argument_list|(
literal|"-Xmx10m"
argument_list|,
literal|"-Xmx20m"
argument_list|,
literal|"-Xmx50m"
argument_list|,
literal|"-Xms2m"
argument_list|,
literal|"-Xms3m"
argument_list|,
literal|"-Xms5m"
argument_list|,
literal|"-Xms2m -Xmx10m"
argument_list|,
literal|"-Xms3m -Xmx20m"
argument_list|,
literal|"-Xms5m -Xmx50m"
argument_list|)
expr_stmt|;
comment|// test heap opts with default opts (duplication of -Xmx)
name|testJavaHeapOptions
argument_list|(
literal|"-Xmx10m"
argument_list|,
literal|"-Xmx20m"
argument_list|,
literal|"-Xmx50m"
argument_list|,
literal|"-Xmx2m"
argument_list|,
literal|"-Xmx3m"
argument_list|,
literal|"-Xmx5m"
argument_list|,
literal|"-Xmx10m"
argument_list|,
literal|"-Xmx20m"
argument_list|,
literal|"-Xmx50m"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test disabled task heap options configuration in {@link GridmixJob}.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testJavaHeapOptionsDisabled ()
specifier|public
name|void
name|testJavaHeapOptionsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|gridmixConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|gridmixConf
operator|.
name|setBoolean
argument_list|(
name|GridmixJob
operator|.
name|GRIDMIX_TASK_JVM_OPTIONS_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// set the default values of simulated job
name|gridmixConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|,
literal|"-Xmx1m"
argument_list|)
expr_stmt|;
name|gridmixConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|,
literal|"-Xmx2m"
argument_list|)
expr_stmt|;
name|gridmixConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|,
literal|"-Xmx3m"
argument_list|)
expr_stmt|;
comment|// set the default map and reduce task options for original job
specifier|final
name|JobConf
name|originalConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|originalConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|,
literal|"-Xmx10m"
argument_list|)
expr_stmt|;
name|originalConf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|,
literal|"-Xmx20m"
argument_list|)
expr_stmt|;
name|originalConf
operator|.
name|set
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|,
literal|"-Xmx30m"
argument_list|)
expr_stmt|;
comment|// define a mock job
name|MockJob
name|story
init|=
operator|new
name|MockJob
argument_list|(
name|originalConf
argument_list|)
block|{
specifier|public
name|JobConf
name|getJobConf
parameter_list|()
block|{
return|return
name|originalConf
return|;
block|}
block|}
decl_stmt|;
name|GridmixJob
name|job
init|=
operator|new
name|DummyGridmixJob
argument_list|(
name|gridmixConf
argument_list|,
name|story
argument_list|)
decl_stmt|;
name|Job
name|simulatedJob
init|=
name|job
operator|.
name|getJob
argument_list|()
decl_stmt|;
name|Configuration
name|simulatedConf
init|=
name|simulatedJob
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Map heap options works when disabled!"
argument_list|,
literal|"-Xmx1m"
argument_list|,
name|simulatedConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_JAVA_OPTS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reduce heap options works when disabled!"
argument_list|,
literal|"-Xmx2m"
argument_list|,
name|simulatedConf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Task heap options works when disabled!"
argument_list|,
literal|"-Xmx3m"
argument_list|,
name|simulatedConf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

