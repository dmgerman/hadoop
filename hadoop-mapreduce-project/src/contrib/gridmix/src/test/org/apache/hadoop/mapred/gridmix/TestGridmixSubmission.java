begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStoryProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
operator|.
name|MAP_INPUT_RECORDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
operator|.
name|MAP_OUTPUT_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
operator|.
name|MAP_OUTPUT_RECORDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
operator|.
name|REDUCE_INPUT_RECORDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
operator|.
name|REDUCE_OUTPUT_RECORDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
operator|.
name|REDUCE_SHUFFLE_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskCounter
operator|.
name|SPLIT_RAW_BYTES
import|;
end_import

begin_class
DECL|class|TestGridmixSubmission
specifier|public
class|class
name|TestGridmixSubmission
block|{
DECL|field|policy
specifier|static
name|GridmixJobSubmissionPolicy
name|policy
init|=
name|GridmixJobSubmissionPolicy
operator|.
name|REPLAY
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Gridmix
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.mapred.gridmix"
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
DECL|field|NJOBS
specifier|private
specifier|static
specifier|final
name|int
name|NJOBS
init|=
literal|3
decl_stmt|;
DECL|field|GENDATA
specifier|private
specifier|static
specifier|final
name|long
name|GENDATA
init|=
literal|30
decl_stmt|;
comment|// in megabytes
DECL|field|GENSLOP
specifier|private
specifier|static
specifier|final
name|int
name|GENSLOP
init|=
literal|100
operator|*
literal|1024
decl_stmt|;
comment|// +/- 100k for logs
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|GridmixTestUtils
operator|.
name|initCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutDown ()
specifier|public
specifier|static
name|void
name|shutDown
parameter_list|()
throws|throws
name|IOException
block|{
name|GridmixTestUtils
operator|.
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
DECL|class|TestMonitor
specifier|static
class|class
name|TestMonitor
extends|extends
name|JobMonitor
block|{
DECL|field|SLOPBYTES
specifier|static
specifier|final
name|long
name|SLOPBYTES
init|=
literal|1024
decl_stmt|;
DECL|field|expected
specifier|private
specifier|final
name|int
name|expected
decl_stmt|;
DECL|field|retiredJobs
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|Job
argument_list|>
name|retiredJobs
decl_stmt|;
DECL|method|TestMonitor (int expected, Statistics stats)
specifier|public
name|TestMonitor
parameter_list|(
name|int
name|expected
parameter_list|,
name|Statistics
name|stats
parameter_list|)
block|{
name|super
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|stats
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
name|retiredJobs
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Job
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|verify (ArrayList<JobStory> submitted, Configuration clientConf)
specifier|public
name|void
name|verify
parameter_list|(
name|ArrayList
argument_list|<
name|JobStory
argument_list|>
name|submitted
parameter_list|,
name|Configuration
name|clientConf
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ArrayList
argument_list|<
name|Job
argument_list|>
name|succeeded
init|=
operator|new
name|ArrayList
argument_list|<
name|Job
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bad job count"
argument_list|,
name|expected
argument_list|,
name|retiredJobs
operator|.
name|drainTo
argument_list|(
name|succeeded
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|JobStory
argument_list|>
name|sub
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|JobStory
argument_list|>
argument_list|()
decl_stmt|;
comment|// define the input and output path for the run
specifier|final
name|Path
name|in
init|=
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|GridmixTestUtils
operator|.
name|dfs
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|out
init|=
operator|new
name|Path
argument_list|(
name|in
argument_list|,
name|clientConf
operator|.
name|get
argument_list|(
name|Gridmix
operator|.
name|GRIDMIX_OUT_DIR
argument_list|,
literal|"gridmix"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|JobStory
name|spec
range|:
name|submitted
control|)
block|{
name|sub
operator|.
name|put
argument_list|(
name|spec
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|spec
argument_list|)
expr_stmt|;
block|}
specifier|final
name|JobClient
name|client
init|=
operator|new
name|JobClient
argument_list|(
name|GridmixTestUtils
operator|.
name|mrCluster
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Job
name|job
range|:
name|succeeded
control|)
block|{
specifier|final
name|String
name|jobName
init|=
name|job
operator|.
name|getJobName
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|GenerateData
operator|.
name|JOB_NAME
operator|.
name|equals
argument_list|(
name|jobName
argument_list|)
condition|)
block|{
name|verifyQueue
argument_list|(
name|conf
argument_list|,
name|jobName
argument_list|)
expr_stmt|;
specifier|final
name|ContentSummary
name|generated
init|=
name|GridmixTestUtils
operator|.
name|dfs
operator|.
name|getContentSummary
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Mismatched data gen"
argument_list|,
comment|// +/- 100k for logs
operator|(
name|GENDATA
operator|<<
literal|20
operator|)
operator|<
name|generated
operator|.
name|getLength
argument_list|()
operator|+
name|GENSLOP
operator|||
operator|(
name|GENDATA
operator|<<
literal|20
operator|)
operator|>
name|generated
operator|.
name|getLength
argument_list|()
operator|-
name|GENSLOP
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|outstat
init|=
name|GridmixTestUtils
operator|.
name|dfs
operator|.
name|listStatus
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched job count"
argument_list|,
name|NJOBS
argument_list|,
name|outstat
operator|.
name|length
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|GenerateDistCacheData
operator|.
name|JOB_NAME
operator|.
name|equals
argument_list|(
name|jobName
argument_list|)
condition|)
block|{
name|verifyQueue
argument_list|(
name|conf
argument_list|,
name|jobName
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|GridmixJob
operator|.
name|GRIDMIX_USE_QUEUE_IN_TRACE
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|" Improper queue for  "
operator|+
name|jobName
operator|+
literal|" "
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|QUEUE_NAME
argument_list|)
argument_list|,
literal|"q1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|" Improper queue for  "
operator|+
name|jobName
operator|+
literal|" "
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|QUEUE_NAME
argument_list|)
argument_list|,
name|sub
operator|.
name|get
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|Gridmix
operator|.
name|ORIGINAL_JOB_ID
argument_list|)
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|originalJobId
init|=
name|conf
operator|.
name|get
argument_list|(
name|Gridmix
operator|.
name|ORIGINAL_JOB_ID
argument_list|)
decl_stmt|;
specifier|final
name|JobStory
name|spec
init|=
name|sub
operator|.
name|get
argument_list|(
name|originalJobId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No spec for "
operator|+
name|jobName
argument_list|,
name|spec
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No counters for "
operator|+
name|jobName
argument_list|,
name|job
operator|.
name|getCounters
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|originalJobName
init|=
name|spec
operator|.
name|getName
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"originalJobName="
operator|+
name|originalJobName
operator|+
literal|";GridmixJobName="
operator|+
name|jobName
operator|+
literal|";originalJobID="
operator|+
name|originalJobId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Original job name is wrong."
argument_list|,
name|originalJobName
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|Gridmix
operator|.
name|ORIGINAL_JOB_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Gridmix job seqNum contains 6 digits
name|int
name|seqNumLength
init|=
literal|6
decl_stmt|;
name|String
name|jobSeqNum
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"000000"
argument_list|)
operator|.
name|format
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|GridmixJob
operator|.
name|GRIDMIX_JOB_SEQ
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Original job name is of the format MOCKJOB<6 digit sequence number>
comment|// because MockJob jobNames are of this format.
name|assertTrue
argument_list|(
name|originalJobName
operator|.
name|substring
argument_list|(
name|originalJobName
operator|.
name|length
argument_list|()
operator|-
name|seqNumLength
argument_list|)
operator|.
name|equals
argument_list|(
name|jobSeqNum
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Gridmix job name is not in the expected format."
argument_list|,
name|jobName
operator|.
name|equals
argument_list|(
name|GridmixJob
operator|.
name|JOB_NAME_PREFIX
operator|+
name|jobSeqNum
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|FileStatus
name|stat
init|=
name|GridmixTestUtils
operator|.
name|dfs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|out
argument_list|,
literal|""
operator|+
name|Integer
operator|.
name|valueOf
argument_list|(
name|jobSeqNum
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong owner for "
operator|+
name|jobName
argument_list|,
name|spec
operator|.
name|getUser
argument_list|()
argument_list|,
name|stat
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|nMaps
init|=
name|spec
operator|.
name|getNumberMaps
argument_list|()
decl_stmt|;
specifier|final
name|int
name|nReds
init|=
name|spec
operator|.
name|getNumberReduces
argument_list|()
decl_stmt|;
comment|// TODO Blocked by MAPREDUCE-118
if|if
condition|(
literal|true
condition|)
return|return;
comment|// TODO
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|jobName
operator|+
literal|": "
operator|+
name|nMaps
operator|+
literal|"/"
operator|+
name|nReds
argument_list|)
expr_stmt|;
specifier|final
name|TaskReport
index|[]
name|mReports
init|=
name|client
operator|.
name|getMapTaskReports
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched map count"
argument_list|,
name|nMaps
argument_list|,
name|mReports
operator|.
name|length
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|job
argument_list|,
name|spec
argument_list|,
name|mReports
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|SLOPBYTES
argument_list|,
name|nReds
argument_list|)
expr_stmt|;
specifier|final
name|TaskReport
index|[]
name|rReports
init|=
name|client
operator|.
name|getReduceTaskReports
argument_list|(
name|JobID
operator|.
name|downgrade
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched reduce count"
argument_list|,
name|nReds
argument_list|,
name|rReports
operator|.
name|length
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|job
argument_list|,
name|spec
argument_list|,
name|rReports
argument_list|,
name|nMaps
operator|*
name|SLOPBYTES
argument_list|,
literal|2
operator|*
name|nMaps
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verify if correct job queue is used
DECL|method|verifyQueue (Configuration conf, String jobName)
specifier|private
name|void
name|verifyQueue
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|jobName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|GridmixJob
operator|.
name|GRIDMIX_USE_QUEUE_IN_TRACE
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|" Improper queue for "
operator|+
name|jobName
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.job.queue.name"
argument_list|)
argument_list|,
literal|"q1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|" Improper queue for "
operator|+
name|jobName
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.job.queue.name"
argument_list|)
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|check (final TaskType type, Job job, JobStory spec, final TaskReport[] runTasks, long extraInputBytes, int extraInputRecords, long extraOutputBytes, int extraOutputRecords)
specifier|public
name|void
name|check
parameter_list|(
specifier|final
name|TaskType
name|type
parameter_list|,
name|Job
name|job
parameter_list|,
name|JobStory
name|spec
parameter_list|,
specifier|final
name|TaskReport
index|[]
name|runTasks
parameter_list|,
name|long
name|extraInputBytes
parameter_list|,
name|int
name|extraInputRecords
parameter_list|,
name|long
name|extraOutputBytes
parameter_list|,
name|int
name|extraOutputRecords
parameter_list|)
throws|throws
name|Exception
block|{
name|long
index|[]
name|runInputRecords
init|=
operator|new
name|long
index|[
name|runTasks
operator|.
name|length
index|]
decl_stmt|;
name|long
index|[]
name|runInputBytes
init|=
operator|new
name|long
index|[
name|runTasks
operator|.
name|length
index|]
decl_stmt|;
name|long
index|[]
name|runOutputRecords
init|=
operator|new
name|long
index|[
name|runTasks
operator|.
name|length
index|]
decl_stmt|;
name|long
index|[]
name|runOutputBytes
init|=
operator|new
name|long
index|[
name|runTasks
operator|.
name|length
index|]
decl_stmt|;
name|long
index|[]
name|specInputRecords
init|=
operator|new
name|long
index|[
name|runTasks
operator|.
name|length
index|]
decl_stmt|;
name|long
index|[]
name|specInputBytes
init|=
operator|new
name|long
index|[
name|runTasks
operator|.
name|length
index|]
decl_stmt|;
name|long
index|[]
name|specOutputRecords
init|=
operator|new
name|long
index|[
name|runTasks
operator|.
name|length
index|]
decl_stmt|;
name|long
index|[]
name|specOutputBytes
init|=
operator|new
name|long
index|[
name|runTasks
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runTasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|TaskInfo
name|specInfo
decl_stmt|;
specifier|final
name|Counters
name|counters
init|=
name|runTasks
index|[
name|i
index|]
operator|.
name|getCounters
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|MAP
case|:
name|runInputBytes
index|[
name|i
index|]
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"HDFS_BYTES_READ"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|-
name|counters
operator|.
name|findCounter
argument_list|(
name|SPLIT_RAW_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|runInputRecords
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|counters
operator|.
name|findCounter
argument_list|(
name|MAP_INPUT_RECORDS
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|runOutputBytes
index|[
name|i
index|]
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
name|MAP_OUTPUT_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|runOutputRecords
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|counters
operator|.
name|findCounter
argument_list|(
name|MAP_OUTPUT_RECORDS
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|specInfo
operator|=
name|spec
operator|.
name|getTaskInfo
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|specInputRecords
index|[
name|i
index|]
operator|=
name|specInfo
operator|.
name|getInputRecords
argument_list|()
expr_stmt|;
name|specInputBytes
index|[
name|i
index|]
operator|=
name|specInfo
operator|.
name|getInputBytes
argument_list|()
expr_stmt|;
name|specOutputRecords
index|[
name|i
index|]
operator|=
name|specInfo
operator|.
name|getOutputRecords
argument_list|()
expr_stmt|;
name|specOutputBytes
index|[
name|i
index|]
operator|=
name|specInfo
operator|.
name|getOutputBytes
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|type
operator|+
literal|" SPEC: %9d -> %9d :: %5d -> %5d\n"
argument_list|,
name|specInputBytes
index|[
name|i
index|]
argument_list|,
name|specOutputBytes
index|[
name|i
index|]
argument_list|,
name|specInputRecords
index|[
name|i
index|]
argument_list|,
name|specOutputRecords
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|type
operator|+
literal|" RUN:  %9d -> %9d :: %5d -> %5d\n"
argument_list|,
name|runInputBytes
index|[
name|i
index|]
argument_list|,
name|runOutputBytes
index|[
name|i
index|]
argument_list|,
name|runInputRecords
index|[
name|i
index|]
argument_list|,
name|runOutputRecords
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|REDUCE
case|:
name|runInputBytes
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|runInputRecords
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|counters
operator|.
name|findCounter
argument_list|(
name|REDUCE_INPUT_RECORDS
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|runOutputBytes
index|[
name|i
index|]
operator|=
name|counters
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"HDFS_BYTES_WRITTEN"
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|runOutputRecords
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|counters
operator|.
name|findCounter
argument_list|(
name|REDUCE_OUTPUT_RECORDS
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|specInfo
operator|=
name|spec
operator|.
name|getTaskInfo
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// There is no reliable counter for reduce input bytes. The
comment|// variable-length encoding of intermediate records and other noise
comment|// make this quantity difficult to estimate. The shuffle and spec
comment|// input bytes are included in debug output for reference, but are
comment|// not checked
name|specInputBytes
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|specInputRecords
index|[
name|i
index|]
operator|=
name|specInfo
operator|.
name|getInputRecords
argument_list|()
expr_stmt|;
name|specOutputRecords
index|[
name|i
index|]
operator|=
name|specInfo
operator|.
name|getOutputRecords
argument_list|()
expr_stmt|;
name|specOutputBytes
index|[
name|i
index|]
operator|=
name|specInfo
operator|.
name|getOutputBytes
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|type
operator|+
literal|" SPEC: (%9d) -> %9d :: %5d -> %5d\n"
argument_list|,
name|specInfo
operator|.
name|getInputBytes
argument_list|()
argument_list|,
name|specOutputBytes
index|[
name|i
index|]
argument_list|,
name|specInputRecords
index|[
name|i
index|]
argument_list|,
name|specOutputRecords
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|type
operator|+
literal|" RUN:  (%9d) -> %9d :: %5d -> %5d\n"
argument_list|,
name|counters
operator|.
name|findCounter
argument_list|(
name|REDUCE_SHUFFLE_BYTES
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|runOutputBytes
index|[
name|i
index|]
argument_list|,
name|runInputRecords
index|[
name|i
index|]
argument_list|,
name|runOutputRecords
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
default|default:
name|specInfo
operator|=
literal|null
expr_stmt|;
name|fail
argument_list|(
literal|"Unexpected type: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check input bytes
name|Arrays
operator|.
name|sort
argument_list|(
name|specInputBytes
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|runInputBytes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runTasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
literal|"Mismatched "
operator|+
name|type
operator|+
literal|" input bytes "
operator|+
name|specInputBytes
index|[
name|i
index|]
operator|+
literal|"/"
operator|+
name|runInputBytes
index|[
name|i
index|]
argument_list|,
name|eqPlusMinus
argument_list|(
name|runInputBytes
index|[
name|i
index|]
argument_list|,
name|specInputBytes
index|[
name|i
index|]
argument_list|,
name|extraInputBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check input records
name|Arrays
operator|.
name|sort
argument_list|(
name|specInputRecords
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|runInputRecords
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runTasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
literal|"Mismatched "
operator|+
name|type
operator|+
literal|" input records "
operator|+
name|specInputRecords
index|[
name|i
index|]
operator|+
literal|"/"
operator|+
name|runInputRecords
index|[
name|i
index|]
argument_list|,
name|eqPlusMinus
argument_list|(
name|runInputRecords
index|[
name|i
index|]
argument_list|,
name|specInputRecords
index|[
name|i
index|]
argument_list|,
name|extraInputRecords
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check output bytes
name|Arrays
operator|.
name|sort
argument_list|(
name|specOutputBytes
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|runOutputBytes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runTasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
literal|"Mismatched "
operator|+
name|type
operator|+
literal|" output bytes "
operator|+
name|specOutputBytes
index|[
name|i
index|]
operator|+
literal|"/"
operator|+
name|runOutputBytes
index|[
name|i
index|]
argument_list|,
name|eqPlusMinus
argument_list|(
name|runOutputBytes
index|[
name|i
index|]
argument_list|,
name|specOutputBytes
index|[
name|i
index|]
argument_list|,
name|extraOutputBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check output records
name|Arrays
operator|.
name|sort
argument_list|(
name|specOutputRecords
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|runOutputRecords
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runTasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
literal|"Mismatched "
operator|+
name|type
operator|+
literal|" output records "
operator|+
name|specOutputRecords
index|[
name|i
index|]
operator|+
literal|"/"
operator|+
name|runOutputRecords
index|[
name|i
index|]
argument_list|,
name|eqPlusMinus
argument_list|(
name|runOutputRecords
index|[
name|i
index|]
argument_list|,
name|specOutputRecords
index|[
name|i
index|]
argument_list|,
name|extraOutputRecords
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|eqPlusMinus (long a, long b, long x)
specifier|private
specifier|static
name|boolean
name|eqPlusMinus
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|,
name|long
name|x
parameter_list|)
block|{
specifier|final
name|long
name|diff
init|=
name|Math
operator|.
name|abs
argument_list|(
name|a
operator|-
name|b
argument_list|)
decl_stmt|;
return|return
name|diff
operator|<=
name|x
return|;
block|}
annotation|@
name|Override
DECL|method|onSuccess (Job job)
specifier|protected
name|void
name|onSuccess
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|retiredJobs
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure (Job job)
specifier|protected
name|void
name|onFailure
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Job failure: "
operator|+
name|job
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DebugGridmix
specifier|static
class|class
name|DebugGridmix
extends|extends
name|Gridmix
block|{
DECL|field|factory
specifier|private
name|JobFactory
name|factory
decl_stmt|;
DECL|field|monitor
specifier|private
name|TestMonitor
name|monitor
decl_stmt|;
DECL|method|checkMonitor (Configuration conf)
specifier|public
name|void
name|checkMonitor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|monitor
operator|.
name|verify
argument_list|(
operator|(
operator|(
name|DebugJobFactory
operator|.
name|Debuggable
operator|)
name|factory
operator|)
operator|.
name|getSubmitted
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createJobMonitor (Statistics stats, Configuration conf)
specifier|protected
name|JobMonitor
name|createJobMonitor
parameter_list|(
name|Statistics
name|stats
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|monitor
operator|=
operator|new
name|TestMonitor
argument_list|(
name|NJOBS
operator|+
literal|1
argument_list|,
name|stats
argument_list|)
expr_stmt|;
return|return
name|monitor
return|;
block|}
annotation|@
name|Override
DECL|method|createJobFactory (JobSubmitter submitter, String traceIn, Path scratchDir, Configuration conf, CountDownLatch startFlag, UserResolver userResolver)
specifier|protected
name|JobFactory
name|createJobFactory
parameter_list|(
name|JobSubmitter
name|submitter
parameter_list|,
name|String
name|traceIn
parameter_list|,
name|Path
name|scratchDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|,
name|UserResolver
name|userResolver
parameter_list|)
throws|throws
name|IOException
block|{
name|factory
operator|=
name|DebugJobFactory
operator|.
name|getFactory
argument_list|(
name|submitter
argument_list|,
name|scratchDir
argument_list|,
name|NJOBS
argument_list|,
name|conf
argument_list|,
name|startFlag
argument_list|,
name|userResolver
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
block|}
comment|/**    * Verifies that the given {@code JobStory} corresponds to the checked-in    * WordCount {@code JobStory}. The verification is effected via JUnit    * assertions.    *    * @param js the candidate JobStory.    */
DECL|method|verifyWordCountJobStory (JobStory js)
specifier|private
name|void
name|verifyWordCountJobStory
parameter_list|(
name|JobStory
name|js
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Null JobStory"
argument_list|,
name|js
argument_list|)
expr_stmt|;
name|String
name|expectedJobStory
init|=
literal|"WordCount:johndoe:default:1285322645148:3:1"
decl_stmt|;
name|String
name|actualJobStory
init|=
name|js
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|js
operator|.
name|getUser
argument_list|()
operator|+
literal|":"
operator|+
name|js
operator|.
name|getQueueName
argument_list|()
operator|+
literal|":"
operator|+
name|js
operator|.
name|getSubmissionTime
argument_list|()
operator|+
literal|":"
operator|+
name|js
operator|.
name|getNumberMaps
argument_list|()
operator|+
literal|":"
operator|+
name|js
operator|.
name|getNumberReduces
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected JobStory"
argument_list|,
name|expectedJobStory
argument_list|,
name|actualJobStory
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expands a file compressed using {@code gzip}.    *    * @param fs the {@code FileSystem} corresponding to the given    * file.    *    * @param in the path to the compressed file.    *    * @param out the path to the uncompressed output.    *    * @throws Exception if there was an error during the operation.    */
DECL|method|expandGzippedTrace (FileSystem fs, Path in, Path out)
specifier|private
name|void
name|expandGzippedTrace
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|in
parameter_list|,
name|Path
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|buff
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|GZIPInputStream
name|gis
init|=
operator|new
name|GZIPInputStream
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fsdos
init|=
name|fs
operator|.
name|create
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|int
name|numRead
decl_stmt|;
while|while
condition|(
operator|(
name|numRead
operator|=
name|gis
operator|.
name|read
argument_list|(
name|buff
argument_list|,
literal|0
argument_list|,
name|buff
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|fsdos
operator|.
name|write
argument_list|(
name|buff
argument_list|,
literal|0
argument_list|,
name|numRead
argument_list|)
expr_stmt|;
block|}
name|gis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsdos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the reading of traces in GridMix3. These traces are generated    * by Rumen and are in the JSON format. The traces can optionally be    * compressed and uncompressed traces can also be passed to GridMix3 via    * its standard input stream. The testing is effected via JUnit assertions.    *    * @throws Exception if there was an error.    */
annotation|@
name|Test
DECL|method|testTraceReader ()
specifier|public
name|void
name|testTraceReader
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"src.test.data"
argument_list|)
argument_list|)
decl_stmt|;
name|rootInputDir
operator|=
name|rootInputDir
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
literal|"testTraceReader"
argument_list|)
decl_stmt|;
name|rootTempDir
operator|=
name|rootTempDir
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|inputFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"wordcount.json.gz"
argument_list|)
decl_stmt|;
name|Path
name|tempFile
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"gridmix3-wc.json"
argument_list|)
decl_stmt|;
name|InputStream
name|origStdIn
init|=
name|System
operator|.
name|in
decl_stmt|;
name|InputStream
name|tmpIs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DebugGridmix
name|dgm
init|=
operator|new
name|DebugGridmix
argument_list|()
decl_stmt|;
name|JobStoryProducer
name|jsp
init|=
name|dgm
operator|.
name|createJobStoryProducer
argument_list|(
name|inputFile
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Verifying JobStory from compressed trace..."
argument_list|)
expr_stmt|;
name|verifyWordCountJobStory
argument_list|(
name|jsp
operator|.
name|getNextJob
argument_list|()
argument_list|)
expr_stmt|;
name|expandGzippedTrace
argument_list|(
name|lfs
argument_list|,
name|inputFile
argument_list|,
name|tempFile
argument_list|)
expr_stmt|;
name|jsp
operator|=
name|dgm
operator|.
name|createJobStoryProducer
argument_list|(
name|tempFile
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Verifying JobStory from uncompressed trace..."
argument_list|)
expr_stmt|;
name|verifyWordCountJobStory
argument_list|(
name|jsp
operator|.
name|getNextJob
argument_list|()
argument_list|)
expr_stmt|;
name|tmpIs
operator|=
name|lfs
operator|.
name|open
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
name|System
operator|.
name|setIn
argument_list|(
name|tmpIs
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Verifying JobStory from trace in standard input..."
argument_list|)
expr_stmt|;
name|jsp
operator|=
name|dgm
operator|.
name|createJobStoryProducer
argument_list|(
literal|"-"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|verifyWordCountJobStory
argument_list|(
name|jsp
operator|.
name|getNextJob
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setIn
argument_list|(
name|origStdIn
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpIs
operator|!=
literal|null
condition|)
block|{
name|tmpIs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|lfs
operator|.
name|delete
argument_list|(
name|rootTempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReplaySubmit ()
specifier|public
name|void
name|testReplaySubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|=
name|GridmixJobSubmissionPolicy
operator|.
name|REPLAY
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Replay started at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|doSubmission
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Replay ended at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Replay started with default output path at time "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|doSubmission
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Replay ended with default output path at time "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStressSubmit ()
specifier|public
name|void
name|testStressSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|=
name|GridmixJobSubmissionPolicy
operator|.
name|STRESS
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Stress started at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|doSubmission
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Stress ended at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStressSubmitWithDefaultQueue ()
specifier|public
name|void
name|testStressSubmitWithDefaultQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|=
name|GridmixJobSubmissionPolicy
operator|.
name|STRESS
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Stress with default q started at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|doSubmission
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" Stress with default q ended at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSerialSubmit ()
specifier|public
name|void
name|testSerialSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|=
name|GridmixJobSubmissionPolicy
operator|.
name|SERIAL
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Serial started at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|doSubmission
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Serial ended at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doSubmission (boolean useDefaultQueue, boolean defaultOutputPath)
specifier|private
name|void
name|doSubmission
parameter_list|(
name|boolean
name|useDefaultQueue
parameter_list|,
name|boolean
name|defaultOutputPath
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|in
init|=
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|GridmixTestUtils
operator|.
name|dfs
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|out
init|=
name|GridmixTestUtils
operator|.
name|DEST
operator|.
name|makeQualified
argument_list|(
name|GridmixTestUtils
operator|.
name|dfs
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|argsList
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|FilePool
operator|.
name|GRIDMIX_MIN_FILE
operator|+
literal|"=0"
argument_list|)
expr_stmt|;
name|argsList
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|Gridmix
operator|.
name|GRIDMIX_USR_RSV
operator|+
literal|"="
operator|+
name|EchoUserResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the config property gridmix.output.directory only if
comment|// defaultOutputPath is false. If defaultOutputPath is true, then
comment|// let us allow gridmix to use the path foo/gridmix/ as output dir.
if|if
condition|(
operator|!
name|defaultOutputPath
condition|)
block|{
name|argsList
operator|.
name|add
argument_list|(
literal|"-D"
operator|+
name|Gridmix
operator|.
name|GRIDMIX_OUT_DIR
operator|+
literal|"="
operator|+
name|out
argument_list|)
expr_stmt|;
block|}
name|argsList
operator|.
name|add
argument_list|(
literal|"-generate"
argument_list|)
expr_stmt|;
name|argsList
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|GENDATA
argument_list|)
operator|+
literal|"m"
argument_list|)
expr_stmt|;
name|argsList
operator|.
name|add
argument_list|(
name|in
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|argsList
operator|.
name|add
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
comment|// ignored by DebugGridmix
name|String
index|[]
name|argv
init|=
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|DebugGridmix
name|client
init|=
operator|new
name|DebugGridmix
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setEnum
argument_list|(
name|GridmixJobSubmissionPolicy
operator|.
name|JOB_SUBMISSION_POLICY
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.job.hdfs-servers"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDefaultQueue
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|GridmixJob
operator|.
name|GRIDMIX_USE_QUEUE_IN_TRACE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|GridmixJob
operator|.
name|GRIDMIX_DEFAULT_QUEUE
argument_list|,
literal|"q1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|GridmixJob
operator|.
name|GRIDMIX_USE_QUEUE_IN_TRACE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
name|GridmixTestUtils
operator|.
name|mrCluster
operator|.
name|createJobConf
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// allow synthetic users to create home directories
name|GridmixTestUtils
operator|.
name|dfs
operator|.
name|mkdirs
argument_list|(
name|root
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|GridmixTestUtils
operator|.
name|dfs
operator|.
name|setPermission
argument_list|(
name|root
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|client
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Client exited with nonzero status"
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|client
operator|.
name|checkMonitor
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// fail the test if there is an exception
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|in
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|in
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|out
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
operator|.
name|delete
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

