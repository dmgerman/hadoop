begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|Statistics
operator|.
name|ClusterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|Statistics
operator|.
name|JobStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Pre21JobHistoryConstants
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test the Gridmix's {@link Statistics} class.  */
end_comment

begin_class
DECL|class|TestGridmixStatistics
specifier|public
class|class
name|TestGridmixStatistics
block|{
comment|/**    * Test {@link Statistics.JobStats}.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testJobStats ()
specifier|public
name|void
name|testJobStats
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
operator|new
name|Job
argument_list|()
block|{}
decl_stmt|;
name|JobStats
name|stats
init|=
operator|new
name|JobStats
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect num-maps"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|getNoOfMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect num-reds"
argument_list|,
literal|2
argument_list|,
name|stats
operator|.
name|getNoOfReds
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect job"
argument_list|,
name|job
operator|==
name|stats
operator|.
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected job status"
argument_list|,
name|stats
operator|.
name|getJobStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a new status
name|JobStatus
name|status
init|=
operator|new
name|JobStatus
argument_list|()
decl_stmt|;
name|stats
operator|.
name|updateJobStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing job status"
argument_list|,
name|stats
operator|.
name|getJobStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect job status"
argument_list|,
name|status
operator|==
name|stats
operator|.
name|getJobStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getCustomJobStory (final int numMaps, final int numReds)
specifier|private
specifier|static
name|JobStory
name|getCustomJobStory
parameter_list|(
specifier|final
name|int
name|numMaps
parameter_list|,
specifier|final
name|int
name|numReds
parameter_list|)
block|{
return|return
operator|new
name|JobStory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputSplit
index|[]
name|getInputSplits
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|JobConf
name|getJobConf
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskAttemptInfo
name|getMapTaskAttemptInfoAdjusted
parameter_list|(
name|int
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberMaps
parameter_list|()
block|{
return|return
name|numMaps
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberReduces
parameter_list|()
block|{
return|return
name|numReds
return|;
block|}
annotation|@
name|Override
specifier|public
name|Values
name|getOutcome
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSubmissionTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskAttemptInfo
name|getTaskAttemptInfo
parameter_list|(
name|TaskType
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TaskInfo
name|getTaskInfo
parameter_list|(
name|TaskType
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
comment|/**    * Test {@link Statistics}.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testStatistics ()
specifier|public
name|void
name|testStatistics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test job stats generation
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// test dummy jobs like data-generation etc
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
block|{     }
decl_stmt|;
name|JobStats
name|stats
init|=
name|Statistics
operator|.
name|generateJobStats
argument_list|(
name|job
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|testJobStats
argument_list|(
name|stats
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// add a job desc with 2 map and 1 reduce task
name|conf
operator|.
name|setInt
argument_list|(
name|GridmixJob
operator|.
name|GRIDMIX_JOB_SEQ
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// test dummy jobs like data-generation etc
name|job
operator|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
block|{     }
expr_stmt|;
name|JobStory
name|zjob
init|=
name|getCustomJobStory
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|stats
operator|=
name|Statistics
operator|.
name|generateJobStats
argument_list|(
name|job
argument_list|,
name|zjob
argument_list|)
expr_stmt|;
name|testJobStats
argument_list|(
name|stats
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// add a job status
name|JobStatus
name|jStatus
init|=
operator|new
name|JobStatus
argument_list|()
decl_stmt|;
name|stats
operator|.
name|updateJobStatus
argument_list|(
name|jStatus
argument_list|)
expr_stmt|;
name|testJobStats
argument_list|(
name|stats
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|jStatus
argument_list|,
name|job
argument_list|)
expr_stmt|;
comment|// start the statistics
name|CountDownLatch
name|startFlag
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// prevents the collector
comment|// thread from starting
name|Statistics
name|statistics
init|=
operator|new
name|Statistics
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|,
literal|0
argument_list|,
name|startFlag
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|start
argument_list|()
expr_stmt|;
name|testClusterStats
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// add to the statistics object
name|statistics
operator|.
name|addJobStats
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|testClusterStats
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// add another job
name|JobStory
name|zjob2
init|=
name|getCustomJobStory
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|GridmixJob
operator|.
name|GRIDMIX_JOB_SEQ
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|job
operator|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
block|{     }
expr_stmt|;
name|JobStats
name|stats2
init|=
name|Statistics
operator|.
name|generateJobStats
argument_list|(
name|job
argument_list|,
name|zjob2
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|addJobStats
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|testClusterStats
argument_list|(
literal|12
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// finish off one job
name|statistics
operator|.
name|add
argument_list|(
name|stats2
argument_list|)
expr_stmt|;
name|testClusterStats
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// finish off the other job
name|statistics
operator|.
name|add
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|testClusterStats
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// test the job stats
DECL|method|testJobStats (JobStats stats, int numMaps, int numReds, JobStatus jStatus, Job job)
specifier|private
specifier|static
name|void
name|testJobStats
parameter_list|(
name|JobStats
name|stats
parameter_list|,
name|int
name|numMaps
parameter_list|,
name|int
name|numReds
parameter_list|,
name|JobStatus
name|jStatus
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Incorrect num map tasks"
argument_list|,
name|numMaps
argument_list|,
name|stats
operator|.
name|getNoOfMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect num reduce tasks"
argument_list|,
name|numReds
argument_list|,
name|stats
operator|.
name|getNoOfReds
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|job
operator|!=
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"Missing job"
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
comment|// check running job
name|assertTrue
argument_list|(
literal|"Incorrect job"
argument_list|,
name|job
operator|==
name|stats
operator|.
name|getJob
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jStatus
operator|!=
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"Missing job status"
argument_list|,
name|jStatus
argument_list|)
expr_stmt|;
block|}
comment|// check job stats
name|assertTrue
argument_list|(
literal|"Incorrect job status"
argument_list|,
name|jStatus
operator|==
name|stats
operator|.
name|getJobStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test the cluster stats
DECL|method|testClusterStats (int numSubmittedMapTasks, int numSubmittedReduceTasks, int numSubmittedJobs)
specifier|private
specifier|static
name|void
name|testClusterStats
parameter_list|(
name|int
name|numSubmittedMapTasks
parameter_list|,
name|int
name|numSubmittedReduceTasks
parameter_list|,
name|int
name|numSubmittedJobs
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Incorrect count of total number of submitted map tasks"
argument_list|,
name|numSubmittedMapTasks
argument_list|,
name|ClusterStats
operator|.
name|getSubmittedMapTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect count of total number of submitted reduce tasks"
argument_list|,
name|numSubmittedReduceTasks
argument_list|,
name|ClusterStats
operator|.
name|getSubmittedReduceTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect submitted jobs"
argument_list|,
name|numSubmittedJobs
argument_list|,
name|ClusterStats
operator|.
name|getRunningJobStats
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

