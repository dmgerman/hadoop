begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|GzipCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|CompressionEmulationUtil
operator|.
name|RandomTextDataMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|GenerateData
operator|.
name|GenSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|CombineFileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test {@link CompressionEmulationUtil}  */
end_comment

begin_class
DECL|class|TestCompressionEmulationUtils
specifier|public
class|class
name|TestCompressionEmulationUtils
block|{
comment|//TODO Remove this once LocalJobRunner can run Gridmix.
DECL|class|CustomInputFormat
specifier|static
class|class
name|CustomInputFormat
extends|extends
name|GenerateData
operator|.
name|GenDataFormat
block|{
annotation|@
name|Override
DECL|method|getSplits (JobContext jobCtxt)
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|jobCtxt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the total data to be generated
name|long
name|toGen
init|=
name|jobCtxt
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLong
argument_list|(
name|GenerateData
operator|.
name|GRIDMIX_GEN_BYTES
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|toGen
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid/missing generation bytes: "
operator|+
name|toGen
argument_list|)
throw|;
block|}
comment|// get the total number of mappers configured
name|int
name|totalMappersConfigured
init|=
name|jobCtxt
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalMappersConfigured
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid/missing num mappers: "
operator|+
name|totalMappersConfigured
argument_list|)
throw|;
block|}
specifier|final
name|long
name|bytesPerTracker
init|=
name|toGen
operator|/
name|totalMappersConfigured
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<
name|InputSplit
argument_list|>
argument_list|(
name|totalMappersConfigured
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalMappersConfigured
condition|;
operator|++
name|i
control|)
block|{
name|splits
operator|.
name|add
argument_list|(
operator|new
name|GenSplit
argument_list|(
name|bytesPerTracker
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"tracker_local"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
block|}
comment|/**    * Test {@link RandomTextDataMapper} via {@link CompressionEmulationUtil}.    */
annotation|@
name|Test
DECL|method|testRandomCompressedTextDataGenerator ()
specifier|public
name|void
name|testRandomCompressedTextDataGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|wordSize
init|=
literal|10
decl_stmt|;
name|int
name|listSize
init|=
literal|20
decl_stmt|;
name|long
name|dataSize
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompressionEmulationUtil
operator|.
name|setInputCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// configure the RandomTextDataGenerator to generate desired sized data
name|conf
operator|.
name|setInt
argument_list|(
name|RandomTextDataGenerator
operator|.
name|GRIDMIX_DATAGEN_RANDOMTEXT_LISTSIZE
argument_list|,
name|listSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|RandomTextDataGenerator
operator|.
name|GRIDMIX_DATAGEN_RANDOMTEXT_WORDSIZE
argument_list|,
name|wordSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|GenerateData
operator|.
name|GRIDMIX_GEN_BYTES
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.job.hdfs-servers"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// define the test's root temp directory
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestRandomCompressedTextDataGenr"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runDataGenJob
argument_list|(
name|conf
argument_list|,
name|tempDir
argument_list|)
expr_stmt|;
comment|// validate the output data
name|FileStatus
index|[]
name|files
init|=
name|lfs
operator|.
name|listStatus
argument_list|(
name|tempDir
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
name|long
name|maxLineSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|files
control|)
block|{
name|InputStream
name|in
init|=
name|CompressionEmulationUtil
operator|.
name|getPossiblyDecompressedInputStream
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|long
name|lineSize
init|=
name|line
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|lineSize
operator|>
name|maxLineSize
condition|)
block|{
name|maxLineSize
operator|=
name|lineSize
expr_stmt|;
block|}
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|word
range|:
name|line
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
control|)
block|{
name|size
operator|+=
name|word
operator|.
name|getBytes
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|size
operator|>=
name|dataSize
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|size
operator|<=
name|dataSize
operator|+
name|maxLineSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Runs a GridMix data-generation job.    */
DECL|method|runDataGenJob (Configuration conf, Path tempDir)
specifier|private
specifier|static
name|void
name|runDataGenJob
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|tempDir
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InterruptedException
block|{
name|JobClient
name|client
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// get the local job runner
name|conf
operator|.
name|setInt
argument_list|(
name|MRJobConfig
operator|.
name|NUM_MAPS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CompressionEmulationUtil
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|CustomInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// set the output path
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|tempDir
argument_list|)
expr_stmt|;
comment|// submit and wait for completion
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
name|int
name|ret
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Job Failed"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if {@link RandomTextDataGenerator} can generate random text data     * with the desired compression ratio. This involves    *   - using {@link CompressionEmulationUtil} to configure the MR job for     *     generating the random text data with the desired compression ratio    *   - running the MR job    *   - test {@link RandomTextDataGenerator}'s output and match the output size    *     (compressed) with the expected compression ratio.    */
DECL|method|testCompressionRatioConfigure (float ratio)
specifier|private
name|void
name|testCompressionRatioConfigure
parameter_list|(
name|float
name|ratio
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|dataSize
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompressionEmulationUtil
operator|.
name|setInputCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|GenerateData
operator|.
name|GRIDMIX_GEN_BYTES
argument_list|,
name|dataSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.job.hdfs-servers"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|float
name|expectedRatio
init|=
name|CompressionEmulationUtil
operator|.
name|DEFAULT_COMPRESSION_RATIO
decl_stmt|;
if|if
condition|(
name|ratio
operator|>
literal|0
condition|)
block|{
comment|// set the compression ratio in the conf
name|CompressionEmulationUtil
operator|.
name|setMapInputCompressionEmulationRatio
argument_list|(
name|conf
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
name|expectedRatio
operator|=
name|CompressionEmulationUtil
operator|.
name|standardizeCompressionRatio
argument_list|(
name|ratio
argument_list|)
expr_stmt|;
block|}
comment|// invoke the utility to map from ratio to word-size
name|CompressionEmulationUtil
operator|.
name|setupDataGeneratorConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// define the test's root temp directory
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestCustomRandomCompressedTextDataGenr"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runDataGenJob
argument_list|(
name|conf
argument_list|,
name|tempDir
argument_list|)
expr_stmt|;
comment|// validate the output data
name|FileStatus
index|[]
name|files
init|=
name|lfs
operator|.
name|listStatus
argument_list|(
name|tempDir
argument_list|,
operator|new
name|Utils
operator|.
name|OutputFileUtils
operator|.
name|OutputFilesFilter
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|files
control|)
block|{
name|size
operator|+=
name|status
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
name|float
name|compressionRatio
init|=
operator|(
operator|(
name|float
operator|)
name|size
operator|)
operator|/
name|dataSize
decl_stmt|;
name|float
name|stdRatio
init|=
name|CompressionEmulationUtil
operator|.
name|standardizeCompressionRatio
argument_list|(
name|compressionRatio
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRatio
argument_list|,
name|stdRatio
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test compression ratio with multiple compression ratios.    */
annotation|@
name|Test
DECL|method|testCompressionRatios ()
specifier|public
name|void
name|testCompressionRatios
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test default compression ratio i.e 0.5
name|testCompressionRatioConfigure
argument_list|(
literal|0F
argument_list|)
expr_stmt|;
comment|// test for a sample compression ratio of 0.2
name|testCompressionRatioConfigure
argument_list|(
literal|0.2F
argument_list|)
expr_stmt|;
comment|// test for a sample compression ratio of 0.4
name|testCompressionRatioConfigure
argument_list|(
literal|0.4F
argument_list|)
expr_stmt|;
comment|// test for a sample compression ratio of 0.65
name|testCompressionRatioConfigure
argument_list|(
literal|0.65F
argument_list|)
expr_stmt|;
comment|// test for a compression ratio of 0.682 which should be standardized
comment|// to round(0.682) i.e 0.68
name|testCompressionRatioConfigure
argument_list|(
literal|0.682F
argument_list|)
expr_stmt|;
comment|// test for a compression ratio of 0.567 which should be standardized
comment|// to round(0.567) i.e 0.57
name|testCompressionRatioConfigure
argument_list|(
literal|0.567F
argument_list|)
expr_stmt|;
comment|// test with a compression ratio of 0.01 which less than the min supported
comment|// value of 0.07
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|testCompressionRatioConfigure
argument_list|(
literal|0.01F
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Compression ratio min value (0.07) check failed!"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
comment|// test with a compression ratio of 0.01 which less than the max supported
comment|// value of 0.68
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|testCompressionRatioConfigure
argument_list|(
literal|0.7F
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Compression ratio max value (0.68) check failed!"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test compression ratio standardization.    */
annotation|@
name|Test
DECL|method|testCompressionRatioStandardization ()
specifier|public
name|void
name|testCompressionRatioStandardization
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0.55F
argument_list|,
name|CompressionEmulationUtil
operator|.
name|standardizeCompressionRatio
argument_list|(
literal|0.55F
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.65F
argument_list|,
name|CompressionEmulationUtil
operator|.
name|standardizeCompressionRatio
argument_list|(
literal|0.652F
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.78F
argument_list|,
name|CompressionEmulationUtil
operator|.
name|standardizeCompressionRatio
argument_list|(
literal|0.777F
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.86F
argument_list|,
name|CompressionEmulationUtil
operator|.
name|standardizeCompressionRatio
argument_list|(
literal|0.855F
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test map input compression ratio configuration utilities.    */
annotation|@
name|Test
DECL|method|testInputCompressionRatioConfiguration ()
specifier|public
name|void
name|testInputCompressionRatioConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|float
name|ratio
init|=
literal|0.567F
decl_stmt|;
name|CompressionEmulationUtil
operator|.
name|setMapInputCompressionEmulationRatio
argument_list|(
name|conf
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ratio
argument_list|,
name|CompressionEmulationUtil
operator|.
name|getMapInputCompressionEmulationRatio
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test map output compression ratio configuration utilities.    */
annotation|@
name|Test
DECL|method|testIntermediateCompressionRatioConfiguration ()
specifier|public
name|void
name|testIntermediateCompressionRatioConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|float
name|ratio
init|=
literal|0.567F
decl_stmt|;
name|CompressionEmulationUtil
operator|.
name|setMapOutputCompressionEmulationRatio
argument_list|(
name|conf
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ratio
argument_list|,
name|CompressionEmulationUtil
operator|.
name|getMapOutputCompressionEmulationRatio
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test reduce output compression ratio configuration utilities.    */
annotation|@
name|Test
DECL|method|testOutputCompressionRatioConfiguration ()
specifier|public
name|void
name|testOutputCompressionRatioConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|float
name|ratio
init|=
literal|0.567F
decl_stmt|;
name|CompressionEmulationUtil
operator|.
name|setReduceOutputCompressionEmulationRatio
argument_list|(
name|conf
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ratio
argument_list|,
name|CompressionEmulationUtil
operator|.
name|getReduceOutputCompressionEmulationRatio
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|0.0D
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test compressible {@link GridmixRecord}.    */
annotation|@
name|Test
DECL|method|testCompressibleGridmixRecord ()
specifier|public
name|void
name|testCompressibleGridmixRecord
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompressionEmulationUtil
operator|.
name|setInputCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|dataSize
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|10
decl_stmt|;
comment|// 10 MB
name|float
name|ratio
init|=
literal|0.357F
decl_stmt|;
comment|// define the test's root temp directory
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestPossiblyCompressibleGridmixRecord"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// define a compressible GridmixRecord
name|GridmixRecord
name|record
init|=
operator|new
name|GridmixRecord
argument_list|(
name|dataSize
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|record
operator|.
name|setCompressibility
argument_list|(
literal|true
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
comment|// enable compression
name|conf
operator|.
name|setClass
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_CODEC
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|CompressionCodec
operator|.
name|class
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
operator|.
name|setCompressOutput
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// write the record to a file
name|Path
name|recordFile
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"record"
argument_list|)
decl_stmt|;
name|OutputStream
name|outStream
init|=
name|CompressionEmulationUtil
operator|.
name|getPossiblyCompressedOutputStream
argument_list|(
name|recordFile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|outStream
argument_list|)
decl_stmt|;
name|record
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// open the compressed stream for reading
name|Path
name|actualRecordFile
init|=
name|recordFile
operator|.
name|suffix
argument_list|(
literal|".gz"
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|CompressionEmulationUtil
operator|.
name|getPossiblyDecompressedInputStream
argument_list|(
name|actualRecordFile
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// get the compressed file size
name|long
name|compressedFileSize
init|=
name|lfs
operator|.
name|listStatus
argument_list|(
name|actualRecordFile
argument_list|)
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|GridmixRecord
name|recordRead
init|=
operator|new
name|GridmixRecord
argument_list|()
decl_stmt|;
name|recordRead
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Record size mismatch in a compressible GridmixRecord"
argument_list|,
name|dataSize
argument_list|,
name|recordRead
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to generate a compressible GridmixRecord"
argument_list|,
name|recordRead
operator|.
name|getSize
argument_list|()
operator|>
name|compressedFileSize
argument_list|)
expr_stmt|;
comment|// check if the record can generate data with the desired compression ratio
name|float
name|seenRatio
init|=
operator|(
operator|(
name|float
operator|)
name|compressedFileSize
operator|)
operator|/
name|dataSize
decl_stmt|;
name|assertEquals
argument_list|(
name|CompressionEmulationUtil
operator|.
name|standardizeCompressionRatio
argument_list|(
name|ratio
argument_list|)
argument_list|,
name|CompressionEmulationUtil
operator|.
name|standardizeCompressionRatio
argument_list|(
name|seenRatio
argument_list|)
argument_list|,
literal|1.0D
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test     * {@link CompressionEmulationUtil#isCompressionEmulationEnabled(    *          org.apache.hadoop.conf.Configuration)}.    */
annotation|@
name|Test
DECL|method|testIsCompressionEmulationEnabled ()
specifier|public
name|void
name|testIsCompressionEmulationEnabled
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Check default values
name|assertTrue
argument_list|(
name|CompressionEmulationUtil
operator|.
name|isCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check disabled
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CompressionEmulationUtil
operator|.
name|isCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check enabled
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CompressionEmulationUtil
operator|.
name|isCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test     * {@link CompressionEmulationUtil#getPossiblyDecompressedInputStream(Path,     *                                   Configuration, long)}    *  and    *  {@link CompressionEmulationUtil#getPossiblyCompressedOutputStream(Path,     *                                    Configuration)}.    */
annotation|@
name|Test
DECL|method|testPossiblyCompressedDecompressedStreams ()
specifier|public
name|void
name|testPossiblyCompressedDecompressedStreams
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|inputLine
init|=
literal|"Hi Hello!"
decl_stmt|;
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompressionEmulationUtil
operator|.
name|setInputCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_CODEC
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|,
name|CompressionCodec
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// define the test's root temp directory
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestPossiblyCompressedDecompressedStreams"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create a compressed file
name|Path
name|compressedFile
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|CompressionEmulationUtil
operator|.
name|getPossiblyCompressedOutputStream
argument_list|(
name|compressedFile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|inputLine
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now read back the data from the compressed stream
name|compressedFile
operator|=
name|compressedFile
operator|.
name|suffix
argument_list|(
literal|".gz"
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|CompressionEmulationUtil
operator|.
name|getPossiblyDecompressedInputStream
argument_list|(
name|compressedFile
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|readLine
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Compression/Decompression error"
argument_list|,
name|inputLine
argument_list|,
name|readLine
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test if     * {@link CompressionEmulationUtil#configureCompressionEmulation(    *        org.apache.hadoop.mapred.JobConf, org.apache.hadoop.mapred.JobConf)}    *  can extract compression related configuration parameters.    */
annotation|@
name|Test
DECL|method|testExtractCompressionConfigs ()
specifier|public
name|void
name|testExtractCompressionConfigs
parameter_list|()
block|{
name|JobConf
name|source
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|JobConf
name|target
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
comment|// set the default values
name|source
operator|.
name|setBoolean
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|source
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_CODEC
argument_list|,
literal|"MyDefaultCodec"
argument_list|)
expr_stmt|;
name|source
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_TYPE
argument_list|,
literal|"MyDefaultType"
argument_list|)
expr_stmt|;
name|source
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|source
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS_CODEC
argument_list|,
literal|"MyDefaultCodec2"
argument_list|)
expr_stmt|;
name|CompressionEmulationUtil
operator|.
name|configureCompressionEmulation
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
comment|// check default values
name|assertFalse
argument_list|(
name|target
operator|.
name|getBoolean
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyDefaultCodec"
argument_list|,
name|target
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_CODEC
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyDefaultType"
argument_list|,
name|target
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|target
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyDefaultCodec2"
argument_list|,
name|target
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS_CODEC
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CompressionEmulationUtil
operator|.
name|isInputCompressionEmulationEnabled
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
comment|// set new values
name|source
operator|.
name|setBoolean
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|source
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_CODEC
argument_list|,
literal|"MyCodec"
argument_list|)
expr_stmt|;
name|source
operator|.
name|set
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_TYPE
argument_list|,
literal|"MyType"
argument_list|)
expr_stmt|;
name|source
operator|.
name|setBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|source
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS_CODEC
argument_list|,
literal|"MyCodec2"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|source
argument_list|,
literal|"file.gz"
argument_list|)
expr_stmt|;
name|target
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
comment|// reset
name|CompressionEmulationUtil
operator|.
name|configureCompressionEmulation
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
comment|// check new values
name|assertTrue
argument_list|(
name|target
operator|.
name|getBoolean
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyCodec"
argument_list|,
name|target
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_CODEC
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyType"
argument_list|,
name|target
operator|.
name|get
argument_list|(
name|FileOutputFormat
operator|.
name|COMPRESS_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|target
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyCodec2"
argument_list|,
name|target
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|MAP_OUTPUT_COMPRESS_CODEC
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CompressionEmulationUtil
operator|.
name|isInputCompressionEmulationEnabled
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test of {@link FileQueue} can identify compressed file and provide    * readers to extract uncompressed data only if input-compression is enabled.    */
annotation|@
name|Test
DECL|method|testFileQueueDecompression ()
specifier|public
name|void
name|testFileQueueDecompression
parameter_list|()
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|inputLine
init|=
literal|"Hi Hello!"
decl_stmt|;
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CompressionEmulationUtil
operator|.
name|setInputCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
operator|.
name|setCompressOutput
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
operator|.
name|setOutputCompressorClass
argument_list|(
name|conf
argument_list|,
name|GzipCodec
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// define the test's root temp directory
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestFileQueueDecompression"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create a compressed file
name|Path
name|compressedFile
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|CompressionEmulationUtil
operator|.
name|getPossiblyCompressedOutputStream
argument_list|(
name|compressedFile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|inputLine
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressedFile
operator|=
name|compressedFile
operator|.
name|suffix
argument_list|(
literal|".gz"
argument_list|)
expr_stmt|;
comment|// now read back the data from the compressed stream using FileQueue
name|long
name|fileSize
init|=
name|lfs
operator|.
name|listStatus
argument_list|(
name|compressedFile
argument_list|)
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|CombineFileSplit
name|split
init|=
operator|new
name|CombineFileSplit
argument_list|(
operator|new
name|Path
index|[]
block|{
name|compressedFile
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|fileSize
block|}
argument_list|)
decl_stmt|;
name|FileQueue
name|queue
init|=
operator|new
name|FileQueue
argument_list|(
name|split
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|inputLine
operator|.
name|getBytes
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|queue
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|queue
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|readLine
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Compression/Decompression error"
argument_list|,
name|inputLine
argument_list|,
name|readLine
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

