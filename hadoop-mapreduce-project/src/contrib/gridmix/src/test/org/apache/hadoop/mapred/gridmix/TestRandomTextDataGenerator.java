begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|RandomTextDataGenerator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test {@link RandomTextDataGenerator}.  */
end_comment

begin_class
DECL|class|TestRandomTextDataGenerator
specifier|public
class|class
name|TestRandomTextDataGenerator
block|{
comment|/**    * Test if {@link RandomTextDataGenerator} can generate random words of     * desired size.    */
annotation|@
name|Test
DECL|method|testRandomTextDataGenerator ()
specifier|public
name|void
name|testRandomTextDataGenerator
parameter_list|()
block|{
name|RandomTextDataGenerator
name|rtdg
init|=
operator|new
name|RandomTextDataGenerator
argument_list|(
literal|10
argument_list|,
literal|0L
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|words
init|=
name|rtdg
operator|.
name|getRandomWords
argument_list|()
decl_stmt|;
comment|// check the size
name|assertEquals
argument_list|(
literal|"List size mismatch"
argument_list|,
literal|10
argument_list|,
name|words
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the words
name|Set
argument_list|<
name|String
argument_list|>
name|wordsSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|words
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"List size mismatch due to duplicates"
argument_list|,
literal|10
argument_list|,
name|wordsSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the word lengths
for|for
control|(
name|String
name|word
range|:
name|wordsSet
control|)
block|{
name|assertEquals
argument_list|(
literal|"Word size mismatch"
argument_list|,
literal|5
argument_list|,
name|word
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test if {@link RandomTextDataGenerator} can generate same words given the    * same list-size, word-length and seed.    */
annotation|@
name|Test
DECL|method|testRandomTextDataGeneratorRepeatability ()
specifier|public
name|void
name|testRandomTextDataGeneratorRepeatability
parameter_list|()
block|{
name|RandomTextDataGenerator
name|rtdg1
init|=
operator|new
name|RandomTextDataGenerator
argument_list|(
literal|10
argument_list|,
literal|0L
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|words1
init|=
name|rtdg1
operator|.
name|getRandomWords
argument_list|()
decl_stmt|;
name|RandomTextDataGenerator
name|rtdg2
init|=
operator|new
name|RandomTextDataGenerator
argument_list|(
literal|10
argument_list|,
literal|0L
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|words2
init|=
name|rtdg2
operator|.
name|getRandomWords
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"List mismatch"
argument_list|,
name|words1
operator|.
name|equals
argument_list|(
name|words2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if {@link RandomTextDataGenerator} can generate different words given     * different seeds.    */
annotation|@
name|Test
DECL|method|testRandomTextDataGeneratorUniqueness ()
specifier|public
name|void
name|testRandomTextDataGeneratorUniqueness
parameter_list|()
block|{
name|RandomTextDataGenerator
name|rtdg1
init|=
operator|new
name|RandomTextDataGenerator
argument_list|(
literal|10
argument_list|,
literal|1L
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|words1
init|=
operator|new
name|HashSet
argument_list|(
name|rtdg1
operator|.
name|getRandomWords
argument_list|()
argument_list|)
decl_stmt|;
name|RandomTextDataGenerator
name|rtdg2
init|=
operator|new
name|RandomTextDataGenerator
argument_list|(
literal|10
argument_list|,
literal|0L
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|words2
init|=
operator|new
name|HashSet
argument_list|(
name|rtdg2
operator|.
name|getRandomWords
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"List size mismatch across lists"
argument_list|,
name|words1
operator|.
name|equals
argument_list|(
name|words2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

