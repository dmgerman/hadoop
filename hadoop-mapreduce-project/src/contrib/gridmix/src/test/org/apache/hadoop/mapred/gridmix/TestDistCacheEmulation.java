begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|MapContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Validate emulation of distributed cache load in gridmix simulated jobs.  *  */
end_comment

begin_class
DECL|class|TestDistCacheEmulation
specifier|public
class|class
name|TestDistCacheEmulation
block|{
DECL|field|dce
specifier|private
name|DistributedCacheEmulator
name|dce
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|GridmixTestUtils
operator|.
name|initCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutDown ()
specifier|public
specifier|static
name|void
name|shutDown
parameter_list|()
throws|throws
name|IOException
block|{
name|GridmixTestUtils
operator|.
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Validate the dist cache files generated by GenerateDistCacheData job.    * @param jobConf configuration of GenerateDistCacheData job.    * @param sortedFileSizes array of sorted distributed cache file sizes     * @throws IOException     * @throws FileNotFoundException     */
DECL|method|validateDistCacheData (JobConf jobConf, long[] sortedFileSizes)
specifier|private
name|void
name|validateDistCacheData
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|long
index|[]
name|sortedFileSizes
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Path
name|distCachePath
init|=
name|dce
operator|.
name|getDistributedCacheDir
argument_list|()
decl_stmt|;
name|String
name|filesListFile
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|GenerateDistCacheData
operator|.
name|GRIDMIX_DISTCACHE_FILE_LIST
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
comment|// Validate the existence of Distributed Cache files list file directly
comment|// under distributed cache directory
name|Path
name|listFile
init|=
operator|new
name|Path
argument_list|(
name|filesListFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Path of Distributed Cache files list file is wrong."
argument_list|,
name|distCachePath
operator|.
name|equals
argument_list|(
name|listFile
operator|.
name|getParent
argument_list|()
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the dist cache files list file
name|assertTrue
argument_list|(
literal|"Failed to delete distributed Cache files list file "
operator|+
name|listFile
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|listFile
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|fileSizes
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|size
range|:
name|sortedFileSizes
control|)
block|{
name|fileSizes
operator|.
name|add
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|// validate dist cache files after deleting the 'files list file'
name|validateDistCacheFiles
argument_list|(
name|fileSizes
argument_list|,
name|distCachePath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate private/public distributed cache files.    * @param filesSizesExpected list of sizes of expected dist cache files    * @param distCacheDir the distributed cache dir to be validated    * @throws IOException     * @throws FileNotFoundException     */
DECL|method|validateDistCacheFiles (List filesSizesExpected, Path distCacheDir)
specifier|private
name|void
name|validateDistCacheFiles
parameter_list|(
name|List
name|filesSizesExpected
parameter_list|,
name|Path
name|distCacheDir
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|iter
init|=
name|GridmixTestUtils
operator|.
name|dfs
operator|.
name|listFiles
argument_list|(
name|distCacheDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|numFiles
init|=
name|filesSizesExpected
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Missing distributed cache files."
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|LocatedFileStatus
name|stat
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File size of distributed cache file "
operator|+
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|+
literal|" is wrong."
argument_list|,
name|filesSizesExpected
operator|.
name|remove
argument_list|(
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FsPermission
name|perm
init|=
name|stat
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong permissions for distributed cache file "
operator|+
name|stat
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0644
argument_list|)
argument_list|,
name|perm
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Number of files under distributed cache dir is wrong."
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Configures 5 HDFS-based dist cache files and 1 local-FS-based dist cache    * file in the given Configuration object<code>conf</code>.    * @param conf configuration where dist cache config properties are to be set    * @param useOldProperties<code>true</code> if old config properties are to    *                         be set    * @return array of sorted HDFS-based distributed cache file sizes    * @throws IOException    */
DECL|method|configureDummyDistCacheFiles (Configuration conf, boolean useOldProperties)
specifier|private
name|long
index|[]
name|configureDummyDistCacheFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|useOldProperties
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapreduce.job.hdfs-servers"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Set some dummy dist cache files in gridmix configuration so that they go
comment|// into the configuration of JobStory objects.
name|String
index|[]
name|distCacheFiles
init|=
block|{
literal|"hdfs:///tmp/file1.txt"
block|,
literal|"/tmp/"
operator|+
name|user
operator|+
literal|"/.staging/job_1/file2.txt"
block|,
literal|"hdfs:///user/user1/file3.txt"
block|,
literal|"/home/user2/file4.txt"
block|,
literal|"subdir1/file5.txt"
block|,
literal|"subdir2/file6.gz"
block|}
decl_stmt|;
name|String
index|[]
name|fileSizes
init|=
block|{
literal|"400"
block|,
literal|"2500"
block|,
literal|"700"
block|,
literal|"1200"
block|,
literal|"1500"
block|,
literal|"500"
block|}
decl_stmt|;
name|String
index|[]
name|visibilities
init|=
block|{
literal|"true"
block|,
literal|"false"
block|,
literal|"false"
block|,
literal|"true"
block|,
literal|"true"
block|,
literal|"false"
block|}
decl_stmt|;
name|String
index|[]
name|timeStamps
init|=
block|{
literal|"1234"
block|,
literal|"2345"
block|,
literal|"34567"
block|,
literal|"5434"
block|,
literal|"125"
block|,
literal|"134"
block|}
decl_stmt|;
if|if
condition|(
name|useOldProperties
condition|)
block|{
name|conf
operator|.
name|setStrings
argument_list|(
literal|"mapred.cache.files"
argument_list|,
name|distCacheFiles
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"mapred.cache.files.filesizes"
argument_list|,
name|fileSizes
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"mapred.cache.files.visibilities"
argument_list|,
name|visibilities
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
literal|"mapred.cache.files.timestamps"
argument_list|,
name|timeStamps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES
argument_list|,
name|distCacheFiles
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES_SIZES
argument_list|,
name|fileSizes
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_VISIBILITIES
argument_list|,
name|visibilities
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_TIMESTAMPS
argument_list|,
name|timeStamps
argument_list|)
expr_stmt|;
block|}
comment|// local FS based dist cache file whose path contains<user>/.staging is
comment|// not created on HDFS. So file size 2500 is not added to sortedFileSizes.
name|long
index|[]
name|sortedFileSizes
init|=
operator|new
name|long
index|[]
block|{
literal|1500
block|,
literal|1200
block|,
literal|700
block|,
literal|500
block|,
literal|400
block|}
decl_stmt|;
return|return
name|sortedFileSizes
return|;
block|}
comment|/**    * Runs setupGenerateDistCacheData() on a new DistrbutedCacheEmulator and    * and returns the jobConf. Fills the array<code>sortedFileSizes</code> that    * can be used for validation.    * Validation of exit code from setupGenerateDistCacheData() is done.    * @param generate true if -generate option is specified    * @param sortedFileSizes sorted HDFS-based distributed cache file sizes    * @throws IOException    * @throws InterruptedException    */
DECL|method|runSetupGenerateDistCacheData (boolean generate, long[] sortedFileSizes)
specifier|private
name|JobConf
name|runSetupGenerateDistCacheData
parameter_list|(
name|boolean
name|generate
parameter_list|,
name|long
index|[]
name|sortedFileSizes
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|long
index|[]
name|fileSizes
init|=
name|configureDummyDistCacheFiles
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|fileSizes
argument_list|,
literal|0
argument_list|,
name|sortedFileSizes
argument_list|,
literal|0
argument_list|,
name|fileSizes
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Job stories of all 3 jobs will have same dist cache files in their
comment|// configurations
specifier|final
name|int
name|numJobs
init|=
literal|3
decl_stmt|;
name|DebugJobProducer
name|jobProducer
init|=
operator|new
name|DebugJobProducer
argument_list|(
name|numJobs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
name|GridmixTestUtils
operator|.
name|mrCluster
operator|.
name|createJobConf
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|ioPath
init|=
operator|new
name|Path
argument_list|(
literal|"testSetupGenerateDistCacheData"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|GridmixTestUtils
operator|.
name|dfs
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|ioPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|ioPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|ioPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
name|dce
operator|=
name|createDistributedCacheEmulator
argument_list|(
name|jobConf
argument_list|,
name|ioPath
argument_list|,
name|generate
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|dce
operator|.
name|setupGenerateDistCacheData
argument_list|(
name|jobProducer
argument_list|)
decl_stmt|;
name|int
name|expectedExitCode
init|=
name|generate
condition|?
literal|0
else|:
name|dce
operator|.
name|MISSING_DIST_CACHE_FILES_ERROR
decl_stmt|;
name|assertEquals
argument_list|(
literal|"setupGenerateDistCacheData failed."
argument_list|,
name|expectedExitCode
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
comment|// reset back
name|resetDistCacheConfigProperties
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
return|return
name|jobConf
return|;
block|}
comment|/**    * Reset the config properties related to Distributed Cache in the given    * job configuration<code>jobConf</code>.    * @param jobConf job configuration    */
DECL|method|resetDistCacheConfigProperties (JobConf jobConf)
specifier|private
name|void
name|resetDistCacheConfigProperties
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
block|{
comment|// reset current/latest property names
name|jobConf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES_SIZES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_TIMESTAMPS
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_VISIBILITIES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// reset old property names
name|jobConf
operator|.
name|setStrings
argument_list|(
literal|"mapred.cache.files"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setStrings
argument_list|(
literal|"mapred.cache.files.filesizes"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setStrings
argument_list|(
literal|"mapred.cache.files.visibilities"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setStrings
argument_list|(
literal|"mapred.cache.files.timestamps"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate GenerateDistCacheData job if it creates dist cache files properly.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testGenerateDistCacheData ()
specifier|public
name|void
name|testGenerateDistCacheData
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|sortedFileSizes
init|=
operator|new
name|long
index|[
literal|5
index|]
decl_stmt|;
name|JobConf
name|jobConf
init|=
name|runSetupGenerateDistCacheData
argument_list|(
literal|true
argument_list|,
name|sortedFileSizes
argument_list|)
decl_stmt|;
name|GridmixJob
name|gridmixJob
init|=
operator|new
name|GenerateDistCacheData
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|gridmixJob
operator|.
name|call
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of reduce tasks in GenerateDistCacheData is not 0."
argument_list|,
literal|0
argument_list|,
name|job
operator|.
name|getNumReduceTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"GenerateDistCacheData job failed."
argument_list|,
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|validateDistCacheData
argument_list|(
name|jobConf
argument_list|,
name|sortedFileSizes
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Validate setupGenerateDistCacheData by validating    *<li> permissions of the distributed cache directories and    *<li> content of the generated sequence file. This includes validation of    *       dist cache file paths and their file sizes.    */
DECL|method|validateSetupGenDC (JobConf jobConf, long[] sortedFileSizes)
specifier|private
name|void
name|validateSetupGenDC
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|long
index|[]
name|sortedFileSizes
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// build things needed for validation
name|long
name|sumOfFileSizes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedFileSizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sumOfFileSizes
operator|+=
name|sortedFileSizes
index|[
name|i
index|]
expr_stmt|;
block|}
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of distributed cache files to be generated is wrong."
argument_list|,
name|sortedFileSizes
operator|.
name|length
argument_list|,
name|jobConf
operator|.
name|getInt
argument_list|(
name|GenerateDistCacheData
operator|.
name|GRIDMIX_DISTCACHE_FILE_COUNT
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Total size of dist cache files to be generated is wrong."
argument_list|,
name|sumOfFileSizes
argument_list|,
name|jobConf
operator|.
name|getLong
argument_list|(
name|GenerateDistCacheData
operator|.
name|GRIDMIX_DISTCACHE_BYTE_COUNT
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|filesListFile
init|=
operator|new
name|Path
argument_list|(
name|jobConf
operator|.
name|get
argument_list|(
name|GenerateDistCacheData
operator|.
name|GRIDMIX_DISTCACHE_FILE_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
name|stat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|filesListFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong permissions of dist Cache files list file "
operator|+
name|filesListFile
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0644
argument_list|)
argument_list|,
name|stat
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
name|split
init|=
operator|new
name|FileSplit
argument_list|(
name|filesListFile
argument_list|,
literal|0
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|taskContext
init|=
name|MapReduceTestUtil
operator|.
name|createDummyMapTaskAttemptContext
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|BytesWritable
argument_list|>
name|reader
init|=
operator|new
name|GenerateDistCacheData
operator|.
name|GenDCDataFormat
argument_list|()
operator|.
name|createRecordReader
argument_list|(
name|split
argument_list|,
name|taskContext
argument_list|)
decl_stmt|;
name|MapContext
argument_list|<
name|LongWritable
argument_list|,
name|BytesWritable
argument_list|,
name|NullWritable
argument_list|,
name|BytesWritable
argument_list|>
name|mapContext
init|=
operator|new
name|MapContextImpl
argument_list|<
name|LongWritable
argument_list|,
name|BytesWritable
argument_list|,
name|NullWritable
argument_list|,
name|BytesWritable
argument_list|>
argument_list|(
name|jobConf
argument_list|,
name|taskContext
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|reader
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|MapReduceTestUtil
operator|.
name|createDummyReporter
argument_list|()
argument_list|,
name|split
argument_list|)
decl_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|split
argument_list|,
name|mapContext
argument_list|)
expr_stmt|;
comment|// start validating setupGenerateDistCacheData
name|doValidateSetupGenDC
argument_list|(
name|reader
argument_list|,
name|fs
argument_list|,
name|sortedFileSizes
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Validate setupGenerateDistCacheData by validating    *<li> permissions of the distributed cache directory and    *<li> content of the generated sequence file. This includes validation of    *       dist cache file paths and their file sizes.    */
DECL|method|doValidateSetupGenDC (RecordReader<LongWritable, BytesWritable> reader, FileSystem fs, long[] sortedFileSizes)
specifier|private
name|void
name|doValidateSetupGenDC
parameter_list|(
name|RecordReader
argument_list|<
name|LongWritable
argument_list|,
name|BytesWritable
argument_list|>
name|reader
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|long
index|[]
name|sortedFileSizes
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Validate permissions of dist cache directory
name|Path
name|distCacheDir
init|=
name|dce
operator|.
name|getDistributedCacheDir
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong permissions for distributed cache dir "
operator|+
name|distCacheDir
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|distCacheDir
argument_list|)
operator|.
name|getPermission
argument_list|()
operator|.
name|getOtherAction
argument_list|()
operator|.
name|and
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
argument_list|,
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
comment|// Validate the content of the sequence file generated by
comment|// dce.setupGenerateDistCacheData().
name|LongWritable
name|key
init|=
operator|new
name|LongWritable
argument_list|()
decl_stmt|;
name|BytesWritable
name|val
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedFileSizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Number of files written to the sequence file by "
operator|+
literal|"setupGenerateDistCacheData is less than the expected."
argument_list|,
name|reader
operator|.
name|nextKeyValue
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
name|reader
operator|.
name|getCurrentKey
argument_list|()
expr_stmt|;
name|val
operator|=
name|reader
operator|.
name|getCurrentValue
argument_list|()
expr_stmt|;
name|long
name|fileSize
init|=
name|key
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|file
init|=
operator|new
name|String
argument_list|(
name|val
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|val
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
comment|// Dist Cache files should be sorted based on file size.
name|assertEquals
argument_list|(
literal|"Dist cache file size is wrong."
argument_list|,
name|sortedFileSizes
index|[
name|i
index|]
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
comment|// Validate dist cache file path.
comment|// parent dir of dist cache file
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
operator|.
name|getParent
argument_list|()
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
decl_stmt|;
comment|// should exist in dist cache dir
name|assertTrue
argument_list|(
literal|"Public dist cache file path is wrong."
argument_list|,
name|distCacheDir
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *  Test if DistributedCacheEmulator's setup of GenerateDistCacheData is    *  working as expected.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
DECL|method|testSetupGenerateDistCacheData ()
specifier|public
name|void
name|testSetupGenerateDistCacheData
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
index|[]
name|sortedFileSizes
init|=
operator|new
name|long
index|[
literal|5
index|]
decl_stmt|;
name|JobConf
name|jobConf
init|=
name|runSetupGenerateDistCacheData
argument_list|(
literal|true
argument_list|,
name|sortedFileSizes
argument_list|)
decl_stmt|;
name|validateSetupGenDC
argument_list|(
name|jobConf
argument_list|,
name|sortedFileSizes
argument_list|)
expr_stmt|;
comment|// Verify if correct exit code is seen when -generate option is missing and
comment|// distributed cache files are missing in the expected path.
name|runSetupGenerateDistCacheData
argument_list|(
literal|false
argument_list|,
name|sortedFileSizes
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Create DistributedCacheEmulator object and do the initialization by    *  calling init() on it with dummy trace. Also configure the pseudo local FS.    */
DECL|method|createDistributedCacheEmulator ( Configuration conf, Path ioPath, boolean generate)
specifier|private
name|DistributedCacheEmulator
name|createDistributedCacheEmulator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|ioPath
parameter_list|,
name|boolean
name|generate
parameter_list|)
throws|throws
name|IOException
block|{
name|DistributedCacheEmulator
name|dce
init|=
operator|new
name|DistributedCacheEmulator
argument_list|(
name|conf
argument_list|,
name|ioPath
argument_list|)
decl_stmt|;
name|JobCreator
name|jobCreator
init|=
name|JobCreator
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|,
name|JobCreator
operator|.
name|LOADJOB
argument_list|)
decl_stmt|;
name|jobCreator
operator|.
name|setDistCacheEmulator
argument_list|(
name|dce
argument_list|)
expr_stmt|;
name|dce
operator|.
name|init
argument_list|(
literal|"dummytrace"
argument_list|,
name|jobCreator
argument_list|,
name|generate
argument_list|)
expr_stmt|;
return|return
name|dce
return|;
block|}
comment|/**    *  Test the configuration property for disabling/enabling emulation of    *  distributed cache load.    */
annotation|@
name|Test
DECL|method|testDistCacheEmulationConfigurability ()
specifier|public
name|void
name|testDistCacheEmulationConfigurability
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
name|GridmixTestUtils
operator|.
name|mrCluster
operator|.
name|createJobConf
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|ioPath
init|=
operator|new
name|Path
argument_list|(
literal|"testDistCacheEmulationConfigurability"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|GridmixTestUtils
operator|.
name|dfs
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|ioPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
comment|// default config
name|dce
operator|=
name|createDistributedCacheEmulator
argument_list|(
name|jobConf
argument_list|,
name|ioPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Default configuration of "
operator|+
name|DistributedCacheEmulator
operator|.
name|GRIDMIX_EMULATE_DISTRIBUTEDCACHE
operator|+
literal|" is wrong."
argument_list|,
name|dce
operator|.
name|shouldEmulateDistCacheLoad
argument_list|()
argument_list|)
expr_stmt|;
comment|// config property set to false
name|jobConf
operator|.
name|setBoolean
argument_list|(
name|DistributedCacheEmulator
operator|.
name|GRIDMIX_EMULATE_DISTRIBUTEDCACHE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dce
operator|=
name|createDistributedCacheEmulator
argument_list|(
name|jobConf
argument_list|,
name|ioPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Disabling of emulation of distributed cache load by setting "
operator|+
name|DistributedCacheEmulator
operator|.
name|GRIDMIX_EMULATE_DISTRIBUTEDCACHE
operator|+
literal|" to false is not working."
argument_list|,
name|dce
operator|.
name|shouldEmulateDistCacheLoad
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify if DistributedCacheEmulator can configure distributed cache files    * for simulated job if job conf from trace had no dist cache files.    * @param conf configuration for the simulated job to be run    * @param jobConf job configuration of original cluster's job, obtained from    *                trace    * @throws IOException    */
DECL|method|validateJobConfWithOutDCFiles (Configuration conf, JobConf jobConf)
specifier|private
name|void
name|validateJobConfWithOutDCFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Validate if Gridmix can configure dist cache files properly if there are
comment|// no HDFS-based dist cache files and localFS-based dist cache files in
comment|// trace for a job.
name|dce
operator|.
name|configureDistCacheFiles
argument_list|(
name|conf
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Distributed cache files configured by GridMix is wrong."
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Distributed cache files configured by Gridmix through -files "
operator|+
literal|"option is wrong."
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"tmpfiles"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify if DistributedCacheEmulator can configure distributed cache files    * for simulated job if job conf from trace had HDFS-based dist cache files    * and local-FS-based dist cache files.    *<br>Also validate if Gridmix can handle/read deprecated config properties    * like mapred.cache.files.filesizes and mapred.cache.files.visibilities from    * trace file.    * @param conf configuration for the simulated job to be run    * @param jobConf job configuration of original cluster's job, obtained from    *                trace    * @throws IOException    */
DECL|method|validateJobConfWithDCFiles (Configuration conf, JobConf jobConf)
specifier|private
name|void
name|validateJobConfWithDCFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|long
index|[]
name|sortedFileSizes
init|=
name|configureDummyDistCacheFiles
argument_list|(
name|jobConf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Validate if Gridmix can handle deprecated config properties like
comment|// mapred.cache.files.filesizes and mapred.cache.files.visibilities.
comment|// 1 local FS based dist cache file and 5 HDFS based dist cache files. So
comment|// total expected dist cache files count is 6.
name|assertEquals
argument_list|(
literal|"Gridmix is not able to extract dist cache file sizes."
argument_list|,
literal|6
argument_list|,
name|jobConf
operator|.
name|getStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES_SIZES
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Gridmix is not able to extract dist cache file visibilities."
argument_list|,
literal|6
argument_list|,
name|jobConf
operator|.
name|getStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_VISIBILITIES
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|dce
operator|.
name|configureDistCacheFiles
argument_list|(
name|conf
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Configuring of HDFS-based dist cache files by gridmix is "
operator|+
literal|"wrong."
argument_list|,
name|sortedFileSizes
operator|.
name|length
argument_list|,
name|conf
operator|.
name|getStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Configuring of local-FS-based dist cache files by gridmix is "
operator|+
literal|"wrong."
argument_list|,
literal|1
argument_list|,
name|conf
operator|.
name|getStrings
argument_list|(
literal|"tmpfiles"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify if configureDistCacheFiles() works fine when there are distributed    * cache files set but visibilities are not set. This is to handle history    * traces of older hadoop version where there are no private/public    * Distributed Caches.    * @throws IOException    */
DECL|method|validateWithOutVisibilities ()
specifier|private
name|void
name|validateWithOutVisibilities
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// configuration for simulated job
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|String
name|user
init|=
literal|"user1"
decl_stmt|;
name|jobConf
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|String
index|[]
name|files
init|=
block|{
literal|"/tmp/hdfs1.txt"
block|,
literal|"/tmp/"
operator|+
name|user
operator|+
literal|"/.staging/file1"
block|}
decl_stmt|;
name|jobConf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES_SIZES
argument_list|,
literal|"12,200"
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILE_TIMESTAMPS
argument_list|,
literal|"56789,98345"
argument_list|)
expr_stmt|;
name|dce
operator|.
name|configureDistCacheFiles
argument_list|(
name|conf
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Configuring of HDFS-based dist cache files by gridmix is "
operator|+
literal|"wrong."
argument_list|,
name|files
operator|.
name|length
argument_list|,
name|conf
operator|.
name|getStrings
argument_list|(
name|MRJobConfig
operator|.
name|CACHE_FILES
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Configuring of local-FS-based dist cache files by gridmix is "
operator|+
literal|"wrong."
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"tmpfiles"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if Gridmix can configure config properties related to Distributed    * Cache properly. Also verify if Gridmix can handle deprecated config    * properties related to Distributed Cache.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testDistCacheFilesConfiguration ()
specifier|public
name|void
name|testDistCacheFilesConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
name|GridmixTestUtils
operator|.
name|mrCluster
operator|.
name|createJobConf
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|ioPath
init|=
operator|new
name|Path
argument_list|(
literal|"testDistCacheEmulationConfigurability"
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|GridmixTestUtils
operator|.
name|dfs
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|ioPath
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0777
argument_list|)
argument_list|)
expr_stmt|;
comment|// default config
name|dce
operator|=
name|createDistributedCacheEmulator
argument_list|(
name|jobConf
argument_list|,
name|ioPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Default configuration of "
operator|+
name|DistributedCacheEmulator
operator|.
name|GRIDMIX_EMULATE_DISTRIBUTEDCACHE
operator|+
literal|" is wrong."
argument_list|,
name|dce
operator|.
name|shouldEmulateDistCacheLoad
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate if DistributedCacheEmulator can handle a JobStory with out
comment|// Distributed Cache files properly.
name|validateJobConfWithOutDCFiles
argument_list|(
name|conf
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
comment|// Validate if Gridmix can configure dist cache files properly if there are
comment|// HDFS-based dist cache files and localFS-based dist cache files in trace
comment|// for a job. Set old config properties and validate.
name|validateJobConfWithDCFiles
argument_list|(
name|conf
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
comment|// Use new JobConf as JobStory conf and check if configureDistCacheFiles()
comment|// doesn't throw NPE when there are dist cache files set but visibilities
comment|// are not set.
name|validateWithOutVisibilities
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

