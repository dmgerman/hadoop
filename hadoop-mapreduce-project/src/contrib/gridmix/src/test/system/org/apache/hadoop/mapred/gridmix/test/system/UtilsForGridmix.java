begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix.test.system
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|test
operator|.
name|system
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|Gridmix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|ProxyUserDefinitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|ProxyUserDefinitions
operator|.
name|GroupsAndHost
import|;
end_import

begin_comment
comment|/**  * Gridmix utilities.  */
end_comment

begin_class
DECL|class|UtilsForGridmix
specifier|public
class|class
name|UtilsForGridmix
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UtilsForGridmix
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_TRACES_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|DEFAULT_TRACES_PATH
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
literal|"/src/test/system/resources/"
argument_list|)
decl_stmt|;
comment|/**    * cleanup the folder or file.    * @param path - folder or file path.    * @param conf - cluster configuration     * @throws IOException - If an I/O error occurs.    */
DECL|method|cleanup (Path path, Configuration conf)
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the login user.    * @return - login user as string..    * @throws IOException - if an I/O error occurs.    */
DECL|method|getUserName ()
specifier|public
specifier|static
name|String
name|getUserName
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getUserName
argument_list|()
return|;
block|}
comment|/**    * Get the argument list for gridmix job.    * @param gridmixDir - gridmix parent directory.    * @param gridmixRunMode - gridmix modes either 1,2,3.    * @param values - gridmix runtime values.    * @param otherArgs - gridmix other generic args.    * @return - argument list as string array.    */
DECL|method|getArgsList (Path gridmixDir, int gridmixRunMode, String [] values, String [] otherArgs)
specifier|public
specifier|static
name|String
index|[]
name|getArgsList
parameter_list|(
name|Path
name|gridmixDir
parameter_list|,
name|int
name|gridmixRunMode
parameter_list|,
name|String
index|[]
name|values
parameter_list|,
name|String
index|[]
name|otherArgs
parameter_list|)
block|{
name|String
index|[]
name|runtimeArgs
init|=
block|{
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_LOG_MODE
operator|+
literal|"=DEBUG"
block|,
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_OUTPUT_DIR
operator|+
literal|"=gridmix"
block|,
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_JOB_SUBMISSION_QUEUE_IN_TRACE
operator|+
literal|"=true"
block|,
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_JOB_TYPE
operator|+
literal|"="
operator|+
name|values
index|[
literal|0
index|]
block|,
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_USER_RESOLVER
operator|+
literal|"="
operator|+
name|values
index|[
literal|1
index|]
block|,
literal|"-D"
block|,
name|GridMixConfig
operator|.
name|GRIDMIX_SUBMISSION_POLICY
operator|+
literal|"="
operator|+
name|values
index|[
literal|2
index|]
block|}
decl_stmt|;
name|String
index|[]
name|classArgs
decl_stmt|;
if|if
condition|(
operator|(
name|gridmixRunMode
operator|==
name|GridMixRunMode
operator|.
name|DATA_GENERATION
operator|.
name|getValue
argument_list|()
operator|||
name|gridmixRunMode
operator|==
name|GridMixRunMode
operator|.
name|DATA_GENERATION_AND_RUN_GRIDMIX
operator|.
name|getValue
argument_list|()
operator|)
operator|&&
name|values
index|[
literal|1
index|]
operator|.
name|indexOf
argument_list|(
literal|"RoundRobinUserResolver"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|classArgs
operator|=
operator|new
name|String
index|[]
block|{
literal|"-generate"
block|,
name|values
index|[
literal|3
index|]
block|,
literal|"-users"
block|,
name|values
index|[
literal|4
index|]
block|,
name|gridmixDir
operator|.
name|toString
argument_list|()
block|,
name|values
index|[
literal|5
index|]
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gridmixRunMode
operator|==
name|GridMixRunMode
operator|.
name|DATA_GENERATION
operator|.
name|getValue
argument_list|()
operator|||
name|gridmixRunMode
operator|==
name|GridMixRunMode
operator|.
name|DATA_GENERATION_AND_RUN_GRIDMIX
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|classArgs
operator|=
operator|new
name|String
index|[]
block|{
literal|"-generate"
block|,
name|values
index|[
literal|3
index|]
block|,
name|gridmixDir
operator|.
name|toString
argument_list|()
block|,
name|values
index|[
literal|4
index|]
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gridmixRunMode
operator|==
name|GridMixRunMode
operator|.
name|RUN_GRIDMIX
operator|.
name|getValue
argument_list|()
operator|&&
name|values
index|[
literal|1
index|]
operator|.
name|indexOf
argument_list|(
literal|"RoundRobinUserResolver"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|classArgs
operator|=
operator|new
name|String
index|[]
block|{
literal|"-users"
block|,
name|values
index|[
literal|3
index|]
block|,
name|gridmixDir
operator|.
name|toString
argument_list|()
block|,
name|values
index|[
literal|4
index|]
block|}
expr_stmt|;
block|}
else|else
block|{
name|classArgs
operator|=
operator|new
name|String
index|[]
block|{
name|gridmixDir
operator|.
name|toString
argument_list|()
block|,
name|values
index|[
literal|3
index|]
block|}
expr_stmt|;
block|}
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
name|runtimeArgs
operator|.
name|length
operator|+
name|classArgs
operator|.
name|length
operator|+
operator|(
operator|(
name|otherArgs
operator|!=
literal|null
operator|)
condition|?
name|otherArgs
operator|.
name|length
else|:
literal|0
operator|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|runtimeArgs
argument_list|,
literal|0
argument_list|,
name|args
argument_list|,
literal|0
argument_list|,
name|runtimeArgs
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|otherArgs
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|otherArgs
argument_list|,
literal|0
argument_list|,
name|args
argument_list|,
name|runtimeArgs
operator|.
name|length
argument_list|,
name|otherArgs
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|classArgs
argument_list|,
literal|0
argument_list|,
name|args
argument_list|,
operator|(
name|runtimeArgs
operator|.
name|length
operator|+
name|otherArgs
operator|.
name|length
operator|)
argument_list|,
name|classArgs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|classArgs
argument_list|,
literal|0
argument_list|,
name|args
argument_list|,
name|runtimeArgs
operator|.
name|length
argument_list|,
name|classArgs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|args
return|;
block|}
comment|/**    * Create a file with specified size in mb.    * @param sizeInMB - file size in mb.    * @param inputDir - input directory.    * @param conf - cluster configuration.    * @throws Exception - if an exception occurs.    */
DECL|method|createFile (int sizeInMB, Path inputDir, Configuration conf)
specifier|public
specifier|static
name|void
name|createFile
parameter_list|(
name|int
name|sizeInMB
parameter_list|,
name|Path
name|inputDir
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Date
name|d
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"ddMMyy_HHmmssS"
argument_list|)
decl_stmt|;
name|String
name|formatDate
init|=
name|sdf
operator|.
name|format
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|inputDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
literal|"datafile_"
operator|+
name|formatDate
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|sizeInMB
condition|;
name|index
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create directories for a path.    * @param path - directories path.    * @param conf  - cluster configuration.    * @throws IOException  - if an I/O error occurs.    */
DECL|method|createDirs (Path path,Configuration conf)
specifier|public
specifier|static
name|void
name|createDirs
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run the Gridmix job with given runtime arguments.    * @param gridmixDir - Gridmix parent directory.    * @param conf - cluster configuration.    * @param gridmixRunMode - gridmix run mode either 1,2,3    * @param runtimeValues -gridmix runtime values.    * @return - gridmix status either 0 or 1.    * @throws Exception    */
DECL|method|runGridmixJob (Path gridmixDir, Configuration conf, int gridmixRunMode, String [] runtimeValues)
specifier|public
specifier|static
name|int
name|runGridmixJob
parameter_list|(
name|Path
name|gridmixDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|gridmixRunMode
parameter_list|,
name|String
index|[]
name|runtimeValues
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|runGridmixJob
argument_list|(
name|gridmixDir
argument_list|,
name|conf
argument_list|,
name|gridmixRunMode
argument_list|,
name|runtimeValues
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Run the Gridmix job with given runtime arguments.    * @param gridmixDir - Gridmix parent directory    * @param conf - cluster configuration.    * @param gridmixRunMode - gridmix run mode.    * @param runtimeValues - gridmix runtime values.    * @param otherArgs - gridmix other generic args.    * @return - gridmix status either 0 or 1.    * @throws Exception    */
DECL|method|runGridmixJob (Path gridmixDir, Configuration conf, int gridmixRunMode, String [] runtimeValues, String [] otherArgs)
specifier|public
specifier|static
name|int
name|runGridmixJob
parameter_list|(
name|Path
name|gridmixDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|int
name|gridmixRunMode
parameter_list|,
name|String
index|[]
name|runtimeValues
parameter_list|,
name|String
index|[]
name|otherArgs
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|outputDir
init|=
operator|new
name|Path
argument_list|(
name|gridmixDir
argument_list|,
literal|"gridmix"
argument_list|)
decl_stmt|;
name|Path
name|inputDir
init|=
operator|new
name|Path
argument_list|(
name|gridmixDir
argument_list|,
literal|"input"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleanup the data if data already exists."
argument_list|)
expr_stmt|;
name|String
name|modeName
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|gridmixRunMode
condition|)
block|{
case|case
literal|1
case|:
name|cleanup
argument_list|(
name|inputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cleanup
argument_list|(
name|outputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|modeName
operator|=
name|GridMixRunMode
operator|.
name|DATA_GENERATION
operator|.
name|name
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|cleanup
argument_list|(
name|outputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|modeName
operator|=
name|GridMixRunMode
operator|.
name|RUN_GRIDMIX
operator|.
name|name
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|cleanup
argument_list|(
name|inputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|cleanup
argument_list|(
name|outputDir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|modeName
operator|=
name|GridMixRunMode
operator|.
name|DATA_GENERATION_AND_RUN_GRIDMIX
operator|.
name|name
argument_list|()
expr_stmt|;
break|break;
block|}
specifier|final
name|String
index|[]
name|args
init|=
name|UtilsForGridmix
operator|.
name|getArgsList
argument_list|(
name|gridmixDir
argument_list|,
name|gridmixRunMode
argument_list|,
name|runtimeValues
argument_list|,
name|otherArgs
argument_list|)
decl_stmt|;
name|Gridmix
name|gridmix
init|=
operator|new
name|Gridmix
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submit a Gridmix job in "
operator|+
name|runtimeValues
index|[
literal|1
index|]
operator|+
literal|" mode for "
operator|+
name|modeName
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf
argument_list|,
name|gridmix
argument_list|,
name|args
argument_list|)
decl_stmt|;
return|return
name|exitCode
return|;
block|}
comment|/**    * Get the proxy users file.    * @param conf - cluster configuration.    * @return String - proxy users file.    * @Exception - if no proxy users found in configuration.    */
DECL|method|getProxyUsersFile (Configuration conf)
specifier|public
specifier|static
name|String
name|getProxyUsersFile
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|ProxyUserDefinitions
name|pud
init|=
name|getProxyUsersData
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|buildProxyUsersFile
argument_list|(
name|pud
operator|.
name|getProxyUsers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Proxy users file not found."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Proxy users file not found."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|fileName
return|;
block|}
block|}
comment|/**   * List the current gridmix jobid's.   * @param client - job client.   * @param execJobCount - number of executed jobs.   * @return - list of gridmix jobid's.   */
DECL|method|listGridmixJobIDs (JobClient client, int execJobCount)
specifier|public
specifier|static
name|List
argument_list|<
name|JobID
argument_list|>
name|listGridmixJobIDs
parameter_list|(
name|JobClient
name|client
parameter_list|,
name|int
name|execJobCount
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|JobID
argument_list|>
name|jobids
init|=
operator|new
name|ArrayList
argument_list|<
name|JobID
argument_list|>
argument_list|()
decl_stmt|;
name|JobStatus
index|[]
name|jobStatus
init|=
name|client
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|int
name|numJobs
init|=
name|jobStatus
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<=
name|execJobCount
condition|;
name|index
operator|++
control|)
block|{
name|JobStatus
name|js
init|=
name|jobStatus
index|[
name|numJobs
operator|-
name|index
index|]
decl_stmt|;
name|JobID
name|jobid
init|=
name|js
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|String
name|jobName
init|=
name|js
operator|.
name|getJobName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|jobName
operator|.
name|equals
argument_list|(
literal|"GRIDMIX_GENERATE_INPUT_DATA"
argument_list|)
operator|&&
operator|!
name|jobName
operator|.
name|equals
argument_list|(
literal|"GRIDMIX_GENERATE_DISTCACHE_DATA"
argument_list|)
condition|)
block|{
name|jobids
operator|.
name|add
argument_list|(
name|jobid
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|jobids
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
name|jobids
return|;
block|}
comment|/**   * List the proxy users.    * @param conf   * @return   * @throws Exception   */
DECL|method|listProxyUsers (Configuration conf, String loginUser)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|listProxyUsers
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|loginUser
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|proxyUsers
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ProxyUserDefinitions
name|pud
init|=
name|getProxyUsersData
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GroupsAndHost
argument_list|>
name|usersData
init|=
name|pud
operator|.
name|getProxyUsers
argument_list|()
decl_stmt|;
name|Collection
name|users
init|=
name|usersData
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|users
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|user
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|equals
argument_list|(
name|loginUser
argument_list|)
condition|)
block|{
name|proxyUsers
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
return|return
name|proxyUsers
return|;
block|}
DECL|method|buildProxyUsersFile (final Map<String, GroupsAndHost> proxyUserData)
specifier|private
specifier|static
name|String
name|buildProxyUsersFile
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|GroupsAndHost
argument_list|>
name|proxyUserData
parameter_list|)
throws|throws
name|Exception
block|{
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|input
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Set
name|users
init|=
name|proxyUserData
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
name|itr
init|=
name|users
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|user
init|=
name|itr
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|equals
argument_list|(
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
condition|)
block|{
name|input
operator|.
name|append
argument_list|(
name|user
argument_list|)
expr_stmt|;
specifier|final
name|GroupsAndHost
name|gah
init|=
name|proxyUserData
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|gah
operator|.
name|getGroups
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
name|input
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|input
operator|.
name|append
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|input
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|input
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|file
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"proxyusers"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|input
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioexp
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ioexp
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"file.toString():"
operator|+
name|file
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|file
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getProxyUsersData (Configuration conf)
specifier|private
specifier|static
name|ProxyUserDefinitions
name|getProxyUsersData
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
name|itr
init|=
name|conf
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|proxyUsersData
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|property
init|=
name|itr
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|indexOf
argument_list|(
literal|"hadoop.proxyuser"
argument_list|)
operator|>=
literal|0
operator|&&
name|property
operator|.
name|indexOf
argument_list|(
literal|"groups="
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|proxyUsersData
operator|.
name|add
argument_list|(
name|property
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|proxyUsersData
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No proxy users found in the configuration."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No proxy users found in the configuration."
argument_list|)
throw|;
block|}
name|ProxyUserDefinitions
name|pud
init|=
operator|new
name|ProxyUserDefinitions
argument_list|()
block|{
specifier|public
name|boolean
name|writeToFile
parameter_list|(
name|URI
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No such methood exists."
argument_list|)
throw|;
block|}
empty_stmt|;
block|}
decl_stmt|;
for|for
control|(
name|String
name|userName
range|:
name|proxyUsersData
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|userName
operator|+
literal|".groups"
argument_list|)
operator|.
name|split
argument_list|(
literal|"//,"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|hosts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser."
operator|+
name|userName
operator|+
literal|".hosts"
argument_list|)
operator|.
name|split
argument_list|(
literal|"//,"
argument_list|)
argument_list|)
decl_stmt|;
name|ProxyUserDefinitions
operator|.
name|GroupsAndHost
name|definitions
init|=
name|pud
operator|.
expr|new
name|GroupsAndHost
argument_list|()
decl_stmt|;
name|definitions
operator|.
name|setGroups
argument_list|(
name|groups
argument_list|)
expr_stmt|;
name|definitions
operator|.
name|setHosts
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
name|pud
operator|.
name|addProxyUser
argument_list|(
name|userName
argument_list|,
name|definitions
argument_list|)
expr_stmt|;
block|}
return|return
name|pud
return|;
block|}
comment|/**    *  Gives the list of paths for MR traces against different time     *  intervals.It fetches only the paths which followed the below     *  file convention.    *    Syntax :&lt;FileName&gt;_&lt;TimeIntervals&gt;.json.gz    *  There is a restriction in a  file and user has to      *  follow  the below convention for time interval.    *    Syntax:&lt;numeric&gt;[m|h|d]     *    e.g : for 10 minutes trace should specify 10m,     *    same way for 1 hour traces should specify 1h,     *    for 1 day traces should specify 1d.    *    * @param conf - cluster configuration.    * @return - list of MR paths as key/value pair based on time interval.    * @throws IOException - if an I/O error occurs.    */
DECL|method|getMRTraces (Configuration conf)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMRTraces
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getMRTraces
argument_list|(
name|conf
argument_list|,
name|DEFAULT_TRACES_PATH
argument_list|)
return|;
block|}
comment|/**    *  It gives the list of paths for MR traces against different time     *  intervals. It fetches only the paths which followed the below     *  file convention.    *    Syntax :&lt;FileNames&gt;_&lt;TimeInterval&gt;.json.gz    *  There is a restriction in a file and user has to follow the     *  below convention for time interval.     *    Syntax:&lt;numeric&gt;[m|h|d]     *    e.g : for 10 minutes trace should specify 10m,    *    same way for 1 hour traces should specify 1h,     *    for 1 day  traces should specify 1d.    *    * @param conf - cluster configuration object.    * @param tracesPath - MR traces path.    * @return - list of MR paths as key/value pair based on time interval.    * @throws IOException - If an I/O error occurs.    */
DECL|method|getMRTraces (Configuration conf, Path tracesPath)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMRTraces
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|tracesPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobTraces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|fstat
index|[]
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tracesPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fst
range|:
name|fstat
control|)
block|{
specifier|final
name|String
name|fileName
init|=
name|fst
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
literal|"m.json.gz"
argument_list|)
operator|||
name|fileName
operator|.
name|endsWith
argument_list|(
literal|"h.json.gz"
argument_list|)
operator|||
name|fileName
operator|.
name|endsWith
argument_list|(
literal|"d.json.gz"
argument_list|)
condition|)
block|{
name|jobTraces
operator|.
name|put
argument_list|(
name|fileName
operator|.
name|substring
argument_list|(
name|fileName
operator|.
name|indexOf
argument_list|(
literal|"_"
argument_list|)
operator|+
literal|1
argument_list|,
name|fileName
operator|.
name|indexOf
argument_list|(
literal|".json.gz"
argument_list|)
argument_list|)
argument_list|,
name|fst
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jobTraces
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No traces found in "
operator|+
name|tracesPath
operator|.
name|toString
argument_list|()
operator|+
literal|" path."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No traces found in "
operator|+
name|tracesPath
operator|.
name|toString
argument_list|()
operator|+
literal|" path."
argument_list|)
throw|;
block|}
return|return
name|jobTraces
return|;
block|}
comment|/**    * It list the all the MR traces path irrespective of time.    * @param conf - cluster configuration.    * @param tracesPath - MR traces path    * @return - MR paths as a list.    * @throws IOException - if an I/O error occurs.    */
DECL|method|listMRTraces (Configuration conf, Path tracesPath)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|listMRTraces
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|tracesPath
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|jobTraces
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|fstat
index|[]
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tracesPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fst
range|:
name|fstat
control|)
block|{
name|jobTraces
operator|.
name|add
argument_list|(
name|fst
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jobTraces
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No traces found in "
operator|+
name|tracesPath
operator|.
name|toString
argument_list|()
operator|+
literal|" path."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No traces found in "
operator|+
name|tracesPath
operator|.
name|toString
argument_list|()
operator|+
literal|" path."
argument_list|)
throw|;
block|}
return|return
name|jobTraces
return|;
block|}
comment|/**    * It list the all the MR traces path irrespective of time.    * @param conf - cluster configuration.    * @param tracesPath - MR traces path    * @return - MR paths as a list.    * @throws IOException - if an I/O error occurs.    */
DECL|method|listMRTraces (Configuration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|listMRTraces
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listMRTraces
argument_list|(
name|conf
argument_list|,
name|DEFAULT_TRACES_PATH
argument_list|)
return|;
block|}
comment|/**    * Gives the list of MR traces for given time interval.    * The time interval should be following convention.    *   Syntax :&lt;numeric&gt;[m|h|d]    *   e.g : 10m or 1h or 2d etc.    * @param conf - cluster configuration    * @param timeInterval - trace time interval.    * @param tracesPath - MR traces Path.    * @return - MR paths as a list for a given time interval.    * @throws IOException - If an I/O error occurs.    */
DECL|method|listMRTracesByTime (Configuration conf, String timeInterval, Path tracesPath)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|listMRTracesByTime
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|timeInterval
parameter_list|,
name|Path
name|tracesPath
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|jobTraces
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|fstat
index|[]
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tracesPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fst
range|:
name|fstat
control|)
block|{
specifier|final
name|String
name|fileName
init|=
name|fst
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|indexOf
argument_list|(
name|timeInterval
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|jobTraces
operator|.
name|add
argument_list|(
name|fst
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jobTraces
return|;
block|}
comment|/**    * Gives the list of MR traces for given time interval.    * The time interval should be following convention.    *   Syntax :&lt;numeric&gt;[m|h|d]    *   e.g : 10m or 1h or 2d etc.    * @param conf - cluster configuration    * @param timeInterval - trace time interval.    * @return - MR paths as a list for a given time interval.    * @throws IOException - If an I/O error occurs.    */
DECL|method|listMRTracesByTime (Configuration conf, String timeInterval)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|listMRTracesByTime
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|timeInterval
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listMRTracesByTime
argument_list|(
name|conf
argument_list|,
name|timeInterval
argument_list|,
name|DEFAULT_TRACES_PATH
argument_list|)
return|;
block|}
block|}
end_class

end_unit

