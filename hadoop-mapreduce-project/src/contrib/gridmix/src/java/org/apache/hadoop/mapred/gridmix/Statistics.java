begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|Gridmix
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * Component collecting the stats required by other components  * to make decisions.  * Single thread Collector tries to collec the stats.  * Each of thread poll updates certain datastructure(Currently ClusterStats).  * Components interested in these datastructure, need to register.  * StatsCollector notifies each of the listeners.  */
end_comment

begin_class
DECL|class|Statistics
specifier|public
class|class
name|Statistics
implements|implements
name|Component
argument_list|<
name|Job
argument_list|>
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Statistics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|statistics
specifier|private
specifier|final
name|StatCollector
name|statistics
init|=
operator|new
name|StatCollector
argument_list|()
decl_stmt|;
DECL|field|cluster
specifier|private
name|JobClient
name|cluster
decl_stmt|;
comment|//List of cluster status listeners.
DECL|field|clusterStatlisteners
specifier|private
specifier|final
name|List
argument_list|<
name|StatListener
argument_list|<
name|ClusterStats
argument_list|>
argument_list|>
name|clusterStatlisteners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|StatListener
argument_list|<
name|ClusterStats
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//List of job status listeners.
DECL|field|jobStatListeners
specifier|private
specifier|final
name|List
argument_list|<
name|StatListener
argument_list|<
name|JobStats
argument_list|>
argument_list|>
name|jobStatListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|StatListener
argument_list|<
name|JobStats
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//List of jobids and noofMaps for each job
DECL|field|jobMaps
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|JobStats
argument_list|>
name|jobMaps
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|JobStats
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|completedJobsInCurrentInterval
specifier|private
name|int
name|completedJobsInCurrentInterval
init|=
literal|0
decl_stmt|;
DECL|field|jtPollingInterval
specifier|private
specifier|final
name|int
name|jtPollingInterval
decl_stmt|;
DECL|field|shutdown
specifier|private
specifier|volatile
name|boolean
name|shutdown
init|=
literal|false
decl_stmt|;
DECL|field|maxJobCompletedInInterval
specifier|private
specifier|final
name|int
name|maxJobCompletedInInterval
decl_stmt|;
DECL|field|MAX_JOBS_COMPLETED_IN_POLL_INTERVAL_KEY
specifier|private
specifier|static
specifier|final
name|String
name|MAX_JOBS_COMPLETED_IN_POLL_INTERVAL_KEY
init|=
literal|"gridmix.max-jobs-completed-in-poll-interval"
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|jobCompleted
specifier|private
specifier|final
name|Condition
name|jobCompleted
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
DECL|field|startFlag
specifier|private
specifier|final
name|CountDownLatch
name|startFlag
decl_stmt|;
DECL|method|Statistics ( final Configuration conf, int pollingInterval, CountDownLatch startFlag)
specifier|public
name|Statistics
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|int
name|pollingInterval
parameter_list|,
name|CountDownLatch
name|startFlag
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|this
operator|.
name|cluster
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|JobClient
argument_list|>
argument_list|()
block|{
specifier|public
name|JobClient
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|JobClient
argument_list|(
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|jtPollingInterval
operator|=
name|pollingInterval
expr_stmt|;
name|maxJobCompletedInInterval
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_JOBS_COMPLETED_IN_POLL_INTERVAL_KEY
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|startFlag
operator|=
name|startFlag
expr_stmt|;
block|}
DECL|method|addJobStats (Job job, JobStory jobdesc)
specifier|public
name|void
name|addJobStats
parameter_list|(
name|Job
name|job
parameter_list|,
name|JobStory
name|jobdesc
parameter_list|)
block|{
name|int
name|seq
init|=
name|GridmixJob
operator|.
name|getJobSeqId
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|seq
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not tracking job "
operator|+
name|job
operator|.
name|getJobName
argument_list|()
operator|+
literal|" as seq id is less than zero: "
operator|+
name|seq
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|maps
init|=
literal|0
decl_stmt|;
name|int
name|reds
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|jobdesc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|" JobStory not available for job "
operator|+
name|job
operator|.
name|getJobName
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|maps
operator|=
name|jobdesc
operator|.
name|getNumberMaps
argument_list|()
expr_stmt|;
name|reds
operator|=
name|jobdesc
operator|.
name|getNumberReduces
argument_list|()
expr_stmt|;
block|}
name|JobStats
name|stats
init|=
operator|new
name|JobStats
argument_list|(
name|maps
argument_list|,
name|reds
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|jobMaps
operator|.
name|put
argument_list|(
name|seq
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
comment|/**    * Used by JobMonitor to add the completed job.    */
annotation|@
name|Override
DECL|method|add (Job job)
specifier|public
name|void
name|add
parameter_list|(
name|Job
name|job
parameter_list|)
block|{
comment|//This thread will be notified initially by jobmonitor incase of
comment|//data generation. Ignore that as we are getting once the input is
comment|//generated.
if|if
condition|(
operator|!
name|statistics
operator|.
name|isAlive
argument_list|()
condition|)
block|{
return|return;
block|}
name|JobStats
name|stat
init|=
name|jobMaps
operator|.
name|remove
argument_list|(
name|GridmixJob
operator|.
name|getJobSeqId
argument_list|(
name|job
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
return|return;
name|completedJobsInCurrentInterval
operator|++
expr_stmt|;
comment|//check if we have reached the maximum level of job completions.
if|if
condition|(
name|completedJobsInCurrentInterval
operator|>=
name|maxJobCompletedInInterval
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" Reached maximum limit of jobs in a polling interval "
operator|+
name|completedJobsInCurrentInterval
argument_list|)
expr_stmt|;
block|}
name|completedJobsInCurrentInterval
operator|=
literal|0
expr_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|//Job is completed notify all the listeners.
for|for
control|(
name|StatListener
argument_list|<
name|JobStats
argument_list|>
name|l
range|:
name|jobStatListeners
control|)
block|{
name|l
operator|.
name|update
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|jobCompleted
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//TODO: We have just 2 types of listeners as of now . If no of listeners
comment|//increase then we should move to map kind of model.
DECL|method|addClusterStatsObservers (StatListener<ClusterStats> listener)
specifier|public
name|void
name|addClusterStatsObservers
parameter_list|(
name|StatListener
argument_list|<
name|ClusterStats
argument_list|>
name|listener
parameter_list|)
block|{
name|clusterStatlisteners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|addJobStatsListeners (StatListener<JobStats> listener)
specifier|public
name|void
name|addJobStatsListeners
parameter_list|(
name|StatListener
argument_list|<
name|JobStats
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|jobStatListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Attempt to start the service.    */
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|statistics
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|class|StatCollector
specifier|private
class|class
name|StatCollector
extends|extends
name|Thread
block|{
DECL|method|StatCollector ()
name|StatCollector
parameter_list|()
block|{
name|super
argument_list|(
literal|"StatsCollectorThread"
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startFlag
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Statistics Error while waiting for other threads to get ready "
argument_list|,
name|ie
argument_list|)
expr_stmt|;
return|return;
block|}
while|while
condition|(
operator|!
name|shutdown
condition|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|jobCompleted
operator|.
name|await
argument_list|(
name|jtPollingInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
if|if
condition|(
operator|!
name|shutdown
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Statistics interrupt while waiting for completion of "
operator|+
literal|"a job."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|//Fetch cluster data only if required.i.e .
comment|// only if there are clusterStats listener.
if|if
condition|(
name|clusterStatlisteners
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|ClusterStatus
name|clusterStatus
init|=
name|cluster
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|updateAndNotifyClusterStatsListeners
argument_list|(
name|clusterStatus
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Statistics io exception while polling JT "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|method|updateAndNotifyClusterStatsListeners ( ClusterStatus clusterStatus)
specifier|private
name|void
name|updateAndNotifyClusterStatsListeners
parameter_list|(
name|ClusterStatus
name|clusterStatus
parameter_list|)
block|{
name|ClusterStats
name|stats
init|=
name|ClusterStats
operator|.
name|getClusterStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setClusterMetric
argument_list|(
name|clusterStatus
argument_list|)
expr_stmt|;
for|for
control|(
name|StatListener
argument_list|<
name|ClusterStats
argument_list|>
name|listener
range|:
name|clusterStatlisteners
control|)
block|{
name|listener
operator|.
name|update
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Wait until the service completes. It is assumed that either a    * {@link #shutdown} or {@link #abort} has been requested.    */
annotation|@
name|Override
DECL|method|join (long millis)
specifier|public
name|void
name|join
parameter_list|(
name|long
name|millis
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|statistics
operator|.
name|join
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
name|jobMaps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clusterStatlisteners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|jobStatListeners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|statistics
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abort ()
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
name|jobMaps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clusterStatlisteners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|jobStatListeners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|statistics
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|/**    * Class to encapsulate the JobStats information.    * Current we just need information about completedJob.    * TODO: In future we need to extend this to send more information.    */
DECL|class|JobStats
specifier|static
class|class
name|JobStats
block|{
DECL|field|noOfMaps
specifier|private
name|int
name|noOfMaps
decl_stmt|;
DECL|field|noOfReds
specifier|private
name|int
name|noOfReds
decl_stmt|;
DECL|field|job
specifier|private
name|Job
name|job
decl_stmt|;
DECL|method|JobStats (int noOfMaps,int numOfReds, Job job)
specifier|public
name|JobStats
parameter_list|(
name|int
name|noOfMaps
parameter_list|,
name|int
name|numOfReds
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|noOfMaps
operator|=
name|noOfMaps
expr_stmt|;
name|this
operator|.
name|noOfReds
operator|=
name|numOfReds
expr_stmt|;
block|}
DECL|method|getNoOfMaps ()
specifier|public
name|int
name|getNoOfMaps
parameter_list|()
block|{
return|return
name|noOfMaps
return|;
block|}
DECL|method|getNoOfReds ()
specifier|public
name|int
name|getNoOfReds
parameter_list|()
block|{
return|return
name|noOfReds
return|;
block|}
comment|/**      * Returns the job ,      * We should not use job.getJobID it returns null in 20.1xx.      * Use (GridmixJob.getJobSeqId(job)) instead      * @return job      */
DECL|method|getJob ()
specifier|public
name|Job
name|getJob
parameter_list|()
block|{
return|return
name|job
return|;
block|}
block|}
DECL|class|ClusterStats
specifier|static
class|class
name|ClusterStats
block|{
DECL|field|status
specifier|private
name|ClusterStatus
name|status
init|=
literal|null
decl_stmt|;
DECL|field|stats
specifier|private
specifier|static
name|ClusterStats
name|stats
init|=
operator|new
name|ClusterStats
argument_list|()
decl_stmt|;
DECL|method|ClusterStats ()
specifier|private
name|ClusterStats
parameter_list|()
block|{      }
comment|/**      * @return stats      */
DECL|method|getClusterStats ()
specifier|static
name|ClusterStats
name|getClusterStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
comment|/**      * @param metrics      */
DECL|method|setClusterMetric (ClusterStatus metrics)
name|void
name|setClusterMetric
parameter_list|(
name|ClusterStatus
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|metrics
expr_stmt|;
block|}
comment|/**      * @return metrics      */
DECL|method|getStatus ()
specifier|public
name|ClusterStatus
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|getNumRunningJob ()
name|int
name|getNumRunningJob
parameter_list|()
block|{
return|return
name|jobMaps
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * @return runningWatitingJobs      */
DECL|method|getRunningJobStats ()
specifier|static
name|Collection
argument_list|<
name|JobStats
argument_list|>
name|getRunningJobStats
parameter_list|()
block|{
return|return
name|jobMaps
operator|.
name|values
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

