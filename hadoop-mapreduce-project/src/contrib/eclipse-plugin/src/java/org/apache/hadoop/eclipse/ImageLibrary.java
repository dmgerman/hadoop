begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|FileLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|resource
operator|.
name|ImageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|graphics
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|ISharedImages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|PlatformUI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|plugin
operator|.
name|AbstractUIPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_comment
comment|/**  * Icons manager  */
end_comment

begin_class
DECL|class|ImageLibrary
specifier|public
class|class
name|ImageLibrary
block|{
DECL|field|bundle
specifier|private
specifier|final
name|Bundle
name|bundle
init|=
name|Activator
operator|.
name|getDefault
argument_list|()
operator|.
name|getBundle
argument_list|()
decl_stmt|;
comment|/**    * Singleton instance    */
DECL|field|instance
specifier|private
specifier|static
specifier|volatile
name|ImageLibrary
name|instance
init|=
literal|null
decl_stmt|;
DECL|field|sharedImages
specifier|private
name|ISharedImages
name|sharedImages
init|=
name|PlatformUI
operator|.
name|getWorkbench
argument_list|()
operator|.
name|getSharedImages
argument_list|()
decl_stmt|;
comment|/**    * Where resources (icons, images...) are available in the Bundle    */
DECL|field|RESOURCE_DIR
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_DIR
init|=
literal|"resources/"
decl_stmt|;
comment|/**    * Public access to image descriptors    *     * @param name    * @return the image descriptor    */
DECL|method|get (String name)
specifier|public
specifier|static
name|ImageDescriptor
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getInstance
argument_list|()
operator|.
name|getImageDescriptorByName
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Public access to images    *     * @param name    * @return the image    */
DECL|method|getImage (String name)
specifier|public
specifier|static
name|Image
name|getImage
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getInstance
argument_list|()
operator|.
name|getImageByName
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Singleton access    *     * @return the Image library    */
DECL|method|getInstance ()
specifier|public
specifier|static
name|ImageLibrary
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|ImageLibrary
operator|.
name|class
init|)
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
name|instance
operator|=
operator|new
name|ImageLibrary
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|instance
return|;
block|}
comment|/**    * Map of registered resources (ImageDescriptor and Image)    */
DECL|field|descMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ImageDescriptor
argument_list|>
name|descMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ImageDescriptor
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|imageMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Image
argument_list|>
name|imageMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Image
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Image library constructor: put image definitions here.    */
DECL|method|ImageLibrary ()
specifier|private
name|ImageLibrary
parameter_list|()
block|{
comment|/*      * Servers view      */
name|newImage
argument_list|(
literal|"server.view.location.entry"
argument_list|,
literal|"Elephant-24x24.png"
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"server.view.job.entry"
argument_list|,
literal|"job.gif"
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"server.view.action.location.new"
argument_list|,
literal|"location-new-16x16.png"
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"server.view.action.location.edit"
argument_list|,
literal|"location-edit-16x16.png"
argument_list|)
expr_stmt|;
name|newSharedImage
argument_list|(
literal|"server.view.action.delete"
argument_list|,
name|ISharedImages
operator|.
name|IMG_TOOL_DELETE
argument_list|)
expr_stmt|;
comment|/*      * DFS Browser      */
name|newImage
argument_list|(
literal|"dfs.browser.root.entry"
argument_list|,
literal|"files.gif"
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"dfs.browser.location.entry"
argument_list|,
literal|"Elephant-16x16.png"
argument_list|)
expr_stmt|;
name|newSharedImage
argument_list|(
literal|"dfs.browser.folder.entry"
argument_list|,
name|ISharedImages
operator|.
name|IMG_OBJ_FOLDER
argument_list|)
expr_stmt|;
name|newSharedImage
argument_list|(
literal|"dfs.browser.file.entry"
argument_list|,
name|ISharedImages
operator|.
name|IMG_OBJ_FILE
argument_list|)
expr_stmt|;
comment|// DFS files in editor
name|newSharedImage
argument_list|(
literal|"dfs.file.editor"
argument_list|,
name|ISharedImages
operator|.
name|IMG_OBJ_FILE
argument_list|)
expr_stmt|;
comment|// Actions
name|newImage
argument_list|(
literal|"dfs.browser.action.mkdir"
argument_list|,
literal|"new-folder.png"
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"dfs.browser.action.download"
argument_list|,
literal|"download.png"
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"dfs.browser.action.upload_files"
argument_list|,
literal|"upload.png"
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"dfs.browser.action.upload_dir"
argument_list|,
literal|"upload.png"
argument_list|)
expr_stmt|;
name|newSharedImage
argument_list|(
literal|"dfs.browser.action.delete"
argument_list|,
name|ISharedImages
operator|.
name|IMG_TOOL_DELETE
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"dfs.browser.action.refresh"
argument_list|,
literal|"refresh.png"
argument_list|)
expr_stmt|;
comment|/*      * Wizards      */
name|newImage
argument_list|(
literal|"wizard.mapper.new"
argument_list|,
literal|"mapwiz.png"
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"wizard.reducer.new"
argument_list|,
literal|"reducewiz.png"
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"wizard.driver.new"
argument_list|,
literal|"driverwiz.png"
argument_list|)
expr_stmt|;
name|newImage
argument_list|(
literal|"wizard.mapreduce.project.new"
argument_list|,
literal|"projwiz.png"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Accessor to images    *     * @param name    * @return    */
DECL|method|getImageDescriptorByName (String name)
specifier|private
name|ImageDescriptor
name|getImageDescriptorByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
name|descMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Accessor to images    *     * @param name    * @return    */
DECL|method|getImageByName (String name)
specifier|private
name|Image
name|getImageByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
name|imageMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Access to platform shared images    *     * @param name    * @return    */
DECL|method|getSharedByName (String name)
specifier|private
name|ImageDescriptor
name|getSharedByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|sharedImages
operator|.
name|getImageDescriptor
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Load and register a new image. If the image resource does not exist or    * fails to load, a default "error" resource is supplied.    *     * @param name name of the image    * @param filename name of the file containing the image    * @return whether the image has correctly been loaded    */
DECL|method|newImage (String name, String filename)
specifier|private
name|boolean
name|newImage
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|ImageDescriptor
name|id
decl_stmt|;
name|boolean
name|success
decl_stmt|;
try|try
block|{
name|URL
name|fileURL
init|=
name|FileLocator
operator|.
name|find
argument_list|(
name|bundle
argument_list|,
operator|new
name|Path
argument_list|(
name|RESOURCE_DIR
operator|+
name|filename
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|id
operator|=
name|ImageDescriptor
operator|.
name|createFromURL
argument_list|(
name|FileLocator
operator|.
name|toFileURL
argument_list|(
name|fileURL
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|id
operator|=
name|ImageDescriptor
operator|.
name|getMissingImageDescriptor
argument_list|()
expr_stmt|;
comment|// id = getSharedByName(ISharedImages.IMG_OBJS_ERROR_TSK);
name|success
operator|=
literal|false
expr_stmt|;
block|}
name|descMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|imageMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|id
operator|.
name|createImage
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
comment|/**    * Register an image from the workspace shared image pool. If the image    * resource does not exist or fails to load, a default "error" resource is    * supplied.    *     * @param name name of the image    * @param sharedName name of the shared image ({@link ISharedImages})    * @return whether the image has correctly been loaded    */
DECL|method|newSharedImage (String name, String sharedName)
specifier|private
name|boolean
name|newSharedImage
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|sharedName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|ImageDescriptor
name|id
init|=
name|getSharedByName
argument_list|(
name|sharedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|ImageDescriptor
operator|.
name|getMissingImageDescriptor
argument_list|()
expr_stmt|;
comment|// id = getSharedByName(ISharedImages.IMG_OBJS_ERROR_TSK);
name|success
operator|=
literal|false
expr_stmt|;
block|}
name|descMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|imageMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|id
operator|.
name|createImage
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
comment|/**    * Register an image from the workspace shared image pool. If the image    * resource does not exist or fails to load, a default "error" resource is    * supplied.    *     * @param name name of the image    * @param sharedName name of the shared image ({@link ISharedImages})    * @return whether the image has correctly been loaded    */
DECL|method|newPluginImage (String name, String pluginId, String filename)
specifier|private
name|boolean
name|newPluginImage
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|pluginId
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|ImageDescriptor
name|id
init|=
name|AbstractUIPlugin
operator|.
name|imageDescriptorFromPlugin
argument_list|(
name|pluginId
argument_list|,
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|ImageDescriptor
operator|.
name|getMissingImageDescriptor
argument_list|()
expr_stmt|;
comment|// id = getSharedByName(ISharedImages.IMG_OBJS_ERROR_TSK);
name|success
operator|=
literal|false
expr_stmt|;
block|}
name|descMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|imageMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|id
operator|.
name|createImage
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
block|}
end_class

end_unit

