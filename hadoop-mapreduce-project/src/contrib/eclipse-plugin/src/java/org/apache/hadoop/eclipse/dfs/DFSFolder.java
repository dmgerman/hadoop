begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.dfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|jobs
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|dialogs
operator|.
name|MessageDialog
import|;
end_import

begin_comment
comment|/**  * Local representation of a folder in the DFS.  *   * The constructor creates an empty representation of the folder and spawn a  * thread that will fill  */
end_comment

begin_class
DECL|class|DFSFolder
specifier|public
class|class
name|DFSFolder
extends|extends
name|DFSPath
implements|implements
name|DFSContent
block|{
DECL|field|log
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DFSFolder
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|children
specifier|private
name|DFSContent
index|[]
name|children
decl_stmt|;
DECL|method|DFSFolder (DFSContentProvider provider, HadoopServer location)
specifier|protected
name|DFSFolder
parameter_list|(
name|DFSContentProvider
name|provider
parameter_list|,
name|HadoopServer
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|provider
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
DECL|method|DFSFolder (DFSPath parent, Path path)
specifier|private
name|DFSFolder
parameter_list|(
name|DFSPath
name|parent
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|loadDFSFolderChildren ()
specifier|protected
name|void
name|loadDFSFolderChildren
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|DFSPath
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|DFSPath
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|getDFS
argument_list|()
operator|.
name|listStatus
argument_list|(
name|this
operator|.
name|getPath
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|status
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|DFSFolder
argument_list|(
name|this
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|DFSFile
argument_list|(
name|this
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|children
operator|=
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|DFSContent
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Upload the given file or directory into this DfsFolder    *     * @param file    * @throws IOException    */
DECL|method|upload (IProgressMonitor monitor, final File file)
specifier|public
name|void
name|upload
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|,
specifier|final
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|path
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|getDFS
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|DFSFolder
name|newFolder
init|=
operator|new
name|DFSFolder
argument_list|(
name|this
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|monitor
operator|.
name|worked
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|child
range|:
name|file
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|monitor
operator|.
name|isCanceled
argument_list|()
condition|)
return|return;
name|newFolder
operator|.
name|upload
argument_list|(
name|monitor
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|path
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|DFSFile
name|newFile
init|=
operator|new
name|DFSFile
argument_list|(
name|this
argument_list|,
name|filePath
argument_list|,
name|file
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
block|}
else|else
block|{
comment|// XXX don't know what the file is?
block|}
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|downloadToLocalDirectory (IProgressMonitor monitor, File dir)
specifier|public
name|void
name|downloadToLocalDirectory
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|,
name|File
name|dir
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|MessageDialog
operator|.
name|openError
argument_list|(
literal|null
argument_list|,
literal|"Download to local file system"
argument_list|,
literal|"Invalid directory location: \""
operator|+
name|dir
operator|+
literal|"\""
argument_list|)
expr_stmt|;
return|return;
block|}
name|File
name|dfsPath
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|destination
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|dfsPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destination
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|destination
operator|.
name|mkdir
argument_list|()
condition|)
block|{
name|MessageDialog
operator|.
name|openError
argument_list|(
literal|null
argument_list|,
literal|"Download to local directory"
argument_list|,
literal|"Unable to create directory "
operator|+
name|destination
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Download all DfsPath children
for|for
control|(
name|Object
name|childObj
range|:
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|childObj
operator|instanceof
name|DFSPath
condition|)
block|{
operator|(
operator|(
name|DFSPath
operator|)
name|childObj
operator|)
operator|.
name|downloadToLocalDirectory
argument_list|(
name|monitor
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|worked
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|computeDownloadWork ()
specifier|public
name|int
name|computeDownloadWork
parameter_list|()
block|{
name|int
name|work
init|=
literal|1
decl_stmt|;
for|for
control|(
name|DFSContent
name|child
range|:
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|DFSPath
condition|)
name|work
operator|+=
operator|(
operator|(
name|DFSPath
operator|)
name|child
operator|)
operator|.
name|computeDownloadWork
argument_list|()
expr_stmt|;
block|}
return|return
name|work
return|;
block|}
comment|/**    * Create a new sub directory into this directory    *     * @param folderName    */
DECL|method|mkdir (String folderName)
specifier|public
name|void
name|mkdir
parameter_list|(
name|String
name|folderName
parameter_list|)
block|{
try|try
block|{
name|getDFS
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|this
operator|.
name|path
argument_list|,
name|folderName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|doRefresh
argument_list|()
expr_stmt|;
block|}
comment|/*    * Implementation of DFSContent    */
comment|/* @inheritDoc */
DECL|method|hasChildren ()
specifier|public
name|boolean
name|hasChildren
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|children
operator|==
literal|null
condition|)
return|return
literal|true
return|;
else|else
return|return
operator|(
name|this
operator|.
name|children
operator|.
name|length
operator|>
literal|0
operator|)
return|;
block|}
comment|/* @inheritDoc */
DECL|method|getChildren ()
specifier|public
name|DFSContent
index|[]
name|getChildren
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
operator|new
name|Job
argument_list|(
literal|"Connecting to DFS "
operator|+
name|location
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|IStatus
name|run
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|)
block|{
try|try
block|{
name|loadDFSFolderChildren
argument_list|()
expr_stmt|;
return|return
name|Status
operator|.
name|OK_STATUS
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|children
operator|=
operator|new
name|DFSContent
index|[]
block|{
operator|new
name|DFSMessage
argument_list|(
literal|"Error: "
operator|+
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
block|}
expr_stmt|;
return|return
name|Status
operator|.
name|CANCEL_STATUS
return|;
block|}
finally|finally
block|{
comment|// Under all circumstances, update the UI
name|provider
operator|.
name|refresh
argument_list|(
name|DFSFolder
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|schedule
argument_list|()
expr_stmt|;
return|return
operator|new
name|DFSContent
index|[]
block|{
operator|new
name|DFSMessage
argument_list|(
literal|"Listing folder content..."
argument_list|)
block|}
return|;
block|}
return|return
name|this
operator|.
name|children
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|this
operator|.
name|children
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|doRefresh
argument_list|()
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s (%s)"
argument_list|,
name|super
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|getChildren
argument_list|()
operator|.
name|length
argument_list|)
return|;
block|}
block|}
end_class

end_unit

