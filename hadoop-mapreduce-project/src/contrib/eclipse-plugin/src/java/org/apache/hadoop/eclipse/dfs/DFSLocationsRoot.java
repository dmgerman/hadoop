begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.dfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|servers
operator|.
name|IHadoopServerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|servers
operator|.
name|ServerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_comment
comment|/**  * Representation of the root element containing all DFS servers. This  * content registers an observer on Hadoop servers so as to update itself  * when servers are updated.  */
end_comment

begin_class
DECL|class|DFSLocationsRoot
specifier|public
class|class
name|DFSLocationsRoot
implements|implements
name|DFSContent
implements|,
name|IHadoopServerListener
block|{
comment|/**    *     */
DECL|field|provider
specifier|private
specifier|final
name|DFSContentProvider
name|provider
decl_stmt|;
DECL|field|map
specifier|private
name|Map
argument_list|<
name|HadoopServer
argument_list|,
name|DFSLocation
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|HadoopServer
argument_list|,
name|DFSLocation
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Register a listeners to track DFS locations updates    *     * @param provider the content provider this content is the root of    */
DECL|method|DFSLocationsRoot (DFSContentProvider provider)
name|DFSLocationsRoot
parameter_list|(
name|DFSContentProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/*    * Implementation of IHadoopServerListener    */
comment|/* @inheritDoc */
DECL|method|serverChanged (final HadoopServer location, final int type)
specifier|public
specifier|synchronized
name|void
name|serverChanged
parameter_list|(
specifier|final
name|HadoopServer
name|location
parameter_list|,
specifier|final
name|int
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ServerRegistry
operator|.
name|SERVER_STATE_CHANGED
case|:
block|{
name|this
operator|.
name|provider
operator|.
name|refresh
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ServerRegistry
operator|.
name|SERVER_ADDED
case|:
block|{
name|DFSLocation
name|dfsLoc
init|=
operator|new
name|DFSLocation
argument_list|(
name|provider
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|dfsLoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|provider
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ServerRegistry
operator|.
name|SERVER_REMOVED
case|:
block|{
name|map
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|provider
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Recompute the map of Hadoop locations    */
DECL|method|reloadLocations ()
specifier|private
specifier|synchronized
name|void
name|reloadLocations
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|HadoopServer
name|location
range|:
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
control|)
name|map
operator|.
name|put
argument_list|(
name|location
argument_list|,
operator|new
name|DFSLocation
argument_list|(
name|provider
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DFS Locations"
return|;
block|}
comment|/*    * Implementation of DFSContent    */
comment|/* @inheritDoc */
DECL|method|getChildren ()
specifier|public
specifier|synchronized
name|DFSContent
index|[]
name|getChildren
parameter_list|()
block|{
return|return
name|this
operator|.
name|map
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|DFSContent
index|[
name|this
operator|.
name|map
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/* @inheritDoc */
DECL|method|hasChildren ()
specifier|public
name|boolean
name|hasChildren
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|map
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
comment|/* @inheritDoc */
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|reloadLocations
argument_list|()
expr_stmt|;
name|this
operator|.
name|provider
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/*    * Actions    */
DECL|method|disconnect ()
specifier|public
name|void
name|disconnect
parameter_list|()
block|{
name|Thread
name|closeThread
init|=
operator|new
name|Thread
argument_list|()
block|{
comment|/* @inheritDoc */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Closing all opened File Systems...\n"
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"File Systems closed\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
comment|// Wait 5 seconds for the connections to be closed
name|closeThread
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|closeThread
operator|.
name|join
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
end_class

end_unit

