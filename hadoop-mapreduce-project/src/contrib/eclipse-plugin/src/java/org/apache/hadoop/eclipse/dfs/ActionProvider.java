begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.dfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|ImageLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|actions
operator|.
name|DFSActionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|action
operator|.
name|IMenuManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|resource
operator|.
name|ImageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ISelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|IStructuredSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|IActionBars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|PlatformUI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|actions
operator|.
name|ActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|navigator
operator|.
name|CommonActionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|navigator
operator|.
name|ICommonActionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|navigator
operator|.
name|ICommonActionExtensionSite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|navigator
operator|.
name|ICommonMenuConstants
import|;
end_import

begin_comment
comment|/**  * Allows the user to delete and refresh items in the DFS tree  */
end_comment

begin_class
DECL|class|ActionProvider
specifier|public
class|class
name|ActionProvider
extends|extends
name|CommonActionProvider
block|{
DECL|field|site
specifier|private
specifier|static
name|ICommonActionExtensionSite
name|site
decl_stmt|;
DECL|method|ActionProvider ()
specifier|public
name|ActionProvider
parameter_list|()
block|{   }
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|init (ICommonActionExtensionSite site)
specifier|public
name|void
name|init
parameter_list|(
name|ICommonActionExtensionSite
name|site
parameter_list|)
block|{
if|if
condition|(
name|ActionProvider
operator|.
name|site
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"%s: Multiple init()\n"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|init
argument_list|(
name|site
argument_list|)
expr_stmt|;
name|ActionProvider
operator|.
name|site
operator|=
name|site
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|fillActionBars (IActionBars actionBars)
specifier|public
name|void
name|fillActionBars
parameter_list|(
name|IActionBars
name|actionBars
parameter_list|)
block|{
name|actionBars
operator|.
name|setGlobalActionHandler
argument_list|(
name|ActionFactory
operator|.
name|DELETE
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|DELETE
argument_list|)
argument_list|)
expr_stmt|;
name|actionBars
operator|.
name|setGlobalActionHandler
argument_list|(
name|ActionFactory
operator|.
name|REFRESH
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|REFRESH
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|site
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
operator|(
name|site
operator|.
name|getStructuredViewer
argument_list|()
operator|.
name|getSelection
argument_list|()
operator|instanceof
name|IStructuredSelection
operator|)
operator|&&
operator|(
operator|(
operator|(
name|IStructuredSelection
operator|)
name|site
operator|.
name|getStructuredViewer
argument_list|()
operator|.
name|getSelection
argument_list|()
operator|)
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
operator|(
operator|(
name|IStructuredSelection
operator|)
name|site
operator|.
name|getStructuredViewer
argument_list|()
operator|.
name|getSelection
argument_list|()
operator|)
operator|.
name|getFirstElement
argument_list|()
operator|instanceof
name|DFSFile
operator|)
condition|)
block|{
name|actionBars
operator|.
name|setGlobalActionHandler
argument_list|(
name|ICommonActionConstants
operator|.
name|OPEN
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|actionBars
operator|.
name|updateActionBars
argument_list|()
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|fillContextMenu (IMenuManager menu)
specifier|public
name|void
name|fillContextMenu
parameter_list|(
name|IMenuManager
name|menu
parameter_list|)
block|{
comment|/*      * Actions on multiple selections      */
name|menu
operator|.
name|appendToGroup
argument_list|(
name|ICommonMenuConstants
operator|.
name|GROUP_EDIT
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|DELETE
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|appendToGroup
argument_list|(
name|ICommonMenuConstants
operator|.
name|GROUP_OPEN
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|REFRESH
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|appendToGroup
argument_list|(
name|ICommonMenuConstants
operator|.
name|GROUP_NEW
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|DOWNLOAD
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|site
operator|==
literal|null
condition|)
return|return;
name|ISelection
name|isel
init|=
name|site
operator|.
name|getStructuredViewer
argument_list|()
operator|.
name|getSelection
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|isel
operator|instanceof
name|IStructuredSelection
operator|)
condition|)
return|return;
comment|/*      * Actions on single selections only      */
name|IStructuredSelection
name|issel
init|=
operator|(
name|IStructuredSelection
operator|)
name|isel
decl_stmt|;
if|if
condition|(
name|issel
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
return|return;
name|Object
name|element
init|=
name|issel
operator|.
name|getFirstElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|instanceof
name|DFSFile
condition|)
block|{
name|menu
operator|.
name|appendToGroup
argument_list|(
name|ICommonMenuConstants
operator|.
name|GROUP_OPEN
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|OPEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|element
operator|instanceof
name|DFSFolder
condition|)
block|{
name|menu
operator|.
name|appendToGroup
argument_list|(
name|ICommonMenuConstants
operator|.
name|GROUP_NEW
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|MKDIR
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|appendToGroup
argument_list|(
name|ICommonMenuConstants
operator|.
name|GROUP_NEW
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|UPLOAD_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|appendToGroup
argument_list|(
name|ICommonMenuConstants
operator|.
name|GROUP_NEW
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|UPLOAD_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|element
operator|instanceof
name|DFSLocation
condition|)
block|{
name|menu
operator|.
name|appendToGroup
argument_list|(
name|ICommonMenuConstants
operator|.
name|GROUP_OPEN
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|RECONNECT
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|element
operator|instanceof
name|DFSLocationsRoot
condition|)
block|{
name|menu
operator|.
name|appendToGroup
argument_list|(
name|ICommonMenuConstants
operator|.
name|GROUP_OPEN
argument_list|,
operator|new
name|DFSAction
argument_list|(
name|DFSActions
operator|.
name|DISCONNECT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Representation of an action on a DFS entry in the browser    */
DECL|class|DFSAction
specifier|public
specifier|static
class|class
name|DFSAction
extends|extends
name|Action
block|{
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|title
specifier|private
specifier|final
name|String
name|title
decl_stmt|;
DECL|field|action
specifier|private
name|DFSActions
name|action
decl_stmt|;
DECL|method|DFSAction (String id, String title)
specifier|public
name|DFSAction
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|title
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|title
operator|=
name|title
expr_stmt|;
block|}
DECL|method|DFSAction (DFSActions action)
specifier|public
name|DFSAction
parameter_list|(
name|DFSActions
name|action
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|action
operator|.
name|id
expr_stmt|;
name|this
operator|.
name|title
operator|=
name|action
operator|.
name|title
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|this
operator|.
name|title
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|getImageDescriptor ()
specifier|public
name|ImageDescriptor
name|getImageDescriptor
parameter_list|()
block|{
return|return
name|ImageLibrary
operator|.
name|get
argument_list|(
name|getActionDefinitionId
argument_list|()
argument_list|)
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|getActionDefinitionId ()
specifier|public
name|String
name|getActionDefinitionId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|DFSActionImpl
name|action
init|=
operator|new
name|DFSActionImpl
argument_list|()
decl_stmt|;
name|action
operator|.
name|setActivePart
argument_list|(
name|this
argument_list|,
name|PlatformUI
operator|.
name|getWorkbench
argument_list|()
operator|.
name|getActiveWorkbenchWindow
argument_list|()
operator|.
name|getActivePage
argument_list|()
operator|.
name|getActivePart
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|selectionChanged
argument_list|(
name|this
argument_list|,
name|site
operator|.
name|getStructuredViewer
argument_list|()
operator|.
name|getSelection
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|run
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

