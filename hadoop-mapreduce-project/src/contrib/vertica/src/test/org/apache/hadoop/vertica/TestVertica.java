begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.vertica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|JobContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|task
operator|.
name|TaskAttemptContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaInputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|vertica
operator|.
name|VerticaRecordWriter
import|;
end_import

begin_class
DECL|class|TestVertica
specifier|public
class|class
name|TestVertica
extends|extends
name|VerticaTestCase
block|{
DECL|method|TestVertica (String name)
specifier|public
name|TestVertica
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Fake class used to create a job conf    */
DECL|class|VerticaTestMR
specifier|public
class|class
name|VerticaTestMR
extends|extends
name|Configured
block|{   }
DECL|method|getVerticaJob ()
specifier|public
name|Job
name|getVerticaJob
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|VerticaTestMR
operator|.
name|class
argument_list|)
expr_stmt|;
name|VerticaConfiguration
operator|.
name|configureVertica
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|AllTests
operator|.
name|getHostname
argument_list|()
block|}
argument_list|,
name|AllTests
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|AllTests
operator|.
name|getUsername
argument_list|()
argument_list|,
name|AllTests
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|getVerticaSplit (boolean fake)
specifier|public
name|VerticaInputSplit
name|getVerticaSplit
parameter_list|(
name|boolean
name|fake
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|segment_params
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|start
init|=
literal|0
decl_stmt|;
name|long
name|end
init|=
literal|0
decl_stmt|;
name|String
name|input_query
init|=
literal|"SELECT value FROM mrsource WHERE key = ?"
decl_stmt|;
name|segment_params
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|fake
condition|)
block|{
name|segment_params
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|segment_params
operator|.
name|add
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|start
operator|=
literal|5
expr_stmt|;
name|end
operator|=
literal|10
expr_stmt|;
block|}
name|VerticaInputSplit
name|input
init|=
operator|new
name|VerticaInputSplit
argument_list|(
name|input_query
argument_list|,
name|segment_params
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|input
operator|.
name|configure
argument_list|(
name|getVerticaJob
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|input
return|;
block|}
DECL|method|testVerticaRecord ()
specifier|public
name|void
name|testVerticaRecord
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|AllTests
operator|.
name|isSetup
argument_list|()
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|DateFormat
name|datefmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
name|DateFormat
name|timefmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm:ss"
argument_list|)
decl_stmt|;
name|DateFormat
name|tmstmpfmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|209348039485345L
argument_list|)
expr_stmt|;
comment|// BIGINT
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|2342345
argument_list|)
expr_stmt|;
comment|// INTGER
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|(
name|short
operator|)
literal|564
argument_list|)
expr_stmt|;
comment|// TINYINT
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|)
expr_stmt|;
comment|// SMALLINT
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|15234342345.532637
argument_list|)
argument_list|)
expr_stmt|;
comment|// REAL
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|346223093.4256
argument_list|)
argument_list|)
expr_stmt|;
comment|// DECIMAL
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|209232301132.4203
argument_list|)
argument_list|)
expr_stmt|;
comment|// NUMERIC
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|934029342.234
argument_list|)
expr_stmt|;
comment|// DOUBLE
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|(
name|float
operator|)
literal|62304.235
argument_list|)
expr_stmt|;
comment|// FLOAT
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
comment|// BINARY
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|LONGVARBINARY
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
comment|// LONGVARBINARY
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|VARBINARY
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
comment|// VARBINARY
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// BOOLEAN
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|'x'
argument_list|)
expr_stmt|;
comment|// CHAR
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|LONGNVARCHAR
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|"2ialnnnnsfm9.3;olainlekf nasl f'\\4\r\n"
argument_list|)
expr_stmt|;
comment|// LONGNVARCHAR
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|LONGVARCHAR
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|"3jflin4f'\\4\r\n'"
argument_list|)
expr_stmt|;
comment|// LONGVARCHAR
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|NCHAR
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|"jf|ls4\\4\r\nf44sf"
argument_list|)
expr_stmt|;
comment|// NCHAR
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|"4filjsf!@#$^&)*()"
argument_list|)
expr_stmt|;
comment|// VARCHAR
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|Date
argument_list|(
name|datefmt
operator|.
name|parse
argument_list|(
literal|"2009-06-07"
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// DATE
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|Time
argument_list|(
name|timefmt
operator|.
name|parse
argument_list|(
literal|"16:17:18.90"
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIME
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|Timestamp
argument_list|(
name|tmstmpfmt
operator|.
name|parse
argument_list|(
literal|"2007-08-09 6:07:05.06"
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIMESTAMP
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// BIGINT
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// INTGER
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|TINYINT
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// TINYINT
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// SMALLINT
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|REAL
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// REAL
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// DECIMAL
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// NUMERIC
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// DOUBLE
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// FLOAT
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// BINARY
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|LONGVARBINARY
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// LONGVARBINARY
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|VARBINARY
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// VARBINARY
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// BOOLEAN
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// CHAR
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|LONGNVARCHAR
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// LONGNVARCHAR
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|LONGVARCHAR
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// LONGVARCHAR
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|NCHAR
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// NCHAR
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// VARCHAR
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// DATE
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// TIME
name|types
operator|.
name|add
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// TIMESTAMP
name|String
name|sql1
init|=
literal|null
decl_stmt|;
name|sql1
operator|=
name|recordTest
argument_list|(
name|types
argument_list|,
name|values
argument_list|,
name|out
argument_list|,
name|in
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|DataInputBuffer
argument_list|()
expr_stmt|;
name|String
name|sql2
init|=
literal|null
decl_stmt|;
name|sql2
operator|=
name|recordTest
argument_list|(
name|types
argument_list|,
name|values
argument_list|,
name|out
argument_list|,
name|in
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SQL Serialization test failed"
argument_list|,
name|sql1
argument_list|,
name|sql2
argument_list|)
expr_stmt|;
block|}
DECL|method|recordTest (List<Integer> types, List<Object> values, DataOutputBuffer out, DataInputBuffer in, boolean date_string)
specifier|private
name|String
name|recordTest
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|types
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|,
name|DataOutputBuffer
name|out
parameter_list|,
name|DataInputBuffer
name|in
parameter_list|,
name|boolean
name|date_string
parameter_list|)
throws|throws
name|IOException
block|{
name|VerticaRecord
name|record
init|=
operator|new
name|VerticaRecord
argument_list|(
literal|null
argument_list|,
name|types
argument_list|,
name|values
argument_list|,
name|date_string
argument_list|)
decl_stmt|;
comment|// TODO: test values as hashmap of column names
comment|// write values into an output buffer
name|record
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// copy to an input buffer
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a new record with new values
name|List
argument_list|<
name|Object
argument_list|>
name|new_values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|record
operator|=
operator|new
name|VerticaRecord
argument_list|(
literal|null
argument_list|,
name|types
argument_list|,
name|new_values
argument_list|,
name|date_string
argument_list|)
expr_stmt|;
comment|// read back into values
name|record
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// compare values
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|null
condition|)
name|assertSame
argument_list|(
literal|"Vertica Record serialized value "
operator|+
name|i
operator|+
literal|" is null"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|new_values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Object
name|a
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|b
init|=
name|new_values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Array
operator|.
name|getLength
argument_list|(
name|a
argument_list|)
condition|;
name|j
operator|++
control|)
name|assertEquals
argument_list|(
literal|"Vertica Record serialized value "
operator|+
name|i
operator|+
literal|"["
operator|+
name|j
operator|+
literal|"] does not match"
argument_list|,
name|Array
operator|.
name|get
argument_list|(
name|a
argument_list|,
name|j
argument_list|)
argument_list|,
name|Array
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Vertica Record serialized value "
operator|+
name|i
operator|+
literal|" does not match"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|new_values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// data in sql form
return|return
name|record
operator|.
name|toSQLString
argument_list|()
return|;
block|}
DECL|method|testVerticaSplit ()
specifier|public
name|void
name|testVerticaSplit
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|AllTests
operator|.
name|isSetup
argument_list|()
condition|)
block|{
return|return;
block|}
name|VerticaInputSplit
name|input
init|=
name|getVerticaSplit
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|VerticaInputSplit
name|rem_input
init|=
operator|new
name|VerticaInputSplit
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|input
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|rem_input
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Serialized segment params do not match"
argument_list|,
name|rem_input
operator|.
name|getSegmentParams
argument_list|()
argument_list|,
name|input
operator|.
name|getSegmentParams
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Serialized start does not match"
argument_list|,
name|rem_input
operator|.
name|getStart
argument_list|()
argument_list|,
name|input
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Serialized length does not match"
argument_list|,
name|rem_input
operator|.
name|getLength
argument_list|()
argument_list|,
name|input
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerticaReader ()
specifier|public
name|void
name|testVerticaReader
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|AllTests
operator|.
name|isSetup
argument_list|()
condition|)
block|{
return|return;
block|}
name|VerticaInputSplit
name|input
init|=
name|getVerticaSplit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|VerticaRecordReader
name|reader
init|=
operator|new
name|VerticaRecordReader
argument_list|(
name|input
argument_list|,
name|input
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|context
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|input
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|TaskAttemptID
argument_list|()
argument_list|)
decl_stmt|;
name|reader
operator|.
name|initialize
argument_list|(
name|input
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|boolean
name|hasValue
init|=
name|reader
operator|.
name|nextKeyValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be a record in the database"
argument_list|,
name|hasValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LongWritable
name|key
init|=
name|reader
operator|.
name|getCurrentKey
argument_list|()
decl_stmt|;
name|VerticaRecord
name|value
init|=
name|reader
operator|.
name|getCurrentValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Key should be 1 for first record"
argument_list|,
name|key
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Result type should be VARCHAR"
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|value
operator|.
name|getTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Result value should be three"
argument_list|,
name|value
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|validateInput (Job job)
specifier|public
name|void
name|validateInput
parameter_list|(
name|Job
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|VerticaInputFormat
name|input
init|=
operator|new
name|VerticaInputFormat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InputSplit
argument_list|>
name|splits
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"mapreduce.job.maps"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JobContext
name|context
init|=
operator|new
name|JobContextImpl
argument_list|(
name|conf
argument_list|,
operator|new
name|JobID
argument_list|()
argument_list|)
decl_stmt|;
name|splits
operator|=
name|input
operator|.
name|getSplits
argument_list|(
name|context
argument_list|)
expr_stmt|;
assert|assert
name|splits
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"mapreduce.job.maps"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|splits
operator|=
name|input
operator|.
name|getSplits
argument_list|(
name|context
argument_list|)
expr_stmt|;
assert|assert
name|splits
operator|.
name|size
argument_list|()
operator|==
literal|3
assert|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"mapreduce.job.maps"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|splits
operator|=
name|input
operator|.
name|getSplits
argument_list|(
name|context
argument_list|)
expr_stmt|;
assert|assert
name|splits
operator|.
name|size
argument_list|()
operator|==
literal|10
assert|;
block|}
DECL|method|testVerticaInput ()
specifier|public
name|void
name|testVerticaInput
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|AllTests
operator|.
name|isSetup
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|input_query1
init|=
literal|"SELECT value FROM mrsource"
decl_stmt|;
name|String
name|input_query2
init|=
literal|"SELECT value FROM mrsource WHERE key = ?"
decl_stmt|;
name|String
name|segment_query
init|=
literal|"SELECT y FROM bar"
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|segment_params
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|segment_params
operator|.
name|add
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|Job
name|job
init|=
name|getVerticaJob
argument_list|()
decl_stmt|;
name|VerticaInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|input_query1
argument_list|)
expr_stmt|;
name|validateInput
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|=
name|getVerticaJob
argument_list|()
expr_stmt|;
name|VerticaInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|input_query2
argument_list|,
name|segment_query
argument_list|)
expr_stmt|;
name|validateInput
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|VerticaInputFormat
operator|.
name|setInput
argument_list|(
name|job
argument_list|,
name|input_query2
argument_list|,
name|segment_params
argument_list|)
expr_stmt|;
name|validateInput
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerticaOutput ()
specifier|public
name|void
name|testVerticaOutput
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|AllTests
operator|.
name|isSetup
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// TODO: test create schema
comment|// TODO: test writable variants of data types
name|VerticaOutputFormat
name|output
init|=
operator|new
name|VerticaOutputFormat
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|getVerticaJob
argument_list|()
decl_stmt|;
name|VerticaOutputFormat
operator|.
name|setOutput
argument_list|(
name|job
argument_list|,
literal|"mrtarget"
argument_list|,
literal|true
argument_list|,
literal|"a int"
argument_list|,
literal|"b boolean"
argument_list|,
literal|"c char(1)"
argument_list|,
literal|"d date"
argument_list|,
literal|"f float"
argument_list|,
literal|"t timestamp"
argument_list|,
literal|"v varchar"
argument_list|,
literal|"z varbinary"
argument_list|)
expr_stmt|;
name|output
operator|.
name|checkOutputSpecs
argument_list|(
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TaskAttemptContext
name|context
init|=
operator|new
name|TaskAttemptContextImpl
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|TaskAttemptID
argument_list|()
argument_list|)
decl_stmt|;
name|VerticaRecordWriter
name|writer
init|=
operator|(
name|VerticaRecordWriter
operator|)
name|output
operator|.
name|getRecordWriter
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Text
name|table
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|table
operator|.
name|set
argument_list|(
literal|"mrtarget"
argument_list|)
expr_stmt|;
name|VerticaRecord
name|record
init|=
name|VerticaOutputFormat
operator|.
name|getValue
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|125
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|2
argument_list|,
literal|'c'
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|3
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|4
argument_list|,
literal|234.526
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|5
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|6
argument_list|,
literal|"foobar string"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|record
operator|.
name|set
argument_list|(
literal|7
argument_list|,
operator|new
name|byte
index|[
literal|10
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|table
argument_list|,
name|record
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

