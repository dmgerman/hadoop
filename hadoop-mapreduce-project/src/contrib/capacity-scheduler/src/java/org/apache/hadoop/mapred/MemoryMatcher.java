begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_class
DECL|class|MemoryMatcher
class|class
name|MemoryMatcher
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MemoryMatcher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|memSizeForMapSlotOnJT
specifier|static
name|long
name|memSizeForMapSlotOnJT
init|=
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
decl_stmt|;
DECL|field|memSizeForReduceSlotOnJT
specifier|static
name|long
name|memSizeForReduceSlotOnJT
init|=
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
decl_stmt|;
DECL|field|limitMaxMemForMapTasks
specifier|static
name|long
name|limitMaxMemForMapTasks
init|=
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
decl_stmt|;
DECL|field|limitMaxMemForReduceTasks
specifier|static
name|long
name|limitMaxMemForReduceTasks
init|=
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
decl_stmt|;
DECL|method|MemoryMatcher ()
specifier|public
name|MemoryMatcher
parameter_list|()
block|{   }
comment|/**    * Find the memory that is already used by all the running tasks    * residing on the given TaskTracker.    *     * @param taskTracker    * @param taskType     * @return amount of memory that is used by the residing tasks,    *          null if memory cannot be computed for some reason.    */
DECL|method|getMemReservedForTasks ( TaskTrackerStatus taskTracker, TaskType taskType)
specifier|synchronized
name|Long
name|getMemReservedForTasks
parameter_list|(
name|TaskTrackerStatus
name|taskTracker
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
name|long
name|vmem
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskStatus
name|task
range|:
name|taskTracker
operator|.
name|getTaskReports
argument_list|()
control|)
block|{
comment|// the following task states are one in which the slot is
comment|// still occupied and hence memory of the task should be
comment|// accounted in used memory.
if|if
condition|(
operator|(
name|task
operator|.
name|getRunState
argument_list|()
operator|==
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
operator|)
operator|||
operator|(
name|task
operator|.
name|getRunState
argument_list|()
operator|==
name|TaskStatus
operator|.
name|State
operator|.
name|UNASSIGNED
operator|)
operator|||
operator|(
name|task
operator|.
name|inTaskCleanupPhase
argument_list|()
operator|)
condition|)
block|{
comment|// Get the memory "allotted" for this task based on number of slots
name|long
name|myVmem
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|getIsMap
argument_list|()
operator|&&
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|long
name|memSizePerMapSlot
init|=
name|getMemSizeForMapSlot
argument_list|()
decl_stmt|;
name|myVmem
operator|=
name|memSizePerMapSlot
operator|*
name|task
operator|.
name|getNumSlots
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|task
operator|.
name|getIsMap
argument_list|()
operator|&&
name|taskType
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|long
name|memSizePerReduceSlot
init|=
name|getMemSizeForReduceSlot
argument_list|()
decl_stmt|;
name|myVmem
operator|=
name|memSizePerReduceSlot
operator|*
name|task
operator|.
name|getNumSlots
argument_list|()
expr_stmt|;
block|}
name|vmem
operator|+=
name|myVmem
expr_stmt|;
block|}
block|}
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|vmem
argument_list|)
return|;
block|}
comment|/**    * Check if a TT has enough memory to run of task specified from this job.    * @param job    * @param taskType     * @param taskTracker    * @return true if this TT has enough memory for this job. False otherwise.    */
DECL|method|matchesMemoryRequirements (JobInProgress job,TaskType taskType, TaskTrackerStatus taskTracker)
name|boolean
name|matchesMemoryRequirements
parameter_list|(
name|JobInProgress
name|job
parameter_list|,
name|TaskType
name|taskType
parameter_list|,
name|TaskTrackerStatus
name|taskTracker
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Matching memory requirements of "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" for scheduling on "
operator|+
name|taskTracker
operator|.
name|trackerName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isSchedulingBasedOnMemEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Scheduling based on job's memory requirements is disabled."
operator|+
literal|" Ignoring any value set by job."
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|Long
name|memUsedOnTT
init|=
name|getMemReservedForTasks
argument_list|(
name|taskTracker
argument_list|,
name|taskType
argument_list|)
decl_stmt|;
name|long
name|totalMemUsableOnTT
init|=
literal|0
decl_stmt|;
name|long
name|memForThisTask
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|memForThisTask
operator|=
name|job
operator|.
name|getMemoryForMapTask
argument_list|()
expr_stmt|;
name|totalMemUsableOnTT
operator|=
name|getMemSizeForMapSlot
argument_list|()
operator|*
name|taskTracker
operator|.
name|getMaxMapSlots
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
name|memForThisTask
operator|=
name|job
operator|.
name|getMemoryForReduceTask
argument_list|()
expr_stmt|;
name|totalMemUsableOnTT
operator|=
name|getMemSizeForReduceSlot
argument_list|()
operator|*
name|taskTracker
operator|.
name|getMaxReduceSlots
argument_list|()
expr_stmt|;
block|}
name|long
name|freeMemOnTT
init|=
name|totalMemUsableOnTT
operator|-
name|memUsedOnTT
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|memForThisTask
operator|>
name|freeMemOnTT
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"memForThisTask ("
operator|+
name|memForThisTask
operator|+
literal|")> freeMemOnTT ("
operator|+
name|freeMemOnTT
operator|+
literal|"). A "
operator|+
name|taskType
operator|+
literal|" task from "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" cannot be scheduled on TT "
operator|+
name|taskTracker
operator|.
name|trackerName
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"memForThisTask = "
operator|+
name|memForThisTask
operator|+
literal|". freeMemOnTT = "
operator|+
name|freeMemOnTT
operator|+
literal|". A "
operator|+
name|taskType
operator|.
name|toString
argument_list|()
operator|+
literal|" task from "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" matches memory requirements "
operator|+
literal|"on TT "
operator|+
name|taskTracker
operator|.
name|trackerName
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|isSchedulingBasedOnMemEnabled ()
specifier|static
name|boolean
name|isSchedulingBasedOnMemEnabled
parameter_list|()
block|{
if|if
condition|(
name|getLimitMaxMemForMapSlot
argument_list|()
operator|==
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
operator|||
name|getLimitMaxMemForReduceSlot
argument_list|()
operator|==
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
operator|||
name|getMemSizeForMapSlot
argument_list|()
operator|==
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
operator|||
name|getMemSizeForReduceSlot
argument_list|()
operator|==
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|initializeMemoryRelatedConf (Configuration conf)
specifier|public
specifier|static
name|void
name|initializeMemoryRelatedConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|//handling @deprecated
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|CapacitySchedulerConf
operator|.
name|DEFAULT_PERCENTAGE_OF_PMEM_IN_VMEM_PROPERTY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|JobConf
operator|.
name|deprecatedString
argument_list|(
name|CapacitySchedulerConf
operator|.
name|DEFAULT_PERCENTAGE_OF_PMEM_IN_VMEM_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//handling @deprecated
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|CapacitySchedulerConf
operator|.
name|UPPER_LIMIT_ON_TASK_PMEM_PROPERTY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|JobConf
operator|.
name|deprecatedString
argument_list|(
name|CapacitySchedulerConf
operator|.
name|UPPER_LIMIT_ON_TASK_PMEM_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_DEFAULT_MAXVMEM_PROPERTY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|JobConf
operator|.
name|deprecatedString
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_DEFAULT_MAXVMEM_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|memSizeForMapSlotOnJT
operator|=
name|JobConf
operator|.
name|normalizeMemoryConfigValue
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|MRConfig
operator|.
name|MAPMEMORY_MB
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
name|memSizeForReduceSlotOnJT
operator|=
name|JobConf
operator|.
name|normalizeMemoryConfigValue
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|MRConfig
operator|.
name|REDUCEMEMORY_MB
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
comment|//handling @deprecated values
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|UPPER_LIMIT_ON_TASK_VMEM_PROPERTY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|JobConf
operator|.
name|deprecatedString
argument_list|(
name|JobConf
operator|.
name|UPPER_LIMIT_ON_TASK_VMEM_PROPERTY
argument_list|)
operator|+
literal|" instead use "
operator|+
name|JTConfig
operator|.
name|JT_MAX_MAPMEMORY_MB
operator|+
literal|" and "
operator|+
name|JTConfig
operator|.
name|JT_MAX_REDUCEMEMORY_MB
argument_list|)
expr_stmt|;
name|limitMaxMemForMapTasks
operator|=
name|limitMaxMemForReduceTasks
operator|=
name|JobConf
operator|.
name|normalizeMemoryConfigValue
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|JobConf
operator|.
name|UPPER_LIMIT_ON_TASK_VMEM_PROPERTY
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|limitMaxMemForMapTasks
operator|!=
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
operator|&&
name|limitMaxMemForMapTasks
operator|>=
literal|0
condition|)
block|{
name|limitMaxMemForMapTasks
operator|=
name|limitMaxMemForReduceTasks
operator|=
name|limitMaxMemForMapTasks
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
expr_stmt|;
comment|//Converting old values in bytes to MB
block|}
block|}
else|else
block|{
name|limitMaxMemForMapTasks
operator|=
name|JobConf
operator|.
name|normalizeMemoryConfigValue
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_MAPMEMORY_MB
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
name|limitMaxMemForReduceTasks
operator|=
name|JobConf
operator|.
name|normalizeMemoryConfigValue
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|JTConfig
operator|.
name|JT_MAX_REDUCEMEMORY_MB
argument_list|,
name|JobConf
operator|.
name|DISABLED_MEMORY_LIMIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Scheduler configured with "
operator|+
literal|"(memSizeForMapSlotOnJT, memSizeForReduceSlotOnJT, "
operator|+
literal|"limitMaxMemForMapTasks, limitMaxMemForReduceTasks)"
operator|+
literal|" (%d,%d,%d,%d)"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|memSizeForMapSlotOnJT
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|memSizeForReduceSlotOnJT
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|limitMaxMemForMapTasks
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|limitMaxMemForReduceTasks
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getMemSizeForMapSlot ()
specifier|static
name|long
name|getMemSizeForMapSlot
parameter_list|()
block|{
return|return
name|memSizeForMapSlotOnJT
return|;
block|}
DECL|method|getMemSizeForReduceSlot ()
specifier|static
name|long
name|getMemSizeForReduceSlot
parameter_list|()
block|{
return|return
name|memSizeForReduceSlotOnJT
return|;
block|}
DECL|method|getLimitMaxMemForMapSlot ()
specifier|static
name|long
name|getLimitMaxMemForMapSlot
parameter_list|()
block|{
return|return
name|limitMaxMemForMapTasks
return|;
block|}
DECL|method|getLimitMaxMemForReduceSlot ()
specifier|static
name|long
name|getLimitMaxMemForReduceSlot
parameter_list|()
block|{
return|return
name|limitMaxMemForReduceTasks
return|;
block|}
block|}
end_class

end_unit

