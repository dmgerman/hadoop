begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at *<p/> * http://www.apache.org/licenses/LICENSE-2.0 *<p/> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_comment
comment|/**  * Task view class for the job .  * returns the running pending and other information for a Job(JobInProgress).  *  * has a factory method which provides  * map and reduce data view based on the type  *  */
end_comment

begin_class
DECL|class|TaskDataView
specifier|abstract
class|class
name|TaskDataView
block|{
DECL|method|getRunningTasks (JobInProgress job)
specifier|abstract
name|int
name|getRunningTasks
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
function_decl|;
DECL|method|getPendingTasks (JobInProgress job)
specifier|abstract
name|int
name|getPendingTasks
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
function_decl|;
DECL|method|getSlotsPerTask (JobInProgress job)
specifier|abstract
name|int
name|getSlotsPerTask
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
function_decl|;
DECL|method|getTSI (QueueSchedulingContext qsi)
specifier|abstract
name|TaskSchedulingContext
name|getTSI
parameter_list|(
name|QueueSchedulingContext
name|qsi
parameter_list|)
function_decl|;
DECL|method|getNumReservedTaskTrackers (JobInProgress job)
specifier|abstract
name|int
name|getNumReservedTaskTrackers
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
function_decl|;
DECL|method|getSlotsOccupied (JobInProgress job)
name|int
name|getSlotsOccupied
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
operator|(
name|getNumReservedTaskTrackers
argument_list|(
name|job
argument_list|)
operator|+
name|getRunningTasks
argument_list|(
name|job
argument_list|)
operator|)
operator|*
name|getSlotsPerTask
argument_list|(
name|job
argument_list|)
return|;
block|}
comment|/**    * Check if the given job has sufficient reserved tasktrackers for all its    * pending tasks.    *    * @param job job to check for sufficient reserved tasktrackers    * @return<code>true</code> if the job has reserved tasktrackers,    *         else<code>false</code>    */
DECL|method|hasSufficientReservedTaskTrackers (JobInProgress job)
name|boolean
name|hasSufficientReservedTaskTrackers
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
name|getNumReservedTaskTrackers
argument_list|(
name|job
argument_list|)
operator|>=
name|getPendingTasks
argument_list|(
name|job
argument_list|)
return|;
block|}
DECL|field|mapTaskDataView
specifier|private
specifier|static
name|TaskDataView
name|mapTaskDataView
decl_stmt|;
DECL|field|reduceTaskDataView
specifier|private
specifier|static
name|TaskDataView
name|reduceTaskDataView
decl_stmt|;
DECL|method|getTaskDataView (TaskType type)
specifier|static
name|TaskDataView
name|getTaskDataView
parameter_list|(
name|TaskType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
if|if
condition|(
name|mapTaskDataView
operator|==
literal|null
condition|)
block|{
name|mapTaskDataView
operator|=
operator|new
name|MapTaskDataView
argument_list|()
expr_stmt|;
block|}
return|return
name|mapTaskDataView
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TaskType
operator|.
name|REDUCE
condition|)
block|{
if|if
condition|(
name|reduceTaskDataView
operator|==
literal|null
condition|)
block|{
name|reduceTaskDataView
operator|=
operator|new
name|ReduceTaskDataView
argument_list|()
expr_stmt|;
block|}
return|return
name|reduceTaskDataView
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * The data view for map tasks    */
DECL|class|MapTaskDataView
specifier|static
class|class
name|MapTaskDataView
extends|extends
name|TaskDataView
block|{
DECL|method|MapTaskDataView ()
name|MapTaskDataView
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getRunningTasks (JobInProgress job)
name|int
name|getRunningTasks
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|runningMaps
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPendingTasks (JobInProgress job)
name|int
name|getPendingTasks
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|pendingMaps
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSlotsPerTask (JobInProgress job)
name|int
name|getSlotsPerTask
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getNumSlotsPerMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTSI (QueueSchedulingContext qsi)
name|TaskSchedulingContext
name|getTSI
parameter_list|(
name|QueueSchedulingContext
name|qsi
parameter_list|)
block|{
return|return
name|qsi
operator|.
name|getMapTSC
argument_list|()
return|;
block|}
DECL|method|getNumReservedTaskTrackers (JobInProgress job)
name|int
name|getNumReservedTaskTrackers
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getNumReservedTaskTrackersForMaps
argument_list|()
return|;
block|}
block|}
comment|/**    *  The data view for reduce tasks    */
DECL|class|ReduceTaskDataView
specifier|static
class|class
name|ReduceTaskDataView
extends|extends
name|TaskDataView
block|{
DECL|method|ReduceTaskDataView ()
name|ReduceTaskDataView
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|getRunningTasks (JobInProgress job)
name|int
name|getRunningTasks
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|runningReduces
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPendingTasks (JobInProgress job)
name|int
name|getPendingTasks
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|pendingReduces
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSlotsPerTask (JobInProgress job)
name|int
name|getSlotsPerTask
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getNumSlotsPerReduce
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTSI (QueueSchedulingContext qsi)
name|TaskSchedulingContext
name|getTSI
parameter_list|(
name|QueueSchedulingContext
name|qsi
parameter_list|)
block|{
return|return
name|qsi
operator|.
name|getReduceTSC
argument_list|()
return|;
block|}
DECL|method|getNumReservedTaskTrackers (JobInProgress job)
name|int
name|getNumReservedTaskTrackers
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
block|{
return|return
name|job
operator|.
name|getNumReservedTaskTrackersForReduces
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

