begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|SleepJob
import|;
end_import

begin_class
DECL|class|TestCapacitySchedulerWithJobTracker
specifier|public
class|class
name|TestCapacitySchedulerWithJobTracker
extends|extends
name|ClusterWithCapacityScheduler
block|{
comment|/**    * Test case which checks if the jobs which    * fail initialization are removed from the    * {@link CapacityTaskScheduler} waiting queue.    *    * @throws Exception    */
DECL|method|testFailingJobInitalization ()
specifier|public
name|void
name|testFailingJobInitalization
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|schedulerProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Properties
name|clusterProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|clusterProps
operator|.
name|put
argument_list|(
literal|"mapred.queue.names"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|clusterProps
operator|.
name|put
argument_list|(
name|TTConfig
operator|.
name|TT_MAP_SLOTS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|clusterProps
operator|.
name|put
argument_list|(
name|TTConfig
operator|.
name|TT_REDUCE_SLOTS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|clusterProps
operator|.
name|put
argument_list|(
name|JTConfig
operator|.
name|JT_TASKS_PER_JOB
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|clusterProps
operator|.
name|put
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// cluster capacity 1 maps, 1 reduces
name|startCluster
argument_list|(
literal|1
argument_list|,
name|clusterProps
argument_list|,
name|schedulerProps
argument_list|)
expr_stmt|;
name|CapacityTaskScheduler
name|scheduler
init|=
operator|(
name|CapacityTaskScheduler
operator|)
name|getJobTracker
argument_list|()
operator|.
name|getTaskScheduler
argument_list|()
decl_stmt|;
name|AbstractQueue
name|root
init|=
name|scheduler
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|setCapacityPercent
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|JobConf
name|conf
init|=
name|getJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumTasksToExecutePerJvm
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|SleepJob
name|sleepJob
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|sleepJob
operator|.
name|createJob
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The submitted job successfully completed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|JobQueuesManager
name|mgr
init|=
name|scheduler
operator|.
name|jobQueuesManager
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed job present in Waiting queue"
argument_list|,
literal|0
argument_list|,
name|mgr
operator|.
name|getJobQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getWaitingJobCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test case which checks {@link JobTracker} and {@link CapacityTaskScheduler}    *<p/>    * Test case submits 2 jobs in two different capacity scheduler queues.    * And checks if the jobs successfully complete.    *    * @throws Exception    */
DECL|method|testJobTrackerIntegration ()
specifier|public
name|void
name|testJobTrackerIntegration
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|schedulerProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
index|[]
name|queues
init|=
operator|new
name|String
index|[]
block|{
literal|"Q1"
block|,
literal|"Q2"
block|}
decl_stmt|;
name|Job
name|jobs
index|[]
init|=
operator|new
name|Job
index|[
literal|2
index|]
decl_stmt|;
name|Properties
name|clusterProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|clusterProps
operator|.
name|put
argument_list|(
name|TTConfig
operator|.
name|TT_MAP_SLOTS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|clusterProps
operator|.
name|put
argument_list|(
name|TTConfig
operator|.
name|TT_REDUCE_SLOTS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|clusterProps
operator|.
name|put
argument_list|(
literal|"mapred.queue.names"
argument_list|,
name|queues
index|[
literal|0
index|]
operator|+
literal|","
operator|+
name|queues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|clusterProps
operator|.
name|put
argument_list|(
name|JTConfig
operator|.
name|JT_PERSIST_JOBSTATUS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
literal|2
argument_list|,
name|clusterProps
argument_list|,
name|schedulerProps
argument_list|)
expr_stmt|;
name|CapacityTaskScheduler
name|scheduler
init|=
operator|(
name|CapacityTaskScheduler
operator|)
name|getJobTracker
argument_list|()
operator|.
name|getTaskScheduler
argument_list|()
decl_stmt|;
name|AbstractQueue
name|root
init|=
name|scheduler
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractQueue
name|q
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|q
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|setCapacityPercent
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|q
operator|.
name|getQueueSchedulingContext
argument_list|()
operator|.
name|setUlMin
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"WE CREATED THE QUEUES TEST 2"
argument_list|)
expr_stmt|;
comment|// scheduler.taskTrackerManager.getQueueManager().setQueues(qs);
comment|// scheduler.start();
name|JobConf
name|conf
init|=
name|getJobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MRJobConfig
operator|.
name|SETUP_CLEANUP_NEEDED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumTasksToExecutePerJvm
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueueName
argument_list|(
name|queues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|SleepJob
name|sleepJob1
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob1
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|jobs
index|[
literal|0
index|]
operator|=
name|sleepJob1
operator|.
name|createJob
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|jobs
index|[
literal|0
index|]
operator|.
name|submit
argument_list|()
expr_stmt|;
name|JobConf
name|conf2
init|=
name|getJobConf
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|setSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setNumTasksToExecutePerJvm
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setQueueName
argument_list|(
name|queues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|SleepJob
name|sleepJob2
init|=
operator|new
name|SleepJob
argument_list|()
decl_stmt|;
name|sleepJob2
operator|.
name|setConf
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|jobs
index|[
literal|1
index|]
operator|=
name|sleepJob2
operator|.
name|createJob
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|jobs
index|[
literal|0
index|]
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jobs
index|[
literal|1
index|]
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Sleep job submitted to queue 1 is not successful"
argument_list|,
name|jobs
index|[
literal|0
index|]
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Sleep job submitted to queue 2 is not successful"
argument_list|,
name|jobs
index|[
literal|1
index|]
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

