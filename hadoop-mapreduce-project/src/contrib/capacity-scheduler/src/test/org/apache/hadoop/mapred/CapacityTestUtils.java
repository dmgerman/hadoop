begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
operator|.
name|JobTrackerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|QueueState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|QueueManager
operator|.
name|toFullPropertyName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FakeObjectUtilities
operator|.
name|FakeJobHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|split
operator|.
name|JobSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_class
DECL|class|CapacityTestUtils
specifier|public
class|class
name|CapacityTestUtils
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|CapacityTestUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAP
specifier|static
specifier|final
name|String
name|MAP
init|=
literal|"map"
decl_stmt|;
DECL|field|REDUCE
specifier|static
specifier|final
name|String
name|REDUCE
init|=
literal|"reduce"
decl_stmt|;
comment|/**    * Test class that removes the asynchronous nature of job initialization.    *<p/>    * The run method is a dummy which just waits for completion. It is    * expected that test code calls the main method, initializeJobs, directly    * to trigger initialization.    */
DECL|class|ControlledJobInitializer
specifier|static
class|class
name|ControlledJobInitializer
extends|extends
name|JobInitializationPoller
operator|.
name|JobInitializationThread
block|{
DECL|field|stopRunning
name|boolean
name|stopRunning
decl_stmt|;
DECL|method|ControlledJobInitializer (JobInitializationPoller p)
specifier|public
name|ControlledJobInitializer
parameter_list|(
name|JobInitializationPoller
name|p
parameter_list|)
block|{
name|p
operator|.
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stopRunning
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
DECL|method|stopRunning ()
name|void
name|stopRunning
parameter_list|()
block|{
name|stopRunning
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Test class that removes the asynchronous nature of job initialization.    *<p/>    * The run method is a dummy which just waits for completion. It is    * expected that test code calls the main method, selectJobsToInitialize,    * directly to trigger initialization.    *<p/>    * The class also creates the test worker thread objects of type    * ControlledJobInitializer instead of the objects of the actual class    */
DECL|class|ControlledInitializationPoller
specifier|static
class|class
name|ControlledInitializationPoller
extends|extends
name|JobInitializationPoller
block|{
DECL|field|stopRunning
specifier|private
name|boolean
name|stopRunning
decl_stmt|;
DECL|field|workers
specifier|private
name|ArrayList
argument_list|<
name|ControlledJobInitializer
argument_list|>
name|workers
decl_stmt|;
DECL|method|ControlledInitializationPoller (JobQueuesManager mgr, TaskTrackerManager ttm)
specifier|public
name|ControlledInitializationPoller
parameter_list|(
name|JobQueuesManager
name|mgr
parameter_list|,
name|TaskTrackerManager
name|ttm
parameter_list|)
block|{
name|super
argument_list|(
name|mgr
argument_list|,
name|ttm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// don't do anything here.
while|while
condition|(
operator|!
name|stopRunning
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createJobInitializationThread ()
name|JobInitializationThread
name|createJobInitializationThread
parameter_list|()
block|{
name|ControlledJobInitializer
name|t
init|=
operator|new
name|ControlledJobInitializer
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|workers
operator|==
literal|null
condition|)
block|{
name|workers
operator|=
operator|new
name|ArrayList
argument_list|<
name|ControlledJobInitializer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|workers
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
annotation|@
name|Override
DECL|method|selectJobsToInitialize ()
name|void
name|selectJobsToInitialize
parameter_list|()
block|{
name|super
operator|.
name|cleanUpInitializedJobsList
argument_list|()
expr_stmt|;
name|super
operator|.
name|selectJobsToInitialize
argument_list|()
expr_stmt|;
for|for
control|(
name|ControlledJobInitializer
name|t
range|:
name|workers
control|)
block|{
name|t
operator|.
name|initializeJobs
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopRunning ()
name|void
name|stopRunning
parameter_list|()
block|{
name|stopRunning
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|ControlledJobInitializer
name|t
range|:
name|workers
control|)
block|{
name|t
operator|.
name|stopRunning
argument_list|()
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|FakeClock
specifier|static
class|class
name|FakeClock
extends|extends
name|CapacityTaskScheduler
operator|.
name|Clock
block|{
DECL|field|time
specifier|private
name|long
name|time
init|=
literal|0
decl_stmt|;
DECL|method|advance (long millis)
specifier|public
name|void
name|advance
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
name|time
operator|+=
name|millis
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTime ()
name|long
name|getTime
parameter_list|()
block|{
return|return
name|time
return|;
block|}
block|}
comment|/**    * The method accepts a attempt string and checks for validity of    * assignTask w.r.t attempt string.    *     * @param taskTrackerManager    * @param scheduler    * @param taskTrackerName    * @param expectedTaskString    * @return    * @throws IOException    */
DECL|method|checkAssignment ( CapacityTestUtils.FakeTaskTrackerManager taskTrackerManager, CapacityTaskScheduler scheduler, String taskTrackerName, String expectedTaskString)
specifier|static
name|Task
name|checkAssignment
parameter_list|(
name|CapacityTestUtils
operator|.
name|FakeTaskTrackerManager
name|taskTrackerManager
parameter_list|,
name|CapacityTaskScheduler
name|scheduler
parameter_list|,
name|String
name|taskTrackerName
parameter_list|,
name|String
name|expectedTaskString
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedStrings
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedTaskString
operator|.
name|contains
argument_list|(
literal|"_m_"
argument_list|)
condition|)
block|{
name|expectedStrings
operator|.
name|put
argument_list|(
name|MAP
argument_list|,
name|expectedTaskString
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedTaskString
operator|.
name|contains
argument_list|(
literal|"_r_"
argument_list|)
condition|)
block|{
name|expectedStrings
operator|.
name|put
argument_list|(
name|REDUCE
argument_list|,
name|expectedTaskString
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|checkMultipleTaskAssignment
argument_list|(
name|taskTrackerManager
argument_list|,
name|scheduler
argument_list|,
name|taskTrackerName
argument_list|,
name|expectedStrings
argument_list|)
decl_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
if|if
condition|(
name|task
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedTaskString
argument_list|)
condition|)
block|{
return|return
name|task
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Checks the validity of tasks assigned by scheduler's assignTasks method    * According to JIRA:1030 every assignTasks call in CapacityScheduler    * would result in either MAP or REDUCE or BOTH.    *    * This method accepts a Map<String,String>.    * The map should always have<=2 entried in hashMap.    *    * sample calling code .    *    *  Map<String, String> expectedStrings = new HashMap<String, String>();    * ......    * .......    * expectedStrings.clear();    * expectedStrings.put(MAP,"attempt_test_0001_m_000001_0 on tt1");    * expectedStrings.put(REDUCE,"attempt_test_0001_r_000001_0 on tt1");    * checkMultipleTaskAssignment(    *   taskTrackerManager, scheduler, "tt1",    *   expectedStrings);    *     * @param taskTrackerManager    * @param scheduler    * @param taskTrackerName    * @param expectedTaskStrings    * @return    * @throws IOException    */
DECL|method|checkMultipleTaskAssignment ( CapacityTestUtils.FakeTaskTrackerManager taskTrackerManager, CapacityTaskScheduler scheduler, String taskTrackerName, Map<String,String> expectedTaskStrings)
specifier|static
name|List
argument_list|<
name|Task
argument_list|>
name|checkMultipleTaskAssignment
parameter_list|(
name|CapacityTestUtils
operator|.
name|FakeTaskTrackerManager
name|taskTrackerManager
parameter_list|,
name|CapacityTaskScheduler
name|scheduler
parameter_list|,
name|String
name|taskTrackerName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedTaskStrings
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Call assign task
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|taskTrackerManager
operator|.
name|getTaskTracker
argument_list|(
name|taskTrackerName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tasks
operator|==
literal|null
operator|||
name|tasks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|expectedTaskStrings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Expected some tasks to be assigned, but got none."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|expectedTaskStrings
operator|.
name|size
argument_list|()
operator|>
name|tasks
operator|.
name|size
argument_list|()
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Expected strings different from actual strings."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" Expected string count="
argument_list|)
operator|.
name|append
argument_list|(
name|expectedTaskStrings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" Actual string count="
argument_list|)
operator|.
name|append
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" Expected strings="
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|expectedTask
range|:
name|expectedTaskStrings
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|expectedTask
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Actual strings="
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|actualTask
range|:
name|tasks
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|actualTask
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"tasks are : "
operator|+
name|tasks
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
comment|//check if expected string is set for map or not.
if|if
condition|(
name|expectedTaskStrings
operator|.
name|get
argument_list|(
name|MAP
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedTaskStrings
operator|.
name|get
argument_list|(
name|MAP
argument_list|)
argument_list|,
name|task
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"No map task is expected, but got "
operator|+
name|task
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//check if expectedStrings is set for reduce or not.
if|if
condition|(
name|expectedTaskStrings
operator|.
name|get
argument_list|(
name|REDUCE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedTaskStrings
operator|.
name|get
argument_list|(
name|REDUCE
argument_list|)
argument_list|,
name|task
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"No reduce task is expected, but got "
operator|+
name|task
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|tasks
return|;
block|}
DECL|method|verifyCapacity ( FakeTaskTrackerManager taskTrackerManager, String expectedCapacity, String queue)
specifier|static
name|void
name|verifyCapacity
parameter_list|(
name|FakeTaskTrackerManager
name|taskTrackerManager
parameter_list|,
name|String
name|expectedCapacity
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|schedInfo
init|=
name|taskTrackerManager
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getSchedulerInfo
argument_list|(
name|queue
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|schedInfo
operator|.
name|contains
argument_list|(
literal|"Map tasks\nCapacity: "
operator|+
name|expectedCapacity
operator|+
literal|" slots"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*   * Fake job in progress object used for testing the schedulers scheduling   * decisions. The JobInProgress objects returns out FakeTaskInProgress   * objects when assignTasks is called. If speculative maps and reduces   * are configured then JobInProgress returns exactly one Speculative   * map and reduce task.   */
DECL|class|FakeJobInProgress
specifier|static
class|class
name|FakeJobInProgress
extends|extends
name|JobInProgress
block|{
DECL|field|taskTrackerManager
specifier|protected
name|FakeTaskTrackerManager
name|taskTrackerManager
decl_stmt|;
DECL|field|mapTaskCtr
specifier|private
name|int
name|mapTaskCtr
decl_stmt|;
DECL|field|redTaskCtr
specifier|private
name|int
name|redTaskCtr
decl_stmt|;
DECL|field|mapTips
specifier|private
name|Set
argument_list|<
name|TaskInProgress
argument_list|>
name|mapTips
init|=
operator|new
name|HashSet
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reduceTips
specifier|private
name|Set
argument_list|<
name|TaskInProgress
argument_list|>
name|reduceTips
init|=
operator|new
name|HashSet
argument_list|<
name|TaskInProgress
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|speculativeMapTaskCounter
specifier|private
name|int
name|speculativeMapTaskCounter
init|=
literal|0
decl_stmt|;
DECL|field|speculativeReduceTaskCounter
specifier|private
name|int
name|speculativeReduceTaskCounter
init|=
literal|0
decl_stmt|;
DECL|method|FakeJobInProgress ( JobID jId, JobConf jobConf, FakeTaskTrackerManager taskTrackerManager, String user, JobTracker jt)
specifier|public
name|FakeJobInProgress
parameter_list|(
name|JobID
name|jId
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|FakeTaskTrackerManager
name|taskTrackerManager
parameter_list|,
name|String
name|user
parameter_list|,
name|JobTracker
name|jt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|jId
argument_list|,
name|jobConf
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskTrackerManager
operator|=
name|taskTrackerManager
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|status
operator|=
operator|new
name|JobStatus
argument_list|(
name|jId
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|,
name|JobStatus
operator|.
name|PREP
argument_list|,
name|jobConf
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobConf
operator|.
name|getJobName
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|.
name|setJobPriority
argument_list|(
name|JobPriority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|this
operator|.
name|status
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|jobConf
operator|.
name|getQueueName
argument_list|()
condition|)
block|{
name|this
operator|.
name|profile
operator|=
operator|new
name|JobProfile
argument_list|(
name|user
argument_list|,
name|jId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|profile
operator|=
operator|new
name|JobProfile
argument_list|(
name|user
argument_list|,
name|jId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|jobConf
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mapTaskCtr
operator|=
literal|0
expr_stmt|;
name|redTaskCtr
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|jobHistory
operator|=
operator|new
name|FakeJobHistory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initTasks ()
specifier|public
specifier|synchronized
name|void
name|initTasks
parameter_list|()
throws|throws
name|IOException
block|{
name|getStatus
argument_list|()
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|obtainNewMapTask ( final TaskTrackerStatus tts, int clusterSize, int ignored)
specifier|public
specifier|synchronized
name|Task
name|obtainNewMapTask
parameter_list|(
specifier|final
name|TaskTrackerStatus
name|tts
parameter_list|,
name|int
name|clusterSize
parameter_list|,
name|int
name|ignored
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|areAllMapsRunning
init|=
operator|(
name|mapTaskCtr
operator|==
name|numMapTasks
operator|)
decl_stmt|;
if|if
condition|(
name|areAllMapsRunning
condition|)
block|{
if|if
condition|(
operator|!
name|getJobConf
argument_list|()
operator|.
name|getMapSpeculativeExecution
argument_list|()
operator|||
name|speculativeMapTasks
operator|>
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|TaskAttemptID
name|attemptId
init|=
name|getTaskAttemptID
argument_list|(
literal|true
argument_list|,
name|areAllMapsRunning
argument_list|)
decl_stmt|;
name|JobSplit
operator|.
name|TaskSplitMetaInfo
name|split
init|=
name|JobSplit
operator|.
name|EMPTY_TASK_SPLIT
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|MapTask
argument_list|(
literal|""
argument_list|,
name|attemptId
argument_list|,
literal|0
argument_list|,
name|split
operator|.
name|getSplitIndex
argument_list|()
argument_list|,
name|super
operator|.
name|numSlotsPerMap
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s on %s"
argument_list|,
name|getTaskID
argument_list|()
argument_list|,
name|tts
operator|.
name|getTrackerName
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|startTask
argument_list|(
name|tts
operator|.
name|getTrackerName
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|runningMapTasks
operator|++
expr_stmt|;
comment|// create a fake TIP and keep track of it
name|FakeTaskInProgress
name|mapTip
init|=
operator|new
name|FakeTaskInProgress
argument_list|(
name|getJobID
argument_list|()
argument_list|,
name|getJobConf
argument_list|()
argument_list|,
name|task
argument_list|,
literal|true
argument_list|,
name|this
argument_list|,
name|split
argument_list|)
decl_stmt|;
name|mapTip
operator|.
name|taskStatus
operator|.
name|setRunState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
if|if
condition|(
name|areAllMapsRunning
condition|)
block|{
name|speculativeMapTasks
operator|++
expr_stmt|;
comment|//you have scheduled a speculative map. Now set all tips in the
comment|//map tips not to have speculative task.
for|for
control|(
name|TaskInProgress
name|t
range|:
name|mapTips
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|FakeTaskInProgress
condition|)
block|{
name|FakeTaskInProgress
name|mt
init|=
operator|(
name|FakeTaskInProgress
operator|)
name|t
decl_stmt|;
name|mt
operator|.
name|hasSpeculativeMap
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//add only non-speculative tips.
name|mapTips
operator|.
name|add
argument_list|(
name|mapTip
argument_list|)
expr_stmt|;
comment|//add the tips to the JobInProgress TIPS
name|maps
operator|=
name|mapTips
operator|.
name|toArray
argument_list|(
operator|new
name|TaskInProgress
index|[
name|mapTips
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|task
return|;
block|}
annotation|@
name|Override
DECL|method|obtainNewReduceTask ( final TaskTrackerStatus tts, int clusterSize, int ignored)
specifier|public
specifier|synchronized
name|Task
name|obtainNewReduceTask
parameter_list|(
specifier|final
name|TaskTrackerStatus
name|tts
parameter_list|,
name|int
name|clusterSize
parameter_list|,
name|int
name|ignored
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|areAllReducesRunning
init|=
operator|(
name|redTaskCtr
operator|==
name|numReduceTasks
operator|)
decl_stmt|;
if|if
condition|(
name|areAllReducesRunning
condition|)
block|{
if|if
condition|(
operator|!
name|getJobConf
argument_list|()
operator|.
name|getReduceSpeculativeExecution
argument_list|()
operator|||
name|speculativeReduceTasks
operator|>
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|TaskAttemptID
name|attemptId
init|=
name|getTaskAttemptID
argument_list|(
literal|false
argument_list|,
name|areAllReducesRunning
argument_list|)
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|ReduceTask
argument_list|(
literal|""
argument_list|,
name|attemptId
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
name|super
operator|.
name|numSlotsPerReduce
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s on %s"
argument_list|,
name|getTaskID
argument_list|()
argument_list|,
name|tts
operator|.
name|getTrackerName
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|taskTrackerManager
operator|.
name|startTask
argument_list|(
name|tts
operator|.
name|getTrackerName
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|runningReduceTasks
operator|++
expr_stmt|;
comment|// create a fake TIP and keep track of it
name|FakeTaskInProgress
name|reduceTip
init|=
operator|new
name|FakeTaskInProgress
argument_list|(
name|getJobID
argument_list|()
argument_list|,
name|getJobConf
argument_list|()
argument_list|,
name|task
argument_list|,
literal|false
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reduceTip
operator|.
name|taskStatus
operator|.
name|setRunState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
if|if
condition|(
name|areAllReducesRunning
condition|)
block|{
name|speculativeReduceTasks
operator|++
expr_stmt|;
comment|//you have scheduled a speculative map. Now set all tips in the
comment|//map tips not to have speculative task.
for|for
control|(
name|TaskInProgress
name|t
range|:
name|reduceTips
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|FakeTaskInProgress
condition|)
block|{
name|FakeTaskInProgress
name|rt
init|=
operator|(
name|FakeTaskInProgress
operator|)
name|t
decl_stmt|;
name|rt
operator|.
name|hasSpeculativeReduce
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//add only non-speculative tips.
name|reduceTips
operator|.
name|add
argument_list|(
name|reduceTip
argument_list|)
expr_stmt|;
comment|//add the tips to the JobInProgress TIPS
name|reduces
operator|=
name|reduceTips
operator|.
name|toArray
argument_list|(
operator|new
name|TaskInProgress
index|[
name|reduceTips
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|task
return|;
block|}
DECL|method|mapTaskFinished ()
specifier|public
name|void
name|mapTaskFinished
parameter_list|()
block|{
name|runningMapTasks
operator|--
expr_stmt|;
name|finishedMapTasks
operator|++
expr_stmt|;
block|}
DECL|method|reduceTaskFinished ()
specifier|public
name|void
name|reduceTaskFinished
parameter_list|()
block|{
name|runningReduceTasks
operator|--
expr_stmt|;
name|finishedReduceTasks
operator|++
expr_stmt|;
block|}
DECL|method|getTaskAttemptID ( boolean isMap, boolean isSpeculative)
specifier|private
name|TaskAttemptID
name|getTaskAttemptID
parameter_list|(
name|boolean
name|isMap
parameter_list|,
name|boolean
name|isSpeculative
parameter_list|)
block|{
name|JobID
name|jobId
init|=
name|getJobID
argument_list|()
decl_stmt|;
name|TaskType
name|t
init|=
name|TaskType
operator|.
name|REDUCE
decl_stmt|;
if|if
condition|(
name|isMap
condition|)
block|{
name|t
operator|=
name|TaskType
operator|.
name|MAP
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isSpeculative
condition|)
block|{
return|return
operator|new
name|TaskAttemptID
argument_list|(
name|jobId
operator|.
name|getJtIdentifier
argument_list|()
argument_list|,
name|jobId
operator|.
name|getId
argument_list|()
argument_list|,
name|t
argument_list|,
operator|(
name|isMap
operator|)
condition|?
operator|++
name|mapTaskCtr
else|:
operator|++
name|redTaskCtr
argument_list|,
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TaskAttemptID
argument_list|(
name|jobId
operator|.
name|getJtIdentifier
argument_list|()
argument_list|,
name|jobId
operator|.
name|getId
argument_list|()
argument_list|,
name|t
argument_list|,
operator|(
name|isMap
operator|)
condition|?
name|mapTaskCtr
else|:
name|redTaskCtr
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNonLocalRunningMaps ()
name|Set
argument_list|<
name|TaskInProgress
argument_list|>
name|getNonLocalRunningMaps
parameter_list|()
block|{
return|return
operator|(
name|Set
argument_list|<
name|TaskInProgress
argument_list|>
operator|)
name|mapTips
return|;
block|}
annotation|@
name|Override
DECL|method|getRunningReduces ()
name|Set
argument_list|<
name|TaskInProgress
argument_list|>
name|getRunningReduces
parameter_list|()
block|{
return|return
operator|(
name|Set
argument_list|<
name|TaskInProgress
argument_list|>
operator|)
name|reduceTips
return|;
block|}
block|}
DECL|class|FakeFailingJobInProgress
specifier|static
class|class
name|FakeFailingJobInProgress
extends|extends
name|FakeJobInProgress
block|{
DECL|method|FakeFailingJobInProgress ( JobID id, JobConf jobConf, FakeTaskTrackerManager taskTrackerManager, String user, JobTracker jt)
specifier|public
name|FakeFailingJobInProgress
parameter_list|(
name|JobID
name|id
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|FakeTaskTrackerManager
name|taskTrackerManager
parameter_list|,
name|String
name|user
parameter_list|,
name|JobTracker
name|jt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|id
argument_list|,
name|jobConf
argument_list|,
name|taskTrackerManager
argument_list|,
name|user
argument_list|,
name|jt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initTasks ()
specifier|public
specifier|synchronized
name|void
name|initTasks
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed Initalization"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|fail ()
specifier|synchronized
name|void
name|fail
parameter_list|()
block|{
name|this
operator|.
name|status
operator|.
name|setRunState
argument_list|(
name|JobStatus
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FakeTaskInProgress
specifier|static
class|class
name|FakeTaskInProgress
extends|extends
name|TaskInProgress
block|{
DECL|field|isMap
specifier|private
name|boolean
name|isMap
decl_stmt|;
DECL|field|fakeJob
specifier|private
name|FakeJobInProgress
name|fakeJob
decl_stmt|;
DECL|field|activeTasks
specifier|private
name|TreeMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|String
argument_list|>
name|activeTasks
decl_stmt|;
DECL|field|taskStatus
specifier|private
name|TaskStatus
name|taskStatus
decl_stmt|;
DECL|field|hasSpeculativeMap
name|boolean
name|hasSpeculativeMap
decl_stmt|;
DECL|field|hasSpeculativeReduce
name|boolean
name|hasSpeculativeReduce
decl_stmt|;
DECL|method|FakeTaskInProgress ( JobID jId, JobConf jobConf, Task t, boolean isMap, FakeJobInProgress job, JobSplit.TaskSplitMetaInfo split)
name|FakeTaskInProgress
parameter_list|(
name|JobID
name|jId
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|Task
name|t
parameter_list|,
name|boolean
name|isMap
parameter_list|,
name|FakeJobInProgress
name|job
parameter_list|,
name|JobSplit
operator|.
name|TaskSplitMetaInfo
name|split
parameter_list|)
block|{
name|super
argument_list|(
name|jId
argument_list|,
literal|""
argument_list|,
name|split
argument_list|,
literal|null
argument_list|,
name|jobConf
argument_list|,
name|job
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|isMap
operator|=
name|isMap
expr_stmt|;
name|this
operator|.
name|fakeJob
operator|=
name|job
expr_stmt|;
name|activeTasks
operator|=
operator|new
name|TreeMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|activeTasks
operator|.
name|put
argument_list|(
name|t
operator|.
name|getTaskID
argument_list|()
argument_list|,
literal|"tt"
argument_list|)
expr_stmt|;
comment|// create a fake status for a task that is running for a bit
name|this
operator|.
name|taskStatus
operator|=
name|TaskStatus
operator|.
name|createTaskStatus
argument_list|(
name|isMap
argument_list|)
expr_stmt|;
name|taskStatus
operator|.
name|setProgress
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|taskStatus
operator|.
name|setRunState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobConf
operator|.
name|getMapSpeculativeExecution
argument_list|()
condition|)
block|{
comment|//resetting of the hasSpeculativeMap is done
comment|//when speculative map is scheduled by the job.
name|hasSpeculativeMap
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|jobConf
operator|.
name|getReduceSpeculativeExecution
argument_list|()
condition|)
block|{
comment|//resetting of the hasSpeculativeReduce is done
comment|//when speculative reduce is scheduled by the job.
name|hasSpeculativeReduce
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getActiveTasks ()
name|TreeMap
argument_list|<
name|TaskAttemptID
argument_list|,
name|String
argument_list|>
name|getActiveTasks
parameter_list|()
block|{
return|return
name|activeTasks
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskStatus (TaskAttemptID taskid)
specifier|public
name|TaskStatus
name|getTaskStatus
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|)
block|{
comment|// return a status for a task that has run a bit
return|return
name|taskStatus
return|;
block|}
annotation|@
name|Override
DECL|method|killTask (TaskAttemptID taskId, boolean shouldFail)
name|boolean
name|killTask
parameter_list|(
name|TaskAttemptID
name|taskId
parameter_list|,
name|boolean
name|shouldFail
parameter_list|)
block|{
if|if
condition|(
name|isMap
condition|)
block|{
name|fakeJob
operator|.
name|mapTaskFinished
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fakeJob
operator|.
name|reduceTaskFinished
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
comment|/*       *hasSpeculativeMap and hasSpeculativeReduce is reset by FakeJobInProgress       *after the speculative tip has been scheduled.       */
DECL|method|canBeSpeculated (long currentTime)
name|boolean
name|canBeSpeculated
parameter_list|(
name|long
name|currentTime
parameter_list|)
block|{
if|if
condition|(
name|isMap
operator|&&
name|hasSpeculativeMap
condition|)
block|{
return|return
name|fakeJob
operator|.
name|getJobConf
argument_list|()
operator|.
name|getMapSpeculativeExecution
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|isMap
operator|&&
name|hasSpeculativeReduce
condition|)
block|{
return|return
name|fakeJob
operator|.
name|getJobConf
argument_list|()
operator|.
name|getReduceSpeculativeExecution
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isRunning ()
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
operator|!
name|activeTasks
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
DECL|class|FakeQueueManager
specifier|static
class|class
name|FakeQueueManager
extends|extends
name|QueueManager
block|{
DECL|field|queueNames
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|queueNames
init|=
literal|null
decl_stmt|;
DECL|field|allEnabledAcl
specifier|private
specifier|static
specifier|final
name|AccessControlList
name|allEnabledAcl
init|=
operator|new
name|AccessControlList
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
DECL|method|FakeQueueManager (Configuration conf)
name|FakeQueueManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|setQueues (Set<String> queueNames)
name|void
name|setQueues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queueNames
parameter_list|)
block|{
name|this
operator|.
name|queueNames
operator|=
name|queueNames
expr_stmt|;
comment|// sync up queues with the parent class.
name|Queue
index|[]
name|queues
init|=
operator|new
name|Queue
index|[
name|queueNames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|queueName
range|:
name|queueNames
control|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|AccessControlList
argument_list|>
name|aclsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueACL
name|qAcl
range|:
name|QueueACL
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|toFullPropertyName
argument_list|(
name|queueName
argument_list|,
name|qAcl
operator|.
name|getAclName
argument_list|()
argument_list|)
decl_stmt|;
name|aclsMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|allEnabledAcl
argument_list|)
expr_stmt|;
block|}
name|queues
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|Queue
argument_list|(
name|queueName
argument_list|,
name|aclsMap
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
block|}
DECL|method|getLeafQueueNames ()
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|getLeafQueueNames
parameter_list|()
block|{
return|return
name|queueNames
return|;
block|}
block|}
DECL|class|FakeTaskTrackerManager
specifier|static
class|class
name|FakeTaskTrackerManager
implements|implements
name|TaskTrackerManager
block|{
DECL|field|maps
name|int
name|maps
init|=
literal|0
decl_stmt|;
DECL|field|reduces
name|int
name|reduces
init|=
literal|0
decl_stmt|;
DECL|field|maxMapTasksPerTracker
name|int
name|maxMapTasksPerTracker
init|=
literal|2
decl_stmt|;
DECL|field|maxReduceTasksPerTracker
name|int
name|maxReduceTasksPerTracker
init|=
literal|1
decl_stmt|;
DECL|field|ttExpiryInterval
name|long
name|ttExpiryInterval
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
comment|// default interval
DECL|field|listeners
name|List
argument_list|<
name|JobInProgressListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|JobInProgressListener
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|qm
name|QueueManager
name|qm
init|=
literal|null
decl_stmt|;
DECL|field|trackers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TaskTracker
argument_list|>
name|trackers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TaskTracker
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|taskStatuses
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TaskStatus
argument_list|>
name|taskStatuses
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TaskStatus
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobs
specifier|private
name|Map
argument_list|<
name|JobID
argument_list|,
name|JobInProgress
argument_list|>
name|jobs
init|=
operator|new
name|HashMap
argument_list|<
name|JobID
argument_list|,
name|JobInProgress
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|defaultJobConf
specifier|protected
name|JobConf
name|defaultJobConf
decl_stmt|;
DECL|field|jobCounter
specifier|private
name|int
name|jobCounter
init|=
literal|0
decl_stmt|;
DECL|method|FakeTaskTrackerManager ()
specifier|public
name|FakeTaskTrackerManager
parameter_list|()
block|{
name|this
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeTaskTrackerManager ( int numTaskTrackers, int maxMapTasksPerTracker, int maxReduceTasksPerTracker)
specifier|public
name|FakeTaskTrackerManager
parameter_list|(
name|int
name|numTaskTrackers
parameter_list|,
name|int
name|maxMapTasksPerTracker
parameter_list|,
name|int
name|maxReduceTasksPerTracker
parameter_list|)
block|{
name|Configuration
name|cfn
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|cfn
operator|.
name|set
argument_list|(
literal|"mapred.queue.names"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|qm
operator|=
operator|new
name|FakeQueueManager
argument_list|(
name|cfn
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxMapTasksPerTracker
operator|=
name|maxMapTasksPerTracker
expr_stmt|;
name|this
operator|.
name|maxReduceTasksPerTracker
operator|=
name|maxReduceTasksPerTracker
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numTaskTrackers
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|String
name|ttName
init|=
literal|"tt"
operator|+
name|i
decl_stmt|;
name|TaskTracker
name|tt
init|=
operator|new
name|TaskTracker
argument_list|(
name|ttName
argument_list|)
decl_stmt|;
name|tt
operator|.
name|setStatus
argument_list|(
operator|new
name|TaskTrackerStatus
argument_list|(
name|ttName
argument_list|,
name|ttName
operator|+
literal|".host"
argument_list|,
name|i
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxMapTasksPerTracker
argument_list|,
name|maxReduceTasksPerTracker
argument_list|)
argument_list|)
expr_stmt|;
name|trackers
operator|.
name|put
argument_list|(
name|ttName
argument_list|,
name|tt
argument_list|)
expr_stmt|;
block|}
name|defaultJobConf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|defaultJobConf
operator|.
name|set
argument_list|(
literal|"mapred.queue.names"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
comment|//by default disable speculative execution.
name|defaultJobConf
operator|.
name|setMapSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|defaultJobConf
operator|.
name|setReduceSpeculativeExecution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|addTaskTracker (String ttName)
specifier|public
name|void
name|addTaskTracker
parameter_list|(
name|String
name|ttName
parameter_list|)
block|{
name|TaskTracker
name|tt
init|=
operator|new
name|TaskTracker
argument_list|(
name|ttName
argument_list|)
decl_stmt|;
name|tt
operator|.
name|setStatus
argument_list|(
operator|new
name|TaskTrackerStatus
argument_list|(
name|ttName
argument_list|,
name|ttName
operator|+
literal|".host"
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|TaskStatus
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxMapTasksPerTracker
argument_list|,
name|maxReduceTasksPerTracker
argument_list|)
argument_list|)
expr_stmt|;
name|trackers
operator|.
name|put
argument_list|(
name|ttName
argument_list|,
name|tt
argument_list|)
expr_stmt|;
block|}
DECL|method|getClusterStatus ()
specifier|public
name|ClusterStatus
name|getClusterStatus
parameter_list|()
block|{
name|int
name|numTrackers
init|=
name|trackers
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
operator|new
name|ClusterStatus
argument_list|(
name|numTrackers
argument_list|,
literal|0
argument_list|,
name|ttExpiryInterval
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|,
name|numTrackers
operator|*
name|maxMapTasksPerTracker
argument_list|,
name|numTrackers
operator|*
name|maxReduceTasksPerTracker
argument_list|,
name|JobTrackerStatus
operator|.
name|RUNNING
argument_list|)
return|;
block|}
DECL|method|getNumberOfUniqueHosts ()
specifier|public
name|int
name|getNumberOfUniqueHosts
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|getNextHeartbeatInterval ()
specifier|public
name|int
name|getNextHeartbeatInterval
parameter_list|()
block|{
return|return
name|JTConfig
operator|.
name|JT_HEARTBEAT_INTERVAL_MIN_DEFAULT
return|;
block|}
comment|/**      * Kill Job, and all its tasks on the corresponding TaskTrackers.      */
annotation|@
name|Override
DECL|method|killJob (JobID jobid)
specifier|public
name|void
name|killJob
parameter_list|(
name|JobID
name|jobid
parameter_list|)
throws|throws
name|IOException
block|{
name|killJob
argument_list|(
name|jobid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Kill the job, and kill the tasks on the corresponding TaskTrackers only      * if killTasks is true.      *       * @param jobid      * @throws IOException      */
DECL|method|killJob (JobID jobid, boolean killTasks)
name|void
name|killJob
parameter_list|(
name|JobID
name|jobid
parameter_list|,
name|boolean
name|killTasks
parameter_list|)
throws|throws
name|IOException
block|{
name|JobInProgress
name|job
init|=
name|jobs
operator|.
name|get
argument_list|(
name|jobid
argument_list|)
decl_stmt|;
comment|// Finish all the tasks for this job
if|if
condition|(
name|job
operator|instanceof
name|FakeJobInProgress
operator|&&
name|killTasks
condition|)
block|{
name|FakeJobInProgress
name|fJob
init|=
operator|(
name|FakeJobInProgress
operator|)
name|job
decl_stmt|;
for|for
control|(
name|String
name|tipID
range|:
name|taskStatuses
operator|.
name|keySet
argument_list|()
control|)
block|{
name|finishTask
argument_list|(
name|tipID
argument_list|,
name|fJob
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
block|}
name|finalizeJob
argument_list|(
name|job
argument_list|,
name|JobStatus
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|job
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
DECL|method|initJob (JobInProgress jip)
specifier|public
name|void
name|initJob
parameter_list|(
name|JobInProgress
name|jip
parameter_list|)
block|{
try|try
block|{
name|JobStatus
name|oldStatus
init|=
operator|(
name|JobStatus
operator|)
name|jip
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|jip
operator|.
name|initTasks
argument_list|()
expr_stmt|;
if|if
condition|(
name|jip
operator|.
name|isJobEmpty
argument_list|()
condition|)
block|{
name|completeEmptyJob
argument_list|(
name|jip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|jip
operator|.
name|isSetupCleanupRequired
argument_list|()
condition|)
block|{
name|jip
operator|.
name|completeSetup
argument_list|()
expr_stmt|;
block|}
name|JobStatus
name|newStatus
init|=
operator|(
name|JobStatus
operator|)
name|jip
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|JobStatusChangeEvent
name|event
init|=
operator|new
name|JobStatusChangeEvent
argument_list|(
name|jip
argument_list|,
name|JobStatusChangeEvent
operator|.
name|EventType
operator|.
name|RUN_STATE_CHANGED
argument_list|,
name|oldStatus
argument_list|,
name|newStatus
argument_list|)
decl_stmt|;
for|for
control|(
name|JobInProgressListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|jobUpdated
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
name|failJob
argument_list|(
name|jip
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|completeEmptyJob (JobInProgress jip)
specifier|private
specifier|synchronized
name|void
name|completeEmptyJob
parameter_list|(
name|JobInProgress
name|jip
parameter_list|)
block|{
name|jip
operator|.
name|completeEmptyJob
argument_list|()
expr_stmt|;
block|}
DECL|method|failJob (JobInProgress jip)
specifier|public
specifier|synchronized
name|void
name|failJob
parameter_list|(
name|JobInProgress
name|jip
parameter_list|)
block|{
name|JobStatus
name|oldStatus
init|=
operator|(
name|JobStatus
operator|)
name|jip
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|jip
operator|.
name|fail
argument_list|()
expr_stmt|;
name|JobStatus
name|newStatus
init|=
operator|(
name|JobStatus
operator|)
name|jip
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|JobStatusChangeEvent
name|event
init|=
operator|new
name|JobStatusChangeEvent
argument_list|(
name|jip
argument_list|,
name|JobStatusChangeEvent
operator|.
name|EventType
operator|.
name|RUN_STATE_CHANGED
argument_list|,
name|oldStatus
argument_list|,
name|newStatus
argument_list|)
decl_stmt|;
for|for
control|(
name|JobInProgressListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|jobUpdated
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|retireJob (JobID jobid)
specifier|public
name|void
name|retireJob
parameter_list|(
name|JobID
name|jobid
parameter_list|)
block|{
name|jobs
operator|.
name|remove
argument_list|(
name|jobid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getJob (JobID jobid)
specifier|public
name|JobInProgress
name|getJob
parameter_list|(
name|JobID
name|jobid
parameter_list|)
block|{
return|return
name|jobs
operator|.
name|get
argument_list|(
name|jobid
argument_list|)
return|;
block|}
DECL|method|getJobs ()
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|getJobs
parameter_list|()
block|{
return|return
name|jobs
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|taskTrackers ()
specifier|public
name|Collection
argument_list|<
name|TaskTrackerStatus
argument_list|>
name|taskTrackers
parameter_list|()
block|{
name|List
argument_list|<
name|TaskTrackerStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskTrackerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskTracker
name|tt
range|:
name|trackers
operator|.
name|values
argument_list|()
control|)
block|{
name|statuses
operator|.
name|add
argument_list|(
name|tt
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
return|;
block|}
DECL|method|addJobInProgressListener (JobInProgressListener listener)
specifier|public
name|void
name|addJobInProgressListener
parameter_list|(
name|JobInProgressListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeJobInProgressListener (JobInProgressListener listener)
specifier|public
name|void
name|removeJobInProgressListener
parameter_list|(
name|JobInProgressListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|submitJob (JobInProgress job)
specifier|public
name|void
name|submitJob
parameter_list|(
name|JobInProgress
name|job
parameter_list|)
throws|throws
name|IOException
block|{
name|jobs
operator|.
name|put
argument_list|(
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|job
argument_list|)
expr_stmt|;
for|for
control|(
name|JobInProgressListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|jobAdded
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|submitJob (int state, JobConf jobConf)
name|FakeJobInProgress
name|submitJob
parameter_list|(
name|int
name|state
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|FakeJobInProgress
name|job
init|=
operator|new
name|FakeJobInProgress
argument_list|(
operator|new
name|JobID
argument_list|(
literal|"test"
argument_list|,
operator|++
name|jobCounter
argument_list|)
argument_list|,
operator|(
name|jobConf
operator|==
literal|null
condition|?
operator|new
name|JobConf
argument_list|(
name|defaultJobConf
argument_list|)
else|:
name|jobConf
operator|)
argument_list|,
name|this
argument_list|,
name|jobConf
operator|.
name|getUser
argument_list|()
argument_list|,
name|UtilsForTests
operator|.
name|getJobTracker
argument_list|()
argument_list|)
decl_stmt|;
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|setRunState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|this
operator|.
name|submitJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
DECL|method|submitJobAndInit (int state, JobConf jobConf)
name|FakeJobInProgress
name|submitJobAndInit
parameter_list|(
name|int
name|state
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|FakeJobInProgress
name|j
init|=
name|submitJob
argument_list|(
name|state
argument_list|,
name|jobConf
argument_list|)
decl_stmt|;
name|this
operator|.
name|initJob
argument_list|(
name|j
argument_list|)
expr_stmt|;
return|return
name|j
return|;
block|}
DECL|method|submitJob (int state, int maps, int reduces, String queue, String user)
name|FakeJobInProgress
name|submitJob
parameter_list|(
name|int
name|state
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|defaultJobConf
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|setNumMapTasks
argument_list|(
name|maps
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|setNumReduceTasks
argument_list|(
name|reduces
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|jobConf
operator|.
name|setQueueName
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
name|jobConf
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
return|return
name|submitJob
argument_list|(
name|state
argument_list|,
name|jobConf
argument_list|)
return|;
block|}
comment|// Submit a job and update the listeners
DECL|method|submitJobAndInit (int state, int maps, int reduces, String queue, String user)
name|FakeJobInProgress
name|submitJobAndInit
parameter_list|(
name|int
name|state
parameter_list|,
name|int
name|maps
parameter_list|,
name|int
name|reduces
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|FakeJobInProgress
name|j
init|=
name|submitJob
argument_list|(
name|state
argument_list|,
name|maps
argument_list|,
name|reduces
argument_list|,
name|queue
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|this
operator|.
name|initJob
argument_list|(
name|j
argument_list|)
expr_stmt|;
return|return
name|j
return|;
block|}
DECL|method|submitJobs ( int numberOfUsers, int numberOfJobsPerUser, String queue)
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
argument_list|>
name|submitJobs
parameter_list|(
name|int
name|numberOfUsers
parameter_list|,
name|int
name|numberOfJobsPerUser
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
argument_list|>
name|userJobs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numberOfUsers
condition|;
name|i
operator|++
control|)
block|{
name|String
name|user
init|=
name|String
operator|.
name|valueOf
argument_list|(
literal|"u"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
name|jips
init|=
operator|new
name|ArrayList
argument_list|<
name|FakeJobInProgress
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|numberOfJobsPerUser
condition|;
name|j
operator|++
control|)
block|{
name|jips
operator|.
name|add
argument_list|(
name|this
operator|.
name|submitJob
argument_list|(
name|JobStatus
operator|.
name|PREP
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|queue
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|userJobs
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|jips
argument_list|)
expr_stmt|;
block|}
return|return
name|userJobs
return|;
block|}
DECL|method|getTaskTracker (String trackerID)
specifier|public
name|TaskTracker
name|getTaskTracker
parameter_list|(
name|String
name|trackerID
parameter_list|)
block|{
return|return
name|trackers
operator|.
name|get
argument_list|(
name|trackerID
argument_list|)
return|;
block|}
DECL|method|startTask (String taskTrackerName, final Task t)
specifier|public
name|void
name|startTask
parameter_list|(
name|String
name|taskTrackerName
parameter_list|,
specifier|final
name|Task
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|isMapTask
argument_list|()
condition|)
block|{
name|maps
operator|++
expr_stmt|;
block|}
else|else
block|{
name|reduces
operator|++
expr_stmt|;
block|}
name|TaskStatus
name|status
init|=
operator|new
name|TaskStatus
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TaskAttemptID
name|getTaskID
parameter_list|()
block|{
return|return
name|t
operator|.
name|getTaskID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getIsMap
parameter_list|()
block|{
return|return
name|t
operator|.
name|isMapTask
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumSlots
parameter_list|()
block|{
return|return
name|t
operator|.
name|getNumSlotsRequired
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addFetchFailedMap
parameter_list|(
name|TaskAttemptID
name|mapTaskId
parameter_list|)
block|{                    }
block|}
decl_stmt|;
name|taskStatuses
operator|.
name|put
argument_list|(
name|t
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|status
operator|.
name|setRunState
argument_list|(
name|TaskStatus
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|trackers
operator|.
name|get
argument_list|(
name|taskTrackerName
argument_list|)
operator|.
name|getStatus
argument_list|()
operator|.
name|getTaskReports
argument_list|()
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|finishTask ( String tipId, FakeJobInProgress j)
specifier|public
name|void
name|finishTask
parameter_list|(
name|String
name|tipId
parameter_list|,
name|FakeJobInProgress
name|j
parameter_list|)
block|{
name|finishTask
argument_list|(
name|tipId
argument_list|,
name|j
argument_list|,
name|TaskStatus
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
DECL|method|finishTask (String tipId, FakeJobInProgress j, TaskStatus.State taskState)
specifier|public
name|void
name|finishTask
parameter_list|(
name|String
name|tipId
parameter_list|,
name|FakeJobInProgress
name|j
parameter_list|,
name|TaskStatus
operator|.
name|State
name|taskState
parameter_list|)
block|{
name|TaskStatus
name|status
init|=
name|taskStatuses
operator|.
name|get
argument_list|(
name|tipId
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getIsMap
argument_list|()
condition|)
block|{
name|maps
operator|--
expr_stmt|;
name|j
operator|.
name|mapTaskFinished
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|reduces
operator|--
expr_stmt|;
name|j
operator|.
name|reduceTaskFinished
argument_list|()
expr_stmt|;
block|}
name|status
operator|.
name|setRunState
argument_list|(
name|taskState
argument_list|)
expr_stmt|;
block|}
DECL|method|finalizeJob (FakeJobInProgress fjob)
name|void
name|finalizeJob
parameter_list|(
name|FakeJobInProgress
name|fjob
parameter_list|)
block|{
name|finalizeJob
argument_list|(
name|fjob
argument_list|,
name|JobStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
block|}
DECL|method|finalizeJob (JobInProgress fjob, int state)
name|void
name|finalizeJob
parameter_list|(
name|JobInProgress
name|fjob
parameter_list|,
name|int
name|state
parameter_list|)
block|{
comment|// take a snapshot of the status before changing it
name|JobStatus
name|oldStatus
init|=
operator|(
name|JobStatus
operator|)
name|fjob
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|fjob
operator|.
name|getStatus
argument_list|()
operator|.
name|setRunState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|JobStatus
name|newStatus
init|=
operator|(
name|JobStatus
operator|)
name|fjob
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|JobStatusChangeEvent
name|event
init|=
operator|new
name|JobStatusChangeEvent
argument_list|(
name|fjob
argument_list|,
name|JobStatusChangeEvent
operator|.
name|EventType
operator|.
name|RUN_STATE_CHANGED
argument_list|,
name|oldStatus
argument_list|,
name|newStatus
argument_list|)
decl_stmt|;
for|for
control|(
name|JobInProgressListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|jobUpdated
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setPriority (FakeJobInProgress fjob, JobPriority priority)
specifier|public
name|void
name|setPriority
parameter_list|(
name|FakeJobInProgress
name|fjob
parameter_list|,
name|JobPriority
name|priority
parameter_list|)
block|{
comment|// take a snapshot of the status before changing it
name|JobStatus
name|oldStatus
init|=
operator|(
name|JobStatus
operator|)
name|fjob
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|fjob
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|JobStatus
name|newStatus
init|=
operator|(
name|JobStatus
operator|)
name|fjob
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|JobStatusChangeEvent
name|event
init|=
operator|new
name|JobStatusChangeEvent
argument_list|(
name|fjob
argument_list|,
name|JobStatusChangeEvent
operator|.
name|EventType
operator|.
name|PRIORITY_CHANGED
argument_list|,
name|oldStatus
argument_list|,
name|newStatus
argument_list|)
decl_stmt|;
for|for
control|(
name|JobInProgressListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|jobUpdated
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setStartTime (FakeJobInProgress fjob, long start)
specifier|public
name|void
name|setStartTime
parameter_list|(
name|FakeJobInProgress
name|fjob
parameter_list|,
name|long
name|start
parameter_list|)
block|{
comment|// take a snapshot of the status before changing it
name|JobStatus
name|oldStatus
init|=
operator|(
name|JobStatus
operator|)
name|fjob
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|fjob
operator|.
name|startTime
operator|=
name|start
expr_stmt|;
comment|// change the start time of the job
name|fjob
operator|.
name|status
operator|.
name|setStartTime
argument_list|(
name|start
argument_list|)
expr_stmt|;
comment|// change the start time of the jobstatus
name|JobStatus
name|newStatus
init|=
operator|(
name|JobStatus
operator|)
name|fjob
operator|.
name|getStatus
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|JobStatusChangeEvent
name|event
init|=
operator|new
name|JobStatusChangeEvent
argument_list|(
name|fjob
argument_list|,
name|JobStatusChangeEvent
operator|.
name|EventType
operator|.
name|START_TIME_CHANGED
argument_list|,
name|oldStatus
argument_list|,
name|newStatus
argument_list|)
decl_stmt|;
for|for
control|(
name|JobInProgressListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|jobUpdated
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addQueues (String[] arr)
name|void
name|addQueues
parameter_list|(
name|String
index|[]
name|arr
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|arr
control|)
block|{
name|queues
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|FakeQueueManager
operator|)
name|qm
operator|)
operator|.
name|setQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
block|}
DECL|method|setFakeQueues (List<CapacityTestUtils.FakeQueueInfo> queues)
name|void
name|setFakeQueues
parameter_list|(
name|List
argument_list|<
name|CapacityTestUtils
operator|.
name|FakeQueueInfo
argument_list|>
name|queues
parameter_list|)
block|{
for|for
control|(
name|CapacityTestUtils
operator|.
name|FakeQueueInfo
name|q
range|:
name|queues
control|)
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|q
operator|.
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|MAX_CAPACITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|q
operator|.
name|maxCapacity
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|SUPPORTS_PRIORITY_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|q
operator|.
name|supportsPrio
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|CapacitySchedulerConf
operator|.
name|MINIMUM_USER_LIMIT_PERCENT_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|q
operator|.
name|ulMin
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|FakeQueueManager
operator|)
name|qm
operator|)
operator|.
name|getQueue
argument_list|(
name|q
operator|.
name|queueName
argument_list|)
operator|.
name|setProperties
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setQueueManager (QueueManager qManager)
name|void
name|setQueueManager
parameter_list|(
name|QueueManager
name|qManager
parameter_list|)
block|{
name|this
operator|.
name|qm
operator|=
name|qManager
expr_stmt|;
block|}
DECL|method|getQueueManager ()
specifier|public
name|QueueManager
name|getQueueManager
parameter_list|()
block|{
return|return
name|qm
return|;
block|}
annotation|@
name|Override
DECL|method|killTask (TaskAttemptID taskid, boolean shouldFail)
specifier|public
name|boolean
name|killTask
parameter_list|(
name|TaskAttemptID
name|taskid
parameter_list|,
name|boolean
name|shouldFail
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|method|getNextJobID ()
specifier|public
name|JobID
name|getNextJobID
parameter_list|()
block|{
return|return
operator|new
name|JobID
argument_list|(
literal|"test"
argument_list|,
operator|++
name|jobCounter
argument_list|)
return|;
block|}
block|}
comment|// represents a fake queue configuration info
DECL|class|FakeQueueInfo
specifier|static
class|class
name|FakeQueueInfo
block|{
DECL|field|queueName
name|String
name|queueName
decl_stmt|;
DECL|field|capacity
name|float
name|capacity
decl_stmt|;
DECL|field|maxCapacity
name|float
name|maxCapacity
init|=
operator|-
literal|1.0f
decl_stmt|;
DECL|field|supportsPrio
name|boolean
name|supportsPrio
decl_stmt|;
DECL|field|ulMin
name|int
name|ulMin
decl_stmt|;
DECL|method|FakeQueueInfo ( String queueName, float capacity, boolean supportsPrio, int ulMin)
specifier|public
name|FakeQueueInfo
parameter_list|(
name|String
name|queueName
parameter_list|,
name|float
name|capacity
parameter_list|,
name|boolean
name|supportsPrio
parameter_list|,
name|int
name|ulMin
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|supportsPrio
operator|=
name|supportsPrio
expr_stmt|;
name|this
operator|.
name|ulMin
operator|=
name|ulMin
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

