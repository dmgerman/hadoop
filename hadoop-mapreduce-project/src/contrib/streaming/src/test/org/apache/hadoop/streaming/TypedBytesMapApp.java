begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|typedbytes
operator|.
name|TypedBytesInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|typedbytes
operator|.
name|TypedBytesOutput
import|;
end_import

begin_class
DECL|class|TypedBytesMapApp
specifier|public
class|class
name|TypedBytesMapApp
block|{
DECL|field|find
specifier|private
name|String
name|find
decl_stmt|;
DECL|method|TypedBytesMapApp (String find)
specifier|public
name|TypedBytesMapApp
parameter_list|(
name|String
name|find
parameter_list|)
block|{
name|this
operator|.
name|find
operator|=
name|find
expr_stmt|;
block|}
DECL|method|go ()
specifier|public
name|void
name|go
parameter_list|()
throws|throws
name|IOException
block|{
name|TypedBytesInput
name|tbinput
init|=
operator|new
name|TypedBytesInput
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|TypedBytesOutput
name|tboutput
init|=
operator|new
name|TypedBytesOutput
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|tbinput
operator|.
name|readRaw
argument_list|()
decl_stmt|;
while|while
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|tbinput
operator|.
name|read
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|value
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
name|find
argument_list|)
control|)
block|{
name|tboutput
operator|.
name|write
argument_list|(
name|part
argument_list|)
expr_stmt|;
comment|// write key
name|tboutput
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// write value
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"reporter:counter:UserCounters,InputLines,1"
argument_list|)
expr_stmt|;
name|key
operator|=
name|tbinput
operator|.
name|readRaw
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|TypedBytesMapApp
name|app
init|=
operator|new
name|TypedBytesMapApp
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"\\."
argument_list|)
argument_list|)
decl_stmt|;
name|app
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

