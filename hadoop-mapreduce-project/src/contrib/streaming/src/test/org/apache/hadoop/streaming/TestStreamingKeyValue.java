begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_comment
comment|/**  * This class tests hadoopStreaming in MapReduce local mode.  * This testcase looks at different cases of tab position in input.   */
end_comment

begin_class
DECL|class|TestStreamingKeyValue
specifier|public
class|class
name|TestStreamingKeyValue
block|{
DECL|field|INPUT_FILE
specifier|protected
name|File
name|INPUT_FILE
init|=
operator|new
name|File
argument_list|(
literal|"input.txt"
argument_list|)
decl_stmt|;
DECL|field|OUTPUT_DIR
specifier|protected
name|File
name|OUTPUT_DIR
init|=
operator|new
name|File
argument_list|(
literal|"stream_out"
argument_list|)
decl_stmt|;
comment|// First line of input has 'key' 'tab' 'value'
comment|// Second line of input starts with a tab character.
comment|// So, it has empty key and the whole line as value.
comment|// Third line of input does not have any tab character.
comment|// So, the whole line is the key and value is empty.
DECL|field|input
specifier|protected
name|String
name|input
init|=
literal|"roses are \tred\t\n\tviolets are blue\nbunnies are pink\n"
operator|+
literal|"this is for testing a big\tinput line\n"
operator|+
literal|"small input\n"
decl_stmt|;
DECL|field|outputWithoutKey
specifier|protected
name|String
name|outputWithoutKey
init|=
literal|"\tviolets are blue\nbunnies are pink\t\n"
operator|+
literal|"roses are \tred\t\n"
operator|+
literal|"small input\t\n"
operator|+
literal|"this is for testing a big\tinput line\n"
decl_stmt|;
DECL|field|outputWithKey
specifier|protected
name|String
name|outputWithKey
init|=
literal|"0\troses are \tred\t\n"
operator|+
literal|"16\t\tviolets are blue\n"
operator|+
literal|"34\tbunnies are pink\n"
operator|+
literal|"51\tthis is for testing a big\tinput line\n"
operator|+
literal|"88\tsmall input\n"
decl_stmt|;
DECL|field|job
specifier|private
name|StreamJob
name|job
decl_stmt|;
DECL|method|TestStreamingKeyValue ()
specifier|public
name|TestStreamingKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
name|UtilTest
name|utilTest
init|=
operator|new
name|UtilTest
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|utilTest
operator|.
name|checkUserDir
argument_list|()
expr_stmt|;
name|utilTest
operator|.
name|redirectIfAntJunit
argument_list|()
expr_stmt|;
block|}
DECL|method|createInput ()
specifier|protected
name|void
name|createInput
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|INPUT_FILE
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|genArgs (boolean ignoreKey)
specifier|protected
name|String
index|[]
name|genArgs
parameter_list|(
name|boolean
name|ignoreKey
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"-input"
block|,
name|INPUT_FILE
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-output"
block|,
name|OUTPUT_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-mapper"
block|,
literal|"cat"
block|,
literal|"-jobconf"
block|,
name|MRJobConfig
operator|.
name|PRESERVE_FAILED_TASK_FILES
operator|+
literal|"=true"
block|,
literal|"-jobconf"
block|,
literal|"stream.non.zero.exit.is.failure=true"
block|,
literal|"-jobconf"
block|,
literal|"stream.tmpdir="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
block|,
literal|"-jobconf"
block|,
literal|"stream.map.input.ignoreKey="
operator|+
name|ignoreKey
block|,           }
return|;
block|}
DECL|method|runStreamJob (final String outputExpect, boolean ignoreKey)
specifier|public
name|void
name|runStreamJob
parameter_list|(
specifier|final
name|String
name|outputExpect
parameter_list|,
name|boolean
name|ignoreKey
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|outFileName
init|=
literal|"part-00000"
decl_stmt|;
name|File
name|outFile
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|OUTPUT_DIR
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
name|createInput
argument_list|()
expr_stmt|;
name|boolean
name|mayExit
init|=
literal|false
decl_stmt|;
comment|// During tests, the default Configuration will use a local mapred
comment|// So don't specify -config or -cluster
name|job
operator|=
operator|new
name|StreamJob
argument_list|(
name|genArgs
argument_list|(
name|ignoreKey
argument_list|)
argument_list|,
name|mayExit
argument_list|)
expr_stmt|;
name|job
operator|.
name|go
argument_list|()
expr_stmt|;
name|outFile
operator|=
operator|new
name|File
argument_list|(
name|OUTPUT_DIR
argument_list|,
name|outFileName
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|String
name|output
init|=
name|StreamUtil
operator|.
name|slurp
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"outEx1="
operator|+
name|outputExpect
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  out1="
operator|+
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outputExpect
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|INPUT_FILE
operator|.
name|delete
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|OUTPUT_DIR
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Run the job with the indicating the input format key should be emitted.     */
annotation|@
name|Test
DECL|method|testCommandLineWithKey ()
specifier|public
name|void
name|testCommandLineWithKey
parameter_list|()
throws|throws
name|Exception
block|{
name|runStreamJob
argument_list|(
name|outputWithKey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Run the job the default way (the input format key is not emitted).    */
annotation|@
name|Test
DECL|method|testCommandLineWithoutKey ()
specifier|public
name|void
name|testCommandLineWithoutKey
parameter_list|()
throws|throws
name|Exception
block|{
name|runStreamJob
argument_list|(
name|outputWithoutKey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[]args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TestStreamingKeyValue
argument_list|()
operator|.
name|testCommandLineWithKey
argument_list|()
expr_stmt|;
operator|new
name|TestStreamingKeyValue
argument_list|()
operator|.
name|testCommandLineWithoutKey
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

