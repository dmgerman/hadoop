begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_comment
comment|/**  * An {@link InputFormat} that tries to deduce the types of the input files  * automatically. It can currently handle text and sequence files.  */
end_comment

begin_class
DECL|class|AutoInputFormat
specifier|public
class|class
name|AutoInputFormat
extends|extends
name|FileInputFormat
block|{
DECL|field|textInputFormat
specifier|private
name|TextInputFormat
name|textInputFormat
init|=
operator|new
name|TextInputFormat
argument_list|()
decl_stmt|;
DECL|field|seqFileInputFormat
specifier|private
name|SequenceFileInputFormat
name|seqFileInputFormat
init|=
operator|new
name|SequenceFileInputFormat
argument_list|()
decl_stmt|;
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|textInputFormat
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|// SequenceFileInputFormat has no configure() method
block|}
DECL|method|getRecordReader (InputSplit split, JobConf job, Reporter reporter)
specifier|public
name|RecordReader
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSplit
name|fileSplit
init|=
operator|(
name|FileSplit
operator|)
name|split
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|fileSplit
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|,
name|job
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|fileSplit
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|RecordReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|.
name|readFully
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
name|reader
operator|=
name|textInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|header
index|[
literal|0
index|]
operator|==
literal|'S'
operator|&&
name|header
index|[
literal|1
index|]
operator|==
literal|'E'
operator|&&
name|header
index|[
literal|2
index|]
operator|==
literal|'Q'
condition|)
block|{
name|reader
operator|=
name|seqFileInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|=
name|textInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
return|return
name|reader
return|;
block|}
block|}
end_class

end_unit

