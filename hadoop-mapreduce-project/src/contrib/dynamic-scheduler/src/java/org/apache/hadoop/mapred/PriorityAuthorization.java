begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SignatureException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_comment
comment|/**  * This class implements symmetric key HMAC/SHA1 signature  * based authorization of users and admins.  */
end_comment

begin_class
DECL|class|PriorityAuthorization
specifier|public
class|class
name|PriorityAuthorization
block|{
DECL|field|USER
specifier|public
specifier|static
specifier|final
name|int
name|USER
init|=
literal|0
decl_stmt|;
DECL|field|ADMIN
specifier|public
specifier|static
specifier|final
name|int
name|ADMIN
init|=
literal|1
decl_stmt|;
DECL|field|NO_ACCESS
specifier|public
specifier|static
specifier|final
name|int
name|NO_ACCESS
init|=
literal|2
decl_stmt|;
DECL|field|acl
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|UserACL
argument_list|>
name|acl
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|UserACL
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|lastSuccessfulReload
specifier|private
name|long
name|lastSuccessfulReload
init|=
literal|0
decl_stmt|;
DECL|field|START_TIME
specifier|public
specifier|static
specifier|final
name|long
name|START_TIME
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|field|aclFile
specifier|private
name|String
name|aclFile
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PriorityAuthorization
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|debug
specifier|private
specifier|static
specifier|final
name|boolean
name|debug
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
DECL|field|HMAC_SHA1_ALGORITHM
specifier|private
specifier|static
specifier|final
name|String
name|HMAC_SHA1_ALGORITHM
init|=
literal|"HmacSHA1"
decl_stmt|;
comment|/**    * Initializes authorization configuration    * @param conf MapReduce configuration handle     */
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|aclFile
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.priority-scheduler.acl-file"
argument_list|,
literal|"/etc/hadoop.acl"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adapted from AWS Query Authentication cookbook:    * Computes RFC 2104-compliant HMAC signature.    *    * @param data    *     The data to be signed.    * @param key    *     The signing key.    * @return    *     The base64-encoded RFC 2104-compliant HMAC signature.    * @throws    *     java.security.SignatureException when signature generation fails    */
DECL|method|hmac (String data, String key)
specifier|public
specifier|static
name|String
name|hmac
parameter_list|(
name|String
name|data
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|java
operator|.
name|security
operator|.
name|SignatureException
block|{
name|String
name|result
decl_stmt|;
try|try
block|{
comment|// get an hmac_sha1 key from the raw key bytes
name|SecretKeySpec
name|signingKey
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|HMAC_SHA1_ALGORITHM
argument_list|)
decl_stmt|;
comment|// get an hmac_sha1 Mac instance and initialize with the signing key
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
name|HMAC_SHA1_ALGORITHM
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|signingKey
argument_list|)
expr_stmt|;
comment|// compute the hmac on input data bytes
name|byte
index|[]
name|rawHmac
init|=
name|mac
operator|.
name|doFinal
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|// base64-encode the hmac
name|result
operator|=
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|rawHmac
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SignatureException
argument_list|(
literal|"Failed to generate HMAC : "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
DECL|class|UserACL
class|class
name|UserACL
block|{
DECL|field|user
name|String
name|user
decl_stmt|;
DECL|field|role
name|String
name|role
decl_stmt|;
DECL|field|key
name|String
name|key
decl_stmt|;
comment|// for replay detection
DECL|field|lastTimestamp
name|long
name|lastTimestamp
init|=
name|START_TIME
decl_stmt|;
DECL|method|UserACL (String user, String role, String key)
name|UserACL
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|role
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
block|}
DECL|method|reloadACL ()
specifier|private
name|void
name|reloadACL
parameter_list|()
block|{
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|aclFile
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|nameValue
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameValue
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
continue|continue;
block|}
name|acl
operator|.
name|put
argument_list|(
name|nameValue
index|[
literal|0
index|]
argument_list|,
operator|new
name|UserACL
argument_list|(
name|nameValue
index|[
literal|0
index|]
argument_list|,
name|nameValue
index|[
literal|1
index|]
argument_list|,
name|nameValue
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadACL ()
specifier|private
name|void
name|loadACL
parameter_list|()
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|aclFile
argument_list|)
decl_stmt|;
name|long
name|lastModified
init|=
name|file
operator|.
name|lastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastModified
operator|>
name|lastSuccessfulReload
condition|)
block|{
name|reloadACL
argument_list|()
expr_stmt|;
name|lastSuccessfulReload
operator|=
name|time
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to reload acl file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isReplay (String timestamp, String signature, UserACL userACL)
specifier|private
name|boolean
name|isReplay
parameter_list|(
name|String
name|timestamp
parameter_list|,
name|String
name|signature
parameter_list|,
name|UserACL
name|userACL
parameter_list|)
block|{
name|long
name|signatureTime
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|timestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"signaturetime: "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|signatureTime
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"lasttime: "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|userACL
operator|.
name|lastTimestamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|signatureTime
operator|<=
name|userACL
operator|.
name|lastTimestamp
condition|)
block|{
return|return
literal|true
return|;
block|}
name|userACL
operator|.
name|lastTimestamp
operator|=
name|signatureTime
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**    * Returns authorized role for user.    * Checks whether signature obtained by user was made by key stored in local acl.    * Also checks for replay attacks.    * @param data data that was signed by user    * @param signature user-provided signature    * @param user-provided nonce/timestamp of signature     * @return the authorized role of the user:    *   ADMIN, USER or NO_ACCESS    */
DECL|method|authorize (String data, String signature, String user, String timestamp)
specifier|public
name|int
name|authorize
parameter_list|(
name|String
name|data
parameter_list|,
name|String
name|signature
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|timestamp
parameter_list|)
block|{
try|try
block|{
name|signature
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|signature
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Authorization exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|NO_ACCESS
return|;
block|}
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|data
operator|+
literal|" sig: "
operator|+
name|signature
operator|+
literal|" user: "
operator|+
name|user
operator|+
literal|" time: "
operator|+
name|timestamp
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|loadACL
argument_list|()
expr_stmt|;
name|UserACL
name|userACL
init|=
name|acl
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|userACL
operator|==
literal|null
condition|)
block|{
return|return
name|NO_ACCESS
return|;
block|}
name|String
name|signatureTest
init|=
name|hmac
argument_list|(
name|data
argument_list|,
name|userACL
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SignatureTest "
operator|+
name|signatureTest
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Signature "
operator|+
name|signature
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|signatureTest
operator|.
name|equals
argument_list|(
name|signature
argument_list|)
operator|&&
operator|!
name|isReplay
argument_list|(
name|timestamp
argument_list|,
name|signature
argument_list|,
name|userACL
argument_list|)
condition|)
block|{
return|return
operator|(
name|userACL
operator|.
name|role
operator|.
name|equals
argument_list|(
literal|"admin"
argument_list|)
operator|)
condition|?
name|ADMIN
else|:
name|USER
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Athorization exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|NO_ACCESS
return|;
block|}
block|}
end_class

end_unit

