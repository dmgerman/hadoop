begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_comment
comment|/**  * A {@link TaskScheduler} that   * provides the following features:   * The purpose of this scheduler is to allow users to increase and decrease  * their queue priorities continuosly to meet the requirements of their  * current workloads. The scheduler is aware of the current demand and makes  * it more expensive to boost the priority under peak usage times. Thus  * users who move their workload to low usage times are rewarded with  * discounts. Priorities can only be boosted within a limited quota.  * All users are given a quota or a budget which is deducted periodically  * in configurable accounting intervals. How much of the budget is  * deducted is determined by a per-user spending rate, which may  * be modified at any time directly by the user. The cluster slots  * share allocated to a particular user is computed as that users  * spending rate over the sum of all spending rates in the same accounting  * period.  *  * This scheduler has been designed as a meta-scheduler on top of   * existing MapReduce schedulers, which are responsible for enforcing  * shares computed by the dynamic scheduler in the cluster.   */
end_comment

begin_class
DECL|class|DynamicPriorityScheduler
class|class
name|DynamicPriorityScheduler
extends|extends
name|TaskScheduler
block|{
comment|/**    * This class periodically checks spending rates for queues and    * updates queue capacity shares and budgets    */
DECL|class|Allocations
specifier|static
class|class
name|Allocations
extends|extends
name|TimerTask
implements|implements
name|QueueAllocator
block|{
DECL|field|allocation
name|Map
argument_list|<
name|String
argument_list|,
name|QueueAllocation
argument_list|>
name|allocation
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|QueueAllocation
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|queueInfo
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queueInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|totalSpending
name|float
name|totalSpending
decl_stmt|;
DECL|field|infoQueues
name|Set
argument_list|<
name|String
argument_list|>
name|infoQueues
decl_stmt|;
DECL|field|queueManager
name|QueueManager
name|queueManager
decl_stmt|;
DECL|field|store
name|AllocationStore
name|store
decl_stmt|;
DECL|method|Allocations (Configuration conf, QueueManager queueManager)
name|Allocations
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|QueueManager
name|queueManager
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|queueManager
operator|=
name|queueManager
expr_stmt|;
name|this
operator|.
name|infoQueues
operator|=
name|queueManager
operator|.
name|getLeafQueueNames
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|PrioritySchedulerOptions
operator|.
name|DYNAMIC_SCHEDULER_STORE
argument_list|,
name|FileAllocationStore
operator|.
name|class
argument_list|,
name|AllocationStore
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
DECL|method|addBudget (String queue, float budget)
name|void
name|addBudget
parameter_list|(
name|String
name|queue
parameter_list|,
name|float
name|budget
parameter_list|)
block|{
name|store
operator|.
name|addBudget
argument_list|(
name|queue
argument_list|,
name|budget
argument_list|)
expr_stmt|;
block|}
DECL|method|addQueue (String queue)
name|void
name|addQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|store
operator|.
name|addQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|method|getPrice ()
specifier|synchronized
name|float
name|getPrice
parameter_list|()
block|{
return|return
name|totalSpending
return|;
block|}
DECL|method|removeQueue (String queue)
name|void
name|removeQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|store
operator|.
name|removeQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|setSchedulerInfo
argument_list|(
name|queue
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|setSpending (String queue, float spending)
name|void
name|setSpending
parameter_list|(
name|String
name|queue
parameter_list|,
name|float
name|spending
parameter_list|)
block|{
name|store
operator|.
name|setSpending
argument_list|(
name|queue
argument_list|,
name|spending
argument_list|)
expr_stmt|;
block|}
DECL|method|getInfo (String queue)
name|String
name|getInfo
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
return|return
name|store
operator|.
name|getQueueInfo
argument_list|(
name|queue
argument_list|)
return|;
block|}
DECL|method|getQueueInfos ()
name|String
name|getQueueInfos
parameter_list|()
block|{
name|String
name|info
init|=
literal|"<price>"
operator|+
name|Float
operator|.
name|toString
argument_list|(
name|totalSpending
argument_list|)
operator|+
literal|"</price>\n"
decl_stmt|;
for|for
control|(
name|BudgetQueue
name|queue
range|:
name|store
operator|.
name|getQueues
argument_list|()
control|)
block|{
name|info
operator|+=
literal|"<queue name=\""
operator|+
name|queue
operator|.
name|name
operator|+
literal|"\">"
operator|+
name|queueInfo
operator|.
name|get
argument_list|(
name|queue
operator|.
name|name
argument_list|)
operator|+
literal|"</queue>\n"
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|updateAllocation ()
specifier|private
specifier|synchronized
name|void
name|updateAllocation
parameter_list|()
block|{
name|String
name|queueList
init|=
literal|""
decl_stmt|;
name|totalSpending
operator|=
literal|0.0f
expr_stmt|;
for|for
control|(
name|BudgetQueue
name|queue
range|:
name|store
operator|.
name|getQueues
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|infoQueues
operator|.
name|contains
argument_list|(
name|queue
operator|.
name|name
argument_list|)
condition|)
block|{
name|Queue
index|[]
name|newQueues
init|=
operator|new
name|Queue
index|[
name|infoQueues
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|infoQueue
range|:
name|infoQueues
control|)
block|{
name|newQueues
index|[
name|i
index|]
operator|=
name|queueManager
operator|.
name|getQueue
argument_list|(
name|infoQueue
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|Queue
name|newQueue
init|=
operator|new
name|Queue
argument_list|()
decl_stmt|;
name|newQueue
operator|.
name|setName
argument_list|(
name|queue
operator|.
name|name
argument_list|)
expr_stmt|;
name|newQueues
index|[
name|i
index|]
operator|=
name|newQueue
expr_stmt|;
name|queueManager
operator|.
name|setQueues
argument_list|(
name|newQueues
argument_list|)
expr_stmt|;
name|QueueInfo
name|newQueueInfo
init|=
operator|new
name|QueueInfo
argument_list|(
name|queue
operator|.
name|name
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|queueManager
operator|.
name|setSchedulerInfo
argument_list|(
name|queue
operator|.
name|name
argument_list|,
name|newQueueInfo
argument_list|)
expr_stmt|;
name|infoQueues
operator|=
name|queueManager
operator|.
name|getLeafQueueNames
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|queueList
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|queueList
operator|+=
literal|","
expr_stmt|;
block|}
name|queueList
operator|+=
name|queue
operator|.
name|name
expr_stmt|;
comment|// What to include in the published price in spending per slot
if|if
condition|(
name|queue
operator|.
name|spending
operator|<=
name|queue
operator|.
name|budget
operator|&&
operator|(
name|queue
operator|.
name|used
operator|!=
literal|0
operator|||
name|queue
operator|.
name|pending
operator|!=
literal|0
operator|)
condition|)
block|{
name|totalSpending
operator|+=
name|queue
operator|.
name|spending
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|set
argument_list|(
name|PrioritySchedulerOptions
operator|.
name|MAPRED_QUEUE_NAMES
argument_list|,
name|queueList
argument_list|)
expr_stmt|;
name|setShares
argument_list|()
expr_stmt|;
block|}
comment|// Calculates shares in proportion to spending rates
comment|// and sets the appropriate configuration parameter
comment|// for schedulers to read
DECL|method|setShares ()
specifier|private
specifier|synchronized
name|void
name|setShares
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|QueueAllocation
argument_list|>
name|shares
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|QueueAllocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BudgetQueue
name|queue
range|:
name|store
operator|.
name|getQueues
argument_list|()
control|)
block|{
name|float
name|spending
init|=
name|queue
operator|.
name|spending
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|budget
operator|<
operator|(
name|queue
operator|.
name|spending
operator|*
name|queue
operator|.
name|used
operator|)
operator|||
operator|(
name|queue
operator|.
name|used
operator|==
literal|0
operator|&&
name|queue
operator|.
name|pending
operator|==
literal|0
operator|)
condition|)
block|{
name|spending
operator|=
literal|0.0f
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|.
name|addBudget
argument_list|(
operator|-
operator|(
name|queue
operator|.
name|spending
operator|*
name|queue
operator|.
name|used
operator|)
argument_list|)
expr_stmt|;
block|}
name|float
name|queueShare
init|=
literal|0.0f
decl_stmt|;
if|if
condition|(
name|totalSpending
operator|>
literal|0.0f
condition|)
block|{
name|queueShare
operator|=
operator|(
name|spending
operator|/
name|totalSpending
operator|)
expr_stmt|;
block|}
name|queueInfo
operator|.
name|put
argument_list|(
name|queue
operator|.
name|name
argument_list|,
literal|"<budget>"
operator|+
name|Float
operator|.
name|toString
argument_list|(
name|queue
operator|.
name|budget
argument_list|)
operator|+
literal|"</budget>\n<spending>"
operator|+
name|Float
operator|.
name|toString
argument_list|(
name|spending
argument_list|)
operator|+
literal|"</spending>\n<share>"
operator|+
name|Float
operator|.
name|toString
argument_list|(
name|queueShare
argument_list|)
operator|+
literal|"</share>\n<used>"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|queue
operator|.
name|used
argument_list|)
operator|+
literal|"</used>\n<pending>"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|queue
operator|.
name|pending
argument_list|)
operator|+
literal|"</pending>\n"
argument_list|)
expr_stmt|;
name|shares
operator|.
name|put
argument_list|(
name|queue
operator|.
name|name
argument_list|,
operator|new
name|QueueAllocation
argument_list|(
name|queue
operator|.
name|name
argument_list|,
name|queueShare
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setAllocation
argument_list|(
name|shares
argument_list|)
expr_stmt|;
block|}
DECL|method|setAllocation (Map<String,QueueAllocation> shares)
specifier|private
specifier|synchronized
name|void
name|setAllocation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|QueueAllocation
argument_list|>
name|shares
parameter_list|)
block|{
name|allocation
operator|=
name|shares
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|getAllocation ()
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|QueueAllocation
argument_list|>
name|getAllocation
parameter_list|()
block|{
return|return
name|allocation
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|setUsage (String queue, int used, int pending)
specifier|public
specifier|synchronized
name|void
name|setUsage
parameter_list|(
name|String
name|queue
parameter_list|,
name|int
name|used
parameter_list|,
name|int
name|pending
parameter_list|)
block|{
name|store
operator|.
name|setUsage
argument_list|(
name|queue
argument_list|,
name|used
argument_list|,
name|pending
argument_list|)
expr_stmt|;
block|}
comment|// Used to expose the QueueInfo in the JobTracker web UI
DECL|method|getQueueInfo (String queue)
specifier|synchronized
name|String
name|getQueueInfo
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
return|return
name|queueInfo
operator|.
name|get
argument_list|(
name|queue
argument_list|)
return|;
block|}
comment|// run once in each allocation interval to
comment|// calculate new shares based on updated
comment|// budgets and spending rates
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|store
operator|.
name|load
argument_list|()
expr_stmt|;
name|updateAllocation
argument_list|()
expr_stmt|;
name|store
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * this class merges the queue info from the underlying    * MapReduce scheduler and the dynamic scheduler    * to be displayed in the JobTracker web UI    */
DECL|class|QueueInfo
specifier|private
specifier|static
class|class
name|QueueInfo
block|{
DECL|field|queue
name|String
name|queue
decl_stmt|;
DECL|field|info
name|Object
name|info
decl_stmt|;
DECL|field|allocations
name|Allocations
name|allocations
decl_stmt|;
DECL|method|QueueInfo (String queue, Object info, Allocations allocations)
name|QueueInfo
parameter_list|(
name|String
name|queue
parameter_list|,
name|Object
name|info
parameter_list|,
name|Allocations
name|allocations
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|allocations
operator|=
name|allocations
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|buffer
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|+=
name|info
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|queueInfo
init|=
name|allocations
operator|.
name|getQueueInfo
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|buffer
operator|+=
name|queueInfo
expr_stmt|;
return|return
name|buffer
return|;
block|}
block|}
comment|// this is the actual scheduler that picks
comment|// the jobs to run, e.g. PriorityScheduler
DECL|field|scheduler
specifier|protected
name|QueueTaskScheduler
name|scheduler
decl_stmt|;
DECL|field|timer
specifier|private
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|allocations
specifier|protected
name|Allocations
name|allocations
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DynamicPriorityScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Used for testing in discrete time
DECL|method|setTimer (Timer timer)
name|void
name|setTimer
parameter_list|(
name|Timer
name|timer
parameter_list|)
block|{
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|QueueManager
name|queueManager
init|=
name|taskTrackerManager
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|allocations
operator|=
operator|new
name|Allocations
argument_list|(
name|conf
argument_list|,
name|queueManager
argument_list|)
expr_stmt|;
name|scheduler
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|PrioritySchedulerOptions
operator|.
name|DYNAMIC_SCHEDULER_SCHEDULER
argument_list|,
name|PriorityScheduler
operator|.
name|class
argument_list|,
name|QueueTaskScheduler
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setAllocator
argument_list|(
name|allocations
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setTaskTrackerManager
argument_list|(
name|taskTrackerManager
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|interval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|PrioritySchedulerOptions
operator|.
name|DYNAMIC_SCHEDULER_ALLOC_INTERVAL
argument_list|,
literal|20
argument_list|)
operator|*
literal|1000
decl_stmt|;
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|allocations
argument_list|,
name|interval
argument_list|,
name|interval
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|queueManager
operator|.
name|getLeafQueueNames
argument_list|()
control|)
block|{
name|Object
name|info
init|=
name|queueManager
operator|.
name|getSchedulerInfo
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|QueueInfo
name|queueInfo
init|=
operator|new
name|QueueInfo
argument_list|(
name|queue
argument_list|,
name|info
argument_list|,
name|allocations
argument_list|)
decl_stmt|;
name|queueManager
operator|.
name|setSchedulerInfo
argument_list|(
name|queue
argument_list|,
name|queueInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskTrackerManager
operator|instanceof
name|JobTracker
condition|)
block|{
name|JobTracker
name|jobTracker
init|=
operator|(
name|JobTracker
operator|)
name|taskTrackerManager
decl_stmt|;
name|HttpServer
name|infoServer
init|=
name|jobTracker
operator|.
name|infoServer
decl_stmt|;
name|infoServer
operator|.
name|setAttribute
argument_list|(
literal|"scheduler"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|infoServer
operator|.
name|addServlet
argument_list|(
literal|"scheduler"
argument_list|,
literal|"/scheduler"
argument_list|,
name|DynamicPriorityServlet
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|terminate ()
specifier|public
name|void
name|terminate
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|terminate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assignTasks (TaskTracker taskTracker)
specifier|public
name|List
argument_list|<
name|Task
argument_list|>
name|assignTasks
parameter_list|(
name|TaskTracker
name|taskTracker
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scheduler
operator|.
name|assignTasks
argument_list|(
name|taskTracker
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getJobs (String queueName)
specifier|public
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|getJobs
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
return|return
name|scheduler
operator|.
name|getJobs
argument_list|(
name|queueName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

