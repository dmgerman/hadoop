begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFairSchedulerPoolNames
specifier|public
class|class
name|TestFairSchedulerPoolNames
block|{
DECL|field|TEST_DIR
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/contrib/streaming/test/data"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|ALLOC_FILE
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-pools"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|POOL_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|POOL_PROPERTY
init|=
literal|"pool"
decl_stmt|;
DECL|field|namenode
specifier|private
name|String
name|namenode
decl_stmt|;
DECL|field|miniDFSCluster
specifier|private
name|MiniDFSCluster
name|miniDFSCluster
init|=
literal|null
decl_stmt|;
DECL|field|miniMRCluster
specifier|private
name|MiniMRCluster
name|miniMRCluster
init|=
literal|null
decl_stmt|;
comment|/**    * Note that The PoolManager.ALLOW_UNDECLARED_POOLS_KEY property is set to    * false. So, the default pool is not added, and only pool names in the    * scheduler allocation file are considered valid.    */
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Make sure data directory exists
comment|// Create an allocation file with only one pool defined.
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"poolA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minMaps>1</minMaps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minReduces>1</minReduces>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|miniDFSCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|namenode
operator|=
name|miniDFSCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|JobConf
name|clusterConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
literal|"mapred.jobtracker.taskScheduler"
argument_list|,
name|FairScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.allocation.file"
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.poolnameproperty"
argument_list|,
name|POOL_PROPERTY
argument_list|)
expr_stmt|;
name|clusterConf
operator|.
name|setBoolean
argument_list|(
name|FairScheduler
operator|.
name|ALLOW_UNDECLARED_POOLS_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|miniMRCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
name|namenode
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|clusterConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniDFSCluster
operator|!=
literal|null
condition|)
block|{
name|miniDFSCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|miniMRCluster
operator|!=
literal|null
condition|)
block|{
name|miniMRCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|submitJob (String pool)
specifier|private
name|void
name|submitJob
parameter_list|(
name|String
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/testing/wc/input"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp/testing/wc/output"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|namenode
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|inDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|inDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|DataOutputStream
name|file
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|inDir
argument_list|,
literal|"part-00000"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|writeBytes
argument_list|(
literal|"Sample text"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|namenode
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
literal|"localhost:"
operator|+
name|miniMRCluster
operator|.
name|getJobTrackerPort
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setJobName
argument_list|(
literal|"wordcount"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInputFormat
argument_list|(
name|TextInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// the keys are words (strings)
name|conf
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// the values are counts (ints)
name|conf
operator|.
name|setOutputValueClass
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMapperClass
argument_list|(
name|WordCount
operator|.
name|MapClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCombinerClass
argument_list|(
name|WordCount
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReducerClass
argument_list|(
name|WordCount
operator|.
name|Reduce
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|setInputPaths
argument_list|(
name|conf
argument_list|,
name|inDir
argument_list|)
expr_stmt|;
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|conf
argument_list|,
name|outDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumMapTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|POOL_PROPERTY
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
name|JobClient
operator|.
name|runJob
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests job submission using the default pool name.    */
annotation|@
name|Test
DECL|method|testDefaultPoolName ()
specifier|public
name|void
name|testDefaultPoolName
parameter_list|()
block|{
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|submitJob
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|t
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"No exception during submission"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect exception message"
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Add pool name to the fair scheduler allocation file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests job submission using a valid pool name (i.e., name exists in the fair    * scheduler allocation file).    */
annotation|@
name|Test
DECL|method|testValidPoolName ()
specifier|public
name|void
name|testValidPoolName
parameter_list|()
block|{
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|submitJob
argument_list|(
literal|"poolA"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|t
operator|=
name|e
expr_stmt|;
block|}
name|assertNull
argument_list|(
literal|"Exception during submission"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests job submission using an invalid pool name (i.e., name doesn't exist    * in the fair scheduler allocation file).    */
annotation|@
name|Test
DECL|method|testInvalidPoolName ()
specifier|public
name|void
name|testInvalidPoolName
parameter_list|()
block|{
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|submitJob
argument_list|(
literal|"poolB"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|t
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"No exception during submission"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect exception message"
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Add pool name to the fair scheduler allocation file"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

