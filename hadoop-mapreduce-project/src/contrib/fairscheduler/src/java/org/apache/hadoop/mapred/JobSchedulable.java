begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FairScheduler
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_class
DECL|class|JobSchedulable
specifier|public
class|class
name|JobSchedulable
extends|extends
name|Schedulable
block|{
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|job
specifier|private
name|JobInProgress
name|job
decl_stmt|;
DECL|field|taskType
specifier|private
name|TaskType
name|taskType
decl_stmt|;
DECL|field|demand
specifier|private
name|int
name|demand
init|=
literal|0
decl_stmt|;
DECL|method|JobSchedulable (FairScheduler scheduler, JobInProgress job, TaskType taskType)
specifier|public
name|JobSchedulable
parameter_list|(
name|FairScheduler
name|scheduler
parameter_list|,
name|JobInProgress
name|job
parameter_list|,
name|TaskType
name|taskType
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|taskType
operator|=
name|taskType
expr_stmt|;
name|initMetrics
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTaskType ()
specifier|public
name|TaskType
name|getTaskType
parameter_list|()
block|{
return|return
name|taskType
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getJob ()
specifier|public
name|JobInProgress
name|getJob
parameter_list|()
block|{
return|return
name|job
return|;
block|}
annotation|@
name|Override
DECL|method|updateDemand ()
specifier|public
name|void
name|updateDemand
parameter_list|()
block|{
name|demand
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|isRunnable
argument_list|()
condition|)
block|{
comment|// For reduces, make sure enough maps are done that reduces can launch
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|REDUCE
operator|&&
operator|!
name|job
operator|.
name|scheduleReduces
argument_list|()
condition|)
return|return;
comment|// Add up demand from each TaskInProgress; each TIP can either
comment|// - have no attempts running, in which case it demands 1 slot
comment|// - have N attempts running, in which case it demands N slots, and may
comment|//   potentially demand one more slot if it needs to be speculated
name|TaskInProgress
index|[]
name|tips
init|=
operator|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|job
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|)
else|:
name|job
operator|.
name|getTasks
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|speculationEnabled
init|=
operator|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|job
operator|.
name|hasSpeculativeMaps
argument_list|()
else|:
name|job
operator|.
name|hasSpeculativeReduces
argument_list|()
operator|)
decl_stmt|;
name|long
name|time
init|=
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskInProgress
name|tip
range|:
name|tips
control|)
block|{
if|if
condition|(
operator|!
name|tip
operator|.
name|isComplete
argument_list|()
condition|)
block|{
if|if
condition|(
name|tip
operator|.
name|isRunning
argument_list|()
condition|)
block|{
comment|// Count active tasks and any speculative task we want to launch
name|demand
operator|+=
name|tip
operator|.
name|getActiveTasks
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|speculationEnabled
operator|&&
name|tip
operator|.
name|canBeSpeculated
argument_list|(
name|time
argument_list|)
condition|)
name|demand
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// Need to launch 1 task
name|demand
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|isRunnable ()
specifier|private
name|boolean
name|isRunnable
parameter_list|()
block|{
name|JobInfo
name|info
init|=
name|scheduler
operator|.
name|getJobInfo
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|int
name|runState
init|=
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
decl_stmt|;
return|return
operator|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|runnable
operator|&&
name|runState
operator|==
name|JobStatus
operator|.
name|RUNNING
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDemand ()
specifier|public
name|int
name|getDemand
parameter_list|()
block|{
return|return
name|demand
return|;
block|}
annotation|@
name|Override
DECL|method|redistributeShare ()
specifier|public
name|void
name|redistributeShare
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|JobPriority
name|getPriority
parameter_list|()
block|{
return|return
name|job
operator|.
name|getPriority
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRunningTasks ()
specifier|public
name|int
name|getRunningTasks
parameter_list|()
block|{
if|if
condition|(
operator|!
name|job
operator|.
name|inited
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|?
name|job
operator|.
name|runningMaps
argument_list|()
else|:
name|job
operator|.
name|runningReduces
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|job
operator|.
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|getWeight ()
specifier|public
name|double
name|getWeight
parameter_list|()
block|{
return|return
name|scheduler
operator|.
name|getJobWeight
argument_list|(
name|job
argument_list|,
name|taskType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMinShare ()
specifier|public
name|int
name|getMinShare
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|assignTask (TaskTrackerStatus tts, long currentTime, Collection<JobInProgress> visited)
specifier|public
name|Task
name|assignTask
parameter_list|(
name|TaskTrackerStatus
name|tts
parameter_list|,
name|long
name|currentTime
parameter_list|,
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|visited
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isRunnable
argument_list|()
condition|)
block|{
name|visited
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|TaskTrackerManager
name|ttm
init|=
name|scheduler
operator|.
name|taskTrackerManager
decl_stmt|;
name|ClusterStatus
name|clusterStatus
init|=
name|ttm
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|int
name|numTaskTrackers
init|=
name|clusterStatus
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
comment|// check with the load manager whether it is safe to
comment|// launch this task on this taskTracker.
name|LoadManager
name|loadMgr
init|=
name|scheduler
operator|.
name|getLoadManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|loadMgr
operator|.
name|canLaunchTask
argument_list|(
name|tts
argument_list|,
name|job
argument_list|,
name|taskType
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|taskType
operator|==
name|TaskType
operator|.
name|MAP
condition|)
block|{
name|LocalityLevel
name|localityLevel
init|=
name|scheduler
operator|.
name|getAllowedLocalityLevel
argument_list|(
name|job
argument_list|,
name|currentTime
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|getEventLog
argument_list|()
operator|.
name|log
argument_list|(
literal|"ALLOWED_LOC_LEVEL"
argument_list|,
name|job
operator|.
name|getJobID
argument_list|()
argument_list|,
name|localityLevel
argument_list|)
expr_stmt|;
comment|// obtainNewMapTask needs to be passed 1 + the desired locality level
return|return
name|job
operator|.
name|obtainNewMapTask
argument_list|(
name|tts
argument_list|,
name|numTaskTrackers
argument_list|,
name|ttm
operator|.
name|getNumberOfUniqueHosts
argument_list|()
argument_list|,
name|localityLevel
operator|.
name|toCacheLevelCap
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|job
operator|.
name|obtainNewReduceTask
argument_list|(
name|tts
argument_list|,
name|numTaskTrackers
argument_list|,
name|ttm
operator|.
name|getNumberOfUniqueHosts
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMetricsContextName ()
specifier|protected
name|String
name|getMetricsContextName
parameter_list|()
block|{
return|return
literal|"jobs"
return|;
block|}
annotation|@
name|Override
DECL|method|updateMetrics ()
name|void
name|updateMetrics
parameter_list|()
block|{
assert|assert
name|metrics
operator|!=
literal|null
assert|;
name|super
operator|.
name|setMetricValues
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

