begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_comment
comment|/**  * A {@link TaskScheduler} that limits the maximum number of tasks  * running for a job. The limit is set by means of the  * {@link JTConfig#JT_RUNNINGTASKS_PER_JOB} property.  */
end_comment

begin_class
DECL|class|LimitTasksPerJobTaskScheduler
class|class
name|LimitTasksPerJobTaskScheduler
extends|extends
name|JobQueueTaskScheduler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.mapred.TaskLimitedJobQueueTaskScheduler"
argument_list|)
decl_stmt|;
DECL|field|maxTasksPerJob
specifier|private
name|long
name|maxTasksPerJob
decl_stmt|;
DECL|method|LimitTasksPerJobTaskScheduler ()
specifier|public
name|LimitTasksPerJobTaskScheduler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|taskTrackerManager
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|String
name|queueName
init|=
name|queueManager
operator|.
name|getJobQueueInfos
argument_list|()
index|[
literal|0
index|]
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|setSchedulerInfo
argument_list|(
name|queueName
argument_list|,
literal|"Maximum Tasks Per Job :: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|maxTasksPerJob
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|maxTasksPerJob
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|JTConfig
operator|.
name|JT_RUNNINGTASKS_PER_JOB
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxTasksPerJob
operator|<=
literal|0
condition|)
block|{
name|String
name|msg
init|=
name|JTConfig
operator|.
name|JT_RUNNINGTASKS_PER_JOB
operator|+
literal|" is set to zero or a negative value. Aborting."
decl_stmt|;
name|LOG
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|assignTasks (TaskTracker taskTracker)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|Task
argument_list|>
name|assignTasks
parameter_list|(
name|TaskTracker
name|taskTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskTrackerStatus
name|taskTrackerStatus
init|=
name|taskTracker
operator|.
name|getStatus
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numTaskTrackers
init|=
name|taskTrackerManager
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|jobQueue
init|=
name|jobQueueJobInProgressListener
operator|.
name|getJobQueue
argument_list|()
decl_stmt|;
name|Task
name|task
decl_stmt|;
comment|/* Stats about the current taskTracker */
specifier|final
name|int
name|mapTasksNumber
init|=
name|taskTrackerStatus
operator|.
name|countMapTasks
argument_list|()
decl_stmt|;
specifier|final
name|int
name|reduceTasksNumber
init|=
name|taskTrackerStatus
operator|.
name|countReduceTasks
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maximumMapTasksNumber
init|=
name|taskTrackerStatus
operator|.
name|getMaxMapSlots
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maximumReduceTasksNumber
init|=
name|taskTrackerStatus
operator|.
name|getMaxReduceSlots
argument_list|()
decl_stmt|;
comment|/*      * Statistics about the whole cluster. Most are approximate because of      * concurrency      */
specifier|final
name|int
index|[]
name|maxMapAndReduceLoad
init|=
name|getMaxMapAndReduceLoad
argument_list|(
name|maximumMapTasksNumber
argument_list|,
name|maximumReduceTasksNumber
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maximumMapLoad
init|=
name|maxMapAndReduceLoad
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|maximumReduceLoad
init|=
name|maxMapAndReduceLoad
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|int
name|beginAtStep
decl_stmt|;
comment|/*      * When step == 0, this loop starts as many map tasks it can wrt      * maxTasksPerJob      * When step == 1, this loop starts as many reduce tasks it can wrt      * maxTasksPerJob      * When step == 2, this loop starts as many map tasks it can      * When step == 3, this loop starts as many reduce tasks it can      *      * It may seem that we would improve this loop by queuing jobs we cannot      * start in steps 0 and 1 because of maxTasksPerJob, and using that queue      * in step 2 and 3.      * A first thing to notice is that the time with the current algorithm is      * logarithmic, because it is the sum of (p^k) for k from 1 to N, were      * N is the number of jobs and p is the probability for a job to not exceed      * limits The probability for the cache to be useful would be similar to      * p^N, that is 1/(e^N), whereas its size and the time spent to manage it      * would be in ln(N).      * So it is not a good idea.      */
if|if
condition|(
name|maxTasksPerJob
operator|!=
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|beginAtStep
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|beginAtStep
operator|=
literal|2
expr_stmt|;
block|}
name|List
argument_list|<
name|Task
argument_list|>
name|assignedTasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|scheduleTasks
label|:
for|for
control|(
name|int
name|step
init|=
name|beginAtStep
init|;
name|step
operator|<=
literal|3
condition|;
operator|++
name|step
control|)
block|{
comment|/* If we reached the maximum load for this step, go to the next */
if|if
condition|(
operator|(
name|step
operator|==
literal|0
operator|||
name|step
operator|==
literal|2
operator|)
operator|&&
name|mapTasksNumber
operator|>=
name|maximumMapLoad
operator|||
operator|(
name|step
operator|==
literal|1
operator|||
name|step
operator|==
literal|3
operator|)
operator|&&
name|reduceTasksNumber
operator|>=
name|maximumReduceLoad
condition|)
block|{
continue|continue;
block|}
comment|/* For each job, start its tasks */
synchronized|synchronized
init|(
name|jobQueue
init|)
block|{
for|for
control|(
name|JobInProgress
name|job
range|:
name|jobQueue
control|)
block|{
comment|/* Ignore non running jobs */
if|if
condition|(
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|!=
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
continue|continue;
block|}
comment|/* Check that we're not exceeding the global limits */
if|if
condition|(
operator|(
name|step
operator|==
literal|0
operator|||
name|step
operator|==
literal|1
operator|)
operator|&&
operator|(
name|job
operator|.
name|runningMaps
argument_list|()
operator|+
name|job
operator|.
name|runningReduces
argument_list|()
operator|>=
name|maxTasksPerJob
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|step
operator|==
literal|0
operator|||
name|step
operator|==
literal|2
condition|)
block|{
name|task
operator|=
name|job
operator|.
name|obtainNewMapTask
argument_list|(
name|taskTrackerStatus
argument_list|,
name|numTaskTrackers
argument_list|,
name|taskTrackerManager
operator|.
name|getNumberOfUniqueHosts
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|task
operator|=
name|job
operator|.
name|obtainNewReduceTask
argument_list|(
name|taskTrackerStatus
argument_list|,
name|numTaskTrackers
argument_list|,
name|taskTrackerManager
operator|.
name|getNumberOfUniqueHosts
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
name|assignedTasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
break|break
name|scheduleTasks
break|;
block|}
block|}
block|}
block|}
return|return
name|assignedTasks
return|;
block|}
comment|/**    * Determine the maximum number of maps or reduces that we are willing to run    * on a taskTracker which accept a maximum of localMaxMapLoad maps and    * localMaxReduceLoad reduces    * @param localMaxMapLoad The local maximum number of map tasks for a host    * @param localMaxReduceLoad The local maximum number of reduce tasks for a    * host    * @return An array of the two maximums: map then reduce.    */
DECL|method|getMaxMapAndReduceLoad (int localMaxMapLoad, int localMaxReduceLoad)
specifier|protected
specifier|synchronized
name|int
index|[]
name|getMaxMapAndReduceLoad
parameter_list|(
name|int
name|localMaxMapLoad
parameter_list|,
name|int
name|localMaxReduceLoad
parameter_list|)
block|{
comment|// Approximate because of concurrency
specifier|final
name|int
name|numTaskTrackers
init|=
name|taskTrackerManager
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getTaskTrackers
argument_list|()
decl_stmt|;
comment|/* Hold the result */
name|int
name|maxMapLoad
init|=
literal|0
decl_stmt|;
name|int
name|maxReduceLoad
init|=
literal|0
decl_stmt|;
name|int
name|neededMaps
init|=
literal|0
decl_stmt|;
name|int
name|neededReduces
init|=
literal|0
decl_stmt|;
name|Collection
argument_list|<
name|JobInProgress
argument_list|>
name|jobQueue
init|=
name|jobQueueJobInProgressListener
operator|.
name|getJobQueue
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|jobQueue
init|)
block|{
for|for
control|(
name|JobInProgress
name|job
range|:
name|jobQueue
control|)
block|{
if|if
condition|(
name|job
operator|.
name|getStatus
argument_list|()
operator|.
name|getRunState
argument_list|()
operator|==
name|JobStatus
operator|.
name|RUNNING
condition|)
block|{
name|neededMaps
operator|+=
name|job
operator|.
name|desiredMaps
argument_list|()
operator|-
name|job
operator|.
name|finishedMaps
argument_list|()
expr_stmt|;
name|neededReduces
operator|+=
name|job
operator|.
name|desiredReduces
argument_list|()
operator|-
name|job
operator|.
name|finishedReduces
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|numTaskTrackers
operator|>
literal|0
condition|)
block|{
name|maxMapLoad
operator|=
name|Math
operator|.
name|min
argument_list|(
name|localMaxMapLoad
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|neededMaps
operator|/
name|numTaskTrackers
argument_list|)
argument_list|)
expr_stmt|;
name|maxReduceLoad
operator|=
name|Math
operator|.
name|min
argument_list|(
name|localMaxReduceLoad
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|neededReduces
operator|/
name|numTaskTrackers
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|int
index|[]
block|{
name|maxMapLoad
block|,
name|maxReduceLoad
block|}
return|;
block|}
block|}
end_class

end_unit

