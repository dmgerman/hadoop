begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|util
operator|.
name|MRAsyncDiskService
import|;
end_import

begin_comment
comment|/**  * This is a thread in TaskTracker to cleanup user logs.  *   * Responsibilities of this thread include:  *<ol>  *<li>Removing old user logs</li>  *</ol>  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|UserLogCleaner
class|class
name|UserLogCleaner
extends|extends
name|Thread
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UserLogCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_USER_LOG_RETAIN_HOURS
specifier|static
specifier|final
name|int
name|DEFAULT_USER_LOG_RETAIN_HOURS
init|=
literal|24
decl_stmt|;
comment|// 1 day
DECL|field|DEFAULT_THREAD_SLEEP_TIME
specifier|static
specifier|final
name|long
name|DEFAULT_THREAD_SLEEP_TIME
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|// 1 hour
DECL|field|completedJobs
specifier|private
name|Map
argument_list|<
name|JobID
argument_list|,
name|Long
argument_list|>
name|completedJobs
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|JobID
argument_list|,
name|Long
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|threadSleepTime
specifier|private
specifier|final
name|long
name|threadSleepTime
decl_stmt|;
DECL|field|logAsyncDisk
specifier|private
name|MRAsyncDiskService
name|logAsyncDisk
decl_stmt|;
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
DECL|method|UserLogCleaner (Configuration conf)
name|UserLogCleaner
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|threadSleepTime
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|TTConfig
operator|.
name|TT_USERLOGCLEANUP_SLEEPTIME
argument_list|,
name|DEFAULT_THREAD_SLEEP_TIME
argument_list|)
expr_stmt|;
name|logAsyncDisk
operator|=
operator|new
name|MRAsyncDiskService
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
argument_list|,
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setClock
argument_list|(
operator|new
name|Clock
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setClock (Clock clock)
name|void
name|setClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
DECL|method|getClock ()
name|Clock
name|getClock
parameter_list|()
block|{
return|return
name|this
operator|.
name|clock
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// This thread wakes up after every threadSleepTime interval
comment|// and deletes if there are any old logs.
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
comment|// sleep
name|Thread
operator|.
name|sleep
argument_list|(
name|threadSleepTime
argument_list|)
expr_stmt|;
name|processCompletedJobs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" encountered an exception while monitoring :"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ingoring the exception and continuing monitoring."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processCompletedJobs ()
name|void
name|processCompletedJobs
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// iterate through completedJobs and remove old logs.
synchronized|synchronized
init|(
name|completedJobs
init|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|JobID
argument_list|,
name|Long
argument_list|>
argument_list|>
name|completedJobIter
init|=
name|completedJobs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|completedJobIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|JobID
argument_list|,
name|Long
argument_list|>
name|entry
init|=
name|completedJobIter
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// see if the job is old enough
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
operator|<=
name|now
condition|)
block|{
comment|// add the job logs directory to for delete
name|deleteLogPath
argument_list|(
name|TaskLog
operator|.
name|getJobDir
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|completedJobIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Clears all the logs in userlog directory.    *     * Adds the job directories for deletion with default retain hours. Deletes    * all other directories, if any. This is usually called on reinit/restart of    * the TaskTracker    *     * @param conf    * @throws IOException    */
DECL|method|clearOldUserLogs (Configuration conf)
name|void
name|clearOldUserLogs
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|userLogDir
init|=
name|TaskLog
operator|.
name|getUserLogDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|userLogDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
index|[]
name|logDirs
init|=
name|userLogDir
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|logDirs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// add all the log dirs to taskLogsMnonitor.
name|long
name|now
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|logDir
range|:
name|logDirs
control|)
block|{
if|if
condition|(
name|logDir
operator|.
name|equals
argument_list|(
name|logAsyncDisk
operator|.
name|TOBEDELETED
argument_list|)
condition|)
block|{
comment|// skip this
continue|continue;
block|}
name|JobID
name|jobid
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jobid
operator|=
name|JobID
operator|.
name|forName
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
comment|// if the directory is not a jobid, delete it immediately
name|deleteLogPath
argument_list|(
operator|new
name|File
argument_list|(
name|userLogDir
argument_list|,
name|logDir
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// add the job log directory with default retain hours, if it is not
comment|// already added
if|if
condition|(
operator|!
name|completedJobs
operator|.
name|containsKey
argument_list|(
name|jobid
argument_list|)
condition|)
block|{
name|markJobLogsForDeletion
argument_list|(
name|now
argument_list|,
name|conf
argument_list|,
name|jobid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|getUserlogRetainMillis (Configuration conf)
specifier|private
name|int
name|getUserlogRetainMillis
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|(
name|conf
operator|==
literal|null
condition|?
name|UserLogCleaner
operator|.
name|DEFAULT_USER_LOG_RETAIN_HOURS
else|:
name|conf
operator|.
name|getInt
argument_list|(
name|MRJobConfig
operator|.
name|USER_LOG_RETAIN_HOURS
argument_list|,
name|UserLogCleaner
operator|.
name|DEFAULT_USER_LOG_RETAIN_HOURS
argument_list|)
operator|)
operator|*
literal|1000
operator|*
literal|60
operator|*
literal|60
return|;
block|}
comment|/**    * Adds job user-log directory to cleanup thread to delete logs after user-log    * retain hours.    *     * If the configuration is null or user-log retain hours is not configured, it    * is deleted after    * {@value UserLogCleaner#DEFAULT_USER_LOG_RETAIN_HOURS}    *     * @param jobCompletionTime    *          job completion time in millis    * @param conf    *          The configuration from which user-log retain hours should be read    * @param jobid    *          JobID for which user logs should be deleted    */
DECL|method|markJobLogsForDeletion (long jobCompletionTime, Configuration conf, JobID jobid)
specifier|public
name|void
name|markJobLogsForDeletion
parameter_list|(
name|long
name|jobCompletionTime
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|JobID
name|jobid
parameter_list|)
block|{
name|long
name|retainTimeStamp
init|=
name|jobCompletionTime
operator|+
operator|(
name|getUserlogRetainMillis
argument_list|(
name|conf
argument_list|)
operator|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding "
operator|+
name|jobid
operator|+
literal|" for user-log deletion with retainTimeStamp:"
operator|+
name|retainTimeStamp
argument_list|)
expr_stmt|;
name|completedJobs
operator|.
name|put
argument_list|(
name|jobid
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|retainTimeStamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove job from user log deletion.    *     * @param jobid    */
DECL|method|unmarkJobFromLogDeletion (JobID jobid)
specifier|public
name|void
name|unmarkJobFromLogDeletion
parameter_list|(
name|JobID
name|jobid
parameter_list|)
block|{
if|if
condition|(
name|completedJobs
operator|.
name|remove
argument_list|(
name|jobid
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing "
operator|+
name|jobid
operator|+
literal|" from user-log deletion"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes the log path.    *     * This path will be removed immediately through {@link MRAsyncDiskService}    *     * @param logPath    * @throws IOException    */
DECL|method|deleteLogPath (String logPath)
specifier|private
name|void
name|deleteLogPath
parameter_list|(
name|String
name|logPath
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting user log path "
operator|+
name|logPath
argument_list|)
expr_stmt|;
name|logAsyncDisk
operator|.
name|moveAndDeleteAbsolutePath
argument_list|(
name|logPath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

