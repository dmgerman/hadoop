begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Represents a directive from the {@link org.apache.hadoop.mapred.JobTracker}   * to the {@link org.apache.hadoop.mapred.TaskTracker} to launch a new task.  *   */
end_comment

begin_class
DECL|class|LaunchTaskAction
class|class
name|LaunchTaskAction
extends|extends
name|TaskTrackerAction
block|{
DECL|field|task
specifier|private
name|Task
name|task
decl_stmt|;
DECL|method|LaunchTaskAction ()
specifier|public
name|LaunchTaskAction
parameter_list|()
block|{
name|super
argument_list|(
name|ActionType
operator|.
name|LAUNCH_TASK
argument_list|)
expr_stmt|;
block|}
DECL|method|LaunchTaskAction (Task task)
specifier|public
name|LaunchTaskAction
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
name|super
argument_list|(
name|ActionType
operator|.
name|LAUNCH_TASK
argument_list|)
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
DECL|method|getTask ()
specifier|public
name|Task
name|getTask
parameter_list|()
block|{
return|return
name|task
return|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|task
operator|.
name|isMapTask
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isMapTask
init|=
name|in
operator|.
name|readBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|isMapTask
condition|)
block|{
name|task
operator|=
operator|new
name|MapTask
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|task
operator|=
operator|new
name|ReduceTask
argument_list|()
expr_stmt|;
block|}
name|task
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

