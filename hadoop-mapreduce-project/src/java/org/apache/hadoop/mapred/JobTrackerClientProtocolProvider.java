begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|protocol
operator|.
name|ClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|protocol
operator|.
name|ClientProtocolProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|JobTrackerClientProtocolProvider
specifier|public
class|class
name|JobTrackerClientProtocolProvider
extends|extends
name|ClientProtocolProvider
block|{
annotation|@
name|Override
DECL|method|create (Configuration conf)
specifier|public
name|ClientProtocol
name|create
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|framework
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|framework
operator|!=
literal|null
operator|&&
operator|!
name|framework
operator|.
name|equals
argument_list|(
literal|"classic"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|tracker
init|=
name|conf
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"local"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"local"
operator|.
name|equals
argument_list|(
name|tracker
argument_list|)
condition|)
block|{
return|return
name|createRPCProxy
argument_list|(
name|JobTracker
operator|.
name|getAddress
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid \""
operator|+
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
operator|+
literal|"\" configuration value for JobTracker: \""
operator|+
name|tracker
operator|+
literal|"\""
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|create (InetSocketAddress addr, Configuration conf)
specifier|public
name|ClientProtocol
name|create
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createRPCProxy
argument_list|(
name|addr
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|createRPCProxy (InetSocketAddress addr, Configuration conf)
specifier|private
name|ClientProtocol
name|createRPCProxy
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|ClientProtocol
operator|)
name|RPC
operator|.
name|getProxy
argument_list|(
name|ClientProtocol
operator|.
name|class
argument_list|,
name|ClientProtocol
operator|.
name|versionID
argument_list|,
name|addr
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|conf
argument_list|,
name|NetUtils
operator|.
name|getSocketFactory
argument_list|(
name|conf
argument_list|,
name|ClientProtocol
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close (ClientProtocol clientProtocol)
specifier|public
name|void
name|close
parameter_list|(
name|ClientProtocol
name|clientProtocol
parameter_list|)
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|clientProtocol
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

