begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapreduce.server.tasktracker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskController
operator|.
name|InitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Localizer
specifier|public
class|class
name|Localizer
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Localizer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|localDirs
specifier|private
name|String
index|[]
name|localDirs
decl_stmt|;
DECL|field|taskController
specifier|private
name|TaskController
name|taskController
decl_stmt|;
comment|/**    * Create a Localizer instance    *     * @param fileSys    * @param lDirs    * @param tc    */
DECL|method|Localizer (FileSystem fileSys, String[] lDirs, TaskController tc)
specifier|public
name|Localizer
parameter_list|(
name|FileSystem
name|fileSys
parameter_list|,
name|String
index|[]
name|lDirs
parameter_list|,
name|TaskController
name|tc
parameter_list|)
block|{
name|fs
operator|=
name|fileSys
expr_stmt|;
name|localDirs
operator|=
name|lDirs
expr_stmt|;
name|taskController
operator|=
name|tc
expr_stmt|;
block|}
comment|// Data-structure for synchronizing localization of user directories.
DECL|field|localizedUsers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicBoolean
argument_list|>
name|localizedUsers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AtomicBoolean
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Initialize the local directories for a particular user on this TT. This    * involves creation and setting permissions of the following directories    *<ul>    *<li>$mapreduce.cluster.local.dir/taskTracker/$user</li>    *<li>$mapreduce.cluster.local.dir/taskTracker/$user/jobcache</li>    *<li>$mapreduce.cluster.local.dir/taskTracker/$user/distcache</li>    *</ul>    *     * @param user    * @throws IOException    */
DECL|method|initializeUserDirs (String user)
specifier|public
name|void
name|initializeUserDirs
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
comment|// This shouldn't happen in general
throw|throw
operator|new
name|IOException
argument_list|(
literal|"User is null. Cannot initialized user-directories."
argument_list|)
throw|;
block|}
name|AtomicBoolean
name|localizedUser
decl_stmt|;
synchronized|synchronized
init|(
name|localizedUsers
init|)
block|{
if|if
condition|(
operator|!
name|localizedUsers
operator|.
name|containsKey
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|localizedUsers
operator|.
name|put
argument_list|(
name|user
argument_list|,
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|localizedUser
operator|=
name|localizedUsers
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|localizedUser
init|)
block|{
if|if
condition|(
name|localizedUser
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// User-directories are already localized for this user.
name|LOG
operator|.
name|info
argument_list|(
literal|"User-directories for the user "
operator|+
name|user
operator|+
literal|" are already initialized on this TT. Not doing anything."
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing user "
operator|+
name|user
operator|+
literal|" on this TT."
argument_list|)
expr_stmt|;
name|boolean
name|userDirStatus
init|=
literal|false
decl_stmt|;
name|boolean
name|jobCacheDirStatus
init|=
literal|false
decl_stmt|;
name|boolean
name|distributedCacheDirStatus
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getUserDir
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
comment|// Set up the user-directory.
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|userDir
argument_list|)
operator|||
name|fs
operator|.
name|mkdirs
argument_list|(
name|userDir
argument_list|)
condition|)
block|{
comment|// Set permissions on the user-directory
name|fs
operator|.
name|setPermission
argument_list|(
name|userDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|userDirStatus
operator|=
literal|true
expr_stmt|;
comment|// Set up the jobcache directory
name|Path
name|jobCacheDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getJobCacheSubdir
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|jobCacheDir
argument_list|)
operator|||
name|fs
operator|.
name|mkdirs
argument_list|(
name|jobCacheDir
argument_list|)
condition|)
block|{
comment|// Set permissions on the jobcache-directory
name|fs
operator|.
name|setPermission
argument_list|(
name|jobCacheDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|jobCacheDirStatus
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create job cache directory : "
operator|+
name|jobCacheDir
argument_list|)
expr_stmt|;
block|}
comment|// Set up the cache directory used for distributed cache files
name|Path
name|distributedCacheDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|TaskTracker
operator|.
name|getPrivateDistributedCacheDir
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|distributedCacheDir
argument_list|)
operator|||
name|fs
operator|.
name|mkdirs
argument_list|(
name|distributedCacheDir
argument_list|)
condition|)
block|{
comment|// Set permissions on the distcache-directory
name|fs
operator|.
name|setPermission
argument_list|(
name|distributedCacheDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
name|distributedCacheDirStatus
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create distributed-cache directory : "
operator|+
name|distributedCacheDir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create the user directory : "
operator|+
name|userDir
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|userDirStatus
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not able to initialize user directories "
operator|+
literal|"in any of the configured local directories for user "
operator|+
name|user
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|jobCacheDirStatus
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not able to initialize job-cache directories "
operator|+
literal|"in any of the configured local directories for user "
operator|+
name|user
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|distributedCacheDirStatus
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not able to initialize distributed-cache directories "
operator|+
literal|"in any of the configured local directories for user "
operator|+
name|user
argument_list|)
throw|;
block|}
comment|// Now, run the task-controller specific code to initialize the
comment|// user-directories.
name|InitializationContext
name|context
init|=
operator|new
name|InitializationContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|context
operator|.
name|workDir
operator|=
literal|null
expr_stmt|;
name|taskController
operator|.
name|initializeUser
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Localization of the user is done
name|localizedUser
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Prepare the job directories for a given job. To be called by the job    * localization code, only if the job is not already localized.    *     *<br>    * Here, we set 700 permissions on the job directories created on all disks.    * This we do so as to avoid any misuse by other users till the time    * {@link TaskController#initializeJob(JobInitializationContext)} is run at a    * later time to set proper private permissions on the job directories.<br>    *     * @param user    * @param jobId    * @throws IOException    */
DECL|method|initializeJobDirs (String user, JobID jobId)
specifier|public
name|void
name|initializeJobDirs
parameter_list|(
name|String
name|user
parameter_list|,
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|initJobDirStatus
init|=
literal|false
decl_stmt|;
name|String
name|jobDirPath
init|=
name|TaskTracker
operator|.
name|getLocalJobDir
argument_list|(
name|user
argument_list|,
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|Path
name|jobDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|jobDirPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|jobDir
argument_list|)
condition|)
block|{
comment|// this will happen on a partial execution of localizeJob. Sometimes
comment|// copying job.xml to the local disk succeeds but copying job.jar might
comment|// throw out an exception. We should clean up and then try again.
name|fs
operator|.
name|delete
argument_list|(
name|jobDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|jobDirStatus
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|jobDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jobDirStatus
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not able to create job directory "
operator|+
name|jobDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|initJobDirStatus
operator|=
name|initJobDirStatus
operator|||
name|jobDirStatus
expr_stmt|;
comment|// job-dir has to be private to the TT
name|fs
operator|.
name|setPermission
argument_list|(
name|jobDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|initJobDirStatus
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not able to initialize job directories "
operator|+
literal|"in any of the configured local directories for job "
operator|+
name|jobId
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create taskDirs on all the disks. Otherwise, in some cases, like when    * LinuxTaskController is in use, child might wish to balance load across    * disks but cannot itself create attempt directory because of the fact that    * job directory is writable only by the TT.    *     * @param user    * @param jobId    * @param attemptId    * @param isCleanupAttempt    * @throws IOException    */
DECL|method|initializeAttemptDirs (String user, String jobId, String attemptId, boolean isCleanupAttempt)
specifier|public
name|void
name|initializeAttemptDirs
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|jobId
parameter_list|,
name|String
name|attemptId
parameter_list|,
name|boolean
name|isCleanupAttempt
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|initStatus
init|=
literal|false
decl_stmt|;
name|String
name|attemptDirPath
init|=
name|TaskTracker
operator|.
name|getLocalTaskDir
argument_list|(
name|user
argument_list|,
name|jobId
argument_list|,
name|attemptId
argument_list|,
name|isCleanupAttempt
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|Path
name|localAttemptDir
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|attemptDirPath
argument_list|)
decl_stmt|;
name|boolean
name|attemptDirStatus
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|localAttemptDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|attemptDirStatus
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"localAttemptDir "
operator|+
name|localAttemptDir
operator|.
name|toString
argument_list|()
operator|+
literal|" couldn't be created."
argument_list|)
expr_stmt|;
block|}
name|initStatus
operator|=
name|initStatus
operator|||
name|attemptDirStatus
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|initStatus
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not able to initialize attempt directories "
operator|+
literal|"in any of the configured local directories for the attempt "
operator|+
name|attemptId
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create job log directory and set appropriate permissions for the directory.    *     * @param jobId    */
DECL|method|initializeJobLogDir (JobID jobId)
specifier|public
name|void
name|initializeJobLogDir
parameter_list|(
name|JobID
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|jobUserLogDir
init|=
operator|new
name|Path
argument_list|(
name|TaskLog
operator|.
name|getJobDir
argument_list|(
name|jobId
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|mkdirs
argument_list|(
name|jobUserLogDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not create job user log directory: "
operator|+
name|jobUserLogDir
argument_list|)
throw|;
block|}
name|fs
operator|.
name|setPermission
argument_list|(
name|jobUserLogDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|0700
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

