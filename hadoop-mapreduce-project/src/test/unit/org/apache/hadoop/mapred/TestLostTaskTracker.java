begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
operator|.
name|FakeClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|TaskTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_comment
comment|/**  * Tests that trackers that don't heartbeat within a given time are considered  * lost. Note that this test is not a direct replacement for  * {@link TestLostTracker} since it doesn't test that a task  * running on a lost tracker is retried on another tracker.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|TestLostTaskTracker
specifier|public
class|class
name|TestLostTaskTracker
extends|extends
name|TestCase
block|{
DECL|field|jobTracker
specifier|private
name|JobTracker
name|jobTracker
decl_stmt|;
DECL|field|clock
specifier|private
name|FakeClock
name|clock
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_HTTP_ADDRESS
argument_list|,
literal|"0.0.0.0:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|JTConfig
operator|.
name|JT_TRACKER_EXPIRY_INTERVAL
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|clock
operator|=
operator|new
name|FakeClock
argument_list|()
expr_stmt|;
comment|// We use a "partial mock" of JobTracker which lets us see when certain
comment|// methods are called. If we were writing JobTracker from scratch then
comment|// we would make it call another object which we would mock out instead
comment|// (and use a real JobTracker) so we could perform assertions on the mock.
comment|// See http://mockito.googlecode.com/svn/branches/1.8.0/javadoc/org/mockito/Mockito.html#16
name|jobTracker
operator|=
name|spy
argument_list|(
operator|new
name|JobTracker
argument_list|(
name|conf
argument_list|,
name|clock
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLostTaskTrackerCalledAfterExpiryTime ()
specifier|public
name|void
name|testLostTaskTrackerCalledAfterExpiryTime
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|tracker1
init|=
literal|"tracker_tracker1:1000"
decl_stmt|;
name|String
name|tracker2
init|=
literal|"tracker_tracker2:1000"
decl_stmt|;
name|establishFirstContact
argument_list|(
name|tracker1
argument_list|)
expr_stmt|;
comment|// Wait long enough for tracker1 to be considered lost
comment|// We could have used a Mockito stub here, except we don't know how many
comment|// times JobTracker calls getTime() on the clock, so a static mock
comment|// is appropriate.
name|clock
operator|.
name|advance
argument_list|(
literal|8
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|establishFirstContact
argument_list|(
name|tracker2
argument_list|)
expr_stmt|;
name|jobTracker
operator|.
name|checkExpiredTrackers
argument_list|()
expr_stmt|;
comment|// Now we check that JobTracker's lostTaskTracker() was called for tracker1
comment|// but not for tracker2.
comment|// We use an ArgumentCaptor to capture the task tracker object
comment|// in the lostTaskTracker() call, so we can perform an assertion on its
comment|// name. (We could also have used a custom matcher, see below.)
comment|// See http://mockito.googlecode.com/svn/branches/1.8.0/javadoc/org/mockito/Mockito.html#15
name|ArgumentCaptor
argument_list|<
name|TaskTracker
argument_list|>
name|argument
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|TaskTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|jobTracker
argument_list|)
operator|.
name|lostTaskTracker
argument_list|(
name|argument
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tracker1
argument_list|,
name|argument
operator|.
name|getValue
argument_list|()
operator|.
name|getTrackerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check tracker2 was not lost by using the never() construct
comment|// We use a custom Hamcrest matcher to check that it was indeed tracker2
comment|// that didn't match (since tracker1 did match).
comment|// See http://mockito.googlecode.com/svn/branches/1.8.0/javadoc/org/mockito/Mockito.html#3
name|verify
argument_list|(
name|jobTracker
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|lostTaskTracker
argument_list|(
name|argThat
argument_list|(
name|taskTrackerWithName
argument_list|(
name|tracker2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|taskTrackerWithName (final String name)
specifier|private
name|Matcher
argument_list|<
name|TaskTracker
argument_list|>
name|taskTrackerWithName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ArgumentMatcher
argument_list|<
name|TaskTracker
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|taskTracker
parameter_list|)
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TaskTracker
operator|)
name|taskTracker
operator|)
operator|.
name|getTrackerName
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|establishFirstContact (String tracker)
specifier|private
name|void
name|establishFirstContact
parameter_list|(
name|String
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
name|TaskTrackerStatus
name|status
init|=
operator|new
name|TaskTrackerStatus
argument_list|(
name|tracker
argument_list|,
name|JobInProgress
operator|.
name|convertTrackerNameToHostName
argument_list|(
name|tracker
argument_list|)
argument_list|)
decl_stmt|;
name|jobTracker
operator|.
name|heartbeat
argument_list|(
name|status
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

