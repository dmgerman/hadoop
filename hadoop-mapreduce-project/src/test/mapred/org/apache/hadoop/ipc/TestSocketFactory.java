begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|StandardSocketFactory
import|;
end_import

begin_comment
comment|/**  * This class checks that RPCs can use specialized socket factories.  */
end_comment

begin_class
DECL|class|TestSocketFactory
specifier|public
class|class
name|TestSocketFactory
extends|extends
name|TestCase
block|{
comment|/**    * Check that we can reach a NameNode or a JobTracker using a specific    * socket factory    */
DECL|method|testSocketFactory ()
specifier|public
name|void
name|testSocketFactory
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create a standard mini-cluster
name|Configuration
name|sconf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
argument_list|(
name|sconf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|int
name|nameNodePort
init|=
name|cluster
operator|.
name|getNameNodePort
argument_list|()
decl_stmt|;
comment|// Get a reference to its DFS directly
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|directDfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
comment|// Get another reference via network using a specific socket factory
name|Configuration
name|cconf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|cconf
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"hdfs://localhost:%s/"
argument_list|,
name|nameNodePort
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|cconf
operator|.
name|set
argument_list|(
literal|"hadoop.rpc.socket.factory.class.default"
argument_list|,
literal|"org.apache.hadoop.ipc.DummySocketFactory"
argument_list|)
expr_stmt|;
name|cconf
operator|.
name|set
argument_list|(
literal|"hadoop.rpc.socket.factory.class.ClientProtocol"
argument_list|,
literal|"org.apache.hadoop.ipc.DummySocketFactory"
argument_list|)
expr_stmt|;
name|cconf
operator|.
name|set
argument_list|(
literal|"hadoop.rpc.socket.factory.class.JobSubmissionProtocol"
argument_list|,
literal|"org.apache.hadoop.ipc.DummySocketFactory"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|cconf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|instanceof
name|DistributedFileSystem
argument_list|)
expr_stmt|;
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
decl_stmt|;
name|JobClient
name|client
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// This will test RPC to the NameNode only.
comment|// could we test Client-DataNode connections?
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"/dir"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|directDfs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|directDfs
operator|.
name|mkdirs
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|directDfs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// This will test TPC to a JobTracker
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|sconf
argument_list|)
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|jobTrackerPort
init|=
name|mr
operator|.
name|getJobTrackerPort
argument_list|()
decl_stmt|;
name|JobConf
name|jconf
init|=
operator|new
name|JobConf
argument_list|(
name|cconf
argument_list|)
decl_stmt|;
name|jconf
operator|.
name|set
argument_list|(
literal|"mapred.job.tracker"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"localhost:%d"
argument_list|,
name|jobTrackerPort
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|jconf
operator|.
name|set
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|CLASSIC_FRAMEWORK_NAME
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|JobClient
argument_list|(
name|jconf
argument_list|)
expr_stmt|;
name|JobStatus
index|[]
name|jobs
init|=
name|client
operator|.
name|jobsToComplete
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|jobs
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// nothing we can do
name|ignored
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
name|dfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// nothing we can do
name|ignored
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|directDfs
operator|!=
literal|null
condition|)
name|directDfs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// nothing we can do
name|ignored
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// nothing we can do
name|ignored
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|ignored
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|/**  * Dummy socket factory which shift TPC ports by subtracting 10 when  * establishing a connection  */
end_comment

begin_class
DECL|class|DummySocketFactory
class|class
name|DummySocketFactory
extends|extends
name|StandardSocketFactory
block|{
comment|/**    * Default empty constructor (for use with the reflection API).    */
DECL|method|DummySocketFactory ()
specifier|public
name|DummySocketFactory
parameter_list|()
block|{   }
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|createSocket ()
specifier|public
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Socket
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|connect
parameter_list|(
name|SocketAddress
name|addr
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|addr
operator|instanceof
name|InetSocketAddress
operator|)
assert|;
name|InetSocketAddress
name|iaddr
init|=
operator|(
name|InetSocketAddress
operator|)
name|addr
decl_stmt|;
name|SocketAddress
name|newAddr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iaddr
operator|.
name|isUnresolved
argument_list|()
condition|)
name|newAddr
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|iaddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|iaddr
operator|.
name|getPort
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
else|else
name|newAddr
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|iaddr
operator|.
name|getAddress
argument_list|()
argument_list|,
name|iaddr
operator|.
name|getPort
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Test socket: rerouting %s to %s\n"
argument_list|,
name|iaddr
argument_list|,
name|newAddr
argument_list|)
expr_stmt|;
name|super
operator|.
name|connect
argument_list|(
name|newAddr
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|DummySocketFactory
operator|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// Dummy hash code (to make find bugs happy)
return|return
literal|53
return|;
block|}
block|}
end_class

end_unit

