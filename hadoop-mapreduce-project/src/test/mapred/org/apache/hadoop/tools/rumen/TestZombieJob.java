begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestZombieJob
specifier|public
class|class
name|TestZombieJob
block|{
DECL|field|epsilon
specifier|final
name|double
name|epsilon
init|=
literal|0.01
decl_stmt|;
DECL|field|attemptTimesPercentiles
specifier|private
specifier|final
name|int
index|[]
name|attemptTimesPercentiles
init|=
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|50
block|,
literal|90
block|}
decl_stmt|;
DECL|field|succeededCDF
specifier|private
name|long
index|[]
name|succeededCDF
init|=
operator|new
name|long
index|[]
block|{
literal|5268
block|,
literal|5268
block|,
literal|5268
block|,
literal|5268
block|,
literal|5268
block|}
decl_stmt|;
DECL|field|failedCDF
specifier|private
name|long
index|[]
name|failedCDF
init|=
operator|new
name|long
index|[]
block|{
literal|18592
block|,
literal|18592
block|,
literal|18592
block|,
literal|18592
block|,
literal|18592
block|}
decl_stmt|;
DECL|field|expectedPs
specifier|private
name|double
index|[]
name|expectedPs
init|=
operator|new
name|double
index|[]
block|{
literal|0.000001
block|,
literal|0.18707660239708182
block|,
literal|0.0013027618551328818
block|,
literal|2.605523710265763E
operator|-
literal|4
block|}
decl_stmt|;
DECL|field|mapTaskCounts
specifier|private
specifier|final
name|long
index|[]
name|mapTaskCounts
init|=
operator|new
name|long
index|[]
block|{
literal|7838525L
block|,
literal|342277L
block|,
literal|100228L
block|,
literal|1564L
block|,
literal|1234L
block|}
decl_stmt|;
DECL|field|reduceTaskCounts
specifier|private
specifier|final
name|long
index|[]
name|reduceTaskCounts
init|=
operator|new
name|long
index|[]
block|{
literal|4405338L
block|,
literal|139391L
block|,
literal|1514383L
block|,
literal|139391
block|,
literal|1234L
block|}
decl_stmt|;
DECL|field|loggedJobs
name|List
argument_list|<
name|LoggedJob
argument_list|>
name|loggedJobs
init|=
operator|new
name|ArrayList
argument_list|<
name|LoggedJob
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jobStories
name|List
argument_list|<
name|JobStory
argument_list|>
name|jobStories
init|=
operator|new
name|ArrayList
argument_list|<
name|JobStory
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"rumen/zombie"
argument_list|)
decl_stmt|;
name|ZombieJobProducer
name|parser
init|=
operator|new
name|ZombieJobProducer
argument_list|(
operator|new
name|Path
argument_list|(
name|rootInputFile
argument_list|,
literal|"input-trace.json"
argument_list|)
argument_list|,
operator|new
name|ZombieCluster
argument_list|(
operator|new
name|Path
argument_list|(
name|rootInputFile
argument_list|,
literal|"input-topology.json"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|JobStory
name|job
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|job
operator|=
name|parser
operator|.
name|getNextJob
argument_list|()
expr_stmt|;
name|ZombieJob
name|zJob
init|=
operator|(
name|ZombieJob
operator|)
name|job
decl_stmt|;
name|LoggedJob
name|loggedJob
init|=
name|zJob
operator|.
name|getLoggedJob
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|":"
operator|+
name|job
operator|.
name|getNumberMaps
argument_list|()
operator|+
literal|"m, "
operator|+
name|job
operator|.
name|getNumberReduces
argument_list|()
operator|+
literal|"r"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|loggedJob
operator|.
name|getOutcome
argument_list|()
operator|+
literal|", "
operator|+
name|loggedJob
operator|.
name|getJobtype
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Input Splits -- "
operator|+
name|job
operator|.
name|getInputSplits
argument_list|()
operator|.
name|length
operator|+
literal|", "
operator|+
name|job
operator|.
name|getNumberMaps
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successful Map CDF -------"
argument_list|)
expr_stmt|;
for|for
control|(
name|LoggedDiscreteCDF
name|cdf
range|:
name|loggedJob
operator|.
name|getSuccessfulMapAttemptCDFs
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cdf
operator|.
name|getNumberValues
argument_list|()
operator|+
literal|": "
operator|+
name|cdf
operator|.
name|getMinimum
argument_list|()
operator|+
literal|"--"
operator|+
name|cdf
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LoggedSingleRelativeRanking
name|ranking
range|:
name|cdf
operator|.
name|getRankings
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|ranking
operator|.
name|getRelativeRanking
argument_list|()
operator|+
literal|":"
operator|+
name|ranking
operator|.
name|getDatum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed Map CDF -----------"
argument_list|)
expr_stmt|;
for|for
control|(
name|LoggedDiscreteCDF
name|cdf
range|:
name|loggedJob
operator|.
name|getFailedMapAttemptCDFs
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cdf
operator|.
name|getNumberValues
argument_list|()
operator|+
literal|": "
operator|+
name|cdf
operator|.
name|getMinimum
argument_list|()
operator|+
literal|"--"
operator|+
name|cdf
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LoggedSingleRelativeRanking
name|ranking
range|:
name|cdf
operator|.
name|getRankings
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|ranking
operator|.
name|getRelativeRanking
argument_list|()
operator|+
literal|":"
operator|+
name|ranking
operator|.
name|getDatum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successful Reduce CDF ----"
argument_list|)
expr_stmt|;
name|LoggedDiscreteCDF
name|cdf
init|=
name|loggedJob
operator|.
name|getSuccessfulReduceAttemptCDF
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cdf
operator|.
name|getNumberValues
argument_list|()
operator|+
literal|": "
operator|+
name|cdf
operator|.
name|getMinimum
argument_list|()
operator|+
literal|"--"
operator|+
name|cdf
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LoggedSingleRelativeRanking
name|ranking
range|:
name|cdf
operator|.
name|getRankings
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|ranking
operator|.
name|getRelativeRanking
argument_list|()
operator|+
literal|":"
operator|+
name|ranking
operator|.
name|getDatum
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed Reduce CDF --------"
argument_list|)
expr_stmt|;
name|cdf
operator|=
name|loggedJob
operator|.
name|getFailedReduceAttemptCDF
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cdf
operator|.
name|getNumberValues
argument_list|()
operator|+
literal|": "
operator|+
name|cdf
operator|.
name|getMinimum
argument_list|()
operator|+
literal|"--"
operator|+
name|cdf
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LoggedSingleRelativeRanking
name|ranking
range|:
name|cdf
operator|.
name|getRankings
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|ranking
operator|.
name|getRelativeRanking
argument_list|()
operator|+
literal|":"
operator|+
name|ranking
operator|.
name|getDatum
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"map attempts to success -- "
argument_list|)
expr_stmt|;
for|for
control|(
name|double
name|p
range|:
name|loggedJob
operator|.
name|getMapperTriesToSucceed
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|p
operator|+
literal|", "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"==============="
argument_list|)
expr_stmt|;
name|loggedJobs
operator|.
name|add
argument_list|(
name|loggedJob
argument_list|)
expr_stmt|;
name|jobStories
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFirstJob ()
specifier|public
name|void
name|testFirstJob
parameter_list|()
block|{
comment|// 20th job seems reasonable: "totalMaps":329,"totalReduces":101
comment|// successful map: 80 node-local, 196 rack-local, 53 rack-remote, 2 unknown
comment|// failed map: 0-0-0-1
comment|// successful reduce: 99 failed reduce: 13
comment|// map attempts to success -- 0.9969879518072289, 0.0030120481927710845,
name|JobStory
name|job
init|=
name|jobStories
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|job
operator|.
name|getNumberMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|job
operator|.
name|getNumberReduces
argument_list|()
argument_list|)
expr_stmt|;
comment|// get splits
name|TaskAttemptInfo
name|taInfo
init|=
literal|null
decl_stmt|;
name|long
name|expectedRuntime
init|=
literal|2423
decl_stmt|;
comment|// get a succeeded map task attempt, expect the exact same task attempt
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|14
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRuntime
argument_list|,
name|taInfo
operator|.
name|getRuntime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a succeeded map attempt, but reschedule with different locality.
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|14
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|14
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
name|expectedRuntime
operator|=
literal|97502
expr_stmt|;
comment|// get a succeeded reduce task attempt, expect the exact same task attempt
name|taInfo
operator|=
name|job
operator|.
name|getTaskAttemptInfo
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|14
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a failed reduce task attempt, expect the exact same task attempt
name|taInfo
operator|=
name|job
operator|.
name|getTaskAttemptInfo
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|14
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a non-exist reduce task attempt, expect a made-up task attempt
comment|// TODO fill in test case
block|}
annotation|@
name|Test
DECL|method|testSecondJob ()
specifier|public
name|void
name|testSecondJob
parameter_list|()
block|{
comment|// 7th job has many failed tasks.
comment|// 3204 m, 0 r
comment|// successful maps 497-586-23-1, failed maps 0-0-0-2714
comment|// map attempts to success -- 0.8113600833767587, 0.18707660239708182,
comment|// 0.0013027618551328818, 2.605523710265763E-4,
name|JobStory
name|job
init|=
name|jobStories
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|job
operator|.
name|getNumberMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|job
operator|.
name|getNumberReduces
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptInfo
name|taInfo
init|=
literal|null
decl_stmt|;
comment|// get a succeeded map task attempt
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|17
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a succeeded map task attempt, with different locality
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|17
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|17
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a failed map task attempt
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|14
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1927
argument_list|,
name|taInfo
operator|.
name|getRuntime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a failed map task attempt, with different locality
comment|// TODO: this test does not make sense here, because I don't have
comment|// available data set.
block|}
annotation|@
name|Test
DECL|method|testFourthJob ()
specifier|public
name|void
name|testFourthJob
parameter_list|()
block|{
comment|// 7th job has many failed tasks.
comment|// 3204 m, 0 r
comment|// successful maps 497-586-23-1, failed maps 0-0-0-2714
comment|// map attempts to success -- 0.8113600833767587, 0.18707660239708182,
comment|// 0.0013027618551328818, 2.605523710265763E-4,
name|JobStory
name|job
init|=
name|jobStories
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|131
argument_list|,
name|job
operator|.
name|getNumberMaps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|47
argument_list|,
name|job
operator|.
name|getNumberReduces
argument_list|()
argument_list|)
expr_stmt|;
name|TaskAttemptInfo
name|taInfo
init|=
literal|null
decl_stmt|;
comment|// get a succeeded map task attempt
name|long
name|runtime
init|=
literal|5268
decl_stmt|;
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|113
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|runtime
argument_list|,
name|taInfo
operator|.
name|getRuntime
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a succeeded map task attempt, with different locality
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|113
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|runtime
argument_list|,
name|taInfo
operator|.
name|getRuntime
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|113
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|long
call|)
argument_list|(
name|runtime
operator|/
literal|1.5
argument_list|)
argument_list|,
name|taInfo
operator|.
name|getRuntime
argument_list|()
argument_list|)
expr_stmt|;
comment|// get a failed map task attempt
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
literal|113
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18592
argument_list|,
name|taInfo
operator|.
name|getRuntime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|FAILED
argument_list|,
name|taInfo
operator|.
name|getRunState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecordIOInfo ()
specifier|public
name|void
name|testRecordIOInfo
parameter_list|()
block|{
name|JobStory
name|job
init|=
name|jobStories
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|TaskInfo
name|mapTask
init|=
name|job
operator|.
name|getTaskInfo
argument_list|(
name|TaskType
operator|.
name|MAP
argument_list|,
literal|113
argument_list|)
decl_stmt|;
name|TaskInfo
name|reduceTask
init|=
name|job
operator|.
name|getTaskInfo
argument_list|(
name|TaskType
operator|.
name|REDUCE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapTaskCounts
index|[
literal|0
index|]
argument_list|,
name|mapTask
operator|.
name|getInputBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapTaskCounts
index|[
literal|1
index|]
argument_list|,
name|mapTask
operator|.
name|getInputRecords
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapTaskCounts
index|[
literal|2
index|]
argument_list|,
name|mapTask
operator|.
name|getOutputBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapTaskCounts
index|[
literal|3
index|]
argument_list|,
name|mapTask
operator|.
name|getOutputRecords
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapTaskCounts
index|[
literal|4
index|]
argument_list|,
name|mapTask
operator|.
name|getTaskMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reduceTaskCounts
index|[
literal|0
index|]
argument_list|,
name|reduceTask
operator|.
name|getInputBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reduceTaskCounts
index|[
literal|1
index|]
argument_list|,
name|reduceTask
operator|.
name|getInputRecords
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reduceTaskCounts
index|[
literal|2
index|]
argument_list|,
name|reduceTask
operator|.
name|getOutputBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reduceTaskCounts
index|[
literal|3
index|]
argument_list|,
name|reduceTask
operator|.
name|getOutputRecords
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reduceTaskCounts
index|[
literal|4
index|]
argument_list|,
name|reduceTask
operator|.
name|getTaskMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMakeUpInfo ()
specifier|public
name|void
name|testMakeUpInfo
parameter_list|()
block|{
comment|// get many non-exist tasks
comment|// total 3204 map tasks, 3300 is a non-exist task.
name|checkMakeUpTask
argument_list|(
name|jobStories
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|113
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMakeUpTask (JobStory job, int taskNumber, int locality)
specifier|private
name|void
name|checkMakeUpTask
parameter_list|(
name|JobStory
name|job
parameter_list|,
name|int
name|taskNumber
parameter_list|,
name|int
name|locality
parameter_list|)
block|{
name|TaskAttemptInfo
name|taInfo
init|=
literal|null
decl_stmt|;
name|Histogram
name|sampleSucceeded
init|=
operator|new
name|Histogram
argument_list|()
decl_stmt|;
name|Histogram
name|sampleFailed
init|=
operator|new
name|Histogram
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|sampleAttempts
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|attemptId
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|taInfo
operator|=
name|job
operator|.
name|getMapTaskAttemptInfoAdjusted
argument_list|(
name|taskNumber
argument_list|,
name|attemptId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|taInfo
operator|.
name|getRunState
argument_list|()
operator|==
name|State
operator|.
name|SUCCEEDED
condition|)
block|{
name|sampleSucceeded
operator|.
name|enter
argument_list|(
name|taInfo
operator|.
name|getRuntime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|sampleFailed
operator|.
name|enter
argument_list|(
name|taInfo
operator|.
name|getRuntime
argument_list|()
argument_list|)
expr_stmt|;
name|attemptId
operator|++
expr_stmt|;
block|}
name|sampleAttempts
operator|.
name|add
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
block|}
comment|// check state distribution
name|int
index|[]
name|countTries
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|int
name|attempts
range|:
name|sampleAttempts
control|)
block|{
name|assertTrue
argument_list|(
name|attempts
operator|<
literal|4
argument_list|)
expr_stmt|;
name|countTries
index|[
name|attempts
index|]
operator|++
expr_stmt|;
block|}
comment|/*      * System.out.print("Generated map attempts to success -- "); for (int      * count: countTries) { System.out.print((double)count/sampleAttempts.size()      * + ", "); } System.out.println(); System.out.println("===============");      */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|int
name|count
init|=
name|countTries
index|[
name|i
index|]
decl_stmt|;
name|double
name|p
init|=
operator|(
name|double
operator|)
name|count
operator|/
name|sampleAttempts
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedPs
index|[
name|i
index|]
operator|-
name|p
operator|<
name|epsilon
argument_list|)
expr_stmt|;
block|}
comment|// check succeeded attempts runtime distribution
name|long
index|[]
name|expectedCDF
init|=
name|succeededCDF
decl_stmt|;
name|LoggedDiscreteCDF
name|cdf
init|=
operator|new
name|LoggedDiscreteCDF
argument_list|()
decl_stmt|;
name|cdf
operator|.
name|setCDF
argument_list|(
name|sampleSucceeded
argument_list|,
name|attemptTimesPercentiles
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|/*      * System.out.println("generated succeeded map runtime distribution");      * System.out.println(cdf.getNumberValues() + ": " + cdf.getMinimum() + "--"      * + cdf.getMaximum()); for (LoggedSingleRelativeRanking ranking:      * cdf.getRankings()) { System.out.println("   " +      * ranking.getRelativeRanking() + ":" + ranking.getDatum()); }      */
name|assertRuntimeEqual
argument_list|(
name|cdf
operator|.
name|getMinimum
argument_list|()
argument_list|,
name|expectedCDF
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertRuntimeEqual
argument_list|(
name|cdf
operator|.
name|getMaximum
argument_list|()
argument_list|,
name|expectedCDF
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|LoggedSingleRelativeRanking
name|ranking
init|=
name|cdf
operator|.
name|getRankings
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertRuntimeEqual
argument_list|(
name|expectedCDF
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|ranking
operator|.
name|getDatum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check failed attempts runtime distribution
name|expectedCDF
operator|=
name|failedCDF
expr_stmt|;
name|cdf
operator|=
operator|new
name|LoggedDiscreteCDF
argument_list|()
expr_stmt|;
name|cdf
operator|.
name|setCDF
argument_list|(
name|sampleFailed
argument_list|,
name|attemptTimesPercentiles
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"generated failed map runtime distribution"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cdf
operator|.
name|getNumberValues
argument_list|()
operator|+
literal|": "
operator|+
name|cdf
operator|.
name|getMinimum
argument_list|()
operator|+
literal|"--"
operator|+
name|cdf
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LoggedSingleRelativeRanking
name|ranking
range|:
name|cdf
operator|.
name|getRankings
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|ranking
operator|.
name|getRelativeRanking
argument_list|()
operator|+
literal|":"
operator|+
name|ranking
operator|.
name|getDatum
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertRuntimeEqual
argument_list|(
name|cdf
operator|.
name|getMinimum
argument_list|()
argument_list|,
name|expectedCDF
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertRuntimeEqual
argument_list|(
name|cdf
operator|.
name|getMaximum
argument_list|()
argument_list|,
name|expectedCDF
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|LoggedSingleRelativeRanking
name|ranking
init|=
name|cdf
operator|.
name|getRankings
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertRuntimeEqual
argument_list|(
name|expectedCDF
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|ranking
operator|.
name|getDatum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertRuntimeEqual (long expected, long generated)
specifier|private
name|void
name|assertRuntimeEqual
parameter_list|(
name|long
name|expected
parameter_list|,
name|long
name|generated
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|generated
operator|>
operator|-
literal|1000
operator|&&
name|generated
operator|<
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|epsilon
init|=
name|Math
operator|.
name|max
argument_list|(
name|expected
operator|/
literal|10
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|-
name|generated
operator|>
operator|-
name|epsilon
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|-
name|generated
operator|<
name|epsilon
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

