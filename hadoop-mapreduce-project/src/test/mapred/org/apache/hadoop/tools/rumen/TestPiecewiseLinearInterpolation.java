begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestPiecewiseLinearInterpolation
specifier|public
class|class
name|TestPiecewiseLinearInterpolation
block|{
DECL|field|maximumRelativeError
specifier|static
specifier|private
name|double
name|maximumRelativeError
init|=
literal|0.002D
decl_stmt|;
DECL|method|makeRR (double ranking, long datum)
specifier|static
specifier|private
name|LoggedSingleRelativeRanking
name|makeRR
parameter_list|(
name|double
name|ranking
parameter_list|,
name|long
name|datum
parameter_list|)
block|{
name|LoggedSingleRelativeRanking
name|result
init|=
operator|new
name|LoggedSingleRelativeRanking
argument_list|()
decl_stmt|;
name|result
operator|.
name|setDatum
argument_list|(
name|datum
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRelativeRanking
argument_list|(
name|ranking
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Test
DECL|method|testOneRun ()
specifier|public
name|void
name|testOneRun
parameter_list|()
block|{
name|LoggedDiscreteCDF
name|input
init|=
operator|new
name|LoggedDiscreteCDF
argument_list|()
decl_stmt|;
name|input
operator|.
name|setMinimum
argument_list|(
literal|100000L
argument_list|)
expr_stmt|;
name|input
operator|.
name|setMaximum
argument_list|(
literal|1100000L
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|LoggedSingleRelativeRanking
argument_list|>
name|rankings
init|=
operator|new
name|ArrayList
argument_list|<
name|LoggedSingleRelativeRanking
argument_list|>
argument_list|()
decl_stmt|;
name|rankings
operator|.
name|add
argument_list|(
name|makeRR
argument_list|(
literal|0.1
argument_list|,
literal|200000L
argument_list|)
argument_list|)
expr_stmt|;
name|rankings
operator|.
name|add
argument_list|(
name|makeRR
argument_list|(
literal|0.5
argument_list|,
literal|800000L
argument_list|)
argument_list|)
expr_stmt|;
name|rankings
operator|.
name|add
argument_list|(
name|makeRR
argument_list|(
literal|0.9
argument_list|,
literal|1000000L
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|setRankings
argument_list|(
name|rankings
argument_list|)
expr_stmt|;
name|input
operator|.
name|setNumberValues
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|CDFRandomGenerator
name|gen
init|=
operator|new
name|CDFPiecewiseLinearRandomGenerator
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Histogram
name|values
init|=
operator|new
name|Histogram
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000000
condition|;
operator|++
name|i
control|)
block|{
name|long
name|value
init|=
name|gen
operator|.
name|randomValue
argument_list|()
decl_stmt|;
name|values
operator|.
name|enter
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/*      * Now we build a percentiles CDF, and compute the sum of the squares of the      * actual percentiles vrs. the predicted percentiles      */
name|int
index|[]
name|percentiles
init|=
operator|new
name|int
index|[
literal|99
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|99
condition|;
operator|++
name|i
control|)
block|{
name|percentiles
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
name|long
index|[]
name|result
init|=
name|values
operator|.
name|getCDF
argument_list|(
literal|100
argument_list|,
name|percentiles
argument_list|)
decl_stmt|;
name|long
name|sumErrorSquares
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|long
name|error
init|=
name|result
index|[
name|i
index|]
operator|-
operator|(
literal|10000L
operator|*
name|i
operator|+
literal|100000L
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"element "
operator|+
name|i
operator|+
literal|", got "
operator|+
name|result
index|[
name|i
index|]
operator|+
literal|", expected "
operator|+
operator|(
literal|10000L
operator|*
name|i
operator|+
literal|100000L
operator|)
operator|+
literal|", error = "
operator|+
name|error
argument_list|)
expr_stmt|;
name|sumErrorSquares
operator|+=
name|error
operator|*
name|error
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
block|{
name|long
name|error
init|=
name|result
index|[
name|i
index|]
operator|-
operator|(
literal|15000L
operator|*
name|i
operator|+
literal|50000L
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"element "
operator|+
name|i
operator|+
literal|", got "
operator|+
name|result
index|[
name|i
index|]
operator|+
literal|", expected "
operator|+
operator|(
literal|15000L
operator|*
name|i
operator|+
literal|50000L
operator|)
operator|+
literal|", error = "
operator|+
name|error
argument_list|)
expr_stmt|;
name|sumErrorSquares
operator|+=
name|error
operator|*
name|error
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|50
init|;
name|i
operator|<
literal|90
condition|;
operator|++
name|i
control|)
block|{
name|long
name|error
init|=
name|result
index|[
name|i
index|]
operator|-
operator|(
literal|5000L
operator|*
name|i
operator|+
literal|550000L
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"element "
operator|+
name|i
operator|+
literal|", got "
operator|+
name|result
index|[
name|i
index|]
operator|+
literal|", expected "
operator|+
operator|(
literal|5000L
operator|*
name|i
operator|+
literal|550000L
operator|)
operator|+
literal|", error = "
operator|+
name|error
argument_list|)
expr_stmt|;
name|sumErrorSquares
operator|+=
name|error
operator|*
name|error
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|90
init|;
name|i
operator|<=
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|long
name|error
init|=
name|result
index|[
name|i
index|]
operator|-
operator|(
literal|10000L
operator|*
name|i
operator|+
literal|100000L
operator|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"element "
operator|+
name|i
operator|+
literal|", got "
operator|+
name|result
index|[
name|i
index|]
operator|+
literal|", expected "
operator|+
operator|(
literal|10000L
operator|*
name|i
operator|+
literal|100000L
operator|)
operator|+
literal|", error = "
operator|+
name|error
argument_list|)
expr_stmt|;
name|sumErrorSquares
operator|+=
name|error
operator|*
name|error
expr_stmt|;
block|}
comment|// normalize the error
name|double
name|realSumErrorSquares
init|=
operator|(
name|double
operator|)
name|sumErrorSquares
decl_stmt|;
name|double
name|normalizedError
init|=
name|realSumErrorSquares
operator|/
literal|100
operator|/
name|rankings
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDatum
argument_list|()
operator|/
name|rankings
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDatum
argument_list|()
decl_stmt|;
name|double
name|RMSNormalizedError
init|=
name|Math
operator|.
name|sqrt
argument_list|(
name|normalizedError
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sumErrorSquares = "
operator|+
name|sumErrorSquares
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"normalizedError: "
operator|+
name|normalizedError
operator|+
literal|", RMSNormalizedError: "
operator|+
name|RMSNormalizedError
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cumulative error is "
operator|+
name|RMSNormalizedError
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The RMS relative error per bucket, "
operator|+
name|RMSNormalizedError
operator|+
literal|", exceeds our tolerance of "
operator|+
name|maximumRelativeError
argument_list|,
name|RMSNormalizedError
operator|<=
name|maximumRelativeError
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

