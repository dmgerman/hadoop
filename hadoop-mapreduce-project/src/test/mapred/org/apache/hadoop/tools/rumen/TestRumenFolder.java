begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestRumenFolder
specifier|public
class|class
name|TestRumenFolder
block|{
annotation|@
name|Test
DECL|method|testFoldingSmallTrace ()
specifier|public
name|void
name|testFoldingSmallTrace
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"rumen/small-trace-test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestRumenJobTraces"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|foldedTracePath
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"folded-trace.json"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|inputFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputFile
argument_list|,
literal|"folder-input-trace.json.gz"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"folded trace result path = "
operator|+
name|foldedTracePath
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-input-cycle"
block|,
literal|"100S"
block|,
literal|"-output-duration"
block|,
literal|"300S"
block|,
literal|"-skew-buffer-length"
block|,
literal|"1"
block|,
literal|"-seed"
block|,
literal|"100"
block|,
literal|"-concentration"
block|,
literal|"2"
block|,
name|inputFile
operator|.
name|toString
argument_list|()
block|,
name|foldedTracePath
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
specifier|final
name|Path
name|foldedGoldFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputFile
argument_list|,
literal|"goldFoldedTrace.json.gz"
argument_list|)
decl_stmt|;
name|Folder
name|folder
init|=
operator|new
name|Folder
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|folder
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Non-zero exit"
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|TestRumenFolder
operator|.
expr|<
name|LoggedJob
operator|>
name|jsonFileMatchesGold
argument_list|(
name|conf
argument_list|,
name|lfs
argument_list|,
name|foldedTracePath
argument_list|,
name|foldedGoldFile
argument_list|,
name|LoggedJob
operator|.
name|class
argument_list|,
literal|"trace"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartsAfterOption ()
specifier|public
name|void
name|testStartsAfterOption
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|final
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tools.input.dir"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|final
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|lfs
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|rootInputFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"rumen/small-trace-test"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"TestRumenJobTraces"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|inputFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputFile
argument_list|,
literal|"goldFoldedTrace.json.gz"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|foldedTracePath
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"folded-skippedjob-trace.json"
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-input-cycle"
block|,
literal|"300S"
block|,
literal|"-output-duration"
block|,
literal|"300S"
block|,
literal|"-starts-after"
block|,
literal|"30S"
block|,
name|inputFile
operator|.
name|toString
argument_list|()
block|,
name|foldedTracePath
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|Folder
name|folder
init|=
operator|new
name|Folder
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|folder
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Non-zero exit"
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|TestRumenFolder
operator|.
expr|<
name|LoggedJob
operator|>
name|checkValidityAfterSkippingJobs
argument_list|(
name|conf
argument_list|,
name|lfs
argument_list|,
name|foldedTracePath
argument_list|,
name|inputFile
argument_list|,
name|LoggedJob
operator|.
name|class
argument_list|,
literal|"trace"
argument_list|,
literal|30000
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|private
parameter_list|<
name|T
extends|extends
name|DeepCompare
parameter_list|>
name|void
DECL|method|checkValidityAfterSkippingJobs (Configuration conf, FileSystem lfs, Path result, Path inputFile, Class<? extends T> clazz, String fileDescription, long startsAfter, long duration)
name|checkValidityAfterSkippingJobs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|lfs
parameter_list|,
name|Path
name|result
parameter_list|,
name|Path
name|inputFile
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|fileDescription
parameter_list|,
name|long
name|startsAfter
parameter_list|,
name|long
name|duration
parameter_list|)
throws|throws
name|IOException
block|{
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
name|inputFileParser
init|=
operator|new
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
argument_list|(
name|inputFile
argument_list|,
name|clazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|InputStream
name|resultStream
init|=
name|lfs
operator|.
name|open
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
name|resultParser
init|=
operator|new
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
argument_list|(
name|resultStream
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|gpSubmitTimes
init|=
operator|new
name|LinkedList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|rpSubmitTimes
init|=
operator|new
name|LinkedList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
comment|//Get submitTime of first job
name|LoggedJob
name|firstJob
init|=
operator|(
name|LoggedJob
operator|)
name|inputFileParser
operator|.
name|getNext
argument_list|()
decl_stmt|;
name|gpSubmitTimes
operator|.
name|add
argument_list|(
name|firstJob
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|absoluteStartsAfterTime
init|=
name|firstJob
operator|.
name|getSubmitTime
argument_list|()
operator|+
name|startsAfter
decl_stmt|;
comment|//total duration
name|long
name|endTime
init|=
name|firstJob
operator|.
name|getSubmitTime
argument_list|()
operator|+
name|duration
decl_stmt|;
comment|//read original trace
name|LoggedJob
name|oriJob
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|oriJob
operator|=
operator|(
name|LoggedJob
operator|)
name|inputFileParser
operator|.
name|getNext
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|gpSubmitTimes
operator|.
name|add
argument_list|(
name|oriJob
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//check if retained jobs have submittime> starts-after
name|LoggedJob
name|job
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|job
operator|=
operator|(
name|LoggedJob
operator|)
name|resultParser
operator|.
name|getNext
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"job's submit time in the output trace is less "
operator|+
literal|"than the specified value of starts-after"
argument_list|,
operator|(
name|job
operator|.
name|getSubmitTime
argument_list|()
operator|>=
name|absoluteStartsAfterTime
operator|)
argument_list|)
expr_stmt|;
name|rpSubmitTimes
operator|.
name|add
argument_list|(
name|job
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|skippedJobs
init|=
operator|new
name|LinkedList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|skippedJobs
operator|.
name|addAll
argument_list|(
name|gpSubmitTimes
argument_list|)
expr_stmt|;
name|skippedJobs
operator|.
name|removeAll
argument_list|(
name|rpSubmitTimes
argument_list|)
expr_stmt|;
comment|//check if the skipped job submittime< starts-after
for|for
control|(
name|Long
name|submitTime
range|:
name|skippedJobs
control|)
block|{
name|assertTrue
argument_list|(
literal|"skipped job submit time "
operator|+
name|submitTime
operator|+
literal|" in the trace is greater "
operator|+
literal|"than the specified value of starts-after "
operator|+
name|absoluteStartsAfterTime
argument_list|,
operator|(
name|submitTime
operator|<
name|absoluteStartsAfterTime
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|inputFileParser
argument_list|,
name|resultParser
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|jsonFileMatchesGold ( Configuration conf, FileSystem lfs, Path result, Path gold, Class<? extends T> clazz, String fileDescription)
specifier|static
specifier|private
parameter_list|<
name|T
extends|extends
name|DeepCompare
parameter_list|>
name|void
name|jsonFileMatchesGold
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|lfs
parameter_list|,
name|Path
name|result
parameter_list|,
name|Path
name|gold
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|fileDescription
parameter_list|)
throws|throws
name|IOException
block|{
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
name|goldParser
init|=
operator|new
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
argument_list|(
name|gold
argument_list|,
name|clazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|InputStream
name|resultStream
init|=
name|lfs
operator|.
name|open
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
name|resultParser
init|=
operator|new
name|JsonObjectMapperParser
argument_list|<
name|T
argument_list|>
argument_list|(
name|resultStream
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|DeepCompare
name|goldJob
init|=
name|goldParser
operator|.
name|getNext
argument_list|()
decl_stmt|;
name|DeepCompare
name|resultJob
init|=
name|resultParser
operator|.
name|getNext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|goldJob
operator|==
literal|null
operator|)
operator|||
operator|(
name|resultJob
operator|==
literal|null
operator|)
condition|)
block|{
name|assertTrue
argument_list|(
name|goldJob
operator|==
name|resultJob
argument_list|)
expr_stmt|;
break|break;
block|}
try|try
block|{
name|resultJob
operator|.
name|deepCompare
argument_list|(
name|goldJob
argument_list|,
operator|new
name|TreePath
argument_list|(
literal|null
argument_list|,
literal|"<root>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeepInequalityException
name|e
parameter_list|)
block|{
name|String
name|error
init|=
name|e
operator|.
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|fileDescription
operator|+
literal|" mismatches: "
operator|+
name|error
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
literal|null
argument_list|,
name|goldParser
argument_list|,
name|resultParser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

