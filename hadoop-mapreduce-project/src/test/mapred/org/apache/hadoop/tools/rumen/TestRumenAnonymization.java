begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.tools.rumen
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|ID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|jobhistory
operator|.
name|JobHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|tasktracker
operator|.
name|TTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|anonymization
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|FileName
operator|.
name|FileNameState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|NodeName
operator|.
name|NodeNameState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|util
operator|.
name|DefaultJobPropertiesParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|datatypes
operator|.
name|util
operator|.
name|MapReduceJobPropertiesParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|serializers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|state
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|module
operator|.
name|SimpleModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests Rumen output anonymization.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|TestRumenAnonymization
specifier|public
class|class
name|TestRumenAnonymization
block|{
comment|/**    * Test {@link UserName}, serialization and anonymization.    */
annotation|@
name|Test
DECL|method|testUserNameSerialization ()
specifier|public
name|void
name|testUserNameSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|defaultSerializer
init|=
operator|new
name|DefaultRumenSerializer
argument_list|()
decl_stmt|;
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|anonymizingSerializer
init|=
operator|new
name|DefaultAnonymizingRumenSerializer
argument_list|(
operator|new
name|StatePool
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// test username
name|UserName
name|uname
init|=
operator|new
name|UserName
argument_list|(
literal|"bob"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Username error!"
argument_list|,
literal|"bob"
argument_list|,
name|uname
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test username serialization
comment|//   test with no anonymization
comment|//      test bob
name|testSerializer
argument_list|(
operator|new
name|UserName
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
literal|"bob"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|//      test alice
name|testSerializer
argument_list|(
operator|new
name|UserName
argument_list|(
literal|"alice"
argument_list|)
argument_list|,
literal|"alice"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test user-name serialization
comment|//   test with anonymization
comment|//      test bob
name|testSerializer
argument_list|(
operator|new
name|UserName
argument_list|(
literal|"bob"
argument_list|)
argument_list|,
literal|"user0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test alice
name|testSerializer
argument_list|(
operator|new
name|UserName
argument_list|(
literal|"alice"
argument_list|)
argument_list|,
literal|"user1"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link JobName}, serialization and anonymization.    */
annotation|@
name|Test
DECL|method|testJobNameSerialization ()
specifier|public
name|void
name|testJobNameSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|defaultSerializer
init|=
operator|new
name|DefaultRumenSerializer
argument_list|()
decl_stmt|;
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|anonymizingSerializer
init|=
operator|new
name|DefaultAnonymizingRumenSerializer
argument_list|(
operator|new
name|StatePool
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// test jobname
name|JobName
name|jname
init|=
operator|new
name|JobName
argument_list|(
literal|"job-secret"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Jobname error!"
argument_list|,
literal|"job-secret"
argument_list|,
name|jname
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test job-name serialization
comment|//  test with no anonymization
comment|//      test job1
name|testSerializer
argument_list|(
operator|new
name|JobName
argument_list|(
literal|"job-myjob"
argument_list|)
argument_list|,
literal|"job-myjob"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|//      test job2
name|testSerializer
argument_list|(
operator|new
name|JobName
argument_list|(
literal|"job-yourjob"
argument_list|)
argument_list|,
literal|"job-yourjob"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test job-name serialization
comment|//   test with anonymization
comment|//  test queue1
name|testSerializer
argument_list|(
operator|new
name|JobName
argument_list|(
literal|"secret-job-1"
argument_list|)
argument_list|,
literal|"job0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test queue2
name|testSerializer
argument_list|(
operator|new
name|JobName
argument_list|(
literal|"secret-job-2"
argument_list|)
argument_list|,
literal|"job1"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link QueueName}, serialization and anonymization.    */
annotation|@
name|Test
DECL|method|testQueueNameSerialization ()
specifier|public
name|void
name|testQueueNameSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|defaultSerializer
init|=
operator|new
name|DefaultRumenSerializer
argument_list|()
decl_stmt|;
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|anonymizingSerializer
init|=
operator|new
name|DefaultAnonymizingRumenSerializer
argument_list|(
operator|new
name|StatePool
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// test queuename
name|QueueName
name|qname
init|=
operator|new
name|QueueName
argument_list|(
literal|"queue-secret"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queuename error!"
argument_list|,
literal|"queue-secret"
argument_list|,
name|qname
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test queuename serialization
comment|//  test with no anonymization
comment|//      test queue1
name|testSerializer
argument_list|(
operator|new
name|QueueName
argument_list|(
literal|"project1-queue"
argument_list|)
argument_list|,
literal|"project1-queue"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|//      test queue2
name|testSerializer
argument_list|(
operator|new
name|QueueName
argument_list|(
literal|"project2-queue"
argument_list|)
argument_list|,
literal|"project2-queue"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test queue-name serialization
comment|//   test with anonymization
comment|//  test queue1
name|testSerializer
argument_list|(
operator|new
name|QueueName
argument_list|(
literal|"project1-queue"
argument_list|)
argument_list|,
literal|"queue0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test queue2
name|testSerializer
argument_list|(
operator|new
name|QueueName
argument_list|(
literal|"project2-queue"
argument_list|)
argument_list|,
literal|"queue1"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link NodeName}.    */
annotation|@
name|Test
DECL|method|testNodeNameDataType ()
specifier|public
name|void
name|testNodeNameDataType
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test hostname
comment|//   test only hostname
name|NodeName
name|hname
init|=
operator|new
name|NodeName
argument_list|(
literal|"host1.myorg.com"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Expected missing rack name"
argument_list|,
name|hname
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname's test#1 hostname error!"
argument_list|,
literal|"host1.myorg.com"
argument_list|,
name|hname
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname test#1 error!"
argument_list|,
literal|"host1.myorg.com"
argument_list|,
name|hname
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//   test rack/hostname
name|hname
operator|=
operator|new
name|NodeName
argument_list|(
literal|"/rack1.myorg.com/host1.myorg.com"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname's test#2 rackname error!"
argument_list|,
literal|"rack1.myorg.com"
argument_list|,
name|hname
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname test#2 hostname error!"
argument_list|,
literal|"host1.myorg.com"
argument_list|,
name|hname
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname test#2 error!"
argument_list|,
literal|"/rack1.myorg.com/host1.myorg.com"
argument_list|,
name|hname
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//   test hostname and rackname separately
name|hname
operator|=
operator|new
name|NodeName
argument_list|(
literal|"rack1.myorg.com"
argument_list|,
literal|"host1.myorg.com"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname's test#3 rackname error!"
argument_list|,
literal|"rack1.myorg.com"
argument_list|,
name|hname
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname test#3 hostname error!"
argument_list|,
literal|"host1.myorg.com"
argument_list|,
name|hname
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname test#3 error!"
argument_list|,
literal|"/rack1.myorg.com/host1.myorg.com"
argument_list|,
name|hname
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//   test hostname with no rackname
name|hname
operator|=
operator|new
name|NodeName
argument_list|(
literal|null
argument_list|,
literal|"host1.myorg.com"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Hostname's test#4 rackname error!"
argument_list|,
name|hname
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname test#4 hostname error!"
argument_list|,
literal|"host1.myorg.com"
argument_list|,
name|hname
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname test#4 error!"
argument_list|,
literal|"host1.myorg.com"
argument_list|,
name|hname
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//  test rackname with no hostname
name|hname
operator|=
operator|new
name|NodeName
argument_list|(
literal|"rack1.myorg.com"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname test#4 rackname error!"
argument_list|,
literal|"rack1.myorg.com"
argument_list|,
name|hname
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Hostname's test#5 hostname error!"
argument_list|,
name|hname
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hostname test#5 error!"
argument_list|,
literal|"rack1.myorg.com"
argument_list|,
name|hname
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link NodeName} serialization.    */
annotation|@
name|Test
DECL|method|testNodeNameDefaultSerialization ()
specifier|public
name|void
name|testNodeNameDefaultSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|defaultSerializer
init|=
operator|new
name|DefaultRumenSerializer
argument_list|()
decl_stmt|;
comment|// test hostname serialization
comment|//  test with no anonymization
comment|//      test hostname
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"hostname.myorg.com"
argument_list|)
argument_list|,
literal|"hostname.myorg.com"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|//      test rack/hostname
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"/rackname.myorg.com/hostname.myorg.com"
argument_list|)
argument_list|,
literal|"/rackname.myorg.com/hostname.myorg.com"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|//      test rack,hostname
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"rackname.myorg.com"
argument_list|,
literal|"hostname.myorg.com"
argument_list|)
argument_list|,
literal|"/rackname.myorg.com/hostname.myorg.com"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|//      test -,hostname
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|null
argument_list|,
literal|"hostname.myorg.com"
argument_list|)
argument_list|,
literal|"hostname.myorg.com"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|//      test rack,-
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"rackname.myorg.com"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"rackname.myorg.com"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link NodeName} anonymization.    */
annotation|@
name|Test
DECL|method|testNodeNameAnonymization ()
specifier|public
name|void
name|testNodeNameAnonymization
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|anonymizingSerializer
init|=
operator|new
name|DefaultAnonymizingRumenSerializer
argument_list|(
operator|new
name|StatePool
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// test hostname serializer
comment|//   test with anonymization
comment|//      test hostname
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"hostname.myorg.com"
argument_list|)
argument_list|,
literal|"host0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test hostname reuse
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"hostname213.myorg.com"
argument_list|)
argument_list|,
literal|"host1"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test rack/hostname
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"/rackname.myorg.com/hostname.myorg.com"
argument_list|)
argument_list|,
literal|"/rack0/host0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test rack/hostname (hostname reuse)
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"/rackname654.myorg.com/hostname.myorg.com"
argument_list|)
argument_list|,
literal|"/rack1/host0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test rack/hostname (rack reuse)
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"/rackname654.myorg.com/hostname765.myorg.com"
argument_list|)
argument_list|,
literal|"/rack1/host2"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test rack,hostname (rack& hostname reuse)
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"rackname.myorg.com"
argument_list|,
literal|"hostname.myorg.com"
argument_list|)
argument_list|,
literal|"/rack0/host0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test rack,hostname (rack reuse)
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"rackname.myorg.com"
argument_list|,
literal|"hostname543.myorg.com"
argument_list|)
argument_list|,
literal|"/rack0/host3"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test rack,hostname (hostname reuse)
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"rackname987.myorg.com"
argument_list|,
literal|"hostname.myorg.com"
argument_list|)
argument_list|,
literal|"/rack2/host0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test rack,hostname (rack reuse)
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"rackname.myorg.com"
argument_list|,
literal|"hostname654.myorg.com"
argument_list|)
argument_list|,
literal|"/rack0/host4"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test rack,hostname (host reuse)
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"rackname876.myorg.com"
argument_list|,
literal|"hostname.myorg.com"
argument_list|)
argument_list|,
literal|"/rack3/host0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test rack,hostname (rack& hostname reuse)
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"rackname987.myorg.com"
argument_list|,
literal|"hostname543.myorg.com"
argument_list|)
argument_list|,
literal|"/rack2/host3"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test -,hostname (hostname reuse)
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|null
argument_list|,
literal|"hostname.myorg.com"
argument_list|)
argument_list|,
literal|"host0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test -,hostname
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|null
argument_list|,
literal|"hostname15.myorg.com"
argument_list|)
argument_list|,
literal|"host5"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test rack,- (rack reuse)
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"rackname987.myorg.com"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"rack2"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test rack,-
name|testSerializer
argument_list|(
operator|new
name|NodeName
argument_list|(
literal|"rackname15.myorg.com"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"rack4"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link JobProperties}.    */
annotation|@
name|Test
DECL|method|testJobPropertiesDataType ()
specifier|public
name|void
name|testJobPropertiesDataType
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test job properties
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|JobProperties
name|jp
init|=
operator|new
name|JobProperties
argument_list|(
name|properties
argument_list|)
decl_stmt|;
comment|// test empty job properties
name|assertEquals
argument_list|(
literal|"Job Properties (default) store error"
argument_list|,
literal|0
argument_list|,
name|jp
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test by adding some data
name|properties
operator|.
name|put
argument_list|(
literal|"test-key"
argument_list|,
literal|"test-value"
argument_list|)
expr_stmt|;
comment|// user config
name|properties
operator|.
name|put
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
literal|"bob"
argument_list|)
expr_stmt|;
comment|// job config
name|properties
operator|.
name|put
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|,
literal|"-Xmx1G"
argument_list|)
expr_stmt|;
comment|// deprecated
name|jp
operator|=
operator|new
name|JobProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (default) store error"
argument_list|,
literal|3
argument_list|,
name|jp
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (default) key#1 error"
argument_list|,
literal|"test-value"
argument_list|,
name|jp
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"test-key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (default) key#2 error"
argument_list|,
literal|"bob"
argument_list|,
name|jp
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (default) key#3 error"
argument_list|,
literal|"-Xmx1G"
argument_list|,
name|jp
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link JobProperties} serialization.    */
annotation|@
name|Test
DECL|method|testJobPropertiesSerialization ()
specifier|public
name|void
name|testJobPropertiesSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|defaultSerializer
init|=
operator|new
name|DefaultRumenSerializer
argument_list|()
decl_stmt|;
comment|// test job properties
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"test-key"
argument_list|,
literal|"test-value"
argument_list|)
expr_stmt|;
comment|// user config
name|properties
operator|.
name|put
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
literal|"bob"
argument_list|)
expr_stmt|;
comment|// job config
name|properties
operator|.
name|put
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|,
literal|"-Xmx1G"
argument_list|)
expr_stmt|;
comment|// deprecated
name|JobProperties
name|jp
init|=
operator|new
name|JobProperties
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|testSerializer
argument_list|(
name|jp
argument_list|,
literal|"{test-key:test-value,"
operator|+
literal|"mapreduce.job.user.name:bob,"
operator|+
literal|"mapred.child.java.opts:-Xmx1G}"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link JobProperties} anonymization.    */
annotation|@
name|Test
DECL|method|testJobPropertiesAnonymization ()
specifier|public
name|void
name|testJobPropertiesAnonymization
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test job properties
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"test-key"
argument_list|,
literal|"test-value"
argument_list|)
expr_stmt|;
comment|// user config
name|properties
operator|.
name|put
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|,
literal|"bob"
argument_list|)
expr_stmt|;
comment|// job config
comment|// deprecated
name|properties
operator|.
name|put
argument_list|(
literal|"mapred.map.child.java.opts"
argument_list|,
literal|"-Xmx2G -Xms500m -Dsecret=secret"
argument_list|)
expr_stmt|;
comment|// deprecated and not supported
name|properties
operator|.
name|put
argument_list|(
name|JobConf
operator|.
name|MAPRED_TASK_JAVA_OPTS
argument_list|,
literal|"-Xmx1G -Xms200m -Dsecret=secret"
argument_list|)
expr_stmt|;
name|JobProperties
name|jp
init|=
operator|new
name|JobProperties
argument_list|(
name|properties
argument_list|)
decl_stmt|;
comment|// define a module
name|SimpleModule
name|module
init|=
operator|new
name|SimpleModule
argument_list|(
literal|"Test Anonymization Serializer"
argument_list|,
operator|new
name|Version
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"TEST"
argument_list|)
argument_list|)
decl_stmt|;
comment|// add various serializers to the module
name|module
operator|.
name|addSerializer
argument_list|(
name|DataType
operator|.
name|class
argument_list|,
operator|new
name|DefaultRumenSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|module
operator|.
name|addSerializer
argument_list|(
name|AnonymizableDataType
operator|.
name|class
argument_list|,
operator|new
name|DefaultAnonymizingRumenSerializer
argument_list|(
operator|new
name|StatePool
argument_list|()
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO Support deprecated and un-supported keys
name|testSerializer
argument_list|(
name|jp
argument_list|,
literal|"{mapreduce.job.user.name:user0,"
operator|+
literal|"mapred.map.child.java.opts:-Xmx2G -Xms500m}"
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link ClassName}, serialization and anonymization.    */
annotation|@
name|Test
DECL|method|testClassNameSerialization ()
specifier|public
name|void
name|testClassNameSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|defaultSerializer
init|=
operator|new
name|DefaultRumenSerializer
argument_list|()
decl_stmt|;
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|anonymizingSerializer
init|=
operator|new
name|DefaultAnonymizingRumenSerializer
argument_list|(
operator|new
name|StatePool
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// test classname
name|ClassName
name|cName
init|=
operator|new
name|ClassName
argument_list|(
name|TestRumenAnonymization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Classname error!"
argument_list|,
name|TestRumenAnonymization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|cName
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test classname serialization
comment|//  test with no anonymization
comment|//      test class1
name|testSerializer
argument_list|(
operator|new
name|ClassName
argument_list|(
literal|"org.apache.hadoop.Test"
argument_list|)
argument_list|,
literal|"org.apache.hadoop.Test"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|//      test class2
name|testSerializer
argument_list|(
operator|new
name|ClassName
argument_list|(
literal|"org.apache.hadoop.Test2"
argument_list|)
argument_list|,
literal|"org.apache.hadoop.Test2"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test class-name serialization
comment|//  test with anonymization
comment|//      test class1
name|testSerializer
argument_list|(
operator|new
name|ClassName
argument_list|(
literal|"org.apache.hadoop.Test1"
argument_list|)
argument_list|,
literal|"class0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test class2
name|testSerializer
argument_list|(
operator|new
name|ClassName
argument_list|(
literal|"org.apache.hadoop.Test2"
argument_list|)
argument_list|,
literal|"class1"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|// test classnames with preserves
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ClassName
operator|.
name|CLASSNAME_PRESERVE_CONFIG
argument_list|,
literal|"org.apache.hadoop."
argument_list|)
expr_stmt|;
name|anonymizingSerializer
operator|=
operator|new
name|DefaultAnonymizingRumenSerializer
argument_list|(
operator|new
name|StatePool
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// test word with prefix
name|testSerializer
argument_list|(
operator|new
name|ClassName
argument_list|(
literal|"org.apache.hadoop.Test3"
argument_list|)
argument_list|,
literal|"org.apache.hadoop.Test3"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|// test word without prefix
name|testSerializer
argument_list|(
operator|new
name|ClassName
argument_list|(
literal|"org.apache.hadoop2.Test4"
argument_list|)
argument_list|,
literal|"class0"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link FileName}.    */
annotation|@
name|Test
DECL|method|testFileName ()
specifier|public
name|void
name|testFileName
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test file on hdfs
name|FileName
name|hFile
init|=
operator|new
name|FileName
argument_list|(
literal|"hdfs://testnn:123/user/test.json"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"hdfs://testnn:123/user/test.json"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test file on local-fs
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"file:///user/test.json"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"file:///user/test.json"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test dir on hdfs
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"hdfs://testnn:123/user/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"hdfs://testnn:123/user/"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test dir on local-fs
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"file:///user/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"file:///user/"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test absolute file
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"/user/test/test.json"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"/user/test/test.json"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test absolute directory
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"/user/test/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"/user/test/"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test relative file
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"user/test/test2.json"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"user/test/test2.json"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test relative directory
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"user/test/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"user/test/"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test absolute file
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"user"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test absolute directory
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"user/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"user/"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"./tmp"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"./tmp"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"./tmp/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"./tmp/"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"../tmp"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"../tmp"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"../tmp/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"../tmp/"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test comma separated filenames
comment|//  test hdfs filenames, absolute and local-fs filenames
name|hFile
operator|=
operator|new
name|FileName
argument_list|(
literal|"hdfs://testnn:123/user/test1,"
operator|+
literal|"file:///user/test2,/user/test3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Filename error!"
argument_list|,
literal|"hdfs://testnn:123/user/test1,file:///user/test2,/user/test3"
argument_list|,
name|hFile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link FileName} serialization.    */
annotation|@
name|Test
DECL|method|testFileNameSerialization ()
specifier|public
name|void
name|testFileNameSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|defaultSerializer
init|=
operator|new
name|DefaultRumenSerializer
argument_list|()
decl_stmt|;
comment|// test filename serialization
comment|//  test with no anonymization
comment|//      test a file on hdfs
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"hdfs://mynn:123/home/user/test.json"
argument_list|)
argument_list|,
literal|"hdfs://mynn:123/home/user/test.json"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test a file on local-fs
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"file:///home/user/test.json"
argument_list|)
argument_list|,
literal|"file:///home/user/test.json"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test directory on hdfs
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"hdfs://mynn:123/home/user/"
argument_list|)
argument_list|,
literal|"hdfs://mynn:123/home/user/"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test directory on local fs
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"file:///home/user/"
argument_list|)
argument_list|,
literal|"file:///home/user/"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test absolute file
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"/home/user/test.json"
argument_list|)
argument_list|,
literal|"/home/user/test.json"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test relative file
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"home/user/test.json"
argument_list|)
argument_list|,
literal|"home/user/test.json"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test absolute folder
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"/home/user/"
argument_list|)
argument_list|,
literal|"/home/user/"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test relative folder
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"home/user/"
argument_list|)
argument_list|,
literal|"home/user/"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// relative file
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"home"
argument_list|)
argument_list|,
literal|"home"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// relative folder
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"home/"
argument_list|)
argument_list|,
literal|"home/"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// absolute file
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"/home"
argument_list|)
argument_list|,
literal|"/home"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// absolute folder
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"/home/"
argument_list|)
argument_list|,
literal|"/home/"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// relative folder
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"./tmp"
argument_list|)
argument_list|,
literal|"./tmp"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"./tmp/"
argument_list|)
argument_list|,
literal|"./tmp/"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"../tmp"
argument_list|)
argument_list|,
literal|"../tmp"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
comment|// test comma separated filenames
comment|//  test hdfs filenames, absolute and local-fs filenames
name|FileName
name|fileName
init|=
operator|new
name|FileName
argument_list|(
literal|"hdfs://testnn:123/user/test1,file:///user/test2,"
operator|+
literal|"/user/test3"
argument_list|)
decl_stmt|;
name|testSerializer
argument_list|(
name|fileName
argument_list|,
literal|"hdfs://testnn:123/user/test1,file:///user/test2,/user/test3"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link FileName} anonymization.    */
annotation|@
name|Test
DECL|method|testFileNameAnonymization ()
specifier|public
name|void
name|testFileNameAnonymization
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|anonymizingSerializer
init|=
operator|new
name|DefaultAnonymizingRumenSerializer
argument_list|(
operator|new
name|StatePool
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// test filename serialization
comment|//  test with no anonymization
comment|//      test hdfs file
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"hdfs://mynn:123/home/user/bob/test.json"
argument_list|)
argument_list|,
literal|"hdfs://host0/home/user/dir0/test.json"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test local-fs file
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"file:///home/user/alice/test.jar"
argument_list|)
argument_list|,
literal|"file:///home/user/dir1/test.jar"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test hdfs dir
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"hdfs://mynn:123/home/user/"
argument_list|)
argument_list|,
literal|"hdfs://host0/home/user/"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test local-fs dir
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"file:///home/user/secret/more-secret/"
argument_list|)
argument_list|,
literal|"file:///home/user/dir2/dir3/"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test absolute filenames
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"/home/user/top-secret.txt"
argument_list|)
argument_list|,
literal|"/home/user/file0.txt"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test relative filenames
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"home/user/top-top-secret.zip"
argument_list|)
argument_list|,
literal|"home/user/file1.zip"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test absolute dirnames
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"/home/user/project1/"
argument_list|)
argument_list|,
literal|"/home/user/dir4/"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test relative filenames
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"home/user/project1"
argument_list|)
argument_list|,
literal|"home/user/file2"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test absolute dirnames (re-use)
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"more-secret/"
argument_list|)
argument_list|,
literal|"dir3/"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//      test relative filenames (re-use)
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"secret/project1"
argument_list|)
argument_list|,
literal|"dir2/file2"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test absolute filenames (re-use)
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"/top-secret.txt"
argument_list|)
argument_list|,
literal|"/file0.txt"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test relative filenames (re-use)
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"top-top-secret.tar"
argument_list|)
argument_list|,
literal|"file1.tar"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test absolute dirname
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"sensitive-projectname/"
argument_list|)
argument_list|,
literal|"dir5/"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test relative filenames
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"/real-sensitive-projectname/"
argument_list|)
argument_list|,
literal|"/dir6/"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test absolute filenames
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"/usernames.xml"
argument_list|)
argument_list|,
literal|"/file3.xml"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test relative filenames
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"passwords.zip"
argument_list|)
argument_list|,
literal|"file4.zip"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|//  test relative filenames
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"./tmp"
argument_list|)
argument_list|,
literal|"./tmp"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"./tmp/"
argument_list|)
argument_list|,
literal|"./tmp/"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"../tmp"
argument_list|)
argument_list|,
literal|"../tmp"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
name|testSerializer
argument_list|(
operator|new
name|FileName
argument_list|(
literal|"../tmp/"
argument_list|)
argument_list|,
literal|"../tmp/"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
comment|// test comma separated filenames
comment|//  test hdfs filenames, absolute and local-fs filenames
name|FileName
name|fileName
init|=
operator|new
name|FileName
argument_list|(
literal|"hdfs://mynn:123/home/user/bob/test.json,"
operator|+
literal|"file:///home/user/bob/test.json,/user/alice/test.json"
argument_list|)
decl_stmt|;
name|testSerializer
argument_list|(
name|fileName
argument_list|,
literal|"hdfs://host0/home/user/dir0/test.json,file:///home/user/dir0/test.json"
operator|+
literal|",/user/dir1/test.json"
argument_list|,
name|anonymizingSerializer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link DefaultDataType} serialization.    */
annotation|@
name|Test
DECL|method|testDefaultDataTypeSerialization ()
specifier|public
name|void
name|testDefaultDataTypeSerialization
parameter_list|()
throws|throws
name|IOException
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|defaultSerializer
init|=
operator|new
name|DefaultRumenSerializer
argument_list|()
decl_stmt|;
comment|// test default data-type
name|DefaultDataType
name|dt
init|=
operator|new
name|DefaultDataType
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DefaultDataType error!"
argument_list|,
literal|"test"
argument_list|,
name|dt
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test default data-type
comment|//  test with no anonymization
comment|//      test data
name|testSerializer
argument_list|(
operator|new
name|DefaultDataType
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|defaultSerializer
argument_list|)
expr_stmt|;
block|}
comment|// A faked OutputStream which stores the stream content into a StringBuffer.
DECL|class|MyOutputStream
specifier|private
specifier|static
class|class
name|MyOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|data
specifier|private
name|StringBuffer
name|data
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|.
name|append
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// remove all the '"' for ease of testing
return|return
name|data
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
comment|// tests the object serializing using the class of the specified object
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testSerializer (Object toBeSerialized, String expData, JsonSerializer serializer)
specifier|private
specifier|static
name|void
name|testSerializer
parameter_list|(
name|Object
name|toBeSerialized
parameter_list|,
name|String
name|expData
parameter_list|,
name|JsonSerializer
name|serializer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// define a module
name|SimpleModule
name|module
init|=
operator|new
name|SimpleModule
argument_list|(
literal|"Test Anonymization Serializer"
argument_list|,
operator|new
name|Version
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"TEST"
argument_list|)
argument_list|)
decl_stmt|;
comment|// add various serializers to the module
name|module
operator|.
name|addSerializer
argument_list|(
name|toBeSerialized
operator|.
name|getClass
argument_list|()
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
name|testSerializer
argument_list|(
name|toBeSerialized
argument_list|,
name|expData
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
comment|// tests the object serializing using the specified class
DECL|method|testSerializer (Object toBeSerialized, String expData, SimpleModule module)
specifier|private
specifier|static
name|void
name|testSerializer
parameter_list|(
name|Object
name|toBeSerialized
parameter_list|,
name|String
name|expData
parameter_list|,
name|SimpleModule
name|module
parameter_list|)
throws|throws
name|IOException
block|{
comment|// define a custom generator
name|ObjectMapper
name|outMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
comment|// register the module
name|outMapper
operator|.
name|registerModule
argument_list|(
name|module
argument_list|)
expr_stmt|;
comment|// get the json factory
name|JsonFactory
name|outFactory
init|=
name|outMapper
operator|.
name|getJsonFactory
argument_list|()
decl_stmt|;
comment|// define a fake output stream which will cache the data
name|MyOutputStream
name|output
init|=
operator|new
name|MyOutputStream
argument_list|()
decl_stmt|;
comment|// define the json output generator
name|JsonGenerator
name|outGen
init|=
name|outFactory
operator|.
name|createJsonGenerator
argument_list|(
name|output
argument_list|,
name|JsonEncoding
operator|.
name|UTF8
argument_list|)
decl_stmt|;
comment|// serialize the object
name|outGen
operator|.
name|writeObject
argument_list|(
name|toBeSerialized
argument_list|)
expr_stmt|;
comment|//serializer.serialize(toBeSerialized, outGen, null);
comment|// close the json generator so that it flushes out the data to the output
comment|// stream
name|outGen
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Serialization failed!"
argument_list|,
name|expData
argument_list|,
name|output
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link DefaultRumenSerializer}.    */
annotation|@
name|Test
DECL|method|testDefaultDataSerializers ()
specifier|public
name|void
name|testDefaultDataSerializers
parameter_list|()
throws|throws
name|Exception
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|defaultSer
init|=
operator|new
name|DefaultRumenSerializer
argument_list|()
decl_stmt|;
comment|// test default data-type
comment|//  test with no anonymization
comment|//      test data
name|testSerializer
argument_list|(
operator|new
name|DefaultDataType
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|defaultSer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlockingDataSerializers ()
specifier|public
name|void
name|testBlockingDataSerializers
parameter_list|()
throws|throws
name|Exception
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|blockingSerializer
init|=
operator|new
name|BlockingSerializer
argument_list|()
decl_stmt|;
comment|// test string serializer
name|testSerializer
argument_list|(
literal|"username:password"
argument_list|,
literal|"null"
argument_list|,
name|blockingSerializer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testObjectStringDataSerializers ()
specifier|public
name|void
name|testObjectStringDataSerializers
parameter_list|()
throws|throws
name|Exception
block|{
name|JsonSerializer
argument_list|<
name|?
argument_list|>
name|objectStringSerializer
init|=
operator|new
name|ObjectStringSerializer
argument_list|<
name|ID
argument_list|>
argument_list|()
decl_stmt|;
comment|// test job/task/attempt id serializer
comment|//   test job-id
name|JobID
name|jid
init|=
name|JobID
operator|.
name|forName
argument_list|(
literal|"job_1_1"
argument_list|)
decl_stmt|;
name|testSerializer
argument_list|(
name|jid
argument_list|,
name|jid
operator|.
name|toString
argument_list|()
argument_list|,
name|objectStringSerializer
argument_list|)
expr_stmt|;
comment|//   test task-id
name|TaskID
name|tid
init|=
operator|new
name|TaskID
argument_list|(
name|jid
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|testSerializer
argument_list|(
name|tid
argument_list|,
name|tid
operator|.
name|toString
argument_list|()
argument_list|,
name|objectStringSerializer
argument_list|)
expr_stmt|;
comment|//   test attempt-id
name|TaskAttemptID
name|aid
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|tid
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|testSerializer
argument_list|(
name|aid
argument_list|,
name|aid
operator|.
name|toString
argument_list|()
argument_list|,
name|objectStringSerializer
argument_list|)
expr_stmt|;
block|}
comment|// test anonymizer
annotation|@
name|Test
DECL|method|testRumenAnonymization ()
specifier|public
name|void
name|testRumenAnonymization
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Run a MR job
comment|// create a MR cluster
name|conf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_MAP_SLOTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|TTConfig
operator|.
name|TT_REDUCE_SLOTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MiniDFSCluster
name|dfsCluster
init|=
literal|null
decl_stmt|;
name|MiniMRCluster
name|mrCluster
init|=
literal|null
decl_stmt|;
comment|// local filesystem for running TraceBuilder
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testRumenAnonymization"
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|dfsCluster
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
index|[]
name|racks
init|=
operator|new
name|String
index|[]
block|{
literal|"/rack123.myorg.com"
block|,
literal|"/rack456.myorg.com"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
literal|"host1230.myorg.com"
block|,
literal|"host4560.myorg.com"
block|}
decl_stmt|;
name|mrCluster
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|2
argument_list|,
name|dfsCluster
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|racks
argument_list|,
name|hosts
argument_list|,
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// run a job
name|Path
name|inDir
init|=
operator|new
name|Path
argument_list|(
literal|"secret-input"
argument_list|)
decl_stmt|;
name|Path
name|outDir
init|=
operator|new
name|Path
argument_list|(
literal|"secret-output"
argument_list|)
decl_stmt|;
name|JobConf
name|jConf
init|=
name|mrCluster
operator|.
name|createJobConf
argument_list|()
decl_stmt|;
comment|// add some usr sensitive data in the job conf
name|jConf
operator|.
name|set
argument_list|(
literal|"user-secret-code"
argument_list|,
literal|"abracadabra"
argument_list|)
expr_stmt|;
name|jConf
operator|.
name|setJobName
argument_list|(
literal|"top-secret"
argument_list|)
expr_stmt|;
comment|// construct a job with 1 map and 1 reduce task.
name|Job
name|job
init|=
name|MapReduceTestUtil
operator|.
name|createJob
argument_list|(
name|jConf
argument_list|,
name|inDir
argument_list|,
name|outDir
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// wait for the job to complete
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Job failed"
argument_list|,
name|job
operator|.
name|isSuccessful
argument_list|()
argument_list|)
expr_stmt|;
name|JobID
name|id
init|=
name|job
operator|.
name|getJobID
argument_list|()
decl_stmt|;
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|jConf
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|cluster
operator|.
name|getAllJobStatuses
argument_list|()
index|[
literal|0
index|]
operator|.
name|getUsername
argument_list|()
decl_stmt|;
comment|// get the jobhistory filepath
name|Path
name|jhPath
init|=
operator|new
name|Path
argument_list|(
name|mrCluster
operator|.
name|getJobTrackerRunner
argument_list|()
operator|.
name|getJobTracker
argument_list|()
operator|.
name|getJobHistoryDir
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|inputLogPath
init|=
name|JobHistory
operator|.
name|getJobHistoryFile
argument_list|(
name|jhPath
argument_list|,
name|id
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|Path
name|inputConfPath
init|=
name|JobHistory
operator|.
name|getConfFile
argument_list|(
name|jhPath
argument_list|,
name|id
argument_list|)
decl_stmt|;
comment|// wait for 10 secs for the jobhistory file to move into the done folder
name|FileSystem
name|fs
init|=
name|inputLogPath
operator|.
name|getFileSystem
argument_list|(
name|jConf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|inputLogPath
argument_list|)
condition|)
block|{
break|break;
block|}
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Missing job history file"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|inputLogPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// run trace builder on the job history logs
name|Path
name|goldTraceFilename
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"trace.json"
argument_list|)
decl_stmt|;
name|Path
name|goldTopologyFilename
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"topology.json"
argument_list|)
decl_stmt|;
comment|// build the trace-builder command line args
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
name|goldTraceFilename
operator|.
name|toString
argument_list|()
block|,
name|goldTopologyFilename
operator|.
name|toString
argument_list|()
block|,
name|inputLogPath
operator|.
name|toString
argument_list|()
block|,
name|inputConfPath
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|Tool
name|analyzer
init|=
operator|new
name|TraceBuilder
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|analyzer
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Non-zero exit"
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// anonymize the job trace
name|Path
name|anonymizedTraceFilename
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"trace-anonymized.json"
argument_list|)
decl_stmt|;
name|Path
name|anonymizedClusterTopologyFilename
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"topology-anonymized.json"
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-trace"
block|,
name|goldTraceFilename
operator|.
name|toString
argument_list|()
block|,
name|anonymizedTraceFilename
operator|.
name|toString
argument_list|()
block|,
literal|"-topology"
block|,
name|goldTopologyFilename
operator|.
name|toString
argument_list|()
block|,
name|anonymizedClusterTopologyFilename
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|Tool
name|anonymizer
init|=
operator|new
name|Anonymizer
argument_list|()
decl_stmt|;
name|result
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|anonymizer
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Non-zero exit"
argument_list|,
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|JobTraceReader
name|reader
init|=
operator|new
name|JobTraceReader
argument_list|(
name|anonymizedTraceFilename
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LoggedJob
name|anonymizedJob
init|=
name|reader
operator|.
name|getNext
argument_list|()
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close the reader as we need only 1 job
comment|// test
comment|//   user-name
name|String
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Username not anonymized!"
argument_list|,
name|currentUser
operator|.
name|equals
argument_list|(
name|anonymizedJob
operator|.
name|getUser
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//   jobid
name|assertEquals
argument_list|(
literal|"JobID mismatch!"
argument_list|,
name|id
operator|.
name|toString
argument_list|()
argument_list|,
name|anonymizedJob
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//   queue-name
name|assertFalse
argument_list|(
literal|"Queuename mismatch!"
argument_list|,
literal|"default"
operator|.
name|equals
argument_list|(
name|anonymizedJob
operator|.
name|getQueue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//   job-name
name|assertFalse
argument_list|(
literal|"Jobname mismatch!"
argument_list|,
literal|"top-secret"
operator|.
name|equals
argument_list|(
name|anonymizedJob
operator|.
name|getJobName
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//   job properties
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|anonymizedJob
operator|.
name|getJobProperties
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
literal|"User sensitive configuration key not anonymized"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user-secret-code"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"User sensitive data not anonymized"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|currentUser
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"User sensitive data not anonymized"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"secret"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test map tasks
name|testTasks
argument_list|(
name|anonymizedJob
operator|.
name|getMapTasks
argument_list|()
argument_list|,
name|id
argument_list|,
name|TaskType
operator|.
name|MAP
argument_list|)
expr_stmt|;
comment|// test reduce tasks
name|testTasks
argument_list|(
name|anonymizedJob
operator|.
name|getReduceTasks
argument_list|()
argument_list|,
name|id
argument_list|,
name|TaskType
operator|.
name|REDUCE
argument_list|)
expr_stmt|;
comment|// test other tasks
name|testTasks
argument_list|(
name|anonymizedJob
operator|.
name|getOtherTasks
argument_list|()
argument_list|,
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// test the anonymized cluster topology file
name|ClusterTopologyReader
name|cReader
init|=
operator|new
name|ClusterTopologyReader
argument_list|(
name|anonymizedClusterTopologyFilename
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LoggedNetworkTopology
name|loggedNetworkTopology
init|=
name|cReader
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// test the cluster topology
name|testClusterTopology
argument_list|(
name|loggedNetworkTopology
argument_list|,
literal|0
argument_list|,
literal|"myorg"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// shutdown and cleanup
if|if
condition|(
name|mrCluster
operator|!=
literal|null
condition|)
block|{
name|mrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfsCluster
operator|!=
literal|null
condition|)
block|{
name|dfsCluster
operator|.
name|formatDataNodeDirs
argument_list|()
expr_stmt|;
name|dfsCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test task level details lije
comment|//   - taskid
comment|//   - locality info
comment|//   - attempt details
comment|//     - attempt execution hostname
DECL|method|testTasks (List<LoggedTask> tasks, JobID id, TaskType type)
specifier|private
specifier|static
name|void
name|testTasks
parameter_list|(
name|List
argument_list|<
name|LoggedTask
argument_list|>
name|tasks
parameter_list|,
name|JobID
name|id
parameter_list|,
name|TaskType
name|type
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LoggedTask
name|task
range|:
name|tasks
control|)
block|{
comment|// generate the expected task id for this task
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|TaskID
name|tid
init|=
operator|new
name|TaskID
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|index
operator|++
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TaskID mismatch!"
argument_list|,
name|tid
operator|.
name|toString
argument_list|()
argument_list|,
name|task
operator|.
name|getTaskID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check locality information
if|if
condition|(
name|task
operator|.
name|getPreferredLocations
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LoggedLocation
name|loc
range|:
name|task
operator|.
name|getPreferredLocations
argument_list|()
control|)
block|{
for|for
control|(
name|NodeName
name|name
range|:
name|loc
operator|.
name|getLayers
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
literal|"Hostname mismatch!"
argument_list|,
name|name
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"myorg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check execution host
for|for
control|(
name|LoggedTaskAttempt
name|attempt
range|:
name|task
operator|.
name|getAttempts
argument_list|()
control|)
block|{
comment|// generate the expected task id for this task
name|TaskAttemptID
name|aid
init|=
operator|new
name|TaskAttemptID
argument_list|(
name|task
operator|.
name|getTaskID
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TaskAttemptID mismatch!"
argument_list|,
name|aid
operator|.
name|toString
argument_list|()
argument_list|,
name|attempt
operator|.
name|getAttemptID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Hostname null!"
argument_list|,
name|attempt
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Hostname mismatch!"
argument_list|,
name|attempt
operator|.
name|getHostName
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"myorg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// tests the logged network topology
DECL|method|testClusterTopology (LoggedNetworkTopology topology, int level, String bannedString)
specifier|private
specifier|static
name|void
name|testClusterTopology
parameter_list|(
name|LoggedNetworkTopology
name|topology
parameter_list|,
name|int
name|level
parameter_list|,
name|String
name|bannedString
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Cluster topology test failed!"
argument_list|,
name|topology
operator|.
name|getName
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|bannedString
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Level-1 data mismatch!"
argument_list|,
literal|"<root>"
argument_list|,
name|topology
operator|.
name|getName
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|==
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Level-2 data mismatch!"
argument_list|,
name|topology
operator|.
name|getName
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"rack"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Level-2 data mismatch!"
argument_list|,
name|topology
operator|.
name|getName
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Level-2 data mismatch!"
argument_list|,
name|topology
operator|.
name|getName
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"host"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Level-2 data mismatch!"
argument_list|,
name|topology
operator|.
name|getName
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"rack"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// if the current node is a rack, then test the nodes under it
if|if
condition|(
name|topology
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LoggedNetworkTopology
name|child
range|:
name|topology
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|testClusterTopology
argument_list|(
name|child
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|bannedString
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCLI ()
specifier|public
name|void
name|testCLI
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testCLI"
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test no args
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// test with wrong args
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-test"
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-trace"
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-topology"
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-trace -topology"
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Path
name|testTraceInputFilename
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"trace-in.json"
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-trace"
block|,
name|testTraceInputFilename
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Path
name|testTraceOutputFilename
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"trace-out.json"
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-trace"
block|,
name|testTraceInputFilename
operator|.
name|toString
argument_list|()
block|,
name|testTraceOutputFilename
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|lfs
operator|.
name|create
argument_list|(
name|testTraceInputFilename
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"{\n}"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-trace"
block|,
name|testTraceInputFilename
operator|.
name|toString
argument_list|()
block|,
name|testTraceOutputFilename
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Path
name|testToplogyInputFilename
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"topology-in.json"
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-topology"
block|,
name|testToplogyInputFilename
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Path
name|testTopologyOutputFilename
init|=
operator|new
name|Path
argument_list|(
name|tempDir
argument_list|,
literal|"topology-out.json"
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-topology"
block|,
name|testToplogyInputFilename
operator|.
name|toString
argument_list|()
block|,
name|testTopologyOutputFilename
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|=
name|lfs
operator|.
name|create
argument_list|(
name|testToplogyInputFilename
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"{\n}"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-topology"
block|,
name|testToplogyInputFilename
operator|.
name|toString
argument_list|()
block|,
name|testTopologyOutputFilename
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-trace"
block|,
name|testTraceInputFilename
operator|.
name|toString
argument_list|()
block|,
literal|"-topology"
block|,
name|testToplogyInputFilename
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-trace"
block|,
name|testTraceInputFilename
operator|.
name|toString
argument_list|()
block|,
name|testTraceOutputFilename
operator|.
name|toString
argument_list|()
block|,
literal|"-topology"
block|,
name|testToplogyInputFilename
operator|.
name|toString
argument_list|()
block|,
name|testTopologyOutputFilename
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
name|testAnonymizerCLI
argument_list|(
name|args
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// tests the Anonymizer CLI via the Tools interface
DECL|method|testAnonymizerCLI (String[] args, int eExitCode)
specifier|private
specifier|static
name|void
name|testAnonymizerCLI
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|eExitCode
parameter_list|)
throws|throws
name|Exception
block|{
name|Anonymizer
name|anonymizer
init|=
operator|new
name|Anonymizer
argument_list|()
decl_stmt|;
name|int
name|exitCode
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|anonymizer
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Exit code mismatch"
argument_list|,
name|eExitCode
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link StatePool}'s reload and persistence feature.    */
annotation|@
name|Test
DECL|method|testStatePool ()
specifier|public
name|void
name|testStatePool
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testStatePool"
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the state dir
name|conf
operator|.
name|set
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|,
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StatePool
name|pool
init|=
operator|new
name|StatePool
argument_list|()
decl_stmt|;
comment|// test reload, persist and dir config
comment|//   test with no reload and persist
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//  test with reload and/or persist enabled with no dir
name|assertNull
argument_list|(
literal|"Default state pool error"
argument_list|,
name|pool
operator|.
name|getState
argument_list|(
name|MyState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// try persisting
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"State pool persisted when disabled"
argument_list|,
name|lfs
operator|.
name|exists
argument_list|(
name|tempDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// test wrongly configured state-pool
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
try|try
block|{
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"State pool bad configuration succeeded"
argument_list|,
name|success
argument_list|)
expr_stmt|;
comment|// test wrongly configured state-pool
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|PERSIST_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"State manager bad configuration succeeded"
argument_list|,
name|success
argument_list|)
expr_stmt|;
comment|// test persistence
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|,
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|PERSIST_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// add states to the state pool
name|MyState
name|myState
init|=
operator|new
name|MyState
argument_list|()
decl_stmt|;
name|pool
operator|.
name|addState
argument_list|(
name|MyState
operator|.
name|class
argument_list|,
name|myState
argument_list|)
expr_stmt|;
name|myState
operator|.
name|setState
argument_list|(
literal|"test-1"
argument_list|)
expr_stmt|;
comment|// try persisting
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"State pool persisted when enabled"
argument_list|,
name|lfs
operator|.
name|exists
argument_list|(
name|tempDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"State pool persisted when enabled"
argument_list|,
literal|1
argument_list|,
name|lfs
operator|.
name|listStatus
argument_list|(
name|tempDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// reload
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|,
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|PERSIST_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MyState
name|pState
init|=
operator|(
name|MyState
operator|)
name|pool
operator|.
name|getState
argument_list|(
name|MyState
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"State pool persistence/reload failed"
argument_list|,
literal|"test-1"
argument_list|,
name|pState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// try persisting with no state change
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"State pool persisted when disabled"
argument_list|,
literal|1
argument_list|,
name|lfs
operator|.
name|listStatus
argument_list|(
name|tempDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// modify the state of the pool and check persistence
name|pState
operator|.
name|setUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"State pool persisted when disabled"
argument_list|,
literal|2
argument_list|,
name|lfs
operator|.
name|listStatus
argument_list|(
name|tempDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// delete the temp directory if everything goes fine
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test state.    */
DECL|class|MyState
specifier|static
class|class
name|MyState
implements|implements
name|State
block|{
DECL|field|updated
specifier|private
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
DECL|field|state
specifier|private
name|String
name|state
init|=
literal|"null"
decl_stmt|;
annotation|@
name|Override
annotation|@
name|JsonIgnore
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
annotation|@
name|Override
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// for now, simply assert since this class has a hardcoded name
if|if
condition|(
operator|!
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"State name mismatch! Expected '"
operator|+
name|getName
argument_list|()
operator|+
literal|"' but found '"
operator|+
name|name
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
DECL|method|setState (String state)
specifier|public
name|void
name|setState
parameter_list|(
name|String
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
DECL|method|getState ()
specifier|public
name|String
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|setUpdated (boolean up)
name|void
name|setUpdated
parameter_list|(
name|boolean
name|up
parameter_list|)
block|{
name|this
operator|.
name|updated
operator|=
name|up
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|JsonIgnore
DECL|method|isUpdated ()
specifier|public
name|boolean
name|isUpdated
parameter_list|()
block|{
return|return
name|updated
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getValueFromDataType (Object object)
specifier|private
specifier|static
name|String
name|getValueFromDataType
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|DataType
argument_list|<
name|String
argument_list|>
name|dt
init|=
operator|(
name|DataType
argument_list|<
name|String
argument_list|>
operator|)
name|object
decl_stmt|;
return|return
name|dt
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testJobPropertiesParser ()
specifier|public
name|void
name|testJobPropertiesParser
parameter_list|()
block|{
comment|// test default parser
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|JobProperties
name|jp
init|=
operator|new
name|JobProperties
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (default filter) store error"
argument_list|,
literal|0
argument_list|,
name|jp
operator|.
name|getAnonymizedValue
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// define key-value pairs for job configuration
name|String
name|key1
init|=
literal|"test-key"
decl_stmt|;
name|String
name|value1
init|=
literal|"test-value"
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
comment|// user config
name|String
name|key2
init|=
name|MRJobConfig
operator|.
name|USER_NAME
decl_stmt|;
name|String
name|value2
init|=
literal|"bob"
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
comment|// job config
name|String
name|key3
init|=
name|JobConf
operator|.
name|MAPRED_MAP_TASK_JAVA_OPTS
decl_stmt|;
name|String
name|value3
init|=
literal|"-Xmx1G"
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key3
argument_list|,
name|value3
argument_list|)
expr_stmt|;
comment|// deprecated
name|String
name|key4
init|=
name|MRJobConfig
operator|.
name|REDUCE_JAVA_OPTS
decl_stmt|;
name|String
name|value4
init|=
literal|"-Xms100m"
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key4
argument_list|,
name|value4
argument_list|)
expr_stmt|;
name|jp
operator|=
operator|new
name|JobProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
comment|// Configure the default parser
name|conf
operator|.
name|set
argument_list|(
name|JobProperties
operator|.
name|PARSERS_CONFIG_KEY
argument_list|,
name|DefaultJobPropertiesParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// anonymize
name|Properties
name|defaultProp
init|=
name|jp
operator|.
name|getAnonymizedValue
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (all-pass filter) store error"
argument_list|,
literal|4
argument_list|,
name|defaultProp
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (default filter) key#1 error"
argument_list|,
name|value1
argument_list|,
name|getValueFromDataType
argument_list|(
name|defaultProp
operator|.
name|get
argument_list|(
name|key1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (default filter) key#2 error"
argument_list|,
name|value2
argument_list|,
name|getValueFromDataType
argument_list|(
name|defaultProp
operator|.
name|get
argument_list|(
name|key2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (default filter) key#3 error"
argument_list|,
name|value3
argument_list|,
name|getValueFromDataType
argument_list|(
name|defaultProp
operator|.
name|get
argument_list|(
name|key3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (default filter) key#4 error"
argument_list|,
name|value4
argument_list|,
name|getValueFromDataType
argument_list|(
name|defaultProp
operator|.
name|get
argument_list|(
name|key4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test MR parser
name|conf
operator|.
name|set
argument_list|(
name|JobProperties
operator|.
name|PARSERS_CONFIG_KEY
argument_list|,
name|MapReduceJobPropertiesParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// anonymize
name|Properties
name|filteredProp
init|=
name|jp
operator|.
name|getAnonymizedValue
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (MR filter) store error"
argument_list|,
literal|3
argument_list|,
name|filteredProp
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Job Properties (MR filter) key#1 error"
argument_list|,
name|filteredProp
operator|.
name|get
argument_list|(
name|key1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (MR filter) key#2 error"
argument_list|,
name|value2
argument_list|,
name|getValueFromDataType
argument_list|(
name|filteredProp
operator|.
name|get
argument_list|(
name|key2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (MR filter) key#3 error"
argument_list|,
name|value3
argument_list|,
name|getValueFromDataType
argument_list|(
name|filteredProp
operator|.
name|get
argument_list|(
name|key3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Job Properties (MR filter) key#4 error"
argument_list|,
name|value4
argument_list|,
name|getValueFromDataType
argument_list|(
name|filteredProp
operator|.
name|get
argument_list|(
name|key4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link WordListAnonymizerUtility}. Test various features like    *   - test known words    *   - test known suffix    */
annotation|@
name|Test
DECL|method|testWordListBasedAnonymizer ()
specifier|public
name|void
name|testWordListBasedAnonymizer
parameter_list|()
block|{
name|String
index|[]
name|knownSuffixes
init|=
operator|new
name|String
index|[]
block|{
literal|".1"
block|,
literal|".2"
block|,
literal|".3"
block|,
literal|".4"
block|}
decl_stmt|;
comment|// test with valid suffix
name|assertTrue
argument_list|(
literal|"suffix test#0 failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|hasSuffix
argument_list|(
literal|"a.1"
argument_list|,
name|knownSuffixes
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|split
index|[]
init|=
name|WordListAnonymizerUtility
operator|.
name|extractSuffix
argument_list|(
literal|"a.1"
argument_list|,
name|knownSuffixes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"suffix test#1 failed!"
argument_list|,
literal|2
argument_list|,
name|split
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"suffix test#2 failed!"
argument_list|,
literal|"a"
argument_list|,
name|split
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"suffix test#3 failed!"
argument_list|,
literal|".1"
argument_list|,
name|split
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test with valid suffix
name|assertTrue
argument_list|(
literal|"suffix test#0 failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|hasSuffix
argument_list|(
literal|"a.1"
argument_list|,
name|knownSuffixes
argument_list|)
argument_list|)
expr_stmt|;
name|split
operator|=
name|WordListAnonymizerUtility
operator|.
name|extractSuffix
argument_list|(
literal|"/a/b.2"
argument_list|,
name|knownSuffixes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"suffix test#0 failed!"
argument_list|,
literal|2
argument_list|,
name|split
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"suffix test#1 failed!"
argument_list|,
literal|"/a/b"
argument_list|,
name|split
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"suffix test#2 failed!"
argument_list|,
literal|".2"
argument_list|,
name|split
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// test with invalid suffix
name|assertFalse
argument_list|(
literal|"suffix test#0 failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|hasSuffix
argument_list|(
literal|"a.b"
argument_list|,
name|knownSuffixes
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|split
operator|=
name|WordListAnonymizerUtility
operator|.
name|extractSuffix
argument_list|(
literal|"a.b"
argument_list|,
name|knownSuffixes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Exception expected!"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
name|String
index|[]
name|knownWords
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
decl_stmt|;
comment|// test with valid data
name|assertTrue
argument_list|(
literal|"data test#0 failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|isKnownData
argument_list|(
literal|"a"
argument_list|,
name|knownWords
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with valid data
name|assertTrue
argument_list|(
literal|"data test#1 failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|isKnownData
argument_list|(
literal|"b"
argument_list|,
name|knownWords
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with invalid data
name|assertFalse
argument_list|(
literal|"data test#2 failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|isKnownData
argument_list|(
literal|"c"
argument_list|,
name|knownWords
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with valid known word
name|assertTrue
argument_list|(
literal|"data test#3 failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|isKnownData
argument_list|(
literal|"job"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with invalid known word
name|assertFalse
argument_list|(
literal|"data test#4 failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|isKnownData
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test numeric data
name|assertFalse
argument_list|(
literal|"Numeric test failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|needsAnonymization
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test numeric data (unsupported)
name|assertTrue
argument_list|(
literal|"Numeric test failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|needsAnonymization
argument_list|(
literal|"123.456"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test text data
name|assertTrue
argument_list|(
literal|"Text test failed!"
argument_list|,
name|WordListAnonymizerUtility
operator|.
name|needsAnonymization
argument_list|(
literal|"123abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test {@link WordList} features like    *   - add words    *   - index     *   - contains    */
annotation|@
name|Test
DECL|method|testWordList ()
specifier|public
name|void
name|testWordList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test features with fresh state
name|WordList
name|wordList
init|=
operator|new
name|WordList
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Word list state incorrect"
argument_list|,
name|wordList
operator|.
name|isUpdated
argument_list|()
argument_list|)
expr_stmt|;
comment|// add some special word
name|String
name|test
init|=
literal|"abbracadabra"
decl_stmt|;
name|wordList
operator|.
name|add
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Word list failed to store"
argument_list|,
name|wordList
operator|.
name|contains
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list index failed"
argument_list|,
literal|0
argument_list|,
name|wordList
operator|.
name|indexOf
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list size failed"
argument_list|,
literal|1
argument_list|,
name|wordList
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Word list state incorrect"
argument_list|,
name|wordList
operator|.
name|isUpdated
argument_list|()
argument_list|)
expr_stmt|;
comment|// add already added word
name|wordList
operator|.
name|add
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list index failed"
argument_list|,
literal|0
argument_list|,
name|wordList
operator|.
name|indexOf
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list size failed"
argument_list|,
literal|1
argument_list|,
name|wordList
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Word list state incorrect"
argument_list|,
name|wordList
operator|.
name|isUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|test2
init|=
literal|"hakuna-matata"
decl_stmt|;
name|wordList
operator|.
name|add
argument_list|(
name|test2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Word list failed to store"
argument_list|,
name|wordList
operator|.
name|contains
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list index failed"
argument_list|,
literal|1
argument_list|,
name|wordList
operator|.
name|indexOf
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list size failed"
argument_list|,
literal|2
argument_list|,
name|wordList
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Word list state incorrect"
argument_list|,
name|wordList
operator|.
name|isUpdated
argument_list|()
argument_list|)
expr_stmt|;
comment|// test persistence
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testWordList"
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// define a state pool to help persist the wordlist
name|StatePool
name|pool
init|=
operator|new
name|StatePool
argument_list|()
decl_stmt|;
try|try
block|{
comment|// set the persistence directory
name|conf
operator|.
name|set
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|,
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|PERSIST_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// add the wordlist to the pool
name|pool
operator|.
name|addState
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|wordList
argument_list|)
expr_stmt|;
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
comment|// now clear the pool state
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
comment|// set reload to true
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|State
name|state
init|=
name|pool
operator|.
name|getState
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing state!"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect state class!"
argument_list|,
name|WordList
operator|.
name|class
argument_list|,
name|state
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|WordList
name|pList
init|=
operator|(
name|WordList
operator|)
name|state
decl_stmt|;
comment|// check size
name|assertEquals
argument_list|(
literal|"Word list size on reload failed"
argument_list|,
literal|2
argument_list|,
name|pList
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Word list state incorrect"
argument_list|,
name|pList
operator|.
name|isUpdated
argument_list|()
argument_list|)
expr_stmt|;
comment|// add already added word
name|pList
operator|.
name|add
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list index on reload failed"
argument_list|,
literal|0
argument_list|,
name|pList
operator|.
name|indexOf
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list size on reload failed"
argument_list|,
literal|2
argument_list|,
name|pList
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Word list state on reload incorrect"
argument_list|,
name|pList
operator|.
name|isUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|test3
init|=
literal|"disco-dancer"
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Word list failed to after reload"
argument_list|,
name|pList
operator|.
name|contains
argument_list|(
name|test3
argument_list|)
argument_list|)
expr_stmt|;
name|pList
operator|.
name|add
argument_list|(
name|test3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Word list failed to store on reload"
argument_list|,
name|pList
operator|.
name|contains
argument_list|(
name|test3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list index on reload failed"
argument_list|,
literal|2
argument_list|,
name|pList
operator|.
name|indexOf
argument_list|(
name|test3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list size on reload failed"
argument_list|,
literal|3
argument_list|,
name|pList
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Word list state on reload incorrect"
argument_list|,
name|pList
operator|.
name|isUpdated
argument_list|()
argument_list|)
expr_stmt|;
comment|// test previously added (persisted) word
name|assertTrue
argument_list|(
literal|"Word list failed to store on reload"
argument_list|,
name|pList
operator|.
name|contains
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Word list index on reload failed"
argument_list|,
literal|1
argument_list|,
name|pList
operator|.
name|indexOf
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link FileName#FileNameState} persistence with directories only.    */
annotation|@
name|Test
DECL|method|testFileNameStateWithDir ()
specifier|public
name|void
name|testFileNameStateWithDir
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test persistence
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testFileNameStateWithDir"
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the persistence directory
name|conf
operator|.
name|set
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|,
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|PERSIST_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// define a state pool to help persist the dirs
name|StatePool
name|pool
init|=
operator|new
name|StatePool
argument_list|()
decl_stmt|;
name|FileNameState
name|fState
init|=
operator|new
name|FileNameState
argument_list|()
decl_stmt|;
comment|// define the directory names
name|String
name|test1
init|=
literal|"test"
decl_stmt|;
name|String
name|test2
init|=
literal|"home"
decl_stmt|;
comment|// test dir only
name|WordList
name|dirState
init|=
operator|new
name|WordList
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|dirState
operator|.
name|add
argument_list|(
name|test1
argument_list|)
expr_stmt|;
name|dirState
operator|.
name|add
argument_list|(
name|test2
argument_list|)
expr_stmt|;
comment|// set the directory state
name|fState
operator|.
name|setDirectoryState
argument_list|(
name|dirState
argument_list|)
expr_stmt|;
try|try
block|{
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// add the wordlist to the pool
name|pool
operator|.
name|addState
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|fState
argument_list|)
expr_stmt|;
comment|// persist the state
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
comment|// now clear the pool state
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
comment|// set reload to true
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|State
name|state
init|=
name|pool
operator|.
name|getState
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing state!"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect state class!"
argument_list|,
name|FileNameState
operator|.
name|class
argument_list|,
name|state
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|FileNameState
name|newFState
init|=
operator|(
name|FileNameState
operator|)
name|state
decl_stmt|;
comment|// check the state contents
name|WordList
name|newStateWordList
init|=
name|newFState
operator|.
name|getDirectoryState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed to store on reload"
argument_list|,
name|newStateWordList
operator|.
name|contains
argument_list|(
name|test1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state index on reload failed"
argument_list|,
literal|0
argument_list|,
name|newStateWordList
operator|.
name|indexOf
argument_list|(
name|test1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed to store on reload"
argument_list|,
name|newStateWordList
operator|.
name|contains
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state index on reload failed"
argument_list|,
literal|1
argument_list|,
name|newStateWordList
operator|.
name|indexOf
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link FileName#FileNameState} persistence with files only.    */
annotation|@
name|Test
DECL|method|testFileNameStateWithFiles ()
specifier|public
name|void
name|testFileNameStateWithFiles
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test persistence
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testFileNameStateWithFiles"
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the persistence directory
name|conf
operator|.
name|set
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|,
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|PERSIST_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// define a state pool to help persist the filename parts
name|StatePool
name|pool
init|=
operator|new
name|StatePool
argument_list|()
decl_stmt|;
name|FileNameState
name|fState
init|=
operator|new
name|FileNameState
argument_list|()
decl_stmt|;
comment|// define the file names
name|String
name|test1
init|=
literal|"part-00.bzip"
decl_stmt|;
name|String
name|test2
init|=
literal|"file1.txt"
decl_stmt|;
comment|// test filenames only
name|WordList
name|fileNameState
init|=
operator|new
name|WordList
argument_list|(
literal|"files"
argument_list|)
decl_stmt|;
name|fileNameState
operator|.
name|add
argument_list|(
name|test1
argument_list|)
expr_stmt|;
name|fileNameState
operator|.
name|add
argument_list|(
name|test2
argument_list|)
expr_stmt|;
comment|// set the filename state
name|fState
operator|.
name|setDirectoryState
argument_list|(
name|fileNameState
argument_list|)
expr_stmt|;
try|try
block|{
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// add the wordlist to the pool
name|pool
operator|.
name|addState
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|fState
argument_list|)
expr_stmt|;
comment|// persist the state
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
comment|// now clear the pool state
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
comment|// set reload to true
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|State
name|state
init|=
name|pool
operator|.
name|getState
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing state!"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect state class!"
argument_list|,
name|FileNameState
operator|.
name|class
argument_list|,
name|state
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|FileNameState
name|newFState
init|=
operator|(
name|FileNameState
operator|)
name|state
decl_stmt|;
comment|// check the state contents
name|WordList
name|newFileWordList
init|=
name|newFState
operator|.
name|getDirectoryState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newFileWordList
operator|.
name|contains
argument_list|(
name|test1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|0
argument_list|,
name|newFileWordList
operator|.
name|indexOf
argument_list|(
name|test1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newFileWordList
operator|.
name|contains
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|1
argument_list|,
name|newFileWordList
operator|.
name|indexOf
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link FileName#FileNameState} persistence with files and directories.    */
annotation|@
name|Test
DECL|method|testFileNameState ()
specifier|public
name|void
name|testFileNameState
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test persistence
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testFileNameState"
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the persistence directory
name|conf
operator|.
name|set
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|,
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|PERSIST_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// define a state pool to help persist the filename parts
name|StatePool
name|pool
init|=
operator|new
name|StatePool
argument_list|()
decl_stmt|;
name|FileNameState
name|fState
init|=
operator|new
name|FileNameState
argument_list|()
decl_stmt|;
comment|// define the directory names
name|String
name|testD1
init|=
literal|"test"
decl_stmt|;
name|String
name|testD2
init|=
literal|"home"
decl_stmt|;
name|String
name|testD3
init|=
literal|"tmp"
decl_stmt|;
comment|// test dir only
name|WordList
name|dirState
init|=
operator|new
name|WordList
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|dirState
operator|.
name|add
argument_list|(
name|testD1
argument_list|)
expr_stmt|;
name|dirState
operator|.
name|add
argument_list|(
name|testD2
argument_list|)
expr_stmt|;
name|dirState
operator|.
name|add
argument_list|(
name|testD3
argument_list|)
expr_stmt|;
comment|// define the file names
name|String
name|testF1
init|=
literal|"part-00.bzip"
decl_stmt|;
name|String
name|testF2
init|=
literal|"file1.txt"
decl_stmt|;
name|String
name|testF3
init|=
literal|"tmp"
decl_stmt|;
comment|// test filenames only
name|WordList
name|fileNameState
init|=
operator|new
name|WordList
argument_list|(
literal|"files"
argument_list|)
decl_stmt|;
name|fileNameState
operator|.
name|add
argument_list|(
name|testF1
argument_list|)
expr_stmt|;
name|fileNameState
operator|.
name|add
argument_list|(
name|testF2
argument_list|)
expr_stmt|;
name|fileNameState
operator|.
name|add
argument_list|(
name|testF3
argument_list|)
expr_stmt|;
comment|// set the filename state
name|fState
operator|.
name|setFileNameState
argument_list|(
name|fileNameState
argument_list|)
expr_stmt|;
comment|// set the directory state
name|fState
operator|.
name|setDirectoryState
argument_list|(
name|dirState
argument_list|)
expr_stmt|;
try|try
block|{
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// add the wordlist to the pool
name|pool
operator|.
name|addState
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|fState
argument_list|)
expr_stmt|;
comment|// persist the state
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
comment|// now clear the pool state
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
comment|// set reload to true
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|State
name|state
init|=
name|pool
operator|.
name|getState
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing state!"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect state class!"
argument_list|,
name|FileNameState
operator|.
name|class
argument_list|,
name|state
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|FileNameState
name|newFState
init|=
operator|(
name|FileNameState
operator|)
name|state
decl_stmt|;
comment|// test filenames
name|WordList
name|newStateWordList
init|=
name|newFState
operator|.
name|getFileNameState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newStateWordList
operator|.
name|contains
argument_list|(
name|testF1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|0
argument_list|,
name|newStateWordList
operator|.
name|indexOf
argument_list|(
name|testF1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newStateWordList
operator|.
name|contains
argument_list|(
name|testF2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|1
argument_list|,
name|newStateWordList
operator|.
name|indexOf
argument_list|(
name|testF2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newStateWordList
operator|.
name|contains
argument_list|(
name|testF3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|2
argument_list|,
name|newStateWordList
operator|.
name|indexOf
argument_list|(
name|testF3
argument_list|)
argument_list|)
expr_stmt|;
comment|// test dirs
name|WordList
name|newDirWordList
init|=
name|newFState
operator|.
name|getDirectoryState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newDirWordList
operator|.
name|contains
argument_list|(
name|testD1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|0
argument_list|,
name|newDirWordList
operator|.
name|indexOf
argument_list|(
name|testD1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newDirWordList
operator|.
name|contains
argument_list|(
name|testD2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|1
argument_list|,
name|newDirWordList
operator|.
name|indexOf
argument_list|(
name|testD2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newDirWordList
operator|.
name|contains
argument_list|(
name|testD3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|2
argument_list|,
name|newDirWordList
operator|.
name|indexOf
argument_list|(
name|testD3
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link NodeName#NodeName} persistence with hostnames only.    */
annotation|@
name|Test
DECL|method|testNodeNameStateWithHostNameOnly ()
specifier|public
name|void
name|testNodeNameStateWithHostNameOnly
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test persistence
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testNodeNameStateWithHostNameOnly"
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the persistence directory
name|conf
operator|.
name|set
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|,
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|PERSIST_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// define a state pool to help persist the hostnames
name|StatePool
name|pool
init|=
operator|new
name|StatePool
argument_list|()
decl_stmt|;
name|NodeNameState
name|nState
init|=
operator|new
name|NodeNameState
argument_list|()
decl_stmt|;
comment|// define the host names
name|String
name|test1
init|=
literal|"abc123"
decl_stmt|;
name|String
name|test2
init|=
literal|"xyz789"
decl_stmt|;
comment|// test hostname only
name|WordList
name|hostNameState
init|=
operator|new
name|WordList
argument_list|(
literal|"hostname"
argument_list|)
decl_stmt|;
name|hostNameState
operator|.
name|add
argument_list|(
name|test1
argument_list|)
expr_stmt|;
name|hostNameState
operator|.
name|add
argument_list|(
name|test2
argument_list|)
expr_stmt|;
comment|// set the directory state
name|nState
operator|.
name|setHostNameState
argument_list|(
name|hostNameState
argument_list|)
expr_stmt|;
try|try
block|{
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// add the wordlist to the pool
name|pool
operator|.
name|addState
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|nState
argument_list|)
expr_stmt|;
comment|// persist the state
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
comment|// now clear the pool state
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
comment|// set reload to true
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|State
name|state
init|=
name|pool
operator|.
name|getState
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing state!"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect state class!"
argument_list|,
name|NodeNameState
operator|.
name|class
argument_list|,
name|state
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|NodeNameState
name|newNState
init|=
operator|(
name|NodeNameState
operator|)
name|state
decl_stmt|;
comment|// check the state contents
name|WordList
name|newStateWordList
init|=
name|newNState
operator|.
name|getHostNameState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Node state failed to store on reload"
argument_list|,
name|newStateWordList
operator|.
name|contains
argument_list|(
name|test1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Node state index on reload failed"
argument_list|,
literal|0
argument_list|,
name|newStateWordList
operator|.
name|indexOf
argument_list|(
name|test1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node state failed to store on reload"
argument_list|,
name|newStateWordList
operator|.
name|contains
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Node state index on reload failed"
argument_list|,
literal|1
argument_list|,
name|newStateWordList
operator|.
name|indexOf
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link NodeName#NodeNameState} persistence with racknames only.    */
annotation|@
name|Test
DECL|method|testNodeNameWithRackNamesOnly ()
specifier|public
name|void
name|testNodeNameWithRackNamesOnly
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test persistence
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testNodeNameWithRackNamesOnly"
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the persistence directory
name|conf
operator|.
name|set
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|,
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|PERSIST_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// define a state pool to help persist the rack names
name|StatePool
name|pool
init|=
operator|new
name|StatePool
argument_list|()
decl_stmt|;
name|NodeNameState
name|nState
init|=
operator|new
name|NodeNameState
argument_list|()
decl_stmt|;
comment|// define the rack names
name|String
name|test1
init|=
literal|"rack1"
decl_stmt|;
name|String
name|test2
init|=
literal|"rack2"
decl_stmt|;
comment|// test filenames only
name|WordList
name|rackNameState
init|=
operator|new
name|WordList
argument_list|(
literal|"racknames"
argument_list|)
decl_stmt|;
name|rackNameState
operator|.
name|add
argument_list|(
name|test1
argument_list|)
expr_stmt|;
name|rackNameState
operator|.
name|add
argument_list|(
name|test2
argument_list|)
expr_stmt|;
comment|// set the rackname state
name|nState
operator|.
name|setRackNameState
argument_list|(
name|rackNameState
argument_list|)
expr_stmt|;
try|try
block|{
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// add the wordlist to the pool
name|pool
operator|.
name|addState
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|nState
argument_list|)
expr_stmt|;
comment|// persist the state
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
comment|// now clear the pool state
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
comment|// set reload to true
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|State
name|state
init|=
name|pool
operator|.
name|getState
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing state!"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect state class!"
argument_list|,
name|NodeNameState
operator|.
name|class
argument_list|,
name|state
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|NodeNameState
name|newNState
init|=
operator|(
name|NodeNameState
operator|)
name|state
decl_stmt|;
comment|// check the state contents
name|WordList
name|newFileWordList
init|=
name|newNState
operator|.
name|getRackNameState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newFileWordList
operator|.
name|contains
argument_list|(
name|test1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|0
argument_list|,
name|newFileWordList
operator|.
name|indexOf
argument_list|(
name|test1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newFileWordList
operator|.
name|contains
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|1
argument_list|,
name|newFileWordList
operator|.
name|indexOf
argument_list|(
name|test2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test {@link NodeName#NodeNameState} persistence with hosts and racks.    */
annotation|@
name|Test
DECL|method|testNodeNameState ()
specifier|public
name|void
name|testNodeNameState
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test persistence
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|tempDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testNodeNameState"
argument_list|)
decl_stmt|;
name|tempDir
operator|=
name|lfs
operator|.
name|makeQualified
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the persistence directory
name|conf
operator|.
name|set
argument_list|(
name|StatePool
operator|.
name|DIR_CONFIG
argument_list|,
name|tempDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|PERSIST_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// define a state pool to help persist the node names.
name|StatePool
name|pool
init|=
operator|new
name|StatePool
argument_list|()
decl_stmt|;
name|NodeNameState
name|nState
init|=
operator|new
name|NodeNameState
argument_list|()
decl_stmt|;
comment|// define the rack names
name|String
name|testR1
init|=
literal|"rack1"
decl_stmt|;
name|String
name|testR2
init|=
literal|"rack2"
decl_stmt|;
name|String
name|testR3
init|=
literal|"rack3"
decl_stmt|;
name|WordList
name|rackState
init|=
operator|new
name|WordList
argument_list|(
literal|"rack"
argument_list|)
decl_stmt|;
name|rackState
operator|.
name|add
argument_list|(
name|testR1
argument_list|)
expr_stmt|;
name|rackState
operator|.
name|add
argument_list|(
name|testR2
argument_list|)
expr_stmt|;
name|rackState
operator|.
name|add
argument_list|(
name|testR3
argument_list|)
expr_stmt|;
name|String
name|testH1
init|=
literal|"host1"
decl_stmt|;
name|String
name|testH2
init|=
literal|"host2"
decl_stmt|;
name|String
name|testH3
init|=
literal|"host3"
decl_stmt|;
name|WordList
name|hostNameState
init|=
operator|new
name|WordList
argument_list|(
literal|"host"
argument_list|)
decl_stmt|;
name|hostNameState
operator|.
name|add
argument_list|(
name|testH1
argument_list|)
expr_stmt|;
name|hostNameState
operator|.
name|add
argument_list|(
name|testH2
argument_list|)
expr_stmt|;
name|hostNameState
operator|.
name|add
argument_list|(
name|testH3
argument_list|)
expr_stmt|;
comment|// set the filename state
name|nState
operator|.
name|setHostNameState
argument_list|(
name|hostNameState
argument_list|)
expr_stmt|;
name|nState
operator|.
name|setRackNameState
argument_list|(
name|rackState
argument_list|)
expr_stmt|;
try|try
block|{
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// add the wordlist to the pool
name|pool
operator|.
name|addState
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|nState
argument_list|)
expr_stmt|;
comment|// persist the state
name|pool
operator|.
name|persist
argument_list|()
expr_stmt|;
comment|// now clear the pool state
name|pool
operator|=
operator|new
name|StatePool
argument_list|()
expr_stmt|;
comment|// set reload to true
name|conf
operator|.
name|setBoolean
argument_list|(
name|StatePool
operator|.
name|RELOAD_CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// initialize the state-pool
name|pool
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|State
name|state
init|=
name|pool
operator|.
name|getState
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing state!"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect state class!"
argument_list|,
name|NodeNameState
operator|.
name|class
argument_list|,
name|state
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|NodeNameState
name|newNState
init|=
operator|(
name|NodeNameState
operator|)
name|state
decl_stmt|;
comment|// test nodenames
name|WordList
name|newHostWordList
init|=
name|newNState
operator|.
name|getHostNameState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newHostWordList
operator|.
name|contains
argument_list|(
name|testH1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|0
argument_list|,
name|newHostWordList
operator|.
name|indexOf
argument_list|(
name|testH1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newHostWordList
operator|.
name|contains
argument_list|(
name|testH2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|1
argument_list|,
name|newHostWordList
operator|.
name|indexOf
argument_list|(
name|testH2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newHostWordList
operator|.
name|contains
argument_list|(
name|testH3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|2
argument_list|,
name|newHostWordList
operator|.
name|indexOf
argument_list|(
name|testH3
argument_list|)
argument_list|)
expr_stmt|;
comment|// test racknames
name|WordList
name|newRackWordList
init|=
name|newNState
operator|.
name|getRackNameState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newRackWordList
operator|.
name|contains
argument_list|(
name|testR1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|0
argument_list|,
name|newRackWordList
operator|.
name|indexOf
argument_list|(
name|testR1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newRackWordList
operator|.
name|contains
argument_list|(
name|testR2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|1
argument_list|,
name|newRackWordList
operator|.
name|indexOf
argument_list|(
name|testR2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File state failed on reload"
argument_list|,
name|newRackWordList
operator|.
name|contains
argument_list|(
name|testR3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File state indexing on reload failed"
argument_list|,
literal|2
argument_list|,
name|newRackWordList
operator|.
name|indexOf
argument_list|(
name|testR3
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|tempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

