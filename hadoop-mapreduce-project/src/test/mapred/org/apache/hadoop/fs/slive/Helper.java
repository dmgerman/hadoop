begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.slive
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|slive
package|;
end_package

begin_comment
comment|/**  * Simple slive helper methods (may not exist in 0.20)  */
end_comment

begin_class
DECL|class|Helper
class|class
name|Helper
block|{
DECL|method|Helper ()
specifier|private
name|Helper
parameter_list|()
block|{    }
DECL|field|emptyStringArray
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|emptyStringArray
init|=
block|{}
decl_stmt|;
comment|/**    * Splits strings on comma and trims accordingly    *     * @param str    * @return array of split    */
DECL|method|getTrimmedStrings (String str)
specifier|static
name|String
index|[]
name|getTrimmedStrings
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|str
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|str
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|emptyStringArray
return|;
block|}
return|return
name|str
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s*,\\s*"
argument_list|)
return|;
block|}
comment|/**    * Converts a byte value into a useful string for output    *     * @param bytes    *     * @return String    */
DECL|method|toByteInfo (long bytes)
specifier|static
name|String
name|toByteInfo
parameter_list|(
name|long
name|bytes
parameter_list|)
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytes
operator|<
literal|0
condition|)
block|{
name|bytes
operator|=
literal|0
expr_stmt|;
block|}
name|str
operator|.
name|append
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|" bytes or "
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|bytes
operator|/
literal|1024
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|" kilobytes or "
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|bytes
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|" megabytes or "
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|bytes
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
literal|" gigabytes"
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Stringifys an array using the given separator.    *     * @param args    *          the array to format    * @param sep    *          the separator string to use (ie comma or space)    *     * @return String representing that array    */
DECL|method|stringifyArray (Object[] args, String sep)
specifier|static
name|String
name|stringifyArray
parameter_list|(
name|Object
index|[]
name|args
parameter_list|,
name|String
name|sep
parameter_list|)
block|{
name|StringBuilder
name|optStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|optStr
operator|.
name|append
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|!=
name|args
operator|.
name|length
condition|)
block|{
name|optStr
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|optStr
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

